[
  {
    "owner": "haydenbleasel",
    "repo": "next-forge",
    "content": "TITLE: Installing Next-Forge via NPX\nDESCRIPTION: Command to initialize a new project using next-forge, which clones the boilerplate repository to create a new Next.js application with the pre-configured template.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx next-forge@latest init\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with Content Collections\nDESCRIPTION: This TypeScript code in `packages/cms/index.ts` defines data fetching functions (`getPosts`, `getLatestPost`, `getPost`) for blog and legal content using the generated `allPosts` and `allLegals` collections imported from 'content-collections'. It replaces the previous CMS data fetching logic.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allPosts, allLegals } from 'content-collections';\n\nexport const blog = {\n  postsQuery: null,\n  latestPostQuery: null,\n  postQuery: (slug: string) => null,\n  getPosts: async () => allPosts,\n  getLatestPost: async () =>\n    allPosts.sort((a, b) => a.date.getTime() - b.date.getTime()).at(0),\n  getPost: async (slug: string) =>\n    allPosts.find(({ _meta }) => _meta.path === slug),\n};\n\nexport const legal = {\n  postsQuery: null,\n  latestPostQuery: null,\n  postQuery: (slug: string) => null,\n  getPosts: async () => allLegals,\n  getLatestPost: async () =>\n    allLegals.sort((a, b) => a.date.getTime() - b.date.getTime()).at(0),\n  getPost: async (slug: string) =>\n    allLegals.find(({ _meta }) => _meta.path === slug),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Querying the Database with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import a shared database client from the @repo/database package and fetch user records using Prisma ORM in a Next.js server component. The example is asynchronous, assumes Prisma is configured as described in the repository, and returns a list of user objects from the database. Dependencies are @repo/database (which exports a configured Prisma client) and Next.js server-side rendering. Inputs: none required; Output: fetched users array.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/database.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { database } from '@repo/database';\n\nconst Page = async () => {\n  const users = await database.user.findMany();\n\n  // Do something with users!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Chatbot API Route (TSX)\nDESCRIPTION: Defines a Next.js API route handler at 'apps/app/app/api/chat/route.ts' using the POST method. It parses the incoming request body to get messages, logs events using '@repo/observability/log', and utilizes the 'streamText' function from '@repo/ai' to generate and stream responses from the specified OpenAI chat model ('models.chat') with a predefined system prompt. It depends on the '@repo/ai' and '@repo/observability' packages and requires the OpenAI API key to be configured.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/recipes/ai-chatbot.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { streamText } from '@repo/ai';\nimport { log } from '@repo/observability/log';\nimport { models } from '@repo/ai/lib/models';\n\nexport const POST = async (req: Request) => {\n  const body = await req.json();\n\n  log.info('🤖 Chat request received.', { body });\n  const { messages } = body;\n\n  log.info('🤖 Generating response...');\n  const result = streamText({\n    model: models.chat,\n    system: 'You are a helpful assistant.',\n    messages,\n  });\n\n  log.info('🤖 Streaming response...');\n  return result.toDataStreamResponse();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth Server\nDESCRIPTION: Set up the Better Auth server configuration using the Prisma adapter and Next.js cookies plugin.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from 'better-auth';\nimport { nextCookies } from \"better-auth/next-js\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\nimport { database } from \"@repo/database\"\n\nexport const auth = betterAuth({\n  database: prismaAdapter(database, {\n    provider: 'postgresql',\n  }),\n  plugins: [\n    nextCookies()\n    // organization() // if you want to use organization plugin\n  ],\n  //...add more options here\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Page Metadata Generation with createMetadata (tsx)\nDESCRIPTION: This snippet demonstrates the basic usage of the `createMetadata` function from `@repo/seo/metadata` to define the title and description for a Next.js page. The exported `metadata` object is used by Next.js to populate the page's metadata tags. It relies on the `@repo/seo` package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/seo/metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx page.tsx\nimport { createMetadata } from '@repo/seo/metadata';\n\nexport const metadata = createMetadata({\n  title: 'My Page',\n  description: 'My page description',\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Database Connection Code for Prisma Postgres\nDESCRIPTION: Modify the database connection code to use Prisma Postgres with the Accelerate extension, highlighting the key changes to implement the new adapter.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport 'server-only';\n\nimport { env } from '@repo/env';\nimport { withAccelerate } from '@prisma/extension-accelerate';\nimport { PrismaClient } from '@prisma/client';\n\nexport const database = new PrismaClient().$extends(withAccelerate());\n```\n\n----------------------------------------\n\nTITLE: Adding an Image to Page Metadata with createMetadata (tsx)\nDESCRIPTION: This snippet shows how to include an image in the page metadata using the `createMetadata` function. By adding the `image` property with a path to the image file, it leverages the function's ability to merge this with default metadata settings. This is typically used for social media previews. Depends on `@repo/seo/metadata`.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/seo/metadata.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx page.tsx {6}\nimport { createMetadata } from '@repo/seo/metadata';\n\nexport const metadata = createMetadata({\n  title: 'My Page',\n  description: 'My page description',\n  image: '/my-page-image.png',\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating the Chatbot into the Main App Page (TSX)\nDESCRIPTION: Updates the main application page component ('App') located at 'apps/app/app/(authenticated)/page.tsx'. This server component performs authentication using '@repo/auth/server', retrieves the organization ID ('orgId'), and renders the application layout including a 'Header' and the 'Chatbot' UI component. If the user is not authenticated or associated with an organization, it displays a 'not found' page. It also sets the page metadata (title and description).\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/recipes/ai-chatbot.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from '@repo/auth/server';\nimport type { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { Chatbot } from './components/chatbot';\nimport { Header } from './components/header';\n\nconst title = 'Acme Inc';\nconst description = 'My application.';\n\nexport const metadata: Metadata = {\n  title,\n  description,\n};\n\nconst App = async () => {\n  const { orgId } = await auth();\n\n  if (!orgId) {\n    notFound();\n  }\n\n  return (\n    <>\n      <Header pages={['Building Your Application']} page=\"AI Chatbot\" />\n      <Chatbot />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining the Chatbot UI Component (TSX)\nDESCRIPTION: Creates a React client component 'Chatbot' for the user interface, located at 'apps/app/app/(authenticated)/components/chatbot.tsx'. It utilizes the 'useChat' hook from '@repo/ai/lib/react' for managing chat state and interactions, connecting to the '/api/chat' endpoint. The UI is built using 'Thread' and 'Message' components from '@repo/ai' for displaying the conversation, and 'Button' and 'Input' components from '@repo/design-system'. Error handling is integrated via 'handleError', and 'lucide-react' provides the send icon.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/recipes/ai-chatbot.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { Message } from '@repo/ai/components/message';\nimport { Thread } from '@repo/ai/components/thread';\nimport { useChat } from '@repo/ai/lib/react';\nimport { Button } from '@repo/design-system/components/ui/button';\nimport { Input } from '@repo/design-system/components/ui/input';\nimport { handleError } from '@repo/design-system/lib/utils';\nimport { SendIcon } from 'lucide-react';\n\nexport const Chatbot = () => {\n  const { messages, input, handleInputChange, isLoading, handleSubmit } =\n    useChat({\n      onError: handleError,\n      api: '/api/chat',\n    });\n\n  return (\n    <div className=\"flex h-[calc(100vh-64px-16px)] flex-col divide-y overflow-hidden\">\n      <Thread>\n        {messages.map((message) => (\n          <Message key={message.id} data={message} />\n        ))}\n      </Thread>\n      <form\n        onSubmit={handleSubmit}\n        className=\"flex shrink-0 items-center gap-2 px-8 py-4\"\n        aria-disabled={isLoading}\n      >\n        <Input\n          placeholder=\"Ask a question!\"\n          value={input}\n          onChange={handleInputChange}\n        />\n        <Button type=\"submit\" size=\"icon\" disabled={isLoading}>\n          <SendIcon className=\"h-4 w-4\" />\n        </Button>\n      </form>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Database Migration with Prisma - Shell\nDESCRIPTION: This snippet shows how to scaffold and migrate the database schema for next-forge using Prisma, by running the defined migration command. It depends on a valid Prisma configuration (schema.prisma) and a package manager (here pnpm). It is to be executed within the project's root or database package directory to ensure your database structure matches the project requirements.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/setup/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm migrate\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Middleware\nDESCRIPTION: Modify the auth middleware to work with Better Auth for protected routes.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from \"next/server\";\nimport { NextResponse } from 'next/server';\n\nconst isProtectedRoute = (request: NextRequest) => {\n  return request.url.startsWith(\"/dashboard\"); // change this to your protected route\n}\n\nexport const authMiddleware = async (request: NextRequest) => {\n  const url = new URL('/api/auth/get-session', request.nextUrl.origin);\n  const response = await fetch(url, {\n    headers: {\n      cookie: request.headers.get('cookie') || '',\n    },\n  });\n\n  const session = await response.json();\n  \n  if (isProtectedRoute(request) && !session) {\n    return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n  }\n  \n  return NextResponse.next();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sitemap with Next.js in TypeScript\nDESCRIPTION: This code snippet represents the structure of a sitemap.ts file in Next.js that generates a sitemap by scanning app and content directories. It collects page routes, blog posts, and legal pages, then combines them into a single sitemap with full URLs and lastModified timestamps.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/seo/sitemap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// sitemap.ts\n\nimport { MetadataRoute } from 'next';\nimport fs from 'fs';\nimport path from 'path';\n\nfunction getSitemap(): MetadataRoute.Sitemap {\n  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://example.com';\n\n  // Collect page routes\n  const pageRoutes = fs.readdirSync(path.join(process.cwd(), 'app'))\n    .filter(dir => !dir.startsWith('_') && !dir.startsWith('('))\n    .map(dir => `/${dir}`);\n\n  // Collect blog posts\n  const blogPosts = fs.readdirSync(path.join(process.cwd(), 'content', 'blog'))\n    .filter(file => !file.startsWith('_') && !file.startsWith('(') && !fs.statSync(path.join(process.cwd(), 'content', 'blog', file)).isDirectory())\n    .map(file => `/blog/${file.replace('.mdx', '')}`);\n\n  // Collect legal pages\n  const legalPages = fs.readdirSync(path.join(process.cwd(), 'content', 'legal'))\n    .filter(file => !file.startsWith('_') && !file.startsWith('(') && !fs.statSync(path.join(process.cwd(), 'content', 'legal', file)).isDirectory())\n    .map(file => `/legal/${file.replace('.mdx', '')}`);\n\n  // Combine all routes\n  const allRoutes = [\n    '',\n    ...pageRoutes,\n    ...blogPosts,\n    ...legalPages\n  ];\n\n  // Generate sitemap entries\n  return allRoutes.map(route => ({\n    url: `${baseUrl}${route}`,\n    lastModified: new Date()\n  }));\n}\n\nexport default getSitemap;\n```\n\n----------------------------------------\n\nTITLE: Searching with Fuse.js in a TypeScript Application\nDESCRIPTION: This TypeScript snippet initializes Fuse.js with a sample dataset and specifies which object fields ('name', 'email') to search. The configuration uses options like minMatchCharLength and threshold for search performance and accuracy tuning. It demonstrates importing Fuse, setting up data and options, executing a search, and outputting the results, requiring the 'fuse.js' dependency installed.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/fuse.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Fuse from 'fuse.js';\n\nconst data = [\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\n  { id: 2, name: 'Jane Doe', email: 'jane.doe@example.com' },\n];\n\nconst fuse = new Fuse(data, {\n  keys: ['name', 'email'],\n  minMatchCharLength: 1,\n  threshold: 0.3,\n});\n\nconst results = fuse.search('john');\n\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Setting up Auth.js route handler\nDESCRIPTION: Next.js API route handler for Auth.js that exposes the necessary GET and POST handlers for authentication routes.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { handlers } from \"@repo/auth\"\n\nexport const { GET, POST } = handlers;\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy (CSP) with Nosecone in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Content Security Policy (CSP) using Nosecone options. It imports types and defaults from '@nosecone/next', merges them with custom directives for 'scriptSrc', 'connectSrc', 'workerSrc', 'imgSrc', and 'objectSrc' to allow resources from specific origins like Google Tag Manager, Clerk, and Vercel Analytics. It includes explanations for using 'unsafe-inline' due to compatibility issues and conditionally sets 'upgradeInsecureRequests' based on the NODE_ENV.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/headers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport type { NoseconeOptions } from '@nosecone/next';\nimport { defaults as noseconeDefaults } from '@nosecone/next';\n\nconst noseconeOptions: NoseconeOptions = {\n  ...noseconeDefaults,\n  contentSecurityPolicy: {\n    ...noseconeDefaults.contentSecurityPolicy,\n    directives: {\n      ...noseconeDefaults.contentSecurityPolicy.directives,\n      scriptSrc: [\n        // We have to use unsafe-inline because next-themes and Vercel Analytics\n        // do not support nonce\n        // https://github.com/pacocoursey/next-themes/issues/106\n        // https://github.com/vercel/analytics/issues/122\n        //...noseconeDefaults.contentSecurityPolicy.directives.scriptSrc,\n        \"'self'\",\n        \"'unsafe-inline'\",\n        \"https://www.googletagmanager.com\",\n        \"https://*.clerk.accounts.dev\",\n        \"https://va.vercel-scripts.com\",\n      ],\n      connectSrc: [\n        ...noseconeDefaults.contentSecurityPolicy.directives.connectSrc,\n        \"https://*.clerk.accounts.dev\",\n        \"https://*.google-analytics.com\",\n        \"https://clerk-telemetry.com\",\n      ],\n      workerSrc: [\n        ...noseconeDefaults.contentSecurityPolicy.directives.workerSrc,\n        \"blob:\",\n        \"https://*.clerk.accounts.dev\"\n      ],\n      imgSrc: [\n        ...noseconeDefaults.contentSecurityPolicy.directives.imgSrc,\n        \"https://img.clerk.com\"\n      ],\n      objectSrc: [\n        ...noseconeDefaults.contentSecurityPolicy.directives.objectSrc,\n      ],\n      // We only set this in production because the server may be started\n      // without HTTPS\n      upgradeInsecureRequests: process.env.NODE_ENV === \"production\",\n    },\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Components for MDX Usage in Fumadocs\nDESCRIPTION: This TSX snippet, typically found in a Next.js page file (e.g., `app/docs/[[...slug]]/page.tsx`), demonstrates how to make components like `Tabs` and `Tab` available globally within MDX content without needing explicit imports in each MDX file. Components are passed via the `components` prop to the `MDX` component.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// app/docs/[[...slug]]/page.tsx\nimport { Tabs, Tab } from 'fumadocs-ui/components/tabs';\n \n<MDX components={{ Tabs, Tab }} />;\n```\n\n----------------------------------------\n\nTITLE: Defining a Post Model in Prisma Schema (Prisma DSL)\nDESCRIPTION: This snippet shows how to add a new model named 'Post' to the Prisma schema definition file. This model includes id, title, JSON content, created, and updated timestamp fields, each utilizing specific Prisma field attributes for unique IDs and timestamps. The schema must live in 'packages/database/prisma/schema.prisma.' Inputs: none; Output: new table and generated TypeScript types after migration. Dependency: Prisma ORM.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/database.mdx#2025-04-23_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        String   @id @default(cuid())\n  title     String\n  content   Json\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Rate Limiting to an API Route using createRateLimiter (TypeScript)\nDESCRIPTION: This snippet demonstrates how to apply rate limiting to a specific API route (`/api/chat`) within the `next-forge` application. It uses the `createRateLimiter` function from `@repo/rate-limit` to instantiate a new rate limiter with a sliding window algorithm (10 requests per 10 seconds). The rate limit is applied based on the current user's ID (`ai_${user?.id}`). If the rate limit is exceeded (`!success`), it returns a 429 Too Many Requests response.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/rate-limiting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts apps/app/api/chat/route.ts\nimport { currentUser } from '@repo/auth/server';\nimport { createRateLimiter, slidingWindow } from '@repo/rate-limit';\n\nexport const GET = async (request: NextRequest) => {\n  const user = await currentUser();\n\n  const rateLimiter = createRateLimiter({\n    limiter: slidingWindow(10, '10 s'),\n  });\n\n  const { success } = await rateLimiter.limit(`ai_${user?.id}`);\n\n  if (!success) {\n    return new Response(\n      JSON.stringify({ error: \"Too many requests\" }), \n      { status: 429 }\n    );\n  }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Clerk Dependencies\nDESCRIPTION: Remove existing Clerk dependencies from the auth package using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @clerk/nextjs @clerk/themes @clerk/types --filter @repo/auth\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collections for Posts and Legal Pages\nDESCRIPTION: This TypeScript code in `packages/cms/collections.ts` defines two content collections, 'posts' and 'legal', using `@content-collections/core`. It specifies the source directories, included MDX files, frontmatter schema (using Zod), and a transform function to compile MDX content using `@content-collections/mdx` and remap fields (`title` to `_title`, `_meta.path` to `_slug`).\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from '@content-collections/core';\nimport { compileMDX } from '@content-collections/mdx';\n\nconst posts = defineCollection({\n  name: 'posts',\n  directory: 'content/blog',\n  include: '**/*.mdx',\n  schema: (z) => ({\n    title: z.string(),\n    description: z.string(),\n    date: z.string(),\n    image: z.string(),\n    authors: z.array(z.string()),\n    tags: z.array(z.string()),\n  }),\n  transform: async ({ title, ...page }, context) => {\n    const body = await context.cache(page.content, async () =>\n      compileMDX(context, page)\n    );\n\n    return {\n      ...page,\n      _title: title,\n      _slug: page._meta.path,\n      body,\n    };\n  },\n});\n\nconst legals = defineCollection({\n  name: 'legal',\n  directory: 'content/legal',\n  include: '**/*.mdx',\n  schema: (z) => ({\n    title: z.string(),\n    description: z.string(),\n    date: z.string(),\n  }),\n  transform: async ({ title, ...page }, context) => {\n    const body = await context.cache(page.content, async () =>\n      compileMDX(context, page)\n    );\n\n    return {\n      ...page,\n      _title: title,\n      _slug: page._meta.path,\n      body,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [posts, legals],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flags with createFlag - TypeScript\nDESCRIPTION: Defines new feature flags by invoking the createFlag utility, which integrates with authentication and PostHog, and supports Vercel Toolbar overrides. The sample updates the packages/feature-flags/index.ts file. Ensure the key used matches the one created in PostHog for consistency. No external input parameters; the flag is enabled globally in this example. Requires the createFlag function, available from ./lib/create-flag.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/flags.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFlag } from './lib/create-flag';\n\nexport const showBetaFeature = createFlag('showBetaFeature');\nexport const showAnalyticsFeature = createFlag('showAnalyticsFeature');\n```\n\n----------------------------------------\n\nTITLE: Initializing Hypertune SDK Instance on the Server in TypeScript\nDESCRIPTION: Defines an asynchronous `getHypertune` function in `packages/feature-flags/lib/getHypertune.ts`. This server-only function initializes the Hypertune SDK using the configured token, fetches user/org context from `@repo/auth/server`, applies Vercel toolbar overrides, and returns a root Hypertune instance ready for flag evaluation. It uses `unstable_noStore` to prevent caching and `server-only` to ensure it doesn't run on the client.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport 'server-only';\nimport { auth } from '@repo/auth/server';\nimport { unstable_noStore as noStore } from 'next/cache';\nimport type { ReadonlyHeaders } from 'next/dist/server/web/spec-extension/adapters/headers';\nimport type { ReadonlyRequestCookies } from 'next/dist/server/web/spec-extension/adapters/request-cookies';\nimport { createSource } from '../generated/hypertune';\nimport { getVercelOverride } from '../generated/hypertune.vercel';\nimport { keys } from '../keys';\n\nconst hypertuneSource = createSource({\n  token: keys().NEXT_PUBLIC_HYPERTUNE_TOKEN,\n});\n\nexport default async function getHypertune(params?: {\n  headers?: ReadonlyHeaders;\n  cookies?: ReadonlyRequestCookies;\n}) {\n  noStore();\n  await hypertuneSource.initIfNeeded(); // Check for flag updates\n\n  const { userId, orgId, sessionId } = await auth();\n\n  // Respect flag overrides set by the Vercel Toolbar\n  hypertuneSource.setOverride(await getVercelOverride());\n\n  return hypertuneSource.root({\n    args: {\n      context: {\n        environment: process.env.NODE_ENV,\n        user: { id: userId ?? '', sessionId: sessionId ?? '' },\n        org: { id: orgId ?? '' },\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Caching with Prisma Accelerate\nDESCRIPTION: Example of how to cache a database query using Prisma Accelerate's swr (stale-while-revalidate) and ttl (time-to-live) options to improve performance.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst pages = await prisma.page.findMany({\n  swr: 60, // 60 seconds\n  ttl: 60  // 60 seconds\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Tailwind Theme Colors Programmatically in React Components - TypeScript\nDESCRIPTION: This snippet illustrates how to programmatically access color variables from a shared Tailwind config utility (imported as tailwind from '@repo/tailwind-config') and apply them directly to inline style properties within a React component. The key dependency is the @repo/tailwind-config package, which supplies the theme color values. The component accepts no parameters and outputs a styled div, with colors explicitly set via style, enabling more granular dynamic theming.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/colors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { tailwind } from '@repo/tailwind-config';\n\nexport const MyComponent = () => (\n  <div style={{\n    background: tailwind.theme.colors.background,\n    color: tailwind.theme.colors.muted.foreground,\n  }}>\n    <p>I'm using styles directly from the Tailwind config!</p>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Text with AI in next-forge\nDESCRIPTION: Example of using the generateText function from the @repo/ai package to interact with AI models. This demonstrates the basic setup required to generate text using the pre-configured AI model.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/ai.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateText } from '@repo/ai';\nimport { provider } from '@repo/ai/lib/provider';\nimport { models } from '@repo/ai/lib/models';\n\nconst response = await generateText({\n  model: models.chat,\n  prompt: 'Hello, world!',\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Collaborative Rich-Text Editor with Tiptap and Liveblocks\nDESCRIPTION: This code shows how to create a collaborative rich-text editor with floating comments using Tiptap and Liveblocks integration. It sets up a multiplayer text editor with real-time synchronization across users.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/collaboration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLiveblocksExtension, FloatingComposer, FloatingThreads } from \"@liveblocks/react-tiptap\";\nimport { useThreads, useEditor, EditorContent } from \"@tiptap/react\";\nimport StarterKit from \"@tiptap/starter-kit\";\n\nexport function Editor() {\n  const { threads } = useThreads();\n  const liveblocks = useLiveblocksExtension();\n\n  // Set up your multiplayer text editor\n  const editor = useEditor({\n    extensions: [\n      liveblocks,\n      StarterKit.configure({ history: false }),\n    ],\n    immediatelyRender: false,\n  });\n\n  return (\n    <div>\n      <EditorContent editor={editor} />\n      <FloatingThreads\n        editor={editor}\n        threads={threads}\n      />\n      <FloatingComposer editor={editor} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Font with Google Font Acme in Next.js\nDESCRIPTION: This TypeScript snippet demonstrates how to replace the default 'sans' font within the `packages/design-system/lib/fonts.ts` configuration file. It imports the 'Acme' font from the `next/font/google` package, configures it for the 'latin' subset, and assigns it to the CSS variable `--font-sans`. This variable allows the font to be easily integrated into the application's styling, often via Tailwind CSS configuration.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/typography.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Acme } from 'next/font/google';\n\nconst sans = Acme({ subsets: ['latin'], variable: '--font-sans' });\n```\n\n----------------------------------------\n\nTITLE: Generating a Vercel Deployment Button with Dynamic URL Parameters - React (JavaScript)\nDESCRIPTION: This snippet defines a React functional component, \"VercelButton\", that programmatically constructs a specialized Vercel deployment URL with various query parameters for project configuration, including build commands, description, image, title, URLs, a comprehensive environment variable list, and integration details. The component returns a styled link containing Vercel's standard deployment button image, allowing instant deployment of the specified template when clicked. Dependencies: React (assumed from JSX usage), URL API (browser), and Vercel deployment conventions; all key customization parameters are set explicitly. Inputs are static within the code (no props), outputs a JSX anchor element containing the button image. This snippet is intended for embedding in template repositories to simplify deployment for end users.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/snippets/vercel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const VercelButton = () => {\n  const url = new URL('https://vercel.com/new/clone');\n\n  url.searchParams.set('build-command', 'turbo build');\n  url.searchParams.set('demo-description', 'Comprehensive Turborepo template for Next.js apps.');\n  url.searchParams.set('demo-image', '//images.ctfassets.net/e5382hct74si/2XyyD0ftVZoyj9fHabQB2G/8e5779630676c645214ddb3729d8ff96/opengraph-image.png');\n  url.searchParams.set('demo-title', 'next-forge');\n  url.searchParams.set('demo-url', 'https://www.next-forge.com/');\n  url.searchParams.set('env', [\n    'DATABASE_URL',\n    'RESEND_TOKEN',\n    'RESEND_FROM',\n    'CLERK_SECRET_KEY',\n    'CLERK_WEBHOOK_SECRET',\n    'STRIPE_SECRET_KEY',\n    'STRIPE_WEBHOOK_SECRET',\n    \"BASEHUB_TOKEN\",\n    'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',\n    'NEXT_PUBLIC_CLERK_SIGN_IN_URL',\n    'NEXT_PUBLIC_CLERK_SIGN_UP_URL',\n    'NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL',\n    'NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL',\n    'NEXT_PUBLIC_POSTHOG_KEY',\n    'NEXT_PUBLIC_POSTHOG_HOST',\n    'NEXT_PUBLIC_APP_URL',\n    'NEXT_PUBLIC_WEB_URL',\n    'NEXT_PUBLIC_DOCS_URL',\n  ].join(','));\n  url.searchParams.set('envLink', 'https://docs.next-forge.com/setup#accounts');\n  url.searchParams.set('from', 'templates');\n  url.searchParams.set('project-name', 'next-forge');\n  url.searchParams.set('repository-name', 'next-forge');\n  url.searchParams.set('repository-url', 'https://github.com/haydenbleasel/next-forge');\n  url.searchParams.set('root-directory', 'apps/app');\n  url.searchParams.set('skippable-integrations', '1');\n\n  return (\n    <a href={url.toString()}>\n      <img src=\"https://vercel.com/button\" alt=\"Deploy with Vercel\" />\n    </a>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Fumadocs Application using CLI\nDESCRIPTION: This shell command uses pnpm to execute the `create-fumadocs-app` script, scaffolding a new Fumadocs project. It's the initial step for setting up a documentation site with Fumadocs.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm create fumadocs-app\n```\n\n----------------------------------------\n\nTITLE: Creating Paddle Checkout Hook in React\nDESCRIPTION: Implement a custom React hook to initialize Paddle for client-side checkout functionality.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport {\n  type Environments,\n  type Paddle,\n  initializePaddle,\n} from '@paddle/paddle-js';\nimport { useEffect, useState } from 'react';\nimport { keys } from './keys';\n\nconst { NEXT_PUBLIC_PADDLE_CLIENT_TOKEN, NEXT_PUBLIC_PADDLE_ENV } = keys();\n\nexport function usePaddle() {\n  const [paddle, setPaddle] = useState<Paddle>();\n\n  useEffect(() => {\n    initializePaddle({\n      environment: NEXT_PUBLIC_PADDLE_ENV,\n      token: NEXT_PUBLIC_PADDLE_CLIENT_TOKEN,\n      checkout: {\n        settings: {\n          variant: 'one-page',\n        },\n      },\n    }).then((paddleInstance: Paddle | undefined) => {\n      if (paddleInstance) {\n        setPaddle(paddleInstance);\n      }\n    });\n  }, []);\n\n  return paddle;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collaborative Comments with Liveblocks Components\nDESCRIPTION: This snippet demonstrates how to implement a comments section using Liveblocks' Thread and Composer components. The useThreads hook retrieves all comment threads to display them in the UI.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/collaboration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreads } from \"@liveblocks/react/suspense\";\nimport { Thread, Composer } from \"@liveblocks/react-ui\";\n\nfunction Comments() {\n  // Get each thread of comments and render them\n  const { threads } = useThreads();\n\n  return (\n    <div>\n      {threads.map((thread) => (\n        <Thread key={thread.id} thread={thread} />\n      ))}\n      <Composer />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PostHog Analytics Object in next-forge\nDESCRIPTION: Demonstrates how to import the analytics object for both server-side and client-side code in next-forge project.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/analytics/product.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// For server-side code\nimport { analytics } from '@repo/analytics/posthog/server';\n\n// For client-side code\nimport { analytics } from '@repo/analytics/posthog/client';\n```\n\n----------------------------------------\n\nTITLE: Generating Low-Quality Image Placeholders (LQIP) in Collection Transform\nDESCRIPTION: This TypeScript snippet enhances the 'posts' collection's `transform` function in `collections.ts`. It uses the 'sqip' library to generate a low-quality image placeholder (LQIP) as a data URI for the image specified in the frontmatter (`page.image`). The result is cached and added to the transformed data as `imageBlur`.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sqip } from 'sqip';\n\nconst posts = defineCollection({\n  // ...\n  transform: async (page, context) => {\n    // ...\n\n    const blur = await context.cache(page._meta.path, async () =>\n      sqip({\n        input: `./public/${page.image}`,\n        plugins: [\n          'sqip-plugin-primitive',\n          'sqip-plugin-svgo',\n          'sqip-plugin-data-uri',\n        ],\n      })\n    );\n\n    const result = Array.isArray(blur) ? blur[0] : blur;\n\n    return {\n      // ...\n      image: page.image,\n      imageBlur: result.metadata.dataURIBase64 as string,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with pnpm (Shell)\nDESCRIPTION: This command-line snippet illustrates how to deploy schema changes to the database using a package script. The 'pnpm migrate' command will execute formatting, generate the Prisma client, and push schema updates as described. Dependencies: pnpm, Prisma CLI, and defined migration scripts in package.json. Input: Executed via terminal; Output: Performs database update and code generation steps.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/database.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with Both Accelerate and Pulse\nDESCRIPTION: Update the database connection code to include both the Accelerate and Pulse extensions, enabling caching and real-time database events.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport 'server-only';\nimport { withPulse } from '@prisma/extension-pulse';\nimport { withAccelerate } from '@prisma/extension-accelerate';\nimport { PrismaClient } from '@prisma/client';\nimport { env } from '@repo/env';\n\nexport const database = new PrismaClient()\n  .$extends(withAccelerate())\n  .$extends(withPulse({ apiKey: env.PULSE_API_KEY })) ;\n```\n\n----------------------------------------\n\nTITLE: Checking IP Location Data from Arcjet Decision in TypeScript\nDESCRIPTION: This snippet demonstrates how to access and conditionally check IP geolocation fields (city, region, country, continent) from the Arcjet decision object returned by `aj.protect(req)`. It uses helper methods like `hasCity()`, `hasRegion()`, `hasCountry()`, and `hasContinent()` to safely check if the fields exist before comparing their values. This allows for creating custom responses based on the user's detected location.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/ip-geolocation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// ...\nconst decision = await aj.protect(req);\n\nif (decision.ip.hasCity() && decision.ip.city === \"San Francisco\") {\n  // Create a custom response for San Francisco\n}\n\nif (decision.ip.hasRegion() && decision.ip.region === \"California\") {\n  // Create a custom response for California\n}\n\nif (decision.ip.hasCountry() && decision.ip.country === \"US\") {\n  // Create a custom response for the United States\n}\n\nif (decision.ip.hasContinent() && decision.ip.continent === \"NA\") {\n  // Create a custom response for North America\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files via Server Actions in Next.js using TSX\nDESCRIPTION: This snippet demonstrates how to upload a file within a Next.js application using a Server Action. It defines a React component `Form` containing an asynchronous function `uploadImage`. This function, marked with `'use server'`, receives `FormData`, extracts the image file, uses the `put` function from `@repo/storage` to upload it to Vercel Blob with public access, revalidates the root path cache, and returns the upload result (blob). The form itself triggers this server action upon submission.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx page.tsx\nimport { put } from '@repo/storage';\nimport { revalidatePath } from 'next/cache';\n \nexport async function Form() {\n  async function uploadImage(formData: FormData) {\n    'use server';\n    const imageFile = formData.get('image') as File;\n    const blob = await put(imageFile.name, imageFile, {\n      access: 'public',\n    });\n    revalidatePath('/');\n    return blob;\n  }\n \n  return (\n    <form action={uploadImage}>\n      <label htmlFor=\"image\">Image</label>\n      <input type=\"file\" id=\"image\" name=\"image\" required />\n      <button>Upload</button>\n    </form>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Collaborative Input Fields with Liveblocks Storage\nDESCRIPTION: This code shows how to create a shared input field that multiple users can edit in real-time. It uses Liveblocks' useStorage hook to retrieve the current value and useMutation to update the shared state.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/collaboration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStorage, useMutation } from \"@liveblocks/react/suspense\";\n\nfunction CollaborativeInput() {\n  // Get the input's value\n  const inputValue = useStorage((root) => root.inputValue);\n  \n  // Set the input's value\n  const setValue = useMutation(({ storage }), newValue) => {\n    storage.set(\"inputValue\", newValue);\n  }, []);\n  \n  return <input value={inputValue} onChange={(e) => setValue(e.target.value)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization Middleware in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the internationalization middleware in a Next.js application. It automatically detects the user's language and routes them to the appropriate language-specific page.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/internationalization.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { internationalizationMiddleware } from '@repo/internationalization';\n\nexport default internationalizationMiddleware;\n```\n\n----------------------------------------\n\nTITLE: Using Internationalization in Next.js Page Component\nDESCRIPTION: This snippet shows how to use the internationalization package in a Next.js page component. It imports the dictionary and renders content based on the current locale.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/internationalization.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getDictionary } from '@repo/internationalization';\n\ntype HomeProps = {\n  params: Promise<{\n    locale: string;\n  }>;\n};\n\nconst Home = async ({ params }: HomeProps) => {\n  const { locale } = await params;\n  const dictionary = await getDictionary(locale);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Database Connection Code for PlanetScale\nDESCRIPTION: TypeScript implementation for database connection using PlanetScale adapter and Prisma client\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/planetscale.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only';\n\nimport { Client, connect } from '@planetscale/database';\nimport { PrismaPlanetScale } from '@prisma/adapter-planetscale';\nimport { PrismaClient } from '@prisma/client';\nimport { env } from '@repo/env';\n\ndeclare global {\n  var cachedPrisma: PrismaClient | undefined;\n}\n\nconst client = connect({ url: env.DATABASE_URL });\nconst adapter = new PrismaPlanetScale(client);\n\nexport const database = new PrismaClient({ adapter });\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional Email with React Template in Next.js\nDESCRIPTION: This code snippet shows how to send a transactional email using a React email template with Resend. It imports both the resend object and a specific email template (ContactTemplate) from the @repo/email package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/email.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { resend } from '@repo/email';\nimport { ContactTemplate } from '@repo/email/templates/contact';\n\nawait resend.emails.send({\n  from: 'sender@acme.com',\n  to: 'recipient@acme.com',\n  subject: 'The email subject',\n  react: <ContactTemplate name={name} email={email} message={message} />,\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Capturing Exceptions with Sentry in Next.js (TypeScript/TSX)\nDESCRIPTION: This code snippet shows how to explicitly report an exception to Sentry within a Next.js page or component using the captureException function from @sentry/nextjs. The only dependency is @sentry/nextjs, which must be installed and configured. It demonstrates capturing a new error instance with a custom message; the function can be called from any context where granular error reporting is desirable. The input is an Error object (here, a new Error with a string message) and the output is an event logged to Sentry; there are no synchronous return values. The snippet is suitable for both server and client sides but is shown here using .tsx code semantics.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/observability/error-capture.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { captureException } from '@sentry/nextjs';\n\ncaptureException(new Error('My error message'));\n```\n\n----------------------------------------\n\nTITLE: Updating Database Connection Code for Turso\nDESCRIPTION: Changes to the database connection code to use the Turso client instead of Prisma.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport \"server-only\";\n\nimport { createClient } from \"@libsql/client\";\nimport { env } from \"@repo/env\";\n\nconst libsql = createClient({\n  url: env.DATABASE_URL,\n  authToken: env.DATABASE_AUTH_TOKEN,\n});\n\nexport const database = libsql;\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from the Client-Side in Next.js using TSX\nDESCRIPTION: This snippet showcases client-side file uploads in a Next.js application using the `@repo/storage/client` module. It defines a client component (`'use client'`) `AvatarUploadPage` that uses `useRef` to access the file input and `useState` to store the result of the upload. The form's `onSubmit` handler prevents the default form submission, retrieves the selected file, and calls the `upload` function with the file name, file object, public access level, and a designated API route (`/api/avatar/upload`) to handle the actual upload process on the server. The resulting blob information is then stored in the component's state and displayed.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx page.tsx\n'use client';\n \nimport { type PutBlobResult } from '@repo/storage';\nimport { upload } from '@repo/storage/client';\nimport { useState, useRef } from 'react';\n \nexport default function AvatarUploadPage() {\n  const inputFileRef = useRef<HTMLInputElement>(null);\n  const [blob, setBlob] = useState<PutBlobResult | null>(null);\n  return (\n    <>\n      <h1>Upload Your Avatar</h1>\n \n      <form\n        onSubmit={async (event) => {\n          event.preventDefault();\n \n          if (!inputFileRef.current?.files) {\n            throw new Error('No file selected');\n          }\n \n          const file = inputFileRef.current.files[0];\n \n          const newBlob = await upload(file.name, file, {\n            access: 'public',\n            handleUploadUrl: '/api/avatar/upload',\n          });\n \n          setBlob(newBlob);\n        }}\n      >\n        <input name=\"file\" ref={inputFileRef} type=\"file\" required />\n        <button type=\"submit\">Upload</button>\n      </form>\n      {blob && (\n        <div>\n          Blob url: <a href={blob.url}>{blob.url}</a>\n        </div>\n      )}\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Consuming Feature Flags in a Next.js Page - React TSX\nDESCRIPTION: Illustrates how to conditionally render content in a Next.js page based on a feature flag imported from @repo/feature-flags. Uses the showAnalyticsFeature boolean function and calls notFound() to handle scenarios where the feature is disabled. Assumes the user is signed in, otherwise the flag always returns false. Dependencies include Next.js navigation utilities and the feature-flags package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/flags.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { showAnalyticsFeature } from '@repo/feature-flags';\nimport { notFound } from 'next/navigation';\n\nexport default function Page() {\n  const isEnabled = showAnalyticsFeature();\n\n  if (!isEnabled) {\n    notFound();\n  }\n\n  return <div>Analytics feature is enabled</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a type-safe Server Action with Zod validation\nDESCRIPTION: Server-side implementation using Next Safe Action to create a validated server action. This example shows how to define input schema validation with Zod and handle server-side logic within a type-safe context.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/next-safe-action.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\"\n\nimport { createSafeActionClient } from \"next-safe-action\";\nimport { z } from \"zod\";\n\nexport const serverAction = createSafeActionClient()\n  .schema(\n    z.object({\n      name: z.string(),\n      id: z.string()\n    })\n  )\n  .action(async ({ parsedInput: { name, id } }) => {\n    // Fetch data in server\n    const data = await fetchData(name, id);\n    \n    // Write server logic here ...\n    \n    // Return here the value to the client\n    return data;\n  });\n```\n\n----------------------------------------\n\nTITLE: Streaming Database Events with Prisma Pulse\nDESCRIPTION: Example code showing how to stream and handle real-time database change events using Prisma Pulse on a database table.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst stream = await prisma.page.stream();\n\nconsole.log(`Waiting for an event on the \\`Page\\` table ... `);\n\nfor await (const event of stream) {\n  console.log('Received an event:', event);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Paddle Client in TypeScript\nDESCRIPTION: Set up the Paddle client using the configured environment variables and export necessary modules.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport 'server-only';\nimport { type Environment, Paddle } from '@paddle/paddle-node-sdk';\nimport { keys } from './keys';\n\nconst { PADDLE_SECRET_KEY, PADDLE_ENV } = keys();\n\nexport const paddle = new Paddle(PADDLE_SECRET_KEY, {\n  environment: PADDLE_ENV,\n});\n\nexport * from '@paddle/paddle-node-sdk';\n```\n\n----------------------------------------\n\nTITLE: Implementing Paddle Checkout in Next.js Pricing Page\nDESCRIPTION: Use the Paddle checkout hook to open a checkout on the pricing page when a button is clicked.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { usePaddle } from '@repo/payments/checkout';\n\nconst Pricing = () => {\n  const paddle = usePaddle();\n\n  function openCheckout(priceId: string) {\n    paddle?.Checkout.open({\n      items: [\n        {\n          priceId,\n          quantity: 1,\n        },\n      ],\n    });\n  }\n\n  return (\n    <Button\n      className=\"mt-8 gap-4\"\n      onClick={() => openCheckout('pri_01jkzb4x1hc91s8w38cr3m86yy')}\n    >\n      Subscribe now <MoveRight className=\"h-4 w-4\" />\n    </Button>\n  );\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Using the Shared Rate Limiter in an API Route (TypeScript)\nDESCRIPTION: This code demonstrates how to use the pre-configured shared `ratelimit` instance from the `@repo/rate-limit` package within any API route (`apps/api/app/ratelimit/upstash/route.ts`). It imports `ratelimit` and calls its `.limit()` method with a unique identifier (e.g., username, API key, IP address). The function checks the `success` property of the result and returns a 429 response if the limit is exceeded, otherwise proceeds with the API logic.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/rate-limiting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript apps/api/app/ratelimit/upstash/route.ts {7}\nimport { ratelimit } from \"@repo/rate-limit\";\n\nexport const GET = async (request: NextRequest) => {\n  // Use any identifier like username, API key, or IP address\n  const identifier = \"your-identifier\";\n  \n  const { success, limit, remaining } = await ratelimit.limit(identifier);\n  \n  if (!success) {\n    return new Response(\n      JSON.stringify({ error: \"Too many requests\" }), \n      { status: 429 }\n    );\n  }\n  \n  // Continue with your API logic\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Sending a Webhook via @repo/webhooks in TypeScript\nDESCRIPTION: This snippet demonstrates how to send a webhook event using the `send` function provided by the `@repo/webhooks` package. It imports the necessary module and calls the function with the event type (e.g., 'invoice.created') and associated payload data. This requires the `@repo/webhooks` package to be configured with Svix credentials (`SVIX_TOKEN`).\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/webhooks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { webhooks } from '@repo/webhooks';\n\nawait webhooks.send('invoice.created', {\n  data: {\n    id: 'inv_1234567890',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter State Management with Zustand in React\nDESCRIPTION: Example of creating a store with Zustand to manage a counter state with increment and decrement actions, and consuming the state in a React component.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/zustand.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport create from 'zustand';\n\nconst useStore = create((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n  decrement: () => set((state) => ({ count: state.count - 1 })),\n}));\n\nfunction Counter() {\n  const { count, increment, decrement } = useStore();\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Analytics to AI Text Generation in next-forge\nDESCRIPTION: Implementation of analytics tracking for AI text generation using PostHog. This example captures metrics like token usage, costs, and response time to monitor AI interactions and their associated expenses.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/ai.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateText } from '@repo/ai';\nimport { analytics } from '@repo/analytics/posthog/server';\nimport { currentUser } from '@repo/auth/server';\nimport { provider } from '@repo/ai/lib/provider';\nimport { models } from '@repo/ai/lib/models';\n\nconst prompt = 'Hello, world!';\nconst tokenInputCost = 0.0000025;\nconst tokenOutputCost = 0.00001;\nconst startTime = performance.now();\nconst user = await currentUser();\n\nif (!user) {\n  throw new Error('User not found');\n}\n\nconst response = await generateText({\n  model,\n  prompt,\n});\n\nconst endTime = performance.now();\n\nanalytics.capture({\n  event: 'chat_completion',\n  distinctId: user.id,\n  properties: {\n    model: models.chat.modelId,\n    prompt,\n    prompt_tokens: response.usage.promptTokens,\n    completion_tokens: response.usage.completionTokens,\n    total_tokens: response.usage.totalTokens,\n    input_cost_in_dollars: response.usage.promptTokens * tokenInputCost,\n    output_cost_in_dollars: response.usage.promptTokens * tokenOutputCost,\n    total_cost_in_dollars:\n      response.usage.promptTokens * tokenInputCost +\n      response.usage.completionTokens * tokenOutputCost,\n    response_time_in_ms: endTime - startTime,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing VPN and Proxy Detection with Arcjet in Next.js\nDESCRIPTION: Demonstrates how to use Arcjet to detect and handle requests from VPNs, proxies, and hosting providers in a Next.js authenticated layout.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/payments.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation';\n// ...\n\nif (\n  decision.ip.isHosting() ||\n  decision.ip.isVpn() ||\n  decision.ip.isProxy() ||\n  decision.ip.isRelay()\n) {\n  // The IP is from a hosting provider, VPN, or proxy. We can check the name\n  // of the service and customize the response\n  if (decision.ip.hasService()) {\n    if (decision.ip.service !== 'Apple Private Relay') {\n      // We trust Apple Private Relay because it requires an active iCloud\n      // subscription, so deny all other VPNs\n      redirect('/vpn-blocked');\n    }\n  } else {\n    // The service name is not available, but we still think it's a VPN\n    redirect('/vpn-blocked');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing URL Search Parameters with NUQS Hook in React (TypeScript, TSX)\nDESCRIPTION: This TypeScript (TSX) snippet illustrates the use of the NUQS library within a React component for managing state via URL search parameters. It imports the 'useSearchParams' hook from NUQS and provides a form input that updates the URL's 'query' parameter as the user types. The parameters 'searchParams' and 'setSearchParams' enable reading and updating URL-linked state, and changes are synchronized instantly. Dependencies include React and NUQS. Inputs are user-typed strings, and outputs are reflected in both the visible input and the browser's search parameters. Designed primarily for integration into React projects using TypeScript.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/nuqs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSearchParams } from 'nuqs';\n\nfunction MyComponent() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleInputChange = (event) => {\n    setSearchParams({ query: event.target.value });\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={searchParams.query || ''}\n        onChange={handleInputChange}\n      />\n      <p>Search Query: {searchParams.query}</p>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Consuming type-safe Server Actions in client components\nDESCRIPTION: Client-side React component that consumes the server action using the Next Safe Action hook. This implementation demonstrates handling loading states, success and error callbacks, and executing the server action with type-safe inputs.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/next-safe-action.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { serverAction } from \"./action\"\nimport { useAction } from \"next-safe-action/hooks\";\nimport { toast } from \"@repo/design-system/components/ui/sonner\";\n\nfunction MyComponent() {\n  const { execute, isPending } = useAction(serverAction, {\n    onSuccess() {\n      // Display success message to client\n      toast.success(\"Action Success\");\n    },\n    onError({ error }) {\n      // Display error message to client\n      toast.error(\"Action Failed\");\n    },\n  });\n\n  const onClick = () => {\n    execute({ name: \"next-forge\", id: \"example\" });\n  };\n\n  return (\n    <div>\n      <Button disabled={isPending} onClick={onClick}>\n        Click to call action\n      </Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Component Test with Vitest and React Testing Library (TSX)\nDESCRIPTION: This TypeScript React (TSX) snippet demonstrates a basic unit test for a 'Home' page component using Vitest and React Testing Library. It imports necessary functions, renders the component, and uses `screen.getByRole` to assert that a specific heading element exists.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/testing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// apps/app/__tests__/home.test.tsx\nimport { render, screen } from '@testing-library/react';\nimport { expect, test } from 'vitest';\nimport Page from '../app/(unauthenticated)/home/page';\n\ntest('Home Page', () => {\n  render(<Page />);\n  expect(\n    screen.getByRole('heading', {\n      level: 1,\n      name: 'Hello, world!',\n    })\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Email with Resend in Next.js\nDESCRIPTION: This snippet demonstrates how to send a basic email using the Resend service in a Next.js application. It imports the resend object from the @repo/email package and uses it to send a simple text email.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/email.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { resend } from '@repo/email';\n\nawait resend.emails.send({\n  from: 'sender@acme.com',\n  to: 'recipient@acme.com',\n  subject: 'The email subject',\n  text: 'The email text',\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering a Notification Workflow with Knock in Next-Forge (TypeScript)\nDESCRIPTION: This snippet shows how to send an in-app notification using the notifications package, which wraps Knock functionality. The example imports notifications from @repo/notifications, and uses notifications.workflows.trigger to activate a workflow (identified by 'workflow-key') for specific recipients, passing in notification data. Required dependencies include the notifications package and valid Knock credentials set up in your environment. Inputs include the workflow key, recipients array (with id and email), and data payload; output is an asynchronously triggered notification. The code requires proper environment variable setup and assumes that the relevant workflow and template exist within Knock.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/notifications.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { notifications } from '@repo/notifications';\\n\\nawait notifications.workflows.trigger('workflow-key', {\\n  recipients: [{\\n    id: 'user-id',\\n    email: 'user-email',\\n  }],\\n  data: {\\n    message: 'Hello, world!',\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing DesignSystemProvider in Next.js Root Layout\nDESCRIPTION: This code snippet demonstrates how to set up the root layout of a Next.js application using the DesignSystemProvider. It includes importing global CSS, fonts, and the provider component. The layout wraps the entire application, providing context for various design system features.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@repo/design-system/styles/globals.css';\nimport { fonts } from '@repo/design-system/lib/fonts';\nimport { DesignSystemProvider } from '@repo/design-system';\nimport type { ReactNode } from 'react';\n\ntype RootLayoutProperties = {\n  readonly children: ReactNode;\n};\n\nconst RootLayout = ({ children }: RootLayoutProperties) => (\n  <html lang=\"en\" className={fonts} suppressHydrationWarning>\n    <body>\n      <DesignSystemProvider>{children}</DesignSystemProvider>\n    </body>\n  </html>\n);\n\nexport default RootLayout;\n```\n\n----------------------------------------\n\nTITLE: Exporting Generated Hypertune Functions in TypeScript\nDESCRIPTION: Updates the main entry point (`index.ts`) of the `feature-flags` package to export all functions from the generated `hypertune.vercel.tsx` file. This makes the type-safe feature flag functions generated by Hypertune available for import throughout the application, maintaining a consistent export pattern.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport * from \"./generated/hypertune.vercel.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Using shadcn/ui CSS Variables in React Components - TypeScript\nDESCRIPTION: This snippet demonstrates how to apply theme-driven CSS variables to a React component using Tailwind CSS utility classes. The component leverages class names like bg-background and text-foreground to inherit color values from the global CSS variables established by shadcn/ui. No explicit dependencies are needed beyond React and the project's configured Tailwind setup. Inputs: none; Outputs: a styled div element.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/colors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MyComponent = () => (\n  <div className=\"bg-background text-foreground border rounded-4xl shadow\">\n    <p>I'm using CSS Variables!</p>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering In-App Notification Feed with NotificationsTrigger Component in React (TSX)\nDESCRIPTION: This snippet demonstrates how to use the NotificationsTrigger component from the @repo/notifications package to render a button in your React sidebar that triggers an in-app notifications feed. The component leverages TypeScript/React and requires importing NotificationsTrigger, Button, and BellIcon components. When the button is clicked, it opens a notifications feed displaying all messages for the current user. The code should be placed within an authenticated sidebar component, and assumes all necessary UI dependencies are installed and configured.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/notifications.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { NotificationsTrigger } from '@repo/notifications/components/trigger';\\n\\n<NotificationsTrigger>\\n  <Button variant=\\\"ghost\\\" size=\\\"icon\\\" className=\\\"shrink-0\\\">\\n    <BellIcon size={16} className=\\\"text-muted-foreground\\\" />\\n  </Button>\\n</NotificationsTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Queries to Use Drizzle ORM\nDESCRIPTION: Example of updating a query in a Next.js page component to use Drizzle ORM instead of Prisma.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { database } from '@repo/database';\nimport { page } from '@repo/database/schema';\n\n// ...\n\nconst App = async () => {\n  const pages = await database.select().from(page);\n\n  // ...\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Package Client File\nDESCRIPTION: Modifications to the packages/storage/client.ts file to use uploadthing instead of Vercel Blob.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport * from '@uploadthing/react';\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Serverless Function for Cron Jobs\nDESCRIPTION: A TypeScript template for creating serverless functions that can be triggered as cron jobs. The function must use the GET method for Vercel's cron jobs feature and returns a simple OK response.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/cron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { database } from '@repo/database';\n\n// Must use GET for Vercel cron jobs\nexport const GET = async () => {\n  // Do stuff\n\n  return new Response('OK', { status: 200 });\n};\n```\n\n----------------------------------------\n\nTITLE: Building AI Chatbot Components in next-forge\nDESCRIPTION: Implementation of a basic chatbot UI using Thread and Message components from the @repo/ai package. This example shows how to map message data to UI components in a React application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/ai.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Thread } from '@repo/ai/components/thread';\nimport { Message } from '@repo/ai/components/message';\n\nexport const Chatbot = () => {\n  const { messages } = useChat();\n\n  return (\n    <Thread>\n      {messages.map((message) => (\n        <Message key={message.id} data={message} />\n      ))}\n    </Thread>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Postgres Connection in Environment Variables\nDESCRIPTION: Update the environment variables file to use the new Prisma Postgres connection string in the database application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=ey....\"\n```\n\n----------------------------------------\n\nTITLE: Interactive Initialization Session - next-forge CLI - Shell\nDESCRIPTION: This sample presents the detailed output and prompts received when initializing a next-forge project. It guides the user through naming the project and selecting a package manager. The script notifies the user of successful initialization and specifies prerequisite installations for Mintlify CLI and Stripe CLI for project operation. The session is meant for terminal use and demonstrates expected responses.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/setup/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npx next-forge@latest init\n\n┌  Let's start a next-forge project!\n│\n◇  What is your project named?\n│  my-app\n│\n◇  Which package manager would you like to use?\n│  pnpm\n│\n◇  Project initialized successfully!\n│\n└  Please make sure you install the Mintlify CLI and Stripe CLI before starting the project.\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Package Index File\nDESCRIPTION: Modifications to the packages/storage/index.ts file to use uploadthing instead of Vercel Blob.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createUploadthing } from 'uploadthing/next';\n\nexport { type FileRouter, createRouteHandler } from 'uploadthing/next';\nexport { UploadThingError as UploadError, extractRouterConfig } from 'uploadthing/server';\n\nexport const storage = createUploadthing();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Stripe in Next.js\nDESCRIPTION: Demonstrates how to import the Stripe object and use it to list prices in a Next.js page component.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/payments.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripe } from '@repo/payments';\n\n// ...\n\nawait stripe.prices.list();\n```\n\n----------------------------------------\n\nTITLE: Updating Database Connection with Drizzle\nDESCRIPTION: TypeScript code to set up the database connection using Drizzle ORM with Neon database.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only';\n\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { neon } from '@neondatabase/serverless';\nimport { env } from '@repo/env';\n\nconst client = neon(env.DATABASE_URL);\n\nexport const database = drizzle({ client });\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Centralized Logging in Next.js (TypeScript/TSX)\nDESCRIPTION: Demonstrates importing the logging abstraction from the @repo/observability/log package in a Next.js page and logging an informational message. The log object offers a console-compatible API, enabling easy replacement of existing console calls across the codebase. This requires the @repo/observability/log dependency, expects string messages as input, and outputs logs according to the current environment (console in development, BetterStack in production).\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/observability/logging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { log } from '@repo/observability/log';\\n\\nlog.info('Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js sign-up component\nDESCRIPTION: React component for sign-up that uses Auth.js signIn function since Auth.js doesn't have a separate signup concept.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '../';\n\nexport const SignUp = () => (\n  <form\n    action={async () => {\n      \"use server\";\n      await signIn();\n    }}\n  >\n    <button type=\"submit\">Sign up</button>\n  </form>\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Auth.js secrets for multiple apps\nDESCRIPTION: Terminal commands to generate Auth.js secrets for web, app, and api applications, which adds AUTH_SECRET environment variables to each app's .env.local file.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/app && npx auth secret && cd -\ncd apps/web && npx auth secret && cd -\ncd apps/api && npx auth secret && cd -\n```\n\n----------------------------------------\n\nTITLE: Embedding Svix App Portal using @repo/webhooks in TypeScript/React\nDESCRIPTION: This snippet shows how to retrieve the URL for the Svix consumer application portal using the `getAppPortal` function from `@repo/webhooks`. The obtained URL is then used as the source for an iframe within a React component, allowing end-users to manage their webhook subscriptions. This assumes a React environment and relies on the `@repo/webhooks` package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/webhooks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { webhooks } from '@repo/webhooks';\n\nconst { url } = await webhooks.getAppPortal();\n\nreturn (\n  <iframe src={url} style=\"width: 100%; height: 100%; border: none;\" allow=\"clipboard-write\" loading=\"lazy\" />\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Next Safe Action and dependencies\nDESCRIPTION: Command to install Next Safe Action along with Zod for input validation in a specific app within a monorepo using pnpm package manager.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/next-safe-action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add next-safe-action zod --filter app\n```\n\n----------------------------------------\n\nTITLE: Creating a Toolbar Avatar Stack using Liveblocks in React\nDESCRIPTION: This snippet demonstrates how to implement an avatar stack showing all connected users in a collaborative environment. It uses Liveblocks' useOthers and useSelf hooks to display the current user and other participants.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/collaboration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOthers, useSelf } from \"@liveblocks/react/suspense\";\n\nexport function ToolbarAvatars() {\n  const others = useOthers();\n  const me = useSelf();\n\n  return (\n    <div>\n      {/* Your avatar */}\n      <Avatar src={me.info.avatar} name={me.info.name} />\n\n      {/* Everyone else's avatars */}\n      {others.map(({ connectionId, info }) => (\n        <Avatar key={connectionId} src={info.avatar} name={info.name} />\n      )})\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stripe Script to Next.js Layout\nDESCRIPTION: Shows how to modify the Next.js layout file to include the Stripe JavaScript library for advanced anti-fraud features.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/payments.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@repo/design-system/styles/globals.css';\nimport { DesignSystemProvider } from '@repo/design-system';\nimport { fonts } from '@repo/design-system/lib/fonts';\nimport type { ReactNode } from 'react';\nimport Script from 'next/script';\n\ntype RootLayoutProperties = {\n  readonly children: ReactNode;\n};\n\nconst RootLayout = ({ children }: RootLayoutProperties) => (\n  <html lang=\"en\" className={fonts} suppressHydrationWarning>\n    <Script src=\"https://js.stripe.com/v3/\" />\n    <body>\n      <DesignSystemProvider>{children}</DesignSystemProvider>\n    </body>\n  </html>\n);\n\nexport default RootLayout;\n```\n\n----------------------------------------\n\nTITLE: Updating Database Package for Supabase Connection\nDESCRIPTION: This TypeScript code updates the database package to connect directly to Supabase using PrismaClient.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/supabase.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only';\nimport { PrismaClient } from '@prisma/client';\n\nexport const database = new PrismaClient();\n\nexport * from '@prisma/client';\n```\n\n----------------------------------------\n\nTITLE: Adding Reading Time Calculation to Collection Transform\nDESCRIPTION: This TypeScript snippet modifies the `transform` function for the 'posts' collection in `collections.ts`. It uses the 'reading-time' library to calculate the estimated reading time of the MDX content (`page.content`) and adds it as a `readingTime` field to the transformed data.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport readingTime from 'reading-time';\n\nconst posts = defineCollection({\n  // ...\n  transform: async (page, context) => {\n    // ...\n\n    return {\n      // ...\n      readingTime: readingTime(page.content).text,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Sign-In Component\nDESCRIPTION: Update the sign-in component to use Better Auth's signIn function with email and password.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { signIn } from '../client';\nimport { useState } from 'react';\n\nexport const SignIn = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <form\n      onSubmit={async (e) => {\n        e.preventDefault();\n        await signIn.email({\n          email,\n          password,\n        })\n      }}\n    >\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <button type=\"submit\">Sign in</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sign-Up Component\nDESCRIPTION: Update the sign-up component to use Better Auth's signUp function with email, password, and name.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { signUp } from '../client';\nimport { useState } from 'react';\n\nexport const SignUp = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  return (\n    <form\n      onSubmit={async (e) => {\n        e.preventDefault();\n        await signUp.email({\n          email,\n          password,\n          name\n        })\n      }}\n    >\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button type=\"submit\">Sign up</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for BaseHub in Next-Forge\nDESCRIPTION: Example of setting up the BaseHub token in the environment variables file for a next-forge web application. This configuration enables the app to connect to the BaseHub CMS.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/cms.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nBASEHUB_TOKEN=\"<token>\"\n```\n\n----------------------------------------\n\nTITLE: Updating Queries to Use EdgeDB in Next Forge\nDESCRIPTION: Example of updating a React component to use EdgeDB queries instead of Prisma.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { database } from '@repo/database';\nimport edgeql from '@repo/database/dbschema/edgeql-js';\n\n// ...\n\nconst App = async () => {\n  const pagesQuery = edgeql.select(edgeql.Page, () => ({ ...edgeql.Page['*'] }));\n  const pages = await pagesQuery.run(database);\n\n  // ...\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Enabling Upstash Analytics for Rate Limiting (TypeScript)\nDESCRIPTION: This snippet illustrates how to enable the built-in analytics feature provided by Upstash Ratelimit. By adding the `analytics: true` flag to the `Ratelimit` constructor options within the configuration file (shown here hypothetically as `packages/security/index.ts`), Upstash will collect data on request patterns, identifier usage, and success/failure rates, viewable in the Upstash Console.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/rate-limiting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript packages/security/index.ts\nexport const ratelimit = new Ratelimit({\n  redis,\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  prefix: \"next-forge\",\n  analytics: true, // Enable Upstash analytics\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Collection Definitions for Web App\nDESCRIPTION: This TypeScript snippet in `packages/web/content-collections.ts` simply re-exports the default export (the `defineConfig` result) from the CMS package's `collections.ts` file. This makes the collection configuration accessible to the web application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport { default } from '@repo/cms/collections';\n```\n\n----------------------------------------\n\nTITLE: Upgrading shadcn/ui Components in Design System - Shell\nDESCRIPTION: Runs the 'bump-ui' custom pnpm command to update all shadcn/ui components in the Design System package, including related dependency updates. Prerequisites: pnpm installed and the 'bump-ui' script set up. Input: none; Output: components in @repo/design-system/components are regenerated. Warning: This overrides existing UI customizations and may modify shared configuration files. Review all changes before committing.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/updates.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npnpm bump-ui\n```\n\n----------------------------------------\n\nTITLE: Creating Code Groups (Tabs) in Fumadocs (TSX)\nDESCRIPTION: This TSX snippet demonstrates creating tabbed code groups in Fumadocs using the `Tabs` component from `fumadocs-ui/components/tabs`. It requires importing the component and defining tab items. Individual code blocks are associated with tabs using the `tab=\"Tab Name\"` attribute.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n \n<Tabs items={[\"Tab 1\", \"Tab 2\"]}>\n \n```ts tab=\"Tab 1\"\nconsole.log('A');\n```\n \n```ts tab=\"Tab 2\"\nconsole.log('B');\n```\n \n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Customizing Fumadocs Theme with CSS Variables\nDESCRIPTION: This CSS snippet demonstrates how to customize the Fumadocs UI theme by overriding CSS variables in a global CSS file. It shows setting the background color (using HSL values without the `hsl()` function) for both light (`:root`) and dark (`.dark`) modes, and setting a maximum layout width.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n/* global.css */\n:root {\n  /* hsl values, like hsl(239 37% 50%) but without `hsl()` */\n  --background: 239 37% 50%;\n\n  /* Want a max width for docs layout? */\n  --fd-layout-width: 1400px;\n}\n\n.dark {\n  /* hsl values, like hsl(239 37% 50%) but without `hsl()` */\n  --background: 239 37% 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Fumadocs MDX Plugins in Collection Transform\nDESCRIPTION: This TypeScript code demonstrates enhancing the 'posts' collection defined in `collections.ts`. It imports and configures Fumadocs MDX plugins (`rehypeCode`, `remarkGfm`, `remarkHeading`) and applies them during the `compileMDX` process within the `transform` function to add features like syntax highlighting and improved heading handling.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RehypeCodeOptions,\n  rehypeCode,\n  remarkGfm,\n  remarkHeading,\n} from 'fumadocs-core/mdx-plugins';\n\nconst rehypeCodeOptions: RehypeCodeOptions = {\n  themes: {\n    light: 'catppuccin-mocha',\n    dark: 'catppuccin-mocha',\n  },\n};\n\nconst posts = defineCollection({\n  // ...\n  transform: async (page, context) => {\n    // ...\n    const body = await context.cache(page.content, async () =>\n      compileMDX(context, page, {\n        remarkPlugins: [remarkGfm, remarkHeading],\n        rehypePlugins: [[rehypeCode, rehypeCodeOptions]],\n      })\n    );\n\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating File Router for uploadthing\nDESCRIPTION: New file apps/app/app/lib/upload.ts to define file routes for the app using uploadthing and the Auth package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { currentUser } from '@repo/auth/server';\nimport { type FileRouter, UploadError, storage } from '@repo/storage';\n  \nexport const router: FileRouter = {\n  imageUploader: storage({\n    image: {\n      maxFileSize: '4MB',\n      maxFileCount: 1,\n    },\n  })\n    .middleware(async () => {\n      const user = await currentUser();\n\n      if (!user) {\n        throw new UploadError('Unauthorized');\n      }\n\n      return { userId: user.id };\n    })\n    .onUploadComplete(({ metadata, file }) => ({ uploadedBy: metadata.userId }),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents Component with Fumadocs\nDESCRIPTION: This TSX code in `packages/cms/components/toc.tsx` defines an asynchronous React component `TableOfContents`. It uses `getTableOfContents` from 'fumadocs-core/server' to generate a table of contents from the provided content string (`data`) and renders it as a styled list of links.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescriptreact\nCODE:\n```\nimport { getTableOfContents } from 'fumadocs-core/server';\n\ntype TableOfContentsProperties = {\n  data: string;\n};\n\nexport const TableOfContents = async ({\n  data,\n}: TableOfContentsProperties) => {\n  const toc = await getTableOfContents(data);\n\n  return (\n    <ul className=\"flex list-none flex-col gap-2 text-sm\">\n      {toc.map((item) => (\n        <li\n          key={item.url}\n          style={{\n            paddingLeft: `${item.depth - 2}rem`,\n          }}\n        >\n          <a\n            href={item.url}\n            className=\"line-clamp-3 flex rounded-sm text-foreground text-sm underline decoration-foreground/0 transition-colors hover:decoration-foreground/50\"\n          >\n            {item.title}\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema for PlanetScale\nDESCRIPTION: Prisma schema configuration for PlanetScale MySQL database with sample model definition\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/planetscale.mdx#2025-04-23_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\n// This is a stub model.\n// Delete it and add your own Prisma models.\nmodel Page {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Linking the 'api' Directory using Vercel CLI (Shell)\nDESCRIPTION: This command changes the current directory to `apps/api` and runs `vercel link`. This step connects the API application within the monorepo to a Vercel project, allowing Vercel features, including the toolbar, to function correctly for the API. Requires the Vercel CLI to be installed and authenticated.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/toolbar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/api\nvercel link\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variable Schema with Hypertune Token in TypeScript\nDESCRIPTION: Modifies the `keys.ts` file within the `feature-flags` package to include the `NEXT_PUBLIC_HYPERTUNE_TOKEN` in the environment variable validation schema using `@t3-oss/env-nextjs`. This ensures the token is present and is a non-empty string on the client-side.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createEnv } from '@t3-oss/env-nextjs';\nimport { z } from 'zod';\n\nexport const keys = () =>\n  createEnv({\n    client: {\n      NEXT_PUBLIC_HYPERTUNE_TOKEN: z.string().min(1),\n    },\n    server: {\n      FLAGS_SECRET: z.string().min(1).optional(),\n    },\n    runtimeEnv: {\n      FLAGS_SECRET: process.env.FLAGS_SECRET,\n      NEXT_PUBLIC_HYPERTUNE_TOKEN: process.env.NEXT_PUBLIC_HYPERTUNE_TOKEN,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining a Specific Zod Validation Rule for Environment Variables in TypeScript\nDESCRIPTION: This TypeScript snippet exemplifies a Zod validation rule within a `keys.ts` file for the next-forge project. It demonstrates how to enforce a specific format for an environment variable, ensuring it's a non-empty string starting with 'sec_'. This practice improves code clarity and runtime safety.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/setup/env.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nz.string().min(1).startsWith('sec_')\n```\n\n----------------------------------------\n\nTITLE: Using Callout Components in Mintlify (TSX)\nDESCRIPTION: This TSX snippet illustrates the various specific callout components available in Mintlify, such as `<Note>`, `<Warning>`, `<Info>`, `<Tip>`, and `<Check>`, used to display highlighted informational boxes.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Note>Hello World</Note>\n<Warning>Hello World</Warning>\n<Info>Hello World</Info>\n<Tip>Hello World</Tip>\n<Check>Hello World</Check>\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Links in Fumadocs Layout\nDESCRIPTION: This TSX snippet, likely from a layout configuration file (`app/layout.config.tsx`), demonstrates how to define global navigation links for the Fumadocs layout. It shows adding a link to a 'Blog' page with an icon, text, and URL, by populating the `links` array within the `baseOptions` object.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.config.tsx\nimport { BookIcon } from 'lucide-react';\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n \nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      icon: <BookIcon />,\n      text: 'Blog',\n      url: '/blog',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an MDX Content Rendering Component\nDESCRIPTION: This TSX code defines a React component `Body` in `packages/cms/components/body.tsx`. It wraps the `MDXContent` component from '@content-collections/mdx/react' to render compiled MDX content, accepting the compiled `code` as a `content` prop.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescriptreact\nCODE:\n```\nimport { MDXContent } from '@content-collections/mdx/react';\nimport type { ComponentProps } from 'react';\n\ntype BodyProperties = Omit<ComponentProps<typeof MDXContent>, 'code'> & {\n  content: ComponentProps<typeof MDXContent>['code'];\n};\n\nexport const Body = ({ content, ...props }: BodyProperties) => (\n  <MDXContent {...props} code={content} />\n);\n```\n\n----------------------------------------\n\nTITLE: Default Upstash Ratelimit Configuration (TypeScript)\nDESCRIPTION: This snippet shows the default configuration for the shared `Ratelimit` instance within the `packages/rate-limit/index.ts` file. It initializes `Ratelimit` from `@upstash/ratelimit`, connecting it to an Upstash Redis instance (`redis`). The default limiter uses a sliding window algorithm allowing 10 requests per 10 seconds (`Ratelimit.slidingWindow(10, \"10 s\")`), and applies a prefix (`next-forge`) to all keys stored in Redis.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/rate-limiting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts packages/rate-limit/index.ts\nexport const ratelimit = new Ratelimit({\n  redis,\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  prefix: \"next-forge\",\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hypertune Environment Variables for Feature Flags Package in JavaScript\nDESCRIPTION: Sets up required environment variables in a `.env` file specifically for the `feature-flags` package. These variables configure the Hypertune token, specify the target framework (`nextApp`), define the output directory for generated code, set the platform (Vercel), and provide the path to the custom `getHypertune` function.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nNEXT_PUBLIC_HYPERTUNE_TOKEN=\"\"\nHYPERTUNE_FRAMEWORK=nextApp\nHYPERTUNE_OUTPUT_DIRECTORY_PATH=generated\nHYPERTUNE_PLATFORM=vercel\nHYPERTUNE_GET_HYPERTUNE_IMPORT_PATH=../lib/getHypertune\n```\n\n----------------------------------------\n\nTITLE: Proposed Clerk Theme Variables Mapping Using CSS Variables - JSX\nDESCRIPTION: This code proposes a way to map Clerk's Theme variables to project CSS variables. It defines a variables object typed as Theme['variables'], where each key (such as colorBackground, colorPrimary, etc.) references a CSS variable using a Tailwind-style hsl(var(--variable-name)) syntax. This facilitates consistent theming across Clerk components when the provider accepts CSS variables, which is noted as a planned feature. Inputs: none; Outputs: a configuration object. Requires Clerk's Theme type to be available.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/colors.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst variables: Theme['variables'] = {\n  // ...\n\n  colorBackground: 'hsl(var(--background))',\n  colorPrimary: 'hsl(var(--primary))',\n  colorDanger: 'hsl(var(--destructive))',\n  colorInputBackground: 'hsl(var(--transparent))',\n  colorInputText: 'hsl(var(--text-foreground))',\n  colorNeutral: 'hsl(var(--neutral))',\n  colorShimmer: 'hsl(var(--primary) / 10%)',\n  colorSuccess: 'hsl(var(--success))',\n  colorText: 'hsl(var(--text-foreground))',\n  colorTextOnPrimaryBackground: 'hsl(var(--text-foreground))',\n  colorTextSecondary: 'hsl(var(--text-muted-foreground))',\n  colorWarning: 'hsl(var(--warning))',\n};\n```\n\n----------------------------------------\n\nTITLE: Running Hypertune Code Generation for Feature Flags Package using pnpm Shell\nDESCRIPTION: Executes the build process specifically for the `@repo/feature-flags` workspace package using pnpm. This triggers the `hypertune` command defined in the package's `build` script, generating necessary TypeScript files for the SDK.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm build --filter @repo/feature-flags \n```\n\n----------------------------------------\n\nTITLE: Implementing In-App Notifications with Liveblocks Components\nDESCRIPTION: This snippet demonstrates how to display in-app notifications for collaborative events using Liveblocks' notification components. It uses useInboxNotifications hook to retrieve and display notifications for the current user.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/collaboration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInboxNotifications } from \"@liveblocks/react/suspense\";\nimport {\n  InboxNotification,\n  InboxNotificationList,\n} from \"@liveblocks/react-ui\";\n\nexport function CollaborativeApp() {\n  // Get each notification for the current user\n  const { inboxNotifications } = useInboxNotifications();\n\n  return (\n    <InboxNotificationList>\n      {inboxNotifications.map((inboxNotification) => (\n        <InboxNotification\n          key={inboxNotification.id}\n          inboxNotification={inboxNotification}\n        />\n      ))}\n    </InboxNotificationList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sitemap Generation Logic\nDESCRIPTION: This TypeScript snippet from `apps/web/app/sitemap.ts` demonstrates how to modify the sitemap generation logic. It uses the Node.js `fs` module to read the 'content/blog' and 'content/legal' directories directly, filtering for MDX files and extracting slugs to include in the sitemap.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nconst blogs = fs\n  .readdirSync('content/blog', { withFileTypes: true })\n  .filter((file) => !file.isDirectory())\n  .filter((file) => !file.name.startsWith('_'))\n  .filter((file) => !file.name.startsWith('('))\n  .map((file) => file.name.replace('.mdx', ''));\n\nconst legals = fs\n  .readdirSync('content/legal', { withFileTypes: true })\n  .filter((file) => !file.isDirectory())\n  .filter((file) => !file.name.startsWith('_'))\n  .filter((file) => !file.name.startsWith('('))\n  .map((file) => file.name.replace('.mdx', ''));\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating authentication middleware for Auth.js\nDESCRIPTION: Updated middleware.ts file that exports the Auth.js auth function as authMiddleware with server-only directive.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'server-only';\n\nexport { auth as authMiddleware } from './';\n```\n\n----------------------------------------\n\nTITLE: Animating a React Component with Motion - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to import the 'motion' object from the Motion library and apply animation to a React component. It defines a functional component that wraps a <div> in motion.div and uses the 'animate' prop to move it 100 pixels along the x-axis. 'motion' must be installed as a project dependency. The 'animate' prop expects an object specifying target style values; the output is an animated div rendered by React. Suitable for React applications using TypeScript, it showcases a basic, customizable animation workflow.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/motion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motion } from 'motion';\n\nfunction MyComponent() {\n  return (\n    <motion.div animate={{ x: 100 }}>This is a component that is animated.</motion.div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Paddle Environment Variables in Next.js\nDESCRIPTION: Update the .env file with Paddle-specific environment variables for both server and client-side use.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n# Server\nPADDLE_SECRET_KEY=\"\"\nPADDLE_WEBHOOK_SECRET=\"\"\nPADDLE_ENV=\"sandbox\"\n\n# Client\nNEXT_PUBLIC_PADDLE_ENV=\"sandbox\"\nNEXT_PUBLIC_PADDLE_CLIENT_TOKEN=\"test_\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Paddle Webhook Handler in Next.js\nDESCRIPTION: Create a new webhook handler for Paddle to process incoming webhook events.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { env } from '@/env';\nimport { NextResponse } from 'next/server';\nimport { headers } from 'next/headers';\nimport { paddle } from '@repo/payments';\n\nexport const POST = async (request: Request) => {\n  try {\n    const body = await request.text();\n    const headerPayload = await headers();\n    const signature = headerPayload.get('paddle-signature');\n\n    if (!signature) {\n      throw new Error('missing paddle-signature header');\n    }\n\n    const event = await paddle.webhooks.unmarshal(\n      body,\n      env.PADDLE_WEBHOOK_SECRET,\n      signature\n    );\n\n    switch (event.eventType) {}\n\n    return NextResponse.json({ result: event, ok: true });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Development Server - next-forge - Shell\nDESCRIPTION: This command snippet details how to launch the main development server for a next-forge project. It requires prior installation of all project dependencies and environment variable setup. Upon running, it will start several services on corresponding localhost ports, enabling developers to access the main app, website, API, email preview, and documentation servers locally.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/setup/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Pulse for Real-time Database Events\nDESCRIPTION: Install the Prisma Pulse extension to enable real-time streaming of database events in your application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @prisma/extension-pulse\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Next.js and React\nDESCRIPTION: ESLint configuration file setup with recommended rules for TypeScript, React, and Next.js.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/formatting/eslint.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport react from 'eslint-plugin-react';\nimport next from '@next/eslint-plugin-next';\nimport hooks from 'eslint-plugin-react-hooks';\nimport ts from 'typescript-eslint'\n\nexport default [\n  ...ts.configs.recommended,\n  {\n    ignores: ['**/.next'],\n  },\n  { \n    files: ['**/*.ts', '**/*.tsx'],\n    plugins: {\n      react: react,\n      'react-hooks': hooks,\n      '@next/next': next,\n    },\n    rules: {\n      ...react.configs['jsx-runtime'].rules,\n      ...hooks.configs.recommended.rules,\n      ...next.configs.recommended.rules,\n      ...next.configs['core-web-vitals'].rules,\n      '@next/next/no-img-element': 'error',\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Drizzle Configuration\nDESCRIPTION: TypeScript configuration file for Drizzle ORM, specifying schema location, output directory, and database credentials.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'drizzle-kit';\nimport { env } from '@repo/env';\n\nexport default defineConfig({\n  schema: './schema.ts',\n  out: './',\n  dialect: 'postgresql',\n  dbCredentials: {\n    url: env.DATABASE_URL,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary Structure for Internationalization\nDESCRIPTION: This snippet demonstrates the structure of a dictionary file used for internationalization. It exports a strongly-typed content object for each supported language.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/internationalization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Dictionary } from '@repo/internationalization';\n\nconst dictionary: Dictionary = {};\n\nexport default dictionary;\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Configuration for Turso\nDESCRIPTION: Modification to the Webpack configuration to add @libsql/client as an external dependency.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nlet nextConfig: NextConfig = {\n  ...config,\n  webpack: (config, { isServer }) => {\n    if (isServer) {\n      config.externals = [...(config.externals || []), \"@libsql/client\"];\n    }\n\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Migration Scripts for Drizzle\nDESCRIPTION: JSON snippet showing the updated migration scripts in the root package.json file to use Drizzle commands.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"db:migrate\": \"cd packages/database && npx drizzle-kit migrate\"\n  \"db:generate\": \"cd packages/database && npx drizzle-kit generate\"\n  \"db:pull\": \"cd packages/database && npx drizzle-kit pull\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering a Cron Job via Terminal\nDESCRIPTION: A curl command example showing how to manually trigger a cron job endpoint for testing purposes by sending a GET request to the local development server.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/cron.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://localhost:3002/cron/keep-alive\n```\n\n----------------------------------------\n\nTITLE: Implementing Dub Link Tracking in Next.js Components\nDESCRIPTION: Example showing how to replace standard href links with Dub tracking links in both plain anchor tags and Next.js Link components.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/dub.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<a href=\"https://dub.co/example\">Example</a>\n<Link href=\"https://dub.co/example\">Example</Link>\n```\n\n----------------------------------------\n\nTITLE: Setting the FLAGS_SECRET Environment Variable (.env.local)\nDESCRIPTION: This snippet shows how to define the `FLAGS_SECRET` environment variable within a `.env.local` file. This variable is used by the Vercel Toolbar, specifically for managing feature flag overrides in development environments. The value \"test\" is used here as an example placeholder. This entry should be added to the `.env.local` file within each application's directory (`apps/app`, `apps/web`, `apps/api`).\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/toolbar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nFLAGS_SECRET=\"test\"\n```\n\n----------------------------------------\n\nTITLE: Creating Upload Button Component\nDESCRIPTION: New component in apps/app/(authenticated)/components/upload-button.tsx for creating an upload button using uploadthing.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport type { router } from '@/app/lib/upload';\nimport { generateUploadButton } from '@repo/storage/client';\nimport { toast } from 'sonner';\n\nconst UploadButton = generateUploadButton<typeof router>();\n\nexport const UploadForm = () => (\n  <UploadButton\n    endpoint=\"imageUploader\"\n    onClientUploadComplete={(res) => {\n      // Do something with the response\n      console.log('Files: ', res);\n      toast.success('Upload Completed');\n    }}\n    onUploadError={(error: Error) => {\n      toast.error(`ERROR! ${error.message}`);\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Using JSON-LD Structured Data Helper in Next.js with TypeScript\nDESCRIPTION: This snippet shows how to integrate the JsonLd React component from the @repo/seo/json-ld package into a Next.js page using TypeScript. It imports requisite type definitions and the JsonLd component, initializes a typed jsonLd object conforming to the WithContext interface, and renders the JsonLd component with the generated code. Dependencies include @repo/seo, schema-dts, and a TypeScript-enabled React Next.js setup. The jsonLd parameter represents your structured data object, which will be converted to Google-compliant JSON-LD and rendered into the DOM; input and output types are dictated by your custom schema interface.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/seo/json-ld.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { JsonLd } from '@repo/seo/json-ld';\nimport type { WithContext, YourInterface } from '@repo/seo/json-ld';\n\nconst jsonLd: WithContext<YourInterface> = {\n  // ...\n};\n\nreturn <JsonLd code={jsonLd} />;\n```\n\n----------------------------------------\n\nTITLE: Updating CMS Package Scripts for Content Collections Build\nDESCRIPTION: This JSON snippet modifies the 'scripts' section in `packages/cms/package.json`. It replaces previous build/dev commands with 'content-collections build' to integrate the Content Collections CLI build process for development, production builds, and analysis.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"content-collections build\",\n    \"build\": \"content-collections build\",\n    \"analyze\": \"content-collections build\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Files Generated by Hypertune Code Generation in Text\nDESCRIPTION: Shows the expected file structure created by the Hypertune code generation process within the `packages/feature-flags/generated` directory. These files contain the typed Hypertune SDK client, React components, and Vercel integration helpers.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\npackages/feature-flags/generated/hypertune.ts\npackages/feature-flags/generated/hypertune.react.tsx\npackages/feature-flags/generated/hypertune.vercel.tsx\n```\n\n----------------------------------------\n\nTITLE: Removing Prisma Studio\nDESCRIPTION: Command to delete the Prisma Studio app directory, which is no longer needed after migrating to Drizzle.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nrm -fr apps/studio\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Postgres Dependencies\nDESCRIPTION: Install the required Prisma Accelerate extension package needed to work with Prisma Postgres.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Testing Configuration Dependency (JSON)\nDESCRIPTION: This JSON snippet shows how to add the shared `@repo/testing` package as a development dependency in an app's `package.json` file. This package likely contains common Vitest configurations or testing utilities shared across the monorepo. The `workspace:*` protocol links it to the local workspace package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/testing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// apps/[app]/package.json {2}\n\"devDependencies\": {\n  \"@repo/testing\": \"workspace:*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pages to Navigation - mint.json - JSON\nDESCRIPTION: This snippet provides an example of how to structure the navigation array within the mint.json configuration file to control the documentation sidebar. Each navigation entry can represent a group with associated pages, indicated as file slugs, thereby enabling multi-level structured navigation. Pages listed here, such as 'hello-world', must correspond to actual MDX files in the 'apps/docs' directory. No additional dependencies are needed beyond Mintlify's processing of configuration. Key parameters include 'group' for navigation grouping and 'pages' for specifying which docs appear under that group. The structure supports further extensions like nested groups or additional metadata.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/apps/docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": [\\n  {\\n    \\\"group\\\": \\\"Getting Started\\\",\\n    \\\"pages\\\": [\\\"hello-world\\\"]\\n  },\\n  {\\n    // ...\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Configuration for Pulse API Key\nDESCRIPTION: Modify the environment configuration to include the new PULSE_API_KEY variable, adding validation and making it available to the application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport const server = {\n  // ...\n  PULSE_API_KEY: z.string().min(1).startsWith('ey'),\n};\n\nexport const env = createEnv({\n  client,\n  server,\n  runtimeEnv: {\n    // ...\n    PULSE_API_KEY: process.env.PULSE_API_KEY,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a next-forge Project (Bash)\nDESCRIPTION: Initializes a new next-forge project named 'ai-chatbot' using the latest version of the create-next-forge CLI tool. This command sets up the basic project structure and installs necessary dependencies.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/recipes/ai-chatbot.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx next-forge@latest init ai-chatbot\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth Dependencies\nDESCRIPTION: Install Better Auth and Next.js dependencies for the auth package using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add better-auth next --filter @repo/auth\n```\n\n----------------------------------------\n\nTITLE: Connecting to Turso Database via CLI\nDESCRIPTION: Command to connect to the Turso database using the CLI for applying schema changes.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nturso db shell <database-name>\n```\n\n----------------------------------------\n\nTITLE: Updating Database Connection to EdgeDB in Next Forge\nDESCRIPTION: TypeScript code to update the database connection to use an EdgeDB client.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport 'server-only';\n\nimport { createClient } from \"edgedb\";\n\nexport const database = createClient();\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Jobs in Vercel.json\nDESCRIPTION: Configuration for scheduling cron jobs in a Vercel deployment using vercel.json. This example sets up a 'keep-alive' job to run daily at 1:00 AM.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/cron.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crons\": [\n    {\n      \"path\": \"/cron/keep-alive\",\n      \"schedule\": \"0 1 * * *\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Metadata - MDX - Markdown\nDESCRIPTION: This snippet demonstrates how to define metadata for a new documentation page using frontmatter in an MDX file. The sample shows both a title and a description, which are employed by Mintlify to generate the docs page and manage meta tags. No external dependencies are required besides Mintlify; the main parameters are 'title' and 'description', and inputs should be valid YAML. Outputs are the rendered documentation page with proper metadata. This approach supports further extension for additional meta tags.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/apps/docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\\ntitle: 'Quickstart'\\ndescription: 'Start building modern documentation in under five minutes.'\\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Drizzle Schema from Existing Database\nDESCRIPTION: Command to pull the database schema and generate a Drizzle schema file.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx drizzle-kit pull\n```\n\n----------------------------------------\n\nTITLE: Running the Application Development Server (Shell)\nDESCRIPTION: Starts the development server specifically for the 'app' package within the monorepo using pnpm's filtering capability. This command compiles and serves the Next.js application, making the chatbot accessible for local testing and development, typically at http://localhost:3000.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/recipes/ai-chatbot.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev --filter app\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Clerk dependencies from auth package\nDESCRIPTION: Terminal command to remove Clerk related dependencies from the auth package using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @clerk/nextjs @clerk/themes @clerk/types --filter @repo/auth\n```\n\n----------------------------------------\n\nTITLE: Adding Hypertune Dependencies to Feature Flags Package using pnpm Shell\nDESCRIPTION: Installs the `hypertune` SDK and `server-only` utility package as dependencies specifically for the `@repo/feature-flags` workspace package using the pnpm package manager. These are required for integrating Hypertune.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm add hypertune server-only --filter @repo/feature-flags\n```\n\n----------------------------------------\n\nTITLE: Adding Hypertune Build Scripts to package.json in JSON\nDESCRIPTION: Updates the `package.json` file for the `feature-flags` package to include `analyze` and `build` scripts. Both scripts execute the `hypertune` CLI command, which is used for code generation based on the Hypertune project configuration.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyze\": \"hypertune\",\n    \"build\": \"hypertune\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest using Shared Configuration (TS)\nDESCRIPTION: This TypeScript snippet defines the content of `vitest.config.ts` for an app. It exports the default configuration imported directly from the shared `@repo/testing` package, ensuring consistent test setup across different apps in the monorepo.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/testing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// apps/[app]/vitest.config.ts\nexport { default } from '@repo/testing';\n```\n\n----------------------------------------\n\nTITLE: Running Linter in next-forge Project\nDESCRIPTION: Command to run the linter across all files in apps and packages of the next-forge project.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/formatting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Client\nDESCRIPTION: Set up the Better Auth client with React hooks for authentication functions.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from 'better-auth/react';\n\nexport const { signIn, signOut, signUp, useSession } = createAuthClient();\n```\n\n----------------------------------------\n\nTITLE: Highlighting Specific Words in Fumadocs (TypeScript)\nDESCRIPTION: This snippet demonstrates a Fumadocs feature for highlighting specific words within a code line using an inline comment. The comment `// [!code word:Highlighted]` targets the word 'Highlighted' on that line.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n````ts Fumadocs\nconsole.log('Highlighted'); // [!code word:Highlighted]\n````\n```\n\n----------------------------------------\n\nTITLE: Updating Root Layout for uploadthing SSR\nDESCRIPTION: Modifications to apps/app/app/layout.tsx to include the StorageSSRPlugin for uploadthing SSR hydration.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@repo/design-system/styles/globals.css';\nimport { DesignSystemProvider } from '@repo/design-system';\nimport { fonts } from '@repo/design-system/lib/fonts';\nimport { extractRouterConfig } from '@repo/storage';\nimport { StorageSSRPlugin } from '@repo/storage/ssr';\nimport type { ReactNode } from 'react';\nimport { router } from './lib/upload';\n\ntype RootLayoutProperties = {\n  readonly children: ReactNode;\n};\n\nconst RootLayout = ({ children }: RootLayoutProperties) => (\n  <html lang=\"en\" className={fonts} suppressHydrationWarning>\n    <body>\n      <StorageSSRPlugin routerConfig={extractRouterConfig(router)} />\n      <DesignSystemProvider>{children}</DesignSystemProvider>\n    </body>\n  </html>\n);\n\nexport default RootLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Order with Rest Operator in meta.json (Fumadocs)\nDESCRIPTION: This JSON snippet demonstrates using the rest operator (`...`) within the `pages` array in `meta.json`. This allows specifying the order for some pages ('index', 'apple') while automatically including all other pages in the directory afterwards.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n// meta.json\n{\n  \"title\": \"Components\", // optional\n  \"pages\": [\"index\", \"apple\", \"...\"] // file names (without extension)\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Content Collections Next.js Integration\nDESCRIPTION: This TypeScript code in `packages/cms/next-config.ts` re-exports the `withContentCollections` function from '@content-collections/next' under the alias `withCMS`, providing a consistent naming convention within the project.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport { withContentCollections as withCMS } from '@content-collections/next';\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js dependencies\nDESCRIPTION: Terminal command to add the Auth.js beta package to the auth module using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add next-auth@beta --filter @repo/auth\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Neon Dependencies\nDESCRIPTION: Shell command to remove Neon-related dependencies from the database package\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/planetscale.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm remove @neondatabase/serverless @prisma/adapter-neon ws @types/ws --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables for Supabase Connection in .env\nDESCRIPTION: This snippet shows how to update the .env file with Supabase connection details, including the DATABASE_URL with pgbouncer and connection limit parameters, and the DIRECT_URL.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/supabase.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDATABASE_URL=\"postgres://postgres:postgres@127.0.0.1:54322/postgres?pgbouncer=true&connection_limit=1\"\nDIRECT_URL=\"postgres://postgres:postgres@127.0.0.1:54322/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind CSS Configuration for Monorepo\nDESCRIPTION: This JavaScript snippet shows how to modify the `content` array in a `tailwind.config.mjs` file. It adjusts the path to `fumadocs-ui` components to ensure proper style application within a monorepo structure by referencing the correct `node_modules` directory.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.mjs\nexport default {\n  content: [\n    // from\n    './node_modules/fumadocs-ui/dist/**/*.js',\n    // to\n    '../../node_modules/fumadocs-ui/dist/**/*.js',\n\n    './components/**/*.{ts,tsx}',\n    // ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Pulse API Key in Environment Variables\nDESCRIPTION: Add the Pulse API key to the environment variables file to enable real-time database event streaming functionality.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nPULSE_API_KEY=\"ey....\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Existing Storage Dependencies\nDESCRIPTION: Command to remove the @vercel/blob package from the @repo/storage filter.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @vercel/blob --filter @repo/storage\n```\n\n----------------------------------------\n\nTITLE: Creating Route Handler for uploadthing\nDESCRIPTION: New route handler in apps/app/app/api/upload/route.ts to handle file routes for uploadthing.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { router } from '@/app/lib/upload';\nimport { createRouteHandler } from '@repo/storage';\n\nexport const { GET, POST } = createRouteHandler({ router });\n```\n\n----------------------------------------\n\nTITLE: Configuring PlanetScale Connection String\nDESCRIPTION: Example format of PlanetScale database connection string used for database authentication and connection\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/planetscale.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://<username>:<password>@<region>.aws.connect.psdb.cloud/<database>\n```\n\n----------------------------------------\n\nTITLE: Upgrading All Project Dependencies - Shell\nDESCRIPTION: Runs the 'bump-deps' custom pnpm command to update all dependencies in the project's package.json files and installs their latest versions. Requires pnpm package manager and the 'bump-deps' script defined in your project. Input: none; Output: all dependencies updated. It's recommended to run a build and start the development server afterward to ensure compatibility.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/updates.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npnpm bump-deps\n```\n\n----------------------------------------\n\nTITLE: Updating All shadcn/ui Components using CLI (Shell)\nDESCRIPTION: This command utilizes the `shadcn` CLI to update all installed components within the specified design system package (`packages/design-system`), overwriting existing files. It requires the `shadcn` CLI to be available via `npx` and should be run from the project root.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add --all --overwrite -c packages/design-system\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Neon Database Dependencies\nDESCRIPTION: Remove the existing Neon database dependencies that are no longer needed after migrating to Prisma Postgres.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @neondatabase/serverless @prisma/adapter-neon ws @types/ws\n```\n\n----------------------------------------\n\nTITLE: Creating Turso Database Auth Token\nDESCRIPTION: Command to create an authentication token for the Turso database using the CLI.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nturso db tokens create <database-name>\n```\n\n----------------------------------------\n\nTITLE: Viewing Prisma Postgres Connection String Format\nDESCRIPTION: Example of what a Prisma Postgres connection string looks like, typically obtained from the Prisma Data Platform.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/prisma-postgres.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprisma+postgres://accelerate.prisma-data.net/?api_key=ey....\n```\n\n----------------------------------------\n\nTITLE: Running Next-forge Update Script - Shell\nDESCRIPTION: Executes the update script provided by Next-forge using npx. Requires Node.js and npx to be installed. The command pulls and applies the latest template changes, guides the user through version selection, and helps update the project files. Input: none; Output: an interactive update process. Ensure you review and manually merge local changes post-update.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/updates.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx next-forge@latest update\n```\n\n----------------------------------------\n\nTITLE: Installing Specific shadcn/ui Component using CLI (Shell)\nDESCRIPTION: This command uses the `shadcn` CLI to add a new component (e.g., `select`) to the designated design system package (`packages/design-system`) within the `next-forge` project. It requires the `shadcn` CLI to be available via `npx` and should be run from the project root.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add select -c packages/design-system\n```\n\n----------------------------------------\n\nTITLE: Running Email Preview Server in next-forge\nDESCRIPTION: This command starts the email preview server for the 'email' application in next-forge. It allows developers to view and test email templates in the browser using react.email.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/apps/email.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev --filter email\n```\n\n----------------------------------------\n\nTITLE: Integrating Payment Capabilities with AI in next-forge\nDESCRIPTION: Example of adding payment functionality to an AI agent using the paymentsAgentToolkit with Stripe integration. This demonstrates how to use the toolkit to enable financial service capabilities in AI interactions.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/ai.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateText } from '@repo/ai';\nimport { paymentsAgentToolkit } from '@repo/payments/ai';\nimport { provider } from '@repo/ai/lib/provider';\nimport { models } from '@repo/ai/lib/models';\n\nconst response = await generateText({\n  model: models.chat,\n  tools: {\n    ...paymentsAgentToolkit.getTools(),\n  },\n  maxSteps: 5,\n  prompt: 'Create a payment link for a new product called \\\"Test\\\" with a price of $100.',\n})\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Prisma Dependencies in Next Forge\nDESCRIPTION: Command to remove existing Prisma and Neon-related dependencies from the @repo/database package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @prisma/adapter-neon @prisma/client prisma --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables for uploadthing\nDESCRIPTION: Example of updating environment variables in the apps/app/.env file to use uploadthing instead of Vercel Blob.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Remove this:\nBLOB_READ_WRITE_TOKEN=\"\"\n\n// Add this:\nUPLOADTHING_TOKEN=\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeDB Schema in Next Forge\nDESCRIPTION: EdgeDB schema definition for a Page type with email and name fields.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nmodule default {\n  type Page {\n    email: str {\n      constraint exclusive;\n    }\n    name: str\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Theme Using useTheme Hook in React TSX\nDESCRIPTION: This code snippet shows how to use the useTheme hook from next-themes to check the current theme. It demonstrates conditional rendering based on whether the resolved theme is dark or light.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/dark-mode.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'next-themes';\n\nconst MyPage = () => {\n  const { resolvedTheme } = useTheme();\n\n  return resolvedTheme === 'dark' ? 'Dark mode baby' : 'Light mode ftw';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Motion with pnpm in Terminal - Shell\nDESCRIPTION: This snippet shows the terminal command for installing the Motion library using pnpm. It requires that you have pnpm already installed in your development environment. Executing this command adds the 'motion' package as a dependency to your Node.js or React project, making its functionalities available for import. The command does not accept additional parameters; the effect is to update the project's package manifest with the 'motion' dependency.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/motion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add motion\n```\n\n----------------------------------------\n\nTITLE: Adding PlanetScale Development Script\nDESCRIPTION: Package.json script configuration for local PlanetScale development connection\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/planetscale.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"pscale connect [database_name] [branch_name] --port 3309\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying EdgeDB Migrations in Next Forge\nDESCRIPTION: Commands to create and apply EdgeDB migrations after schema changes.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx migration create\nnpx migration apply\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ModeToggle Component in React TSX\nDESCRIPTION: This snippet demonstrates how to import and use the ModeToggle component from the design system package. The ModeToggle component allows users to manually change the theme.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/design-system/dark-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModeToggle } from '@repo/design-system/components/mode-toggle';\n\nconst MyPage = () => (\n  <ModeToggle />\n);\n```\n\n----------------------------------------\n\nTITLE: Installing react-wrap-balancer via pnpm\nDESCRIPTION: Command to install the react-wrap-balancer package using pnpm package manager.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/react-wrap-balancer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add react-wrap-balancer\n```\n\n----------------------------------------\n\nTITLE: Updating Application Code to Use Turso\nDESCRIPTION: Example of how to update application code to use the Turso client instead of Prisma for database queries.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { database } from \"@repo/database\";\n\ntype PageType = {\n  id: number;\n  email: string;\n  name?: string;\n};\n\n// ...\n\nconst { rows } = await database.execute(`SELECT * FROM pages`);\n\nconst pages = rows as unknown as Array<PageType>;\n```\n\n----------------------------------------\n\nTITLE: Removing Dependency from Feature Flags Package using pnpm Shell\nDESCRIPTION: Uninstalls the `@repo/analytics` dependency specifically from the `@repo/feature-flags` workspace package using the pnpm package manager. This is part of swapping out old dependencies for Hypertune.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @repo/analytics --filter @repo/feature-flags\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migration for Supabase in Terminal\nDESCRIPTION: This command runs the Prisma migration for the updated Supabase configuration.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/supabase.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm run migrate\n```\n\n----------------------------------------\n\nTITLE: Generating EdgeDB TypeScript Code in Next Forge\nDESCRIPTION: Commands to generate TypeScript query builder and interfaces from EdgeDB schema.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx @edgedb/generate edgeql-js\nnpx @edgedb/generate interfaces\n```\n\n----------------------------------------\n\nTITLE: Installing Drizzle Dependencies\nDESCRIPTION: Commands to add Drizzle ORM and its development kit to the @repo/database package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add drizzle-orm --filter @repo/database\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D drizzle-kit --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Updating Mintlify CLI to the latest version\nDESCRIPTION: Commands to update the Mintlify CLI to the latest version using either npm or yarn. Updating ensures the local preview matches the production environment.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/development.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global upgrade mintlify\n```\n\n----------------------------------------\n\nTITLE: Removing Neon Dependencies in Terminal\nDESCRIPTION: This command removes the Neon-related dependencies from the project using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/supabase.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm remove @neondatabase/serverless @prisma/adapter-neon ws @types/ws --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with pnpm\nDESCRIPTION: This shell command executes all tests within the monorepo using pnpm. It triggers the 'test' script defined in the package.json files of each app, which typically runs Vitest. Tests located in `__tests__` folders are targeted.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/testing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting up Languine Project ID for Internationalization\nDESCRIPTION: This snippet shows how to set up the Languine project ID in the .env file for automatic translations.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/internationalization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nLANGUINE_PROJECT_ID=\"your-project-id\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Documentation Preview\nDESCRIPTION: This command installs the Mintlify CLI globally using npm, allowing users to preview documentation changes locally.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Initializing next-forge Project - Shell\nDESCRIPTION: This snippet demonstrates how to initialize a new next-forge project using the CLI command. It requires Node.js, npm/npx, and internet access to fetch the latest next-forge package. You will be prompted to provide your project name and choose a package manager during the interactive setup. Output directories and files are created, and further dependencies may include Mintlify CLI and Stripe CLI as specified.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/setup/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx next-forge@latest init\n```\n\n----------------------------------------\n\nTITLE: Linking the 'web' Directory using Vercel CLI (Shell)\nDESCRIPTION: This command navigates into the `apps/web` directory and executes `vercel link`. It links this specific front-end application within the monorepo to a Vercel project, enabling Vercel features like the toolbar. Requires the Vercel CLI to be installed and authenticated.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/toolbar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/web\nvercel link\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Paths for Content Collections\nDESCRIPTION: This JSON snippet for `packages/cms/typescript-config.json` updates the TypeScript compiler options. It adds a path alias mapping 'content-collections' to the generated types directory './.content-collections/generated', enabling type-safe imports of collection data.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking the 'app' Directory using Vercel CLI (Shell)\nDESCRIPTION: This command navigates into the `apps/app` directory and then executes `vercel link`. This links the specific application within the monorepo to a Vercel project, enabling Vercel features like the toolbar for this part of the application. Requires the Vercel CLI to be installed and authenticated.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/toolbar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/app\nvercel link\n```\n\n----------------------------------------\n\nTITLE: Translating Content using Internationalization Package\nDESCRIPTION: This command is used to translate all content in the application and save translations to the dictionaries folder.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/internationalization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm translate\n```\n\n----------------------------------------\n\nTITLE: Creating Table Schema in Turso\nDESCRIPTION: SQL command to create a 'pages' table in the Turso database.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE pages (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  email TEXT UNIQUE NOT NULL,\n  name TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Fumadocs UI Theme Presets via Tailwind Config\nDESCRIPTION: This JavaScript snippet shows how to apply a pre-defined Fumadocs UI theme preset (e.g., 'ocean') using the `createPreset` function within the `presets` array of a Tailwind CSS configuration file (`tailwind.config.mjs`). This offers a simpler way to apply consistent styling.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.mjs\nimport { createPreset } from 'fumadocs-ui/tailwind-plugin';\n \n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [\n    createPreset({\n      preset: 'ocean',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Stripe Webhook Handler in Next.js\nDESCRIPTION: Delete the Stripe webhook handler file from the API package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nrm apps/api/app/webhooks/stripe/route.ts\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Studio in next-forge\nDESCRIPTION: This command starts the Prisma Studio application, which runs on port 3005. It allows users to visualize and edit their database through a UI.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/apps/studio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev --filter studio\n```\n\n----------------------------------------\n\nTITLE: Installing NUQS Library via pnpm (Terminal, Shell)\nDESCRIPTION: This shell snippet demonstrates how to install the NUQS library using pnpm, a fast and efficient package manager. The required dependency is 'nuqs', which will be added to your project's node_modules and package.json. Running this command is a prerequisite before importing or using the NUQS library in your React application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/nuqs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add nuqs\n```\n\n----------------------------------------\n\nTITLE: Rendering Authors Component with Data in JSX\nDESCRIPTION: This code renders the Authors component with an array of author data. It includes information about two authors, their names, IDs, and associated companies.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/application.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Authors data={[{\n  user: {\n    name: 'Hayden Bleasel',\n    id: 'haydenbleasel',\n  },\n  company: {\n    name: 'next-forge',\n    id: 'next-forge',\n  },\n}, {\n  user: {\n    name: 'David Mytton',\n    id: 'davidmytton',\n  },\n  company: {\n    name: 'Arcjet',\n    id: 'arcjet',\n  },\n}]} />\n```\n\n----------------------------------------\n\nTITLE: Creating Turso Database using CLI\nDESCRIPTION: Commands to create a new Turso database and retrieve its URL using the Turso CLI.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nturso db create <database-name>\n```\n\nLANGUAGE: sh\nCODE:\n```\nturso db show <database-name> --url\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Stripe Dependencies in Next.js\nDESCRIPTION: Remove the Stripe package from the payments module using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove stripe --filter @repo/payments\n```\n\n----------------------------------------\n\nTITLE: Using Balancer Component in React\nDESCRIPTION: Example of how to import and use the Balancer component from react-wrap-balancer in a React component to improve title readability.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/react-wrap-balancer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Balancer } from 'react-wrap-balancer';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Balancer>This is a title that is too long to fit in one line.</Balancer>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Paddle Environment Keys in TypeScript\nDESCRIPTION: Update the payment keys configuration to include Paddle-specific environment variables using zod for validation.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createEnv } from '@t3-oss/env-nextjs';\nimport { Environment } from '@paddle/paddle-node-sdk'\nimport { z } from 'zod';\n\nexport const keys = () =>\n  createEnv({\n    server: {\n      PADDLE_SECRET_KEY: z.string().min(1),\n      PADDLE_WEBHOOK_SECRET: z.string().min(1).optional(),\n      PADDLE_ENV: z.enum([Environment.sandbox, Environment.production]).optional(),\n    },\n    client: {\n      NEXT_PUBLIC_PADDLE_CLIENT_TOKEN: z\n        .union([\n          z.string().min(1).startsWith('live_'),\n          z.string().min(1).startsWith('test_'),\n        ]),\n      NEXT_PUBLIC_PADDLE_ENV: z.enum([Environment.sandbox, Environment.production]).optional(),\n    },\n    runtimeEnv: {\n      PADDLE_SECRET_KEY: process.env.PADDLE_SECRET_KEY,\n      PADDLE_WEBHOOK_SECRET: process.env.PADDLE_WEBHOOK_SECRET,\n      PADDLE_ENV: process.env.PADDLE_ENV,\n      NEXT_PUBLIC_PADDLE_ENV: process.env.NEXT_PUBLIC_PADDLE_ENV,\n      NEXT_PUBLIC_PADDLE_CLIENT_TOKEN: process.env.NEXT_PUBLIC_PADDLE_CLIENT_TOKEN,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Removing Basehub Dependency via PNPM\nDESCRIPTION: This command removes the 'basehub' package dependency specifically from the '@repo/cms' workspace using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove basehub --filter @repo/cms\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code Lines in Fumadocs (TypeScript)\nDESCRIPTION: This snippet shows the Fumadocs method for highlighting a line in a TypeScript code block. It uses an inline comment `// [!code highlight]` at the end of the line to be highlighted.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconsole.log('Highlighted'); // [!code highlight]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Dub SDK via Package Manager\nDESCRIPTION: Command to install the Dub SDK package using pnpm package manager for programmatic integration.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/dub.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add dub\n```\n\n----------------------------------------\n\nTITLE: Installing Paddle JS SDK in Next.js\nDESCRIPTION: Add the Paddle JS SDK to the payments module for client-side integration.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @paddle/paddle-js --filter @repo/payments\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Content Collections\nDESCRIPTION: This snippet shows adding the '.content-collections' directory to the `.gitignore` file located in `apps/web` to prevent the generated content cache from being committed to version control.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_2\n\nLANGUAGE: git\nCODE:\n```\n# content-collections\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Using Inline Code in Markdown\nDESCRIPTION: Demonstrates how to format text as inline code by enclosing words or phrases in backticks (`). This is useful for highlighting code elements within regular text.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo denote a `word` or `phrase` as code, enclose it in backticks (`).\n```\n\n----------------------------------------\n\nTITLE: Initializing EdgeDB Project in Next Forge\nDESCRIPTION: Command to initialize an EdgeDB project and link it to a cloud instance.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx edgedb project init --server-instance <org_name>/<instance_name> --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Installing Zustand with PNPM\nDESCRIPTION: Command to install Zustand package using PNPM package manager.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/zustand.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add zustand\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Order with meta.json in Fumadocs (Basic)\nDESCRIPTION: This JSON snippet shows a basic `meta.json` file used by Fumadocs to configure the sidebar for a specific folder. It defines an optional folder title and specifies the order of pages ('index', 'apple') using their filenames without extensions.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n// meta.json\n{\n  \"title\": \"Components\", // optional\n  \"pages\": [\"index\", \"apple\"] // file names (without extension)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SSR File for uploadthing\nDESCRIPTION: New file packages/storage/ssr.ts to handle Tailwind CSS classes and SSR for uploadthing.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport { NextSSRPlugin as StorageSSRPlugin } from '@uploadthing/react/next-ssr-plugin';\n```\n\n----------------------------------------\n\nTITLE: Defining the PostgreSQL Database Connection String Format\nDESCRIPTION: This snippet shows the typical format for a `DATABASE_URL` environment variable when connecting to a PostgreSQL database, like the one provided by Neon for a next-forge project. It includes placeholders for essential credentials (username, password, host, port, database name) required by Metabase for establishing a connection. The `sslmode=require` parameter is often necessary for secure cloud database connections.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/metabase.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nDATABASE_URL=\"postgresql://[username]:[password]@[hostname]:[port]/[database_name]?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Creating Fenced Code Blocks\nDESCRIPTION: Illustrates the Markdown syntax needed to create fenced code blocks with language specification and optional filename. The example shows the proper formatting with triple backticks and language identifier.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Prisma Directory in Next Forge\nDESCRIPTION: Command to delete the Prisma directory from the @repo/database package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrm -fr packages/database/prisma\n```\n\n----------------------------------------\n\nTITLE: Running Formatter in next-forge Project\nDESCRIPTION: Command to check and fix formatting across all files in apps and packages of the next-forge project.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/formatting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm format\n```\n\n----------------------------------------\n\nTITLE: Installing uploadthing Dependencies\nDESCRIPTION: Command to add uploadthing and @uploadthing/react packages to the @repo/storage filter.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add uploadthing @uploadthing/react --filter @repo/storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot for Monthly Dependency Checks in YAML\nDESCRIPTION: This YAML configuration sets up Dependabot to check for package updates every month. When updates are available, Dependabot will automatically open a pull request.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/dependencies.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.github/dependabot.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Section Headers in Markdown\nDESCRIPTION: Demonstrates how to create main section headers using level 2 markdown heading syntax.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/markdown.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Titles\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PlanetScale\nDESCRIPTION: Environment variable configuration for database connection strings in both database and app environments\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/planetscale.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDATABASE_URL=\"mysql://<username>:<password>@<region>.aws.connect.psdb.cloud/<database>\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDATABASE_URL=\"mysql://<username>:<password>@<region>.aws.connect.psdb.cloud/<database>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Hypertune Token Environment Variable in JavaScript\nDESCRIPTION: Adds the `NEXT_PUBLIC_HYPERTUNE_TOKEN` environment variable to the application's `.env` file. This token is required for the Hypertune SDK to authenticate with the Hypertune service. It should be populated with the token obtained from the Hypertune project settings.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/flags/hypertune.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Add this:\nNEXT_PUBLIC_HYPERTUNE_TOKEN=\"\"\n```\n\n----------------------------------------\n\nTITLE: Example API Auth Input Prefix\nDESCRIPTION: Provides an example value ('AuthKey') for the 'inputPrefix' property within the 'api.auth' configuration. This string sets a default prefix for the authentication input field in the API playground.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nAuthKey\n```\n\n----------------------------------------\n\nTITLE: Creating Subsection Headers in Markdown\nDESCRIPTION: Shows how to create subsection headers using level 3 markdown heading syntax.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/markdown.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Subtitles\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Biome Dependencies\nDESCRIPTION: Command to remove Biome-related packages from the project.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/formatting/eslint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove -w @biomejs/biome ultracite\n```\n\n----------------------------------------\n\nTITLE: Referencing Required Mintlify Configuration File\nDESCRIPTION: Shows the reference to the mint.json file that is required for every Mintlify site. This file contains core configuration settings for controlling the look and feel of Mintlify documentation.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nmint.json\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Blockquote in Markdown\nDESCRIPTION: Shows how to create a multi-line blockquote using multiple greater than symbols with line breaks.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/markdown.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n> Dorothy followed her through many of the beautiful rooms in her castle.\\n>\\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables for Turso\nDESCRIPTION: Example of updating environment variables in .env files to use the Turso connection string and auth token.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nDATABASE_URL=\"libsql://<database-name>-<account-or-org-slug>.turso.io\"\nDATABASE_AUTH_TOKEN=\"...\"\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Dependencies\nDESCRIPTION: Command to add ESLint and related plugins to the project as dev dependencies.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/formatting/eslint.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -w -D eslint eslint-plugin-next eslint-plugin-react eslint-plugin-react-hooks typescript-eslint\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: Import statements for Authors and VercelButton components from MDX snippets directory.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/deployment/vercel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Authors } from '/snippets/authors.mdx';\nimport { VercelButton } from '/snippets/vercel.mdx';\n```\n\n----------------------------------------\n\nTITLE: Using LaTeX Component in Markdown\nDESCRIPTION: Demonstrates how to embed LaTeX mathematical expressions using the Latex component.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/markdown.mdx#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>\n```\n\n----------------------------------------\n\nTITLE: Installing PlanetScale Dependencies\nDESCRIPTION: Shell command to add PlanetScale-related dependencies to the database package\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/planetscale.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @planetscale/database @prisma/adapter-planetscale --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Defining Authors Component Props in MDX/JSX\nDESCRIPTION: MDX component configuration for displaying author information with nested user and company data structures.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/deployment/vercel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Authors data={[{\n  user: {\n    name: 'Hayden Bleasel',\n    id: 'haydenbleasel',\n  },\n  company: {\n    name: 'next-forge',\n    id: 'next-forge',\n  },\n}, {\n  user: {\n    name: 'Anthony Shew',\n    id: 'anthonysheww',\n  },\n  company: {\n    name: 'Vercel',\n    id: 'vercel',\n  },\n}]} />\n```\n\n----------------------------------------\n\nTITLE: Placeholder Toolbar Component\nDESCRIPTION: This TSX snippet in `packages/cms/components/toolbar.tsx` defines a simple `Toolbar` component that returns `null`. This likely serves as a placeholder or removes functionality previously associated with a Basehub toolbar.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescriptreact\nCODE:\n```\nexport const Toolbar = () => null;\n```\n\n----------------------------------------\n\nTITLE: Modifying Environment Configuration for Turso\nDESCRIPTION: Updates to the environment configuration file to include the DATABASE_AUTH_TOKEN for Turso.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst server: Parameters<typeof createEnv>[0][\"server\"] = {\n  // ...\n  DATABASE_AUTH_TOKEN: z.string(),\n  // ...\n};\n\nexport const env = createEnv({\n  client,\n  server,\n  runtimeEnv: {\n    // ...\n    DATABASE_AUTH_TOKEN: process.env.DATABASE_AUTH_TOKEN,\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Turso Client Library\nDESCRIPTION: Commands to uninstall Neon-related dependencies and install the Turso client library.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/turso.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @neondatabase/serverless @prisma/adapter-neon ws @types/ws --filter @repo/database\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @libsql/client --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Frame Component with Image\nDESCRIPTION: MDX component for displaying a framed deployment image.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/deployment/vercel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <img src=\"/images/deployment/vercel.png\" alt=\"\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Default Topbar CTA Button Type\nDESCRIPTION: Specifies the default value ('link') for the 'type' property within the 'topbarCtaButton' configuration object. This indicates that the default call-to-action button behaves as a simple hyperlink.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nlink\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/storybook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Prisma Dependencies\nDESCRIPTION: Command to remove Prisma-related packages from the @repo/database package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/drizzle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @prisma/adapter-neon @prisma/client prisma --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Creating a Java Code Block with Syntax Highlighting in Markdown\nDESCRIPTION: Shows how to create a fenced code block with Java syntax highlighting by using three backticks followed by the language identifier. The example includes a filename specification after the language.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Anchor Icon Name\nDESCRIPTION: Shows an example value for the 'icon' property within an 'anchors' array item. This string specifies a Font Awesome icon class to be used for the anchor.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ncomments\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema for Supabase Connection\nDESCRIPTION: This Prisma schema update adds the DIRECT_URL to the datasource configuration, allowing Prisma CLI to perform actions by bypassing Supavisor.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/supabase.mdx#2025-04-23_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"postgresql\"\n  url          = env(\"DATABASE_URL\")\n  directUrl    = env(\"DIRECT_URL\")\n  relationMode = \"prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Authors Component in JSX\nDESCRIPTION: This snippet imports the Authors component from a custom MDX file. It's used to display author information for the documentation.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/security/application.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Authors } from '/snippets/authors.mdx';\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: This command starts the Mintlify development server at the root of the documentation project, where the mint.json file is located.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Generating Better Auth Secret\nDESCRIPTION: Generate a secret for Better Auth and add it to the .env.local file in Next.js applications.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx @better-auth/cli secret\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable MDX Component\nDESCRIPTION: Shows how to create a reusable component in MDX using arrow function syntax with props support.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/reusable-snippets.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nexport const MyComponent = ({ title }) => (\n  <div>\n    <h1>{title}</h1>\n    <p>... snippet content ...</p>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Default Top Anchor Icon\nDESCRIPTION: Specifies the default Font Awesome icon ('book-open') for the top-most anchor section, configured via the 'topAnchor' object.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nbook-open\n```\n\n----------------------------------------\n\nTITLE: Displaying Customization Option Cards (JSX)\nDESCRIPTION: Utilizes a `CardGroup` component (`cols={2}`) to display four `Card` components in a two-column layout. These cards link to resources for customizing style, referencing APIs, adding components, and finding inspiration, each featuring a relevant title, icon, and link (`href`). These are likely custom components specific to the documentation platform.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/introduction.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"Customize Style\"\n    icon=\"palette\"\n    href=\"https://mintlify.com/docs/settings/global\"\n  >\n    Customize your docs to your company's colors and brands\n  </Card>\n  <Card\n    title=\"Reference APIs\"\n    icon=\"code\"\n    href=\"https://mintlify.com/docs/api-playground/openapi\"\n  >\n    Automatically generate endpoints from an OpenAPI spec\n  </Card>\n  <Card\n    title=\"Add Components\"\n    icon=\"screwdriver-wrench\"\n    href=\"https://mintlify.com/docs/components/accordion\"\n  >\n    Build interactive features and designs to guide your users\n  </Card>\n  <Card\n    title=\"Get Inspiration\"\n    icon=\"stars\"\n    href=\"https://mintlify.com/customers\"\n  >\n    Check out our showcase of our favorite documentation\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: BaseHub Token Format Example\nDESCRIPTION: Example of how a BaseHub token appears, which is required for authenticating your application with the BaseHub CMS.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/cms.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nbshb_pk_<password>\n```\n\n----------------------------------------\n\nTITLE: Removing Prisma Studio in Next Forge\nDESCRIPTION: Command to remove the Prisma Studio app directory after migrating to EdgeDB.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nrm -fr apps/studio\n```\n\n----------------------------------------\n\nTITLE: Default Top Anchor Icon Type\nDESCRIPTION: Specifies the default Font Awesome icon style ('duotone') for the top-most anchor section, configured via the 'topAnchor' object.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nduotone\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB Dependencies in Next Forge\nDESCRIPTION: Command to add EdgeDB-related dependencies to the @repo/database package.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add edgedb @edgedb/generate\n```\n\n----------------------------------------\n\nTITLE: Rendering Author List Component in React (JSX)\nDESCRIPTION: This React functional component `Authors` accepts an array `data` as a prop, where each element represents an author with `user` and `company` details (including IDs and names). It dynamically determines the `baseUrl` for images, checking if the window's location origin includes 'localhost' to decide between an empty path (for local serving) or a fixed GitHub raw content URL. It then maps over the `data` array to render each author's information, including their profile picture (`/images/authors/${author.company.id}/${author.user.id}.jpg`) and company logo (`/images/authors/${author.company.id}/logo.jpg`), along with their name and company name. The component uses extensive inline styles for layout and appearance.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/snippets/authors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Authors = ({ data }) => {\n  const baseUrl = (typeof window !== 'undefined' && window.location.origin.includes('localhost')) ? '' : 'https://raw.githubusercontent.com/haydenbleasel/next-forge/refs/heads/main/docs';\n\n  return (\n    <div style={{ marginBottom: '3rem', display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n      <span style={{ color: 'rgb(107, 114, 128)', fontSize: '0.875rem' }}>Co-authored by</span>\n      <div style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center', gap: '0.5rem' }}>\n        {data.map((author) => (\n          <div\n            key={author.name}\n            style={{\n              padding: '0.75rem',\n              paddingRight: '1rem',\n              display: 'inline-flex',\n              alignItems: 'center',\n              gap: '0.75rem',\n              fontWeight: 'normal',\n              position: 'relative',\n              ringWidth: '2px',\n              ringColor: 'transparent',\n              borderRadius: '0.75rem',\n              backgroundColor: 'white',\n              border: '1px solid rgba(0,0,0,0.1)',\n              overflow: 'hidden'\n            }}\n          >\n            <div style={{ position: 'relative' }}>\n              <div style={{ overflow: 'hidden', border: '1px solid #e5e7eb', borderRadius: '9999px', width: '2rem', height: '2rem' }}>\n                <img\n                  style={{ margin: 0, width: '100%', height: '100%', objectFit: 'cover' }}\n                  src={`${baseUrl}/images/authors/${author.company.id}/${author.user.id}.jpg`}\n                  alt=\"\"\n                  width={32}\n                  height={32}\n                />\n              </div>\n              <div\n                style={{\n                  position: 'absolute',\n                  border: '1px solid white',\n                  overflow: 'hidden',\n                  borderRadius: '9999px',\n                  objectFit: 'cover',\n                  width: '1rem',\n                  height: '1rem',\n                  right: '-0.25rem',\n                  bottom: '-0.25rem'\n                }}\n              >\n                <img\n                  style={{ margin: 0, width: '100%', height: '100%', objectFit: 'cover' }}\n                  src={`${baseUrl}/images/authors/${author.company.id}/logo.jpg`}\n                  alt=\"\"\n                  width={16}\n                  height={16}\n                />\n              </div>\n            </div>\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n              <span\n                style={{\n                  fontWeight: 600,\n                  lineHeight: 1.25,\n                  fontSize: '13px',\n                  letterSpacing: '-0.01em'\n                }}\n              >\n                {author.user.name}\n              </span>\n              <span\n                style={{\n                  color: 'rgb(107, 114, 128)',\n                  lineHeight: 1.25,\n                  fontSize: '11px'\n                }}\n              >\n                {author.company.name}\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Code Block Title in Fumadocs (Shell)\nDESCRIPTION: This snippet demonstrates the Fumadocs syntax for creating a shell code block with a title ('Name'). The title is specified using the `title=\"Name\"` attribute within the opening fence.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Name\"\npnpm i\n```\n```\n\n----------------------------------------\n\nTITLE: Launching EdgeDB UI in Next Forge\nDESCRIPTION: Command to start the EdgeDB UI for managing the database and browsing data.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/edgedb.mdx#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpx edgedb ui\n```\n\n----------------------------------------\n\nTITLE: Default API Playground Mode\nDESCRIPTION: Specifies the default value ('show') for the 'mode' property within the 'api.playground' configuration. This indicates that the API playground is fully visible and interactive by default.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nshow\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js sign-in component\nDESCRIPTION: React component for sign-in that uses Auth.js signIn function within a server action to authenticate users.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '../';\n\nexport const SignIn = () => (\n  <form\n    action={async () => {\n      \"use server\";\n      await signIn();\n    }}\n  >\n    <button type=\"submit\">Sign in</button>\n  </form>\n);\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code Lines in Mintlify (TypeScript)\nDESCRIPTION: This snippet illustrates the Mintlify syntax for highlighting a specific line (line 1) in a TypeScript code block. Highlighting information is provided within curly braces `{}` after the language identifier.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts {1}\nconsole.log('Highlighted');\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Single Blockquote in Markdown\nDESCRIPTION: Demonstrates how to create a single-line blockquote using the greater than symbol.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/markdown.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> Dorothy followed her through many of the beautiful rooms in her castle.\n```\n\n----------------------------------------\n\nTITLE: Example Footer Socials Key\nDESCRIPTION: Provides an example key ('x') for the 'footerSocials' object. Keys represent the social media platform (e.g., 'x', 'github', 'website').\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nx\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Models for Better Auth\nDESCRIPTION: Generate Prisma models for Better Auth using the CLI command.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx @better-auth/cli generate --output ./packages/database/prisma/schema.prisma --config ./packages/auth/server.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Code Groups in Mintlify (TSX)\nDESCRIPTION: This TSX snippet shows the Mintlify approach to creating tabbed code groups using the `<CodeGroup>` component. Each code block within the group becomes a separate tab, with the tab title inferred or specified.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<CodeGroup>\n\n```ts Tab One\nconsole.log('Hello, world!');\n```\n\n```ts Tab Two\nconsole.log('Hello, world!');\n```\n</CodeGroup>\n```\n\n----------------------------------------\n\nTITLE: Generating Friendly Words with friendlier-words in TypeScript\nDESCRIPTION: This TypeScript example shows how to import the `friendlyWords` function from the `friendlier-words` package. It demonstrates generating word combinations using both the default settings (two segments, hyphen separator) and custom settings (three segments, underscore separator specified by passing `3` and `'_'` as arguments). The function returns a string composed of randomly selected friendly words, useful for generating memorable project names or identifiers.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/friendlier-words.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { friendlyWords } from 'friendlier-words';\n\n// Default (2 segments, '-')\n// e.g. robust-chicken, happy-cat, modest-pear\nconst words = friendlyWords();\n\n// Custom (3 segments, '_')\n// e.g. keen_explorer_oak, comforting_cactus_constructor, playful_tiger_breeze\nconst words = friendlyWords(3, '_');\n```\n\n----------------------------------------\n\nTITLE: Example Footer Socials URL Property\nDESCRIPTION: Provides an example URL ('https://x.com/mintlify') corresponding to a key in the 'footerSocials' object. This is the link associated with the social media platform key.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nhttps://x.com/mintlify\n```\n\n----------------------------------------\n\nTITLE: Configuring Different AI Provider in next-forge\nDESCRIPTION: Example of modifying the AI provider configuration to use Anthropic instead of the default provider. This demonstrates how to customize the underlying AI service used by the application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/ai.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAnthropic } from '@ai-sdk/anthropic';\n\nexport const provider = createAnthropic({\n  apiKey: env.ANTHROPIC_API_KEY,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections Dependencies via PNPM\nDESCRIPTION: These commands add the necessary runtime and development dependencies for Content Collections (@content-collections/mdx, fumadocs-core, @content-collections/cli, @content-collections/core, @content-collections/next) to the '@repo/cms' workspace using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @content-collections/mdx fumadocs-core --filter @repo/cms\npnpm add -D @content-collections/cli @content-collections/core @content-collections/next --filter @repo/cms\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Dependencies in Terminal\nDESCRIPTION: This command installs the Supabase dependency for the database package using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/database/supabase.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm install -D supabase --filter @repo/database\n```\n\n----------------------------------------\n\nTITLE: Logging in with Stripe CLI (Shell)\nDESCRIPTION: This command initiates the login process for the Stripe Command Line Interface (CLI). It is used after installing the Stripe CLI to authenticate the local machine with the user's Stripe account, which is necessary for forwarding payment webhooks locally during development.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/setup/prerequisites.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nstripe login\n```\n\n----------------------------------------\n\nTITLE: Defining Code Block Title in Mintlify (Shell)\nDESCRIPTION: This snippet shows the Mintlify syntax for creating a shell code block with a title ('Name'). The title is specified directly after the language identifier.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n```sh Name\npnpm i\n```\n```\n\n----------------------------------------\n\nTITLE: Example Topbar Link Name\nDESCRIPTION: Provides an example value for the 'name' property within a 'topbarLinks' array item. This string defines the display text for a link in the top navigation bar.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nContact us\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest and Testing Library Dependencies with pnpm\nDESCRIPTION: This shell command uses pnpm to install Vitest, React Testing Library, and DOM Testing Library as development dependencies (`-D`) for a specific app (`--filter [app]`) within the monorepo. Replace `[app]` with the actual application directory name.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/testing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install -D vitest @testing-library/react @testing-library/dom --filter [app]\n```\n\n----------------------------------------\n\nTITLE: Port conflict error message\nDESCRIPTION: Error message that appears when trying to run Mintlify on a port that's already in use by another application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/development.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nError: listen EADDRINUSE: address already in use :::3000\n```\n\n----------------------------------------\n\nTITLE: Default Anchor Hidden State\nDESCRIPTION: Specifies the default value (`false`) for the 'isDefaultHidden' boolean property within an 'anchors' array item. By default, anchors are visible unless explicitly linked to.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI via npm or yarn\nDESCRIPTION: Commands to install Mintlify globally using either npm or yarn package managers. This is required to run documentation locally.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/development.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add mintlify\n```\n\n----------------------------------------\n\nTITLE: Default Top Anchor Name\nDESCRIPTION: Specifies the default name ('Documentation') for the top-most anchor section, configured via the 'topAnchor' object.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nDocumentation\n```\n\n----------------------------------------\n\nTITLE: Running Metabase with Docker using Shell\nDESCRIPTION: This command starts a Metabase instance using the official Docker image. It runs the container in detached mode (`-d`), names it 'metabase' (`--name`), and maps the host's port 3000 to the container's port 3000 (`-p 3000:3000`), making Metabase accessible via `http://localhost:3000`. Requires Docker to be installed and running.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/metabase.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d --name metabase -p 3000:3000 metabase/metabase\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI File Location in JSON\nDESCRIPTION: Illustrates different ways to configure the 'openapi' property using JSON. This property accepts a string or an array of strings pointing to OpenAPI specification files, which can be absolute URLs or relative paths. These examples show how to provide a single absolute URL, a single relative path, or multiple file locations.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": \"https://example.com/openapi.json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": \"/openapi.json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": [\"https://example.com/openapi1.json\", \"/openapi2.json\", \"/openapi3.json\"]\n```\n\n----------------------------------------\n\nTITLE: Example Footer Socials Configuration in JSON\nDESCRIPTION: Shows an example JSON object for the 'footerSocials' property. This object maps social media platform keys (like 'x' or 'website') to their corresponding profile or website URLs, which are then displayed in the documentation footer.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"x\": \"https://x.com/mintlify\",\n  \"website\": \"https://mintlify.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fuse.js Using pnpm (Shell)\nDESCRIPTION: This shell command snippet demonstrates how to add the Fuse.js library as a dependency using pnpm. The command fetches and integrates the latest Fuse.js package into the current project. Ensure pnpm is installed before running this command.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/fuse.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add fuse.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Setup Guide Cards (JSX)\nDESCRIPTION: Uses a `CardGroup` component with `cols={2}` to arrange two `Card` components side-by-side. Each card provides a title, icon, link (`href`), and description related to initial documentation setup steps: editing locally and previewing changes. These are likely custom components within the documentation framework.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"Edit Your Docs\"\n    icon=\"pen-to-square\"\n    href=\"https://mintlify.com/docs/quickstart\"\n  >\n    Get your docs set up locally for easy development\n  </Card>\n  <Card\n    title=\"Preview Changes\"\n    icon=\"image\"\n    href=\"https://mintlify.com/docs/development\"\n  >\n    Preview your changes before you push to make sure they're perfect\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Paddle SDK in Next.js\nDESCRIPTION: Add the Paddle Node.js SDK to the payments module using pnpm.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/payments/paddle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @paddle/paddle-node-sdk --filter @repo/payments\n```\n\n----------------------------------------\n\nTITLE: Enabling ESLint in Next.js App Package\nDESCRIPTION: Update to the package.json file in Next.js apps to include the lint script for ESLint.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/formatting/eslint.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Provider Component\nDESCRIPTION: Replace the Clerk AuthProvider with a stub component for Better Auth compatibility.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/better-auth.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from 'react';\n\ntype AuthProviderProps = {\n  children: ReactNode;\n};\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => children;\n```\n\n----------------------------------------\n\nTITLE: Adding Preview Image to Documentation - Markdown\nDESCRIPTION: This Markdown snippet embeds an image inside a <Frame> custom component, displaying a preview (storybook.png) with descriptive alt text. This visually supplements the documentation for Storybook, showing users what to expect. Dependencies include the /images/storybook.png asset and support for custom components in the documentation rendering system.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/apps/storybook.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<Frame>\n  <img src=\"/images/storybook.png\" alt=\"A preview of storybook\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Navigation Group in mint.json (JSON)\nDESCRIPTION: This JSON snippet shows the basic structure for defining a navigation section within the `mint.json` file. It demonstrates creating a group named \"Getting Started\" and listing the pages (e.g., \"quickstart\") that should appear under it in the website's navigation menu. Page names correspond to MDX files without the extension.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/navigation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": [\n    {\n        \"group\": \"Getting Started\",\n        \"pages\": [\"quickstart\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Light/Dark Mode Hero Images (JSX)\nDESCRIPTION: Renders two image elements for the hero section. One is displayed in light mode (`block dark:hidden`) and the other in dark mode (`hidden dark:block`), providing theme-specific visuals. Assumes Tailwind CSS or similar utility classes for visibility control.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  className=\"block dark:hidden\"\n  src=\"/images/hero-light.svg\"\n  alt=\"Hero Light\"\n/>\n<img\n  className=\"hidden dark:block\"\n  src=\"/images/hero-dark.svg\"\n  alt=\"Hero Dark\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the Generic Callout Component in Fumadocs (TSX)\nDESCRIPTION: This TSX snippet shows the Fumadocs approach using a single, generic `Callout` component. The type of callout (e.g., `info`, `warn`, `error`) and an optional title are specified via props.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Callout title=\"Title\" type=\"info\">Hello World</Callout>\n<Callout title=\"Title\" type=\"warn\">Hello World</Callout>\n<Callout title=\"Title\" type=\"error\">Hello World</Callout>\n```\n\n----------------------------------------\n\nTITLE: Example MDX Content Structure for Content Collections\nDESCRIPTION: This MDX snippet shows an example file (`my-first-post.mdx`) located in `apps/web/content/blog`. It demonstrates the use of YAML frontmatter (title, description, date, image) required by the defined 'posts' collection schema. The filename serves as the slug.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/cms/content-collections.mdx#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'My First Post'\ndescription: 'This is my first blog post'\ndate: 2024-10-23\nimage: /blog/my-first-post.png\n---\n\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Navigation Groups in mint.json (JSON)\nDESCRIPTION: This JSON snippet illustrates the recursive capability of the navigation configuration in `mint.json`. It shows how to embed a nested group (\"Nested Reference Pages\" with its own pages) within a primary group (\"Getting Started\"), allowing for hierarchical navigation menus.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/navigation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": [\n    {\n        \"group\": \"Getting Started\",\n        \"pages\": [\n            \"quickstart\",\n            {\n                \"group\": \"Nested Reference Pages\",\n                \"pages\": [\"nested-reference-page\"]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest Test Script to package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates adding a `test` script to an app's `package.json` file. This script simply calls the `vitest` command-line interface. Turborepo automatically detects and runs scripts named `test` when `pnpm test` is executed at the root.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/testing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// apps/[app]/package.json {3}\n{\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Pages in Folders in mint.json (JSON)\nDESCRIPTION: This JSON example demonstrates how to include pages located within subfolders in the navigation structure defined in `mint.json`. The path specified in the `pages` array (e.g., \"your-folder/your-page\") directly maps to the corresponding MDX file location (`your-folder/your-page.mdx`) in the project.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/navigation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": [\n    {\n        \"group\": \"Group Name\",\n        \"pages\": [\"your-folder/your-page\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Authors Data Structure in MDX\nDESCRIPTION: This snippet demonstrates passing structured author data (name, ID, company) to an imported `Authors` component within an MDX file. It showcases how to structure data for components in MDX.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/documentation/fumadocs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Authors data={[{\n  user: {\n    name: 'Hayden Bleasel',\n    id: 'haydenbleasel',\n  },\n  company: {\n    name: 'next-forge',\n    id: 'next-forge',\n  },\n}, {\n  user: {\n    name: 'Fuma Nama',\n    id: 'fuma-nama',\n  },\n  company: {\n    name: 'Fumadocs',\n    id: 'fumadocs',\n  },\n}]} />\n```\n\n----------------------------------------\n\nTITLE: Forcing Dark Mode via JSON Configuration\nDESCRIPTION: This JSON configuration snippet demonstrates how to force the documentation site to always display in dark mode. It sets the default mode to 'dark' and hides the mode toggle button by setting 'isHidden' to true within the 'modeToggle' object.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n```json Only Dark Mode\n\"modeToggle\": {\n  \"default\": \"dark\",\n  \"isHidden\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Forcing Light Mode via JSON Configuration\nDESCRIPTION: This JSON configuration snippet shows how to enforce light mode exclusively on the documentation site. It achieves this by setting the 'default' mode to 'light' and hiding the mode toggle ('isHidden': true) within the 'modeToggle' configuration object.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n```json Only Light Mode\n\"modeToggle\": {\n  \"default\": \"light\",\n  \"isHidden\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating VSCode Settings for ESLint\nDESCRIPTION: VSCode settings to enable ESLint formatting and linting on save, along with other editor configurations.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/formatting/eslint.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true,\n    \"source.fixAll.eslint\": true\n  },\n  \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\",\n  \"editor.formatOnPaste\": true,\n  \"editor.formatOnSave\": true,\n  \"emmet.showExpandedAbbreviation\": \"never\",\n  \"prettier.enable\": true,\n  \"tailwindCSS.experimental.configFile\": \"./packages/tailwind-config/config.ts\",\n  \"typescript.tsdk\": \"node_modules/typescript/lib\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Feedback Suggest Edit State\nDESCRIPTION: Specifies the default value (`false`) for the 'suggestEdit' boolean property within the 'feedback' configuration object. By default, the button allowing users to suggest edits via pull requests is disabled.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Analyzer in next-forge Projects\nDESCRIPTION: This command runs the bundle analyzer for all apps in the project using Turborepo. It generates HTML files showing treemaps of module sizes for client, nodejs, and edge environments.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/next-config/bundle-analysis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm analyze\n```\n\n----------------------------------------\n\nTITLE: Default Feedback Raise Issue State\nDESCRIPTION: Specifies the default value (`false`) for the 'raiseIssue' boolean property within the 'feedback' configuration object. By default, the button allowing users to raise issues about the documentation is disabled.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Example Navigation Pages Array\nDESCRIPTION: Shows an example JSON array of strings for the 'pages' field within a 'navigation' array item. Each string is a relative path to a markdown file that represents a page within that navigation group.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\"customization\", \"page\"]\n```\n\n----------------------------------------\n\nTITLE: Example Topbar Link URL\nDESCRIPTION: Provides an example value for the 'url' property within a 'topbarLinks' array item. This string specifies the destination URL when the corresponding top bar link is clicked.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhttps://mintlify.com/contact\n```\n\n----------------------------------------\n\nTITLE: Creating Auth.js main implementation file\nDESCRIPTION: Implementation of the main Auth.js file that exports handlers, signIn, signOut, and auth functions for use throughout the application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport NextAuth from \"next-auth\";\n \nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Default Logo Link Href\nDESCRIPTION: Specifies the default value for the 'href' property within the 'logo' object configuration. This determines the link target when the logo is clicked, defaulting to the root path.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/\n```\n\n----------------------------------------\n\nTITLE: Default Anchor Icon Type\nDESCRIPTION: Specifies the default value ('duotone') for the 'iconType' property within an 'anchors' array item. This defines the default style for the Font Awesome icon used.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nduotone\n```\n\n----------------------------------------\n\nTITLE: Capturing Product Events with PostHog in next-forge\nDESCRIPTION: Shows how to use the capture method to send events to PostHog, including specifying the event name and user identifier.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/analytics/product.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nanalytics.capture({\n  event: 'Product Purchased',\n  distinctId: 'user_123',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Snippet\nDESCRIPTION: Shows how to import and use a custom MDX snippet in a destination file, including frontmatter setup and prop passing.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/reusable-snippets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport MySnippet from '/snippets/path/to/my-snippet.mdx';\n\n## Header\n\nLorem impsum dolor sit amet.\n\n<MySnippet word=\"bananas\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a stub AuthProvider component\nDESCRIPTION: Simple pass-through provider component since Auth.js doesn't use the provider pattern that Clerk uses.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/authentication/authjs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from 'react';\n\ntype AuthProviderProps = {\n  children: ReactNode;\n};\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => children;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Authentication in OpenAPI Specification\nDESCRIPTION: This JSON snippet demonstrates how to configure Bearer token authentication for API endpoints in an OpenAPI specification file. It defines the security scheme for all endpoints.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/api-reference/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"security\": [\n  {\n    \"bearerAuth\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify on a custom port\nDESCRIPTION: Command to start Mintlify on a specific port using the --port flag. This is useful when the default port 3000 is already in use.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/development.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev --port 3333\n```\n\n----------------------------------------\n\nTITLE: Example Navigation Group Name\nDESCRIPTION: Illustrates an example value for the 'group' field within a 'navigation' array item. This string defines the name of a section in the documentation navigation.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSettings\n```\n\n----------------------------------------\n\nTITLE: Starting the Mintlify development server\nDESCRIPTION: Command to start the Mintlify development server from the documentation root directory where mint.json is located. This will make the docs available at http://localhost:3000.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/development.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Variables\nDESCRIPTION: Demonstrates how to import and use exported variables from an MDX snippet file in a destination file.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/reusable-snippets.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { myName, myObject } from '/snippets/path/to/custom-variables.mdx';\n\nHello, my name is {myName} and I like {myObject.fruit}.\n```\n\n----------------------------------------\n\nTITLE: Example Anchor Name\nDESCRIPTION: Provides an example value for the 'name' property within an 'anchors' array item. This string defines the label displayed for the anchor in the navigation.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nCommunity\n```\n\n----------------------------------------\n\nTITLE: Example Project Name Configuration\nDESCRIPTION: Provides an example value for the 'name' property, which sets the global title for the documentation project. This is a simple string value.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/settings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmintlify\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos Using iFrame\nDESCRIPTION: HTML iFrame implementation for embedding YouTube videos with full configuration including autoplay and fullscreen capabilities.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/images.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"> </iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MDX Snippet with Variable\nDESCRIPTION: Demonstrates creating a simple MDX snippet file with a variable placeholder that can be filled via props.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/reusable-snippets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nHello world! This is my content I want to reuse across pages. My keyword of the day is {word}.\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables in MDX\nDESCRIPTION: Example of exporting reusable variables from an MDX snippet file, including both simple values and objects.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/reusable-snippets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nexport const myName = 'my name';\n\nexport const myObject = { fruit: 'strawberries' };\n```\n\n----------------------------------------\n\nTITLE: Using Custom MDX Component\nDESCRIPTION: Demonstrates importing and using a custom MDX component with props in a destination file.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/reusable-snippets.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { MyComponent } from '/snippets/custom-component.mdx';\n\nLorem ipsum dolor sit amet.\n\n<MyComponent title={'Custom title'} />\n```\n\n----------------------------------------\n\nTITLE: Embedding Images Using HTML\nDESCRIPTION: HTML method for embedding images with custom height attribute for more control over image display.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/images.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img height=\"200\" src=\"/path/image.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind CSS for uploadthing\nDESCRIPTION: Modifications to packages/design-system/styles/globals.css to include uploadthing styles.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/migrations/storage/upload-thing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@import \"uploadthing/tw/v4\";\n@source \"../node_modules/@uploadthing/react/dist\";\n```\n\n----------------------------------------\n\nTITLE: Adding Images Using Markdown\nDESCRIPTION: Basic markdown syntax for embedding images in documentation. Requires image file size to be less than 5MB.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/apps/docs/essentials/images.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![title](/path/image.jpg)\n```\n\n----------------------------------------\n\nTITLE: Interactive Version Selection During Next-forge Update - Terminal Output\nDESCRIPTION: Demonstrates the prompt shown when running the Next-forge update script. This is an interactive experience that allows users to select which version to update to. No inputs required for this output, but navigation and selection are done interactively. Useful for understanding what to expect during the update process.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/updates.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n┌  Let's update your next-forge project!\n│\n│\n◆  Select a version to update to:\n│  ● v3.2.15\n│  ○ v3.2.14\n│  ○ v3.2.13\n│  ○ v3.2.12\n│  ○ v3.2.11\n└\n```\n\n----------------------------------------\n\nTITLE: Displaying a Tip About Storybook Port - Markdown\nDESCRIPTION: This Markdown snippet uses a custom <Tip> component to highlight the port number (6006) on which the Storybook application runs. It serves as a user reminder within the rendered documentation. No specific dependencies are required other than the documentation rendering stack being able to interpret custom components.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/apps/storybook.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<Tip>The `storybook` application runs on port 6006.</Tip>\n```\n\n----------------------------------------\n\nTITLE: Retrieving BaseHub URL for Repository Connection\nDESCRIPTION: A URL pattern to access the 'Connect to your App' page in BaseHub, where you can obtain your Read Token for connecting the CMS to your next-forge application.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/packages/cms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://basehub.com/<team-slug>/<repo-slug>/dev/main/dev:connect\n```\n\n----------------------------------------\n\nTITLE: Installing friendlier-words via pnpm\nDESCRIPTION: This shell command demonstrates how to install the `friendlier-words` package into a project using the `pnpm` package manager. Running this command adds the package as a dependency to your project's `package.json` and downloads the necessary files.\nSOURCE: https://github.com/haydenbleasel/next-forge/blob/main/docs/addons/friendlier-words.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add friendlier-words\n```"
  }
]