[
  {
    "owner": "uber-go",
    "repo": "zap",
    "content": "TITLE: Using Logger for High-Performance Structured Logging in Go\nDESCRIPTION: This snippet demonstrates how to use Zap's core Logger for high-performance structured logging with strongly typed Field values. It shows logger initialization, deferred flushing, and structured logging with type-safe Field constructors.\nSOURCE: https://github.com/uber-go/zap/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Using SugaredLogger for Structured Logging in Go\nDESCRIPTION: This snippet demonstrates how to use Zap's SugaredLogger for structured logging with loosely typed key-value pairs. It shows initialization, deferred flushing with Sync(), and both structured (Infow) and printf-style (Infof) logging approaches.\nSOURCE: https://github.com/uber-go/zap/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: Integrating Log Rotation with Zap using Lumberjack\nDESCRIPTION: Example of how to integrate the lumberjack log rotation package with zap. This creates a logger that writes to rotating log files with specified size limits and retention policies.\nSOURCE: https://github.com/uber-go/zap/blob/master/FAQ.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// lumberjack.Logger is already safe for concurrent use, so we don't need to\n// lock it.\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: Using DPanic in Go Error Handling\nDESCRIPTION: Example of the typical pattern that DPanic is designed to replace. This code shows a panic with error formatting that should be replaced with zap's DPanic level.\nSOURCE: https://github.com/uber-go/zap/blob/master/FAQ.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  panic(fmt.Sprintf(\"shouldn't ever get here: %v\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Global Logger References with gofmt\nDESCRIPTION: Commands for updating zap's global logger references using gofmt after the breaking changes in 1.0.0-rc.2 that made global loggers require function calls.\nSOURCE: https://github.com/uber-go/zap/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngofmt -r \"zap.L -> zap.L()\" -w .\ngofmt -r \"zap.S -> zap.S()\" -w .\n```\n\n----------------------------------------\n\nTITLE: Updating No-op Logger Creation with gofmt\nDESCRIPTION: Command for updating code to use the preferred NewNop() method instead of New(nil) for creating no-op loggers in zap.\nSOURCE: https://github.com/uber-go/zap/blob/master/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngofmt -r 'zap.New(nil) -> zap.NewNop()' -w .\n```\n\n----------------------------------------\n\nTITLE: Setting up Zap Development Environment\nDESCRIPTION: Instructions for cloning and setting up the Zap repository for development. Creates necessary directory structure in GOPATH and configures git remotes.\nSOURCE: https://github.com/uber-go/zap/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Running Zap Tests and Linters\nDESCRIPTION: Commands to run the test suite and linting tools to ensure code quality before making changes.\nSOURCE: https://github.com/uber-go/zap/blob/master/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch for Zap Development\nDESCRIPTION: Git commands for creating a new feature branch from the latest master, ensuring the local repository is up to date with upstream.\nSOURCE: https://github.com/uber-go/zap/blob/master/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Forked Zap Repository\nDESCRIPTION: Git command to push local changes to the forked repository on GitHub.\nSOURCE: https://github.com/uber-go/zap/blob/master/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```"
  }
]