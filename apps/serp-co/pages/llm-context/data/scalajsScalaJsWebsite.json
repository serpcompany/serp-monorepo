[
  {
    "owner": "scala-js",
    "repo": "scala-js-website",
    "content": "TITLE: Configuring Scala.js Build Settings\nDESCRIPTION: Basic sbt build configuration for a Scala.js project, including plugin enablement and main module initialization.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nenablePlugins(ScalaJSPlugin)\n\nname := \"Scala.js Tutorial\"\nscalaVersion := \"2.13.14\"\n\n// This is an application with a main method\nscalaJSUseMainModuleInitializer := true\n```\n\n----------------------------------------\n\nTITLE: Defining Native JavaScript Classes in Scala.js\nDESCRIPTION: Examples of defining JavaScript classes as Scala classes with @JSGlobal annotation, including naming options.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass RegExp(pattern: String) extends js.Object {\n  ...\n}\n\n@js.native\n@JSGlobal(\"THREE.Scene\")\nclass Scene extends js.Object\n```\n\n----------------------------------------\n\nTITLE: Exporting Scala.js Class Constructor\nDESCRIPTION: Shows how to export a Scala.js class constructor to JavaScript using @JSExportTopLevel annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/export-to-javascript.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"Foo\")\nclass Foo(val x: Int) {\n  override def toString(): String = s\"Foo($x)\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = new Foo(3);\nconsole.log(foo.toString());\n```\n\n----------------------------------------\n\nTITLE: Rendering Shopping List as a Table in Scala.js\nDESCRIPTION: This snippet sets up the main application element and renders a data table for the shopping list. It defines methods for rendering individual items and the overall table structure, using Laminar for DOM updates.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nobject Main:\n  val model = new Model\n  import model.*\n\n  def appElement(): Element =\n    div(\n      h1(\"Live Chart\"),\n      renderDataTable(),\n    )\n  end appElement\n\n  def renderDataTable(): Element =\n    table(\n      thead(tr(th(\"Label\"), th(\"Price\"), th(\"Count\"), th(\"Full price\"), th(\"Action\"))),\n      tbody(\n        children <-- dataSignal.map(data => data.map { item =>\n          renderDataItem(item.id, item)\n        }),\n      ),\n      tfoot(tr(\n        td(button(\"➕\", onClick --> (_ => addDataItem(DataItem())))),\n        td(),\n        td(),\n        td(child.text <-- dataSignal.map(data => \"%.2f\".format(data.map(_.fullPrice).sum))),\n      )),\n    )\n  end renderDataTable\n\n  def renderDataItem(id: DataItemID, item: DataItem): Element =\n    tr(\n      td(item.label),\n      td(item.price),\n      td(item.count),\n      td(\"%.2f\".format(item.fullPrice)),\n      td(button(\"🗑️\", onClick --> (_ => removeDataItem(id)))),\n    )\n  end renderDataItem\nend Main\n```\n\n----------------------------------------\n\nTITLE: Enabling Scala.js Plugin in build.sbt\nDESCRIPTION: This snippet demonstrates how to enable the Scala.js plugin in the build.sbt file. It creates a root project, enables the ScalaJSPlugin, and sets the scalaJSUseMainModuleInitializer setting for applications with a main method.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/index.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nlazy val root = project\n  .in(file(\".\"))\n  .enablePlugins(ScalaJSPlugin)\n  .settings(\n    // for an application with a main method\n    scalaJSUseMainModuleInitializer := true,\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Click Event Listener in Scala.js\nDESCRIPTION: This snippet defines a method in Scala.js that adds a message to the DOM when invoked, typically through a button click. It requires the 'scala.scalajs.js.annotation.JSExportTopLevel' annotation to make the method callable from JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"addClickedMessage\")\ndef addClickedMessage(): Unit = {\n  appendPar(document.body, \"You clicked the button!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Making XMLHttpRequest in Scala.js\nDESCRIPTION: This snippet shows the Scala.js equivalent of the JavaScript ES6 code for creating an XMLHttpRequest, setting up a GET request to the Twitter API, handling the response, and updating the DOM with parsed tweets.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/index.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nval xhr = new XMLHttpRequest()\n\nxhr.open(\"GET\",\n  \"https://api.twitter.com/1.1/search/\" +\n  \"tweets.json?q=%23scalajs\"\n)\nxhr.onload = { (e: Event) =>\n  if (xhr.status == 200) {\n    val r = JSON.parse(xhr.responseText)\n    $(\"#tweets\").html(parseTweets(r))\n  }\n}\nxhr.send()\n```\n\n----------------------------------------\n\nTITLE: DOM Manipulation Example\nDESCRIPTION: Enhanced version of the Hello World application that interacts with the DOM to add content to the webpage.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.dom\nimport org.scalajs.dom.document\n\ndef appendPar(targetNode: dom.Node, text: String): Unit = {\n  val parNode = document.createElement(\"p\")\n  parNode.textContent = text\n  targetNode.appendChild(parNode)\n}\n\ndef main(args: Array[String]): Unit = {\n  appendPar(document.body, \"Hello World\")\n}\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Request in Scala.js\nDESCRIPTION: This snippet shows the Scala.js equivalent of the JavaScript AJAX request. It demonstrates how Scala.js can interact with JavaScript APIs like XMLHttpRequest and DOM manipulation, showcasing the seamless interoperability between Scala.js and JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/index.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nval xhr = new XMLHttpRequest()\n\nxhr.open(\"GET\",\n  \"https://api.twitter.com/1.1/search/\" +\n  \"tweets.json?q=%23scalajs\"\n)\nxhr.onload = { (e: Event) =>\n  if (xhr.status == 200) {\n    val r = JSON.parse(xhr.responseText)\n    $(\"#tweets\").html(parseTweets(r))\n  }\n}\nxhr.send()\n```\n\n----------------------------------------\n\nTITLE: Using Laminar's split Method for Efficient Element Reuse in Scala.js\nDESCRIPTION: This snippet shows how to use Laminar's split method to reuse DOM elements based on a unique identifier, which preserves state and selection when other elements change. It transforms a Signal[List[DataItem]] into a Signal[List[Element]].\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nchildren <-- dataSignal.split(_.id) { (id, initial, itemSignal) =>\n  renderDataItem(id, itemSignal)\n},\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript objects using js.Dynamic.literal in Scala.js\nDESCRIPTION: This snippet illustrates how to create JavaScript objects using Scala.js syntax, specifically through the js.Dynamic.literal method which directly maps to JavaScript object literals. Two forms are shown for clarity.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\njs.Dynamic.literal(foo = 42, bar = \"foobar\")\n```\n\nLANGUAGE: scala\nCODE:\n```\njs.Dynamic.literal(\"foo\" -> 42, \"bar\" -> \"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Basic Scala.js Export Example\nDESCRIPTION: Demonstrates basic export of a Scala.js object with a method to JavaScript using @JSExportTopLevel and @JSExport annotations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/export-to-javascript.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\npackage example\n\nimport scala.scalajs.js.annotation._\n\n@JSExportTopLevel(\"HelloWorld\")\nobject HelloWorld {\n  @JSExport\n  def sayHello(): Unit = {\n    println(\"Hello world!\")\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nHelloWorld.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Chart.js Configuration in Scala\nDESCRIPTION: Type-safe Chart.js configuration using ScalablyTyped-generated facades\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalablytyped.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n  val chartConfig =\n    import typings.chartJs.mod.*\n    new ChartConfiguration {\n      `type` = ChartType.bar\n      data = new ChartData {\n        datasets = js.Array(\n          new ChartDataSets {\n            label = \"Price\"\n            borderWidth = 1\n            backgroundColor = \"green\"\n          },\n          new ChartDataSets {\n            label = \"Full price\"\n            borderWidth = 1\n            backgroundColor = \"blue\"\n          }\n        )\n      }\n      options = new ChartOptions {\n        scales = new ChartScales {\n          yAxes = js.Array(new CommonAxe {\n            ticks = new TickOptions {\n              beginAtZero = true\n            }\n          })\n        }\n      }\n    }\n  end chartConfig\n```\n\n----------------------------------------\n\nTITLE: Converting Image onload Events to Futures in Scala.js\nDESCRIPTION: This function converts an HTMLImageElement's onload event into a Scala Future that completes with the image source URL. It handles both cases where the image might already be loaded (returning a completed Future) or needs to wait for the load event using a Promise.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\ndef onLoadFuture(img: HTMLImageElement) = {\n  if (img.complete) {\n    Future.successful(img.src)\n  } else {\n    val p = Promise[String]()\n    img.onload = { (e: Event) =>\n      p.success(img.src)\n    }\n    p.future\n  }\n}\n\nval img = dom.document.querySelector(\"#mapimage\")\n  .asInstanceOf[HTMLImageElement]\nonLoadFuture(img).foreach { url =>\n  println(s\"Image $url loaded\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-Way Data Binding for Input Elements in Laminar\nDESCRIPTION: This snippet demonstrates two-way data binding in Laminar by replacing static text with an editable input field. The input's value is bound to a signal, and changes are propagated back to the data model through an event handler.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\n      td(\n        input(\n          typ := \"text\",\n          value <-- itemSignal.map(_.label),\n          onInput.mapToValue --> { (newLabel: String) =>\n            dataVar.update { data =>\n              data.map { item =>\n                if item.id == id then item.copy(label = newLabel) else item\n              }\n            }\n          },\n        )\n      ),\n```\n\n----------------------------------------\n\nTITLE: Converting Image onload Events to Promises in JavaScript\nDESCRIPTION: This function converts an image's onload event into a Promise that resolves with the image source URL. It handles both cases where the image might already be loaded (returning a resolved Promise) or needs to wait for the load event.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onLoadPromise(img) {\n  if (img.complete) {\n    return Promise.resolve(img.src);\n  } else {\n    const p = new Promise((success) => {\n      img.onload = (e) => {\n        success(img.src);\n      };\n    });\n    return p;\n  }\n}\n\nconst img = document.querySelector(\"#mapimage\");\nonLoadPromise(img).then(url =>\n  console.log(`Image ${url} loaded`)\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Laminar Application\nDESCRIPTION: Shows the main entry point for a Laminar application, rendering the root element when DOM content is loaded.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n@main\ndef LiveChart(): Unit =\n  renderOnDomContentLoaded(\n    dom.document.getElementById(\"app\"),\n    Main.appElement()\n  )\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Request in JavaScript\nDESCRIPTION: This snippet demonstrates how to make an AJAX GET request to the Twitter API using vanilla JavaScript. It creates an XMLHttpRequest object, sets up the request, and handles the response by parsing JSON and updating the DOM.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar xhr = new XMLHttpRequest();\n\nxhr.open(\"GET\",\n  \"https://api.twitter.com/1.1/search/\" +\n  \"tweets.json?q=%23scalajs\"\n);\nxhr.onload = (e) => {\n  if (xhr.status === 200) {\n    var r = JSON.parse(xhr.responseText);\n    $(\"#tweets\").html(parseTweets(r));\n  }\n};\nxhr.send();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Data Item Renderer with Type-Specific Input Components in Laminar\nDESCRIPTION: This method renders a table row for a data item, using specialized input components for different field types (string, double, int). It wires up each input to appropriate updater functions that transform the data item based on user input.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_21\n\nLANGUAGE: scala\nCODE:\n```\ndef renderDataItem(id: DataItemID, itemSignal: Signal[DataItem]): Element =\n  tr(\n    td(\n      inputForString(\n        itemSignal.map(_.label),\n        makeDataItemUpdater(id, { (item, newLabel) =>\n          item.copy(label = newLabel)\n        })\n      )\n    ),\n    td(\n      inputForDouble(\n        itemSignal.map(_.price),\n        makeDataItemUpdater(id, { (item, newPrice) =>\n          item.copy(price = newPrice)\n        })\n      )\n    ),\n    td(\n      inputForInt(\n        itemSignal.map(_.count),\n        makeDataItemUpdater(id, { (item, newCount) =>\n          item.copy(count = newCount)\n        })\n      )\n    ),\n    td(\n      child.text <-- itemSignal.map(item => \"%.2f\".format(item.fullPrice))\n    ),\n    td(button(\"🗑️\", onClick --> (_ => removeDataItem(id)))),\n  )\nend renderDataItem\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Kind in Scala.js Build\nDESCRIPTION: Shows how to configure Scala.js to emit ECMAScript or CommonJS modules using sbt settings. This affects how the compiled JavaScript is structured and how it interacts with other modules.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n// ECMAScript\nscalaJSLinkerConfig ~= { _.withModuleKind(ModuleKind.ESModule) }\n// CommonJS\nscalaJSLinkerConfig ~= { _.withModuleKind(ModuleKind.CommonJSModule) }\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Functions in Scala and JavaScript with Tail Call Optimization\nDESCRIPTION: Illustrates recursive function implementation in both Scala and JavaScript. Scala supports tail call optimization intrinsically, using the @tailrec annotation for verification. JavaScript, particularly ES6, requires a transpiler for equivalent optimizations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fib(n) {\n  function fibIter(n, next, prev) {\n    if (n === 0) {\n      return prev;\n    } else {\n      return fibIter(n - 1, next + prev, next);\n    }\n  };\n  return fibIter(n, 1, 0);\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef fib(n: Int): Int = {\n  @tailrec \n  def fibIter(n: Int, next: Int, prev: Int): Int = {\n    if (n == 0)\n      prev\n    else\n      fibIter(n - 1, next + prev, next)\n  }\n  fibIter(n, 1, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Int Value Input Component in Laminar with Scala.js\nDESCRIPTION: This component builds an input field for Int values with controlled behavior, only accepting valid integer inputs. It maps the Int signal to a string representation and filters input events to only process valid integer values through the valueUpdater.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_20\n\nLANGUAGE: scala\nCODE:\n```\ndef inputForInt(valueSignal: Signal[Int],\n    valueUpdater: Observer[Int]): Input =\n  input(\n    typ := \"text\",\n    controlled(\n      value <-- valueSignal.map(_.toString),\n      onInput.mapToValue.map(_.toIntOption).collect {\n        case Some(newCount) => newCount\n      } --> valueUpdater,\n    ),\n  )\nend inputForInt\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Items in the Shopping List Model in Scala.js\nDESCRIPTION: This snippet adds methods to the Model class for adding and removing items from the data list, ensuring the list updates reactively.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nfinal class Model:\n  ...\n\n  def addDataItem(item: DataItem): Unit =\n    dataVar.update(data => data :+ item)\n\n  def removeDataItem(id: DataItemID): Unit =\n    dataVar.update(data => data.filter(_.id != id))\nend Model\n```\n\n----------------------------------------\n\nTITLE: Creating a Future that Completes when All Images are Loaded in Scala.js\nDESCRIPTION: This code creates a Future that completes once all images on the page have loaded. It uses NodeListSeq extension methods to map over DOM elements, collects Futures for each image's load event, and uses Future.sequence to create a single Future that completes when all individual Futures complete.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\nval images = dom.document.querySelectorAll(\"img\").asInstanceOf[NodeListOf[HTMLImageElement]]\nval loaders = images.map(i => i.onloadF)\n\nFuture.sequence(loaders).foreach { urls =>\n  println(s\"All ${urls.size} images loaded!\")\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Import with Scala.js\nDESCRIPTION: Demonstrates importing classes and members from JavaScript modules using the @JSImport annotation. Shows different import strategies including named, default, and namespace imports.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSImport(\"bar.js\", \"Foo\")\nclass Foobaz(val x: Int) extends js.Object\n\nval f = new Foobaz(5)\n```\n\nLANGUAGE: scala\nCODE:\n```\nobject Bar {\n  @js.native\n  @JSImport(\"bar.js\", \"exportedFunction\")\n  def exportedFunction(x: Int): Int = js.native\n}\n\nval y = Bar.exportedFunction(5)\n```\n\n----------------------------------------\n\nTITLE: Defining Scala.js Classes with JavaScript Imports and Exports\nDESCRIPTION: Demonstrates how to define Scala.js classes that import from and export to JavaScript modules. It shows the use of @JSImport for importing JavaScript classes and @JSExportTopLevel for exporting Scala classes to JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\n@js.native\n@JSImport(\"bar.js\", \"Foo\")\nclass JSFoo(val x: Int) extends js.Object\n\n@JSExportTopLevel(\"Babar\")\nclass Foobaz(x: String) extends js.Object {\n  val inner = new JSFoo(x.length)\n\n  def method(y: String): Int = x + y\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js DOM Library Dependency in SBT\nDESCRIPTION: This snippet demonstrates how to add the Scala.js DOM library as a dependency in an SBT build file. It uses the '%%%' operator to automatically include the correct Scala.js version in the artifact name.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/dependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %%% \"scalajs-dom\" % \"{{ site.versions.scalaJSDOM }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Production HTML for Scala.js\nDESCRIPTION: This snippet provides an example of a complete HTML file that integrates the fully optimized Scala.js compiled code, which is essential for deploying the web application.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>The Scala.js Tutorial</title>\n  </head>\n  <body>\n    <!-- Include Scala.js compiled code -->\n    <script type=\"text/javascript\" src=\"./target/scala-2.13/scala-js-tutorial-opt/main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Functions Implementation\nDESCRIPTION: Shows implementation of higher-order functions for calculating minimum and maximum values using custom extractors.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction minmaxBy(arr, f) {\n  return arr.reduce(\n    ([min, max], e) => {\n      const v = f(e);\n      return [Math.min(min, v), Math.max(max, v)]\n    }, \n    [Number.MAX_VALUE, Number.MIN_VALUE]\n  )\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef minmaxBy[T](seq: Seq[T], f: T => Int): (Int, Int) = {\n  seq.foldLeft((Int.MaxValue, Int.MinValue)) {\n    case ((min, max), e) =>\n      val v = f(e)\n      (math.min(min, v), math.max(max, v))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in ES6 and Scala\nDESCRIPTION: Demonstrates how to declare mutable and immutable variables in both ES6 and Scala. Scala uses 'var' for mutable and 'val' for immutable variables, while ES6 uses 'let' and 'const' respectively.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// mutable variable\nlet x = 5;\n// immutable variable\nconst y = \"Constant\";\n```\n\nLANGUAGE: scala\nCODE:\n```\n// mutable variable\nvar x = 5\n// immutable variable\nval y = \"Constant\"\n```\n\n----------------------------------------\n\nTITLE: Defining Traits with Classes in Scala\nDESCRIPTION: This Scala snippet defines a `Circle` class extending a `Shape` class and a `Clickable` trait.  The `ClickableCircle` class extends the `Circle` class and mixes in the `Clickable` trait using the `with` keyword. This showcases Scala's approach to class composition using traits.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_25\n\nLANGUAGE: scala\nCODE:\n```\nclass Circle(x: Int, y: Int, val r: Int)\n    extends Shape(x, y) {\n  override def draw(): Unit = {\n    println(s\"Circle at $x, $y with radius $r\")\n  }\n}\n\ntrait Clickable {\n  def onClick(): Unit = {\n    println(\"Clicked!\")\n  }\n}\n\nclass ClickableCircle(x: Int, y: Int, r: Int)\n    extends Circle(x, y, r) with Clickable\n\nval cc = new ClickableCircle(0, 0, 42)\ncc.onClick()\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Pattern Matching in Scala vs Switch in ES6\nDESCRIPTION: Demonstrates how to check types of variables using pattern matching in Scala compared to switch statements in JavaScript. Shows type-based conditional logic implementation in both languages.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction printType(o) {\n  switch (typeof o) {\n    case \"string\":\n      console.log(`It's a string: ${o}`);\n      break;\n    case \"number\":\n      console.log(`It's a number: ${o}`);\n      break;\n    case \"boolean\":\n      console.log(`It's a boolean: ${o}`);\n      break;\n    default:\n      console.log(`It's something else`);\n  }\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef printType(o: Any): Unit = {\n  o match {\n    case s: String =>\n      println(s\"It's a string: $s\")\n    case i: Int =>\n      println(s\"It's an int: $i\")\n    case b: Boolean =>\n      println(s\"It's a boolean: $b\")\n    case _ =>\n      println(\"It's something else\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript Global Variables in Scala.js\nDESCRIPTION: Defines methods for accessing global JavaScript variables and functions using Scala.js annotations. Demonstrates two approaches for declaring global scope objects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nimport js.annotation._\n\nobject DOMGlobals {\n  @js.native\n  @JSGlobal(\"document\")\n  val document: HTMLDocument = js.native\n\n  @js.native\n  @JSGlobal(\"alert\")\n  def alert(message: String): Unit = js.native\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobalScope\nobject DOMGlobalScope extends js.Object {\n  val document: HTMLDocument = js.native\n\n  def alert(message: String): Unit = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Integration Template\nDESCRIPTION: Basic HTML template for loading and running Scala.js compiled code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>The Scala.js Tutorial</title>\n  </head>\n  <body>\n    <!-- Include Scala.js compiled code -->\n    <script type=\"text/javascript\" src=\"./target/scala-2.13/scala-js-tutorial-fastopt/main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Bracket Access in Scala.js\nDESCRIPTION: Example of implementing array-like bracket access (obj[x]) using @JSBracketAccess annotation for read and write operations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n@JSBracketAccess\ndef apply(index: Int): A = js.native\n@JSBracketAccess\ndef update(index: Int, v: A): Unit = js.native\n```\n\n----------------------------------------\n\nTITLE: Adding a Reactive List View to Display Shopping Items in Scala.js\nDESCRIPTION: This code adds a separate list visualization of the same data using Laminar's split method, demonstrating how multiple views can be driven by the same signal source for consistent UI updates.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\n  def appElement(): Element =\n    div(\n      h1(\"Live Chart\"),\n      renderDataTable(),\n+      renderDataList(),\n    )\n  end appElement\n+\n+  def renderDataList(): Element =\n+    ul(\n+      children <-- dataSignal.split(_.id) { (id, initial, itemSignal) =>\n+        li(child.text <-- itemSignal.map(item => s\"${item.count} ${item.label}\"))\n+      }\n+    )\n+  end renderDataList\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js SBT Plugin\nDESCRIPTION: Adds the Scala.js sbt plugin to the project's plugin configuration file.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"{{ site.versions.scalaJS }}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js sbt Plugin\nDESCRIPTION: This snippet shows how to add the Scala.js sbt plugin to the project/plugins.sbt file. It specifies the plugin dependency with the current Scala.js version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/index.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"{{ site.versions.scalaJS }}\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Import in Scala.js\nDESCRIPTION: Implements dynamic import functionality using js.import method, which returns a Promise for loading JavaScript modules asynchronously.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\ntrait FooAPI extends js.Any {\n  def bar(x: Int): Int\n}\n\nval moduleName = \"foo.js\"\nval promise = js.`import`[FooAPI](moduleName)\nval future = promise.toFuture\nfor (module <- future) {\n  println(module.bar(5))\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating DOM elements using js.Dynamic in Scala.js\nDESCRIPTION: This snippet demonstrates how to interact with the DOM using the dynamically typed interface provided by Scala.js. It retrieves the element with the ID 'playground', creates a new paragraph element, and appends it to the playground. The types of variables are inferred as js.Dynamic.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nval document = js.Dynamic.global.document\nval playground = document.getElementById(\"playground\")\n\nval newP = document.createElement(\"p\")\nnewP.innerHTML = \"Hello world! <i>-- DOM</i>\"\nplayground.appendChild(newP)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Map Data in Scala\nDESCRIPTION: This snippet illustrates ways to access and manipulate map data in Scala, such as using `Option[String]`, `getOrElse`, and for comprehensions to handle default values and check field presence.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nval name = s\"${m(\"last\")}, ${m(\"first\")} ${m(\"last\")}\" \n// use default value when missing\nval age = m.getOrElse(\"age\", \"42\")\n// check all fields are present\nval person = (for {\n  first <- m.get(\"first\")\n  last <- m.get(\"last\")\n  age <- m.get(\"age\")\n} yield {\n  s\"$last, $first: $age\"\n}).getOrElse(\"missing\")\n```\n\n----------------------------------------\n\nTITLE: Defining Top-level JavaScript Objects in Scala.js\nDESCRIPTION: Examples of creating facades for global JavaScript objects like JSON and jQuery using @JSGlobal annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nobject JSON extends js.Object {\n  def parse(text: String): js.Any = js.native\n  def stringify(value: js.Any): String = js.native\n}\n\n@js.native\n@JSGlobal(\"jQuery\")\nobject JQuery extends js.Object {\n  def apply(x: String): JQuery = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Function Parameters in ES6 and Scala\nDESCRIPTION: Demonstrates default parameters, variable number of parameters (rest parameters), and named parameters in both ES6 and Scala, highlighting syntax differences and capabilities.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// default value\nfunction mult(x, y = 42.0) {\n  return x * y;\n}\n\n// variable number of parameters\nfunction sum(...args) {\n  return args.reduce((a, b) => a + b, 0);\n}\n\nconst s = sum(5, 4, 3, 2, 1); // == 15\n\n// named parameters\nfunction vec({x = 0, y = 0, z = 0}) {\n  return new Vec(x, y, z);\n}\n\nconst v = vec({x: 8, z: 42}); // Vec(8, 0, 42)\n```\n\nLANGUAGE: scala\nCODE:\n```\n// default value\ndef mult(x: Double, y: Double = 42.0): Double =\n  x * y\n\n\n// variable number of parameters\ndef sum(args: Double*): Double =\n  args.foldLeft(0.0)((a, b) => a + b)\n\n\nval s = sum(5, 4, 3, 2, 1) // == 15\n\n// named parameters (works directly)\ndef vec(x: Int = 0, y: Int = 0, z: Int = 0): Vec =\n  new Vec(x, y, z)\n\n\nval v = vec(8, z = 42) // Vec(8, 0, 42)\n```\n\n----------------------------------------\n\nTITLE: Converting js.Array to mutable.Seq in Scala.js\nDESCRIPTION: This snippet illustrates how to use a JavaScript array as a Scala mutable sequence and vice versa. It highlights the operations that can be performed on a JavaScript array and how to convert it to a Scala array, showcasing the interoperability between Scala and JavaScript collections.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nval jsArr = js.Array(1, 2, 3)\n\n// Scala style operations on js.Array (returns a js.Array)\nval x: js.Array[Int] = jsArr.takeWhile(_ < 3)\n\n// Use a js.Array as a Scala mutable.Seq\nval y: mutable.Seq[Int] = jsArr\n\n// toArray (from js.ArrayOps) -- Copy into scala.Array\nval z: scala.Array[Int] = jsArr.toArray\n\nimport js.JSConverters._\n\nval scSeq = Seq(1, 2, 3)\n\n// Seq to js.Array -- Copy to js.Array\nval jsArray: js.Array[Int] = scSeq.toJSArray\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Project Build in sbt\nDESCRIPTION: This snippet demonstrates how to set up a cross-project build using the crossProject builder. It defines a root project and a cross-compiled 'foo' project with separate settings for JVM and JS platforms.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/cross-build.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nThisBuild / scalaVersion := \"2.13.14\"\n\nlazy val root = project.in(file(\".\")).\n  aggregate(foo.js, foo.jvm).\n  settings(\n    publish := {},\n    publishLocal := {},\n  )\n\nlazy val foo = crossProject(JSPlatform, JVMPlatform).in(file(\".\")).\n  settings(\n    name := \"foo\",\n    version := \"0.1-SNAPSHOT\",\n  ).\n  jvmSettings(\n    // Add JVM-specific settings here\n  ).\n  jsSettings(\n    // Add JS-specific settings here\n    scalaJSUseMainModuleInitializer := true,\n  )\n```\n\n----------------------------------------\n\nTITLE: Utilizing js.ThisFunction for JavaScript's this in Scala.js\nDESCRIPTION: This snippet provides an example of how to use js.ThisFunction to access the JavaScript context in Scala.js. It shows how to explicitly declare a JavaScript function that captures the JavaScript this value when invoked, allowing Scala code to work seamlessly with native JavaScript objects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nval lis = jQuery(\"ol > li\")\nlis.each({ (li: dom.HTMLElement) =>\n  jQuery(li).text(jQuery(li).text() + \" - transformed\")\n}: js.ThisFunction)\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Values with Option in Scala\nDESCRIPTION: This Scala snippet demonstrates how to handle optional values using the `Option` type. The `log` function accepts an optional `context` parameter of type `Option[String]` and uses pattern matching to handle the `Some` (value present) and `None` (value absent) cases. This provides a type-safe way to represent optional values compared to JavaScript's `undefined`.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_27\n\nLANGUAGE: scala\nCODE:\n```\ndef log(msg: String,\n    context: Option[String] = None): Unit = {\n  val s = context match {\n    case Some(c) => s\"[$c] $msg\"\n    case None => msg\n  }\n  println(s)\n}\n\nlog(\"First message\")\nlog(\"Second message\", Some(\"debug\"))\n```\n\n----------------------------------------\n\nTITLE: Laminar Counter Button Implementation\nDESCRIPTION: Demonstrates how to implement a counter button using Laminar's reactive programming model with Vars and Signals.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\n  def counterButton(): Element =\n    val counter = Var(0)\n    button(\n      tpe := \"button\",\n      \"count is \",\n      child.text <-- counter,\n      onClick --> { event => counter.update(c => c + 1) },\n    )\n  end counterButton\n```\n\n----------------------------------------\n\nTITLE: Class Definition and Inheritance\nDESCRIPTION: This Javascript code defines a base class `Shape` with methods for moving and drawing. It also defines a subclass `Circle` that inherits from `Shape` and overrides the `draw` method.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass Shape {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  move(dx, dy) {\n    this.x += dx;\n    this.y += dy;\n  }\n\n  draw() {\n    console.log(`Shape at ${this.x}, ${this.y}`);\n  }\n};\n\nclass Circle extends Shape {\n  constructor(x, y, r) {\n    super(x, y);\n    this.r = r;\n  }\n\n  draw() {\n    console.log(`Circle at ${this.x}, ${this.y} with radius ${this.r}`);\n  }\n}\n\nconst c = new Circle(5, 5, 42);\nconst r = c.r; // == 42\n\n```\n\n----------------------------------------\n\nTITLE: Main Scala.js Entry Point\nDESCRIPTION: This snippet defines the entry point of the Scala.js application, renders HTML content including dynamic elements and event handling for a counter button.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage livechart\n\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation.*\n\nimport org.scalajs.dom\n\n// import javascriptLogo from \"/javascript.svg\"\n@js.native @JSImport(\"/javascript.svg\", JSImport.Default)\nval javascriptLogo: String = js.native\n\n@main\ndef LiveChart(): Unit =\n  dom.document.querySelector(\"#app\").innerHTML = s\"\"\"\n    <div>\n      <a href=\"https://vitejs.dev\" target=\"_blank\">\n        <img src=\"/vite.svg\" class=\"logo\" alt=\"Vite logo\" />\n      </a>\n      <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\">\n        <img src=\"$javascriptLogo\" class=\"logo vanilla\" alt=\"JavaScript logo\" />\n      </a>\n      <h1>Hello Scala.js!</h1>\n      <div class=\"card\">\n        <button id=\"counter\" type=\"button\"></button>\n      </div>\n      <p class=\"read-the-docs\">\n        Click on the Vite logo to learn more\n      </p>\n    </div>\n  \"\"\"\n\n  setupCounter(dom.document.getElementById(\"counter\"))\nend LiveChart\n\ndef setupCounter(element: dom.Element): Unit =\n  var counter = 0\n\n  def setCounter(count: Int): Unit =\n    counter = count\n    element.innerHTML = s\"count is $counter\"\n\n  element.addEventListener(\"click\", e => setCounter(counter + 1))\n  setCounter(0)\nend setupCounter\n```\n\n----------------------------------------\n\nTITLE: Anonymous Functions in ES6 and Scala\nDESCRIPTION: Shows how to define and use anonymous functions (lambda expressions) in both ES6 and Scala, demonstrating their use in functional programming constructs like map and reduce.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = (x, y) => x + y;\n\nconst p = [\"Fox\", \"jumped\", \"over\", \"me\"];\nconst l = p.map(s => s.length)\n  .reduce((a, b) => a + b, 0); // == 15\n```\n\nLANGUAGE: scala\nCODE:\n```\nval f = (x: Double, y: Double) => x + y\n\nval p = Array(\"Fox\", \"jumped\", \"over\", \"me\")\nval l = p.map(s => s.length)\n  .foldLeft(0)((a, b) => a + b) // == 15\n```\n\n----------------------------------------\n\nTITLE: Class Definition and Inheritance\nDESCRIPTION: Demonstrates class definitions and inheritance in Scala.  It defines an abstract class `Shape` and a concrete class `Circle` that extends `Shape`, overriding the `draw` method.  It also shows how to define mutable and immutable fields.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\n// use var to make coordinates mutable\nabstract class Shape(var x: Int, var y: Int) {\n  def move(dx: Int, dy: Int): Unit = {\n    x += dx\n    y += dy\n  }\n\n  def draw(): Unit = {\n    println(s\"Shape at $x, $y\")\n  }\n}\n\n// r is immutable but accessible outside the class\nclass Circle(x: Int, y: Int, val r: Int)\n    extends Shape(x, y) {\n  override def draw(): Unit = {\n    println(s\"Circle at $x, $y with radius $r\")\n  }\n}\n\nval c = new Circle(5, 5, 42)\nval r = c.r // == 42\n```\n\n----------------------------------------\n\nTITLE: Creating JS Functions with Varargs\nDESCRIPTION: This code illustrates how to define a JavaScript function that accepts variable arguments (varargs) in Scala.js. It shows how to create a custom trait that extends the js.Function to capture varargs, allowing for flexible function signatures in JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\ntrait JsVarargsFn extends js.Function {\n  def apply(args: Any*): Unit\n}\n\nval f: JsVarargsFn = { args =>\n  println(s\"This method was called with ${args.size} args.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Function in Scala.js\nDESCRIPTION: This code snippet defines a JavaScript function using Scala.js syntax. It showcases the ability to create a JavaScript function object that squares its input, demonstrating the direct mapping of Scala and JavaScript function declaration and usage.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nval f: js.Function1[Double, Double] = { (x: Double) => x*x }\n```\n\n----------------------------------------\n\nTITLE: Using js.constructorOf[C] in Scala.js\nDESCRIPTION: This snippet describes how to obtain the JavaScript constructor function of a JS class using 'js.constructorOf[C]'. This method allows obtaining the constructor without instantiating the class, which is useful for passing to JavaScript libraries.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\npackage object js {\n  def constructorOf[C <: js.Any]: js.Dynamic = <stub>\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Multiple Parameter Lists and Currying in Scala and JavaScript\nDESCRIPTION: Explores how to use multiple parameter lists and currying in Scala, enhancing type inference, compared to JavaScript which emulates this through chained functions. Demonstrated with a curried tag function that creates HTML tags.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction tag(name) {\n  return (content) => `<${name}>${content}</${name}>`; \n}\n\nconst div = tag(\"div\");\nconst p = tag(\"p\");\nconst html = div(p(\"test\")); // <div><p>test</p></div>\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef tag(name: String)(content: String): String = {\n  s\"<$name>$content</$name>\"\n}\n\nval div = tag(\"div\") _\nval p = tag(\"p\") _\nval html = div(p(\"test\")) // <div><p>test</p></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Facades for Global Variables in Scala.js\nDESCRIPTION: Illustrates how to define facades for global variables in Scala.js using @JSGlobalScope and @JSGlobal annotations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobalScope\nobject Globals extends js.Object {\n  var foo: Int = js.native\n}\n\n@js.native\n@JSGlobal\nclass Bar extends js.Object\n\n@js.native\n@JSGlobal\nobject Bar extends js.Object\n```\n\n----------------------------------------\n\nTITLE: Unit Testing the Shopping List Model in Scala.js\nDESCRIPTION: This snippet illustrates how to implement unit tests for the Model class using the MUnit framework, specifically testing the fullPrice method and the addDataItem and removeDataItem methods.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\npackage livechart\n\nclass ModelTest extends munit.FunSuite:\n  test(\"fullPrice\") {\n    val item = DataItem(DataItemID(), \"test\", 0.5, 5)\n    assert(item.fullPrice == 2.5)\n  }\nend ModelTest\n```\n\nLANGUAGE: scala\nCODE:\n```\n  test(\"addDataItem\") {\n    val model = new Model\n\n    val item = DataItem(DataItemID(), \"test\", 0.5, 2)\n    model.addDataItem(item)\n\n    val afterItems = model.dataSignal.now()\n    assert(afterItems.size == 2)\n    assert(afterItems.last == item)\n  }\n\n  test(\"removeDataItem\") {\n    val model = new Model\n\n    model.addDataItem(DataItem(DataItemID(), \"test\", 0.5, 2))\n\n    val beforeItems = model.dataSignal.now()\n    assert(beforeItems.size == 2)\n\n    model.removeDataItem(beforeItems.head.id)\n\n    val afterItems = model.dataSignal.now()\n    assert(afterItems.size == 1)\n    assert(afterItems == beforeItems.tail)\n  }\n```\n\n----------------------------------------\n\nTITLE: Scala AJAX with Future\nDESCRIPTION: Shows an equivalent AJAX request in Scala.js using the DOM library's Ajax method and future handling\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.dom\nimport dom.ext.Ajax\n\nAjax.get(\"http://api.openweathermap.org/\" +\n    \"data/2.5/weather?q=Tampere\").foreach {\n  xhr =>\n    println(xhr.responseText)\n}\n```\n\n----------------------------------------\n\nTITLE: Super Call Implementation in Scala.js\nDESCRIPTION: Demonstrates how to implement super calls in non-native JS classes with proper JavaScript semantics.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\nclass Foo extends js.Object {\n  override def toString(): String = super.toString() + \" in Foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Seq Operations Example in Scala\nDESCRIPTION: Shows various Seq operations available in Scala, including filtering, mapping, and sequence manipulation methods.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nval seq = Seq(1, 2, 3, 4, 5)\nseq.isEmpty == false\nseq.contains(6) == false // JS Array.includes()\nseq.forall(x => x > 0) == true // JS Array.every()\nseq.exists(x => x % 3 == 0) == true // JS Array.some()\nseq.find(x => x > 3) == Some(4) // JS Array.find()\nseq.head == 1\nseq.tail == Seq(2, 3, 4, 5)\nseq.last == 5\nseq.init == Seq(1, 2, 3, 4)\nseq.drop(2) == Seq(3, 4, 5) // JS Array.slice()\nseq.dropRight(2) == Seq(1, 2, 3)\nseq.count(x => x < 3) == 2\nseq.groupBy(x => x % 2) == Map(1 -> Seq(1, 3, 5), 0 -> Seq(2, 4))\nseq.sortBy(x => -x) == Seq(5, 4, 3, 2, 1)\nseq.partition(x => x > 3) == (Seq(4, 5), Seq(1, 2, 3))\nseq :+ 6 == Seq(1, 2, 3, 4, 5, 6)\nseq ++ Seq(6, 7) == Seq(1, 2, 3, 4, 5, 6, 7) // JS Array.concat()\n```\n\n----------------------------------------\n\nTITLE: Model Class to Manage Shopping List Data in Scala.js\nDESCRIPTION: This snippet declares a Model class that contains a variable for the shopping list data and a signal to provide reactive updates. It initializes the data list with a default item.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nfinal class Model:\n  val dataVar: Var[DataList] = Var(List(DataItem(DataItemID(), \"one\", 1.0, 1)))\n  val dataSignal = dataVar.signal\nend Model\n```\n\n----------------------------------------\n\nTITLE: Creating Typechecked Object Literals with Scala.js-defined Traits\nDESCRIPTION: Demonstrates how to create typechecked JavaScript object literals using Scala.js-defined traits and anonymous classes, providing a type-safe alternative to js.Dynamic.literal.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\n@ScalaJSDefined\ntrait Position extends js.Object {\n  val x: Int\n  val y: Int\n}\n\nval obj = new Position {\n  val x = 5\n  val y = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Object for Scala.js Application\nDESCRIPTION: Create a top-level object with a main method to execute code when the JavaScript is loaded. This is necessary to produce JavaScript code from the Scala.js project.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nobject Main {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello world!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Members in Non-native JS Class\nDESCRIPTION: Demonstrates how to define static members in a non-native JS class using companion objects and @JSExportStatic.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\nclass Foo extends js.Object\n\nobject Foo {\n  @JSExportStatic\n  val x: Int = 5\n\n  @JSExportStatic\n  var y: String = \"hello\"\n\n  @JSExportStatic\n  def z: Int = 42\n  @JSExportStatic\n  def z_=(v: Int): Unit = println(\"z = \" + v)\n\n  @JSExportStatic\n  def foo(x: Int): Int = x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cross-Platform Dependencies in sbt\nDESCRIPTION: This snippet shows how to add dependencies that work for both Scala.js and Scala JVM projects using the %%% operator. It demonstrates adding the Scalatags library as a dependency.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/cross-build.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nlazy val foo = crossProject.in(file(\".\"))\n  .settings(\n    // other settings\n    libraryDependencies += \"com.lihaoyi\" %%% \"scalatags\" % \"0.8.5\",\n  )\n```\n\n----------------------------------------\n\nTITLE: Vars and Signals Example\nDESCRIPTION: Illustrates the basic concepts of Functional Reactive Programming using Vars and Signals in Laminar.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nval intVar: Var[Int] = Var(1)\nval intSignal: Signal[Int] = intVar.signal\nval times2Signal: Signal[Int] = intSignal.map(_ * 2)\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching\nDESCRIPTION: Demonstrates Scala's `match` statement, equivalent to a JavaScript `switch` statement.  It assigns a description based on the value of the `animal` variable, using pattern matching with multiple choices and a default case.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\nval animal = \"Dog\"\nval description = animal match {\n  case \"Cat\" | \"Lion\" | \"Tiger\" =>\n    \"It's feline!\"\n  case \"Dog\" | \"Wolf\" =>\n    \"It's canine!\"\n  case _ =>\n    \"It's something else\"\n}\nprintln(description)\n```\n\n----------------------------------------\n\nTITLE: Building Reusable Input Components with Signals in Laminar\nDESCRIPTION: This snippet shows how to create reusable UI components in Laminar by extracting common patterns into functions. The inputForString function creates a text input with two-way data binding between a signal and an observer.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\n  def renderDataItem(id: DataItemID, itemSignal: Signal[DataItem]): Element =\n    ...\n      td(\n        inputForString(\n          itemSignal.map(_.label),\n          makeDataItemUpdater(id, { (item, newLabel) =>\n            item.copy(label = newLabel)\n          })\n        )\n      ),\n    ...\n  end renderDataItem\n\n  def inputForString(valueSignal: Signal[String],\n      valueUpdater: Observer[String]): Input =\n    input(\n      typ := \"text\",\n      value <-- valueSignal,\n      onInput.mapToValue --> valueUpdater,\n    )\n  end inputForString\n```\n\n----------------------------------------\n\nTITLE: HashMap/Object Operations Comparison between ES6 and Scala\nDESCRIPTION: Shows how to work with key-value pairs using JavaScript objects and Scala's mutable HashMap, including initialization and value access.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = {first: \"James\", last: \"Bond\"};\np[\"profession\"] = \"Spy\";\nconst name = `${p.first} ${p.last}`\n```\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.collection.mutable\nval p = mutable.HashMap(\"first\" -> \"James\",\n  \"last\" -> \"Bond\")\np(\"profession\") = \"Spy\"\nval name = s\"${p(\"first\")} ${p(\"last\")}\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Global Object in Scala.js\nDESCRIPTION: Demonstrates how to detect and access the global object in different JavaScript environments using Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nval globalObject: js.Dynamic = {\n  import js.Dynamic.{global => g}\n  if (js.typeOf(g.global) != \"undefined\" && (g.global.Object eq g.Object)) {\n    // Node.js environment detected\n    g.global\n  } else {\n    // In all other well-known environment, we can use the global `this`\n    js.special.fileLevelThis.asInstanceOf[js.Dynamic]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Application Element\nDESCRIPTION: Demonstrates how to create a complex UI structure using Laminar's element creation functions and attributes.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nobject Main:\n  def appElement(): Element =\n    div(\n      a(href := \"https://vitejs.dev\", target := \"_blank\",\n        img(src := \"/vite.svg\", className := \"logo\", alt := \"Vite logo\"),\n      ),\n      a(href := \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\", target := \"_blank\",\n        img(src := javascriptLogo, className := \"logo vanilla\", alt := \"JavaScript logo\"),\n      ),\n      h1(\"Hello Laminar!\"),\n      div(className := \"card\",\n        button(tpe := \"button\"),\n      ),\n      p(className := \"read-the-docs\",\n        \"Click on the Vite logo to learn more\",\n      ),\n    )\n  end appElement\nend Main\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Item Update Functions in Scala.js with Laminar\nDESCRIPTION: This snippet demonstrates how to extract common update patterns into reusable functions in Laminar applications. It creates a generic makeDataItemUpdater function that can modify any property of a DataItem based on an ID and transformation function.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\n  def renderDataItem(id: DataItemID, itemSignal: Signal[DataItem]): Element =\n    ...\n          onInput.mapToValue --> makeDataItemUpdater[String](id, {\n            (item, newLabel) =>\n              item.copy(label = newLabel)\n          }),\n    ...\n  end renderDataItem\n\n  def makeDataItemUpdater[A](id: DataItemID,\n      f: (DataItem, A) => DataItem): Observer[A] =\n    dataVar.updater { (data, newValue) =>\n      data.map { item =>\n        if item.id == id then f(item, newValue) else item\n      }\n    }\n  end makeDataItemUpdater\n```\n\n----------------------------------------\n\nTITLE: Creating a Double Value Input Component in Laminar with Scala.js\nDESCRIPTION: This component creates an input field for Double values with bidirectional data binding. It handles string-to-double parsing and formatting, maintaining a local String representation of the numeric value while synchronizing with an external Signal and Observer.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_19\n\nLANGUAGE: scala\nCODE:\n```\ndef inputForDouble(valueSignal: Signal[Double],\n    valueUpdater: Observer[Double]): Input =\n  val strValue = Var[String](\"\")\n  input(\n    typ := \"text\",\n    value <-- strValue.signal,\n    onInput.mapToValue --> strValue,\n    valueSignal --> strValue.updater[Double] { (prevStr, newValue) =>\n      if prevStr.toDoubleOption.contains(newValue) then prevStr\n      else newValue.toString\n    },\n    strValue.signal --> { valueStr =>\n      valueStr.toDoubleOption.foreach(valueUpdater.onNext)\n    },\n  )\nend inputForDouble\n```\n\n----------------------------------------\n\nTITLE: Tuple Usage and Functions Comparison between ES6 and Scala\nDESCRIPTION: Demonstrates tuple creation and usage, including function return values and destructuring in both languages.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst t = [\"James\", \"Bond\", 42];\nconst kv = [\"key\", 42];\n\nfunction sumProduct(s) {\n  let sum = 0;\n  let product = 1;\n  for(let i of s) {\n    sum += i;\n    product *= i;\n  }\n  return [sum, product];\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\nval t = (\"James\", \"Bond\", 42)\nval kv = \"key\" -> 42 // same as (\"key\", 42)\n\ndef sumProduct(s: Seq[Int]): (Int, Int) = {\n  var sum = 0\n  var product = 1\n  for(i <- s) {\n    sum += i\n    product *= i\n  }\n  (sum, product)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Patterns for Scala.js ECMAScript Modules\nDESCRIPTION: This snippet configures the Scala.js linker to output ECMAScript modules with the '.mjs' file extension. It uses 'OutputPatterns' to define the output pattern. Ensure that the 'org.scalajs.linker.interface.OutputPatterns' dependency is included for this configuration to work. This is crucial for compatibility with Node.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.OutputPatterns\n\nscalaJSLinkerConfig ~= {\n  // Enable ECMAScript module output.\n  _.withModuleKind(ModuleKind.ESModule)\n  // Use .mjs extension.\n   .withOutputPatterns(OutputPatterns.fromJSFile(\"%s.mjs\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Scala NodeList Extension for Collection Operations\nDESCRIPTION: Implements an implicit class to extend NodeList with standard Scala collection methods, enabling more functional programming patterns with DOM elements\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nimplicit class NodeListSeq[T <: Node](nodes: DOMList[T]) extends IndexedSeq[T] {\n  override def foreach[U](f: T => U): Unit = {\n    for (i <- 0 until nodes.length) {\n      f(nodes(i))\n    }\n  }\n\n  override def length: Int = nodes.length\n\n  override def apply(idx: Int): T = nodes(idx)\n}\n```\n\n----------------------------------------\n\nTITLE: Case Class Definition\nDESCRIPTION: Defines a case class named `Person` in Scala. Case classes are immutable data containers.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\ncase class Person(first: String, last: String)\n\nval person = Person(\"James\", \"Bond\")\n```\n\n----------------------------------------\n\nTITLE: String Pattern Parsing with Guard Clauses\nDESCRIPTION: Shows how to parse strings character by character using pattern matching with guard clauses in Scala compared to conditional statements in JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction parse(str, magicKey) {\n  let res = [];\n  for(let c of str) {\n    if (c === magicKey)\n      res.push(\"magic\");\n    else if (c.match(/\\d/))\n      res.push(\"digit\");\n    else if (c.match(/\\w/))\n      res.push(\"letter\");\n    else if (c.match(/\\s/))\n      res.push(\" \");\n    else\n      res.push(\"char\");\n  }\n  return res;\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef parse(str: String, magicKey: Char): Seq[String] = {\n  str.map {\n    case c if c == magicKey =>\n      \"magic\"\n    case c if c.isDigit =>\n      \"digit\"\n    case c if c.isLetter =>\n      \"letter\"\n    case c if c.isWhitespace =>\n      \" \"\n    case c =>\n      \"char\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing require in Scala.js 1.x\nDESCRIPTION: Demonstrates how to dynamically call the require function in Node.js environments using Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_21\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Extending HTMLImageElement with Future-returning Method in Scala.js\nDESCRIPTION: This code extends HTMLImageElement with an extension method that returns a Future for the image's load event. It uses an implicit class to add the onloadF method to HTMLImageElement instances, simplifying the use of the futurized version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\nimplicit class HTMLImageElementOps(val img: HTMLImageElement) extends AnyVal {\n  def onloadF = onLoadFuture(img)\n}\n\nval img = dom.document.querySelector(\"#mapimage\").asInstanceOf[HTMLImageElement]\nimg.onloadF.foreach { url =>\n  println(s\"Image $url loaded\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Object Trait for jQuery AJAX in Scala.js\nDESCRIPTION: This snippet defines a trait for AJAX settings that include fields with default values in Scala.js. The fields are defined as optional using 'js.UndefOr'. This allows users to override only the settings they care about when making an AJAX call.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\ntrait JQueryAjaxSettings extends js.Object {\n  val data: js.UndefOr[js.Object | String | js.Array[Any]] = js.undefined\n  val contentType: js.UndefOr[Boolean | String] = js.undefined\n  val crossDomain: js.UndefOr[Boolean] = js.undefined\n  val success: js.UndefOr[js.Function3[Any, String, JQueryXHR, _]] = js.undefined\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Maps in Scala\nDESCRIPTION: This snippet demonstrates how to create and access data within maps using Scala, using the `Map` constructor with `->` for key-value pairs and `seq:_*` for destructuring sequences.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nval m = Map(\"first\" -> \"James\", \"last\" -> \"Bond\")\nval data = Seq(\"first\" -> \"James\", \"last\" -> \"Bond\")\nval m2 = Map(data:_*)\n```\n\n----------------------------------------\n\nTITLE: Converting between Scala Function and JavaScript Function in Scala.js\nDESCRIPTION: This snippet demonstrates the implicit conversions between Scala functions and JavaScript functions using Scala.js. It shows how to convert a Scala function to a JavaScript function and back without needing additional libraries or boilerplate code, effectively allowing seamless interoperability between the two languages.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nval scalaFun: Int => Int = (x: Int) => x * x\nval jsFun: js.Function1[Int, Int] = scalaFun\nval scalaFunAgain: Int => Int = jsFun\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Values with Option.map in Scala\nDESCRIPTION: This Scala snippet provides an alternative, more concise way to handle optional values using `Option.map` and `Option.getOrElse`. The `map` function transforms the `Option` if it's a `Some`, and `getOrElse` provides a default value if it's a `None`.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_28\n\nLANGUAGE: scala\nCODE:\n```\ndef log(msg: String, context: Option[String] = None): Unit = {\n  val s = context.map(c => s\"[$c] $msg\").getOrElse(msg)\n  println(s)\n}\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Call with Improved Type Inference in Scala.js\nDESCRIPTION: This snippet shows how to make an AJAX call using the JQueryAjaxSettings trait with less type annotation by leveraging improved type inference in Scala 2.12, while still using 'js.defined' for the success handler.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\njQuery.ajax(someURL, new JQueryAjaxSettings {\n  override val crossDomain = true\n  override val success = js.defined { (data, textStatus, xhr) =>\n    println(\"Status: \" + textStatus)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript AJAX with jQuery Promise\nDESCRIPTION: Demonstrates an asynchronous AJAX request using jQuery's promise-based approach for fetching weather data\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax(\"http://api.openweathermap.org/\" +\n    \"data/2.5/weather?q=Tampere\").then(\n   (data, textStatus, jqXHR) =>\n      console.log(data)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating typed JavaScript objects from a Scala object\nDESCRIPTION: This snippet provides a companion object for MyObject, which allows for typesafe creation of JavaScript objects using the js.Dynamic.literal method. It enhances code readability by providing a designated creation method.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nobject MyObject {\n  def apply(foo: Int, bar: String): MyObject =\n    js.Dynamic.literal(foo = foo, bar = bar).asInstanceOf[MyObject]\n}\n```\n\n----------------------------------------\n\nTITLE: Using js.ConstructorTag[C] for Implicit Constructor Retrieval in Scala.js\nDESCRIPTION: This snippet explains the use of 'js.ConstructorTag[C]' to implicitly get a 'js.constructorOf[C]'. It showcases how to instantiate JS classes without exposing the constructor, benefiting Scala.js library developers working with JavaScript frameworks.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\ndef instantiate[C <: js.Any : js.ConstructorTag]: C =\n  js.Dynamic.newInstance(js.constructorTag[C].constructor)().asInstanceOf[C]\n\nval newEmptyJSArray = instantiate[js.Array[Int]]\n```\n\n----------------------------------------\n\nTITLE: Conditional SBT Dependencies for Scala.js Environments\nDESCRIPTION: Demonstrates how to conditionally add dependencies for different JavaScript environments (Node.js with jsdom, PhantomJS, Selenium) based on the Scala.js version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\nlibraryDependencies ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0\")\n}\n\n// For PhantomJS\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0\"))\n}\n\n// For Selenium\nlibraryDependencies += {\n  val v = if (scalaJSVersion.startsWith(\"0.6.\")) \"0.3.0\" else \"1.0.0\"\n  libraryDependencies += \"org.scala-js\" %% \"scalajs-env-selenium\" % v\n}\n```\n\n----------------------------------------\n\nTITLE: Chart Rendering Implementation\nDESCRIPTION: Complete implementation of chart rendering with Laminar integration\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalablytyped.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\n  def renderDataChart(): Element =\n    import scala.scalajs.js.JSConverters.*\n    import typings.chartJs.mod.*\n\n    var optChart: Option[Chart] = None\n\n    canvasTag(\n      // Regular properties of the canvas\n      width := \"100%\",\n      height := \"200px\",\n\n      // onMountUnmount callback to bridge the Laminar world and the Chart.js world\n      onMountUnmountCallback(\n        // on mount, create the `Chart` instance and store it in optChart\n        mount = { nodeCtx =>\n          val domCanvas: dom.HTMLCanvasElement = nodeCtx.thisNode.ref\n          val chart = Chart.apply.newInstance2(domCanvas, chartConfig)\n          optChart = Some(chart)\n        },\n        // on unmount, destroy the `Chart` instance\n        unmount = { thisNode =>\n          for (chart <- optChart)\n            chart.destroy()\n          optChart = None\n        }\n      ),\n\n      // Bridge the FRP world of dataSignal to the imperative world of the `chart.data`\n      dataSignal --> { data =>\n        for (chart <- optChart) {\n          chart.data.labels = data.map(_.label).toJSArray\n          chart.data.datasets.get(0).data = data.map(_.price).toJSArray\n          chart.data.datasets.get(1).data = data.map(_.fullPrice).toJSArray\n          chart.update()\n        }\n      },\n    )\n  end renderDataChart\n```\n\n----------------------------------------\n\nTITLE: Defining Global Scope Object with Restrictions in Scala.js\nDESCRIPTION: Shows how to define a global scope object with various members and restrictions in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\nobject Symbols {\n  val sym: js.Symbol = js.Symbol()\n}\n\n@js.native\n@JSGlobalScope\nobject Globals extends js.Any {\n  var validVar: Int = js.native\n  def validDef(): Int = js.native\n\n  var `not-a-valid-identifier-var`: Int = js.native\n  def `not-a-valid-identifier-def`(): Int = js.native\n\n  def +(that: Int): Int = js.native\n\n  def apply(x: Int): Int = js.native\n\n  @JSBracketAccess\n  def bracketSelect(name: String): Int = js.native\n  @JSBracketAccess\n  def bracketUpdate(name: String, v: Int): Unit = js.native\n\n  @JSBracketCall\n  def bracketCall(name: String)(arg: Int): Int = js.native\n\n  @JSName(Symbols.sym)\n  var symbolVar: Int = js.native\n  @JSName(Symbols.sym)\n  def symbolDef(): Int = js.native\n\n  var arguments: js.Array[Any] = js.native\n  @JSName(\"arguments\") def arguments2(x: Int): Int = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with JavaScript Dynamically in Scala.js\nDESCRIPTION: This snippet illustrates how to use Scala.js to interact with JavaScript in a dynamically typed way. It showcases using `js.Dynamic` to manipulate the DOM by retrieving a document object and creating a new paragraph. All JavaScript interactions are executed dynamically, assuming all inputs and outputs as types `js.Any` or `js.Dynamic`.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nval document = js.Dynamic.global.document\nval playground = document.getElementById(\"playground\")\n\nval newP = document.createElement(\"p\")\nnewP.innerHTML = \"Hello world! <i>-- DOM</i>\"\nplayground.appendChild(newP)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Non-native JS Class Example in Scala.js\nDESCRIPTION: Demonstrates a complete example of a non-native JS class with various member types including vals, vars, and methods with getters/setters.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\nclass Foo extends js.Object {\n  val x: Int = 5\n  var y: String = \"hello\"\n  def z: Int = 42\n  def z_=(v: Int): Unit = println(\"z = \" + v)\n  def foo(x: Int): Int = x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Converting js.Dictionary to mutable.Map in Scala.js\nDESCRIPTION: This snippet shows how to use JavaScript dictionaries with Scala's mutable maps. It demonstrates the conversion from a JavaScript dictionary to a Scala mutable map, allowing for idiomatic Scala operations to be done on the JavaScript object data.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nval jsDict = js.Dictionary(\"a\" -> 1, \"b\" -> 2)\n\n// Scala style operations on js.Dictionary (returns mutable.Map)\nval x: mutable.Map[String, Int] = jsDict.mapValues(_ * 2)\n\n// Use a js.Dictionary as Scala mutable.Map\nval y: mutable.Map[String, Int] = jsDict\n\nimport js.JSConverters._\n\nval scMap = Map(\"a\" -> 1, \"b\" -> 2)\n\n// Map to js.Dictionary -- Copy to js.Dictionary\nval jsDictionary: js.Dictionary[Int] = scMap.toJSDictionary\n```\n\n----------------------------------------\n\nTITLE: Defining Native JS Trait for Browser Window API in Scala.js\nDESCRIPTION: Example of creating a facade type for the browser Window object with common properties and methods. Shows how to define fields and methods that map to JavaScript equivalents.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\ntrait Window extends js.Object {\n  val document: HTMLDocument = js.native\n  var location: String = js.native\n\n  def innerWidth: Int = js.native\n  def innerHeight: Int = js.native\n\n  def alert(message: String): Unit = js.native\n\n  def open(url: String, target: String,\n      features: String = \"\"): Window = js.native\n  def close(): Unit = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Imports with js.import() in Scala.js\nDESCRIPTION: Example showing how to use js.import() for dynamic module imports in Scala.js, which returns a js.Promise. The code demonstrates importing a module with a custom API trait and handling the asynchronous result.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-09-18-announcing-scalajs-0.6.29.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\ntrait FooAPI extends js.Any {\n  def bar(x: Int): Int\n}\n\nval moduleName = \"foo.js\"\nval promise = js.`import`[FooAPI](moduleName)\nval future = promise.toFuture\nfor (module <- future) {\n  println(module.bar(5))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Scala.js Application\nDESCRIPTION: Simple Hello World application demonstrating basic Scala.js functionality.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage tutorial.webapp\n\nobject TutorialApp {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello world!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using %%% for Scala.js Library Dependencies in sbt\nDESCRIPTION: Shows how to use the triple percent (%%%) operator in sbt to depend on a doubly-cross compiled version of a Scala.js library, which automatically handles both Scala version and Scala.js version dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-06-13-announcing-scalajs-0.5.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n\"org.scala-lang.modules.scalajs\" %%% \"scalajs-dom\" % \"0.6\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Initializers in Scala.js Build\nDESCRIPTION: Shows how to configure module initializers in the Scala.js build, specifying which methods should be called when a module is imported and assigning them to specific moduleIDs.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleInitializer\n\nscalaJSModuleInitializers in Compile += {\n  ModuleInitializer.mainMethod(\"my.app.AppB\", \"main\").withModuleID(\"b\")\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating Button in Scala.js\nDESCRIPTION: This Scala.js code snippet demonstrates creating a button and setting up a click event listener without defining it in HTML. The button is created and appended to the DOM within the 'setupUI' function, called after the DOM is fully loaded.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\ndef main(args: Array[String]): Unit = {\n  document.addEventListener(\"DOMContentLoaded\", { (e: dom.Event) =>\n    setupUI()\n  })\n}\n\ndef setupUI(): Unit = {\n  val button = document.createElement(\"button\")\n  button.textContent = \"Click me!\"\n  button.addEventListener(\"click\", { (e: dom.MouseEvent) =>\n    addClickedMessage()\n  })\n  document.body.appendChild(button)\n\n  appendPar(document.body, \"Hello World\")\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Dependency Declaration for Scala.js\nDESCRIPTION: This snippet shows the correct way to declare a dependency for a Scala.js project. Using %%% ensures that the Scala.js version of the library is included, preventing linking errors.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"io.suzaku\" %%% \"boopickle\" % \"1.3.1\"\n```\n\n----------------------------------------\n\nTITLE: Conditional SBT Plugin for jsDependencies in Scala.js\nDESCRIPTION: Shows how to conditionally add the jsDependencies SBT plugin based on the Scala.js version being used.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Conversions Between JS and Scala/Java Dates in Scala\nDESCRIPTION: Illustrates implicit conversions between JavaScript and Scala/Java Date objects using Scala implicits. Enables seamless interoperability without explicit conversion, provided the implicits are in scope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nimport scalajs.js\n\nimplicit def convertFromJSDate(d: js.Date): java.util.Date = {\n  new java.util.Date(d.getMilliseconds())\n}\n\nimplicit def convertToJSDate(d: java.util.Date): js.Date = {\n  new js.Date(d.getTime)\n}\n\ncase class Person(name: String, joined: js.Date)\n\nval p = Person(\"James Bond\", new java.util.Date)\n```\n\n----------------------------------------\n\nTITLE: Anonymous JS Classes Example\nDESCRIPTION: Shows how to create typed object literals using anonymous JS classes with trait implementation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\ntrait Position extends js.Object {\n  val x: Int\n  val y: Int\n}\n\nval pos = new Position {\n  val x = 5\n  val y = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Non-native JS Trait Definition\nDESCRIPTION: Shows how to define a non-native JS trait with legal and illegal member declarations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\ntrait Bar extends js.Object {\n  val x: Int\n  val y: Int = 5 // illegal\n  val z: js.UndefOr[Int] = js.undefined\n\n  def foo(x: Int): Int\n  def bar(x: Int): Int = x + 1 // illegal\n  def foobar(x: Int): js.UndefOr[Int] = js.undefined // illegal\n  def babar: js.UndefOr[Int] = js.undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Execution with Call-by-Name in Scala and JavaScript\nDESCRIPTION: Demonstrates how to defer execution within functions using call-by-name parameters in Scala and function wrapping in JavaScript. Call-by-name parameters allow computation to be deferred until needed, useful for expensive operations. JavaScript mimics this behavior with anonymous functions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction compute(value, cPos, cNeg) {\n  if (value >= 0)\n    return cPos();\n  else\n    return cNeg();\n}\n\ncompute(x, () => expCalc(), () => expCalc2());\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef compute(value: Int, cPos: => Int, cNeg: => Int) = {\n  if (value >= 0)\n    cPos\n  else\n    cNeg\n}\n\ncompute(x, expCalc, expCalc2)\n```\n\n----------------------------------------\n\nTITLE: Managing Sets in Scala\nDESCRIPTION: This snippet shows how to create and manipulate sets in Scala, demonstrating set operations like diff and using structural sharing to ensure performance.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nval set1 = Set(1, 2, 3, 4, 5)\nval set2 = Set(2, 3, 5, 1, 6)\nval addedValues = set2 diff set1 // Set(6)\nval removedValues = set1 diff set2 // Set(4)\n```\n\n----------------------------------------\n\nTITLE: Main sbt Build Configuration for Scala.js Project\nDESCRIPTION: This Scala snippet defines the project's structure, enabling the Scala.js plugin and configures module settings, imports, and dependencies necessary for the project.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleSplitStyle\n\nlazy val livechart = project.in(file(\".\"))\n  .enablePlugins(ScalaJSPlugin) // Enable the Scala.js plugin in this project\n  .settings(\n    scalaVersion := \"3.3.3\",\n\n    // Tell Scala.js that this is an application with a main method\n    scalaJSUseMainModuleInitializer := true,\n\n    /* Configure Scala.js to emit modules in the optimal way to\n     * connect to Vite's incremental reload.\n     * - emit ECMAScript modules\n     * - emit as many small modules as possible for classes in the \"livechart\" package\n     * - emit as few (large) modules as possible for all other classes\n     *   (in particular, for the standard library)\n     */\n    scalaJSLinkerConfig ~= {\n      _.withModuleKind(ModuleKind.ESModule)\n        .withModuleSplitStyle(\n          ModuleSplitStyle.SmallModulesFor(List(\"livechart\")))\n    },\n\n    /* Depend on the scalajs-dom library.\n     * It provides static types for the browser DOM APIs.\n     */\n    libraryDependencies += \"org.scala-js\" %%% \"scalajs-dom\" % \"{{ site.versions.scalaJSDOM }}\",\n  )\n```\n\n----------------------------------------\n\nTITLE: Original DOM Counter Implementation\nDESCRIPTION: Shows the vanilla DOM API implementation of a counter button for comparison.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\ndef setupCounter(element: dom.Element): Unit =\n  var counter = 0\n\n  def setCounter(count: Int): Unit =\n    counter = count\n    element.innerHTML = s\"count is $counter\"\n\n  element.addEventListener(\"click\", e => setCounter(counter + 1))\n  setCounter(0)\nend setupCounter\n```\n\n----------------------------------------\n\nTITLE: Adding uTest to Scala.js Project\nDESCRIPTION: This snippet adds uTest, a testing framework, to the Scala.js project by configuring sbt dependencies. It includes both the library dependency and the test framework definition.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"com.lihaoyi\" %%% \"utest\" % \"0.7.4\" % \"test\"\ntestFrameworks += new TestFramework(\"utest.runner.Framework\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js with JSDOM Environment in Scala.js\nDESCRIPTION: Sets up the Node.js environment with JSDOM for Scala.js, providing a headless browser environment. Requires jsdom to be installed via npm.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/js-environments.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := new org.scalajs.jsenv.jsdomnodejs.JSDOMNodeJSEnv()\n```\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Accessing the JavaScript Global Scope - Valid Example\nDESCRIPTION: Shows a valid example of accessing a member of the global scope with a statically known name in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n```\n\n----------------------------------------\n\nTITLE: Singleton Object\nDESCRIPTION: This Javascript code implements a singleton pattern using an object literal. It includes private methods (indicated by underscore prefix) and public methods for accessing functionality.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst RandomGen = {\n  _privateMethod() {\n    console.log(\"I am private\");\n  },\n\n  _rnd() {\n    return Math.random()\n  },\n\n  publicMethod() {\n    console.log(\"The public can see me!\");\n    this._privateMethod();\n  },\n\n  name: \"RandomGen\",\n\n  getRandomNumber() {\n    return this._rnd()\n  }\n}\n\nconst r = RandomGen.getRandomNumber();\n```\n\n----------------------------------------\n\nTITLE: Writing a Test Suite Using uTest\nDESCRIPTION: This Scala code snippet details the creation of a simple test suite using the uTest framework. The test suite verifies the presence of specific text within paragraph elements after setting up the UI.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\npackage tutorial.webapp\n\nimport utest._\n\nimport scala.scalajs.js\n\nimport org.scalajs.dom\ndom.document\nimport org.scalajs.dom.ext._\n\nobject TutorialTest extends TestSuite {\n\n  // Initialize App\n  TutorialApp.setupUI()\n\n  def tests = Tests {\n    test(\"HelloWorld\") {\n      assert(document.querySelectorAll(\"p\").count(_.textContent == \"Hello World\") == 1)\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Copying Case Class Instances\nDESCRIPTION: Demonstrates how to copy and modify a case class instance in Scala using the `copy` method. This creates a new instance with the specified field modified, while leaving the original instance unchanged.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_21\n\nLANGUAGE: scala\nCODE:\n```\ncase class AX(a: Int, x: String)\n\nval o1 = AX(1, \"test\")\nval o2 = o1.copy(a = 42)\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Imports in Scala.js\nDESCRIPTION: Demonstrates how to use js.dynamicImport for deferred loading of parts of a Scala.js application. This allows for splitting the application and loading modules on demand to reduce initial loading time.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nclass HeavyFeature {\n  def doHeavyFeature(x: Int): Int =\n    x * 2\n}\n\nobject MyApp {\n  @JSExportTopLevel(name = \"onClick\")\n  def onClick(input: Int): Unit = {\n    val resultPromise: js.Promise[Int] = js.dynamicImport {\n      new HeavyFeature().doHeavyFeature(input)\n    }\n    for (result <- resultPromise.toFuture)\n      updateUIWithOutput(result)\n  }\n\n  private def updateUIWithOutput(i: Int): Unit = ???\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic JavaScript Class Constructor in Scala.js\nDESCRIPTION: Demonstrates creating a method that returns a new JavaScript class constructor each time it's called. The class has a greet method that formats a greeting string.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Call with Customized Settings in Scala.js\nDESCRIPTION: This snippet demonstrates how to create an anonymous object that extends the JQueryAjaxSettings trait and provides specific values for certain settings, such as 'crossDomain' and 'success'. It showcases the use of 'js.defined' to help with Scala's type inference.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\njQuery.ajax(someURL, new JQueryAjaxSettings {\n  override val crossDomain: js.UndefOr[Boolean] = true\n  override val success: js.UndefOr[js.Function3[Any, String, JQueryXHR, _]] = {\n    js.defined { (data: Any, textStatus: String, xhr: JQueryXHR) =>\n      println(\"Status: \" + textStatus)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Scores with Mutable Map in Scala\nDESCRIPTION: This Scala snippet illustrates managing players' scores using a mutable map, with methods to add scores, find the best score with maxBy, and calculate average scores.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.collection.mutable\n\nval scores =\n  mutable.Map.empty[String, mutable.Buffer[Int]]\n\ndef addScore(player: String, score: Int): Unit = {\n  scores.getOrElseUpdate(player, mutable.Buffer())\n    .append(score)\n}\n\ndef bestScore: (String, Int) = {\n  val all = scores.toList.flatMap {\n    case (player, pScores) =>\n      pScores.map(s => (player, s))\n  }\n  if (all.isEmpty)\n    (\"\", 0)\n  else\n    all.maxBy(_._2)\n}\n\ndef averageScore: Int = {\n  val allScores = scores.flatMap(_._2)\n  if (allScores.isEmpty)\n    0\n  else\n    allScores.sum / allScores.size\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions in ES6 and Scala\nDESCRIPTION: Compares function definition syntax between ES6 and Scala. Scala uses 'def' keyword and requires explicit type annotations for parameters and return type.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mult(x, y) {\n  return x * y;\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef mult(x: Double, y: Double): Double = x * y\n```\n\n----------------------------------------\n\nTITLE: Handling Partially Applied Functions in Scala and JavaScript\nDESCRIPTION: Presents how to create partially applied functions in Scala using underscores and in JavaScript via Function.prototype.bind. This allows functions to be invoked with fewer parameters than they accept, useful for function specialization.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction tag(name, content) {\n  return `<${name}>${content}</${name}>` \n}\n\nconst div = tag.bind(null, \"div\");\nconst p = tag.bind(null, \"p\");\nconst html = div(p(\"test\")); // <div><p>test</p></div>\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef tag(name: String, content: String) = {\n  s\"<$name>$content</$name>\"\n}\n\nval div = tag(\"div\", _: String)\nval p = tag(\"p\", _: String)\nval html = div(p(\"test\")) // <div><p>test</p></div>\n```\n\n----------------------------------------\n\nTITLE: Exporting Properties\nDESCRIPTION: Shows how to export various types of Scala properties (val, var, def) to JavaScript using @JSExport.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/export-to-javascript.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n@JSExport\nclass Point(_x: Double, _y: Double) {\n  @JSExport\n  val x: Double = _x\n  @JSExport\n  var y: Double = _y\n  @JSExport\n  def abs: Double = Math.sqrt(x*x + y*y)\n  @JSExport\n  def sum: Double = x + y\n  @JSExport\n  def sum_=(v: Double): Unit = y = v - x\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = new Point(4, 10)\nconsole.log(point.x);   // 4\nconsole.log(point.y);   // 10\npoint.y = 20;\nconsole.log(point.y);   // 20\npoint.x = 1;            // does nothing, thanks JS semantics\nconsole.log(point.x);   // still 4\nconsole.log(point.abs); // 20.396078054371138\nconsole.log(point.sum); // 24\npoint.sum = 30;\nconsole.log(point.sum); // 30\nconsole.log(point.y);   // 26\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js Project as Application in sbt\nDESCRIPTION: Add an sbt setting to treat the Scala.js project as an application rather than a library. This setting enables the use of a main object for execution.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSUseMainModuleInitializer := true\n```\n\n----------------------------------------\n\nTITLE: Calling JS function from Scala.js\nDESCRIPTION: This snippet shows how to call the JavaScript `greetPeople` function from Scala.js with different greeting formats. It showcases the creation and use of dynamic JavaScript constructors from within Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_24\n\nLANGUAGE: scala\nCODE:\n```\nval englishGreeterClass = makeGreeter(\"Hello, %s!\")\ngreetPeople(englishGreeterClass)\nval frenchGreeterClass = makeGreeter(\"Bonjour, %s!\")\ngreetPeople(frenchGreeterClass)\nval japaneseGreeterClass = makeGreeter(\"%sさん、こんにちは。\")\ngreetPeople(japaneseGreeterClass)\n```\n\n----------------------------------------\n\nTITLE: Configuring ES Features for Regex Support in Scala\nDESCRIPTION: Configuration to enable ES2018 features for advanced regular expression support like the MULTILINE flag.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-08-04-announcing-scalajs-1.7.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= (_.withESFeatures(_.withESVersion(ESVersion.ES2018)))\n```\n\n----------------------------------------\n\nTITLE: Filtering Text Using Sets in Scala\nDESCRIPTION: This Scala snippet demonstrates filtering common words from a text using a Set to manage words, leveraging map and filterNot methods.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nval common = Set(\"a\", \"the\", \"an\", \"and\")\nval text = \"The sun is a star and an energy source\"\nval words = text.split(\" \")\n  .map(_.toLowerCase)\n  .filterNot(common)\n// Array(sun, is, star, energy, source)\n```\n\n----------------------------------------\n\nTITLE: Converting js.UndefOr to Option in Scala.js\nDESCRIPTION: This snippet demonstrates how to convert between JavaScript's js.UndefOr type and Scala's Option type, allowing for effective handling of optional values between the two ecosystems. It illustrates both the conversion from js.UndefOr to Option and vice versa.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nval jsUndefOr: js.UndefOr[Int] = 1\n\n// Convert to scala.Option\nval x: Option[Int] = jsUndefOr.toOption\n\nimport js.JSConverters._\n\nval opt = Some(1)\n\n// Convert to js.Undefined\nval y: js.UndefOr[Int] = opt.orUndefined\n```\n\n----------------------------------------\n\nTITLE: Exception Flow from JavaScript to Scala.js\nDESCRIPTION: When throwing exceptions from JavaScript to Scala.js, Throwable instances pass through directly, while other values are wrapped in JavaScriptException.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nThrowable -> Scala.js catches it as is\\nsomething else -> Scala.js catches it wrapped in a js.JavaScriptException\n```\n\n----------------------------------------\n\nTITLE: Comparing Case Class Instances\nDESCRIPTION: Demonstrates how to compare two case class instances in Scala.  Case classes automatically provide an `equals` method for comparing instances based on their field values.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_19\n\nLANGUAGE: scala\nCODE:\n```\ncase class AX(a: Int, x: String)\n\nval o1 = AX(1, \"test\")\nval o2 = AX(1, \"test\")\nif (o1 == o2) {\n  println(\"They are equal!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Array/Buffer Manipulation Comparison between ES6 and Scala\nDESCRIPTION: Demonstrates basic array operations like pushing, unshifting and indexing in both JavaScript and Scala using Array and mutable Buffer respectively.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = [\"Fox\", \"jumped\", \"over\"];\na.push(\"me\"); // Fox jumped over me\na.unshift(\"Red\"); // Red Fox jumped over me\nconst fox = a[1];\na[a.length - 1] = \"you\"; // Red Fox jumped over you\nconsole.log(a.join(\" \"));\n```\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.collection.mutable\nval a = mutable.Buffer(\"Fox\", \"jumped\", \"over\")\na.append(\"me\") // Fox jumped over me\na.prepend(\"Red\") // Red Fox jumped over me\nval fox = a(1)\na(a.length - 1) = \"you\" // Red Fox jumped over you\nprintln(a.mkString(\" \"))\n```\n\n----------------------------------------\n\nTITLE: Validating Class Types in Scala.js\nDESCRIPTION: Example showing the broken and fixed implementations of type validation using ClassTag and isAssignableFrom/isInstance methods.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-01-12-announcing-scalajs-1.4.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\ndef validate[T: ClassTag](x: Any): Option[T] = {\n  if (classTag[T].runtimeClass.isAssignableFrom(x.getClass()))\n    Some(x.asInstanceOf[T])\n  else\n    None\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Environment in Scala.js\nDESCRIPTION: Sets up the Playwright environment for Scala.js, enabling automation of Chromium, Firefox, and WebKit browsers. Requires the scala-js-env-playwright library.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/js-environments.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := new PWEnv(\n        browserName = \"chrome\",\n        headless = true,\n        showLogs = true\n    )\n```\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"io.github.gmkumar2005\" %% \"scala-js-env-playwright\" % \"0.1.11\"\n```\n\n----------------------------------------\n\nTITLE: Adding ScalablyTyped SBT Plugin\nDESCRIPTION: Configuration to add ScalablyTyped converter plugin to the SBT build\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalablytyped.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scalablytyped.converter\" % \"sbt-converter\" % \"1.0.0-beta44\")\n```\n\n----------------------------------------\n\nTITLE: Applying Full Optimizations to Scala.js Code in sbt\nDESCRIPTION: Use the 'fullLinkJS' task to produce fully optimized JavaScript code using the Google Closure Compiler. This process can be time-consuming and is recommended for production builds.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_6\n\nLANGUAGE: sbt\nCODE:\n```\nsbt> fullLinkJS\n```\n\n----------------------------------------\n\nTITLE: Exception Flow from Scala.js to JavaScript\nDESCRIPTION: When throwing exceptions from Scala.js to JavaScript, JavaScriptException instances are unwrapped to their contained values, while Throwable instances pass through directly.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\njs.JavaScriptException -> JS catches the wrapped value\\nThrowable -> JS catches it as is\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Values with Undefined in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a common pattern for handling optional parameters using `undefined`. The `log` function accepts an optional `context` parameter and uses an `if` statement to check if it's `undefined` before constructing the log message.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction log(msg, context) {\n  let s;\n  if (context !== undefined)\n    s = `[${context}] ${msg}`;\n  else\n    s = msg;\n  console.log(s);\n};\n\n// produces: First message\nlog(\"First message\");\n// produces: [debug] Second message\nlog(\"Second message\", \"debug\");\n```\n\n----------------------------------------\n\nTITLE: Valid Uses of Global Scope Object in Scala.js\nDESCRIPTION: Demonstrates valid ways to use the global scope object in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nGlobals.validVar\nGlobals.validDef()\n\nGlobals.bracketSelect(\"someConstantIdent\")\nGlobals.bracketUpdate(\"someConstantIdent\", anyExpression)\n\nGlobals.bracketCall(\"someConstantIdent\")(anyExpression)\n```\n\n----------------------------------------\n\nTITLE: Default Import in Scala.js and ECMAScript Equivalent\nDESCRIPTION: Comparison of Scala.js default import syntax and its ECMAScript module equivalent. Shows how @JSImport with JSImport.Default is translated to ES module import statements.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSImport(\"mod.js\", JSImport.Default)\nobject Bar extends js.Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Bar from \"mod.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining Facade Types with js.native in Scala.js\nDESCRIPTION: Demonstrates the recommended way to define facade types for JavaScript interop in Scala.js using js.native for field and method bodies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-05-announcing-scalajs-0.6.0-M2.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\ntrait Foo extends js.Object {\n  var bar: Int = js.native\n  def foobar(x: Int): String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Running Full Optimization for Scala.js\nDESCRIPTION: This snippet demonstrates how to run the full optimization task using Scala.js, which leverages the Google Closure Compiler for minimizing JavaScript output. The default stage is set to FastOptStage but can be changed to FullOptStage for this task.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_13\n\nLANGUAGE: plain\nCODE:\n```\n> fullLinkJS\n[info] Full optimizing (...)/scalajs-tutorial/target/scala-2.13/scala-js-tutorial-opt\n[info] Closure: 0 error(s), 0 warning(s)\n[success] (...)\n```\n\nLANGUAGE: plain\nCODE:\n```\n> set scalaJSStage in Global := FullOptStage\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Non-native JS Class in Scala.js\nDESCRIPTION: Shows how to define a basic non-native JavaScript class in Scala.js that extends js.Object with properties and methods.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\n// @ScalaJSDefined\nclass Foo extends js.Object {\n  val x: Int = 4\n  def bar(x: Int): Int = x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Scala.js Application with Module Splitting\nDESCRIPTION: Example application showcasing module splitting with multiple entry points and exports\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage my.app\n\nimport scala.collection.mutable\nimport scala.scalajs.js.annotation._\n\n// Separate objects to allow for splitting.\n\nobject AppA {\n  @JSExportTopLevel(name = \"start\", moduleID = \"a\")\n  def a(): Unit = println(\"hello from a\")\n}\n\nobject AppB {\n  private val x = mutable.Set.empty[String]\n\n  @JSExportTopLevel(name = \"start\", moduleID = \"b\")\n  def b(): Unit = {\n    println(\"hello from b\")\n    println(x)\n  }\n\n  def main(): Unit = x.add(\"something\")\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Calling a Constructor\nDESCRIPTION: This JavaScript function takes a constructor as an argument, creates a new instance of the class, and calls the `greet` method on the instance. It is used to demonstrate interoperability between Scala.js and JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetPeople(greeterClass) {\n  const greeter = new greeterClass();\n  greeter.greet(\"Jane\");\n  greeter.greet(\"John\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Environment in Scala.js\nDESCRIPTION: Sets up the Node.js environment for Scala.js using the jsEnv setting in sbt. This is the default environment and requires Node.js to be installed separately.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/js-environments.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := new org.scalajs.jsenv.nodejs.NodeJSEnv()\n```\n\n----------------------------------------\n\nTITLE: Object and Array Destructuring\nDESCRIPTION: Demonstrates destructuring patterns in both languages for extracting values from objects and arrays/sequences.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst person = {first: \"James\", last: \"Bond\", age: 42};\nconst {first, last, age: years} = person;\nconst seq = [1, 2, 3, 4, 5];\nconst [a, b, , ...c] = seq;\nconst seq2 = [a, b].concat(c);\n```\n\nLANGUAGE: scala\nCODE:\n```\ncase class Person(first: String, last: String, age: Int)\nval person = Person(\"James\", \"Bond\", 42)\nval Person(first, last, years) = person\nval seq = Seq(1, 2, 3, 4, 5)\nval Seq(a, b, _, c @ _*) = seq\nval seq2 = Seq(a, b) ++ c\n```\n\n----------------------------------------\n\nTITLE: Improving Module Splitting Granularity in Scala.js\nDESCRIPTION: This snippet illustrates a better structure for splitting modules in Scala.js by grouping related functionalities into distinct objects. Instead of spreading features across multiple objects, this organization leads to clearer and more efficient module splitting. No additional dependencies beyond Scala.js are needed.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nobject Feature1 {\n  def render(): Unit = ???\n  def calc(): Unit = ???\n}\n\nobject Feature2 {\n  def render(): Unit = ???\n  def calc(): Unit = ???\n}\n\nobject Feature3 {\n  def render(): Unit = ???\n  def calc(): Unit = ???\n}\n```\n\n----------------------------------------\n\nTITLE: Scala Safe String Extension via Implicit Class\nDESCRIPTION: Shows a type-safe way of adding extension methods to String using an implicit class, which provides conversion without modifying the original class\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nimplicit class StrToDate(val s: String) {\n  def toDate = convertToDate(s)\n}\n\"2015-10-09\".toDate // = Date(2015,10,9)\n```\n\n----------------------------------------\n\nTITLE: Reflective Instantiation in Scala.js\nDESCRIPTION: Shows how to use the new reflective instantiation API with @EnableReflectiveInstantiation annotation for dynamic class loading.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\npackage foo\n\nimport scala.scalajs.reflect.annotation.EnableReflectiveInstantiation\nimport scala.scalajs.reflect.Reflect\n\n@EnableReflectiveInstantiation\ntrait WithReflInstantiation\n\nclass Foobar extends WithReflInstantiation\n\nobject Foo {\n  def doSomeReflInstantiation(): WithReflInstantiation = {\n    val className = \"foo.Foobar\"\n    val instantiatableClass = Reflect.lookupInstantiatableClass(className).get\n    val instance = instantiatableClass.newInstance()\n    instance.asInstanceOf[WithReflInstantiation]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scala.js-defined JavaScript Class with @ScalaJSDefined\nDESCRIPTION: Demonstrates how to define a JavaScript class in Scala.js using the @ScalaJSDefined annotation, allowing implementation of methods in Scala that will be visible from JavaScript code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\n@ScalaJSDefined\nclass Foo extends js.Object {\n  def bar(x: Int): Int = x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Native JavaScript Function for Greeting People\nDESCRIPTION: Shows a native JavaScript function that takes a greeter class constructor, instantiates it, and calls its greet method twice with different names.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetPeople(greeterClass) {\n  const greeter = new greeterClass();\n  greeter.greet(\"Jane\");\n  greeter.greet(\"John\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model for Shopping List in Scala.js\nDESCRIPTION: This snippet defines an immutable data model for the shopping list, which includes an ID, label, price, count, and a method to calculate the full price. It utilizes Scala's case classes and random data generation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.util.Random\n\nfinal class DataItemID\n\ncase class DataItem(id: DataItemID, label: String, price: Double, count: Int):\n  def fullPrice: Double = price * count\n\nobject DataItem:\n  def apply(): DataItem =\n    DataItem(DataItemID(), \"?\", Random.nextDouble(), Random.nextInt(5) + 1)\nend DataItem\n\ntype DataList = List[DataItem]\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM in Node.js for Scala.js\nDESCRIPTION: This Scala snippet shows how to configure the Scala.js environment to support DOM operations by using the jsdom library within a Node.js environment. It involves adding dependencies in the sbt configuration files.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0\"\n```\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := new org.scalajs.jsenv.jsdomnodejs.JSDOMNodeJSEnv()\n```\n\n----------------------------------------\n\nTITLE: Gzip Compression for Scala.js Files\nDESCRIPTION: This snippet highlights the importance of gzipping Scala.js application files when served from a web server to significantly reduce file sizes. It suggests various sbt plugins for facilitating this setup.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_15\n\nLANGUAGE: plain\nCODE:\n```\nIf you serve your Scala.js application from a web server, you should additionally\ngzip the resulting `.js` files. This step might reduce the size of your application down\nto 20% of its original size.\n```\n\nLANGUAGE: plain\nCODE:\n```\nThe setup depends on your server stack. A common option is to use\n[sbt-web](https://github.com/sbt/sbt-web),\n[sbt-web-scalajs](https://github.com/vmunier/sbt-web-scalajs) and\n[sbt-gzip](https://github.com/sbt/sbt-gzip)\nif you have a Play or Akka-http server.\n```\n\n----------------------------------------\n\nTITLE: Equivalent ECMAScript Module in JavaScript\nDESCRIPTION: Shows the JavaScript ECMAScript module equivalent of the Scala.js code when compiled with ModuleKind.ESModule. It demonstrates how imports and exports are handled in the resulting JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Foo as JSFoo } from \"bar.js\";\n\nclass Foobaz {\n  constructor(x) {\n    this.x = x;\n    this.inner = new JSFoo(x.length);\n  }\n\n  method(y) {\n    return this.x + y;\n  }\n}\n\nexport { Foobaz as Babar };\n```\n\n----------------------------------------\n\nTITLE: Defining Scala.js Application with Multiple Entry Points\nDESCRIPTION: Demonstrates how to define a Scala.js application with multiple entry points using different moduleIDs. This allows for splitting the application into multiple JavaScript modules.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\npackage my.app\n\nimport scala.collection.mutable\nimport scala.scalajs.js.annotation._\n\n// Separate objects to allow for splitting.\n\nobject AppA {\n  @JSExportTopLevel(name = \"start\", moduleID = \"a\")\n  def a(): Unit = println(\"hello from a\")\n}\n\nobject AppB {\n  private val x = mutable.Set.empty[String]\n\n  @JSExportTopLevel(name = \"start\", moduleID = \"b\")\n  def b(): Unit = {\n    println(\"hello from b\")\n    println(x)\n  }\n\n  def main(): Unit = x.add(\"something\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Inner Classes in Native JS Classes\nDESCRIPTION: Demonstrates how Scala.js can now easily define facade types for JavaScript classes that are nested within other classes. This allows for a more straightforward interaction with complex JavaScript structures.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass OuterClass {\n  constructor(x) {\n    this.InnerClass = class InnerClass {\n      someMethod() {\n        return x;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex with Post-processing for Precise Newline Handling\nDESCRIPTION: This snippet shows how to use a regular expression with additional logic to handle newline characters precisely, avoiding matches between CR and LF characters.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/regular-expressions.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\ndef isBetweenCRAndNL(i: Int): Boolean =\n  i > 0 && i < input.length() && input.charAt(i - 1) == '\\r' && input.charAt(i) == '\\n'\n\nfor {\n  m <- regex3.findAllMatchIn(input)\n  if !isBetweenCRAndNL(m.start(1)) && !isBetweenCRAndNL(m.end(1))\n} {\n  println(m.group(1))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scala.js Application in sbt Console\nDESCRIPTION: Execute a Scala.js application directly in the sbt console using the 'run' task. This requires Node.js to be installed separately.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_4\n\nLANGUAGE: sbt\nCODE:\n```\nsbt> run\n```\n\n----------------------------------------\n\nTITLE: Nested `for` comprehensions with filter\nDESCRIPTION: Demonstrates a Scala `for` comprehension to find pairs of numbers that sum to a specific value. The comprehension includes a filter to only include pairs that meet the specified condition.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\ndef findPairs(n: Int, sum: Int): Unit = {\n  for {\n    i <- 0 until n\n    j <- i until n if i + j == sum\n  } println(s\"Found pair $i, $j\")\n}\nfindPairs(20, 31)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js for WebAssembly Backend in sbt\nDESCRIPTION: This snippet shows how to enable the WebAssembly backend and configure Node.js flags in an sbt build file. It sets up the Scala.js linker config to use WebAssembly and ES modules, and configures Node.js with experimental flags for Wasm support.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/webassembly.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n// Emit ES modules with the Wasm backend\nscalaJSLinkerConfig := {\n  scalaJSLinkerConfig.value\n    .withExperimentalUseWebAssembly(true) // use the Wasm backend\n    .withModuleKind(ModuleKind.ESModule)  // required by the Wasm backend\n},\n\n// Configure Node.js (at least v23) to support the required Wasm features\njsEnv := {\n  val config = NodeJSEnv.Config()\n    .withArgs(List(\n      \"--experimental-wasm-exnref\", // required\n      \"--experimental-wasm-imported-strings\", // optional (good for performance)\n      \"--turboshaft-wasm\", // optional, but significantly increases stability\n    ))\n  new NodeJSEnv(config)\n},\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript Global Scope in Scala.js 1.0.0\nDESCRIPTION: Examples of valid and invalid ways to access the JavaScript global scope in Scala.js 1.0.0. Shows the new restrictions on accessing global variables.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Files in Scala.js\nDESCRIPTION: Example showing how to import static resources like images using @js.native and @JSImport annotations with Webpack-style imports.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-05-18-announcing-scalajs-1.1.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nobject LogoPage {\n  @js.native\n  @JSImport(\"resources/img/logo-banner.png\", JSImport.Default)\n  val logoBanner: String = js.native\n\n  ...\n  img(src := logoBanner, alt := \"My logo\")\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using import renaming as a replacement for global scope val\nDESCRIPTION: This snippet shows how to use import renaming as a valid replacement for storing the global scope in a val in Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{global => g}\n```\n\n----------------------------------------\n\nTITLE: Scala.js Call Site for Nested JS Classes\nDESCRIPTION: This Scala.js code snippet demonstrates how to use the facade types defined for nested JavaScript classes. It shows how to instantiate the outer and inner classes and call methods on the inner class instance.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_21\n\nLANGUAGE: scala\nCODE:\n```\nval outerObject = new OuterClass(42);\nval innerObject = new outerObject.InnerClass();\nconsole.log(innerObject.someMethod()); // prints 42\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Scala.js 1.x\nDESCRIPTION: Allows Scala.js to dynamically call 'require' and other global variables in special JavaScript environments such as Node.js. This provides better integration with the JavaScript ecosystem.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript Global Object in Scala.js\nDESCRIPTION: Demonstrates valid code for accessing the global scope in Scala.js 1.x by using a statically known member name.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n```\n\n----------------------------------------\n\nTITLE: Checking Global Variable Existence in Scala.js 1.x\nDESCRIPTION: Shows the new pattern for checking if a global variable exists in Scala.js 1.x using js.typeOf.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Main Object in Scala.js 0.6.18+ (New Approach)\nDESCRIPTION: Shows the new approach available in Scala.js 0.6.18 and later, where a standard JVM-style main method with Array[String] parameter can be used, enabling truly cross-platform code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-28-announcing-scalajs-0.6.18.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nobject HelloWorld {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello world!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Exports in Scala.js\nDESCRIPTION: Example showing how to export a top-level function with a custom moduleID for module splitting\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(name = \"startAdmin\", moduleID = \"admin\")\ndef startAdmin(): Unit = ???\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Scala.js\nDESCRIPTION: Demonstrates how to access and modify global variables in Scala.js using the defined facades.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nval x = Globals.foo\nGlobal.foo = 24\n\nval y = new Bar\nval z = Bar\n```\n\n----------------------------------------\n\nTITLE: Type Conversion in Scala\nDESCRIPTION: Demonstrates explicit type conversion in Scala, which is necessary when assigning higher precision values to lower precision variables. Shows compile errors and correct conversions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nval x: Double = 3 // Ok!\nval y: Int = 3.5 // Compile error\nval z: Int = 3.5.toInt // Ok!\nval a: Int = x // Compile error\nval b: Int = x.toInt // Ok!\n```\n\n----------------------------------------\n\nTITLE: Refactoring Update Logic Using Laminar's updater Method\nDESCRIPTION: This diff shows how to refactor update logic using Laminar's updater method, which provides a more concise way to handle variable updates based on input values, eliminating the need for nested closures.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\n         input(\n           typ := \"text\",\n           value <-- itemSignal.map(_.label),\n-          onInput.mapToValue --> { (newLabel: String) =>\n-            dataVar.update { data =>\n+          onInput.mapToValue --> dataVar.updater[String] { (data, newLabel) =>\n             data.map { item =>\n               if item.id == id then item.copy(label = newLabel) else item\n             }\n-            }\n           },\n         )\n```\n\n----------------------------------------\n\nTITLE: JavaScript Export Implementation - Old vs New\nDESCRIPTION: Comparison of how exports are implemented in JavaScript between 0.6.x and 1.x versions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Foo = <the object Bar>; // or global.Foo, etc.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Foo = <the object Bar>;\n```\n\n----------------------------------------\n\nTITLE: Testing Button Click Event in Scala.js\nDESCRIPTION: This uTest test verifies the functionality of a button in the UI. It tests for the button's existence and simulates clicks, asserting that each click results in an expected new message.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\ntest(\"ButtonClick\") {\n  def messageCount =\n    document.querySelectorAll(\"p\").count(_.textContent == \"You clicked the button!\")\n\n  val button = document.querySelector(\"button\").asInstanceOf[dom.html.Button]\n  assert(button != null && button.textContent == \"Click me!\")\n  assert(messageCount == 0)\n\n  for (c <- 1 to 5) {\n    button.click()\n    assert(messageCount == c)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Special JS Variables in Scala.js 1.x\nDESCRIPTION: Scala.js 1.x can now access special 'global' variables provided by JavaScript environments, such as 'require' in Node.js. This allows for dynamic calling of these variables.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression\nDESCRIPTION: Demonstrates Scala's `if-else` expression, which is equivalent to the ternary operator in JavaScript. It assigns 0 to `res` if name is empty; otherwise, it assigns 1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nval res = if (name == \"\") 0 else 1\n```\n\n----------------------------------------\n\nTITLE: Checking for Undefined Global Variables in Scala.js 1.0.0\nDESCRIPTION: The correct way to check if a global variable is defined in Scala.js 1.0.0, using js.typeOf instead of checking for undefined.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) == \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Singleton Object\nDESCRIPTION: Demonstrates how to define a singleton object in Scala using the `object` keyword. Singleton objects provide a single instance and are often used for utilities or constants.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_23\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.util.Random\n\nobject RandomGen {\n  private def privateMethod(): Unit = {\n    println(\"I am private\")\n  }\n\n  private val rnd = new Random()\n\n  def publicMethod(): Unit = {\n    println(\"The public can see me!\")\n    privateMethod()\n  }\n\n  val name = \"RandomGen\"\n\n  def getRandomNumber: Double = rnd.nextDouble()\n}\n\nval r = RandomGen.getRandomNumber\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript Features in Scala.js (Recommended Approach)\nDESCRIPTION: Demonstrates the new recommended approach for enabling ECMAScript 2015 features in Scala.js output using the ESFeatures API. This replaces the deprecated OutputMode configuration.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-05-22-announcing-scalajs-0.6.23.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n// no import needed\nscalaJSLinkerConfig ~= { _.withESFeatures(_.withUseECMAScript2015(true)) }\n```\n\n----------------------------------------\n\nTITLE: Testing for Global Variable Existence (1.0.0-M5 Style)\nDESCRIPTION: The correct pattern for testing if a global variable exists in Scala.js 1.0.0-M5 using js.typeOf. This avoids the ReferenceError that would be thrown by directly accessing a non-existent global variable.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Implicit Conversion of js.UndefOr to js.Any in Scala 3\nDESCRIPTION: This code demonstrates the new implicit conversion of js.UndefOr[T] to js.Any in Scala.js 1.14.0 for Scala 3. This conversion is now possible provided that T is convertible to js.Any.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2023-09-25-announcing-scalajs.1.14.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nval x: js.Any = js.defined(\"\")\n```\n\n----------------------------------------\n\nTITLE: Exporting Inner Objects and Classes in Scala.js\nDESCRIPTION: Example showing how to export inner objects and classes using @JSExport annotation within a container class.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2023-01-26-announcing-scalajs-1.13.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nclass Container {\n  @JSExport\n  object MemberObject\n\n  @JSExport\n  class MemberClass\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dependency Declaration in Scala.js Build\nDESCRIPTION: This snippet shows an incorrect way of declaring a dependency for a Scala.js project. Using %% instead of %%% will include the JVM version of the library instead of the Scala.js version, leading to linking errors.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"io.suzaku\" %% \"boopickle\" % \"1.3.1\"\n```\n\n----------------------------------------\n\nTITLE: Monkey Patching JavaScript Objects in Scala.js\nDESCRIPTION: Demonstrates how to extend JavaScript objects and prototypes using implicit conversions, a common pattern for adding methods to existing JavaScript types.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\ntrait JQueryGreenify extends JQuery {\n  def greenify(): this.type = ???\n}\n\nobject JQueryGreenify {\n  implicit def jq2greenify(jq: JQuery): JQueryGreenify =\n    jq.asInstanceOf[JQueryGreenify]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Small Modules for Specific Packages in Scala.js\nDESCRIPTION: This snippet demonstrates how to configure Scala.js to create smaller modules specifically for the provided packages. By using the 'SmallModulesFor' split style, classes in the specified 'my.app' package will receive independent modules, while stable library classes will be bundled together more efficiently. It requires the 'ModuleSplitStyle' from 'org.scalajs.linker.interface'.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleSplitStyle\nscalaJSLinkerConfig ~= (_.withModuleSplitStyle(ModuleSplitStyle.SmallModulesFor(List(\"my.app\"))))\n```\n\n----------------------------------------\n\nTITLE: Run-time Overloading with Method Definitions in Scala.js\nDESCRIPTION: This snippet demonstrates how to define a class with method overloading in Scala.js. The overloading is resolved at runtime, allowing the method called to vary based on the type of the input parameter.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\nclass Foo extends js.Object {\n  def bar(x: String): String = \"hello \" + x\n  def bar(x: Int): Int = x + 1\n}\n\nval foo = new Foo\nprintln(foo.bar(\"world\")) // choose at run-time which one to call\n```\n\n----------------------------------------\n\nTITLE: Using the Pseudo-Union Type (A | B) in Scala.js\nDESCRIPTION: Demonstrates the new unboxed pseudo-union type functionality in Scala.js 0.6.5, allowing for more accurate typing of JavaScript facades that accept multiple types.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js.|\n\nval a: Int | String = 5\nval b: Int | String = \"hello\"\nval c: String | Int = a\nval d: Int | Boolean | String = true\nval e: Int | Boolean | String = c\nval f: AnyVal | String = e\nval g: Any = f.merge\n\n// the following examples do not compile\nval x: Int | String = 3.4\nval y: Int | Boolean = d\n```\n\n----------------------------------------\n\nTITLE: Object Literal\nDESCRIPTION: Demonstrates object literal syntax for creating a simple object. The object is assigned to `person` variable.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst person = {first: \"James\", last: \"Bond\"};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Native JS Classes in Scala.js\nDESCRIPTION: Demonstrates how to define a non-native JS class in Scala.js 1.x. Dependencies include Scala.js and the JavaScript interop package. The snippet removes the need for `@ScalaJSDefined` which is deprecated in v1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\n@ScalaJSDefined\nclass Foo extends js.Object\n```\n\nLANGUAGE: scala\nCODE:\n```\nclass Foo extends js.Object\n```\n\n----------------------------------------\n\nTITLE: JavaScript Power Operator Implementation in Scala.js\nDESCRIPTION: Definition of the JavaScript ** (power) operator in a facade type using @JSOperator annotation\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-11-23-announcing-scalajs-1.12.0.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\n@js.native @JSGlobal\nfinal class BigInt extends js.Object {\n  @JSOperator def **(other: BigInt): BigInt = js.native\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modern JS Export Implementation\nDESCRIPTION: Modern approach to exporting Scala methods to JavaScript using JSExportTopLevel annotations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\npackage bar\n\nobject Foo {\n  @JSExportTopLevel(\"bar.Foo\")\n  protected def getInstance(): this.type = this\n\n  @JSExport\n  def main(): Unit = println(\"Hello world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using js.native in Scala.js facade types\nDESCRIPTION: Example of using js.native as the body for fields and methods in Scala.js facade types, which is now recommended over ???.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-01-announcing-scalajs-0.6.0-M1.md#2025-04-20_snippet_1\n\nLANGUAGE: Scala\nCODE:\n```\ntrait Foo extends js.Object {\n  var bar: Int = js.native\n  def foobar(x: Int): String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSImport with Required Parameters\nDESCRIPTION: Example showing the traditional way of using @JSImport annotation in Scala.js, where both the module name and the member name must be specified.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-12-10-announcing-scalajs-1.8.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@js.native @JSImport(\"module.js\", \"SomeClass\")\nclass SomeClass extends js.Object\n\n@js.native @JSImport(\"fs\", \"readFileSync\")\ndef readFileSync(file: String, charset: String): String = js.native\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Split Style in Scala.js Build\nDESCRIPTION: Configures the new SmallModulesFor module split style in Scala.js 1.10.0, creating small modules for specified packages while bundling others.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-04-04-announcing-scalajs-1.10.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleSplitStyle\nscalaJSLinkerConfig ~= (_.withModuleSplitStyle(ModuleSplitStyle.SmallModulesFor(List(\"com.example.myapp\"))))\n```\n\n----------------------------------------\n\nTITLE: Conditional Scalac Option for Scala.js in Scala\nDESCRIPTION: This Scala snippet shows how to conditionally apply the '-P:scalajs:sjsDefinedByDefault' flag in the 'build.sbt' file. The flag is removed in Scala.js 1.x, but required for non-native JS types in 0.6.x. The conditional checks for versions starting with '0.6.'.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_19\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\n  else Nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Non-Native JS Classes\nDESCRIPTION: Demonstrates how to create and use nested non-native JavaScript classes with constructors in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_23\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript Iterator Implementation\nDESCRIPTION: Shows how to implement a custom JavaScript iterable class using @JSName with js.Symbol for iterator protocol compatibility.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\n@ScalaJSDefined\nclass SingletonIterable[+A](onlyItem: A) extends js.Iterable[A] {\n  @JSName(js.Symbol.iterator)\n  def jsIterator(): js.Iterator[A] = new js.Iterator[A] {\n    private var done: Boolean = false\n\n    def next(): js.Iterator.Entry[A] = {\n      if (done) {\n        new js.Iterator.Entry[A] {\n          val done: Boolean = true\n          def value: Nothing = ???\n        }\n      } else {\n        done = true\n        new js.Iterator.Entry[A] {\n          val done: Boolean = false\n          val value: A = onlyItem\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const item of someSingletonIterable) {\n  console.log(item); // displays once the `onlyItem`\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting abstract JavaScript classes in Scala.js 1.2.0\nDESCRIPTION: This example demonstrates a new feature in Scala.js 1.2.0 that allows exporting abstract JavaScript classes that can be extended by classes written in JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-09-09-announcing-scalajs-1.2.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"AbstractBase\")\nabstract class AbstractBase extends js.Object\n```\n\n----------------------------------------\n\nTITLE: Basic Regular Expression Usage in Scala\nDESCRIPTION: This snippet demonstrates a simple regular expression in Scala that matches 'foo', 'bar', or an empty string at the beginning or end of a line using the multiline flag.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/regular-expressions.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nval regex = \"\"\"(?m)^(foo|bar|)$\"\"\".r\nfor (m <- regex.findAllMatchIn(input))\n  println(m.matched)\n```\n\n----------------------------------------\n\nTITLE: Enhanced JavaScript Configuration Object Pattern\nDESCRIPTION: Improved configuration object pattern using concrete vals with js.undefined default values, allowing optional field definitions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-12-21-announcing-scalajs-0.6.14.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@ScalaJSDefined\ntrait JQueryAjaxSettings extends js.Object {\n  val data: js.UndefOr[js.Object | String | js.Array[Any]] = js.undefined\n  val contentType: js.UndefOr[Boolean | String] = js.undefined\n  val crossDomain: js.UndefOr[Boolean] = js.undefined\n  val success: js.UndefOr[js.Function3[Any, String, JQueryXHR, _]] = js.undefined\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ScalaJS Main Module Initializer\nDESCRIPTION: SBT setting to enable main method initialization in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSUseMainModuleInitializer := true\n```\n\n----------------------------------------\n\nTITLE: Scala Top-Level Export Example\nDESCRIPTION: Example of a top-level export declaration in Scala.js using @JSExportTopLevel annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"Foo\")\nobject Bar\n```\n\n----------------------------------------\n\nTITLE: Exporting Top-Level Objects in Scala.js 1.x\nDESCRIPTION: In Scala.js 1.x, top-level exports are now exported as top-level JavaScript vars instead of properties of the global object. This ensures compatibility with any compliant JavaScript environment.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"Foo\")\nobject Bar\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Foo = <the object Bar>;\n```\n\n----------------------------------------\n\nTITLE: HTML Button with Scala.js Click Event\nDESCRIPTION: This HTML snippet adds a button to the page which, when clicked, calls a Scala.js function to append a message to the DOM. The button's 'onclick' attribute is set to call the Scala.js function 'addClickedMessage'. Ensure the button is placed before the '<script>' tags in the HTML.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"click-me-button\" type=\"button\" onclick=\"addClickedMessage()\">\n  Click me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs Plugin for Scala.js 1.0.0-M6\nDESCRIPTION: Updates the sbt-scalajs plugin dependency in project/plugins.sbt to use Scala.js 1.0.0-M6. This is the primary change needed when upgrading from Scala.js 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-M6\")\n```\n\n----------------------------------------\n\nTITLE: Iterating with a `for` loop\nDESCRIPTION: Demonstrates iterating over a range and a collection using Scala's `for` loop.  It calculates the sum of squares and iterates over an array of strings, printing each word.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nvar x = 0\nfor (i <- 0 until 100)\n  x += i * i\n\nval p = Array(\"Fox\", \"jumped\", \"over\", \"me\")\nfor (s <- p) {\n  println(s\"Word $s\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSImport with Optional Second Parameter\nDESCRIPTION: Example showing the new Scala.js 1.8.0 feature where the second parameter of @JSImport is optional and defaults to the name of the Scala entity.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-12-10-announcing-scalajs-1.8.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n@js.native @JSImport(\"module.js\")\nclass SomeClass extends js.Object\n\n@js.native @JSImport(\"fs\")\ndef readFileSync(file: String, charset: String): String = js.native\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports with JSImport in Scala.js\nDESCRIPTION: Demonstrates how to import a named export from a CommonJS module using @JSImport annotation, equivalent to ES6 named imports.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-10-17-announcing-scalajs-0.6.13.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport js.annotation._\n\n// ES6:      import { Foo } from \"bar.js\"\n// CommonJS: var Foo = require(\"bar.js\").Foo;\n@js.native\n@JSImport(\"bar.js\", \"Foo\")\nclass Foobaz(var bar: Int) extends js.Object\n\nval foo = new Foobaz(5) // JS: new Foo(5)\n```\n\n----------------------------------------\n\nTITLE: Alternative JS Export Implementation\nDESCRIPTION: Alternative approach to exporting main method directly to JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\npackage bar\n\nobject Foo {\n  @JSExportTopLevel(\"bar.Foo.main\")\n  def main(): Unit = println(\"Hello world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Import Renaming for Global Scope in Scala.js 1.x\nDESCRIPTION: Shows how to use Scala's import renaming feature as an alternative to storing the global scope in a variable.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{global => g}\n```\n\n----------------------------------------\n\nTITLE: Importing Entire Module with JSImport in Scala.js\nDESCRIPTION: Shows how to import an entire CommonJS module using JSImport.Namespace, equivalent to ES6 namespace imports, allowing access to all exported functions and variables.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-10-17-announcing-scalajs-0.6.13.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n// ES6:      import * as bar from \"bar.js\"\n// CommonJS: var bar = require(\"bar.js\");\n@js.native\n@JSImport(\"bar.js\", JSImport.Namespace)\nobject Bar extends js.Object {\n  def aFunction(x: Int): Int = js.native\n}\n\nval result = Bar.aFunction(5) // JS: bar.aFunction(5)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Loading Implementation\nDESCRIPTION: Example demonstrating dynamic module loading functionality with a HeavyFeature class and MyApp implementation using js.dynamicImport.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-01-12-announcing-scalajs-1.4.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nclass HeavyFeature {\n  def doHeavyFeature(x: Int): Int =\n    x * 2\n}\n\nclass MyApp {\n  def useHeavyFeature(): Unit = {\n    val input: Int = getInput()\n    val resultPromise: js.Promise[Int] = js.dynamicImport {\n      new HeavyFeature().doHeavyFeature(input)\n    }\n    for (result <- resultPromise.toFuture)\n      updateUIWithOutput(result)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent CommonJS Module in JavaScript\nDESCRIPTION: Shows the JavaScript CommonJS module equivalent of the Scala.js code when compiled with ModuleKind.CommonJSModule. It demonstrates how requires and exports are handled in the resulting JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar bar = require(\"bar.js\");\n\nclass Foobaz {\n  constructor(x) {\n    this.x = x;\n    this.inner = new bar.Foo(x.length);\n  }\n\n  method(y) {\n    return this.x + y;\n  }\n}\n\nexports.Babar = Foobaz;\n```\n\n----------------------------------------\n\nTITLE: Declaring Native JS Classes and Objects with @JSGlobal After Deprecation\nDESCRIPTION: Updated example showing how to declare facade types for native JavaScript classes and objects using the new @JSGlobal annotation, which replaces or complements @JSName.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js.annotation._\n\n@js.native\n@JSGlobal // implied name \"Foo\"\nobject Foo extends js.Object\n\n@js.native\n@JSGlobal(\"Foobar\")\nclass Bar extends js.Object\n```\n\n----------------------------------------\n\nTITLE: Exporting Method Overloads\nDESCRIPTION: Demonstrates exporting multiple methods with the same JavaScript name using overloading.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/export-to-javascript.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nclass Foo(val x: Int) {\n  @JSExport\n  def foobar(): Int = x\n  @JSExport\n  def foobar(y: Int): Int = x+y\n  @JSExport(\"foobar\")\n  def bar(b: Boolean): Int = if (b) 0 else x\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(foo.foobar());\nconsole.log(foo.foobar(5));\nconsole.log(foo.foobar(false));\n```\n\n----------------------------------------\n\nTITLE: Exporting Top-Level Objects in Scala.js\nDESCRIPTION: Demonstrates how top-level objects are exported in Scala.js 1.x using @JSExportTopLevel annotation, which now creates top-level JavaScript vars instead of global object properties.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"Foo\")\nobject Bar\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Foo = <the object Bar>;\n```\n\n----------------------------------------\n\nTITLE: Scala.js Inner Class Facade Type\nDESCRIPTION: Demonstrates how to define facade types for JavaScript classes containing inner classes in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_21\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Scala.js Project with sbt\nDESCRIPTION: Use the 'compile' task in sbt to generate .sjsir and .class files for each class in the Scala.js project. The .sjsir files are an internal representation used for linking to JavaScript code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_0\n\nLANGUAGE: sbt\nCODE:\n```\nsbt> compile\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js sbt plugin dependency\nDESCRIPTION: Adds the Scala.js sbt plugin dependency to project/plugins.sbt for version 1.0.0-RC2.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-RC2\")\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Facade Type with @js.native Annotation in Scala.js\nDESCRIPTION: Example of a JavaScript facade class with the @js.native annotation, which is recommended for all classes extending js.Any in Scala.js 0.6.5 to maintain forward compatibility with future versions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\n@js.native\nclass Foo extends js.Object {\n  def bar(x: Int): Int = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JS Header with Hashbang\nDESCRIPTION: Example showing how to configure a JavaScript header in the Scala.js linker with a hashbang line, a new feature in Scala.js 1.8.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-12-10-announcing-scalajs-1.8.0.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= {\n  _.withJSHeader(\n    \"\"\"\n      |#!/usr/bin/env node\n      |\n      |/* This is the header, which source maps\n      | * take into account.\n      | */\n    \"\"\".stripMargin.trim() + \"\\n\"\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Top-level Export in Scala.js and ECMAScript Equivalent\nDESCRIPTION: Comparison of Scala.js top-level export syntax and its ECMAScript module equivalent. Shows how @JSExportTopLevel is translated to ES module export statements.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"foo\")\nobject Bar\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { Bar as foo }\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom JS Function Type with Varargs (Scala)\nDESCRIPTION: Example of defining a custom JavaScript function type in Scala.js that includes varargs parameters.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-02-12-announcing-scalajs-1.5.0.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\ntrait SpecialJSFunction extends js.Function {\n  def apply(first: Int, rest: String*): Any\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Traits with Classes in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to implement traits (mixin pattern) using ES6 classes and `Object.assign`.  It defines a `Circle` class extending `Shape` and a `Clickable` object that is mixed into a `ClickableCircle` class. The `Object.assign` method is used to copy the properties and methods of the `Clickable` object to the `ClickableCircle` prototype.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nclass Circle extends Shape {\n  constructor(x, y, r) {\n    super(x, y);\n    this.r = r;\n  }\n\n  draw() {\n    console.log(`Circle at ${this.x}, ${this.y} with radius ${this.r}`);\n  }\n}\n\nconst Clickable = {\n  onClick() {\n    console.log(\"Clicked!\");\n  }\n};\n\nclass ClickableCircle extends Circle {}\nObject.assign(ClickableCircle.prototype, Clickable);\n\nconst cc = new ClickableCircle(0, 0, 42);\ncc.onClick();\n```\n\n----------------------------------------\n\nTITLE: Setting up sbt Build Tool for Scala.js\nDESCRIPTION: This snippet outlines the configuration files needed for sbt, the build tool for Scala, including the version in 'build.properties' and the sbt plugin in 'plugins.sbt'.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsbt.version=1.10.0\n```\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"{{ site.versions.scalaJS }}\")\n```\n\n----------------------------------------\n\nTITLE: Exporting Top-Level Objects in Scala.js 1.x\nDESCRIPTION: Demonstrates how top-level exports are now exported as JavaScript var declarations instead of global object properties in Scala.js 1.x. This change ensures compatibility across different JavaScript environments.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"Foo\")\nobject Bar\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Foo = <the object Bar>;\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to PhantomJS in Scala.js\nDESCRIPTION: Demonstrates how to pass command-line arguments to the PhantomJS interpreter when configuring the jsEnv setting in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/js-environments.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := PhantomJSEnv(args = Seq(\"arg1\", \"arg2\")).value\n```\n\n----------------------------------------\n\nTITLE: Accessing global scope in Scala.js 1.x\nDESCRIPTION: Examples of valid and invalid ways to access the global scope in Scala.js 1.x, which now refers to the global scope instead of the global object.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n\nval g = js.Dynamic.global\n\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n\nimport js.Dynamic.{global => g}\n\nprintln(js.Dynamic.global.globalVarThatDoesNotExist)\n\njs.Dynamic.global.globalVarThatDoesNotExist = 42\n\nif (js.isUndefined(js.Dynamic.global.Promise)) {\n  // Promises are not supported\n} else {\n  // Promises are supported\n}\n\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom JS Function Value (Scala)\nDESCRIPTION: Example of creating a value of a custom JavaScript function type in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-02-12-announcing-scalajs-1.5.0.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nval specialJSFun: SpecialJSFunction = { (first, rest) =>\n  s\"$first, ${rest.size}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing global JavaScript scope\nDESCRIPTION: Demonstrates valid and invalid ways to access the global JavaScript scope in Scala.js 1.x, which now refers to the global scope instead of the global object.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Converting Statically Rendered Element to Reactive Elements with Signals in Scala.js\nDESCRIPTION: This diff shows how to refactor a static element rendering function to accept a Signal of data items, using itemSignal.map to transform data properties into reactive text elements that update automatically when the source changes.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\n-  def renderDataItem(id: DataItemID, item: DataItem): Element =\n+  def renderDataItem(id: DataItemID, itemSignal: Signal[DataItem]): Element =\n     tr(\n-      td(item.label),\n-      td(item.price),\n-      td(item.count),\n-      td(\"%.2f\".format(item.fullPrice)),\n+      td(child.text <-- itemSignal.map(_.label)),\n+      td(child.text <-- itemSignal.map(_.price)),\n+      td(child.text <-- itemSignal.map(_.count)),\n+      td(\n+        child.text <-- itemSignal.map(item => \"%.2f\".format(item.fullPrice))\n+      ),\n       td(button(\"🗑️\", onClick --> (_ => removeDataItem(id)))),\n     )\n   end renderDataItem\n```\n\n----------------------------------------\n\nTITLE: Exporting Top-Level Functions (New Style)\nDESCRIPTION: New approach using @JSExportTopLevel for direct function exports to JavaScript global scope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-12-21-announcing-scalajs-0.6.14.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nobject Main {\n  @JSExportTopLevel(\"main\")\n  def main(): Unit = { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: New JSGlobalScope Annotation in Scala.js\nDESCRIPTION: The new recommended way to define a JavaScript global scope object using the @JSGlobalScope annotation instead of extending js.GlobalScope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-10-17-announcing-scalajs-0.6.13.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport js.annotation._\n\n@js.native\n@JSGlobalScope\nobject Foo extends js.Object\n```\n\n----------------------------------------\n\nTITLE: Using BigInt in Scala.js\nDESCRIPTION: Demonstrates how to use the newly added js.BigInt type to calculate a factorial of a large number. This example shows the basic operations available with BigInt including creation, comparison, and arithmetic operations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-21-announcing-scalajs-0.6.31.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\ndef fact(n: js.BigInt): js.BigInt =\n  if (n == js.BigInt(0)) js.BigInt(1)\n  else n * fact(n - js.BigInt(1))\n\nprintln(fact(js.BigInt(30)))\n// prints: 265252859812191058636308480000000\n```\n\n----------------------------------------\n\nTITLE: Defining and Instantiating Scala.js-defined JS Classes\nDESCRIPTION: Demonstrates how to define a Scala.js trait that extends js.Object and instantiate it anonymously. This is part of the language proposal #2009 which changes how anonymous Scala.js-defined JS classes are implemented.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-04-30-announcing-scalajs-0.6.9.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@ScalaJSDefined\ntrait Point extends js.Object {\n  def x: Int\n  def y: Int\n}\n\nval p = new Point {\n  val x = 5\n  val y = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic JavaScript Classes with Scala.js 1.x\nDESCRIPTION: Illustrates how Scala.js 1.x allows creation of non-native JS classes inside methods, with meaningful js.constructorOf support for use in JavaScript contexts.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetPeople(greeterClass) {\n  const greeter = new greeterClass();\n  greeter.greet(\"Jane\");\n  greeter.greet(\"John\");\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\nval englishGreeterClass = makeGreeter(\"Hello, %s!\")\ngreetPeople(englishGreeterClass)\nval frenchGreeterClass = makeGreeter(\"Bonjour, %s!\")\ngreetPeople(frenchGreeterClass)\nval japaneseGreeterClass = makeGreeter(\"%sさん、こんにちは。\")\ngreetPeople(japaneseGreeterClass)\n```\n\n----------------------------------------\n\nTITLE: Static Method Export in Scala.js\nDESCRIPTION: Demonstrates how to export static methods and fields in Scala.js-defined JS classes using @JSExportStatic annotation on companion object members.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"Foo\")\n@ScalaJSDefined\nclass Foo extends js.Object\n\nobject Foo {\n  @JSExportStatic\n  val a: Int = 42\n\n  @JSExportStatic\n  def b(x: Int): Int = x + 1\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(Foo.a);    // 42\nconsole.log(Foo.b(5)); // 6\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Code with Fast Linking in sbt\nDESCRIPTION: Use the 'fastLinkJS' task in sbt to produce JavaScript code from Scala code. This performs fast Scala.js-specific optimizations and writes the result to a directory.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_3\n\nLANGUAGE: sbt\nCODE:\n```\nsbt> fastLinkJS\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Facade Types in Scala.js\nDESCRIPTION: Example showing how to properly define JavaScript facade types using js.native instead of ???, which is the recommended approach in Scala.js 0.6.0-RC1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-12-announcing-scalajs-0.6.0-RC1.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\ntrait Foo extends js.Object {\n  var bar: Int = js.native\n  def foobar(x: Int): String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Inner Classes in Native JS Classes\nDESCRIPTION: This snippet demonstrates how to define facade types for nested JavaScript classes in Scala.js 1.x using the `@js.native` and `@JSGlobal` annotations. It simplifies the process of defining facade types for JavaScript code that defines classes inside objects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Getters with Type Parameters in Scala.js\nDESCRIPTION: Demonstrates how JavaScript getters are defined in Scala.js using methods without parentheses, highlighting a bug fix for methods with type parameters that now correctly translate to field access rather than method calls.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-07-27-announcing-scalajs-0.6.11.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\nclass Foo extends js.Object {\n  def makeArray: js.Array[Int] = js.native\n}\n\nval foo = new Foo\nval a = foo.makeArray // in JavaScript, this is foo.makeArray, *not* foo.makeArray()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Require Example in Scala.js\nDESCRIPTION: Demonstrates how to dynamically call require in Scala.js 1.x to load assets. This is made possible by changes to global scope access.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Existent Global Variables in Scala.js 1.x\nDESCRIPTION: Shows code that now throws ReferenceError in Scala.js 1.x instead of returning undefined as in 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.globalVarThatDoesNotExist)\n\njs.Dynamic.global.globalVarThatDoesNotExist = 42\n```\n\n----------------------------------------\n\nTITLE: JavaScript Facade Type Definition\nDESCRIPTION: Example of defining a JavaScript facade type using js.native for fields and methods in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-22-announcing-scalajs-0.6.0-M3.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\ntrait Foo extends js.Object {\n  var bar: Int = js.native\n  def foobar(x: Int): String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scala.js Optimizations in sbt\nDESCRIPTION: Modify the Scala.js linker configuration to disable optimizations, which can be useful for debugging purposes.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= { _.withOptimizer(false) }\n```\n\n----------------------------------------\n\nTITLE: Module Initializer Configuration in SBT\nDESCRIPTION: SBT configuration for adding a module initializer to a specific moduleID\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleInitializer\n\nscalaJSModuleInitializers in Compile += {\n  ModuleInitializer.mainMethod(\"my.app.AppB\", \"main\").withModuleID(\"b\")\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for global variable existence in Scala.js\nDESCRIPTION: Examples of how to check for the existence of a global variable in Scala.js 0.6.x and 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nif (js.isUndefined(js.Dynamic.global.Promise)) {\n  // Promises are not supported\n} else {\n  // Promises are supported\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript's Math Object via Global Scope\nDESCRIPTION: Example of valid access to the JavaScript global scope in Scala.js 1.0.0-M5. Members can be accessed with statically known names that are valid JavaScript identifiers.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n```\n\n----------------------------------------\n\nTITLE: Setting Full Optimization Stage for Scala.js in sbt\nDESCRIPTION: Configure sbt to use the full optimization stage globally for running code and tests in Scala.js projects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/building.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nset scalaJSStage in Global := FullOptStage\n```\n\n----------------------------------------\n\nTITLE: Defining jQuery val() Method with JSName Annotation\nDESCRIPTION: Demonstrates how to handle JavaScript methods whose names conflict with Scala keywords using the @JSName annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@JSName(\"val\")\ndef value(): String = js.native\n@JSName(\"val\")\ndef value(v: String): this.type = js.native\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript Module Output in Scala.js\nDESCRIPTION: Configuration setting to enable ECMAScript module output format for a Scala.js project. This changes the linking configuration to produce ES modules instead of scripts or CommonJS modules.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= { _.withModuleKind(ModuleKind.ESModule) }\n```\n\n----------------------------------------\n\nTITLE: Converting Scala Array to JavaScript Array in Scala.js\nDESCRIPTION: Shows how to convert a Scala Array to a JavaScript Array using the toJSArray method from JSConverters in Scala.js 0.5.5. This replaces the deprecated implicit conversion.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-09-18-announcing-scalajs-0.5.5.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js.JSConverters._\n\nval scArr = scala.Array(1, 2, 3)\nval jsArr = scArr.toJSArray\n```\n\n----------------------------------------\n\nTITLE: Creating Inner Classes in Scala.js 1.x\nDESCRIPTION: Shows how to declare inner JS classes in Scala.js, simplifying instantiation of non-native JS classes. This improves the ability to create complex JavaScript structures directly from Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_20\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a New Vite Project with npm\nDESCRIPTION: This snippet demonstrates how to create a new Vite project using the npm command. It sets the project name and framework type, showing initial setup output.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm create vite@4.1.0\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ npm create vite@4.1.0\nNeed to install the following packages:\n  create-vite@4.1.0\nOk to proceed? (y)\n✔ Project name: … livechart\n✔ Select a framework: › Vanilla\n✔ Select a variant: › JavaScript\n\nScaffolding project in .../livechart...\n\nDone. Now run:\n\n  cd livechart\n  npm install\n  npm run dev\n```\n\n----------------------------------------\n\nTITLE: JavaScript Greeter Function\nDESCRIPTION: Native JavaScript function that uses a dynamically created greeter class.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetPeople(greeterClass) {\n  const greeter = new greeterClass();\n  greeter.greet(\"Jane\");\n  greeter.greet(\"John\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Scala trait to represent a JavaScript object\nDESCRIPTION: This snippet defines a Scala trait that corresponds to a JavaScript object with two properties: foo and bar. It utilizes js.native to indicate that these fields are mapped to JavaScript properties.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/types.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\ntrait MyObject extends js.Object {\n  val foo: Int = js.native\n  val bar: String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Testing for Global Variable Existence - Correct Method\nDESCRIPTION: Shows the correct way to test for global variable existence in Scala.js 1.0.0-M6 using js.typeOf.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Require Example\nDESCRIPTION: Example showing how to dynamically use require in Node.js environment with Scala.js 1.x\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Namespace Import in Scala.js and ECMAScript Equivalent\nDESCRIPTION: Comparison of Scala.js namespace import syntax and its ECMAScript module equivalent. Shows how @JSImport with JSImport.Namespace is translated to ES module import statements.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSImport(\"mod.js\", JSImport.Namespace)\nobject Bar extends js.Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Bar from \"mod.js\"\n```\n\n----------------------------------------\n\nTITLE: Accessing `require` in Scala.js 1.x\nDESCRIPTION: This snippet demonstrates how to dynamically access the `require` function, a common feature in Node.js environments, within Scala.js 1.x. It shows the use of `js.Dynamic.global` to access global JavaScript variables.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Load Scala.js Version\nDESCRIPTION: This snippet demonstrates how to dynamically load a custom version of Scala.js in the sbt plugin configuration. It retrieves the version from an environment variable and falls back on a default value.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_24\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\\\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.31\")\\\n\\\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Method Call Examples\nDESCRIPTION: Examples of calling exported Scala methods from JavaScript code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbar.Foo().main();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbar.Foo.main();\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript Version in Scala.js Build\nDESCRIPTION: Shows how to configure the target ECMAScript version for Scala.js compilation. This new configuration allows choosing any ECMAScript version from 5.1 to 2020.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-06-09-announcing-scalajs-1.6.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= (_.withESFeatures(_.withESVersion(ESVersion.ES2018))) // default ES2015\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js sbt Plugin for 1.0.0\nDESCRIPTION: SBT configuration to add the Scala.js 1.0.0 compiler plugin. This is the main change required to upgrade to Scala.js 1.0.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Using js.use(x).as[T] for Static Type-checking of Exports\nDESCRIPTION: Demonstrates the new js.use(x).as[T] pattern in Scala.js 0.6.5 which provides static type-checking to ensure that all required exports are present for JavaScript interface compatibility.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nSomeLibrary.doSomething(js.use(new InterfaceImpl()).as[SomeInterface])\n```\n\n----------------------------------------\n\nTITLE: Correct idiom for testing global variable existence\nDESCRIPTION: This snippet shows the correct way to test for the existence of a global variable in Scala.js 1.0.0-M3 using js.typeOf.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Explicit JSExport in Scala.js 1.0.0-M1\nDESCRIPTION: Example of how to explicitly export a JSApp object and its main method to JavaScript in Scala.js 1.0.0-M1, which is necessary as extending js.JSApp no longer automatically exports to JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nobject Foo extends js.JSApp {\n  @JSExport\n  def main(): Unit = {\n    println(\"Hello world\")\n  }\n\n  @JSExportTopLevel(\"bar.Foo\")\n  def jsAccessor(): Foo.type = this\n}\n```\n\n----------------------------------------\n\nTITLE: Nested `for` loops\nDESCRIPTION: This Javascript code defines a function `findPairs` that iterates through numbers from `0` to `n` using nested `for` loops to find pairs that sum up to the given `sum` value.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction findPairs(n, sum) {\n  for (let i = 0; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i + j == sum)\n        console.log(`Found pair ${i}, ${j}`);\n    }\n  }\n};\nfindPairs(20, 31);\n```\n\n----------------------------------------\n\nTITLE: Indirectly Using Unsupported JDK Library in Scala.js\nDESCRIPTION: This code snippet demonstrates indirect use of java.io.File through scala.io.Source, which is also not supported in Scala.js and will result in linking errors.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nval src = scala.io.Source.fromFile(\"foo.txt\", \"UTF8\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Minified JS Dependencies in Scala.js\nDESCRIPTION: Shows how to specify minified versions of JavaScript dependencies using the new 'minified' modifier in jsDependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-05-12-announcing-scalajs-0.6.3.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\njsDependencies +=\n  \"org.webjars\" % \"immutable\" % \"3.4.0\" / \"immutable.js\" minified \"immutable.min.js\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Maps in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and access data within maps using JavaScript ES6. It shows both object-style maps and the ES6 Map object, using methods like Map.keys and Map.values.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// object style map\nconst m = {first: \"James\", last: \"Bond\"};\n// ES6 Map\nconst data = [[\"first\", \"James\"], [\"last\", \"Bond\"]];\nconst m2 = new Map(data);\n```\n\n----------------------------------------\n\nTITLE: Named Import in Scala.js and ECMAScript Equivalent\nDESCRIPTION: Comparison of Scala.js named import syntax and its ECMAScript module equivalent. Shows how @JSImport with a specific identifier is translated to ES module import statements.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSImport(\"mod.js\", \"foo\")\nobject Bar extends js.Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo as Bar } from \"mod.js\"\n```\n\n----------------------------------------\n\nTITLE: Fixed js.JSON.stringify example with type casting in Scala.js 1.2.0\nDESCRIPTION: This snippet shows how to fix the previous code example by adding a type cast to ensure compatibility with the narrowed 'space' parameter type in Scala.js 1.2.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-09-09-announcing-scalajs-1.2.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\ndef configString(config: js.Dictionary[String], mySpace: js.Any): String =\n  js.JSON.stringify(config, space = mySpace.asInstanceOf[Int | String])\n```\n\n----------------------------------------\n\nTITLE: Dynamic Require Usage in Scala.js\nDESCRIPTION: Demonstrates how to dynamically access Node.js require function in Scala.js 1.x using js.Dynamic.global.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Standard Scala Main Method Definition\nDESCRIPTION: Example of a standard main method format recognized by the SBT plugin since version 0.6.18.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\ndef main(args: Array[String]): Unit = ...\n```\n\n----------------------------------------\n\nTITLE: Equivalent JavaScript Chart Configuration\nDESCRIPTION: JavaScript version of the Chart.js configuration for comparison\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalablytyped.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"bar\",\n  data: {\n    datasets: [\n      {\n        label: \"Price\",\n        borderWidth: 1,\n        backgroundColor: \"green\"\n      },\n      {\n        label: \"Full price\",\n        borderWidth: 1,\n        backgroundColor: \"blue\"\n      }\n    ]\n  },\n  options: {\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Greeter Class Generation\nDESCRIPTION: Shows how to create dynamic JavaScript classes with constructors in Scala.js 1.x using nested non-native JS classes.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parentheses to Properly Define JavaScript Method Call\nDESCRIPTION: Shows how to explicitly define a JavaScript method call by adding parentheses to the method signature when a getter is not intended.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-07-27-announcing-scalajs-0.6.11.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\ndef makeArray[A](): js.Array[A] = js.native\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross Project with Integration Tests\nDESCRIPTION: Configuration for setting up integration tests in a Scala.js cross project, including shared source directory setup and integration test configurations for both JVM and JS targets.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nlazy val cross = crossProject.in(file(\".\")).\n  // add the `it` configuration\n  configs(IntegrationTest).\n  // add `it` tasks\n  settings(Defaults.itSettings: _*).\n  // add Scala.js-specific settings and tasks to the `it` configuration\n  jsSettings(inConfig(IntegrationTest)(ScalaJSPlugin.testConfigSettings): _*).\n  // add the `shared` folder to source directories\n  settings(\n    unmanagedSourceDirectories in IntegrationTest ++= \n      CrossType.Full.sharedSrcDir(baseDirectory.value, \"it\").toSeq\n  ).\n  ...\n```\n\n----------------------------------------\n\nTITLE: Conditional Application of scalajs:sjsDefinedByDefault\nDESCRIPTION: This snippet shows how to conditionally enable the '-P:scalajs:sjsDefinedByDefault' flag based on the Scala.js version used, addressing compatibility for non-native JS types in the codebase.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_29\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\\\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\\\n  else Nil\\\n}\n```\n\n----------------------------------------\n\nTITLE: Switch statement\nDESCRIPTION: This JavaScript snippet uses a `switch` statement to assign a description based on the value of the `animal` variable. Includes fall-through cases and a default case.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst animal = \"Dog\";\nlet description;\nswitch(animal) {\n  case \"Cat\":\n  case \"Lion\":\n  case \"Tiger\":\n    description = \"It's feline!\";\n    break;\n  case \"Dog\":\n  case \"Wolf\":\n    description = \"It's canine!\";\n    break;\n  default:\n    description = \"It's something else\";\n}\nconsole.log(description);\n```\n\n----------------------------------------\n\nTITLE: Configuring ES2015 Features in Scala.js Build\nDESCRIPTION: SBT configuration to enable ECMAScript 2015 features in the Scala.js linker configuration. This setting allows the use of ES2015 output with Google Closure Compiler support.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-05-24-announcing-scalajs-0.6.28.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= { _.withESFeatures(_.withUseECMAScript2015(true)) }\n```\n\n----------------------------------------\n\nTITLE: Numeric Operations and Type Inference in ES6 and Scala\nDESCRIPTION: Shows how numeric operations behave differently in ES6 and Scala due to Scala's static typing. Scala performs calculations based on operand types, while JavaScript uses 64-bit floating-point for all numbers.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = 5 / 3; // == 1.6666666666666667\n```\n\nLANGUAGE: scala\nCODE:\n```\nval x = 5 / 3 // == 1\nval y = 5.0 / 3 // == 1.6666666666666667\nval z = 5 / 3.0 // == 1.6666666666666667\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating JavaScript Classes in Scala.js\nDESCRIPTION: Demonstrates how to define non-native JavaScript classes dynamically in Scala.js, using the closure to maintain state between calls. This pattern can be useful for creating reusable components.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_21\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating JavaScript Objects Using Dynamic Interface in Scala.js\nDESCRIPTION: This snippet demonstrates how to instantiate a JavaScript object dynamically in Scala.js through `js.Dynamic.newInstance` method. It emphasizes the utility of importing `js.Dynamic.global` for frequent dynamic operations and underscores potential pitfalls due to its close resemblance to raw JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nval today = js.Dynamic.newInstance(js.Dynamic.global.Date)()\n```\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{ global => g, newInstance => jsnew }\n\nval today = jsnew(g.Date)()\n```\n\n----------------------------------------\n\nTITLE: Enabling CommonJS Module Output in Scala.js\nDESCRIPTION: Shows how to configure sbt to generate CommonJS modules with Scala.js by setting the module kind.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-10-17-announcing-scalajs-0.6.13.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSModuleKind := ModuleKind.CommonJSModule\n```\n\n----------------------------------------\n\nTITLE: Example of js.JSON.stringify usage with type error in Scala.js 1.2.0\nDESCRIPTION: This snippet demonstrates code that worked in Scala.js <= 1.1.1 but will fail to compile in 1.2.0 due to the type of the 'space' parameter being narrowed from js.Any to Int | String.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-09-09-announcing-scalajs-1.2.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\ndef configString(config: js.Dictionary[String], mySpace: js.Any): String =\n  js.JSON.stringify(config, space = mySpace)\n```\n\n----------------------------------------\n\nTITLE: Declaring Native JS Classes and Objects with @js.native Before Deprecation\nDESCRIPTION: Example of how to declare facade types for native JavaScript classes and objects using @js.native before the introduction of the @JSGlobal annotation in Scala.js 0.6.15.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\nobject Foo extends js.Object\n\n@js.native\n@JSName(\"Foobar\")\nclass Bar extends js.Object\n```\n\n----------------------------------------\n\nTITLE: Creating a Main Object with js.JSApp in Scala.js (Previous Approach)\nDESCRIPTION: Demonstrates how to create a main object in Scala.js prior to version 0.6.18 by extending js.JSApp and implementing a main() method without parameters.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-28-announcing-scalajs-0.6.18.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nobject HelloWorld extends js.JSApp {\n  def main(): Unit = {\n    println(\"Hello world!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Laminar Dependency in SBT\nDESCRIPTION: Shows how to add the Laminar library dependency to the build.sbt configuration file.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n     libraryDependencies += \"org.scala-js\" %%% \"scalajs-dom\" % \"{{ site.versions.scalaJSDOM }}\",\n+\n+    // Depend on Laminar\n+    libraryDependencies += \"com.raquo\" %%% \"laminar\" % \"17.0.0\",\n   )\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Initializers in SBT\nDESCRIPTION: SBT configuration to add a custom module initializer with specified moduleID\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleInitializer\nscalaJSModuleInitializers in Compile += {\n  ModuleInitializer.mainMethod(\"my.app.admin.Main\", \"main\")\n    .withModuleID(\"admin\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JS Dependencies Plugin - Scala\nDESCRIPTION: This snippet ensures that the 'JSDependenciesPlugin' is enabled for relevant projects, which is required for handling dependencies related to JavaScript in Scala.js projects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nenablePlugins(JSDependenciesPlugin)\n```\n\n----------------------------------------\n\nTITLE: Regex for Multiple Newline Types Without Multiline Flag\nDESCRIPTION: This snippet demonstrates a more complex regular expression that handles multiple types of newline characters without using the multiline flag.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/regular-expressions.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nval regex3 = \"\"\"(?:^|[\\n\\r\\u0085\\u2028\\u2029])(foo|bar|)(?=[\\n\\r\\u0085\\u2028\\u2029]|$)\"\"\".r\nfor (m <- regex3.findAllMatchIn(input))\n  println(m.group(1))\n```\n\n----------------------------------------\n\nTITLE: Creating Reflective Calls in Scala\nDESCRIPTION: This snippet demonstrates how to create a reflective call with a structural type in Scala. It defines a method `foo` within type `T` and explains how objects can conform to this structure to be passed to the `print` method. The snippet also highlights the issues around runtime failures due to reflective calls on `js.Any` types.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\n// A structural type\ntype T = { def foo(x: Int): String }\ndef print(obj: T) = obj.foo(100)\n//                      ^ this is a reflective call\n```\n\nLANGUAGE: scala\nCODE:\n```\nclass A { def foo(x: Int) = s\"Input: $x\" }\nprint(new A())\n```\n\n----------------------------------------\n\nTITLE: JSExport Class Definition Example\nDESCRIPTION: Example demonstrating how @JSExport annotation behavior changes in 0.6.x to export using fully qualified names by default.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-12-announcing-scalajs-0.6.0-RC1.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\npackage babar\n\n@JSExport\nclass Foo\n```\n\n----------------------------------------\n\nTITLE: Defining js.UndefOr Type Alias in Scala.js 1.x\nDESCRIPTION: Shows the new type alias definition for js.UndefOr in Scala.js 1.x, which is now A | Unit.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_20\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Accessing require in Node.js Environment with Scala.js 1.x\nDESCRIPTION: Demonstrates how Scala.js 1.x can now access special 'global' variables like require in Node.js, allowing for dynamic module loading.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Using Boopickle Library in Scala.js\nDESCRIPTION: This code snippet demonstrates the usage of the Boopickle library in a Scala.js application. It will compile but fail during linking if the dependency is not correctly specified for Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport boopickle.Default._\n\nval data = Seq(\"Hello\", \"World!\")\nval buf = Pickle.intoBytes(data)\n```\n\n----------------------------------------\n\nTITLE: Maintaining Backward Compatibility with 0-arg Function Export\nDESCRIPTION: Example showing how to maintain the behavior of the 0-arg function export for objects when migrating from @JSExport to @JSExportTopLevel.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\npackage foo\n\nobject Foo {\n  @JSExportTopLevel(\"foo.Foo\")\n  protected def jsAccessor(): this.type = this\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Top-level Exports with Namespaces in Scala.js\nDESCRIPTION: Example of a deprecated top-level export with namespace that will not work well with ECMAScript modules. This approach is no longer recommended as of Scala.js 0.6.26.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"foo.Bar\")\nobject Bar\n```\n\n----------------------------------------\n\nTITLE: Accessing Exported Classes and Objects from JavaScript Before Deprecation\nDESCRIPTION: JavaScript code showing how to access Scala objects and classes exported with @JSExport before the changes in Scala.js 0.6.15.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar fooObject = foo.Foo(); // note the ()\nvar barObject = new Bar();\n```\n\n----------------------------------------\n\nTITLE: JS Class Constructor with Default Parameters\nDESCRIPTION: Example of a JavaScript class constructor using default parameters, which is now supported in Scala.js 1.7.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-08-04-announcing-scalajs-1.7.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nclass A(x: Int, y: String = \"default\") extends js.Object {\n  def this() = this(12)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Split Style in SBT\nDESCRIPTION: SBT configuration to set module split style to SmallestModules for generating smaller module files\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleSplitStyle\nscalaJSLinkerConfig ~= (_.withModuleSplitStyle(ModuleSplitStyle.SmallestModules))\n```\n\n----------------------------------------\n\nTITLE: Importing jQuery with JSImport in CommonJS Style\nDESCRIPTION: Example of importing jQuery library using @JSImport annotation in CommonJS module style.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-04-announcing-scalajs-0.6.17.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSImport(\"jquery.js\", JSImport.Default)\nobject JQuery extends js.Object {\n  def apply(selector: String): JQuery = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Concurrent Scala.js Linker Tasks in sbt\nDESCRIPTION: Code snippet showing how to limit the number of concurrent Scala.js linker tasks in sbt to prevent memory exhaustion, particularly useful for CI environments. This setting restricts the number of simultaneous linking operations to 2.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-08-announcing-scalajs-0.6.27.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nconcurrentRestrictions in Global += Tags.limit(ScalaJSTags.Link, 2)\n```\n\n----------------------------------------\n\nTITLE: Declaring JavaScript Inner Class Structure\nDESCRIPTION: Example of a JavaScript class with an inner class definition that captures a variable from the outer scope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass OuterClass {\n  constructor(x) {\n    this.InnerClass = class InnerClass {\n      someMethod() {\n        return x;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSExport Annotation with Fully Qualified Names in Scala.js\nDESCRIPTION: Example demonstrating how @JSExport behavior changed in Scala.js 0.6.x to export using fully qualified names by default.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-02-05-announcing-scalajs-0.6.0.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage babar\n\n@JSExport\nclass Foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js Semantics in SBT\nDESCRIPTION: SBT configuration code to enable compliant ClassCastException behavior in Scala.js at runtime. This setting affects the entire application including dependencies but impacts performance.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-02-05-announcing-scalajs-0.6.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withAsInstanceOfs(\n    org.scalajs.core.tools.sem.CheckedBehavior.Compliant) }\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Vite\nDESCRIPTION: This shell snippet demonstrates how to build a production-ready application using Vite. The command `npm run build` triggers the Vite build process, which optimizes and bundles the application's assets for deployment.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"$ npm run build\\n\\n> livechart@0.0.0 build\\n> vite build\\n\\nvite v4.1.4 building for production...\\n[info] welcome to sbt 1.8.0 (Temurin Java 1.8.0_362)\\n[...]\n[info] Full optimizing .../livechart/target/scala-3.2.2/livechart-opt\\n.../livechart/target/scala-3.2.2/livechart-opt\\n✓ 11 modules transformed.\\ndist/index.html                       0.45 kB\\ndist/assets/javascript-8dac5379.svg   1.00 kB\\ndist/assets/index-48a8825f.css        1.24 kB │ gzip: 0.65 kB\\ndist/assets/index-3c83baa6.js        28.84 kB │ gzip: 6.97 kB\"\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Function Value (Scala)\nDESCRIPTION: Example of creating a JavaScript function value using the js.Function1 type in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-02-12-announcing-scalajs-1.5.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nval jsFun: js.Function1[Int, String] = arg => arg.toString()\n```\n\n----------------------------------------\n\nTITLE: Testing Global Variable Existence - Correct Approach\nDESCRIPTION: The correct approach for testing whether a global variable exists in Scala.js 1.0.0-M1 using js.typeOf.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Correct js.JSApp Usage Without Redundant Exports\nDESCRIPTION: Updated example showing the correct way to define a js.JSApp object without redundant @JSExport annotations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nobject Foo extends js.JSApp {\n  def main(): Unit = { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Scala.js JavaScript Operations\nDESCRIPTION: Import statements for enabling ECMAScript 5.1 operations on primitive strings and numbers in Scala.js code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-02-05-announcing-scalajs-0.6.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport js.JSStringOps._\nimport js.JSNumberOps._\n```\n\n----------------------------------------\n\nTITLE: Filtering jsDependencies in Scala.js SBT Configuration\nDESCRIPTION: Shows how to use the jsDependencyFilter setting in SBT to exclude specific JavaScript dependencies when running or testing Scala.js code. The example demonstrates filtering out jQuery from the dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-06-30-announcing-scalajs-0.5.1.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\njsDependencyFilter := (_.filter(_.resourceName != \"jquery.js\"))\n```\n\n----------------------------------------\n\nTITLE: Using @JSExport on Objects and Classes Before Deprecation\nDESCRIPTION: Example showing how to export top-level classes and objects to JavaScript using the @JSExport annotation before its deprecation in favor of @JSExportTopLevel.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\npackage foo\n\n@JSExport\nobject Foo\n\n@JSExport(\"Bar\")\nclass Bar\n```\n\n----------------------------------------\n\nTITLE: Copying Objects\nDESCRIPTION: This JavaScript snippet creates a new object `o2` by copying properties from `o1` and modifying the value of the `a` property using `Object.assign`. This prevents modifying the original object `o1`.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst o1 = {a: 1, x: \"test\"};\n\n// start with empty object to prevent\n// modification of o1\nconst o2 = Object.assign({}, o1, {a: 42});\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Greeter Classes in Scala.js\nDESCRIPTION: Demonstrates creating multiple greeter classes with different greeting formats and using them with the native JavaScript greetPeople function.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\nval englishGreeterClass = makeGreeter(\"Hello, %s!\")\ngreetPeople(englishGreeterClass)\nval frenchGreeterClass = makeGreeter(\"Bonjour, %s!\")\ngreetPeople(frenchGreeterClass)\nval japaneseGreeterClass = makeGreeter(\"%sさん、こんにちは。\")\ngreetPeople(japaneseGreeterClass)\n```\n\n----------------------------------------\n\nTITLE: Configuring PhantomJS Environment in Scala.js\nDESCRIPTION: Sets up the PhantomJS environment for Scala.js, a Webkit-based headless browser. Requires the sbt-scalajs-env-phantomjs plugin.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/js-environments.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := PhantomJSEnv().value\n```\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript String/Number Operations\nDESCRIPTION: Import statements to enable ECMAScript 5.1 operations on primitive strings and numbers in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-22-announcing-scalajs-0.6.0-M3.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport js.JSStringOps._\nimport js.JSNumberOps._\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs Plugin for Scala.js 1.0.0-M5\nDESCRIPTION: Required SBT plugin configuration for upgrading to Scala.js 1.0.0-M5. Add this to your project/plugins.sbt file to use the new milestone version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-M5\")\n```\n\n----------------------------------------\n\nTITLE: Adding DOM Runtime Dependency to Scala.js Project\nDESCRIPTION: This code demonstrates how to specify that a Scala.js project depends on the DOM by adding the RuntimeDOM dependency to jsDependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-08-29-announcing-scalajs-0.5.4.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nScalaJSKeys.jsDependencies += scala.scalajs.sbtplugin.RuntimeDOM\n```\n\n----------------------------------------\n\nTITLE: Invalid Access to JavaScript Global with Invalid Identifier\nDESCRIPTION: Shows code that is invalid in Scala.js 1.x - accessing a global member with a name that is not a valid JavaScript identifier.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Invoking a JavaScript Function from Scala.js\nDESCRIPTION: Illustrates how to call a JavaScript function from Scala.js while passing in dynamically created class types. This allows Scala.js code to effectively interact with existing JavaScript libraries.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greetPeople(greeterClass) {\n  const greeter = new greeterClass();\n  greeter.greet(\"Jane\");\n  greeter.greet(\"John\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Existent Global Variables - Read Example\nDESCRIPTION: Shows an example of reading a non-existent global variable which now throws a ReferenceError in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.globalVarThatDoesNotExist)\n```\n\n----------------------------------------\n\nTITLE: SBT Configuration for ScalaJS Default Definition\nDESCRIPTION: SBT configuration examples for enabling Scala.js defined by default compiler option in both single and cross projects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-04-announcing-scalajs-0.6.17.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\n// For a Scala.js-only project\nlazy val foo = project.\n  enablePlugins(ScalaJSPlugin).\n  settings(\n    ...\n    scalacOptions += \"-P:scalajs:sjsDefinedByDefault\"\n  )\n\n// For a cross project:\nlazy val bar = crossProject.\n  settings(\n    ...\n  ).\n  jsSettings(\n    ...\n    scalacOptions += \"-P:scalajs:sjsDefinedByDefault\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Invalid Access to Non-Identifier Member in Global Scope\nDESCRIPTION: Example of invalid access to a member with a name that is not a valid JavaScript identifier in Scala.js 1.0.0-M5. The global scope only allows access to valid JavaScript identifiers.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Old Pattern: Exporting Scala Members for JavaScript Interface Compatibility\nDESCRIPTION: Shows the previous approach of manually exporting Scala class members with @JSExport and using unsafe type casting to comply with JavaScript interfaces.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\ntrait SomeInterface extends js.Object {\n  val x: Int = js.native\n  def foo(x: Int): Int = js.native\n}\n\nobject SomeLibrary extends js.Object {\n  def doSomething(obj: SomeInterface): Unit = js.native\n}\n\nclass InterfaceImpl {\n  @JSExport val x: Int = 4\n  @JSExport def foo(x: Int): Int = x + 1\n}\n\nSomeLibrary.doSomething(new InterfaceImpl().asInstanceOf[SomeInterface])\n```\n\n----------------------------------------\n\nTITLE: Importing jQuery with JSGlobal for Global Variables\nDESCRIPTION: Example of importing jQuery library using @JSGlobal annotation for global variable style access.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-04-announcing-scalajs-0.6.17.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal(\"$\")\nobject JQuery extends js.Object {\n  def apply(selector: String): JQuery = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Flag Application\nDESCRIPTION: This snippet shows how to conditionally apply the `-P:scalajs:sjsDefinedByDefault` compiler flag based on the Scala.js version.  It adds the flag only if the Scala.js version starts with \"0.6.\", ensuring compatibility with older versions of Scala.js that require the flag for non-native JS types.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_30\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\n  else Nil\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the JavaScript Global Scope - Valid Example\nDESCRIPTION: Demonstrates the valid way to access a member of the global scope in Scala.js 1.0.0-M1. Members must be accessed with a statically known name that is a valid JavaScript identifier.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript output version\nDESCRIPTION: Demonstrates how to configure Scala.js to emit ECMAScript 5.1 code instead of the default ECMAScript 2015 in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig in ThisBuild ~= { _.withESFeatures(_.withUseECMAScript2015(false)) }\n```\n\n----------------------------------------\n\nTITLE: Enabling JSDependenciesPlugin in Scala.js Projects\nDESCRIPTION: Configuration required to enable JavaScript dependencies in your Scala.js projects. This must be added to each Scala.js project that needs JavaScript dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n.enablePlugins(JSDependenciesPlugin)\n```\n\n----------------------------------------\n\nTITLE: Renaming import for global scope in Scala.js\nDESCRIPTION: Example of using a renaming import as an alternative to storing the global scope object in a val.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{global => g}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Export in Scala.js 0.6.x\nDESCRIPTION: Shows how Scala.js 0.6.x exported top-level objects to the global JavaScript scope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Foo = <the object Bar>; // or global.Foo, etc.\n```\n\n----------------------------------------\n\nTITLE: Manipulating Map Data in JavaScript\nDESCRIPTION: This code provides examples of accessing and manipulating map data in JavaScript using different techniques such as object syntax and ES6 Map methods.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// object syntax\nconst name = `${m.last}, ${m.first} ${m.last}`\n// ES6 Map syntax\nconst name2 = `${m2.get(\"last\")}, ${m2.get(\"first\")} ${m2.get(\"last\")}`\n// use default value when missing\nconst age = m.age === undefined ? \"42\" : m.age;\n// check all fields are present\nconst person = m.first !== undefined &&\n  m.last !== undefined &&\n  m.age !== undefined ? `${m.last}, ${m.first}: ${m.age}` :\n  \"missing\";\n```\n\n----------------------------------------\n\nTITLE: Global Variable Existence Check\nDESCRIPTION: Example showing how to properly check for existence of global variables in Scala.js 1.x\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript Target Version in Scala.js\nDESCRIPTION: This snippet shows how to configure the ECMAScript target version for Scala.js, which affects the available regular expression features. It sets the target to ES2018.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/regular-expressions.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= (_.withESFeatures(_.withESVersion(ESVersion.ES2018)))\n```\n\n----------------------------------------\n\nTITLE: Configuring ScalaJS Default Definition in SBT\nDESCRIPTION: SBT configuration option to enable default Scala.js definitions, replacing the @ScalaJSDefined annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions += \"-P:scalajs:sjsDefinedByDefault\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Passing of Global Scope as Parameter\nDESCRIPTION: Example showing that the global scope cannot be passed as a parameter in Scala.js 1.0.0-M5. This is not allowed because it would bypass the static checking of member names.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Dependencies for Node.js\nDESCRIPTION: This snippet conditionally adds dependencies on scalajs-env-jsdom-nodejs for Node.js based on the Scala.js version. If the version starts with '0.6.', no dependencies are added.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_26\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\\\nlibraryDependencies ++= {\\\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\\\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-RC1\")\\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scala.js Minification Configuration\nDESCRIPTION: Configuration snippet showing how to disable the new Scala.js minification optimizations in the linker config using sbt.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2024-03-19-announcing-scalajs-1.16.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= { _.withMinify(false) }\n```\n\n----------------------------------------\n\nTITLE: Checking for undefined global variables\nDESCRIPTION: Shows the correct way to check for undefined global variables in Scala.js 1.x using js.typeOf instead of js.isUndefined.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: JavaScript Export in Scala.js 1.x\nDESCRIPTION: Illustrates how Scala.js 1.x exports top-level objects as JavaScript variables instead of global properties.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar Foo = <the object Bar>;\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Inner Classes\nDESCRIPTION: Demonstration of instantiating and using inner classes in JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst outerObject = new OuterClass(42);\nconst innerObject = new outerObject.InnerClass();\nconsole.log(innerObject.someMethod()); // prints 42\n```\n\n----------------------------------------\n\nTITLE: Shadowing Imports for sbt-scalajs-crossproject\nDESCRIPTION: This snippet shows how to resolve conflicts between `sbt-scalajs-crossproject` and Scala.js 0.6.x by shadowing imports.  It imports `crossProject` and `CrossType` from `sbtcrossproject`, which are defined in both `sbt-scalajs` and `sbtcrossproject`. This resolves the conflict, allowing the code to compile correctly in both Scala.js 0.6.x and 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_31\n\nLANGUAGE: scala\nCODE:\n```\n// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)\nimport sbtcrossproject.{crossProject, CrossType}\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-jsdependencies Plugin for JavaScript Dependencies\nDESCRIPTION: Configuration for the JavaScript dependencies plugin in Scala.js 1.0.0-M5. Add this if your project uses jsDependencies or relies on transitive dependencies that use it.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M5\")\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs-crossproject Plugin for Cross-Platform Projects\nDESCRIPTION: Configuration for adding cross-project support in Scala.js 1.0.0-M5. This plugin is now required if you use crossProject in your build.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.portable-scala\" % \"sbt-scalajs-crossproject\" % \"0.5.0\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Float Semantics in Scala.js\nDESCRIPTION: Configuration to enable strict float semantics in Scala.js 0.6.x, ensuring all Float operations behave as on the JVM with appropriate precision truncation. This may impact performance on VMs without Math.fround support.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-12-announcing-scalajs-0.6.0-RC1.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withStrictFloats(true) }\n```\n\n----------------------------------------\n\nTITLE: Filtering None Values in Scala\nDESCRIPTION: This Scala snippet demonstrates how to filter `None` values from an array of `Option`s using the `filter` method and `isDefined`.  It keeps only the `Some` values, effectively removing the `None` values.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_30\n\nLANGUAGE: scala\nCODE:\n```\nval data = Array(Some(1), Some(2), Some(3),\n  None, Some(5), None, Some(7))\nval res = data.filter(x => x.isDefined)\n```\n\n----------------------------------------\n\nTITLE: Loading Dynamic Scala.js Version in SBT\nDESCRIPTION: Configures SBT to load a specific Scala.js version from an environment variable SCALAJS_VERSION, defaulting to 0.6.28 if not specified.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.28\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Instantiation of Nested Class\nDESCRIPTION: This JavaScript snippet demonstrates how to instantiate the inner class defined within the OuterClass. It showcases how to create an instance of the inner class and call its methods.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst outerObject = new OuterClass(42);\nconst innerObject = new outerObject.InnerClass();\nconsole.log(innerObject.someMethod()); // prints 42\n```\n\n----------------------------------------\n\nTITLE: JavaScript Operator Method Definition With JSOperator Annotation\nDESCRIPTION: Example showing the new recommended way of defining JavaScript operator methods in facade types using @JSOperator annotation\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-11-23-announcing-scalajs-1.12.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n  @JSOperator def +(other: BigInt): BigInt = js.native\n```\n\n----------------------------------------\n\nTITLE: Loading Scala.js Version Dynamically in Scala\nDESCRIPTION: This Scala snippet demonstrates how to load the Scala.js version dynamically using an environment variable in the 'project/plugins.sbt' file. It checks the environment variable 'SCALAJS_VERSION' and defaults to '0.6.31' if not set. Dependencies include 'sbt' and 'org.scala-js' plugin.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.31\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: Scala.js Inner Class Facade Type\nDESCRIPTION: Demonstrates how to create facade types for JavaScript inner classes in Scala.js 1.x using nested class definitions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Greeter Class Generator\nDESCRIPTION: Example of creating dynamic JavaScript classes in Scala.js with different greeting formats.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Linking Error Output in Scala.js\nDESCRIPTION: This snippet shows a typical linking error output when compiling a Scala.js application. It demonstrates how the linker reports methods or classes that cannot be found during the linking process.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[info] Fast optimizing .../helloworld/target/scala-2.12/helloworld-fastopt\n[error] Referring to non-existent method scala.concurrent.impl.Promise$CompletionLatch.releaseShared(scala.Int)scala.Boolean\n[error]   called from scala.concurrent.impl.Promise$CompletionLatch.apply(scala.util.Try)scala.Unit\n[error]   called from scala.concurrent.impl.Promise$CompletionLatch.apply(java.lang.Object)java.lang.Object\n[error] ...\n[error] There were linking errors\n[error] (helloworld/compile:fastLinkJS) There were linking errors\n[error] Total time: 2 s, completed Sep 13, 2019 1:30:39 PM\n```\n\n----------------------------------------\n\nTITLE: Using js.import.meta in Scala.js\nDESCRIPTION: Demonstrates how to access the import.meta meta-property introduced in ECMAScript 2020 using Scala.js 1.6.0. This requires emitting Scala.js code as an ESModule.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-06-09-announcing-scalajs-1.6.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nval moduleMetaInfo: js.Dynamic = js.`import`.meta\nprintln(moduleMetaInfo.url) // Node.js-specific\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Environment Support for Scala.js\nDESCRIPTION: Configuration for Node.js environment support in Scala.js 1.0.0-M5. This dependency is required if you use the Node.js with jsdom environment.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-nodejs\" % \"1.0.0-M5\"\n```\n\n----------------------------------------\n\nTITLE: Specifying CommonJS Name for JavaScript Dependencies in Scala.js\nDESCRIPTION: This code demonstrates how to use the new commonJSName directive when declaring JavaScript dependencies in Scala.js. This helps resolve issues with running JavaScript libraries in Node.js environments.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-07-30-announcing-scalajs-0.5.3.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\njsDependencies += \"org.webjars\" % \"mustachejs\" % \"0.8.2\" / \"mustache.js\" commonJSName \"Mustache\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression\nDESCRIPTION: Demonstrates a conditional expression equivalent to the ternary operator in JavaScript.  It returns 0 if the name is an empty string; otherwise, it returns 1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = (name === \"\") ? 0 : 1;\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Configuration Objects in Scala 2.12\nDESCRIPTION: Simplified configuration object usage in Scala 2.12 with improved type inference.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-12-21-announcing-scalajs-0.6.14.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\njQuery.ajax(someURL, new JQueryAjaxSettings {\n  override val crossDomain = true\n  override val success = js.defined { (data, textStatus, xhr) =>\n    println(\"Status: \" + textStatus)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript String and Number Operations in Scala.js\nDESCRIPTION: Import statements to enable methods provided by ECMAScript 5.1 on primitive strings and numbers in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-23-announcing-scalajs-0.6.0-RC2.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport js.JSStringOps._\nimport js.JSNumberOps._\n```\n\n----------------------------------------\n\nTITLE: Conditional Application of Scala.js Flag - Scala\nDESCRIPTION: This code conditionally includes the '-P:scalajs:sjsDefinedByDefault' flag in the Scala compiler options, based on the Scala.js version. This is necessary if non-native JS types are used.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\n  else Nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Native JS Type with Default Parameters in Scala.js\nDESCRIPTION: Example showing how to define a native JavaScript type with default parameters using @js.native annotation. The default parameter value is ignored at runtime in favor of the JavaScript implementation's behavior.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-10-07-announcing-scalajs-1.7.1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@js.native @JSGlobal\nobject Foo extends js.Object {\n  def bar(x: Int, y: Int = js.native): Int = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Global Scope Usage in Scala.js 1.0.0\nDESCRIPTION: Examples of no longer allowed usage of the JavaScript global scope in Scala.js 1.0.0, including storing it in a val or passing it as an argument.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js 1.0.0 to Emit ES5.1 Code\nDESCRIPTION: SBT configuration to make Scala.js 1.0.0 emit ECMAScript 5.1 code instead of the default ECMAScript 2015 output.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig in ThisBuild ~= { _.withESFeatures(_.withUseECMAScript2015(false)) }\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs plugin dependency for Scala.js 1.0.0-M3\nDESCRIPTION: This snippet shows how to add the Scala.js SBT plugin dependency for version 1.0.0-M3 in your project/plugins.sbt file.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-M3\")\n```\n\n----------------------------------------\n\nTITLE: Nested Non-Native JS Class Constructor\nDESCRIPTION: This snippet demonstrates how to create a factory method that returns a JavaScript constructor for a nested, non-native Scala.js class. It demonstrates how nested non-native classes can expose sane constructors for JavaScript interoperation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_22\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Configuration for ECMAScript Modules in Scala.js\nDESCRIPTION: Configuration settings needed to run and test ECMAScript modules with Node.js. Includes setting up the Node.js environment with experimental modules flag and configuring file extensions for ES modules.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := {\n  new org.scalajs.jsenv.NodeJSEnv(\n      org.scalajs.jsenv.NODEJSEnv.Config()\n        .withArguments(List(\"--experimental-modules\"))\n  )\n}\n\nartifactPath in (proj, Compile, fastOptJS) :=\n  (crossTarget in (proj, Compile)).value / \"myproject.mjs\"\n\nartifactPath in (proj, Test, fastOptJS) :=\n  (crossTarget in (proj, Test)).value / \"myproject-test.mjs\"\n```\n\n----------------------------------------\n\nTITLE: Adding jsdom-nodejs Environment for Scala.js 1.0.0-RC1\nDESCRIPTION: Adds the Node.js with jsdom environment dependency for Scala.js 1.0.0-RC1 in the project's build configuration.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-RC1\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Binary Incompatibilities on Classpath in Scala\nDESCRIPTION: This error message is generated when there is a binary incompatibility between libraries, often due to different parts of a project relying on incompatible versions of the same library. A potential solution is to choose library versions that maintain binary compatibility.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_9\n\nLANGUAGE: Scala\nCODE:\n```\n[error] Referring to non-existent method somelib.SomeLib.bar(java.lang.String)scala.Unit\n[error]   called from someotherlib.SomeOtherLib.foo(java.lang.String)scala.Unit\n[error]   called from helloworld.HelloWorld$.main()scala.Unit\n[error]   called from core module module initializers\n[error] ...\n[error] There were linking errors\n```\n\n----------------------------------------\n\nTITLE: Enabling ClassCastException Checks in Scala.js\nDESCRIPTION: SBT configuration to enable runtime ClassCastException checks in Scala.js applications, which impacts performance but provides more JVM-like behavior.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-12-announcing-scalajs-0.6.0-RC1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withAsInstanceOfs(org.scalajs.core.tools.sem.CheckedBehavior.Compliant) }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loading of Scala.js Version in SBT\nDESCRIPTION: Shows how to load a specific version of Scala.js in SBT using an environment variable, allowing for easier cross-compilation between 0.6.x and 1.x versions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"1.0.0\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: Importing Laminar API\nDESCRIPTION: Demonstrates the import statement needed to bring Laminar features into scope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/laminar.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport com.raquo.laminar.api.L.{*, given}\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js with jsdom Environment Dependency\nDESCRIPTION: Adds the Node.js environment dependency required for projects that use Node.js with jsdom in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-nodejs\" % \"1.0.0-M6\"\n```\n\n----------------------------------------\n\nTITLE: Defining Inner Classes and Objects in Non-native JS Traits (Scala)\nDESCRIPTION: Example of a non-native JS trait with inner classes and objects, which was allowed in previous versions but is now rejected in Scala.js 1.5.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-02-12-announcing-scalajs-1.5.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\ntrait Outer extends js.Object {\n  object InnerObject extends js.Object\n\n  class InnerClass extends js.Object\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SCALAJS_VERSION for sbt\nDESCRIPTION: This bash command sets the SCALAJS_VERSION environment variable before starting sbt for a specific Scala.js version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ SCALAJS_VERSION=1.0.0-RC1 sbt\n```\n\n----------------------------------------\n\nTITLE: Java Functional Interface Additions\nDESCRIPTION: New functional interface definitions added to java.util.function package including BiConsumer, Supplier, Function, and related interfaces.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\njava.util.function.BiConsumer\njava.util.function.Supplier\njava.util.function.Function\njava.util.function.BiFunction\njava.util.function.UnaryOperator\njava.util.function.BinaryOperator\njava.util.function.BiPredicate\n```\n\n----------------------------------------\n\nTITLE: Declaring Inner Classes in Native JS Classes in Scala.js 1.x\nDESCRIPTION: Scala.js 1.x allows for easier declaration of inner classes in native JS classes, improving facade types for certain JavaScript APIs.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Dependencies Based on Scala.js Version\nDESCRIPTION: Allows the addition of dependencies for different environments conditional on the Scala.js version, improving compatibility and ensuring that correct libraries are used for each project setup.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_24\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\nlibraryDependencies ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-M5\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Dependencies for JS Environments\nDESCRIPTION: Demonstrates adding dependencies to support Node.js or PhantomJS based on the Scala.js version. Uses sbt's libraryDependencies setting. Selects dependencies dynamically according to the Scala.js version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\nlibraryDependencies ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-M1\")\n}\n\n// For PhantomJS\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M1\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding jsdom-nodejs environment dependency\nDESCRIPTION: Adds the jsdom-nodejs environment library dependency to project/plugins.sbt for Scala.js projects using Node.js with jsdom.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-RC2\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Existent Global Variables - Write Example\nDESCRIPTION: Shows an example of writing to a non-existent global variable which now throws a ReferenceError in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\njs.Dynamic.global.globalVarThatDoesNotExist = 42\n```\n\n----------------------------------------\n\nTITLE: Configuring ClassCastException Behavior in Scala.js\nDESCRIPTION: SBT configuration to enable compliant ClassCastException behavior at runtime, affecting performance but providing JVM-like semantics.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-22-announcing-scalajs-0.6.0-M3.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withAsInstanceOfs(org.scalajs.core.tools.sem.CheckedBehavior.Compliant) }\n```\n\n----------------------------------------\n\nTITLE: Filtering Text Using Sets in JavaScript\nDESCRIPTION: This JavaScript code demonstrates filtering common words from a text by using an object to emulate a set, removing specific words typically using the filter method.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst common = {\"a\": true, \"the\": true,\n  \"an\": true, \"and\": true};\nconst text = \"The sun is a star and an energy source\"\nconst words = text.split(\" \")\n  .map(s => s.toLowerCase())\n  .filter(s => !common[s]);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inner Class Definition\nDESCRIPTION: Shows how to define and use inner classes in JavaScript with constructor-based class definition.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass OuterClass {\n  constructor(x) {\n    this.InnerClass = class InnerClass {\n      someMethod() {\n        return x;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-jsdependencies Plugin for JavaScript Dependencies\nDESCRIPTION: Adds the jsdependencies plugin required for projects that use JavaScript dependencies in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M6\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-existent Global Variable (Throws ReferenceError)\nDESCRIPTION: Example showing that accessing a non-existent global variable throws a ReferenceError in Scala.js 1.0.0-M5, whereas it would return undefined in 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.globalVarThatDoesNotExist)\n```\n\n----------------------------------------\n\nTITLE: Top-level Field Export in Scala.js\nDESCRIPTION: Demonstrates exporting top-level variables to JavaScript using @JSExportTopLevel annotation on fields.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nobject Foo {\n  @JSExportTopLevel(\"bar\")\n  val bar = 42\n\n  @JSExportTopLevel(\"foobar\")\n  var foobar = \"hello\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(bar);    // 42\nconsole.log(foobar); // \"hello\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ScalaJSModule = require('foo-fastopt.js');\nconsole.log(ScalaJSModule.bar);    // 42\nconsole.log(ScalaJSModule.foobar); // \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Enabling JSDependencies Plugin for Scala.js Projects\nDESCRIPTION: Adds the JSDependenciesPlugin to Scala.js projects using the enablePlugins method.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n.enablePlugins(JSDependenciesPlugin)\n```\n\n----------------------------------------\n\nTITLE: Scala.js Inner Class Facade\nDESCRIPTION: Scala.js 1.x facade type definition for JavaScript class with inner class.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scala.js Version Dynamically - Scala\nDESCRIPTION: This snippet shows how to dynamically load the Scala.js version using an environment variable in the 'project/plugins.sbt' file. It allows the user to set the Scala.js version without modifying the build.sbt file directly.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.27\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: Enabling Conditional Compiler Options in Scala.js\nDESCRIPTION: Sets the compiler option 'sjsDefinedByDefault' conditionally based on the Scala.js version. This allows for backward compatibility when transitioning from Scala.js 0.6.x to 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_25\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\n  else Nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSDependenciesPlugin for Scala.js Projects\nDESCRIPTION: Configuration snippet showing how to enable the JSDependenciesPlugin for Scala.js projects when using JavaScript dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n.enablePlugins(JSDependenciesPlugin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Output File Extensions in SBT\nDESCRIPTION: SBT configuration to customize output file extensions for Node.js compatibility\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.OutputPatterns\nscalaJSLinkerConfig ~= (_.withOutputPatterns(OutputPatterns.fromJSFile(\"%s.mjs\")))\n```\n\n----------------------------------------\n\nTITLE: Checking Global Variable Existence in Scala.js 0.6.x\nDESCRIPTION: Shows the old pattern for checking if a global variable exists in Scala.js 0.6.x, which no longer works in 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\nif (js.isUndefined(js.Dynamic.global.Promise)) {\n  // Promises are not supported\n} else {\n  // Promises are supported\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Operator Method Definition Without JSOperator Annotation\nDESCRIPTION: Example showing the old way of defining JavaScript operator methods in facade types without @JSOperator annotation\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-11-23-announcing-scalajs-1.12.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\n@js.native @JSGlobal\nfinal class BigInt extends js.Object {\n  def +(other: BigInt): BigInt = js.native\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-jsdependencies plugin for JavaScript dependencies\nDESCRIPTION: This snippet shows how to add the SBT plugin for JavaScript dependencies management when upgrading to Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M3\")\n```\n\n----------------------------------------\n\nTITLE: Removing sjsDefinedByDefault Compiler Option\nDESCRIPTION: Removing the -P:scalajs:sjsDefinedByDefault Scala compiler option that is no longer needed in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions += \"-P:scalajs:sjsDefinedByDefault\"\n```\n\n----------------------------------------\n\nTITLE: Assigning to non-existent global variable (throws ReferenceError)\nDESCRIPTION: This snippet shows assigning to a non-existent global variable, which in Scala.js 1.0.0-M3 throws a ReferenceError instead of creating the variable.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\njs.Dynamic.global.globalVarThatDoesNotExist = 42\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Arrays with Scala mutable.Seq in Scala.js\nDESCRIPTION: Demonstrates how to use js.WrappedArray to pass JavaScript arrays to Scala code that expects mutable.Seq. The example shows setting the first element of a JavaScript array through a Scala method that works with mutable sequences.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-06-30-announcing-scalajs-0.5.1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\ndef setHead(x: mutable.Seq[Int]): Unit = x(0) = 42\nval array = js.Array(1, 2, 3)\nsetHead(array)\nprintln(array) // -> 42,2,3\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Non-Native JS Classes in Scala.js 1.x\nDESCRIPTION: Scala.js 1.x allows declaring non-native JS classes inside outer classes or defs, with meaningful js.constructorOf usage. This enables creating new JavaScript classes dynamically.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js to Use ES5.1 Instead of ES2015\nDESCRIPTION: Shows how to configure Scala.js 1.x to emit ECMAScript 5.1 code instead of the default ES2015 code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig in ThisBuild ~= { _.withESFeatures(_.withUseECMAScript2015(false)) }\n```\n\n----------------------------------------\n\nTITLE: Conditional JS Dependencies - Scala\nDESCRIPTION: This snippet shows how to conditionally include 'jsDependencies' based on the Scala.js version. It allows for the necessary dependencies to be included only for the relevant scenarios.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M7\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Shadowing SBT CrossProject for Scala.js 1.x\nDESCRIPTION: Shows how to use import to resolve conflicts between sbt-crossproject and Scala.js 0.6.x, allowing for cleaner project structure and maintaining compatibility with both versions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_26\n\nLANGUAGE: scala\nCODE:\n```\n// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)\nimport sbtcrossproject.CrossPlugin.autoImport.{crossProject, CrossType}\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Modules\nDESCRIPTION: Example of the generated JavaScript code for dynamic module loading, showing the split between heavyfeature.js and main.js modules.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-01-12-announcing-scalajs-1.4.0.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// heavyfeature.js\n\nclass HeavyFeature {\n  doHeavyFeature(x) {\n    return x * 2;\n  }\n}\n\nexport function HeavyFeatureEntryPoint(x) {\n  return new HeavyFeature().doHeavyFeature(x);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\n\nclass MyApp {\n  useHeavyFeature() {\n    const input = getInput()\n    const resultPromise = import(\"./heavyfeature.js\")\n      .then(mod => mod.HeavyFeatureEntryPoint(input));\n    resultPromise.then(result => updateUIWithOutput(result));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PhantomJS Environment Support for Scala.js\nDESCRIPTION: Configuration for PhantomJS environment support in Scala.js 1.0.0-M5. Add this plugin if your project uses the PhantomJS environment for running or testing.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M5\")\n```\n\n----------------------------------------\n\nTITLE: Class Name Obfuscation in Scala.js\nDESCRIPTION: SBT configuration to obfuscate class names in specified packages for the generated JavaScript code, providing a way to customize runtime class names.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-02-05-announcing-scalajs-0.6.0.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= (_.withRuntimeClassName { linkedClass ->\n  val fullName = linkedClass.fullName\n  if (fullName.startsWith(\"my.company.\")) \"\"\n  else fullName\n})\n```\n\n----------------------------------------\n\nTITLE: Invalid storing of global scope object in a val\nDESCRIPTION: This snippet demonstrates that storing the global scope object in a val is not allowed in Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Playwright in Scala.js\nDESCRIPTION: Demonstrates how to enable additional debug information for the Playwright environment in Scala.js, including printing the browser version used.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/js-environments.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := new PWEnv(\n        browserName = \"chrome\",\n        headless = true,\n        debug = true\n    )\n```\n\n----------------------------------------\n\nTITLE: Definition of js.UndefOr as a type alias\nDESCRIPTION: This snippet shows how js.UndefOr is now defined as a type alias for A | Unit in Scala.js 1.0.0-M3, rather than being its own type.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Enabling JSDependenciesPlugin for Cross Projects\nDESCRIPTION: Configuration snippet showing how to enable the JSDependenciesPlugin for cross projects when using JavaScript dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n.jsConfigure(_.enablePlugins(JSDependenciesPlugin))\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs Plugin for Scala.js 1.0.0-M1\nDESCRIPTION: Configuration to add the Scala.js 1.0.0-M1 SBT plugin to your build. This is the primary step to upgrade from Scala.js 0.6.x to 1.0.0-M1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-M1\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Scala.js\nDESCRIPTION: Shows how to access global variables like `require` in Scala.js 1.x for dynamic imports. No specific dependencies are mentioned, but assumes a Node.js environment. Expects a path and returns the required asset.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Defining js.UndefOr as Type Alias in Scala.js 1.x\nDESCRIPTION: Shows how js.UndefOr is now defined as a simple type alias for A | Unit in Scala.js 1.x, which may impact type inference in subtle ways.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Testing for Global Variable Existence - Deprecated Method\nDESCRIPTION: Shows a now-broken idiom for testing whether a global variable exists, using js.isUndefined which no longer works correctly in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nif (js.isUndefined(js.Dynamic.global.Promise)) {\n  // Promises are not supported\n} else {\n  // Promises are supported\n}\n```\n\n----------------------------------------\n\nTITLE: Dual Support Import with Global Fallback\nDESCRIPTION: Example showing how to support both CommonJS and global variable styles using globalFallback parameter.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-04-announcing-scalajs-0.6.17.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSImport(\"jquery.js\", JSImport.Default, globalFallback = \"$\")\nobject JQuery extends js.Object {\n  def apply(selector: String): JQuery = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Bash command to set Scala.js version\nDESCRIPTION: This snippet shows how to launch sbt with a specific version of Scala.js using an environment variable. The environment variable `SCALAJS_VERSION` is set to `1.0.0-M3` before running `sbt`.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ SCALAJS_VERSION=1.0.0-M3 sbt\n```\n\n----------------------------------------\n\nTITLE: Invalid Global Scope Storage\nDESCRIPTION: Shows invalid examples of storing the global scope object in a variable, which is not allowed in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript 6 Strong Mode Output in Scala.js\nDESCRIPTION: Demonstrates how to set the Scala.js output mode to ECMAScript 6 Strong Mode using an sbt setting.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-05-12-announcing-scalajs-0.6.3.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSOutputMode := org.scalajs.core.tools.javascript.OutputMode.ECMAScript6StrongMode\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDependencies for Cross Projects\nDESCRIPTION: Adds the JSDependenciesPlugin to Scala.js cross projects using jsConfigure method.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n.jsConfigure(_.enablePlugins(JSDependenciesPlugin))\n```\n\n----------------------------------------\n\nTITLE: Invalid access to member with non-valid JS identifier\nDESCRIPTION: This snippet shows how accessing a member with a name that is not a valid JavaScript identifier is not supported in Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Importing Scala.js Plugin in Build.scala\nDESCRIPTION: This snippet shows the necessary imports for using the Scala.js plugin in a Build.scala definition file. It imports the ScalaJSPlugin and its autoImport object.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/index.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.sbtplugin.ScalaJSPlugin\nimport org.scalajs.sbtplugin.ScalaJSPlugin.autoImport._\n```\n\n----------------------------------------\n\nTITLE: UndefOr Type Alias Definition\nDESCRIPTION: Shows the new implementation of js.UndefOr[A] as a type alias for A | Unit in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Enabling ClassCastException checks in Scala.js 0.6.0-M1\nDESCRIPTION: SBT setting to enable ClassCastException checks in Scala.js 0.6.0-M1, sacrificing performance for more compliant behavior.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-01-announcing-scalajs-0.6.0-M1.md#2025-04-20_snippet_0\n\nLANGUAGE: Scala\nCODE:\n```\nscalaJSSemantics ~= { _.withAsInstanceOfs(org.scalajs.core.tools.sem.CheckedBehavior.Compliant) }\n```\n\n----------------------------------------\n\nTITLE: Adding jsDependencies sbt plugin\nDESCRIPTION: Adds the jsDependencies sbt plugin dependency to project/plugins.sbt for Scala.js projects using jsDependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-RC2\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Float Semantics in Scala.js\nDESCRIPTION: SBT configuration to enable strict float semantics in Scala.js, ensuring that Float operations behave consistently with JVM semantics.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-02-05-announcing-scalajs-0.6.0.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withStrictFloats(true) }\n```\n\n----------------------------------------\n\nTITLE: Loading Scala.js Version Dynamically\nDESCRIPTION: This snippet shows how to load a specific version of the Scala.js plugin dynamically using an environment variable. It defines a `scalaJSVersion` variable that reads the version from the `SCALAJS_VERSION` environment variable, defaulting to \"0.6.22\" if the variable is not set. This allows for flexible version management during the build process.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_25\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.22\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: Iterating with a `for` loop\nDESCRIPTION: This Javascript snippet calculates a sum of squares using a `for` loop and iterates over an array printing each word. It initializes a variable `x` and updates it within the loop.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 0;\nfor (let i = 0; i < 100; i++)\n  x += i * i;\n\nconst p = [\"Fox\", \"jumped\", \"over\", \"me\"];\nfor (let s of p) {\n  console.log(`Word ${s}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Tag Pattern in Scala.js\nDESCRIPTION: Example showing how to use js.ConstructorTag to implicitly obtain JavaScript constructors, similar to Scala's ClassTag pattern.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-01-25-announcing-scalajs-0.6.6.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\ndef instantiate[C <: js.Any : js.ConstructorTag]: C =\n  js.Dynamic.newInstance(js.constructorTag[C].constructor)().asInstanceOf[C]\n  \nval newEmptyJSArray = instantiate[js.Array[Int]]\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef instantiate[C <: js.Any](implicit tag: js.ConstructorTag[C]): C =\n  js.Dynamic.newInstance(tag.constructor)().asInstanceOf[C]\n  \nval newEmptyJSArray = instantiate[js.Array[Int]](\n    new js.ConstructorTag[C](js.constructorOf[js.Array[Int]]))\n```\n\n----------------------------------------\n\nTITLE: Adding PhantomJS environment sbt plugin\nDESCRIPTION: Add the PhantomJS environment sbt plugin to project/plugins.sbt if using the PhantomJS environment.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M7\")\n```\n\n----------------------------------------\n\nTITLE: Conditional jsDependencies Plugin Configuration\nDESCRIPTION: SBT configuration to conditionally add jsDependencies plugin based on Scala.js version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M8\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Managing jsDependencies Conditionally in Scala\nDESCRIPTION: This Scala snippet demonstrates how to conditionally add dependencies for 'jsDependencies' in the 'build.sbt' file. The snippet adds the 'sbt-jsdependencies' plugin for Scala.js versions not starting with '0.6.'. The 'JSDependenciesPlugin' should always be enabled.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-RC2\"))\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\nenablePlugins(JSDependenciesPlugin)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Definition with Inner Class\nDESCRIPTION: This JavaScript snippet defines a class named OuterClass with an inner class InnerClass.  The constructor of OuterClass initializes the inner class. This showcases a common JavaScript pattern where classes are defined inside objects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass OuterClass {\n  constructor(x) {\n    this.InnerClass = class InnerClass {\n      someMethod() {\n        return x;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js WebAssembly Backend Settings\nDESCRIPTION: Configuration code for enabling the experimental WebAssembly backend in Scala.js and setting up Node.js environment with required WebAssembly features. Includes settings for module type and Node.js arguments.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2024-09-28-announcing-scalajs-1.17.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n// Emit ES modules with the Wasm backend\nscalaJSLinkerConfig := {\n  scalaJSLinkerConfig.value\n    .withExperimentalUseWebAssembly(true) // use the Wasm backend\n    .withModuleKind(ModuleKind.ESModule)  // required by the Wasm backend\n},\n\n// Configure Node.js (at least v22) to support the required Wasm features\njsEnv := {\n  val config = NodeJSEnv.Config()\n    .withArgs(List(\n      \"--experimental-wasm-exnref\", // required\n      \"--experimental-wasm-imported-strings\", // optional (good for performance)\n      \"--turboshaft-wasm\", // optional, but significantly increases stability\n    ))\n  new NodeJSEnv(config)\n},\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inner Class Example\nDESCRIPTION: Example of JavaScript class with inner class definition.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass OuterClass {\n  constructor(x) {\n    this.InnerClass = class InnerClass {\n      someMethod() {\n        return x;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ignoreInvalidDescendants with JSExportDescendentClasses in Scala.js\nDESCRIPTION: Shows how to use the ignoreInvalidDescendants parameter to silently ignore invalid descendent classes for JSExport.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-05-12-announcing-scalajs-0.6.3.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportDescendentClasses(ignoreInvalidDescendants = true)\ntrait Foo\n```\n\n----------------------------------------\n\nTITLE: Defining jQuery AJAX Settings Interface in Scala.js\nDESCRIPTION: Example showing how to define a typed interface for jQuery AJAX settings using @ScalaJSDefined trait in the old style with abstract vals.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-12-21-announcing-scalajs-0.6.14.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@ScalaJSDefined\ntrait JQueryAjaxSettings extends js.Object {\n  val data: js.Object | String | js.Array[Any]\n  val contentType: Boolean | String\n  val crossDomain: Boolean\n  val success: js.Function3[Any, String, JQueryXHR, _]\n  ...\n}\n\ndef ajax(url: String, settings: JQueryAjaxSettings): JQueryXHR = js.native\n```\n\n----------------------------------------\n\nTITLE: Invalid Dynamic Access to JavaScript Global Object\nDESCRIPTION: Shows code that is no longer valid in Scala.js 1.x - dynamically selecting a member of the global scope at runtime.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n```\n\n----------------------------------------\n\nTITLE: Configuring io.js Environment for Scala.js ECMAScript 6 Output\nDESCRIPTION: Shows sbt settings to use io.js with harmony rest parameters for running ECMAScript 6 output from Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-05-12-announcing-scalajs-0.6.3.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\npostLinkJSEnv := NodeJSEnv(executable = \"iojs\", args = Seq(\"--harmony-rest-parameters\")).value\nscalaJSStage := FastOptStage\n```\n\n----------------------------------------\n\nTITLE: Accessing non-existent global variable (throws ReferenceError)\nDESCRIPTION: This snippet demonstrates accessing a non-existent global variable, which in Scala.js 1.0.0-M3 throws a ReferenceError instead of returning undefined.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.globalVarThatDoesNotExist)\n```\n\n----------------------------------------\n\nTITLE: Using @JSExportTopLevel on Objects and Classes After Deprecation\nDESCRIPTION: Updated example showing how to export top-level classes and objects to JavaScript using the new @JSExportTopLevel annotation, which requires explicit naming.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\npackage foo\n\n@JSExportTopLevel(\"foo.Foo\")\nobject Foo\n\n@JSExportTopLevel(\"Bar\")\nclass Bar\n```\n\n----------------------------------------\n\nTITLE: JavaScript Equivalent of Anonymous Scala.js-defined JS Classes\nDESCRIPTION: Shows the JavaScript code that corresponds to instantiating an anonymous Scala.js-defined JS class after the implementation of proposal #2009. Instead of creating a new class, properties are directly assigned to the object.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-04-30-announcing-scalajs-0.6.9.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = new Object(); // the superclass js.Object of Point\np.x = 5;\np.y = 10;\n```\n\n----------------------------------------\n\nTITLE: Removing sjsDefinedByDefault scalac option\nDESCRIPTION: Remove the -P:scalajs:sjsDefinedByDefault scalac option as it is always enabled in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions += \"-P:scalajs:sjsDefinedByDefault\"\n```\n\n----------------------------------------\n\nTITLE: Modern Scala.js Class Definition\nDESCRIPTION: Example of modern Scala.js 1.x style class definition without @ScalaJSDefined annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-04-announcing-scalajs-0.6.17.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nclass Foo extends js.Object {\n  def bar(x: Int): Int = x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Artifact Path Configuration for Scala.js Before 1.3.0\nDESCRIPTION: This snippet shows how to set the artifact path for Scala.js projects using older versions (1.2.x and earlier), which utilized a different method for output configuration before 'OutputPatterns' was introduced. This is essential for ensuring compatibility and proper file naming in builds prior to Scala.js 1.3.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nartifactPath in (proj, Compile, fastOptJS) :=\n  (crossTarget in (proj, Compile)).value / \"myproject.mjs\"\n\nartifactPath in (proj, Test, fastOptJS) :=\n  (crossTarget in (proj, Test)).value / \"myproject-test.mjs\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependencies for JS Environments\nDESCRIPTION: This snippet demonstrates how to add conditional dependencies based on the Scala.js version. It uses `scalaJSVersion` to determine whether to include dependencies for `scalajs-env-jsdom-nodejs` or `scalajs-env-phantomjs`, only including them for versions that are not 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_27\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\nlibraryDependencies ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-M3\")\n}\n\n// For PhantomJS\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M3\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSDependenciesPlugin\nDESCRIPTION: This snippet demonstrates how to enable the `JSDependenciesPlugin` for projects. This is required even when conditionally including the `sbt-jsdependencies` plugin, as Scala.js 0.6.20 and later define a no-op plugin to allow for this scenario.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_29\n\nLANGUAGE: scala\nCODE:\n```\nenablePlugins(JSDependenciesPlugin)\n```\n\n----------------------------------------\n\nTITLE: Extra Dependencies for JS Environments - Scala\nDESCRIPTION: This snippet conditionally adds dependencies for JS environments based on the Scala.js version. It checks the version and adds 'scalajs-env-jsdom-nodejs' for versions greater than 0.6.x, and similarly for PhantomJS.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\nlibraryDependencies ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-M7\")\n}\n\n// For PhantomJS\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M7\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Managing jsDependencies for Cross-Builds\nDESCRIPTION: Outlines how to handle `sbt-jsdependencies` without source incompatibility between Scala.js 0.6.x and 1.x. Involves creating a fake plugin for backward compatibility. Designed for sbt build configuration files.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_19\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M1\"))\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\npackage jsdependenciescompat\n\nimport sbt._\n\nobject FakeJSDependenciesPlugin extends AutoPlugin\n\nobject FakeJSDependenciesPluginProvider extends AutoPlugin {\n  import Compat._\n\n  object autoImport {\n    import org.scalajs._\n\n    val JSDependenciesPluginCompat = jsdependencies.sbtplugin.JSDependenciesPlugin\n  }\n\n  object Compat {\n    object jsdependencies {\n      object sbtplugin {\n        val JSDependenciesPlugin = FakeJSDependenciesPlugin\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Require Example\nDESCRIPTION: Example of using dynamic require in Scala.js 1.x to access Node.js features.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nval pathToSomeAsset = \"assets/logo.png\"\nval someAsset = js.Dynamic.global.require(pathToSomeAsset)\n```\n\n----------------------------------------\n\nTITLE: Accessing Source Map Files for Scala.js Compiled Code\nDESCRIPTION: Demonstrates how to properly access the source map file associated with fastOptJS and fullOptJS outputs using the new cleaner approach introduced in this release.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-07-27-announcing-scalajs-0.6.11.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nval fastOptAttrFile = fastOptJS.value\nval fastOptFile = fastOptAttrFile.data // the .js file\nval fastOptSourceMapFile = fastOptAttrFile.get(scalaJSSourceMap).get // the .map file\n```\n\n----------------------------------------\n\nTITLE: Invalid dynamic access to global scope (no longer supported)\nDESCRIPTION: This snippet demonstrates accessing a member of the global scope with a dynamically computed name, which is no longer supported in Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n```\n\n----------------------------------------\n\nTITLE: Using new.target in JavaScript\nDESCRIPTION: JavaScript example showing how the metaproperty new.target is used in a parent class constructor to determine which class is being instantiated.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-12-10-announcing-scalajs-1.8.0.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Parent {\n  constructor() {\n    console.log(\"Instantiating a \" + new.target.name);\n  }\n}\n\nclass Child extends Parent {\n  constructor() {\n    super();\n  }\n}\n\nnew Parent() // prints \"Instantiating a Parent\"\nnew Child()  // prints \"Instantiating a Child\"\n```\n\n----------------------------------------\n\nTITLE: Global Scope Access Examples\nDESCRIPTION: Examples demonstrating valid and invalid ways to access the JavaScript global scope in Scala.js 1.x\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName)) // Invalid\n\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`) // Invalid\n```\n\n----------------------------------------\n\nTITLE: Defining js.UndefOr as Type Alias in Scala.js 1.x\nDESCRIPTION: js.UndefOr[A] is now defined as a simple type alias for A | Unit in Scala.js 1.x. This change may impact type inference in subtle ways.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js with jsdom environment dependency\nDESCRIPTION: Add library dependency for Node.js with jsdom environment to project/plugins.sbt if using that environment.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-M7\"\n```\n\n----------------------------------------\n\nTITLE: Managing Scores with JavaScript Object\nDESCRIPTION: This JavaScript snippet showcases how to manage players' scores using an object, with functions to add scores, find the best score, and calculate the average score.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part2.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst scores = {};\n\nfunction addScore(player, score) {\n  if (scores[player] === undefined)\n    scores[player] = [];\n  scores[player].push(score);\n}\n\nfunction bestScore() {\n  let bestScore = 0;\n  let bestPlayer = \"\";\n  for (let player in scores) {\n    const max = scores[player].reduce((a, score) =>\n      Math.max(score, a)\n    );\n    if (max > bestScore) {\n      bestScore = max;\n      bestPlayer = player;\n    }\n  }\n  return [bestPlayer, bestScore];\n}\n\nfunction averageScore() {\n  let sum = 0;\n  let count = 0;\n  for (let player in scores) {\n    for (let score of scores[player]) {\n      sum += score;\n      count++;\n    }\n  }\n  if (count == 0)\n    return 0;\n  else\n    return Math.round(sum / count);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Float Semantics in Scala.js\nDESCRIPTION: This snippet shows how to enable strict float semantics in Scala.js 0.6.x using an sbt setting. When enabled, all Float operations will behave as they do on the JVM with appropriate precision truncation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-01-announcing-scalajs-0.6.0-M1.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withStrictFloats(true) }\n```\n\n----------------------------------------\n\nTITLE: Enabling JSDependenciesPlugin\nDESCRIPTION: SBT configuration to enable JSDependenciesPlugin for all Scala.js versions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\nenablePlugins(JSDependenciesPlugin)\n```\n\n----------------------------------------\n\nTITLE: Native JavaScript Function Import in Scala.js\nDESCRIPTION: Example demonstrating how to import JavaScript module functions using @js.native and @JSImport annotations in a Scala object.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-05-18-announcing-scalajs-1.1.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nobject QueryString {\n  @js.native\n  @JSImport(\"querystring\", \"stringify\")\n  def stringify(obj: js.Dictionary[String], sep: String = \"&\",\n      eq: String = \"=\"): String = js.native\n}\n\nobject OS {\n  @js.native\n  @JSImport(\"os\", \"EOL\")\n  val EOL: String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Scala.js sbt Task Changes\nDESCRIPTION: Changes to the fastOptJS/fullOptJS tasks to support module linking. These tasks now depend on fastLinkJS/fullLinkJS respectively and require a single public module output.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-10-16-announcing-scalajs-1.3.0.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nfastOptJS / fullOptJS // Old tasks\nfastLinkJS / fullLinkJS // New tasks returning Report\nmoduleID=\"main\" // Module identifier for run/test tasks\n```\n\n----------------------------------------\n\nTITLE: Inner Class Definition in JavaScript\nDESCRIPTION: Example of defining an inner class within a JavaScript class constructor that has access to constructor parameters.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass OuterClass {\n  constructor(x) {\n    this.InnerClass = class InnerClass {\n      someMethod() {\n        return x;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Native Method\nDESCRIPTION: Corresponding JavaScript implementation showing how default parameter handling works natively in JavaScript using undefined check.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-10-07-announcing-scalajs-1.7.1.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = {\n  bar(x, y) {\n    return x + (y === undefined ? 1 : y);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Redundant JSExport Annotation Example\nDESCRIPTION: Example demonstrating redundant @JSExport annotations that will trigger a warning in Scala.js 0.6.29. The code shows duplicate exports that should be avoided.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-09-18-announcing-scalajs-0.6.29.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nclass A {\n  @JSExport\n  @JSExport(\"a\")\n  def a = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Import for Global Scope\nDESCRIPTION: Example of how to use a renaming import as an alternative to storing the global scope in a val. This pattern is the recommended way to create shorter references to the global scope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{global => g}\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs-crossproject plugin for cross-platform projects\nDESCRIPTION: This snippet shows how to add the SBT plugin for cross-platform (JVM/JS) projects when upgrading to Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.portable-scala\" % \"sbt-scalajs-crossproject\" % \"0.3.1\")\n```\n\n----------------------------------------\n\nTITLE: Renaming import for global scope\nDESCRIPTION: Demonstrates the recommended way to alias the global scope object using a renaming import in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{global => g}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMAScript 6 Output Mode in Scala.js\nDESCRIPTION: Demonstrates how to set the Scala.js output mode to ECMAScript 6 using an sbt setting.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-05-12-announcing-scalajs-0.6.3.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSOutputMode := org.scalajs.core.tools.javascript.OutputMode.ECMAScript6\n```\n\n----------------------------------------\n\nTITLE: Conditional Scala Compiler Options for Scala.js Versions\nDESCRIPTION: Demonstrates how to conditionally apply the -P:scalajs:sjsDefinedByDefault compiler option for Scala.js 0.6.x versions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_18\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\n  else Nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding jsDependencies sbt plugin\nDESCRIPTION: Add the jsDependencies sbt plugin to project/plugins.sbt if using jsDependencies functionality.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M7\")\n```\n\n----------------------------------------\n\nTITLE: Obfuscating Class Names in Scala.js 0.6.x\nDESCRIPTION: This code demonstrates how to obfuscate or rename class names in the emitted .js file. In this example, it empties out all class names in the 'my.company' package, affecting values returned by getClass.getName.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-23-announcing-scalajs-0.6.0-RC2.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= (_.withRuntimeClassName { linkedClass =>\n  val fullName = linkedClass.fullName\n  if (fullName.startsWith(\"my.company.\")) \"\"\n  else fullName\n})\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Configuration Objects in Scala 2.11\nDESCRIPTION: Example showing how to use the configuration object pattern with explicit type annotations in Scala 2.11.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-12-21-announcing-scalajs-0.6.14.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\njQuery.ajax(someURL, new JQueryAjaxSettings {\n  override val crossDomain: js.UndefOr[Boolean] = true\n  override val success: js.UndefOr[js.Function3[Any, String, JQueryXHR, _]] = {\n    js.defined { (data: Any, textStatus: String, xhr: JQueryXHR) =>\n      println(\"Status: \" + textStatus)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Upgrading Rhino Dependency in Scala.js 0.6.24\nDESCRIPTION: Shows the new Rhino dependency version used in Scala.js 0.6.24. This change was made to address issues with sbt-web and sbt-js-engine.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-06-29-announcing-scalajs-0.6.24.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n\"org.mozilla\" % \"rhino\" % \"1.7.6\"\n```\n\n----------------------------------------\n\nTITLE: Configuring scalajs-stubs Dependency for Scala.js 1.0.0\nDESCRIPTION: Updates the version of scalajs-stubs to 1.0.0 when upgrading to Scala.js 1.0.0-RC1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n// Change scalajs-stubs version to \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Removing Firefox Performance Workaround in Scala.js 1.3.1\nDESCRIPTION: This snippet shows how to remove a previously necessary configuration to avoid poor performance on Firefox. With Scala.js 1.3.1, this workaround is no longer needed.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-11-16-announcing-scalajs-1.3.1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n// This was necessary before 1.3.1 to avoid bad performance on Firefox\nscalaJSLinkerConfig ~= { _.withESFeatures(_.withUseECMAScript2015(false)) }\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js Output Mode Setting\nDESCRIPTION: Deprecated sbt setting for configuring Scala.js output mode to ECMAScript6 Strong Mode, which now behaves the same as regular ECMAScript6 mode.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-03-18-announcing-scalajs-0.6.8.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSOutputMode := OutputMode.ECMAScript6StrongMode\n```\n\n----------------------------------------\n\nTITLE: Suppressing Export Deprecation Warnings in Scala.js\nDESCRIPTION: Configuration option to silence the deprecation warnings for top-level exports with namespaces in Scala.js 0.6.x series.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions += \"-P:scalajs:suppressExportDeprecations\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Mode with Linker Config (Deprecated Approach)\nDESCRIPTION: Shows the alternative deprecated approach for setting ECMAScript2015 as the output mode using the linker configuration API.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-05-22-announcing-scalajs-0.6.23.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.core.tools.linker.standard._\nscalaJSLinkerConfig ~= { _.withOutputMode(OutputMode.ECMAScript2015) }\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Dependencies for PhantomJS\nDESCRIPTION: Includes conditional logic to add the sbt-scalajs-env-phantomjs plugin only if the Scala.js version does not start with '0.6.' Additional handling is implemented for adding plugins correctly.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_27\n\nLANGUAGE: scala\nCODE:\n```\n// For PhantomJS\\\n{\\\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\\\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-RC1\"))\\\n}\n```\n\n----------------------------------------\n\nTITLE: Scala.js Native Inner Class Declaration\nDESCRIPTION: Scala.js facade type definition for JavaScript inner classes using @js.native annotations.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Code Size at the Cost of Firefox Performance in Scala.js\nDESCRIPTION: This configuration allows trading Firefox performance for smaller output size in Scala.js projects that don't target web or SpiderMonkey-based environments.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-11-16-announcing-scalajs-1.3.1.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n// Trade away decent Firefox performance for a smaller output\nscalaJSLinkerConfig ~= { _.withESFeatures(_.withAvoidClasses(false)) }\n```\n\n----------------------------------------\n\nTITLE: Launching Scala.js with Dynamic Versioning Support\nDESCRIPTION: Using an environment variable to set the Scala.js version dynamically in sbt, which allows for flexible project configuration and dependency management based on version changes.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_23\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.24\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: JSExport Annotation Usage in Scala.js\nDESCRIPTION: Shows how the @JSExport annotation exports a class to a fully qualified name in Scala.js 0.6.x, changing from previous behavior.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-05-announcing-scalajs-0.6.0-M2.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\npackage babar\n\n@JSExport\nclass Foo\n```\n\n----------------------------------------\n\nTITLE: Exporting Top-Level Functions (Legacy Style)\nDESCRIPTION: Legacy approach to exporting functions to JavaScript requiring object access.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-12-21-announcing-scalajs-0.6.14.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n@JSExport\nobject Main {\n  @JSExport\n  def main(): Unit = { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Float Semantics in Scala.js\nDESCRIPTION: Code snippet showing how to revert to non-strict float semantics in Scala.js linker configuration. This option is deprecated and will be removed in a future version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-02-14-announcing-scalajs-1.9.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= { _.withSemantics(_.withStrictFloats(false)) }\n```\n\n----------------------------------------\n\nTITLE: Using js.new.target in Scala.js\nDESCRIPTION: Scala.js example demonstrating the new js.new.target primitive introduced in Scala.js 1.8.0, equivalent to JavaScript's new.target metaproperty.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-12-10-announcing-scalajs-1.8.0.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nclass Parent extends js.Object {\n  println(\"Instantiating a \" + js.`new`.target.name)\n}\n\nclass Child extends Parent\n\nnew Parent()\nnew Child()\n```\n\n----------------------------------------\n\nTITLE: Invalid global scope object assignment in Scala.js\nDESCRIPTION: Examples of invalid ways to store the global scope object in a separate val in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n```\n\nLANGUAGE: scala\nCODE:\n```\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js Stubs for JVM Compilation\nDESCRIPTION: This snippet demonstrates how to add the scalajs-stubs library as a 'provided' dependency for the JVM project. This allows Scala.js annotations to compile on the JVM side without runtime inclusion.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/cross-build.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n  .jvmSettings(\n    ...\n    libraryDependencies += \"org.scala-js\" %% \"scalajs-stubs\" % \"1.1.0\" % \"provided\",\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit for Scala.js Cross Project\nDESCRIPTION: Configuration example showing how to enable JUnit testing support in a Scala.js cross project, with separate configurations for JS and JVM targets.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-01-25-announcing-scalajs-0.6.6.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nlazy val myCrossProject = crossProject.\n  jsConfigure(_.enablePlugins(ScalaJSJUnitPlugin)).\n  jvmSettings(\n    libraryDependencies +=\n      \"com.novocode\" % \"junit-interface\" % \"0.9\" % \"test\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional JS Environment Dependencies\nDESCRIPTION: SBT configuration to conditionally add dependencies for Node.js with jsdom and PhantomJS based on Scala.js version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\nlibraryDependencies ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-M8\")\n}\n\n// For PhantomJS\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M8\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Global Scope Storage Examples\nDESCRIPTION: Examples showing invalid storage of global scope objects and the correct way using imports\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global // Invalid\n\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global) // Invalid\n\nimport js.Dynamic.{global => g} // Valid alternative\n```\n\n----------------------------------------\n\nTITLE: Alternative Regex Without Multiline Flag for UNIX Newlines\nDESCRIPTION: This snippet shows an alternative regular expression that achieves similar functionality to the previous example without using the multiline flag, suitable for UNIX newlines only.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/regular-expressions.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nval regex2 = \"\"\"(?:^|\\n)(foo|bar|)(?=\\n|$)\"\"\".r\nfor (m <- regex2.findAllMatchIn(input))\n  println(m.group(1)) // `group(1)` instead of `matched`\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Float Semantics in Scala.js 0.6.x\nDESCRIPTION: This snippet shows how to configure Scala.js to use strict float semantics, guaranteeing that all Float operations behave as on the JVM. This can impact performance on VMs without Math.fround support.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-23-announcing-scalajs-0.6.0-RC2.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withStrictFloats(true) }\n```\n\n----------------------------------------\n\nTITLE: Importing ExecutionContext.global (Deprecated Pattern)\nDESCRIPTION: Example showing the now-deprecated imports for accessing the default ExecutionContext in Scala.js, which will trigger compiler warnings in Scala.js 1.8.0 due to fairness issues with JavaScript Promises.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-12-10-announcing-scalajs-1.8.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.concurrent.ExecutionContext.global\nimport scala.concurrent.ExecutionContext.Implicits.global\n```\n\n----------------------------------------\n\nTITLE: JSApp Object Definition in Scala.js 0.6.x\nDESCRIPTION: Example of an object extending js.JSApp in Scala.js 0.6.x, which automatically exports the object to JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\npackage bar\n\nimport scala.scalajs.js\n\nobject Foo extends js.JSApp {\n  def main(): Unit = {\n    println(\"Hello world\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSExport Behavior Change in Scala.js 0.6.x\nDESCRIPTION: Example demonstrating the change in default export behavior for @JSExport in Scala.js 0.6.x, where classes are now exported with their fully qualified names.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-23-announcing-scalajs-0.6.0-RC2.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage babar\n\n@JSExport\nclass Foo\n```\n\n----------------------------------------\n\nTITLE: Invalid passing of global scope object as a parameter\nDESCRIPTION: This snippet shows that passing the global scope object as a parameter is not allowed in Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Starting Build with Specific Scala.js Version in Bash\nDESCRIPTION: This Bash command is used to start up a build with the specified Scala.js version set by the 'SCALAJS_VERSION' environment variable. It is executed in the command line interface. No additional dependencies are required.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ SCALAJS_VERSION=1.0.0-RC2 sbt\n```\n\n----------------------------------------\n\nTITLE: Broken idiom for testing global variable existence\nDESCRIPTION: This snippet shows the previous idiom for testing global variable existence, which is now broken in Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\nif (js.isUndefined(js.Dynamic.global.Promise)) {\n  // Promises are not supported\n} else {\n  // Promises are supported\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling sbt-crossproject for Old Scala.js Versions\nDESCRIPTION: Demonstrates enabling sbt-crossproject in Scala.js 0.6.x to support cross-compilation with Scala Native without conflicts in Scala.js 1.x. Uses sbt import for cross-compatibility.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_21\n\nLANGUAGE: scala\nCODE:\n```\n// For sbt-crossproject support even with Scala.js 0.6.x\n{\n  if (scalaJSVersion.startsWith(\"0.6.\"))\n    Seq(addSbtPlugin(\"org.scala-native\" % \"sbt-scalajs-crossproject\" % \"0.2.0\"))\n  else\n    Nil\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\n// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)\nimport sbtcrossproject.{crossProject, CrossType}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scala.js Optimizer in SBT\nDESCRIPTION: This snippet shows how to disable the new Scala.js optimizer in SBT settings. The optimizer runs as part of the fastOptJS task and can be turned off if issues are encountered.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-07-30-announcing-scalajs-0.5.3.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nScalaJSKeys.inliningMode := scala.scalajs.sbtplugin.InliningMode.Off\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js sbt plugin dependency\nDESCRIPTION: Add the Scala.js sbt plugin dependency to project/plugins.sbt to upgrade to version 1.0.0-M8.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-M8\")\n```\n\n----------------------------------------\n\nTITLE: Printing Unicode Character in Scala.js\nDESCRIPTION: Demonstrates a bug fix for printing the Unicode bell character, which previously rendered incorrectly as the letter 'a'.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-06-announcing-scalajs-0.6.21.md#2025-04-20_snippet_0\n\nLANGUAGE: Scala.js\nCODE:\n```\nprintln(\"\\u0007\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Arithmetic Bug in Node.js/V8\nDESCRIPTION: This snippet shows a Node.js REPL session that incorrectly compares Int.MaxValue with Int.MinValue, illustrating a bug in Node.js versions prior to 0.10.29.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/community/halloffame.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$ node\n> 2147483647 > -2147483648\nfalse\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Array to Scala Array in Scala.js\nDESCRIPTION: Demonstrates how to convert a JavaScript Array to a Scala Array using the toArray method in Scala.js 0.5.5. This replaces the deprecated implicit conversion.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-09-18-announcing-scalajs-0.5.5.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nval jsArr = js.Array(1, 2, 3)\nval scArr = jsArr.toArray\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js Version in SBT\nDESCRIPTION: Example showing how to specify the Scala.js version in sbt project configuration. The version number needs to be updated in project/plugins.sbt for upgrading to 0.5.6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-11-19-announcing-scalajs-0.5.6.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nproject/plugins.sbt\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Scala.js Website\nDESCRIPTION: Command to build and run the website using Docker Compose. The website will be available at http://localhost:4000.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Invalid Assignment of Global Scope to Val\nDESCRIPTION: Example showing that the global scope cannot be stored in a separate val in Scala.js 1.0.0-M5. This is not allowed because it would bypass the static checking of member names.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n```\n\n----------------------------------------\n\nTITLE: Invalid Dynamic Lookup in JavaScript Global Scope\nDESCRIPTION: Example of invalid dynamic lookup in the JavaScript global scope in Scala.js 1.0.0-M5. Dynamic lookups where the member name is only known at runtime are not supported.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Greeter Class Generator\nDESCRIPTION: Example of creating dynamic JavaScript classes with configurable behavior using nested non-native JS classes in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_22\n\nLANGUAGE: scala\nCODE:\n```\ndef makeGreeter(greetingFormat: String): js.Dynamic = {\n  class Greeter extends js.Object {\n    def greet(name: String): String =\n      println(greetingFormat.format(name))\n  }\n  js.constructorOf[Greeter]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Custom Version of Scala.js\nDESCRIPTION: Shows how to dynamically load a custom version of Scala.js using environment variables in an sbt setup. Dependencies are sbt and Scala.js plugin. Sets a custom Scala.js version and starts sbt with it.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.18\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: Inner Class Usage in JavaScript\nDESCRIPTION: Shows how to instantiate and use inner classes defined within a JavaScript class.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst outerObject = new OuterClass(42);\nconst innerObject = new outerObject.InnerClass();\nconsole.log(innerObject.someMethod()); // prints 42\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js Project with Integration Tests\nDESCRIPTION: Configuration for adding integration tests to a Scala.js project using sbt. Sets up the IntegrationTest configuration with necessary Scala.js-specific settings.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nlazy val myProject = project.in(file(\".\")).\n  enablePlugins(ScalaJSPlugin).\n  // add the `it` configuration\n  configs(IntegrationTest).\n  // add `it` tasks\n  settings(Defaults.itSettings: _*).\n  // add Scala.js-specific settings and tasks to the `it` configuration\n  settings(inConfig(IntegrationTest)(ScalaJSPlugin.testConfigSettings): _*).\n  ...\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js 1.0.0-RC1 Plugin to SBT Project\nDESCRIPTION: Adds the Scala.js plugin to your SBT build by specifying the 1.0.0-RC1 version in project/plugins.sbt.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-RC1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring io.js Environment for Scala.js Strong Mode Output\nDESCRIPTION: Shows sbt settings to use io.js with harmony rest parameters and strong mode for running Strong Mode output from Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-05-12-announcing-scalajs-0.6.3.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\npostLinkJSEnv := NodeJSEnv(executable = \"iojs\", args = Seq(\"--harmony-rest-parameters\", \"--strong-mode\")).value\nscalaJSStage := FastOptStage\n```\n\n----------------------------------------\n\nTITLE: Configuring NullPointer Exception Behavior in Scala.js\nDESCRIPTION: Configuration snippet to disable NPE checks in fastLink mode using scalaJSLinkerConfig settings. This can help avoid performance impacts in development builds.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2023-01-26-announcing-scalajs-1.13.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= {\n  import org.scalajs.linker.interface.CheckedBehavior\n  _.withSemantics(_\n    .withNullPointers(CheckedBehavior.Unchecked)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of js.UndefOr as Type Alias in 1.0.0-M5\nDESCRIPTION: Example showing how js.UndefOr is now defined as a simple type alias for A | Unit in Scala.js 1.0.0-M5, rather than as its own type as in 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Float Semantics in Scala.js\nDESCRIPTION: Configuration snippet for enabling strict float semantics in Scala.js, which ensures Float operations behave as they do on the JVM. This setting may impact performance on VMs without Math.fround support.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-22-announcing-scalajs-0.6.0-M3.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withStrictFloats(true) }\n```\n\n----------------------------------------\n\nTITLE: UndefOr Type Alias Definition\nDESCRIPTION: Definition of js.UndefOr as a type alias for union type in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Broken Test for Global Variable Existence (0.6.x Style)\nDESCRIPTION: Example of a pattern for testing global variable existence that worked in Scala.js 0.6.x but is broken in 1.0.0-M5 because it throws a ReferenceError instead of returning undefined.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nif (js.isUndefined(js.Dynamic.global.Promise)) {\n  // Promises are not supported\n} else {\n  // Promises are supported\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDependenciesPlugin for Cross Projects\nDESCRIPTION: Configuration to enable JavaScript dependencies in cross projects (projects targeting both JVM and JS). This applies the plugin only to the JavaScript part of the cross project.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n.jsConfigure(_.enablePlugins(JSDependenciesPlugin))\n```\n\n----------------------------------------\n\nTITLE: Adding PhantomJS environment plugin\nDESCRIPTION: This snippet shows how to add the PhantomJS environment plugin when upgrading to Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M3\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Typed Array from Direct Buffer in Scala.js\nDESCRIPTION: Shows how to use TypedArrayBufferOps to get the underlying ArrayBuffer, DataView, and TypedArray from a direct buffer in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-03-03-announcing-scalajs-0.6.1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nTypedArrayBufferOps\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Split Style in Scala.js Build\nDESCRIPTION: Shows how to configure the module split style in the Scala.js build. This affects how the linker generates internal modules based on the dependency graph of the code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/module.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.linker.interface.ModuleSplitStyle\nscalaJSLinkerConfig ~= (_.withModuleSplitStyle(ModuleSplitStyle.SmallestModules))\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js sbt plugin dependency\nDESCRIPTION: Add the Scala.js sbt plugin dependency to project/plugins.sbt for version 1.0.0-M7.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-M7\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid JSExportDescendentClasses in Scala.js\nDESCRIPTION: Illustrates an invalid use of @JSExportDescendentClasses that would not compile due to an inner class.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-05-12-announcing-scalajs-0.6.3.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportDescendentClasses\ntrait Foo\n\nobject Bar {\n  class InvalidExport extends Foo\n}\n```\n\n----------------------------------------\n\nTITLE: Global Scope Import Renaming - Valid Example\nDESCRIPTION: A valid way to create a renamed import for the global scope, which is a recommended alternative to storing the global scope in a variable.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{global => g}\n```\n\n----------------------------------------\n\nTITLE: Enabling Compliant NullPointer Exception Behavior\nDESCRIPTION: Configuration to enable JVM-compliant NPE behavior in both fastLink and fullLink modes, though with potential performance impact.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2023-01-26-announcing-scalajs-1.13.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= {\n  import org.scalajs.linker.interface.CheckedBehavior\n  _.withSemantics(_\n    .withNullPointers(CheckedBehavior.Compliant)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Class Name Obfuscation in Scala.js Projects\nDESCRIPTION: Configuration to obfuscate or rename class names in the emitted JavaScript file. This example removes class names in the 'my.company' package, affecting values returned by getClass.getName or classOf[C].getName.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-12-announcing-scalajs-0.6.0-RC1.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= (_.withRuntimeClassName { linkedClass =>\n  val fullName = linkedClass.fullName\n  if (fullName.startsWith(\"my.company.\")) \"\"\n  else fullName\n})\n```\n\n----------------------------------------\n\nTITLE: Scala Version Constraints\nDESCRIPTION: Example showing unsupported Scala versions in build configuration.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-02-25-announcing-scalajs-1.0.0.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nscalaVersion := \"2.10.x\" // for any x\nscalaVersion := \"2.11.x\" // for 0 <= x <= 11\nscalaVersion := \"2.12.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding Required Import for %%% Operator in SBT Scala Files\nDESCRIPTION: Shows the new import required when using the %%% dependency operator in .scala files within an SBT build. This import is now necessary for cross-building projects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-05-22-announcing-scalajs-0.6.23.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport org.portablescala.sbtplatformdeps.PlatformDepsPlugin.autoImport._\n```\n\n----------------------------------------\n\nTITLE: Fallback Configuration for Rhino Dependency in Scala.js\nDESCRIPTION: Provides a configuration to fall back to the old Rhino dependency if the new version causes build issues. This should be added to project/plugins.sbt if needed.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-06-29-announcing-scalajs-0.6.24.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nexcludeDependencies += \"org.mozilla\" % \"rhino\"\nlibraryDependencies += \"io.apigee\" % \"rhino\" % \"1.7R5pre4\"\n```\n\n----------------------------------------\n\nTITLE: Scala.js Plugin Configuration\nDESCRIPTION: Shows how to configure the Scala.js sbt plugin version dynamically for cross-building between 0.6.x and 1.x versions.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_23\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.24\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: Fixing JSName Behavior with Property Assignment in Scala.js\nDESCRIPTION: Example showing a breaking change in how @JSName annotations are handled for property assignments in Scala.js 0.6.4. Previously the code would incorrectly translate to 'b' instead of 'b_=' in the JavaScript output.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-07-03-announcing-scalajs-0.6.4.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nobject JS extends js.Object {\n  @JSName(\"b_=\")\n  def a_=(x: Int): Unit = js.native\n}\n\nJS.a = 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Old incorrect output:\nJS[\"b\"] = 1;\n\n// New correct output:\nJS[\"b_=\"] = 1;\n```\n\n----------------------------------------\n\nTITLE: Renaming Import for Global Scope\nDESCRIPTION: Shows how to use a renaming import as a workaround for not being able to store the global scope in a variable in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\nimport js.Dynamic.{global => g}\n```\n\n----------------------------------------\n\nTITLE: Testing Global Variable Existence in Scala.js\nDESCRIPTION: Shows how to test for the existence of a global variable in Scala.js using js.typeOf.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nif (js.typeOf(js.Dynamic.global.Promise) != \"undefined\")\n```\n\n----------------------------------------\n\nTITLE: Adding PhantomJS Environment Plugin\nDESCRIPTION: Adds the PhantomJS environment plugin required for projects that use PhantomJS in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-M6\")\n```\n\n----------------------------------------\n\nTITLE: Enabling ClassCastException Checks in Scala.js\nDESCRIPTION: SBT setting to enable ClassCastException checks in Scala.js at runtime, at the expense of performance. This applies to the entire application including dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-23-announcing-scalajs-0.6.0-RC2.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withAsInstanceOfs(org.scalajs.core.tools.sem.CheckedBehavior.Compliant) }\n```\n\n----------------------------------------\n\nTITLE: Accessing the JavaScript Global Scope - Invalid Runtime Name Lookup\nDESCRIPTION: An invalid example that will cause a compile error in Scala.js 1.0.0-M1. Dynamic lookups in the global scope using runtime-known names are not allowed.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party JDK Extension for Scala.js\nDESCRIPTION: This snippet shows how to add a third-party library that provides JDK extensions for Scala.js. In this case, it's adding support for java.util.Locale through the scala-java-locales library.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"io.github.cquiroz\" %%% \"scala-java-locales\" % \"0.5.2-cldr31\"\n```\n\n----------------------------------------\n\nTITLE: Using js.Dynamic.literal for Object Literals in Previous Versions\nDESCRIPTION: Shows the previous approach to creating JavaScript object literals in Scala.js before version 0.6.5, using js.Dynamic.literal with explicit type casting.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\nval obj = js.Dynamic.literal(\n    x = 5,\n    y = 10\n).asInstanceOf[Position]\n```\n\n----------------------------------------\n\nTITLE: Fixing Inner Classes and Objects in JS Traits with @js.native (Scala)\nDESCRIPTION: Corrected version of the previous example, using @js.native annotations to make it compatible with Scala.js 1.5.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-02-12-announcing-scalajs-1.5.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\ntrait Outer extends js.Object {\n  @js.native\n  object InnerObject extends js.Object\n\n  @js.native\n  class InnerClass extends js.Object\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Batch Mode for Scala.js Optimizer in SBT\nDESCRIPTION: This code demonstrates how to force the Scala.js optimizer to run in batch mode (non-incremental) on every run using SBT settings.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-07-30-announcing-scalajs-0.5.3.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nScalaJSKeys.inliningMode := scala.scalajs.sbtplugin.InliningMode.Batch\n```\n\n----------------------------------------\n\nTITLE: Cross-Compilation Plugin Configuration\nDESCRIPTION: SBT plugin configuration for cross-compilation support between Scala.js 0.6.x and 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M1\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding JavaScript Object Methods in Scala.js\nDESCRIPTION: Example showing incorrect overriding of hashCode and equals methods in a JavaScript class, which generates compiler warnings as these overrides do not affect the actual behavior.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-05-18-announcing-scalajs-1.1.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nclass A extends js.Object {\n  override def hashCode(): Int = 1\n  override def equals(obj: Any): Boolean = false\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog in Markdown\nDESCRIPTION: This snippet showcases the structure and formatting of a changelog using Markdown. It includes version numbers, dates, features, and bug fixes for each release.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/changelog.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Changelog\n\nPublic releases are all root nodes.  \nIncremental version bumps that were not released publicly are nested where appropriate.\n\nP.S. If there is a standard (popular) changelog format, please let me know.\n\n- **0.3.0 : 2013.02.24**\n    - **Features**\n    - Update twitter bootstrap to 2.2.2. Add responsiveness and update design a bit.\n    - @techotaku fixes custom tagline support (finally made it in!)\n    - @opie4624 adds ability to set tags from the command-line.\n    - @lax adds support for RSS feed. Adds rss and atom html links for discovery.\n    - Small typo fixes.\n\n    - **Bug Fixes**\n    - @xuhdev fixes theme:install bug which does not overwrite theme even if saying 'yes'.\n\n- **0.2.13 : 2012.03.24**   \n    - **Features**\n    - 0.2.13 : @mjpieters Updates pages_list helper to only show pages having a title.\n    - 0.2.12 : @sway recommends showing page tagline only if tagline is set.\n    - 0.2.11 : @LukasKnuth adds 'description' meta-data field to post/page scaffold.\n\n    - **Bug Fixes**\n    - 0.2.10 : @koriroys fixes typo in atom feed\n\n- **0.2.9 : 2012.03.01**   \n    - **Bug Fixes**\n    - 0.2.9 : @alishutc Fixes the error on post creation if date was not specified.\n\n- **0.2.8 : 2012.03.01**   \n    - **Features**\n    - 0.2.8 : @metalelf0 Added option to specify a custom date when creating post.\n    - 0.2.7 : @daz Updates twitter theme framework to use 2.x while still maintaining core layout. #50\n              @philips and @treggats add support for page.tagline metadata. #31 & #48\n    - 0.2.6 : @koomar Adds Mixpanel analytics provider. #49\n    - 0.2.5 : @nolith Adds ability to load custom rake scripts. #33\n    - 0.2.4 : @tommyblue Updated disqus comments provider to be compatible with posts imported from Wordpress. #47\n\n    - **Bug Fixes**\n    - 0.2.3 : @3martini Adds Windows MSYS Support and error checks for git system calls. #40\n    - 0.2.2 : @sstar Resolved an issue preventing disabling comments for individual pages #44\n    - 0.2.1 : Resolve incorrect HOME\\_PATH/BASE\\_PATH settings\n\n- **0.2.0 : 2012.02.01**   \n  Features\n    - Add Theme Packages v 0.1.0\n      All themes should be tracked and maintained outside of JB core.\n      Themes get \"installed\" via the Theme Installer.\n      Theme Packages versioning is done separately from JB core with\n      the main intent being to make sure theme versions are compatible with the given installer.\n\n    - 0.1.2 : @jamesFleeting adds facebook comments support\n    - 0.1.1 : @SegFaultAX adds tagline as site-wide configuration\n\n- **0.1.0 : 2012.01.24**   \n  First major versioned release.   \n  Features   \n    - Standardize Public API\n    - Use name-spacing and modulation where possible.\n    - Ability to override public methods with custom code.\n    - Publish the theme API.\n    - Ship with comments, analytics integration.\n  \n- **0.0.1 : 2011.12.30**    \n  First public release, lots of updates =p\n  Thank you everybody for dealing with the fast changes and helping\n  me work out the API to a manageable state.\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Symbol Iterator Method\nDESCRIPTION: Shows how to define a method that uses a JavaScript Symbol as its name using @JSName annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/facade-types.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n@JSName(js.Symbol.iterator)\ndef iterator(): js.Iterator[Int] = js.native\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs-crossproject Plugin for Cross-Platform Projects\nDESCRIPTION: Adds the portable-scala crossproject plugin dependency required for projects that use crossProject functionality in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.portable-scala\" % \"sbt-scalajs-crossproject\" % \"0.5.0\")\n```\n\n----------------------------------------\n\nTITLE: Specifying SBT Version\nDESCRIPTION: Defines the sbt version to be used for the project build.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/basic/index.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nsbt.version=1.7.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Float Semantics in Scala.js\nDESCRIPTION: Code snippet showing how to explicitly enable strict float semantics in Scala.js linker configuration. This was previously required but is now the default in 1.9.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-02-14-announcing-scalajs-1.9.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= { _.withSemantics(_.withStrictFloats(true)) }\n```\n\n----------------------------------------\n\nTITLE: Making XMLHttpRequest in JavaScript ES6\nDESCRIPTION: This snippet demonstrates how to create an XMLHttpRequest, set up a GET request to the Twitter API, handle the response, and update the DOM with the parsed tweets in JavaScript ES6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xhr = new XMLHttpRequest();\n\nxhr.open(\"GET\",\n  \"https://api.twitter.com/1.1/search/\" +\n  \"tweets.json?q=%23scalajs\"\n);\nxhr.onload = (e) => {\n  if (xhr.status === 200) {\n    const r = JSON.parse(xhr.responseText);\n    $(\"#tweets\").html(parseTweets(r));\n  }\n};\nxhr.send();\n```\n\n----------------------------------------\n\nTITLE: Deprecating Old CrossProject in Scala.js\nDESCRIPTION: Illustrates the deprecated way of defining cross-project in Scala.js 1.x and its recommended replacement. Relies on sbt and sbt-crossproject. No input/output as it's a project configuration.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nlazy val foo = crossProject.in(...)...\n```\n\nLANGUAGE: scala\nCODE:\n```\nlazy val foo = crossProject(JVMPlatform, JSPlatform).in(...)...\n```\n\n----------------------------------------\n\nTITLE: Legacy JSApp Implementation Example\nDESCRIPTION: Example of object extending js.JSApp with main method implementation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage bar\n\nobject Foo extends js.JSApp {\n  def main(): Unit = println(\"Hello world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Parallel Linking in Scala.js 1.14.0\nDESCRIPTION: This snippet shows how to disable the new parallel reachability analysis in Scala.js 1.14.0 by modifying the linker configuration. This may be necessary if issues are encountered with the new parallel behavior.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2023-09-25-announcing-scalajs.1.14.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= { _.withParallel(false) }\n```\n\n----------------------------------------\n\nTITLE: Conditional Scala.js Compiler Flags\nDESCRIPTION: SBT configuration to conditionally add the sjsDefinedByDefault compiler flag for Scala.js 0.6.x compatibility.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\n  else Nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSDependencies Plugin for Scala.js 1.0.0-RC1\nDESCRIPTION: Configures the necessary sbt-jsdependencies plugin and enables it for Scala.js projects when upgrading to Scala.js 1.0.0-RC1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-RC1\")\n```\n\n----------------------------------------\n\nTITLE: Executing SBT with Custom Scala.js Version\nDESCRIPTION: Shell command to launch SBT with a specific Scala.js version using environment variable.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ SCALAJS_VERSION=1.0.0-M8 sbt\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Fixed Type-Parameterized JavaScript Getter Issue\nDESCRIPTION: Shows the previously buggy behavior of type-parameterized getters that incorrectly generated method calls instead of field access, which has been fixed in this release.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-07-27-announcing-scalajs-0.6.11.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\nclass Foo extends js.Object {\n  def makeArray[A]: js.Array[A] = js.native\n}\n\nval foo = new Foo\nval a = foo.makeArray[Int] // gave foo.makeArray() because of #2445\n```\n\n----------------------------------------\n\nTITLE: Curried Function for Minmax in Scala\nDESCRIPTION: Defines a curried function minmaxBy to find minimum and maximum values from a sequence by using multiple parameter lists. Provides automatic type inference, specifically demonstrated with a sequence of Person objects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\ndef minmaxBy[T](seq: Seq[T])(f: T => Int): (Int, Int) = {\n  seq.foldLeft((Int.MaxValue, Int.MinValue)) {\n    case ((min, max), e) =>\n      val v = f(e)\n      (math.min(min, v), math.max(max, v))\n  }\n}\nval (youngest, oldest) = minmaxBy(persons)(_.age)\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js with jsdom environment dependency\nDESCRIPTION: This snippet shows how to add the Node.js with jsdom environment dependency when upgrading to Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-js\" %% \"scalajs-env-nodejs\" % \"1.0.0-M3\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chart.js Dependencies with npm\nDESCRIPTION: Commands to install Chart.js, its TypeScript definitions, and the TypeScript compiler as dependencies\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalablytyped.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install -S chart.js@2.9.4\n...\n$ npm install -D @types/chart.js@2.9.29 typescript@4.9.5\n...\n```\n\n----------------------------------------\n\nTITLE: Adding PhantomJS environment plugin\nDESCRIPTION: Adds the PhantomJS environment sbt plugin dependency to project/plugins.sbt for Scala.js projects using PhantomJS.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-RC2\")\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects\nDESCRIPTION: This Javascript snippet attempts to compare two objects using the `!=` operator, which doesn't work as expected for object equality. It then uses the `_.isEqual` function from the lodash library to correctly compare the objects.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst o1 = {a: 1, x: \"test\"};\nconst o2 = {a: 1, x: \"test\"};\n\nif (o1 != o2) {\n  // this doesn't work as expected\n  console.log(\"They are not equal!\");\n}\n\nif (_.isEqual(o1, o2)) {\n  console.log(\"They are equal!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the JavaScript Global Scope - Invalid Identifier\nDESCRIPTION: An invalid example that will cause a compile error in Scala.js 1.0.0-M1. Member names must be valid JavaScript identifiers.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js to Use Old Closure Compiler Integration\nDESCRIPTION: This snippet shows how to revert to the old Google Closure Compiler integration mechanism when experiencing regressions with the new source map generation in fullOptJS.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-08-29-announcing-scalajs-0.5.4.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nScalaJSKeys.directFullOptJS := false\n```\n\n----------------------------------------\n\nTITLE: Verifying Development Tool Versions in Shell\nDESCRIPTION: This code snippet demonstrates how to check the installed versions of Node.js, npm, and sbt using command-line instructions. It's used to verify that the necessary development tools are properly installed before starting the Scala.js tutorials.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/index.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ node -v\nv16.13.0\n$ npm -v\n8.1.0\n$ sbt -version\nsbt version in this project: 1.7.3\nsbt script version: 1.7.3\n```\n\n----------------------------------------\n\nTITLE: ScalaJSDefined Class Example\nDESCRIPTION: Example of a Scala.js-defined class using @ScalaJSDefined annotation in 0.6.x style.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-06-04-announcing-scalajs-0.6.17.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n@ScalaJSDefined\nclass Foo extends js.Object {\n  def bar(x: Int): Int = x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JS Header Comments in Scala.js\nDESCRIPTION: Configuration to add header comments to generated JavaScript files while preserving source maps.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-08-04-announcing-scalajs-1.7.0.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= {\n  _.withJSHeader(\n    \"\"\"\n      |/* This is the header, which source maps\n      | * take into account.\n      | */\n    \"\"\".stripMargin.trim() + \"\\n\"\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing the Production Build with Vite\nDESCRIPTION: This shell snippet shows how to preview the production build of an application using Vite's built-in preview server. The command `npm run preview` starts a local HTTP server that serves the contents of the `dist` directory, allowing developers to test the production build before deployment.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"$ npm run preview\\n\\n> livechart@0.0.0 preview\\n> vite preview\\n\\n  ➜  Local:   http://localhost:4173/\\n  ➜  Network: use --host to expose\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Undefined Values in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates filtering `undefined` values from an array using the `filter` method.  It iterates through the `data` array and keeps only the elements that are not `undefined`.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part1.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [1, 2, 3, undefined, 5, undefined, 7];\nconst res = data.filter((x) => x !== undefined);\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-scalajs-crossproject Plugin to sbt\nDESCRIPTION: This snippet shows how to add the required sbt plugins for cross-building Scala.js and Scala JVM projects. It includes the Scala.js sbt plugin and the sbt-scalajs-crossproject plugin.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/cross-build.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"{{ site.versions.scalaJS }}\")\naddSbtPlugin(\"org.portable-scala\" % \"sbt-scalajs-crossproject\" % \"1.3.2\")\n```\n\n----------------------------------------\n\nTITLE: JavaScript String Extension via Prototype\nDESCRIPTION: Demonstrates monkey patching the global String prototype to add a toDate method, which is considered dangerous in dynamic languages\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/sjs-for-js/es6-to-scala-part3.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nString.prototype.toDate = function() {\n  return convertToDate(this);\n}\n\"2015-10-09\".toDate(); // = {year:2015,month:10,day:9}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic equals and hashCode Overrides in JS Types (Scala)\nDESCRIPTION: Example code showing how overriding equals and hashCode in a JS class will trigger warnings in Scala.js 0.6.33. These overrides do not actually change the behavior of == and ## operations on JS types.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-05-13-announcing-scalajs-0.6.33.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nclass A extends js.Object {\n  override def hashCode(): Int = 1\n  override def equals(obj: Any): Boolean = false\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Static Member Inheritance in ECMAScript 6\nDESCRIPTION: This code snippet illustrates the inheritance of static members in ECMAScript 6, which was relevant to a design issue in React 0.14 that could have affected ECMAScript 5 compatibility.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/community/halloffame.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo {}\nFoo.x = 5;\nclass Bar extends Foo{}\nBar.x // -> 5\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-existent Global Variable - Runtime Error Example\nDESCRIPTION: Example of code that will now throw a ReferenceError at runtime in Scala.js 1.0.0-M1, whereas it would return undefined in 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.globalVarThatDoesNotExist)\n```\n\n----------------------------------------\n\nTITLE: Accessing the JavaScript Global Scope - Invalid Identifier Example\nDESCRIPTION: Shows an invalid example of accessing a member with a name that is not a valid JavaScript identifier in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Global Scope as Parameter - Invalid Example\nDESCRIPTION: Invalid code that attempts to pass a global scope object as a parameter. This is not allowed in Scala.js 1.0.0-M1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Starting SBT with Custom Scala.js Version - Bash\nDESCRIPTION: This command demonstrates how to start the SBT build tool with a specific Scala.js version using an environment variable. It ensures the setup aligns with the desired version specified during the command invocation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-04-15-announcing-scalajs-1.0.0-M7.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ SCALAJS_VERSION=1.0.0-M7 sbt\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js Linker Settings in SBT\nDESCRIPTION: SBT configuration to enable compliant behavior for ArrayStoreException and NegativeArraySizeException checks in Scala.js\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-11-23-announcing-scalajs-1.12.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= {\n  import org.scalajs.linker.interface.CheckedBehavior\n  _.withSemantics(_\n    .withArrayStores(CheckedBehavior.Compliant)\n    .withNegativeArraySizes(CheckedBehavior.Compliant)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the JavaScript Global Scope - Invalid Dynamic Example\nDESCRIPTION: Shows an invalid example of accessing the global scope with a dynamically computed name, which is not supported in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n```\n\n----------------------------------------\n\nTITLE: Updating a Message in Scala.js Component\nDESCRIPTION: This diff snippet shows the modification of a message within a Scala.js component. It involves changing the text within an `<h1>` tag, indicating a change in the user interface.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n\"       <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\\\" target=\\\"_blank\\\">\\n         <img src=\\\"/javascript.svg\\\" class=\\\"logo vanilla\\\" alt=\\\"JavaScript logo\\\" />\\n       </a>\\n-      <h1>Hello Scala.js!</h1>\\n+      <h1>Hello Scala.js and Vite!</h1>\\n       <div class=\\\"card\\\">\\n         <button id=\\\"counter\\\" type=\\\"button\\\"></button>\\n       </div>\"\n```\n\n----------------------------------------\n\nTITLE: Attempting Reflective Call in Scala.js\nDESCRIPTION: This snippet illustrates the failed attempt to access a member of the position object defined structurally, resulting in a runtime error due to unsupported reflective calls on values with JavaScript semantics.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nprintln(pos.x)\n```\n\n----------------------------------------\n\nTITLE: Configuring ScalablyTyped in build.sbt\nDESCRIPTION: Build configuration changes to enable ScalablyTyped converter plugin\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalablytyped.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n lazy val livechart = project.in(file(\".\"))\n   .enablePlugins(ScalaJSPlugin) // Enable the Scala.js plugin in this project\n+  .enablePlugins(ScalablyTypedConverterExternalNpmPlugin)\n   .settings(\n     scalaVersion := \"3.3.3\",\n     [...]\n     // Testing framework\n     libraryDependencies += \"org.scalameta\" %%% \"munit\" % \"1.0.0\" % Test,\n+\n+    // Tell ScalablyTyped that we manage `npm install` ourselves\n+    externalNpm := baseDirectory.value,\n   )\n```\n\n----------------------------------------\n\nTITLE: Defining Facade Types with js.native in Scala.js\nDESCRIPTION: Example of defining facade types in Scala.js using js.native as the body for fields and methods, which is the recommended approach in 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-01-23-announcing-scalajs-0.6.0-RC2.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\ntrait Foo extends js.Object {\n  var bar: Int = js.native\n  def foobar(x: Int): String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Incremental Compilation Errors in Scala\nDESCRIPTION: This error message indicates an incremental compilation issue where the compiled `.sjsir` files are out of sync with the source code, leading to linking errors. The solution involves cleaning the project using sbt to sync the compiled files with the source code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_8\n\nLANGUAGE: Scala\nCODE:\n```\n[error] Referring to non-existent method helloworld.Foo.bar(java.lang.String)scala.Unit\n[error]   called from helloworld.HelloWorld$.main()scala.Unit\n[error]   called from core module module initializers\n[error] involving instantiated classes:\n[error]   helloworld.HelloWorld$\n[error] There were linking errors\n```\n\n----------------------------------------\n\nTITLE: Invalid global scope object storage\nDESCRIPTION: Shows invalid ways of storing global scope objects in Scala.js 1.x, which are no longer allowed.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Disabling IR Checking Configuration in Scala.js\nDESCRIPTION: SBT configuration snippet showing how to disable IR checking in Scala.js linker configuration.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2025-01-09-announcing-scalajs-1.18.1.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nCompile/fullLinkJS/scalaJSLinkerConfig ~= { _.withCheckIR(false) }\n```\n\n----------------------------------------\n\nTITLE: Writing to Non-existent Global Variable - Runtime Error Example\nDESCRIPTION: Example of code that will now throw a ReferenceError at runtime in Scala.js 1.0.0-M1, whereas it would create the global variable in 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\njs.Dynamic.global.globalVarThatDoesNotExist = 42\n```\n\n----------------------------------------\n\nTITLE: Invalid Global Scope Function Parameter\nDESCRIPTION: Shows an invalid example of passing the global scope as a function parameter, which is not allowed in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Using StandardCharsets in Scala.js\nDESCRIPTION: Example reference for accessing standard character sets in Scala.js when compiling on JDK6. Uses scala.scalajs.niocharset.StandardCharsets to retrieve charset instances.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-11-19-announcing-scalajs-0.5.6.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nscala.scalajs.niocharset.StandardCharsets\n```\n\n----------------------------------------\n\nTITLE: Launching sbt with Custom Scala.js Version\nDESCRIPTION: Illustrates command-line execution to start sbt with Scala.js version set via an environment variable. Assumes bash environment and correct sbt setup.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ SCALAJS_VERSION=1.0.0-M1 sbt\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Mode in Scala.js (Deprecated Approach)\nDESCRIPTION: Demonstrates the now-deprecated way of setting ECMAScript2015 as the output mode for Scala.js compilation using the OutputMode enum.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-05-22-announcing-scalajs-0.6.23.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nimport org.scalajs.core.tools.linker.backend.OutputMode\nscalaJSOutputMode := OutputMode.ECMAScript2015\n```\n\n----------------------------------------\n\nTITLE: Navigating to project directory and running the Scala.js application\nDESCRIPTION: These commands change the current directory to the newly created project and use Activator to run the Scala.js application. The first run may take some time as it downloads required packages and compiles the project.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/hello-world.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd hello_scalajs\nactivator run\n```\n\n----------------------------------------\n\nTITLE: Defining Object Using Anonymous Class Syntax in Scala.js\nDESCRIPTION: In this snippet, an object literal is defined with the anonymous class syntax that lacks a superclass or trait. It demonstrates potential challenges in accessing member variables, highlighting that members cannot be accessed straightforwardly due to structural typing.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nval pos = new js.Object {\n  val x = 5\n  val y = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variable in JavaScript\nDESCRIPTION: Demonstrates how to define a global variable in JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = 42;\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Scala.js 0.6.x EOL Documentation\nDESCRIPTION: YAML frontmatter for a Markdown document specifying the layout and title for the Scala.js 0.6.x End of Life documentation page.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/internals/scalajs-0.6.x-eol.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: doc\ntitle: Scala.js 0.6.x End of Life\n---\n```\n\n----------------------------------------\n\nTITLE: Global Scope Object Storage - Invalid Example\nDESCRIPTION: Invalid code that attempts to store a global scope object in a variable. This is not allowed in Scala.js 1.0.0-M1.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n```\n\n----------------------------------------\n\nTITLE: Native JS Function Definition with Incorrect Default Value\nDESCRIPTION: Example showing a top-level native JavaScript function definition with a default parameter value that differs from the actual JavaScript implementation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-10-07-announcing-scalajs-1.7.1.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nobject Foo {\n  @js.native @JSGlobal(\"bar\")\n  def bar(x: Int, y: Int = 2): Int = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Global Variable Existence - Broken Approach\nDESCRIPTION: The old approach for testing whether a global variable exists, which is now broken in Scala.js 1.0.0-M1 as it will throw a ReferenceError.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nif (js.isUndefined(js.Dynamic.global.Promise)) {\n  // Promises are not supported\n} else {\n  // Promises are supported\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Front Matter for Scala.js 1.15.0 Announcement\nDESCRIPTION: Defines the YAML front matter for the blog post, specifying layout, title, category, tags, and permalink for the Scala.js 1.15.0 release announcement.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2023-12-29-announcing-scalajs-1.15.0.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: Announcing Scala.js 1.15.0\ncategory: news\ntags: [releases]\npermalink: /news/2023/12/29/announcing-scalajs-1.15.0/\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Scala.js Badge with Liquid Template\nDESCRIPTION: This snippet includes a Liquid template tag to generate a Scala.js badge. It likely references a custom include file that contains the badge generation logic.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/libraries/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include badge-generator.html %}\n```\n\n----------------------------------------\n\nTITLE: Warning-Free Cross-Compilation of @ScalaJSDefined\nDESCRIPTION: Explains how to configure `scalacOptions` for warning-free cross-compilation by using a compiler option to handle `@ScalaJSDefined`. Focuses on sbt configuration files with a dependency on Scala.js compiler options.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-07-03-announcing-scalajs-1.0.0-M1.md#2025-04-20_snippet_20\n\nLANGUAGE: scala\nCODE:\n```\nscalacOptions ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Seq(\"-P:scalajs:sjsDefinedByDefault\")\n  else Nil\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing js.Dynamic.literal() in Scala 2.13\nDESCRIPTION: Scala.js 1.18.2 improves the code generation for js.Dynamic.literal() when compiled with Scala 2.13. This optimization addresses the issue described in GitHub issue #5017, where the code quality was good for Scala 2.12 but not for Scala 2.13 or Scala 3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2025-01-23-announcing-scalajs-1.18.2.md#2025-04-20_snippet_0\n\nLANGUAGE: Scala\nCODE:\n```\njs.Dynamic.literal(...)\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js Java Library Extensions Dependency in SBT\nDESCRIPTION: This snippet shows how to add the Scala.js javalib-ex package as a dependency in SBT. This package provides additional Java classes that require ECMAScript 6 features.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-07-30-announcing-scalajs-0.5.3.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.scala-lang.modules.scalajs\" %% \"scalajs-javalib-ex\" % scalaJSVersion\n```\n\n----------------------------------------\n\nTITLE: Enabling Compliant ClassCastException Behavior in Scala.js\nDESCRIPTION: Sets the Scala.js semantics to use compliant behavior for asInstanceOf checks, which throws ClassCastExceptions at runtime at the cost of performance.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-05-announcing-scalajs-0.6.0-M2.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withAsInstanceOfs(org.scalajs.core.tools.sem.CheckedBehavior.Compliant) }\n```\n\n----------------------------------------\n\nTITLE: Illustrating String Constant Folding Bug in Google Closure Compiler\nDESCRIPTION: These snippets demonstrate the incorrect string constant folding in Google Closure Compiler, where number to string conversion didn't conform to ECMAScript standards.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/community/halloffame.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nalert('A number: ' + 1.2323919403474454e+21);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"A number: 1.2323919403474454E21\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"A number: 1.2323919403474454e+21\");\n```\n\n----------------------------------------\n\nTITLE: Starting Jekyll Development Server\nDESCRIPTION: Command to start the Jekyll development server with live reload functionality for local development.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec jekyll serve --watch\n```\n\n----------------------------------------\n\nTITLE: Overloading Method with Recursive Call Issue in Scala.js\nDESCRIPTION: This snippet presents a problematic method overload that leads to infinite recursion when called. It highlights the issues that can arise when methods are not mutually exclusive in their definitions, particularly when using run-time type resolution.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\n// @ScalaJSDefined\nclass Foo extends js.Object {\n  def bar(x: String): String = bar(x: Any)\n  def bar(x: Any): String = \"bar \" + x\n}\n\nval foo = new Foo\nprintln(foo.bar(\"world\")) // infinite recursion\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Float Semantics in Scala.js\nDESCRIPTION: This snippet shows how to enable strict-float semantics in Scala.js 0.6.x using an sbt setting. When enabled, all Float operations will behave as they do on the JVM with appropriate precision truncation, with the exception of .toString().\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-05-announcing-scalajs-0.6.0-M2.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSSemantics ~= { _.withStrictFloats(true) }\n```\n\n----------------------------------------\n\nTITLE: Setting Scala version to 2.10.x (not supported in Scala.js 1.x)\nDESCRIPTION: This snippet shows the Scala 2.10.x version setting which is no longer supported in Scala.js 1.0.0-M3 and must be updated to a newer Scala version.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nscalaVersion := \"2.10.x\" // for any x\n```\n\n----------------------------------------\n\nTITLE: Scala.js Plugin Version Configuration\nDESCRIPTION: Configuration for loading specific Scala.js versions in sbt build files.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\nval scalaJSVersion =\n  Option(System.getenv(\"SCALAJS_VERSION\")).getOrElse(\"0.6.21\")\n\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % scalaJSVersion)\n```\n\n----------------------------------------\n\nTITLE: Manual Ruby Setup Commands\nDESCRIPTION: Series of commands for setting up the development environment using Ruby and RVM, including installing dependencies and building the site with Jekyll.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ rvm use 2.7.5 --install\n\n$ gem install bundler\n\n$ bundle install\n\n$ bundle exec jekyll build\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Image Without Cache\nDESCRIPTION: Command to force rebuild the Docker image without using cached layers, useful for troubleshooting Docker-related issues.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build --no-cache\n```\n\n----------------------------------------\n\nTITLE: Adding Secure Random UUID Generation Dependency in Scala.js\nDESCRIPTION: Adds a dependency for a secure implementation of java.security.SecureRandom to fix linking errors related to UUID.randomUUID() in Scala.js 1.10.0.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-04-04-announcing-scalajs-1.10.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n\"org.scala-js\" %%% \"scalajs-java-securerandom\" % \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Warning Messages for JS Type Method Overrides (Text)\nDESCRIPTION: Example compiler warnings that will be reported when attempting to override hashCode and equals in JS types starting in Scala.js 0.6.33. The warnings explain that these overrides don't affect the actual behavior.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2020-05-13-announcing-scalajs-0.6.33.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nTest.scala:6: warning: Overriding hashCode in a JS class does not change its hash code.\n  To silence this warning, change the name of the method and optionally add @JSName(\"hashCode\").\n  override def hashCode(): Int = 1\n               ^\nTest.scala:7: warning: Overriding equals in a JS class does not change how it is compared.\n  To silence this warning, change the name of the method and optionally add @JSName(\"equals\").\n  override def equals(obj: Any): Boolean = false\n               ^\n```\n\n----------------------------------------\n\nTITLE: Using Blocking APIs in Scala.js\nDESCRIPTION: This code snippet demonstrates the use of blocking APIs (Await.result) in Scala.js, which is not supported and will result in linking errors. It's provided as an example of what not to do in Scala.js applications.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.concurrent.{Await, Future}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration.Duration\n\nval f = Future { 5 }\nprintln(Await.result(f, Duration.Inf))\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependencies for jsDependencies\nDESCRIPTION: This snippet demonstrates how to conditionally add dependencies for `jsDependencies` based on the Scala.js version. It uses `scalaJSVersion` to determine whether to include the `sbt-jsdependencies` plugin, only including it for versions that are not 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_28\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-M3\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Shadowing Import for sbt-scalajs-crossproject in Scala.js 0.6.x\nDESCRIPTION: This code snippet demonstrates how to resolve conflicts between `sbt-scalajs-crossproject` and Scala.js 0.6.x using a shadowing import. It imports `crossProject` and `CrossType` from `sbtcrossproject.CrossPlugin.autoImport`, effectively shadowing the definitions from Scala.js 0.6.x. This is a no-op in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_24\n\nLANGUAGE: scala\nCODE:\n```\n// shadow sbt-scalajs' crossProject and CrossType from Scala.js 0.6.x (no-op with Scala.js 1.x)\nimport sbtcrossproject.CrossPlugin.autoImport.{crossProject, CrossType}\n```\n\n----------------------------------------\n\nTITLE: Alternative to Namespace Exports in Scala.js\nDESCRIPTION: Recommended pattern to replace deprecated top-level exports with namespaces. This approach creates an object with nested properties that can be used instead of direct namespace exports.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-11-29-announcing-scalajs-0.6.26.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\npackage mypack\n\n// not directly exported\nobject Bar\n\nobject TopLevelExports {\n  @JSExportTopLevel(\"foo\")\n  val foo = new js.Object {\n    val Bar = mypack.Bar\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Front Matter for Scala.js Internals Page\nDESCRIPTION: This code snippet defines the front matter for a Markdown document about Scala.js internals. It specifies the layout and title of the page.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/internals/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: doc\ntitle: Scala.js internals\n---\n```\n\n----------------------------------------\n\nTITLE: Assigning to Non-existent Global Variable (Throws ReferenceError)\nDESCRIPTION: Example showing that assigning to a non-existent global variable throws a ReferenceError in Scala.js 1.0.0-M5, whereas it would create the global variable in 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-08-13-announcing-scalajs-1.0.0-M5.md#2025-04-20_snippet_14\n\nLANGUAGE: scala\nCODE:\n```\njs.Dynamic.global.globalVarThatDoesNotExist = 42\n```\n\n----------------------------------------\n\nTITLE: Redundant JSExport with js.JSApp\nDESCRIPTION: Example showing redundant use of @JSExport annotations with js.JSApp, which automatically exports the main method.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\n@JSExport\nobject Foo extends js.JSApp {\n  @JSExport\n  def main(): Unit = { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variable in JavaScript\nDESCRIPTION: Shows how to access and modify a global variable in JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/global-scope.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(foo);\nfoo = 24;\n```\n\n----------------------------------------\n\nTITLE: Exporting Top-Level Objects in Scala.js 0.6.x\nDESCRIPTION: Demonstrates how top-level objects were exported in Scala.js 0.6.x using the @JSExportTopLevel annotation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\n@JSExportTopLevel(\"Foo\")\nobject Bar\n```\n\n----------------------------------------\n\nTITLE: Equivalent JavaScript Class Implementation\nDESCRIPTION: Shows the JavaScript equivalent of the Scala.js non-native class definition using ECMAScript 6 syntax.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends global.Object {\n  constructor() {\n    super();\n    this.x = 5;\n    this.y = \"hello\";\n  }\n  get z() {\n    return 42;\n  }\n  set z(v) {\n    console.log(\"z = \" + v);\n  }\n  foo(x) {\n    return x + 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Scala.js Website Project Plan in Markdown\nDESCRIPTION: This Markdown snippet outlines the project plan for the Scala.js website, including todo items, completed tasks, and a detailed documentation structure. It uses headers and bullet points to organize the information hierarchically.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/planning.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: doc\ntitle: Planning\n---\n\n## TODO for MVP\n\n- hello-scalajs Activator template\n- hello-scalajs screenshot and link\n- add `latest` API mirror links  \n- add media section, with image downloads etc\n\n## Done\n- Scala.js for Scala developers, to be hidden for now\n- remove social media links from the template\n- Scala.js for JavaScript developers, intro text\n- libraries and skeleton index page content is missing\n- add \"built with Scala.js\" under community\n- add more intro text to community\n- front page icons for Correctness, Speed and Interoperability\n- Documentation landing page, more content\n\n## Doc content/structure plan\n\n- Quick start\n\n    Provide simple instructions to get started on developing with Scala.js (what to install, etc.)\n- Why Scala.js?\n\n    Copy Hands-on \"About Scala.js\" almost as-is\n- Project setup\n\n    Detailed instructions on setting up a Scala.js project\n\n    - Using SBT commands\n    - Dependencies\n    - Cross-building\n    - Client-server project\n\n        Using Play as an example server (makes the build.sbt simple)\n    - Eclipse and IntelliJ\n\n        How to import projects into popular IDEs\n    - Advanced features\n\n        Documenting less often used SBT plugin features\n- Interactive web pages\n    - HTML and DOM\n    - Scalatags\n    - Using Web services\n\n- Using JavaScript libraries\n    - Using JS facades\n    - Creating your own facades\n    - Exposing Scala.js code to JavaScript\n\n- Using Scala libraries\n    - Scala standard library\n    - Third party libraries\n    - Java libraries\n- Testing\n\n    How to test Scala.js apps. Unit tests, DOM tests, etc.\n\n- Debugging\n\n    Debugging in the browser. Source maps\n\n- Advanced\n\n    Take mostly from Hands-on\n\n    - Porting Scala and Java libraries to Scala.js\n    - Publishing Scala.js libraries\n    - JavaScript environments\n```\n\n----------------------------------------\n\nTITLE: Adding PhantomJS Environment for Scala.js 1.0.0-RC1\nDESCRIPTION: Adds the PhantomJS environment plugin for Scala.js 1.0.0-RC1 in project/plugins.sbt.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-RC1\")\n```\n\n----------------------------------------\n\nTITLE: Invalid Global Scope Reference Storage in Scala.js 1.x\nDESCRIPTION: Shows code patterns that are invalid in Scala.js 1.x - storing the global scope object in a variable or passing it as a parameter.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nval g = js.Dynamic.global\n\ndef foo(x: Any): Unit = println(x)\nfoo(js.Dynamic.global)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding jsDependencies\nDESCRIPTION: This snippet shows how to conditionally add dependencies for jsDependencies based on the Scala.js version history. It checks if the version starts with '0.6.' to determine whether or not to include the dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_28\n\nLANGUAGE: scala\nCODE:\n```\n// For jsDependencies\\\n{\\\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\\\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-jsdependencies\" % \"1.0.0-RC1\"))\\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript global scope in Scala.js\nDESCRIPTION: Examples of valid and invalid ways to access the JavaScript global scope in Scala.js 1.x using js.Dynamic.global.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n```\n\nLANGUAGE: scala\nCODE:\n```\nval mathName = \"Math\"\nprintln(js.Dynamic.global.selectDynamic(mathName))\n```\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.`not-a-valid-JS-identifier`)\n```\n\n----------------------------------------\n\nTITLE: Accessing non-existent global variables in Scala.js\nDESCRIPTION: Examples of how accessing non-existent global variables throws ReferenceError in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.globalVarThatDoesNotExist)\n```\n\nLANGUAGE: scala\nCODE:\n```\njs.Dynamic.global.globalVarThatDoesNotExist = 42\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic JS Environment Dependencies in Scala\nDESCRIPTION: These Scala snippets conditionally add JS environment dependencies based on the Scala.js version. For versions starting with '0.6.', no additional dependencies are added. Otherwise, dependencies for 'scalajs-env-jsdom-nodejs' are included for Node.js with jsdom, and 'sbt-scalajs-env-phantomjs' for PhantomJS respectively. These are placed in the 'build.sbt' file.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-12-13-announcing-scalajs-1.0.0-RC2.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\n// For Node.js with jsdom\nlibraryDependencies ++= {\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(\"org.scala-js\" %% \"scalajs-env-jsdom-nodejs\" % \"1.0.0-RC2\")\n}\n```\n\nLANGUAGE: scala\nCODE:\n```\n// For PhantomJS\n{\n  if (scalaJSVersion.startsWith(\"0.6.\")) Nil\n  else Seq(addSbtPlugin(\"org.scala-js\" % \"sbt-scalajs-env-phantomjs\" % \"1.0.0-RC2\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Inner Classes in Native JS Classes with Scala.js 1.x\nDESCRIPTION: Shows how Scala.js 1.x allows easy declaration of inner classes in native JS classes, improving facade types for certain JavaScript APIs.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the global scope with statically known member name\nDESCRIPTION: This code shows the valid way to access a member of the global scope with a statically known name in Scala.js 1.0.0-M3.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-02-01-announcing-scalajs-1.0.0-M3.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nprintln(js.Dynamic.global.Math)\n```\n\n----------------------------------------\n\nTITLE: UndefOr Type Alias Definition\nDESCRIPTION: Shows the new definition of js.UndefOr as a type alias for a union type in Scala.js 1.0.0-M6.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2018-10-24-announcing-scalajs-1.0.0-M6.md#2025-04-20_snippet_17\n\nLANGUAGE: scala\nCODE:\n```\ntype UndefOr[+A] = A | Unit\n```\n\n----------------------------------------\n\nTITLE: Desugaring Implicit Constructor Invocation in Scala.js\nDESCRIPTION: This snippet shows how the Scala compiler desugars the implicit usage of 'js.ConstructorTag'. The manual version of calling the constructor cannot be written in user code since the constructor of 'js.ConstructorTag' is private.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/interoperability/sjs-defined-js-classes.md#2025-04-20_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\ndef instantiate[C <: js.Any](implicit tag: js.ConstructorTag[C]): C =\n  js.Dynamic.newInstance(tag.constructor)().asInstanceOf[C]\n\nval newEmptyJSArray = instantiate[js.Array[Int]](\n    new js.ConstructorTag[C](js.constructorOf[js.Array[Int]])\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Exported Classes and Objects from JavaScript After Deprecation\nDESCRIPTION: JavaScript code showing how to access Scala objects and classes exported with @JSExportTopLevel, noting that objects no longer require the () invocation.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-03-21-announcing-scalajs-0.6.15.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar fooObject = foo.Foo; // note the absence of ()\nvar barObject = new Bar();\n```\n\n----------------------------------------\n\nTITLE: Deprecated GlobalScope Extension in Scala.js\nDESCRIPTION: An example of the deprecated way to define a JavaScript global scope object by extending js.GlobalScope.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2016-10-17-announcing-scalajs-0.6.13.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\n\n@js.native\nobject Foo extends js.GlobalScope\n```\n\n----------------------------------------\n\nTITLE: Defining Scala.js-defined JavaScript Traits with Restrictions\nDESCRIPTION: Shows how to create Scala.js-defined JavaScript traits with the restriction that they cannot contain concrete term members - all vals, vars, and defs must be abstract.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-08-31-announcing-scalajs-0.6.5.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport scala.scalajs.js\nimport scala.scalajs.js.annotation._\n\n@ScalaJSDefined\ntrait Foo extends js.Object {\n  val x: Int     // ok\n  val y: Int = 5 // illegal\n\n  def foo(x: Int): Int         // ok\n  def bar(x: Int): Int = x + 1 // illegal\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Buffer from Typed Array in Scala.js\nDESCRIPTION: Demonstrates using TypedArrayBuffer to construct direct buffers that wrap existing JavaScript Typed Arrays in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-03-03-announcing-scalajs-0.6.1.md#2025-04-20_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nTypedArrayBuffer\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Scala.js Integration\nDESCRIPTION: This snippet shows the configuration file for Vite that declares the Scala.js plugin allowing for seamless integration of Scala.js into the Vite build process.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalajs-vite.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport scalaJSPlugin from \"@scala-js/vite-plugin-scalajs\";\n\nexport default defineConfig({\n  plugins: [scalaJSPlugin()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using JSGlobal with Optional Parameter\nDESCRIPTION: Example demonstrating the new Scala.js 1.8.0 feature where @JSGlobal's argument becomes optional when used inside a Scala object.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2021-12-10-announcing-scalajs-1.8.0.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nobject JSTimers {\n  @js.native @JSGlobal\n  def setTimeout(f: js.Function0[Any], delay: Int): Unit\n}\n```\n\n----------------------------------------\n\nTITLE: Using js.native in Scala.js Facade Types\nDESCRIPTION: Example showing the recommended way to define facade types in Scala.js 0.6.0, using js.native as the body for fields and methods instead of ???.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2015-02-05-announcing-scalajs-0.6.0.md#2025-04-20_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\ntrait Foo extends js.Object {\n  var bar: Int = js.native\n  def foobar(x: Int): String = js.native\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scala.js to emit ES 5.1 code\nDESCRIPTION: sbt setting to configure Scala.js to emit ECMAScript 5.1 strict mode code instead of the default ES 2015 code.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-06-03-announcing-scalajs-1.0.0-M8.md#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig in ThisBuild ~= { _.withESFeatures(_.withUseECMAScript2015(false)) }\n```\n\n----------------------------------------\n\nTITLE: Declaring Inner Classes in Native JS Classes\nDESCRIPTION: Shows how to declare facade types for JavaScript classes with inner classes in Scala.js 1.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2019-11-26-announcing-scalajs-1.0.0-RC1.md#2025-04-20_snippet_22\n\nLANGUAGE: scala\nCODE:\n```\n@js.native\n@JSGlobal\nclass OuterClass(x: Int) extends js.Object {\n  @js.native\n  class InnerClass extends js.Object {\n    def someMethod(): Int = js.native\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSExport Class Example\nDESCRIPTION: Example showing how @JSExport annotation affects class naming when exporting to JavaScript.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-22-announcing-scalajs-0.6.0-M3.md#2025-04-20_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\npackage babar\n\n@JSExport\nclass Foo\n```\n\n----------------------------------------\n\nTITLE: Rendering Scala.js Library Dependencies\nDESCRIPTION: Includes a reference to a library data source and renders library information dynamically using a Jekyll include template\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/libraries/libs.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include library.html lib=site.data.library.scalalibs %}\n```\n\n----------------------------------------\n\nTITLE: JSExport annotation behavior change in Scala.js 0.6.x\nDESCRIPTION: Example showing how @JSExport without an explicit name now exports to fully qualified names by default in Scala.js 0.6.x.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2014-12-01-announcing-scalajs-0.6.0-M1.md#2025-04-20_snippet_2\n\nLANGUAGE: Scala\nCODE:\n```\npackage babar\n\n@JSExport\nclass Foo\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDOM Node.js Environment\nDESCRIPTION: SBT configuration to use Node.js with jsdom for DOM support.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-09-01-announcing-scalajs-0.6.20.md#2025-04-20_snippet_7\n\nLANGUAGE: scala\nCODE:\n```\njsEnv := new org.scalajs.jsenv.jsdomnodejs.JSDOMNodeJSEnv()\n```\n\n----------------------------------------\n\nTITLE: Using Unsupported JDK Library in Scala.js\nDESCRIPTION: This snippet shows an attempt to use java.io.File in a Scala.js application, which is not supported and will result in linking errors. It's an example of using unsupported JDK libraries in Scala.js.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/project/linking-errors.md#2025-04-20_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\nprintln(new java.io.File(\"foo.txt\").exists())\n```\n\n----------------------------------------\n\nTITLE: Creating a new Scala.js project using Activator\nDESCRIPTION: This command uses Activator to create a new Scala.js project from a template. It creates a project named 'hello-scalajs' using the 'scalajs_hello_world' template.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/hello-world.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nactivator new hello-scalajs scalajs_hello_world\n```\n\n----------------------------------------\n\nTITLE: Testing Libraries Include Template in Jekyll\nDESCRIPTION: Jekyll template include statement that renders testing library information from site data. Uses the library.html template to display testing framework dependencies.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/libraries/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include library.html lib=site.data.library.testlibs %}\n```\n\n----------------------------------------\n\nTITLE: Updating App Element with Chart\nDESCRIPTION: Adding chart rendering to the main application element\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/doc/tutorial/scalablytyped.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  def appElement(): Element =\n     div(\n       h1(\"Live Chart\"),\n       renderDataTable(),\n+      renderDataChart(),\n       renderDataList(),\n     )\n   end appElement\n```\n\n----------------------------------------\n\nTITLE: Configuring String Index Out of Bounds Behavior in Scala.js\nDESCRIPTION: Configuration snippet to enable compliant StringIndexOutOfBoundsException behavior in the Scala.js linker. This setting makes string index exceptions behave the same as on the JVM in both fastLink and fullLink modes.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2022-09-15-announcing-scalajs-1.11.0.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nscalaJSLinkerConfig ~= {\n  _.withSemantics(_.withStringIndexOutOfBounds(\n      org.scalajs.linker.interface.CheckedBehavior.Compliant))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scala.js SBT Plugin\nDESCRIPTION: Configuration for adding the Scala.js SBT plugin dependency in project/plugins.sbt file.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2017-11-29-announcing-scalajs-1.0.0-M2.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"1.0.0-M2\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Constructor this Usage Restriction in Scala\nDESCRIPTION: Example showing a code pattern that is now restricted in Scala.js 1.18.1, where using 'this' before super constructor calls in try-catch blocks is no longer allowed.\nSOURCE: https://github.com/scala-js/scala-js-website/blob/main/_posts/news/2025-01-09-announcing-scalajs-1.18.1.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nclass Parent(val i: Int)\n\nclass Child extends Parent({\n  val p = try Integer.parseInt(\"foo\") catch { case _: NumberFormatException => 42 }\n  p\n})\n\nobject Test {\n  def main(args: Array[String]): Unit =\n    println(new Child().i)\n}\n```"
  }
]