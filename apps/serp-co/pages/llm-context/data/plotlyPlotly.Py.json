[
  {
    "owner": "plotly",
    "repo": "plotly.py",
    "content": "TITLE: Creating Plotly Figure Using Python Dictionary\nDESCRIPTION: Demonstrates how to create a basic bar chart figure using a Python dictionary structure and display it using plotly.io.show()\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfig = dict({\n    \"data\": [{\"type\": \"bar\",\n              \"x\": [1, 2, 3],\n              \"y\": [1, 3, 2]}],\n    \"layout\": {\"title\": {\"text\": \"A Figure Specified By Python Dictionary\"}}\n})\n\n# To display the figure defined by this dict, use the low-level plotly.io.show function\nimport plotly.io as pio\n\npio.show(fig)\n```\n\n----------------------------------------\n\nTITLE: Launching Jupyter Notebook\nDESCRIPTION: Command to start the classic Jupyter Notebook interface to work with notebooks that include Plotly visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ jupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Plotly Express\nDESCRIPTION: Demonstrates creating a scatter plot using Plotly Express, the high-level API for creating complete figures with a single function call\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", title=\"A Plotly Express Figure\")\n\n# If you print the figure, you'll see that it's just a regular figure with data and layout\n# print(fig)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet illustrates how to construct a grouped bar chart using Plotly Graph Objects, which offers more control over figure details. Data is grouped by 'Contestant', and each group is plotted as a distinct bar trace. The method requires the pandas and plotly.graph_objects libraries and inputs a DataFrame 'df'. It showcases setting hover templates and updating layouts before rendering the chart with 'fig.show()'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/graph-objects.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfor contestant, group in df.groupby(\"Contestant\"):\n    fig.add_trace(go.Bar(x=group[\"Fruit\"], y=group[\"Number Eaten\"], name=contestant,\n      hovertemplate=\"Contestant=%s<br>Fruit=%%{x}<br>Number Eaten=%%{y}<extra></extra>\"% contestant))\nfig.update_layout(legend_title_text = \"Contestant\")\nfig.update_xaxes(title_text=\"Fruit\")\nfig.update_yaxes(title_text=\"Number Eaten\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Installing Dash for Plotly Apps\nDESCRIPTION: This command installs Dash, a framework for building analytical web applications with Plotly visualizations. The app demonstrated requires Dash to run.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install dash\n```\n\n----------------------------------------\n\nTITLE: Line Plot with Markers using Plotly Express\nDESCRIPTION: This snippet adds markers to a line plot created with `plotly.express`. It loads the `gapminder` dataset, filters for 'Oceania', then uses `px.line` to plot 'year' vs 'lifeExp', colored by 'country'. Setting `markers=True` adds a marker at each data point on the lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\\\"continent == 'Oceania'\\\")\nfig = px.line(df, x='year', y='lifeExp', color='country', markers=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Bubble Map with Plotly Express\nDESCRIPTION: Creates a basic bubble map using Plotly Express scatter_geo function. Uses the gapminder dataset to plot country populations with continent-based coloring on a natural earth projection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year==2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\", color=\"continent\",\n                     hover_name=\"country\", size=\"pop\",\n                     projection=\"natural earth\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Large Dataset Scatter Plot with WebGL\nDESCRIPTION: Shows how to use Scattergl for improved performance with large datasets, plotting 100,000 random points with color variation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nN = 100000\nfig = go.Figure(data=go.Scattergl(\n    x = np.random.randn(N),\n    y = np.random.randn(N),\n    mode='markers',\n    marker=dict(\n        color=np.random.randn(N),\n        colorscale='Viridis',\n        line_width=1\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Add Trace Convenience Methods with Subplots\nDESCRIPTION: Illustrates using add_scatter() and add_bar() convenience methods for adding traces to subplots\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_scatter(y=[4, 2, 1], mode=\"lines\", row=1, col=1)\nfig.add_bar(y=[2, 1, 3], row=1, col=2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Multiple Types - Python\nDESCRIPTION: This snippet showcases how to create a 2x2 subplot grid containing different types of subplots, including bar, polar, pie, and 3D scatter traces, demonstrating the use of the specs argument to specify subplot types.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"type\": \"xy\"}, {\"type\": \"polar\"}],\n           [{\"type\": \"domain\"}, {\"type\": \"scene\"}]],\n)\n\nfig.add_trace(go.Bar(y=[2, 3, 1]),\n              row=1, col=1)\n\nfig.add_trace(go.Barpolar(theta=[0, 45, 90], r=[2, 3, 1]),\n              row=1, col=2)\n\nfig.add_trace(go.Pie(values=[2, 3, 1]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter3d(x=[2, 3, 1], y=[0, 0, 0],\n                           z=[0.5, 1, 2], mode=\"lines\"),\n              row=2, col=2)\n\nfig.update_layout(height=700, showlegend=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Integrating Plotly with Jinja2 Template\nDESCRIPTION: This Python code demonstrates how to integrate a Plotly figure into an HTML template using Jinja2. It creates a bar chart using `plotly.express`, converts it to HTML using `to_html(full_html=False)`, and then inserts it into a Jinja2 template. The resulting HTML file contains the Plotly figure embedded within the template's structure. File paths need to be replaced with actual file paths for this to work.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/interactive-html-export.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom jinja2 import Template\n\ndata_canada = px.data.gapminder().query(\"country == 'Canada'\")\nfig = px.bar(data_canada, x='year', y='pop')\n\noutput_html_path=r\"/path/to/output.html\"\ninput_template_path = r\"/path/to/template.html\"\n\nplotly_jinja_data = {\"fig\":fig.to_html(full_html=False)}\n#consider also defining the include_plotlyjs parameter to point to an external Plotly.js as described above\n\nwith open(output_html_path, \"w\", encoding=\"utf-8\") as output_file:\n    with open(input_template_path) as template_file:\n        j2_template = Template(template_file.read())\n        output_file.write(j2_template.render(plotly_jinja_data))\n```\n\n----------------------------------------\n\nTITLE: Visualizing PCA Components with Scatter Matrix in Python\nDESCRIPTION: This snippet applies PCA to the Iris dataset using Scikit-learn, then visualizes all principal components using a Plotly Express scatter matrix plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-pca.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom sklearn.decomposition import PCA\n\ndf = px.data.iris()\nfeatures = [\"sepal_width\", \"sepal_length\", \"petal_width\", \"petal_length\"]\n\npca = PCA()\ncomponents = pca.fit_transform(df[features])\nlabels = {\n    str(i): f\"PC {i+1} ({var:.1f}%)\"\n    for i, var in enumerate(pca.explained_variance_ratio_ * 100)\n}\n\nfig = px.scatter_matrix(\n    components,\n    labels=labels,\n    dimensions=range(4),\n    color=df[\"species\"]\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Magic Underscore Notation Without and With Syntax\nDESCRIPTION: Compares traditional and magic underscore notation for configuring figure properties in Plotly\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Scatter(y=[1, 3, 2], line=dict(color=\"crimson\"))],\n    layout=dict(title=dict(text=\"A Graph Objects Figure Without Magic Underscore Notation\"))\n)\n\nfig = go.Figure(\n    data=[go.Scatter(y=[1, 3, 2], line_color=\"crimson\")],\n    layout_title_text=\"A Graph Objects Figure With Magic Underscore Notation\"\n)\n```\n\n----------------------------------------\n\nTITLE: Line Plot with DataFrame and Color using Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a line plot using `plotly.express` where each line represents a different category. It loads the `gapminder` dataset, filters it to only include 'Oceania', and then uses `px.line` to plot 'year' on the x-axis and 'lifeExp' on the y-axis, with different lines colored by 'country'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\\\"continent == 'Oceania'\\\")\nfig = px.line(df, x='year', y='lifeExp', color='country')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap with Multiple Control Buttons in Plotly Python\nDESCRIPTION: Creates an interactive heatmap with multiple button controls for colorscale, reverse scale, and contour line visibility. Demonstrates using multiple restyle buttons to control different visual aspects of the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# Create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Heatmap(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=100, b=0, l=0, r=0),\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add drowdowns\nbutton_layer_1_height = 1.12\nbutton_layer_2_height = 1.065\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"colorscale\", \"Viridis\"],\n                    label=\"Viridis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Cividis\"],\n                    label=\"Cividis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Blues\"],\n                    label=\"Blues\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Greens\"],\n                    label=\"Greens\",\n                    method=\"restyle\"\n                ),\n            ]),\n            type = \"buttons\",\n            direction=\"right\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"reversescale\", False],\n                    label=\"False\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"reversescale\", True],\n                    label=\"True\",\n                    method=\"restyle\"\n                )\n            ]),\n            type = \"buttons\",\n            direction=\"right\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.13,\n            xanchor=\"left\",\n            y=button_layer_2_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[{\"contours.showlines\": False, \"type\": \"contour\"}],\n                    label=\"Hide lines\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"contours.showlines\": True, \"type\": \"contour\"}],\n                    label=\"Show lines\",\n                    method=\"restyle\"\n                ),\n            ]),\n            type = \"buttons\",\n            direction=\"right\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.5,\n            xanchor=\"left\",\n            y=button_layer_2_height,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"colorscale\", x=0, xref=\"paper\", y=1.1, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Reverse<br>Colorscale\", x=0, xref=\"paper\", y=1.06,\n                             yref=\"paper\", showarrow=False),\n        dict(text=\"Lines\", x=0.47, xref=\"paper\", y=1.045, yref=\"paper\",\n                             showarrow=False)\n    ])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Plotly\nDESCRIPTION: Demonstrates how to create a figure with multiple subplots using make_subplots() and add traces to specific subplot locations\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(go.Scatter(y=[4, 2, 1], mode=\"lines\"), row=1, col=1)\nfig.add_trace(go.Bar(y=[2, 1, 3]), row=1, col=2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Actual vs Predicted Plot for Model Evaluation\nDESCRIPTION: This code shows how to create a simple scatter plot comparing predicted values to actual values using Plotly Express. It trains a linear regression model on the Iris dataset to predict petal width from sepal measurements, and then creates a visualization where points close to the diagonal line indicate good predictions. The diagonal reference line is added using Plotly's shape functionality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\n\ndf = px.data.iris()\nX = df[['sepal_width', 'sepal_length']]\ny = df['petal_width']\n\n# Condition the model on sepal width and length, predict the petal width\nmodel = LinearRegression()\nmodel.fit(X, y)\ny_pred = model.predict(X)\n\nfig = px.scatter(x=y, y=y_pred, labels={'x': 'ground truth', 'y': 'prediction'})\nfig.add_shape(\n    type=\"line\", line=dict(dash='dash'),\n    x0=y.min(), y0=y.min(),\n    x1=y.max(), y1=y.max()\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Ternary Scatter Plot with Plotly Express in Python\nDESCRIPTION: This snippet visualizes election data using a ternary scatter plot, representing votes for three candidates and coloring by the winning candidate. The size of the markers indicates the total votes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\nfig = px.scatter_ternary(df, a=\"Joly\", b=\"Coderre\", c=\"Bergeron\", color=\"winner\", size=\"total\", hover_name=\"district\",\n                   size_max=15, color_discrete_map = {\"Joly\": \"blue\", \"Bergeron\": \"green\", \"Coderre\":\"red\"} )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scatter Plot with Plotly Express\nDESCRIPTION: Generates a scatter plot of iris dataset with sepal width and length, colored by species\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Grid Search Visualization with Heatmaps and Box Plots\nDESCRIPTION: This code demonstrates how to visualize the results of a grid search for hyperparameter tuning using both density heatmaps and box plots. It performs a grid search on a DecisionTreeRegressor with different criterion and max_depth values, then visualizes the results in two ways: a heatmap showing performance on individual CV folds, and a box plot aggregating results across all hyperparameter combinations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\n\nN_FOLD = 6\n\n# Load and shuffle dataframe\ndf = px.data.iris()\ndf = df.sample(frac=1, random_state=0)\n\nX = df[['sepal_width', 'sepal_length']]\ny = df['petal_width']\n\n# Define and fit the grid\nmodel = DecisionTreeRegressor()\nparam_grid = {\n    'criterion': ['mse', 'friedman_mse', 'mae'],\n    'max_depth': range(2, 5)\n}\ngrid = GridSearchCV(model, param_grid, cv=N_FOLD)\ngrid.fit(X, y)\ngrid_df = pd.DataFrame(grid.cv_results_)\n\n# Convert the wide format of the grid into the long format\n# accepted by plotly.express\nmelted = (\n    grid_df\n    .rename(columns=lambda col: col.replace('param_', ''))\n    .melt(\n        value_vars=[f'split{i}_test_score' for i in range(N_FOLD)],\n        id_vars=['mean_test_score', 'mean_fit_time', 'criterion', 'max_depth'],\n        var_name=\"cv_split\",\n        value_name=\"r_squared\"\n    )\n)\n\n# Format the variable names for simplicity\nmelted['cv_split'] = (\n    melted['cv_split']\n    .str.replace('_test_score', '')\n    .str.replace('split', '')\n)\n\n# Single function call to plot each figure\nfig_hmap = px.density_heatmap(\n    melted, x=\"max_depth\", y='criterion',\n    histfunc=\"sum\", z=\"r_squared\",\n    title='Grid search results on individual fold',\n    hover_data=['mean_fit_time'],\n    facet_col=\"cv_split\", facet_col_wrap=3,\n    labels={'mean_test_score': \"mean_r_squared\"}\n)\n\nfig_box = px.box(\n    melted, x='max_depth', y='r_squared',\n    title='Grid search results ',\n    hover_data=['mean_fit_time'],\n    points='all',\n    color=\"criterion\",\n    hover_name='cv_split',\n    labels={'mean_test_score': \"mean_r_squared\"}\n)\n\n# Display\nfig_hmap.show()\nfig_box.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Charts from CSV Data with Plotly Express\nDESCRIPTION: This snippet shows how to create a line chart from CSV data using Plotly Express. It imports Apple stock data and plots share prices over time with a custom title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plot-data-from-csv.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\n\nfig = px.line(df, x = 'AAPL_x', y = 'AAPL_y', title='Apple Share Prices over time (2014)')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Performing Linear Regression with Scikit-learn\nDESCRIPTION: The code performs linear regression using Scikit-learn's LinearRegression class and visualizes the results with Plotly. It uses the 'tips' dataset to predict 'tip' based on 'total_bill'. The code requires Scikit-learn and NumPy for model training, and Plotly for plotting. The model's fit and prediction steps are outlined, and the resulting regression line is displayed alongside the data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\n\ndf = px.data.tips()\nX = df.total_bill.values.reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(X, df.tip)\n\nx_range = np.linspace(X.min(), X.max(), 100)\ny_range = model.predict(x_range.reshape(-1, 1))\n\nfig = px.scatter(df, x='total_bill', y='tip', opacity=0.65)\nfig.add_traces(go.Scatter(x=x_range, y=y_range, name='Regression Fit'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Line Plot with Array-like Data using Plotly Express\nDESCRIPTION: This snippet creates a line plot using `plotly.express` with x and y values generated using `numpy`. It generates 100 points between 0 and 2*pi for the x-axis, calculates the cosine for the y-axis, and then displays the plot using `px.line` with appropriate labels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\n\nt = np.linspace(0, 2*np.pi, 100)\n\nfig = px.line(x=t, y=np.cos(t), labels={'x':'t', 'y':'cos(t)'})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D Scatter Plot with Colorscaling and Styling\nDESCRIPTION: This snippet creates a 3D scatter plot using `go.Scatter3d` with colorscaling and marker styling. It imports `plotly.graph_objects` and `numpy`, generates data for a helix, and creates a scatter plot where the color of each marker is determined by its z-value, using the Viridis colorscale. Marker size and opacity are also customized, and the layout is updated to have tight margins.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-scatter-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Helix equation\nt = np.linspace(0, 20, 100)\nx, y, z = np.cos(t), np.sin(t), t\n\nfig = go.Figure(data=[go.Scatter3d(\n    x=x,\n    y=y,\n    z=z,\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=z,                # set color to an array/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    )\n)])\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Exploring Flight Delay Correlations using Datashader and Plotly Express\nDESCRIPTION: This example uses Datashader to create a rasterized heatmap of flight delay data, which is then visualized using Plotly Express. It demonstrates how to handle large datasets efficiently and create clear visualizations of correlations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/performance.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nimport numpy as np\nimport datashader as ds\ndf = pd.read_parquet('https://raw.githubusercontent.com/plotly/datasets/master/2015_flights.parquet')\n\ncvs = ds.Canvas(plot_width=100, plot_height=100)\nagg = cvs.points(df, 'SCHEDULED_DEPARTURE', 'DEPARTURE_DELAY')\nzero_mask = agg.values == 0\nagg.values = np.log10(agg.values, where=np.logical_not(zero_mask))\nagg.values[zero_mask] = np.nan\nfig = px.imshow(agg, origin='lower', labels={'color':'Log10(count)'})\nfig.update_traces(hoverongaps=False)\nfig.update_layout(coloraxis_colorbar=dict(title='Count', tickprefix='1.e'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Line Plot with graph_objects in Python\nDESCRIPTION: Shows how to create a basic line plot using the go.Scatter class from plotly.graph_objects. This example plots a quadratic function (x^2) for a range of x values, demonstrating the lower-level API compared to Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nx = np.arange(10)\n\nfig = go.Figure(data=go.Scatter(x=x, y=x**2))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Line Plot with Plotly Express in Python\nDESCRIPTION: Creates a simple line plot showing life expectancy in Canada over time using Plotly Express. This code loads the gapminder dataset, filters for Canadian data, and plots life expectancy against year with a descriptive title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country=='Canada'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", title='Life expectancy in Canada')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Figure Layout Properties\nDESCRIPTION: Shows multiple equivalent methods for updating figure layout properties using update_layout()\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Bar(x=[1, 2, 3], y=[1, 3, 2]))\n\nfig.update_layout(title_text=\"Using update_layout() With Graph Object Figures\",\n                  title_font_size=30)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Polynomial Regression with LaTeX using Plotly\nDESCRIPTION: This code snippet shows how to perform polynomial regression using Scikit-learn's PolynomialFeatures and visualize the result with Plotly. It also includes displaying the polynomial equation with LaTeX formatting in the plot legend. The snippet uses the 'tips' dataset and visualizes regression lines for polynomial degrees 1 to 4. Dependencies include Scikit-learn for polynomial feature transformation and Plotly for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\ndef format_coefs(coefs):\n    equation_list = [f\"{coef}x^{i}\" for i, coef in enumerate(coefs)]\n    equation = \"$\" +  \" + \".join(equation_list) + \"$\"\n\n    replace_map = {\"x^0\": \"\", \"x^1\": \"x\", '+ -': '- '}\n    for old, new in replace_map.items():\n        equation = equation.replace(old, new)\n\n    return equation\n\ndf = px.data.tips()\nX = df.total_bill.values.reshape(-1, 1)\nx_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)\n\nfig = px.scatter(df, x='total_bill', y='tip', opacity=0.65)\nfor degree in [1, 2, 3, 4]:\n    poly = PolynomialFeatures(degree)\n    poly.fit(X)\n    X_poly = poly.transform(X)\n    x_range_poly = poly.transform(x_range)\n\n    model = LinearRegression(fit_intercept=False)\n    model.fit(X_poly, df.tip)\n    y_poly = model.predict(x_range_poly)\n\n    equation = format_coefs(model.coef_.round(2))\n    fig.add_traces(go.Scatter(x=x_range.squeeze(), y=y_poly, name=equation))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Model Generalization with Scikit-learn and Plotly\nDESCRIPTION: This Python code visualizes the training and testing data points on a scatter plot to analyze model generalization. The code uses Scikit-learn to fit a linear regression model and split the data, and Plotly to visualize. Dependencies include Plotly Express and Graph Objects for plotting, and Scikit-learn for regression and data splitting. The model illustrates its fit on training and test data with a predictive line.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = px.data.tips()\nX = df.total_bill.to_numpy()[:, None]\nX_train, X_test, y_train, y_test = train_test_split(X, df.tip, random_state=0)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nx_range = np.linspace(X.min(), X.max(), 100)\ny_range = model.predict(x_range.reshape(-1, 1))\n\nfig = go.Figure([\n    go.Scatter(x=X_train.squeeze(), y=y_train, name='train', mode='markers'),\n    go.Scatter(x=X_test.squeeze(), y=y_test, name='test', mode='markers'),\n    go.Scatter(x=x_range, y=y_range, name='prediction')\n])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Fitting Multiple Trendlines and Retrieving Model Parameters\nDESCRIPTION: Shows how to fit multiple trendlines based on data subsets using facet plots and color encoding. Also demonstrates how to access and inspect the underlying statistical model parameters using px.get_trendline_results().\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", facet_col=\"smoker\", color=\"sex\", trendline=\"ols\")\nfig.show()\n\nresults = px.get_trendline_results(fig)\nprint(results)\n\nresults.query(\"sex == 'Male' and smoker == 'Yes'\").px_fit_results.iloc[0].summary()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly FigureWidget from Figure (Python)\nDESCRIPTION: This snippet demonstrates constructing a FigureWidget from a standard Figure object.  It first creates a Heatmap trace and a Layout object, then combines them into a Figure object. Finally, it creates a FigureWidget from this Figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ntrace = go.Heatmap(z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],\n                   x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n                   y=['Morning', 'Afternoon', 'Evening'])\ndata=[trace]\nlayout = go.Layout(title=dict(text='Activity Heatmap'))\n\nfigure = go.Figure(data=data, layout=layout)\n\nf2 = go.FigureWidget(figure)\nf2\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Usage in Plotly Express\nDESCRIPTION: Demonstrates using dataframe indices, columns from multiple dataframes, and custom labels in Plotly Express functions. It also shows how to use array-like objects and dictionaries as input data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/px-arguments.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=df.sepal_length, y=df.sepal_width, size=df.petal_length,\n                 hover_data=[df.index])\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf1 = pd.DataFrame(dict(time=[10, 20, 30], sales=[10, 8, 30]))\ndf2 = pd.DataFrame(dict(market=[4, 2, 5]))\nfig = px.bar(df1, x=\"time\", y=df2.market, color=\"sales\")\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = px.data.gapminder()\ngdp = df['pop'] * df['gdpPercap']\nfig = px.bar(df, x='year', y=gdp, color='continent', labels={'y':'gdp'},\n             hover_data=['country'],\n             title='Evolution of world GDP')\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\n# List arguments\nfig = px.line(x=[1, 2, 3, 4], y=[3, 5, 4, 8])\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\n# List arguments in wide form\nseries1 = [3, 5, 4, 8]\nseries2 = [5, 4, 8, 3]\nfig = px.line(x=[1, 2, 3, 4], y=[series1, series2])\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nN = 10000\nnp.random.seed(0)\nfig = px.density_contour(dict(effect_size=5 + np.random.randn(N),\n                              waiting_time=np.random.poisson(size=N)),\n                         x=\"effect_size\", y=\"waiting_time\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Traces to Plotly Express Figure\nDESCRIPTION: Demonstrates adding custom traces to a Plotly Express scatter plot using add_trace()\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 title=\"Using The add_trace() method With A Plotly Express Figure\")\n\nfig.add_trace(\n    go.Scatter(\n        x=[2, 4],\n        y=[4, 8],\n        mode=\"lines\",\n        line=go.scatter.Line(color=\"gray\"),\n        showlegend=False)\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Scatter Plot with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create an animated scatter plot using Plotly Express, visualizing Gapminder data over time. It shows how to set animation frames by year and groups by country, with fixed axis ranges to ensure visibility throughout the animation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder()\npx.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\",\n           log_x=True, size_max=55, range_x=[100,100000], range_y=[25,90])\n```\n\n----------------------------------------\n\nTITLE: Creating Connected Scatterplot with Plotly Express\nDESCRIPTION: Demonstrates how to create a connected scatterplot showing the relationship between GDP per capita and life expectancy for different countries over time using Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country in ['Canada', 'Botswana']\")\n\nfig = px.line(df, x=\"lifeExp\", y=\"gdpPercap\", color=\"country\", text=\"year\")\nfig.update_traces(textposition=\"bottom right\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Regularization Across Cross-Validation Folds with LassoCV\nDESCRIPTION: This code visualizes the results of different regularization strengths (alpha values) across cross-validation folds using LassoCV. Using the Gapminder dataset to predict life expectancy, it shows how mean squared error varies with different alpha values for each fold and the mean across all folds. A vertical line marks the optimal alpha value selected by the model.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.preprocessing import StandardScaler\n\nN_FOLD = 6\n\n# Load and preprocess the data\ndf = px.data.gapminder()\nX = df.drop(columns=['lifeExp', 'iso_num'])\nX = pd.get_dummies(X, columns=['country', 'continent', 'iso_alpha'])\ny = df['lifeExp']\n\n# Normalize the data\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Train model to predict life expectancy\nmodel = LassoCV(cv=N_FOLD)\nmodel.fit(X_scaled, y)\nmean_alphas = model.mse_path_.mean(axis=-1)\n\nfig = go.Figure([\n    go.Scatter(\n        x=model.alphas_, y=model.mse_path_[:, i],\n        name=f\"Fold: {i+1}\", opacity=.5, line=dict(dash='dash'),\n        hovertemplate=\"alpha: %{x} <br>MSE: %{y}\"\n    )\n    for i in range(N_FOLD)\n])\nfig.add_traces(go.Scatter(\n    x=model.alphas_, y=mean_alphas,\n    name='Mean', line=dict(color='black', width=3),\n    hovertemplate=\"alpha: %{x} <br>MSE: %{y}\",\n))\n\nfig.add_shape(\n    type=\"line\", line=dict(dash='dash'),\n    x0=model.alpha_, y0=0,\n    x1=model.alpha_, y1=1,\n    yref='paper'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title=dict(\n            text='alpha'\n        ),\n        type='log'\n    ),\n    yaxis=dict(\n        title=dict(\n            text='Mean Square Error (MSE)'\n        )\n    ),\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Connected Scatterplots in Python with Plotly\nDESCRIPTION: Demonstrates how to create a connected scatterplot showing the trajectory of countries through GDP per capita and life expectancy space. The plot includes text labels for years and uses different colors for each country, showing how two continuous variables can be plotted against each other with meaningful connections.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country in ['Canada', 'Botswana']\")\n\nfig = px.line(df, x=\"lifeExp\", y=\"gdpPercap\", color=\"country\", text=\"year\")\nfig.update_traces(textposition=\"bottom right\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scatter Plot with NumPy Arrays in Plotly\nDESCRIPTION: This snippet demonstrates how to use NumPy arrays to generate a 3D scatter plot with 10,000 data points using Plotly's go.Scatter3d. It showcases the use of different NumPy data types for improved performance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/performance.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nnp.random.seed(1)\n\n# Number of data points\nN = 10000\n\n# Generate random data\nx = np.random.randn(N)\ny = np.random.randn(N).astype('float32')\nz = np.random.randint(size=N, low=0, high=256, dtype='uint8')\nc = np.random.randint(size=N, low=-10, high=10, dtype='int8')\n\nfig = go.Figure(data=[go.Scatter3d(\n    x=x,\n    y=y,\n    z=z,\n    marker=dict(color=c),\n    mode='markers',\n    opacity=0.2\n)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plotly Express Histogram\nDESCRIPTION: Creates a simple histogram using Plotly Express with default styling, showing total bills by day and gender.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/styling-plotly-express.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"day\", y=\"total_bill\", color=\"sex\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 2x2 Multiple Subplots in Plotly Python\nDESCRIPTION: Shows how to create a 2x2 grid of subplots, each containing a scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2, start_cell=\"bottom-left\")\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),\n              row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),\n              row=1, col=2)\n\nfig.add_trace(go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),\n              row=2, col=2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Residual Plots for Regression Model Diagnostics\nDESCRIPTION: This code demonstrates how to create residual plots to diagnose regression model performance. It splits the Iris dataset into train and test sets, fits a linear regression model, calculates residuals (prediction - actual), and visualizes them with a scatter plot and violin plot marginals. The visualization helps identify patterns in prediction errors and potential model issues.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = px.data.iris()\n\n# Split data into training and test splits\ntrain_idx, test_idx = train_test_split(df.index, test_size=.25, random_state=0)\ndf['split'] = 'train'\ndf.loc[test_idx, 'split'] = 'test'\n\nX = df[['sepal_width', 'sepal_length']]\nX_train = df.loc[train_idx, ['sepal_width', 'sepal_length']]\ny_train = df.loc[train_idx, 'petal_width']\n\n# Condition the model on sepal width and length, predict the petal width\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ndf['prediction'] = model.predict(X)\ndf['residual'] = df['prediction'] - df['petal_width']\n\nfig = px.scatter(\n    df, x='prediction', y='residual',\n    marginal_y='violin',\n    color='split', trendline='ols'\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Graph Objects Constructor\nDESCRIPTION: Shows how to create a bar chart by passing trace and layout specifications to the Figure constructor using a mix of graph objects and dictionaries\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=dict(title=dict(text=\"A Figure Specified By A Graph Object\"))\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Titles with Graph Objects\nDESCRIPTION: Demonstrates how to set axis titles using update_xaxes and update_yaxes methods with Graph Objects. Creates a line plot with custom axis titles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.line(y=[1, 0])\n\nfig.update_xaxes(title_text='Time')\nfig.update_yaxes(title_text='Value A')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Ternary Scatter Plot with Plotly Express\nDESCRIPTION: This snippet creates a ternary scatter plot using Plotly Express to visualize the distribution of votes among three candidates in a municipal election. It uses the `px.scatter_ternary` function with the 'Joly', 'Coderre', and 'Bergeron' columns as the a, b, and c axes, respectively. The data is sourced from `px.data.election()`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.election()\nfig = px.scatter_ternary(df, a=\"Joly\", b=\"Coderre\", c=\"Bergeron\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dual Y-Axis Plot in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a figure with two y-axes using Plotly's graph objects and make_subplots function. It includes adding traces to primary and secondary y-axes, setting titles, and updating axis properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/multiple-axes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add traces\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name=\"yaxis data\"),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=[2, 3, 4], y=[4, 5, 6], name=\"yaxis2 data\"),\n    secondary_y=True,\n)\n\n# Add figure title\nfig.update_layout(\n    title_text=\"Double Y Axis Example\"\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"xaxis title\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>primary</b> yaxis title\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>secondary</b> yaxis title\", secondary_y=True)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 2x2 3D Surface Subplots with Different Colorscales in Plotly\nDESCRIPTION: Creates a figure with four 3D surface plots arranged in a 2x2 grid. Each surface plot displays the same 3D function z = x^3 + y^3 but uses different colorscales (Viridis, RdBu, YlOrRd, and YlGnBu). The code demonstrates the use of make_subplots for 3D visualization and surface plot customization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-subplots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport numpy as np\n\n# Initialize figure with 4 3D subplots\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{'type': 'surface'}, {'type': 'surface'}],\n           [{'type': 'surface'}, {'type': 'surface'}]])\n\n# Generate data\nx = np.linspace(-5, 80, 10)\ny = np.linspace(-5, 60, 10)\nxGrid, yGrid = np.meshgrid(y, x)\nz = xGrid ** 3 + yGrid ** 3\n\n# adding surfaces to subplots.\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='Viridis', showscale=False),\n    row=1, col=1)\n\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='RdBu', showscale=False),\n    row=1, col=2)\n\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='YlOrRd', showscale=False),\n    row=2, col=1)\n\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='YlGnBu', showscale=False),\n    row=2, col=2)\n\nfig.update_layout(\n    title_text='3D subplots with different colorscales',\n    height=800,\n    width=800\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Size and Color using Plotly Express\nDESCRIPTION: This snippet showcases creating a scatter plot with variable marker sizes and colors determined by DataFrame columns. It uses `px.scatter` with the `color` parameter set to 'species' and the `size` parameter set to 'petal_length', with additional hover data from 'petal_width'. The resulting plot visualizes the relationship between sepal width and length, colored by species and sized by petal length.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\\\"sepal_width\\\", y=\\\"sepal_length\\\", color=\\\"species\\\",\n                 size='petal_length', hover_data=['petal_width'])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart using plotly.express in Python\nDESCRIPTION: This snippet demonstrates how to create a line chart plotting Google's stock data using the `plotly.express` library. It imports the `plotly.express` library and utilizes its `line` function to visualize stock prices over time.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Using plotly.express\nimport plotly.express as px\n\ndf = px.data.stocks()\nfig = px.line(df, x='date', y=\"GOOG\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Enhanced Prediction Error Analysis with Train-Test Split and Marginal Histograms\nDESCRIPTION: This code creates an advanced prediction error visualization that includes train-test split coloring and marginal histograms to diagnose prediction bias. It splits the Iris dataset into training and test sets, trains a linear regression model on the training data, and visualizes the prediction error with OLS trendlines to quickly identify how well the model generalizes across different data splits.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = px.data.iris()\n\n# Split data into training and test splits\ntrain_idx, test_idx = train_test_split(df.index, test_size=.25, random_state=0)\ndf['split'] = 'train'\ndf.loc[test_idx, 'split'] = 'test'\n\nX = df[['sepal_width', 'sepal_length']]\ny = df['petal_width']\nX_train = df.loc[train_idx, ['sepal_width', 'sepal_length']]\ny_train = df.loc[train_idx, 'petal_width']\n\n# Condition the model on sepal width and length, predict the petal width\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ndf['prediction'] = model.predict(X)\n\nfig = px.scatter(\n    df, x='petal_width', y='prediction',\n    marginal_x='histogram', marginal_y='histogram',\n    color='split', trendline='ols'\n)\nfig.update_traces(histnorm='probability', selector={'type':'histogram'})\nfig.add_shape(\n    type=\"line\", line=dict(dash='dash'),\n    x0=y.min(), y0=y.min(),\n    x1=y.max(), y1=y.max()\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plots on Date Axes in Python\nDESCRIPTION: Shows how to create a line plot with a date axis using stock price data. Plotly automatically recognizes date formats and sets the appropriate axis type, making it easy to create time-series visualizations without explicit axis configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks()\nfig = px.line(df, x='date', y=\"GOOG\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Axes using Plotly's Low-level API in Python\nDESCRIPTION: This snippet shows how to create a figure with multiple axes using Plotly's low-level API. It demonstrates adding traces to different y-axes, creating and customizing multiple y-axis objects, and updating layout properties for a complex multi-axis plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/multiple-axes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6],\n    name=\"yaxis1 data\"\n))\n\n\nfig.add_trace(go.Scatter(\n    x=[2, 3, 4],\n    y=[40, 50, 60],\n    name=\"yaxis2 data\",\n    yaxis=\"y2\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[4, 5, 6],\n    y=[40000, 50000, 60000],\n    name=\"yaxis3 data\",\n    yaxis=\"y3\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[5, 6, 7],\n    y=[400000, 500000, 600000],\n    name=\"yaxis4 data\",\n    yaxis=\"y4\"\n))\n\n\n# Create axis objects\nfig.update_layout(\n    xaxis=dict(\n        domain=[0.3, 0.7]\n    ),\n    yaxis=dict(\n        title=dict(\n            text=\"yaxis title\",\n            font=dict(\n                color=\"#1f77b4\"\n            )\n        ),\n    ),\n    yaxis2=dict(\n        title=dict(\n            text=\"yaxis2 title\",\n            font=dict(\n                color=\"#ff7f0e\"\n            )\n        ),\n        anchor=\"free\",\n        overlaying=\"y\",\n        side=\"left\",\n        position=0.15\n    ),\n    yaxis3=dict(\n        title=dict(\n            text=\"yaxis3 title\",\n            font=dict(\n                color=\"#d62728\"\n            )\n        ),\n        anchor=\"x\",\n        overlaying=\"y\",\n        side=\"right\"\n    ),\n    yaxis4=dict(\n        title=dict(\n            text=\"yaxis4 title\",\n            font=dict(\n                color=\"#9467bd\"\n            )\n        ),\n        anchor=\"free\",\n        overlaying=\"y\",\n        side=\"right\",\n        position=0.85\n    )\n)\n\n# Update layout properties\nfig.update_layout(\n    title_text=\"multiple y-axes example\",\n    width=800,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Integrating Plotly with Jupyter Notebook\nDESCRIPTION: Commands for installing the necessary packages to display Plotly visualizations in Jupyter Notebooks outside of JupyterLab.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install \"notebook>=7.0\" \"anywidget>=0.9.13\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nconda install \"notebook>=7.0\" \"anywidget>=0.9.13\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Multiple Linear Regression Coefficients with Bar Charts\nDESCRIPTION: This code demonstrates how to visualize the coefficients of a multiple linear regression model using a bar chart in Plotly Express. The model is trained on the Iris dataset to predict petal width, and the bar chart shows the weight (coefficient) of each feature in the prediction, color-coded by whether the coefficient is positive or negative.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\n\ndf = px.data.iris()\n\nX = df.drop(columns=['petal_width', 'species_id'])\nX = pd.get_dummies(X, columns=['species'], prefix_sep='=')\ny = df['petal_width']\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\ncolors = ['Positive' if c > 0 else 'Negative' for c in model.coef_]\n\nfig = px.bar(\n    x=X.columns, y=model.coef_, color=colors,\n    color_discrete_sequence=['red', 'blue'],\n    labels=dict(x='Feature', y='Linear coefficient'),\n    title='Weight of each feature for predicting petal width'\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Threshold-Based Peak Detection\nDESCRIPTION: Demonstrates advanced peak detection using a threshold parameter to identify only the highest peaks in the time series data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/peak-finding.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nimport pandas as pd\nfrom scipy.signal import find_peaks\n\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\n\nindices = find_peaks(time_series, threshold=20)[0]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    y=time_series,\n    mode='lines+markers',\n    name='Original Plot'\n))\n\nfig.add_trace(go.Scatter(\n    x=indices,\n    y=[time_series[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='red',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Events in Plotly Scatter Plot\nDESCRIPTION: Creates an interactive scatter plot where points change color and size when clicked. Uses NumPy for random data generation and Plotly's FigureWidget for interactivity. The callback function updates point properties in response to click events.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/click-events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\n\nx = np.random.rand(100)\ny = np.random.rand(100)\n\nf = go.FigureWidget([go.Scatter(x=x, y=y, mode='markers')])\n\nscatter = f.data[0]\ncolors = ['#a3a7e4'] * 100\nscatter.marker.color = colors\nscatter.marker.size = [10] * 100\nf.layout.hovermode = 'closest'\n\n\n# create our callback function\ndef update_point(trace, points, selector):\n    c = list(scatter.marker.color)\n    s = list(scatter.marker.size)\n    for i in points.point_inds:\n        c[i] = '#bae2be'\n        s[i] = 20\n        with f.batch_update():\n            scatter.marker.color = c\n            scatter.marker.size = s\n\n\nscatter.on_click(update_point)\n\nf\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Shared Axes using Low-Level API - Python\nDESCRIPTION: This snippet shows how to create subplots that share axes using the low-level API of Plotly. It defines multiple traces and associates them with specific axes through layout configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 3, 4]\n)\ntrace2 = go.Scatter(\n    x=[20, 30, 40],\n    y=[5, 5, 5],\n    xaxis=\"x2\",\n    yaxis=\"y\"\n)\ntrace3 = go.Scatter(\n    x=[2, 3, 4],\n    y=[600, 700, 800],\n    xaxis=\"x\",\n    yaxis=\"y3\"\n)\ntrace4 = go.Scatter(\n    x=[4000, 5000, 6000],\n    y=[7000, 8000, 9000],\n    xaxis=\"x4\",\n    yaxis=\"y4\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor=\"y4\"\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor=\"x4\"\n    )\n)\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bar Chart with Plotly Express\nDESCRIPTION: Demonstrates creating a simple bar chart using Plotly Express with data from the gapminder dataset filtered for Canada. Shows population over years.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndata_canada = px.data.gapminder().query(\"country == 'Canada'\")\nfig = px.bar(data_canada, x='year', y='pop')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating US Map Small Multiples for Walmart Store Expansion Using Plotly\nDESCRIPTION: This code creates a visualization of Walmart store openings across the United States from 1962 to 2006. It generates a grid of small US maps showing store locations for each year, along with two sparklines that display the number of new stores per year and the cumulative store count. The visualization uses scattergeo plots positioned in a custom layout grid.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-subplots-and-small-multiples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/1962_2006_walmart_store_openings.csv')\ndf.head()\n\ndata = []\nlayout = dict(\n    title = 'New Walmart Stores per year 1962-2006<br>\\\nSource: <a href=\"http://www.econ.umn.edu/~holmes/data/WalMart/index.html\">\\\nUniversity of Minnesota</a>',\n    # showlegend = False,\n    autosize = False,\n    width = 1000,\n    height = 900,\n    hovermode = False,\n    legend = dict(\n        x=0.7,\n        y=-0.1,\n        bgcolor=\"rgba(255, 255, 255, 0)\",\n        font = dict( size=11 ),\n    )\n)\nyears = df['YEAR'].unique()\n\nfor i in range(len(years)):\n    geo_key = 'geo'+str(i+1) if i != 0 else 'geo'\n    lons = list(df[ df['YEAR'] == years[i] ]['LON'])\n    lats = list(df[ df['YEAR'] == years[i] ]['LAT'])\n    # Walmart store data\n    data.append(\n        dict(\n            type = 'scattergeo',\n            showlegend=False,\n            lon = lons,\n            lat = lats,\n            geo = geo_key,\n            name = int(years[i]),\n            marker = dict(\n                color = \"rgb(0, 0, 255)\",\n                opacity = 0.5\n            )\n        )\n    )\n    # Year markers\n    data.append(\n        dict(\n            type = 'scattergeo',\n            showlegend = False,\n            lon = [-78],\n            lat = [47],\n            geo = geo_key,\n            text = [years[i]],\n            mode = 'text',\n        )\n    )\n    layout[geo_key] = dict(\n        scope = 'usa',\n        showland = True,\n        landcolor = 'rgb(229, 229, 229)',\n        showcountries = False,\n        domain = dict( x = [], y = [] ),\n        subunitcolor = \"rgb(255, 255, 255)\",\n    )\n\n\ndef draw_sparkline( domain, lataxis, lonaxis ):\n    ''' Returns a sparkline layout object for geo coordinates  '''\n    return dict(\n        showland = False,\n        showframe = False,\n        showcountries = False,\n        showcoastlines = False,\n        domain = domain,\n        lataxis = lataxis,\n        lonaxis = lonaxis,\n        bgcolor = 'rgba(255,200,200,0.0)'\n    )\n\n# Stores per year sparkline\nlayout['geo44'] = draw_sparkline({'x':[0.6,0.8], 'y':[0,0.15]}, \\\n                                 {'range':[-5.0, 30.0]}, {'range':[0.0, 40.0]} )\ndata.append(\n    dict(\n        type = 'scattergeo',\n        mode = 'lines',\n        lat = list(df.groupby(by=['YEAR']).count()['storenum']/1e1),\n        lon = list(range(len(df.groupby(by=['YEAR']).count()['storenum']/1e1))),\n        line = dict( color = \"rgb(0, 0, 255)\" ),\n        name = \"New stores per year<br>Peak of 178 stores per year in 1990\",\n        geo = 'geo44',\n    )\n)\n\n# Cumulative sum sparkline\nlayout['geo45'] = draw_sparkline({'x':[0.8,1], 'y':[0,0.15]}, \\\n                                 {'range':[-5.0, 50.0]}, {'range':[0.0, 50.0]} )\ndata.append(\n    dict(\n        type = 'scattergeo',\n        mode = 'lines',\n        lat = list(df.groupby(by=['YEAR']).count().cumsum()['storenum']/1e2),\n        lon = list(range(len(df.groupby(by=['YEAR']).count()['storenum']/1e1))),\n        line = dict( color = \"rgb(214, 39, 40)\" ),\n        name =\"Cumulative sum<br>3176 stores total in 2006\",\n        geo = 'geo45',\n    )\n)\n\nz = 0\nCOLS = 5\nROWS = 9\nfor y in reversed(range(ROWS)):\n    for x in range(COLS):\n        geo_key = 'geo'+str(z+1) if z != 0 else 'geo'\n        layout[geo_key]['domain']['x'] = [float(x)/float(COLS), float(x+1)/float(COLS)]\n        layout[geo_key]['domain']['y'] = [float(y)/float(ROWS), float(y+1)/float(ROWS)]\n        z=z+1\n        if z > 42:\n            break\n\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(width=800)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Integrating Plotly with JupyterLab\nDESCRIPTION: Commands for installing JupyterLab and anywidget packages, which are necessary to display Plotly visualizations within JupyterLab notebooks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install jupyterlab anywidget\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install jupyterlab anywidget\n```\n\n----------------------------------------\n\nTITLE: Creating a Wind Rose Chart with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a wind rose chart using the Plotly Express library. It utilizes the 'px.bar_polar' function to visualize wind frequency versus direction, highlighting various strength categories with distinct colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wind-rose-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.wind()\nfig = px.bar_polar(df, r=\"frequency\", theta=\"direction\",\n                   color=\"strength\", template=\"plotly_dark\",\n                   color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Simple 3D Bubble Chart with Plotly Graph Objects\nDESCRIPTION: This snippet shows how to create a simple 3D bubble chart using Plotly Graph Objects. It uses a subset of Gapminder data to plot year, continent, population, GDP per capita, and life expectancy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-bubble-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\n# Get Data: this ex will only use part of it (i.e. rows 750-1500)\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')\n\nstart, end = 750, 1500\n\nfig = go.Figure(data=go.Scatter3d(\n    x=df['year'][start:end],\n    y=df['continent'][start:end],\n    z=df['pop'][start:end],\n    text=df['country'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=750,\n        size=df['gdpPercap'][start:end],\n        color = df['lifeExp'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'Life<br>Expectancy',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\nfig.update_layout(height=800, width=800,\n                  title=dict(text='Examining Population and Life Expectancy Over Time'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customized Geographic Scatter Plot\nDESCRIPTION: Creates a customized geographical scatter plot with color coding by continent, hover information, and natural earth projection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/scatter-plots-on-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\",\n                     color=\"continent\", # which column to use to set the color of markers\n                     hover_name=\"country\", # column added to hover information\n                     size=\"pop\", # size of markers\n                     projection=\"natural earth\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Linear Regression using Plotly Express\nDESCRIPTION: This snippet generates a scatter plot with a linear regression trendline using `plotly.express`. It loads the `tips` dataset, then uses `px.scatter` with 'total_bill' as x, 'tip' as y, and `trendline` set to \"ols\", which adds an ordinary least squares regression line to the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\\\"total_bill\\\", y=\\\"tip\\\", trendline=\\\"ols\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting the Surface Color in 3D Plots using Plotly in Python\nDESCRIPTION: This script exemplifies using the surfacecolor attribute to dynamically color a 3D surface based on its distance from the origin. The Plotly plot compares a default z-based coloring to a distance-based coloring, highlighting the flexibility in surface data visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-surface-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Equation of ring cyclide\n# see https://en.wikipedia.org/wiki/Dupin_cyclide\nimport numpy as np\na, b, d = 1.32, 1., 0.8\nc = a**2 - b**2\nu, v = np.mgrid[0:2*np.pi:100j, 0:2*np.pi:100j]\nx = (d * (c - a * np.cos(u) * np.cos(v)) + b**2 * np.cos(u)) / (a - c * np.cos(u) * np.cos(v))\ny = b * np.sin(u) * (a - d*np.cos(v)) / (a - c * np.cos(u) * np.cos(v))\nz = b * np.sin(v) * (c*np.cos(u) - d) / (a - c * np.cos(u) * np.cos(v))\n\nfig = make_subplots(rows=1, cols=2,\n                    specs=[[{'is_3d': True}, {'is_3d': True}]],\n                    subplot_titles=['Color corresponds to z', 'Color corresponds to distance to origin'],\n                    )\n\nfig.add_trace(go.Surface(x=x, y=y, z=z, colorbar_x=-0.07), 1, 1)\nfig.add_trace(go.Surface(x=x, y=y, z=z, surfacecolor=x**2 + y**2 + z**2), 1, 2)\nfig.update_layout(title_text=\"Ring cyclide\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating a Topographical 3D Surface Plot using Plotly in Python\nDESCRIPTION: This script creates a simple 3D surface plot using data from a CSV file. It utilizes the Plotly library and pandas to read data and plot a surface elevation graph. The layout is customized with a specific title, size, and margins. This plot is beneficial for topographical visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-surface-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\nfig = go.Figure(data=[go.Surface(z=z_data.values)])\n\nfig.update_layout(title=dict(text='Mt Bruno Elevation'), autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Discrete Color Scatter Plot with String Values\nDESCRIPTION: Creates a scatter plot using the tips dataset where colors are assigned based on the categorical 'smoker' column.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"smoker\",\n                 title=\"String 'smoker' values mean discrete colors\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Continuous Color using Plotly Express\nDESCRIPTION: This snippet demonstrates creating a scatter plot with a continuous color scale based on a DataFrame column.  It uses `px.scatter` with the `color` parameter set to 'petal_length', resulting in a plot where the color of each point represents the value of the 'petal_length' column.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\\\"sepal_width\\\", y=\\\"sepal_length\\\", color='petal_length')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Relative Barmode Using Plotly in Python\nDESCRIPTION: This example uses plotly.graph_objects to demonstrate the relative barmode effect. The chart enables bars to be stacked by net values, with negative bars extending below the axis and positives above, indicating a more dynamic range of values within categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nx = [1, 2, 3, 4]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16]))\nfig.add_trace(go.Bar(x=x, y=[6, -8, -4.5, 8]))\nfig.add_trace(go.Bar(x=x, y=[-15, -3, 4.5, -8]))\nfig.add_trace(go.Bar(x=x, y=[-1, 3, -3, -4]))\n\nfig.update_layout(barmode='relative', title_text='Relative Barmode')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperlinks to Table Cells in Plotly Python\nDESCRIPTION: This code snippet demonstrates how to add hyperlinks to table cells using HTML anchor tags within the data matrix.  It imports `plotly.figure_factory` and constructs a data matrix containing HTML links. The `create_table` function generates the table, and `fig.show()` displays it.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\ndata_matrix = [['User', 'Language', 'Chart Type', '# of Views'],\n               ['<a href=\"https://plotly.com/~empet/folder/home\">empet</a>',\n                '<a href=\"https://plotly.com/python/\">Python</a>',\n                '<a href=\"https://plotly.com/~empet/8614/\">Network Graph</a>',\n                298],\n               ['<a href=\"https://plotly.com/~Grondo/folder/home\">Grondo</a>',\n                '<a href=\"https://plotly.com/matlab/\">Matlab</a>',\n                '<a href=\"https://plotly.com/~Grondo/42/\">Subplots</a>',\n                356],\n               ['<a href=\"https://plotly.com/~Dreamshot/folder/home\">Dreamshot</a>',\n                '<a href=\"https://help.plot.ly/tutorials/\">Web App</a>',\n                '<a href=\"https://plotly.com/~Dreamshot/6575/_2014-us-city-populations/\">Bubble Map</a>',\n                262],\n               ['<a href=\"https://plotly.com/~FiveThirtyEight/folder/home\">FiveThirtyEight</a>',\n                '<a href=\"https://help.plot.ly/tutorials/\">Web App</a>',\n                '<a href=\"https://plotly.com/~FiveThirtyEight/30/\">Scatter</a>',\n                692],\n               ['<a href=\"https://plotly.com/~cpsievert/folder/home\">cpsievert</a>',\n                '<a href=\"https://plotly.com/r/\">R</a>',\n                '<a href=\"https://plotly.com/~cpsievert/1130/\">Surface</a>',\n                302]]\n\nfig = ff.create_table(data_matrix)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with DataFrame Columns using Plotly Express\nDESCRIPTION: This snippet creates a scatter plot using `plotly.express` with `x` and `y` values taken from DataFrame columns. It loads the iris dataset as a pandas DataFrame using `px.data.iris()`, then calls `px.scatter` to generate the plot using column names 'sepal_width' and 'sepal_length'. Finally, it displays the plot using `fig.show()`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# x and y given as DataFrame columns\nimport plotly.express as px\ndf = px.data.iris() # iris is a pandas DataFrame\nfig = px.scatter(df, x=\\\"sepal_width\\\", y=\\\"sepal_length\\\")\nfig.show()\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Savitzky-Golay Filter Smoothing with Plotly in Python\nDESCRIPTION: This code demonstrates the application of the Savitzky-Golay Filter for smoothing noisy sine wave data. It creates a Plotly figure with three traces: the original sine wave, noisy data, and smoothed data using the Savitzky-Golay filter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/smoothing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n\nnp.random.seed(1)\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nnoise = 2 * np.random.random(len(x)) - 1 # uniformly distributed between -1 and 1\ny_noise = y + noise\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    marker=dict(size=2, color='black'),\n    name='Sine'\n))\n\nfig.add_trace(go.Scatter(\n    x=x,\n    y=y_noise,\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='royalblue',\n        symbol='circle-open'\n    ),\n    name='Noisy Sine'\n))\n\nfig.add_trace(go.Scatter(\n    x=x,\n    y=signal.savgol_filter(y_noise,\n                           53, # window size used for filtering\n                           3), # order of fitted polynomial\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='mediumpurple',\n        symbol='triangle-up'\n    ),\n    name='Savitzky-Golay'\n))\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Subplots with Plotly Graph Objects in Python\nDESCRIPTION: This code snippet demonstrates how to create a complex figure with mixed subplots using Plotly graph objects and the make_subplots function. It includes a scattergeo plot of volcano locations, a bar chart of volcano frequencies by country, and a 3D surface plot of a volcano. The code also shows how to customize the layout and styling of the subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/mixed-subplots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport pandas as pd\n\n# read in volcano database data\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv\",\n    encoding=\"iso-8859-1\",\n)\n\n# frequency of Country\nfreq = df['Country'].value_counts().reset_index()\nfreq.columns = ['x', 'Country']\n\n# read in 3d volcano surface data\ndf_v = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# Initialize figure with subplots\nfig = make_subplots(\n    rows=2, cols=2,\n    column_widths=[0.6, 0.4],\n    row_heights=[0.4, 0.6],\n    specs=[[{\"type\": \"scattergeo\", \"rowspan\": 2}, {\"type\": \"bar\"}],\n           [            None                    , {\"type\": \"surface\"}]])\n\n# Add scattergeo globe map of volcano locations\nfig.add_trace(\n    go.Scattergeo(lat=df[\"Latitude\"],\n                  lon=df[\"Longitude\"],\n                  mode=\"markers\",\n                  hoverinfo=\"text\",\n                  showlegend=False,\n                  marker=dict(color=\"crimson\", size=4, opacity=0.8)),\n    row=1, col=1\n)\n\n# Add locations bar chart\nfig.add_trace(\n    go.Bar(x=freq[\"x\"][0:10],y=freq[\"Country\"][0:10], marker=dict(color=\"crimson\"), showlegend=False),\n    row=1, col=2\n)\n\n# Add 3d surface of volcano\nfig.add_trace(\n    go.Surface(z=df_v.values.tolist(), showscale=False),\n    row=2, col=2\n)\n\n# Update geo subplot properties\nfig.update_geos(\n    projection_type=\"orthographic\",\n    landcolor=\"white\",\n    oceancolor=\"MidnightBlue\",\n    showocean=True,\n    lakecolor=\"LightBlue\"\n)\n\n# Rotate x-axis labels\nfig.update_xaxes(tickangle=45)\n\n# Set theme, margin, and annotation in layout\nfig.update_layout(\n    template=\"plotly_dark\",\n    margin=dict(r=10, t=25, b=40, l=60),\n    annotations=[\n        dict(\n            text=\"Source: NOAA\",\n            showarrow=False,\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0,\n            y=0)\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D Scatter Plot with Color and Symbol\nDESCRIPTION: This snippet creates a 3D scatter plot with Plotly Express, adding a fourth dimension with color and using symbols to represent different species. It imports `plotly.express`, loads the Iris dataset, and plots a 3D scatter plot where 'petal_length' determines the color and 'species' the symbol of each data point.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-scatter-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width',\n                    color='petal_length', symbol='species')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Figure Using Graph Objects\nDESCRIPTION: Shows how to create the same bar chart using Plotly's graph objects interface, which provides better validation and convenience methods\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=go.Layout(\n        title=go.layout.Title(text=\"A Figure Specified By A Graph Object\")\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled 3D Scatter Plot with Plotly Express\nDESCRIPTION: This snippet demonstrates how to customize the style of a 3D scatter plot using Plotly Express by adjusting the size, color, symbol, and opacity of the markers. It also adjusts the layout to have tight margins. The code imports `plotly.express`, loads the Iris dataset, and creates a scatter plot with customizations before updating the layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-scatter-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width',\n              color='petal_length', size='petal_length', size_max=18,\n              symbol='species', opacity=0.7)\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Marginal Distribution using Plotly Express\nDESCRIPTION: This snippet generates a scatter plot with marginal distribution plots using `plotly.express`. It loads the `iris` dataset and uses `px.scatter` with 'sepal_length' as x, 'sepal_width' as y, 'histogram' for `marginal_x`, and 'rug' for `marginal_y`, creating histograms and rug plots along the x and y axes, respectively.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\\\"sepal_length\\\", y=\\\"sepal_width\\\", marginal_x=\\\"histogram\\\", marginal_y=\\\"rug\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart From Aggregating a DataFrame with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to visualize aggregated DataFrame data as a stacked bar chart using plotly.graph_objects. It aggregates and summarizes data using pandas, making it suitable for generating comprehensive insights into categorical distributions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\nimport pandas as pd\n\n# Get one year of gapminder data\nurl = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'\ndf = pd.read_csv(url)\ndf = df[df['year']==2007]\ndf[\"gdp\"]=df[\"pop\"]*df['gdpPercap']\n\n\n# Build the summary of interest\ndf_summarized = df.groupby(\"continent\", observed=True).agg(\"sum\").reset_index()\n\ndf_summarized[\"percent of world population\"]=100*df_summarized[\"pop\"]/df_summarized[\"pop\"].sum()\ndf_summarized[\"percent of world GDP\"]=100*df_summarized[\"gdp\"]/df_summarized[\"gdp\"].sum()\n\n\ndf = df_summarized[[\"continent\",\n\"percent of world population\",\n\"percent of world GDP\",\n]]\n\n# We now have a wide data frame, but it's in the opposite orientation from the one that px is designed to deal with.\n# Transposing it and rebuilding the indexes is an option, but iterating through the DF using graph objects is more succinct.\n\nfig=go.Figure()\nfor category in df_summarized[\"continent\"].values:\n    fig.add_trace(go.Bar(\n            x=df.columns[1:],\n            # We need to get a pandas series that contains just the values to graph;\n            # We do so by selecting the right row, selecting the right columns\n            # and then transposing and using iloc to convert to a series\n            # Here, we assume that the bar element category variable is in column 0\n            y=list(df.loc[df[\"continent\"]==category][list(df.columns[1:])].transpose().iloc[:,0]),\n            name=str(category)\n\n\n        )\n)\nfig.update_layout(barmode=\"stack\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Reading Image Arrays from Files using skimage\nDESCRIPTION: Shows how to load images from URLs or local files using skimage library and visualize them with px.imshow, supporting various image sources\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import io\nimg = io.imread('https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Crab_Nebula.jpg/240px-Crab_Nebula.jpg')\nfig = px.imshow(img)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Taxi Ride Distribution using Datashader and Plotly Express\nDESCRIPTION: This example shows how to use Datashader to create a rasterized representation of taxi ride data in New York City, which is then displayed as a tile map image layer using Plotly Express. It demonstrates handling large datasets efficiently for spatial visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/performance.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data1.csv')\ndff = df.query('Lat < 40.82').query('Lat > 40.70').query('Lon > -74.02').query('Lon < -73.91')\n\nimport datashader as ds\ncvs = ds.Canvas(plot_width=1000, plot_height=1000)\nagg = cvs.points(dff, x='Lon', y='Lat')\n# agg is an xarray object, see http://xarray.pydata.org/en/stable/ for more details\ncoords_lat, coords_lon = agg.coords['Lat'].values, agg.coords['Lon'].values\n# Corners of the image\ncoordinates = [[coords_lon[0], coords_lat[0]],\n               [coords_lon[-1], coords_lat[0]],\n               [coords_lon[-1], coords_lat[-1]],\n               [coords_lon[0], coords_lat[-1]]]\n\nfrom colorcet import fire\nimport datashader.transfer_functions as tf\nimg = tf.shade(agg, cmap=fire)[::-1].to_pil()\n\nimport plotly.express as px\n# Trick to create rapidly a figure with map axes\nfig = px.scatter_map(dff[:1], lat='Lat', lon='Lon', zoom=12)\n# Add the datashader image as a tile map layer image\nfig.update_layout(\n    map_style=\"carto-darkmatter\",\n    map_layers=[{\"sourcetype\": \"image\", \"source\": img, \"coordinates\": coordinates}],\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Scatter and Bar\nDESCRIPTION: Creates a Plotly figure with scatter and bar traces across two subplots. Demonstrates adding of traces to specific rows and columns. Primarily sets initial values for marker colors and sizes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_scatter(y=[4, 2, 3.5], mode=\"markers\",\n                marker=dict(size=20, color=\"LightSeaGreen\"),\n                name=\"a\", row=1, col=1)\n\nfig.add_bar(y=[2, 1, 3],\n            marker=dict(color=\"MediumPurple\"),\n            name=\"b\", row=1, col=1)\n\nfig.add_scatter(y=[2, 3.5, 4], mode=\"markers\",\n                marker=dict(size=20, color=\"MediumPurple\"),\n                name=\"c\", row=1, col=2)\n\nfig.add_bar(y=[1, 3, 2],\n            marker=dict(color=\"LightSeaGreen\"),\n            name=\"d\", row=1, col=2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet demonstrates how to create a basic bar chart using the plotly.graph_objects module. It initializes a chart with simple animal data as categories on the x-axis. This basic example serves as a foundation to build more complex charts using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nanimals=['giraffes', 'orangutans', 'monkeys']\n\nfig = go.Figure([go.Bar(x=animals, y=[20, 14, 23])])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Precision-Recall Curves\nDESCRIPTION: Implements precision-recall curve visualization using Plotly Express. Shows both binary classification case and multiclass scenario with the Iris dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_recall_curve, auc\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification(n_samples=500, random_state=0)\n\nmodel = LogisticRegression()\nmodel.fit(X, y)\ny_score = model.predict_proba(X)[:, 1]\n\nprecision, recall, thresholds = precision_recall_curve(y, y_score)\n\nfig = px.area(\n    x=recall, y=precision,\n    title=f'Precision-Recall Curve (AUC={auc(recall, precision):.4f})',\n    labels=dict(x='Recall', y='Precision'),\n    width=700, height=500\n)\nfig.add_shape(\n    type='line', line=dict(dash='dash'),\n    x0=0, x1=1, y0=1, y1=0\n)\nfig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\nfig.update_xaxes(constrain='domain')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL-Rendered Scatter Plot with Plotly Express\nDESCRIPTION: This example demonstrates how to create a 100,000 point scatter plot using Plotly Express with WebGL rendering explicitly enabled. It showcases the use of the render_mode argument for improved performance with large datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/performance.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(1)\n\nN = 100000\n\ndf = pd.DataFrame(dict(x=np.random.randn(N),\n                       y=np.random.randn(N)))\n\nfig = px.scatter(df, x=\"x\", y=\"y\", render_mode='webgl')\n\nfig.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Flight Data Analysis\nDESCRIPTION: Imports necessary Python libraries for data manipulation, visualization, and interactive widgets, including pandas, numpy, plotly, and ipywidgets\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget-app.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport numpy as np\nimport pandas as pd\n\nimport plotly.graph_objects as go\nfrom ipywidgets import widgets\n```\n\n----------------------------------------\n\nTITLE: Adding Traces and Shapes in Subplots with Python Plotly\nDESCRIPTION: This snippet provides enhancements for the `add_trace`, `add_shape`, and related functions to accept 'all' for adding objects to multiple subplot rows or columns. Additionally, introduces parameters to exclude empty subplots when adding objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n### Added\n\n- For `add_trace`, `add_shape`, `add_annotation` and `add_layout_image`, the `row` and/or `col` argument now also accept the string `\"all\"`. `row=\"all\"` adds the object to all the subplot rows and `col=\"all\"` adds the object to all the subplot columns.\n```\n\nLANGUAGE: python\nCODE:\n```\n- Shapes that reference the plot axes in one dimension and the data in another dimension can be added with the new `add_hline`, `add_vline`, `add_hrect`, `add_vrect` functions, which also support the `row=\"all\"` and `col=\"all\"` arguments.\n```\n\nLANGUAGE: python\nCODE:\n```\n- The `add_trace`, `add_shape`, `add_annotation`, `add_layout_image`, `add_hline`, `add_vline`, `add_hrect`, `add_vrect` functions accept an argument `exclude_empty_subplots` which if `True`, only adds the object to subplots already containing traces or layout objects.\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Error Bars using Plotly Express\nDESCRIPTION: This snippet creates a scatter plot with error bars using `plotly.express`. It loads the `iris` dataset, adds a new column 'e' representing the error as 1% of 'sepal_width', then uses `px.scatter` to generate the plot with 'sepal_width' as x, 'sepal_length' as y, 'species' as color, and 'e' as both 'error_x' and 'error_y'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\ndf[\\\"e\\\"] = df[\\\"sepal_width\\\"]/100\nfig = px.scatter(df, x=\\\"sepal_width\\\", y=\\\"sepal_length\\\", color=\\\"species\\\",\n                 error_x=\\\"e\\\", error_y=\\\"e\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Smith Chart Subplots with Plotly in Python\nDESCRIPTION: This code creates two styled Smith Chart subplots using Plotly. It demonstrates adding multiple traces, customizing markers, and adjusting layout properties such as grid colors and domain placement for each subplot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/smith-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scattersmith(\n    imag=[1],\n    real=[1],\n    marker_symbol='x',\n    marker_size=30,\n    marker_color=\"green\",\n    subplot=\"smith1\"\n))\n\nfig.add_trace(go.Scattersmith(\n    imag=[1],\n    real=[1],\n    marker_symbol='x',\n    marker_size=30,\n    marker_color=\"pink\",\n    subplot=\"smith2\"\n))\n\nfig.update_layout(\n    smith=dict(\n        realaxis_gridcolor='red',\n        imaginaryaxis_gridcolor='blue',\n        domain=dict(x=[0,0.45])\n    ),\n    smith2=dict(\n        realaxis_gridcolor='blue',\n        imaginaryaxis_gridcolor='red',\n        domain=dict(x=[0.55,1])\n    )\n)\n\nfig.update_smiths(bgcolor=\"lightgrey\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Saving Plotly Figure to HTML File\nDESCRIPTION: This code snippet demonstrates how to save a Plotly figure as an interactive HTML file using the `write_html` method. The `plotly.express` library is used to create a scatter plot, which is then saved to the specified file path. The resulting HTML file can be opened in a web browser to view the interactive plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/interactive-html-export.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.scatter(x=range(10), y=range(10))\nfig.write_html(\"path/to/file.html\")\n```\n\n----------------------------------------\n\nTITLE: Basic Peak Detection and Visualization\nDESCRIPTION: Implements basic peak detection using SciPy's find_peaks function and visualizes the results with both the original time series and detected peaks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/peak-finding.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom scipy.signal import find_peaks\n\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\n\nindices = find_peaks(time_series)[0]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    y=time_series,\n    mode='lines+markers',\n    name='Original Plot'\n))\n\nfig.add_trace(go.Scatter(\n    x=indices,\n    y=[time_series[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='red',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart Row Facets - Python\nDESCRIPTION: This snippet showcases how to create a bar chart with facets arranged in rows using the Plotly Express library. The chart visualizes total bill by size, colored by sex, with facets based on smoker status.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.bar(df, x=\"size\", y=\"total_bill\", color=\"sex\", facet_row=\"smoker\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Surface Plot with Contours using Plotly in Python\nDESCRIPTION: This code snippet shows how to create a 3D surface plot with customizable contour lines using Plotly. It adds contour data to the z-axis and applies styling such as using a colormap. The script is useful for enhancing visual depth perception in 3D plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-surface-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\nfig = go.Figure(data=[go.Surface(z=z_data.values)])\nfig.update_traces(contours_z=dict(show=True, usecolormap=True,\n                                  highlightcolor=\"limegreen\", project_z=True))\nfig.update_layout(title=dict(text='Mt Bruno Elevation'), autosize=False,\n                  scene_camera_eye=dict(x=1.87, y=0.88, z=-0.64),\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90)\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Smoothing Contour Lines in Plotly in Python\nDESCRIPTION: This snippet shows how to smooth contour lines in a Plotly contour plot. It utilizes the `line_smoothing` parameter within the `go.Contour` object to control the smoothness of the lines. It creates two subplots, one without smoothing (`line_smoothing=0`) and one with smoothing (`line_smoothing=0.85`). Requires the `numpy` library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\nz =   [[2, 4, 7, 12, 13, 14, 15, 16],\n       [3, 1, 6, 11, 12, 13, 16, 17],\n       [4, 2, 7, 7, 11, 14, 17, 18],\n       [5, 3, 8, 8, 13, 15, 18, 19],\n       [7, 4, 10, 9, 16, 18, 20, 19],\n       [9, 10, 5, 27, 23, 21, 21, 21],\n       [11, 14, 17, 26, 25, 24, 23, 22]]\n\nfig = make_subplots(rows=1, cols=2,\n                    subplot_titles=('Without Smoothing', 'With Smoothing'))\n\nfig.add_trace(go.Contour(z=z, line_smoothing=0), 1, 1)\nfig.add_trace(go.Contour(z=z, line_smoothing=0.85), 1, 2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots Using make_subplots in Plotly (Python)\nDESCRIPTION: This snippet demonstrates an alternative method to create subplots using the make_subplots function from plotly.subplots. It creates a 2x3 grid of subplots with specified horizontal spacing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nfig = make_subplots(2, 3, horizontal_spacing=0.1)\n```\n\n----------------------------------------\n\nTITLE: Creating Multicategory Bar Charts\nDESCRIPTION: Demonstrates how to create bar charts with multicategory axis type using arrays for x values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nx = [\n    [\"BB+\", \"BB+\", \"BB+\", \"BB\", \"BB\", \"BB\"],\n    [16, 17, 18, 16, 17, 18,]\n]\nfig = go.Figure()\nfig.add_bar(x=x,y=[1,2,3,4,5,6])\nfig.add_bar(x=x,y=[6,5,4,3,2,1])\nfig.update_layout(barmode=\"relative\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing 3D Image Data with Facets in Plotly\nDESCRIPTION: Demonstrates how to explore 3D image datasets by creating facet plots with px.imshow. The facet_col parameter specifies which axis to slice through, and facet_col_wrap controls the maximum number of columns in the layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import io\ndata = io.imread(\"https://github.com/scikit-image/skimage-tutorials/raw/main/images/cells.tif\")\nimg = data[20:45:2]\nfig = px.imshow(img, facet_col=0, binary_string=True, facet_col_wrap=5)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Combined Line and Scatter Plots\nDESCRIPTION: Shows how to create multiple traces with different modes (markers, lines, lines+markers) on the same plot using random data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Create random data with numpy\nimport numpy as np\nnp.random.seed(1)\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N) + 5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N) - 5\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=random_x, y=random_y0,\n                    mode='markers',\n                    name='markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y1,\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y2,\n                    mode='lines',\n                    name='lines'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D Scatter Plot with Plotly Express\nDESCRIPTION: This snippet creates a basic 3D scatter plot using Plotly Express. It imports the `plotly.express` module, loads the Iris dataset, and generates a 3D scatter plot with 'sepal_length', 'sepal_width', and 'petal_width' as x, y, and z axes, respectively. The 'species' column is used to color the data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-scatter-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width',\n              color='species')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Figure with show() Method\nDESCRIPTION: Creates and displays a simple bar chart using Plotly's show() method. This demonstrates the basic approach for displaying figures using the renderers framework.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure(\n    data=[go.Bar(y=[2, 1, 3])],\n    layout_title_text=\"A Figure Displayed with fig.show()\"\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Coloring Node Points Based on Connections in Network Graph\nDESCRIPTION: This snippet colors the node points based on the number of connections. It calculates the number of adjacencies for each node and sets the color and hover text accordingly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/network-graphs.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnode_adjacencies = []\nnode_text = []\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_adjacencies.append(len(adjacencies[1]))\n    node_text.append('# of connections: '+str(len(adjacencies[1])))\n\nnode_trace.marker.color = node_adjacencies\nnode_trace.text = node_text\n```\n\n----------------------------------------\n\nTITLE: Using Combined Templates with Plotly Express\nDESCRIPTION: Demonstrates how to use combined templates with Plotly Express. This example creates a scatter plot with the default 'plotly+draft' template that includes both styling and a watermark.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\nimport plotly.express as px\n\npio.templates[\"draft\"] = go.layout.Template(\n    layout_annotations=[\n        dict(\n            name=\"draft watermark\",\n            text=\"DRAFT\",\n            textangle=-30,\n            opacity=0.1,\n            font=dict(color=\"black\", size=100),\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=0.5,\n            showarrow=False,\n        )\n    ]\n)\npio.templates.default = \"plotly+draft\"\n\ndf = px.data.gapminder()\ndf_2007 = df.query(\"year==2007\")\n\nfig = px.scatter(df_2007,\n                 x=\"gdpPercap\", y=\"lifeExp\", size=\"pop\", color=\"continent\",\n                 log_x=True, size_max=60,\n                 title=\"Gapminder 2007: current default theme\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Icicle Plot with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a basic icicle chart using Plotly Express in Python. It visualizes hierarchical data provided in a dictionary format, specifying relationships via the 'names' and 'parents' attributes. The chart is displayed with adjustable margin settings. Required dependency: plotly.express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndata = dict(\n    character=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parent=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])\n\nfig =px.icicle(\n    data,\n    names='character',\n    parents='parent',\n    values='value',\n)\nfig.update_traces(root_color=\"lightgrey\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Simple Ternary Contour Plot with Plotly\nDESCRIPTION: This snippet creates a basic ternary contour plot using Plotly's `create_ternary_contour` function. It defines the coordinates (Al, Cu, Y) and corresponding enthalpy values, then generates the plot with default settings.  The plot displays contours representing isovalue lines of the enthalpy within the ternary diagram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-contour.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\nAl = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])\nCu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])\nY = 1 - Al - Cu\n# synthetic data for mixing enthalpy\n# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html\nenthalpy = (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2\nfig = ff.create_ternary_contour(np.array([Al, Y, Cu]), enthalpy,\n                                pole_labels=['Al', 'Y', 'Cu'],\n                                interp_mode='cartesian')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Comparing kNN Models with Plotly\nDESCRIPTION: The snippet demonstrates how to fit and compare different k-Nearest Neighbors models using Scikit-learn, and visualize the results with Plotly. It uses weighted and unweighted averages to train kNN models for predicting 'tip' based on 'total_bill'. Dependencies include Scikit-learn for modeling and Plotly for visualization. The comparison is visualized by plotting the prediction lines for both models on a scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.neighbors import KNeighborsRegressor\n\ndf = px.data.tips()\nX = df.total_bill.values.reshape(-1, 1)\nx_range = np.linspace(X.min(), X.max(), 100)\n\n# Model #1\nknn_dist = KNeighborsRegressor(10, weights='distance')\nknn_dist.fit(X, df.tip)\ny_dist = knn_dist.predict(x_range.reshape(-1, 1))\n\n# Model #2\nknn_uni = KNeighborsRegressor(10, weights='uniform')\nknn_uni.fit(X, df.tip)\ny_uni = knn_uni.predict(x_range.reshape(-1, 1))\n\nfig = px.scatter(df, x='total_bill', y='tip', color='sex', opacity=0.65)\nfig.add_traces(go.Scatter(x=x_range, y=y_uni, name='Weights: Uniform'))\nfig.add_traces(go.Scatter(x=x_range, y=y_dist, name='Weights: Distance'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Overwriting Marker Properties with update_traces()\nDESCRIPTION: Demonstrates the usage of `update_traces()` with the `overwrite` parameter set to `True` to completely replace existing marker properties. Highlights selective overwriting behavior\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Bar(x=[1, 2, 3], y=[6, 4, 9],\n                       marker_color=\"red\")) # will be overwritten below\n\nfig.update_traces(overwrite=True, marker={\"opacity\": 0.4})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Combining Image Charts with Contour and Scatter Traces in Plotly\nDESCRIPTION: Demonstrates how to overlay contour lines and scatter points on an image visualization by combining px.imshow with go.Contour and go.Scatter traces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom skimage import data\nimg = data.camera()\nfig = px.imshow(img, color_continuous_scale='gray')\nfig.add_trace(go.Contour(z=img, showscale=False,\n                         contours=dict(start=0, end=70, size=70, coloring='lines'),\n                         line_width=2))\nfig.add_trace(go.Scatter(x=[230], y=[100], marker=dict(color='red', size=16)))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Automatic Labelling with Plotly Express\nDESCRIPTION: Demonstrates automatic label generation in Plotly Express scatter plot, showing default and manually overridden labels for data visualization\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-labels.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", color=\"species\",\n                title=\"Automatic Labels Based on Data Frame Column Names\")\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", color=\"species\",\n                 labels={\n                     \"sepal_length\": \"Sepal Length (cm)\",\n                     \"sepal_width\": \"Sepal Width (cm)\",\n                     \"species\": \"Species of Iris\"\n                 },\n                title=\"Manually Specified Labels\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating faceted density contour plots with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create faceted density contour plots using Plotly Express. The `facet_col` parameter is used to split the plot into subplots based on the 'sex' column, while `color` parameter is used to distinguish the data by 'smoker' status, providing a more detailed view of the data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_contour(df, x=\"total_bill\", y=\"tip\", facet_col=\"sex\", color=\"smoker\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Combining Table and Scatter Plot in Plotly, Python\nDESCRIPTION: This code demonstrates how to combine a table with scatter plots in a single Plotly figure.  It initializes a table using `ff.create_table` and then adds two scatter traces using `go.Scatter`.  It also customizes the layout to position the table and graphs side by side.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# Add table data\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montréal<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0],\n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['LA Kings', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n# Initialize a figure with ff.create_table(table_data)\nfig = ff.create_table(table_data, height_constant=60)\n\n# Add graph data\nteams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'LA Kings', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]\n# Make traces for graph\nfig.add_trace(go.Scatter(x=teams, y=GFPG,\n                    marker=dict(color='#0099ff'),\n                    name='Goals For<br>Per Game',\n                    xaxis='x2', yaxis='y2'))\nfig.add_trace(go.Scatter(x=teams, y=GAPG,\n                    marker=dict(color='#404040'),\n                    name='Goals Against<br>Per Game',\n                    xaxis='x2', yaxis='y2'))\n\nfig.update_layout(\n    title_text = '2016 Hockey Stats',\n    margin = {'t':50, 'b':100},\n    xaxis = {'domain': [0, .5]},\n    xaxis2 = {'domain': [0.6, 1.]},\n    yaxis2 = {'anchor': 'x2', 'title': 'Goals'}\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bubble Chart with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a 3D bubble chart using Plotly Express. It visualizes Gapminder data, plotting year, continent, population, GDP per capita, and life expectancy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-bubble-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\ndf = px.data.gapminder()\nfig = px.scatter_3d(df, x='year', y='continent', z='pop', size='gdpPercap', color='lifeExp',\n                    hover_data=['country'])\nfig.update_layout(scene_zaxis_type=\"log\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Heatmap with Text Display using Plotly Express\nDESCRIPTION: This snippet shows how to add text annotations to a heatmap using Plotly Express.  The `text_auto=True` argument in `px.imshow()` automatically displays the values on the heatmap tiles.  The z variable is a 2D array that defines the heatmap data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nz = [[.1, .3, .5, .7, .9],\n     [1, .8, .6, .4, .2],\n     [.2, 0, .5, .7, .9],\n     [.9, .8, .4, .2, 0],\n     [.3, .4, .5, .7, 1]]\n\nfig = px.imshow(z, text_auto=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Chart using plotly.graph_objects in Python\nDESCRIPTION: This snippet illustrates how to create a scatter chart for Apple's stock high values using the `plotly.graph_objects` library. It reads data from a CSV file and uses the `go.Scatter` function to create the figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Using graph_objects\nimport plotly.graph_objects as go\n\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure([go.Scatter(x=df['Date'], y=df['AAPL.High'])])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Time Series with Range Selector Buttons using Plotly Express\nDESCRIPTION: This snippet shows how to add range selector buttons to a time series plot using Plotly Express. The buttons allow users to easily set the range of the x-axis, and work well with range sliders.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = px.line(df, x='Date', y='AAPL.High', title='Time Series with Range Slider and Selectors')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Wind Rose Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet shows how to create a basic wind rose chart using Plotly's Graph Objects. It builds a figure using 'go.Figure' and adds multiple traces with 'go.Barpolar' for different wind speed categories, updating the layout for enhanced visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wind-rose-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Barpolar(\n    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],\n    name='11-14 m/s',\n    marker_color='rgb(106,81,163)'\n))\nfig.add_trace(go.Barpolar(\n    r=[57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0],\n    name='8-11 m/s',\n    marker_color='rgb(158,154,200)'\n))\nfig.add_trace(go.Barpolar(\n    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],\n    name='5-8 m/s',\n    marker_color='rgb(203,201,226)'\n))\nfig.add_trace(go.Barpolar(\n    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],\n    name='< 5 m/s',\n    marker_color='rgb(242,240,247)'\n))\n\nfig.update_traces(text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'])\nfig.update_layout(\n    title=dict(text='Wind Speed Distribution in Laurel, NE'),\n    font_size=16,\n    legend_font_size=16,\n    polar_radialaxis_ticksuffix='%',\n    polar_angularaxis_rotation=90,\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying RGB Image Data with Plotly Express\nDESCRIPTION: Demonstrates how to create an RGB image visualization using numpy array and px.imshow function, showing color channels and image representation\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nimg_rgb = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],\n                    [[0, 255, 0], [0, 0, 255], [255, 0, 0]]]\n                   , dtype=np.uint8)\nfig = px.imshow(img_rgb)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Trace Colors Using update_traces()\nDESCRIPTION: This code example demonstrates the use of `update_traces()` to change the marker color to \"RoyalBlue\" for all traces in a Plotly figure. Highlights the method's simplicity for batch updates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_scatter(y=[4, 2, 3.5], mode=\"markers\",\n                marker=dict(size=20, color=\"LightSeaGreen\"),\n                name=\"a\", row=1, col=1)\n\nfig.add_bar(y=[2, 1, 3],\n            marker=dict(color=\"MediumPurple\"),\n            name=\"b\", row=1, col=1)\n\nfig.add_scatter(y=[2, 3.5, 4], mode=\"markers\",\n                marker=dict(size=20, color=\"MediumPurple\"),\n                name=\"c\", row=1, col=2)\n\nfig.add_bar(y=[1, 3, 2],\n            marker=dict(color=\"LightSeaGreen\"),\n            name=\"d\", row=1, col=2)\n\nfig.update_traces(marker=dict(color=\"RoyalBlue\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sunburst with Large Number of Slices using go.Sunburst\nDESCRIPTION: This snippet demonstrates creating a sunburst chart with a large number of slices using `go.Sunburst` and a plotly grid attribute for subplots. It reads data from two CSV files and creates two sunburst traces, placing them in different columns of the grid using the `domain` attribute. The layout is updated to use a 2x1 grid and tight margins.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf1 = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')\ndf2 = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv')\n\nfig = go.Figure()\n\nfig.add_trace(go.Sunburst(\n    ids=df1.ids,\n    labels=df1.labels,\n    parents=df1.parents,\n    domain=dict(column=0)\n))\n\nfig.add_trace(go.Sunburst(\n    ids=df2.ids,\n    labels=df2.labels,\n    parents=df2.parents,\n    domain=dict(column=1),\n    maxdepth=2\n))\n\nfig.update_layout(\n    grid= dict(columns=2, rows=1),\n    margin = dict(t=0, l=0, r=0, b=0)\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Isosurface and Vector Field Visualization with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a 3D visualization of vector fields using Plotly. It defines vector and scalar fields, calculates their magnitudes, and visualizes them using isosurface, cone, and streamtube plots. Dependencies include the plotly and numpy libraries. The inputs are grid vectors; the outputs are graphical 3D representations of the vector field.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Define vector and scalar fields\nx, y, z = np.mgrid[0:1:8j, 0:1:8j, 0:1:8j]\nu =    np.sin(np.pi*x) * np.cos(np.pi*z)\nv = -2*np.sin(np.pi*y) * np.cos(2*np.pi*z)\nw = np.cos(np.pi*x)*np.sin(np.pi*z) + np.cos(np.pi*y)*np.sin(2*np.pi*z)\nmagnitude = np.sqrt(u**2 + v**2 + w**2)\nmask1 = np.logical_and(y>=.4, y<=.6)\nmask2 = y>.6\n\nfig = go.Figure(go.Isosurface(\n                      x=x.ravel(), y=y.ravel(), z=z.ravel(),\n                      value=magnitude.ravel(),\n                      isomin=1.9, isomax=1.9,\n                      colorscale=\"BuGn\",\n                      name='isosurface'))\n\n\nfig.add_trace(go.Cone(x=x[mask1], y=y[mask1], z=z[mask1],\n                      u=u[mask1], v=v[mask1], w=w[mask1],\n                      colorscale=\"Blues\",\n                      name='cones'\n))\nfig.add_trace(go.Streamtube(\n                      x=x[mask2], y=y[mask2], z=z[mask2],\n                      u=u[mask2], v=v[mask2], w=w[mask2],\n                      colorscale=\"Reds\",\n                      name='streamtubes'\n))\n# Update all traces together\nfig.update_traces(showlegend=True, showscale=False)\nfig.update_layout(width=600, title_text='Exploration of a vector field using several traces')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Advanced Hover Template with Graph Objects\nDESCRIPTION: Creates a scatter plot with advanced hover formatting using graph_objects instead of Plotly Express. Demonstrates how to use customdata and text parameters to include additional information in hovers, with detailed currency and number formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport pandas as pd\nimport math\n\ndata = px.data.gapminder()\ndf_2007 = data[data['year']==2007]\ndf_2007 = df_2007.sort_values(['continent', 'country'])\n\nbubble_size = []\n\nfor index, row in df_2007.iterrows():\n    bubble_size.append(math.sqrt(row['pop']))\n\ndf_2007['size'] = bubble_size\ncontinent_names = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania']\ncontinent_data = {continent:df_2007.query(\"continent == '%s'\" %continent)\n                              for continent in continent_names}\n\nfig = go.Figure()\n\nfor continent_name, df in continent_data.items():\n    fig.add_trace(\n        go.Scatter(\n            x=df['gdpPercap'],\n            y=df['lifeExp'],\n            marker_size=df['size'],\n            text=df['continent'],\n            name=continent_name,\n\n            # The next three parameters specify the hover text\n            # Text supports just one customized field per trace\n            # and is implemented here with text=df['continent'],\n            # Custom data supports multiple fields through numeric indices in the hovertemplate\n            # In we weren't using the text parameter in our example,\n            # we could instead add continent as a third customdata field.\n            customdata=df[['country','pop']],\n            hovertemplate=\n                \"<b>%{customdata[0]}</b><br>\" +\n                \"<b>%{text}</b><br><br>\" +\n                \"GDP per Capita: %{x:$,.0f}<br>\" +\n                \"Life Expectancy: %{y:.0f}<br>\" +\n                \"Population: %{customdata[1]:,.0f}\" +\n                \"<extra></extra>\",\n        ))\n\n\nfig.update_traces(\n    mode='markers',\n    marker={'sizemode':'area',\n            'sizeref':10})\n\nfig.update_layout(\n    xaxis={\n        'title':'GDP per capita',\n        'type':'log'},\n    yaxis={'title':'Life Expectancy (years)'})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Parallel Coordinates Plot with Plotly Express\nDESCRIPTION: Creates a basic parallel coordinates plot using Plotly Express with the Iris dataset. The plot uses species_id for coloring and customizes axis labels with a Tealrose diverging color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-coordinates-plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.parallel_coordinates(df, color=\"species_id\", labels={\"species_id\": \"Species\",\n                \"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n                \"petal_width\": \"Petal Width\", \"petal_length\": \"Petal Length\", },\n                             color_continuous_scale=px.colors.diverging.Tealrose,\n                             color_continuous_midpoint=2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Size with Plotly Express\nDESCRIPTION: Demonstrates how to set graph dimensions and margins using Plotly Express with a scatter plot. Uses the tips dataset to create a faceted visualization with custom width, height and background color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/setting-graph-size.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", facet_col=\"sex\",\n                 width=800, height=400)\n\nfig.update_layout(\n    margin=dict(l=20, r=20, t=20, b=20),\n    paper_bgcolor=\"LightSteelBlue\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: UMAP Visualization of MNIST Digits Dataset\nDESCRIPTION: Applies UMAP to visualize the MNIST digits dataset, demonstrating UMAP's efficiency with larger datasets. Projects 64-dimensional image data to 2D space for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-tsne-umap-projections.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom sklearn.datasets import load_digits\nfrom umap import UMAP\n\ndigits = load_digits()\n\numap_2d = UMAP(random_state=0)\numap_2d.fit(digits.data)\n\nprojections = umap_2d.transform(digits.data)\n\nfig = px.scatter(\n    projections, x=0, y=1,\n    color=digits.target.astype(str), labels={'color': 'digit'}\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Global and Local Font Specification in Plotly\nDESCRIPTION: Demonstrates how to set figure-wide fonts and override specific font settings for titles, axes, and legend using Plotly Express\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-labels.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", color=\"species\",\n                title=\"Playing with Fonts\")\nfig.update_layout(\n    font_family=\"Courier New\",\n    font_color=\"blue\",\n    title_font_family=\"Times New Roman\",\n    title_font_color=\"red\",\n    legend_title_font_color=\"green\"\n)\nfig.update_xaxes(title_font_family=\"Arial\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Selective Trace Updates Using a Selector\nDESCRIPTION: Illustrates the use of `update_traces()` with a selector to change colors exclusively for bar traces. Makes use of the `type` attribute to target updates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_scatter(y=[4, 2, 3.5], mode=\"markers\",\n                marker=dict(size=20, color=\"LightSeaGreen\"),\n                name=\"a\", row=1, col=1)\n\nfig.add_bar(y=[2, 1, 3],\n            marker=dict(color=\"MediumPurple\"),\n            name=\"b\", row=1, col=1)\n\nfig.add_scatter(y=[2, 3.5, 4], mode=\"markers\",\n                marker=dict(size=20, color=\"MediumPurple\"),\n                name=\"c\", row=1, col=2)\n\nfig.add_bar(y=[1, 3, 2],\n            marker=dict(color=\"LightSeaGreen\"),\n            name=\"d\", row=1, col=2)\n\nfig.update_traces(marker=dict(color=\"RoyalBlue\"),\n                  selector=dict(type=\"bar\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Spike Lines in Plotly Line Chart Python\nDESCRIPTION: This demonstrates activating spike lines in a Plotly line chart, connecting points interactively with their axes on hover. It highlights using the Plotly Express interface to quickly build line charts with spikes, enhancing data interpretation by tracing trends depending on cursor position. The snippet requires Plotly Express and access to its datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\n\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\", title=\"Spike lines active\")\nfig.update_traces(mode=\"markers+lines\")\n\nfig.update_xaxes(showspikes=True)\nfig.update_yaxes(showspikes=True)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Annotated Heatmap with Plotly Express\nDESCRIPTION: Creates a simple annotated heatmap using px.imshow() with automatic text annotations. This is the recommended modern approach introduced in Plotly v5.5.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nz = [[.1, .3, .5, .7, .9],\n     [1, .8, .6, .4, .2],\n     [.2, 0, .5, .7, .9],\n     [.9, .8, .4, .2, 0],\n     [.3, .4, .5, .7, 1]]\n\nfig = px.imshow(z, text_auto=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bubble Chart with Custom Colorbar using Plotly Graph Objects\nDESCRIPTION: This snippet shows how to create a 3D bubble chart with a custom colorbar using Plotly Graph Objects. It visualizes planetary data including distance from sun, density, gravity, and temperature, with bubble size based on planet diameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-bubble-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']\ntemperatures = [167, 464, 15, -20, -65, -110, -140, -195, -200, -225]\ndistance_from_sun = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]\ndensity = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]\ngravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]\nplanet_diameter = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]\n\n# Create trace, sizing bubbles by planet diameter\nfig = go.Figure(go.Scatter3d(\n    x = distance_from_sun,\n    y = density,\n    z = gravity,\n    text = planets,\n    mode = 'markers',\n    marker = dict(\n        sizemode = 'diameter',\n        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/scatter/#scatter-marker-sizeref\n        size = planet_diameter,\n        color = temperatures,\n        colorbar_title = 'Mean<br>Temperature',\n        colorscale=[[0, 'rgb(5, 10, 172)'], [.3, 'rgb(255, 255, 255)'], [1, 'rgb(178, 10, 28)']]\n        )\n))\n\nfig.update_layout(\n    width=800,\n    height=800,\n    title=dict(text=\"Planets!\"),\n    scene=dict(\n        xaxis=dict(\n            title=dict(\n                text=\"Distance from Sun\",\n                font=dict(\n                    color=\"white\"\n                )\n            )\n        ),\n        yaxis=dict(\n            title=dict(\n                text=\"Density\",\n                font=dict(\n                    color=\"white\"\n                )\n            )\n        ),\n        zaxis=dict(\n            title=dict(\n                text=\"Gravity\",\n                font=dict(\n                    color=\"white\"\n                )\n            )\n        ),\n        bgcolor=\"rgb(20, 24, 54)\"\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating World Choropleth Map - Python\nDESCRIPTION: This snippet demonstrates how to create a choropleth map for global GDP visualization using Plotly. It utilizes world GDP data and customizes the visualization aspects including color scale and projection type.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')\n\nfig = go.Figure(data=go.Choropleth(\n    locations = df['CODE'],\n    z = df['GDP (BILLIONS)'],\n    text = df['COUNTRY'],\n    colorscale = 'Blues',\n    autocolorscale=False,\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_tickprefix = '$',\n    colorbar_title = 'GDP<br>Billions US$',\n))\n\nfig.update_layout(\n    title_text='2014 Global GDP',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=0.55,\n        y=0.1,\n        xref='paper',\n        yref='paper',\n        text='Source: <a href=\"https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html\">\\\n            CIA World Factbook</a>',\n        showarrow = False\n    )]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Text Annotations to Plotly Graph in Python\nDESCRIPTION: This snippet demonstrates how to add text annotations to a Plotly figure using `fig.add_annotation()`. The `plotly.graph_objects` module is required. Annotations can include arrows and can be aligned or shifted relative to the data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n))\n\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n))\n\nfig.add_annotation(x=2, y=5,\n            text=\"Text annotation with arrow\",\n            showarrow=True,\n            arrowhead=1)\nfig.add_annotation(x=4, y=4,\n            text=\"Text annotation without arrow\",\n            showarrow=False,\n            yshift=10)\n\nfig.update_layout(showlegend=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Logarithmic Color Scale in Plotly in Python\nDESCRIPTION: This code showcases how to apply a logarithmic color scale to a heatmap using Plotly's Graph Objects in Python. The Plotly library is required for this operation. Inputs are matrix values for 'z' defining heatmap data, resulting in a heatmap representation with logarithmically scaled colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Heatmap(\n    z= [[10, 100.625, 1200.5, 150.625, 2000],\n       [5000.625, 60.25, 8.125, 100000, 150.625],\n       [2000.5, 300.125, 50., 8.125, 12.5],\n       [10.625, 1.25, 3.125, 6000.25, 100.625],\n       [0, 0.625, 2.5, 50000.625, 10]],\n    colorscale= [\n        [0, 'rgb(250, 250, 250)'],        #0\n        [1./10000, 'rgb(200, 200, 200)'], #10\n        [1./1000, 'rgb(150, 150, 150)'],  #100\n        [1./100, 'rgb(100, 100, 100)'],   #1000\n        [1./10, 'rgb(50, 50, 50)'],       #10000\n        [1., 'rgb(0, 0, 0)'],             #100000\n\n    ],\n    colorbar= dict(\n        tick0= 0,\n        tickmode= 'array',\n        tickvals= [0, 1000, 10000, 100000]\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Stacked Colored Horizontal Bar Chart\nDESCRIPTION: Create a stacked horizontal bar chart with custom colors and multiple traces representing different zoos\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-bar-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[20, 14, 23],\n    name='SF Zoo',\n    orientation='h',\n    marker=dict(\n        color='rgba(246, 78, 139, 0.6)',\n        line=dict(color='rgba(246, 78, 139, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[12, 18, 29],\n    name='LA Zoo',\n    orientation='h',\n    marker=dict(\n        color='rgba(58, 71, 80, 0.6)',\n        line=dict(color='rgba(58, 71, 80, 1.0)', width=3)\n    )\n))\n\nfig.update_layout(barmode='stack')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Table Appearance with Plotly in Python\nDESCRIPTION: This snippet enhances the basic table by applying styling to the header and cells. It customizes the line color, fill color, and alignment of the header and cell content using the `header` and `cells` dictionaries within the `go.Table` object. The `fig.update_layout` function sets the width and height of the table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['A Scores', 'B Scores'],\n                line_color='darkslategray',\n                fill_color='lightskyblue',\n                align='left'),\n    cells=dict(values=[[100, 90, 80, 90], # 1st column\n                       [95, 85, 75, 95]], # 2nd column\n               line_color='darkslategray',\n               fill_color='lightcyan',\n               align='left'))\n])\n\nfig.update_layout(width=500, height=300)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding the Same Trace to All Facets - Python\nDESCRIPTION: This snippet demonstrates how to add a common regression line to all facets using the add_trace method. A linear regression line is fitted to the data and displayed across all facets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport statsmodels.api as sm\nimport plotly.graph_objects as go\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color='sex', facet_col=\"day\", facet_row=\"time\")\n\nmodel = sm.OLS(df[\"tip\"], sm.add_constant(df[\"total_bill\"])).fit()\n\n# create the trace to be added to all facets\ntrace = go.Scatter(x=df[\"total_bill\"], y=model.predict(), line_color=\"black\", name=\"overall OLS\")\n\n# give it a legend group and hide it from the legend\ntrace.update(legendgroup=\"trendline\", showlegend=False)\n\n# add it to all rows/cols, but not to empty subplots\nfig.add_trace(trace, row=\"all\", col=\"all\", exclude_empty_subplots=True)\n\n# set only the last trace added to appear in the legend\nfig.update_traces(selector=-1, showlegend=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a simple bar chart using Plotly Express. It imports the library, creates a figure with sample data, and displays it.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"b\", \"c\"], y=[1, 3, 2])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding LOWESS Trendlines to Scatterplots\nDESCRIPTION: Demonstrates how to add non-linear Locally Weighted Scatterplot Smoothing (LOWESS) trendlines to time series data. Requires statsmodels to be installed. LOWESS produces a smooth curve following the data pattern.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"lowess\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Binary ROC Curve\nDESCRIPTION: Implements a basic ROC curve visualization for binary classification using Plotly Express. Includes area under curve (AUC) calculation and a diagonal reference line.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification(n_samples=500, random_state=0)\n\nmodel = LogisticRegression()\nmodel.fit(X, y)\ny_score = model.predict_proba(X)[:, 1]\n\nfpr, tpr, thresholds = roc_curve(y, y_score)\n\nfig = px.area(\n    x=fpr, y=tpr,\n    title=f'ROC Curve (AUC={auc(fpr, tpr):.4f})',\n    labels=dict(x='False Positive Rate', y='True Positive Rate'),\n    width=700, height=500\n)\nfig.add_shape(\n    type='line', line=dict(dash='dash'),\n    x0=0, x1=1, y0=0, y1=1\n)\n\nfig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\nfig.update_xaxes(constrain='domain')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Heatmap with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a basic heatmap using Plotly Express with a 2D array.  It uses the `px.imshow` function to generate the heatmap and `fig.show()` to display it.  No external dependencies are required beyond `plotly.express`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.imshow([[1, 20, 30],\n                 [20, 1, 60],\n                 [30, 60, 1]])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a SPLOM for Iris Dataset using Plotly Python\nDESCRIPTION: This snippet illustrates how to create a scatterplot matrix (SPLOM) for the iris dataset using Plotly in Python. It reads the iris dataset, constructs the SPLOM displaying relationships among sepal and petal dimensions, and sets visual properties such as hover effects, dimensions, and the title layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv\"\n)\nindex_vals = df[\"class\"].astype(\"category\").cat.codes\n\nfig = go.Figure(\n    data=go.Splom(\n        dimensions=[\n            dict(label=\"sepal length\", values=df[\"sepal length\"]),\n            dict(label=\"sepal width\", values=df[\"sepal width\"]),\n            dict(label=\"petal length\", values=df[\"petal length\"]),\n            dict(label=\"petal width\", values=df[\"petal width\"]),\n        ],\n        showupperhalf=False,\n        text=df[\"class\"],\n        marker=dict(\n            color=index_vals,\n            showscale=False,\n            line_color=\"white\",\n            line_width=0.5,\n        ),\n    )\n)\n\nfig.update_layout(\n    title=dict(text=\"Iris Data set\"),\n    hoversubplots=\"axis\",\n    width=600,\n    height=600,\n    hovermode=\"x\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bubble Chart of Planetary Data with Plotly Graph Objects\nDESCRIPTION: This snippet demonstrates how to create a 3D bubble chart of planetary data using Plotly Graph Objects. It visualizes planets' distance from the sun, density, and gravity, with bubble size based on planet diameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-bubble-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']\nplanet_colors = ['rgb(135, 135, 125)', 'rgb(210, 50, 0)', 'rgb(50, 90, 255)',\n                 'rgb(178, 0, 0)', 'rgb(235, 235, 210)', 'rgb(235, 205, 130)',\n                 'rgb(55, 255, 217)', 'rgb(38, 0, 171)', 'rgb(255, 255, 255)']\ndistance_from_sun = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]\ndensity = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]\ngravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]\nplanet_diameter = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]\n\n# Create trace, sizing bubbles by planet diameter\nfig = go.Figure(data=go.Scatter3d(\n    x = distance_from_sun,\n    y = density,\n    z = gravity,\n    text = planets,\n    mode = 'markers',\n    marker = dict(\n        sizemode = 'diameter',\n        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/scatter/#scatter-marker-sizeref\n        size = planet_diameter,\n        color = planet_colors,\n        )\n))\n\nfig.update_layout(\n    width=800,\n    height=800,\n    title=dict(text=\"Planets!\"),\n    scene=dict(\n        xaxis=dict(\n            title=dict(\n                text=\"Distance from Sun\",\n                font=dict(\n                    color=\"white\"\n                )\n            )\n        ),\n        yaxis=dict(\n            title=dict(\n                text=\"Density\",\n                font=dict(\n                    color=\"white\"\n                )\n            )\n        ),\n        zaxis=dict(\n            title=dict(\n                text=\"Gravity\",\n                font=dict(\n                    color=\"white\"\n                )\n            )\n        ),\n        bgcolor=\"rgb(20, 24, 54)\"\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Color Mapping for Pie Chart Sectors in Python\nDESCRIPTION: Demonstrates how to explicitly map categorical values to specific colors in a pie chart using the color_discrete_map parameter. Each day of the week is assigned a custom color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day', color='day',\n             color_discrete_map={'Thur':'lightcyan',\n                                 'Fri':'cyan',\n                                 'Sat':'royalblue',\n                                 'Sun':'darkblue'})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Line Plot on Date Axes using Plotly Express\nDESCRIPTION: This snippet demonstrates creating a time series line plot with `plotly.express`. It loads stock data, then uses `px.line` to plot the 'GOOG' stock price against the 'date'. Plotly automatically detects that the x-axis represents dates and formats it accordingly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks()\nfig = px.line(df, x='date', y=\\\"GOOG\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Area Plot with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a filled area plot using Plotly Express. It uses a DataFrame from the gapminder dataset and fills the area under the curve for different continents based on population over years.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder()\nfig = px.area(df, x=\"year\", y=\"pop\", color=\"continent\", line_group=\"country\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Titles in Plotly Python\nDESCRIPTION: Creates a 2x2 grid of subplots with individual titles for each subplot using the subplot_titles parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=(\"Plot 1\", \"Plot 2\", \"Plot 3\", \"Plot 4\"))\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),\n              row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),\n              row=1, col=2)\n\nfig.add_trace(go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),\n              row=2, col=2)\n\nfig.update_layout(height=500, width=700,\n                  title_text=\"Multiple Subplots with Titles\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization with Custom Data in Plotly Express\nDESCRIPTION: Creates a scatter plot with custom hover information using the custom_data parameter in Plotly Express. The example formats GDP values as currency, applies number formatting to population data, and customizes the hover layout with HTML styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# %%\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport pandas as pd\nimport math\nimport numpy as np\n\ndata = px.data.gapminder()\ndf = data[data['year']==2007]\ndf = df.sort_values(['continent', 'country'])\n\ndf.rename(columns={\"gdpPercap\":'GDP per capita', \"lifeExp\":'Life Expectancy (years)'}, inplace=True)\n\nfig=px.scatter(df,\n               x='GDP per capita',\n               y='Life Expectancy (years)',\n               color='continent',\n               size=np.sqrt(df['pop']),\n               # Specifying data to make available to the hovertemplate\n               # The px custom_data parameter has an underscore, while the analogous graph objects customdata parameter has no underscore.\n               # The px custom_data parameter is a list of column names in the data frame, while the graph objects customdata parameter expects a data frame or a numpy array.\n               custom_data=['country', 'continent', 'pop'],\n)\n\n# Plotly express does not have a hovertemplate parameter in the graph creation function, so we apply the template with update_traces\nfig.update_traces(\n    hovertemplate =\n                \"<b>%{customdata[0]}</b><br>\" +\n                \"<b>%{customdata[1]}</b><br><br>\" +\n                \"GDP per Capita: %{x:$,.0f}<br>\" +\n                \"Life Expectation: %{y:.0f}<br>\" +\n                \"Population: %{customdata[2]:,.0f}\" +\n                \"<extra></extra>\",\n    mode='markers',\n    marker={'sizemode':'area',\n            'sizeref':10},\n)\n\nfig.update_layout(\n        xaxis={\n            'type':'log'},\n        )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plots with Different Shapes in Plotly\nDESCRIPTION: In this snippet, multiple line traces are created in a Plotly figure, demonstrating various line shapes such as linear, spline, and vhv. The snippet also configures hover information to enhance user interaction with the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1, 3, 2, 3, 1])\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=y, name=\"linear\",\n                    line_shape='linear'))\nfig.add_trace(go.Scatter(x=x, y=y + 5, name=\"spline\",\n                    text=[\"tweak line smoothness<br>with 'smoothing' in line object\"],\n                    hoverinfo='text+name',\n                    line_shape='spline'))\nfig.add_trace(go.Scatter(x=x, y=y + 10, name=\"vhv\",\n                    line_shape='vhv'))\nfig.add_trace(go.Scatter(x=x, y=y + 15, name=\"hvh\",\n                    line_shape='hvh'))\nfig.add_trace(go.Scatter(x=x, y=y + 20, name=\"vh\",\n                    line_shape='vh'))\nfig.add_trace(go.Scatter(x=x, y=y + 25, name=\"hv\",\n                    line_shape='hv'))\n\nfig.update_traces(hoverinfo='text+name', mode='lines+markers')\nfig.update_layout(legend=dict(y=0.5, traceorder='reversed', font_size=16))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Combining Animations and Facets with px.imshow in Python\nDESCRIPTION: This snippet demonstrates how to visualize 4-dimensional datasets by combining animation and faceting in `px.imshow`. It loads a sample image using `skimage.io`, reshapes the data, and then displays the image with an animation along one axis and facets along another axis.  The `animation_frame` and `facet_col` parameters allow for exploring the data across multiple dimensions simultaneously.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import io\ndata = io.imread(\"https://github.com/scikit-image/skimage-tutorials/raw/main/images/cells.tif\")\ndata = data.reshape((15, 4, 256, 256))[5:]\nfig = px.imshow(data, animation_frame=0, facet_col=1, binary_string=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Volcano Plot Implementation using Dash-Bio\nDESCRIPTION: Creates a basic volcano plot using the Dash-Bio VolcanoPlot component. Loads genomic data from a CSV file and displays it as an interactive scatter plot showing statistical significance against effect size.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-volcano-plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport dash_bio\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/volcano_data1.csv')\n\ndash_bio.VolcanoPlot(\n    dataframe=df,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Lines in Plotly\nDESCRIPTION: This snippet illustrates how to create filled areas between lines in a Plotly figure. It includes multiple line traces along with upper and lower boundaries for each fill, enhancing the visual representation of data trends.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nx_rev = x[::-1]\n\n# Line 1\ny1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_upper = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\ny1_lower = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1_lower = y1_lower[::-1]\n\n# Line 2\ny2 = [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5]\ny2_upper = [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5]\ny2_lower = [4.5, 2, 4.4, 7, 4, 2, 7, 4, 5, 4.75]\ny2_lower = y2_lower[::-1]\n\n# Line 3\ny3 = [10, 8, 6, 4, 2, 0, 2, 4, 2, 0]\ny3_upper = [11, 9, 7, 5, 3, 1, 3, 5, 3, 1]\ny3_lower = [9, 7, 5, 3, 1, -.5, 1, 3, 1, -1]\ny3_lower = y3_lower[::-1]\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x+x_rev,\n    y=y1_upper+y1_lower,\n    fill='toself',\n    fillcolor='rgba(0,100,80,0.2)',\n    line_color='rgba(255,255,255,0)',\n    showlegend=False,\n    name='Fair',\n))\nfig.add_trace(go.Scatter(\n    x=x+x_rev,\n    y=y2_upper+y2_lower,\n    fill='toself',\n    fillcolor='rgba(0,176,246,0.2)',\n    line_color='rgba(255,255,255,0)',\n    name='Premium',\n    showlegend=False,\n))\nfig.add_trace(go.Scatter(\n    x=x+x_rev,\n    y=y3_upper+y3_lower,\n    fill='toself',\n    fillcolor='rgba(231,107,243,0.2)',\n    line_color='rgba(255,255,255,0)',\n    showlegend=False,\n    name='Ideal',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y1,\n    line_color='rgb(0,100,80)',\n    name='Fair',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y2,\n    line_color='rgb(0,176,246)',\n    name='Premium',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y3,\n    line_color='rgb(231,107,243)',\n    name='Ideal',\n))\n\nfig.update_traces(mode='lines')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Animated Bubble Chart with Gapminder Data\nDESCRIPTION: Creates an interactive visualization that shows GDP per Capita versus Life Expectancy across different years and continents, utilizing Plotly's graph objects and animation capabilities\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\nurl = \"https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv\"\ndataset = pd.read_csv(url)\n\nyears = [\"1952\", \"1962\", \"1967\", \"1972\", \"1977\", \"1982\", \"1987\", \"1992\", \"1997\", \"2002\",\n         \"2007\"]\n\n# make list of continents\ncontinents = []\nfor continent in dataset[\"continent\"]:\n    if continent not in continents:\n        continents.append(continent)\n```\n\n----------------------------------------\n\nTITLE: Dumbbell Plot with Arrow Markers in Plotly\nDESCRIPTION: Advanced dumbbell plot that uses arrow markers to indicate direction of change between 1952 and 2002 life expectancy for European countries. Demonstrates Plotly's 5.11 marker features like arrow, angleref, and standoff.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dumbbell-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder()\ndf = df.loc[(df.continent == \"Europe\") & (df.year.isin([1952, 2002]))]\n\ncountries = (\n    df.loc[(df.continent == \"Europe\") & (df.year.isin([2002]))]\n    .sort_values(by=[\"lifeExp\"], ascending=True)[\"country\"]\n    .unique()\n)\n\ndata = {\"line_x\": [], \"line_y\": [], \"1952\": [], \"2002\": [], \"colors\": [], \"years\": [], \"countries\": []}\n\nfor country in countries:\n    data[\"1952\"].extend([df.loc[(df.year == 1952) & (df.country == country)][\"lifeExp\"].values[0]])\n    data[\"2002\"].extend([df.loc[(df.year == 2002) & (df.country == country)][\"lifeExp\"].values[0]])\n    data[\"line_x\"].extend(\n        [\n            df.loc[(df.year == 1952) & (df.country == country)][\"lifeExp\"].values[0],\n            df.loc[(df.year == 2002) & (df.country == country)][\"lifeExp\"].values[0],\n            None,\n        ]\n    )\n    data[\"line_y\"].extend([country, country, None]),\n\nfig = go.Figure(\n    data=[\n        go.Scatter(\n            x=data[\"line_x\"],\n            y=data[\"line_y\"],\n            mode=\"markers+lines\",\n            showlegend=False,\n            marker=dict(\n                symbol=\"arrow\",\n                color=\"black\",\n                size=16,\n                angleref=\"previous\",\n                standoff=8\n            )\n        ),\n        go.Scatter(\n            x=data[\"1952\"],\n            y=countries,\n            name=\"1952\",\n            mode=\"markers\",\n            marker=dict(\n                color=\"silver\",\n                size=16,\n            )\n        ),\n        go.Scatter(\n            x=data[\"2002\"],\n            y=countries,\n            name=\"2002\",\n            mode=\"markers\",\n            marker=dict(\n                color=\"lightskyblue\",\n                size=16,\n            ),\n        ),\n    ]\n)\n\nfig.update_layout(\n    title=dict(text=\"Life Expectancy in Europe: 1952 and 2002\"),\n    height=1000,\n    legend_itemclick=False\n)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Range Manually in Plotly Express with Python\nDESCRIPTION: This snippet shows how to manually specify the x and y axis ranges in a Plotly Express scatter plot. It uses the `range` property in `update_xaxes` and `update_yaxes` to set the lower and upper bounds for each axis. The visible data will be limited to the specified range on each axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_xaxes(range=[1.5, 4.5])\nfig.update_yaxes(range=[3, 9])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Slices to Volume Plots in Python\nDESCRIPTION: Demonstrates how to add slices through the volume in a volume plot using Plotly. It shows how to create partially filled isosurfaces and remove caps to make the slice more visible.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-volume.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.graph_objects as go\n\nX, Y, Z = np.mgrid[:1:20j, :1:20j, :1:20j]\nvol = (X - 1)**2 + (Y - 1)**2 + Z**2\n\n\nfig = go.Figure(data=go.Volume(\n    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),\n    value=vol.flatten(),\n    isomin=0.2,\n    isomax=0.7,\n    opacity=0.2,\n    surface_count=21,\n    slices_z=dict(show=True, locations=[0.4]),\n    surface=dict(fill=0.5, pattern='odd'),\n    caps= dict(x_show=False, y_show=False, z_show=False), # no caps\n    ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Overlaid Histograms with go.Histogram\nDESCRIPTION: This snippet demonstrates how to overlay multiple histograms in the same plot using `go.Histogram`. It creates two histograms with slightly different data and adds them as separate traces to the same figure.  `barmode='overlay'` and `opacity` are adjusted to make both histograms visible.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx0 = np.random.randn(500)\n# Add 1 to shift the mean of the Gaussian distribution\nx1 = np.random.randn(500) + 1\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=x0))\nfig.add_trace(go.Histogram(x=x1))\n\n# Overlay both histograms\nfig.update_layout(barmode='overlay')\n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Plot with Facets using plotly.express in Python\nDESCRIPTION: This snippet demonstrates how to create an area plot with facets for different stock companies using `plotly.express`. The `facet_col` and `facet_col_wrap` parameters are used for better organization of the plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)-1\nfig = px.area(df, facet_col=\"company\", facet_col_wrap=2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Density Heatmap with Plotly Express\nDESCRIPTION: This code demonstrates how to create a basic 2D histogram (density heatmap) using the Plotly Express density_heatmap() function with the tips dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines on Tile Maps using Plotly Express\nDESCRIPTION: This example demonstrates how to use px.line_map to draw lines connecting cities on a tile-based map. The code loads city data from a CSV file, filters it for specific states, and creates a map with lines connecting the cities, colored by state.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-tile-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nus_cities = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\")\nus_cities = us_cities.query(\"State in ['New York', 'Ohio']\")\n\nimport plotly.express as px\n\nfig = px.line_map(us_cities, lat=\"lat\", lon=\"lon\", color=\"State\", zoom=3, height=300)\n\nfig.update_layout(map_style=\"open-street-map\", map_zoom=4, map_center_lat = 41,\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Parallel Coordinates Plot with Continuous Color\nDESCRIPTION: Generates a parallel coordinates visualization of iris dataset with continuous color mapping\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.parallel_coordinates(df, color=\"species_id\", labels={\"species_id\": \"Species\",\n                  \"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n                  \"petal_width\": \"Petal Width\", \"petal_length\": \"Petal Length\", },\n                    color_continuous_scale=px.colors.diverging.Tealrose, color_continuous_midpoint=2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Filled Area Plot with Patterns in Python\nDESCRIPTION: This snippet illustrates the use of patterns in filled area plots introduced in version 5.7 of Plotly. It demonstrates how to differentiate areas using various patterns alongside colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.medals_long()\n\nfig = px.area(df, x=\"medal\", y=\"count\", color=\"nation\",\n             pattern_shape=\"nation\", pattern_shape_sequence=[\".\", \"x\", \"+\"])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Funnel Plot with Plotly Express in Python\nDESCRIPTION: This snippet creates a basic funnel plot using Plotly Express. It represents each row of the DataFrame as a stage of the funnel, demonstrating how to visualize stages in a business process. The required dependencies include the Plotly library, which should be imported as 'px'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndata = dict(\n    number=[39, 27.4, 20.6, 11, 2],\n    stage=[\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\"])\nfig = px.funnel(data, x='number', y='stage')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D PCA Scatter Plot with Plotly Express in Python\nDESCRIPTION: This snippet applies PCA to reduce the Iris dataset to 3 dimensions and creates a 3D scatter plot of the first three principal components using Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-pca.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom sklearn.decomposition import PCA\n\ndf = px.data.iris()\nX = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\n\npca = PCA(n_components=3)\ncomponents = pca.fit_transform(X)\n\ntotal_var = pca.explained_variance_ratio_.sum() * 100\n\nfig = px.scatter_3d(\n    components, x=0, y=1, z=2, color=df['species'],\n    title=f'Total Explained Variance: {total_var:.2f}%',\n    labels={'0': 'PC 1', '1': 'PC 2', '2': 'PC 3'}\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Lines in Plotly Express with Python\nDESCRIPTION: This snippet shows how to customize the appearance of grid lines in a Plotly Express scatter plot. It modifies the `gridwidth` and `gridcolor` properties of the x and y axes using `update_xaxes` and `update_yaxes`. The resulting plot will have grid lines with the specified width and color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: UMAP 2D and 3D Projections with Plotly\nDESCRIPTION: Demonstrates UMAP dimensionality reduction for both 2D and 3D projections of the Iris dataset. Shows UMAP as an efficient alternative to t-SNE for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-tsne-umap-projections.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom umap import UMAP\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfeatures = df.loc[:, :'petal_width']\n\numap_2d = UMAP(n_components=2, init='random', random_state=0)\numap_3d = UMAP(n_components=3, init='random', random_state=0)\n\nproj_2d = umap_2d.fit_transform(features)\nproj_3d = umap_3d.fit_transform(features)\n\nfig_2d = px.scatter(\n    proj_2d, x=0, y=1,\n    color=df.species, labels={'color': 'species'}\n)\nfig_3d = px.scatter_3d(\n    proj_3d, x=0, y=1, z=2,\n    color=df.species, labels={'color': 'species'}\n)\nfig_3d.update_traces(marker_size=5)\n\nfig_2d.show()\nfig_3d.show()\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Themes in Plotly\nDESCRIPTION: This snippet shows how to access the default plotly templates available in the plotly library. It imports the plotly.io module and retrieves the templates information.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.templates\n```\n\n----------------------------------------\n\nTITLE: Animating Xarray Datasets with px.imshow in Python\nDESCRIPTION: This snippet demonstrates how to create an animation from an xarray dataset using `px.imshow` and the `animation_frame` argument. It loads an air temperature dataset from xarray's tutorial, selects a subset of the data representing different time points, and then displays the data as an animation, where each frame corresponds to a specific time. Axis names and coordinates are automatically used for labeling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport xarray as xr\n# Load xarray from dataset included in the xarray tutorial\nds = xr.tutorial.open_dataset('air_temperature').air[:20]\nfig = px.imshow(ds, animation_frame='time', zmin=220, zmax=300, color_continuous_scale='RdBu_r')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Thermal Cmocean Colorscale in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create and visualize the 'thermal' Cmocean colorscale using the previously defined functions. It converts the colormap to a Plotly colorscale and plots it using the colorscale_plot function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cmocean-colorscales.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nthermal = cmocean_to_plotly(cmocean.cm.thermal, max_len)\npy.iplot(colorscale_plot(colorscale=thermal, title='Thermal'))\n```\n\n----------------------------------------\n\nTITLE: Creating USA Choropleth Map Using Graph Objects - Python\nDESCRIPTION: This snippet illustrates how to create a choropleth map of US agriculture exports by state using Plotly's graph objects. It reads data from a CSV file, visualizes total exports, and customizes the layout and scope.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv')\n\nfig = go.Figure(data=go.Choropleth(\n    locations=df['code'], # Spatial coordinates\n    z = df['total exports'].astype(float), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'Reds',\n    colorbar_title = \"Millions USD\",\n))\n\nfig.update_layout(\n    title_text = '2011 US Agriculture Exports by State',\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Choropleth Map with Mapbox in Plotly\nDESCRIPTION: This code demonstrates how to create a choropleth map of US county unemployment data using Mapbox in Plotly. It loads GeoJSON county data and unemployment statistics, then creates a map with color intensity based on unemployment rates. The example uses the Mapbox Light style, which requires a Mapbox access token.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntoken = open(\".mapbox_token\").read() # you will need your own token\n\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Choroplethmapbox(geojson=counties, locations=df.fips, z=df.unemp,\n                                    colorscale=\"Viridis\", zmin=0, zmax=12, marker_line_width=0))\nfig.update_layout(mapbox_style=\"light\", mapbox_accesstoken=token,\n                  mapbox_zoom=3, mapbox_center = {\"lat\": 37.0902, \"lon\": -95.7129})\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Basic Plotly Figure\nDESCRIPTION: This code snippet demonstrates how to create a simple line plot using `plotly.express` and display it. It imports the `plotly.express` module, creates a line plot with specified x and y values and a title, and then prints the figure's structure and displays it in a browser window.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.line(x=[\"a\",\"b\",\"c\"], y=[1,3,2], title=\"sample figure\")\nprint(fig)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Lower/Upper Bound with Autorange in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates setting only a lower or upper bound for the axis range while using autorange for the other bound. It uses `None` to indicate that autorange should be applied. The example sets an upper bound for the x-axis and a lower bound for the y-axis, using autorange for the respective lower and upper bounds.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_xaxes(range=[None, 4.5])\nfig.update_yaxes(range=[3, None])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Backend with Basic Plot\nDESCRIPTION: Shows how to set Plotly as the Pandas plotting backend and create a basic plot from a DataFrame.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\n\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\nfig = df.plot()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing a Scatter Polar Plot with Plotly Express in Python\nDESCRIPTION: This example shows how to customize a scatter polar plot by encoding additional variables (strength) to color, symbol, and size of the markers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.wind()\nfig = px.scatter_polar(df, r=\"frequency\", theta=\"direction\",\n                       color=\"strength\", symbol=\"strength\", size=\"frequency\",\n                       color_discrete_sequence=px.colors.sequential.Plasma_r)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Vertically Stacked Subplots with Shared X-Axes - Python\nDESCRIPTION: This snippet creates a figure with 3 vertically stacked subplots where the x-axes are linked. It uses the make_subplots function from Plotly to set up the layout and adds traces to each subplot using specified row and column indices.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=3, cols=1,\n                    shared_xaxes=True,\n                    vertical_spacing=0.02)\n\nfig.add_trace(go.Scatter(x=[0, 1, 2], y=[10, 11, 12]),\n              row=3, col=1)\n\nfig.add_trace(go.Scatter(x=[2, 3, 4], y=[100, 110, 120]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter(x=[3, 4, 5], y=[1000, 1100, 1200]),\n              row=1, col=1)\n\nfig.update_layout(height=600, width=600,\n                  title_text=\"Stacked Subplots with Shared X-Axes\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Xarray Image with Plotly Express\nDESCRIPTION: This example demonstrates how to display an xarray image using Plotly Express. It loads a sample xarray dataset, selects a subset, and displays it as a heatmap with `px.imshow()`.  The `color_continuous_scale` and `origin` parameters are used for customizing the appearance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport xarray as xr\n# Load xarray from dataset included in the xarray tutorial\nairtemps = xr.tutorial.open_dataset('air_temperature').air.sel(lon=250.0)\nfig = px.imshow(airtemps.T, color_continuous_scale='RdBu_r', origin='lower')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Y-Axes Subplots in Python with Plotly\nDESCRIPTION: This code creates a 2x2 grid of subplots, each with two y-axes. It demonstrates how to add traces to specific subplots and assign them to primary or secondary y-axes using the make_subplots function and graph objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/multiple-axes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2,\n                    specs=[[{\"secondary_y\": True}, {\"secondary_y\": True}],\n                           [{\"secondary_y\": True}, {\"secondary_y\": True}]])\n\n# Top left\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name=\"yaxis data\"),\n    row=1, col=1, secondary_y=False)\n\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name=\"yaxis2 data\"),\n    row=1, col=1, secondary_y=True,\n)\n\n# Top right\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name=\"yaxis3 data\"),\n    row=1, col=2, secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name=\"yaxis4 data\"),\n    row=1, col=2, secondary_y=True,\n)\n\n# Bottom left\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name=\"yaxis5 data\"),\n    row=2, col=1, secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name=\"yaxis6 data\"),\n    row=2, col=1, secondary_y=True,\n)\n\n# Bottom right\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name=\"yaxis7 data\"),\n    row=2, col=2, secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name=\"yaxis8 data\"),\n    row=2, col=2, secondary_y=True,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sunburst of Rectangular DataFrame with plotly.express\nDESCRIPTION: This snippet demonstrates how to create a sunburst chart from a rectangular DataFrame using Plotly Express.  It loads the `tips` dataset and uses `px.sunburst` with the `path` parameter to specify the hierarchical structure based on columns 'day', 'time', and 'sex', and the `values` parameter based on 'total_bill'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['day', 'time', 'sex'], values='total_bill')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Color Dimension\nDESCRIPTION: Shows how to create a scatter plot with points colored according to a continuous variable using a colorscale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nfig = go.Figure(data=go.Scatter(\n    y = np.random.randn(500),\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=np.random.randn(500), #set color equal to a variable\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Bin Size and Color Scale in Density Heatmap\nDESCRIPTION: This snippet shows how to control the number of bins using nbinsx and nbinsy parameters and how to set a specific color scale for a density heatmap.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", nbinsx=20, nbinsy=20, color_continuous_scale=\"Viridis\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Tick Formatting in 3D Plots\nDESCRIPTION: Demonstrates various ways to customize axis ticks including custom tick labels, colors, fonts, and positioning. Shows how to set specific tick values and formatting options.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-axes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Define random surface\nN = 50\nfig = go.Figure(data=[go.Mesh3d(x=(60*np.random.randn(N)),\n                   y=(25*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='rgba(100,22,200,0.5)'\n                  )])\n\n# Different types of customized ticks\nfig.update_layout(scene = dict(\n                    xaxis = dict(\n                        ticktext= ['TICKS','MESH','PLOTLY','PYTHON'],\n                        tickvals= [0,50,75,-50]),\n                    yaxis = dict(\n                        nticks=5, tickfont=dict(\n                            color='green',\n                            size=12,\n                            family='Old Standard TT, serif',),\n                        ticksuffix='#'),\n                    zaxis = dict(\n                        nticks=4, ticks='outside',\n                        tick0=0, tickwidth=4),),\n                    width=700,\n                    margin=dict(r=10, l=10, b=10, t=10)\n                  )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom-Ordered Bar Charts\nDESCRIPTION: Demonstrates how to create bar charts with custom category ordering using categoryarray property.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'array', 'categoryarray':['d','a','c','b']})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Continuous Error Bands between two traces in Plotly Python\nDESCRIPTION: This snippet illustrates creating continuous error bands by defining separate traces for the upper and lower bounds. The lower trace uses the `fill='tonexty'` attribute to fill the area up to the upper trace, effectively creating the error band. This method provides more control over the individual bounds of the error band, allowing for variable error ranges.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/continuous-error-bars.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\n\nfig = go.Figure([\n    go.Scatter(\n        name='Measurement',\n        x=df['Time'],\n        y=df['10 Min Sampled Avg'],\n        mode='lines',\n        line=dict(color='rgb(31, 119, 180)'),\n    ),\n    go.Scatter(\n        name='Upper Bound',\n        x=df['Time'],\n        y=df['10 Min Sampled Avg']+df['10 Min Std Dev'],\n        mode='lines',\n        marker=dict(color=\"#444\"),\n        line=dict(width=0),\n        showlegend=False\n    ),\n    go.Scatter(\n        name='Lower Bound',\n        x=df['Time'],\n        y=df['10 Min Sampled Avg']-df['10 Min Std Dev'],\n        marker=dict(color=\"#444\"),\n        line=dict(width=0),\n        mode='lines',\n        fillcolor='rgba(68, 68, 68, 0.3)',\n        fill='tonexty',\n        showlegend=False\n    )\n])\nfig.update_layout(\n    yaxis=dict(title=dict(text='Wind speed (m/s)')),\n    title=dict(text='Continuous, variable value error bars'),\n    hovermode=\"x\"\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Numbers with Indicators\nDESCRIPTION: This snippet shows how to display multiple indicator numbers in a single layout with customized domains. Each indicator can show a delta compared to a reference value and includes formatting for titles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/indicator.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Indicator(\n    mode = \"number+delta\",\n    value = 200,\n    domain = {'x': [0, 0.5], 'y': [0, 0.5]},\n    delta = {'reference': 400, 'relative': True, 'position' : \"top\"}))\n\nfig.add_trace(go.Indicator(\n    mode = \"number+delta\",\n    value = 350,\n    delta = {'reference': 400, 'relative': True},\n    domain = {'x': [0, 0.5], 'y': [0.5, 1]}))\n\nfig.add_trace(go.Indicator(\n    mode = \"number+delta\",\n    value = 450,\n    title = {\"text\": \"Accounts<br><span style='font-size:0.8em;color:gray'>Subtitle</span><br><span style='font-size:0.8em;color:gray'>Subsubtitle</span>\"},\n    delta = {'reference': 400, 'relative': True},\n    domain = {'x': [0.6, 1], 'y': [0, 1]}))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Trace Radar Chart with go.Scatterpolar\nDESCRIPTION: This example shows how to create a radar chart with multiple traces to compare different products or categories. It uses the go.Scatterpolar object twice with different data and sets a fixed range for the radial axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/radar-chart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ncategories = ['processing cost','mechanical properties','chemical stability',\n              'thermal stability', 'device integration']\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatterpolar(\n      r=[1, 5, 2, 2, 3],\n      theta=categories,\n      fill='toself',\n      name='Product A'\n))\nfig.add_trace(go.Scatterpolar(\n      r=[4, 3, 2.5, 1, 2],\n      theta=categories,\n      fill='toself',\n      name='Product B'\n))\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[0, 5]\n    )),\n  showlegend=False\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Parallel Categories with Plotly Express\nDESCRIPTION: Creates a basic parallel categories diagram using Plotly Express to visualize restaurant bill data. The visualization shows relationships between different categorical variables like sex, smoker status, and day of the week.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.parallel_categories(df)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a SPLOM for Diabetes Dataset using Plotly Python\nDESCRIPTION: This snippet imports required libraries, reads a diabetes dataset, and creates a scatterplot matrix (SPLOM) to visualize the relationship between 8 diagnostic measures for diabetic and non-diabetic patients. The SPLOM utilizes Plotly's graphing capabilities, styles the markers based on the outcome, and configures layout settings like title and hover modes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport pandas as pd\n\ndfd = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv')\ntextd = ['non-diabetic' if cl==0 else 'diabetic' for cl in dfd['Outcome']]\n\nfig = go.Figure(data=go.Splom(\n                  dimensions=[dict(label='Pregnancies', values=dfd['Pregnancies']),\n                              dict(label='Glucose', values=dfd['Glucose']),\n                              dict(label='BloodPressure', values=dfd['BloodPressure']),\n                              dict(label='SkinThickness', values=dfd['SkinThickness']),\n                              dict(label='Insulin', values=dfd['Insulin']),\n                              dict(label='BMI', values=dfd['BMI']),\n                              dict(label='DiabPedigreeFun', values=dfd['DiabetesPedigreeFunction']),\n                              dict(label='Age', values=dfd['Age'])],\n                  marker=dict(color=dfd['Outcome'],\n                              size=5,\n                              colorscale='Bluered',\n                              line=dict(width=0.5,\n                                        color='rgb(230,230,230)')),\\n                  text=textd,\n                  diagonal=dict(visible=False)))\n\ntitle = \"Scatterplot Matrix (SPLOM) for Diabetes Dataset<br>Data source:\"+\n        \" <a href='https://www.kaggle.com/uciml/pima-indians-diabetes-database/data'>[1]</a>\"\nfig.update_layout(title=title,\n                  dragmode='select',\n                  width=1000,\n                  height=1000,\n                  hovermode='closest')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Long-Form and Wide-Form Data with Plotly Express\nDESCRIPTION: Shows how to create bar charts using both long-form and wide-form data representations of medal counts. It demonstrates that Plotly Express can produce similar plots from different data formats.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/px-arguments.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nlong_df = px.data.medals_long()\nlong_df\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\nwide_df\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nlong_df = px.data.medals_long()\n\nfig = px.bar(long_df, x=\"nation\", y=\"count\", color=\"medal\", title=\"Long-Form Input\")\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], title=\"Wide-Form Input\")\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], title=\"Wide-Form Input, relabelled\",\n            labels={\"value\": \"count\", \"variable\": \"medal\"})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Bar Colors Using Plotly Graph Objects in Python\nDESCRIPTION: This example shows how to assign different colors to individual bars in a bar chart using plotly.graph_objects. Using an array of color values, each bar can be uniquely styled for better visual differentiation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ncolors = ['lightslategray',] * 5\ncolors[1] = 'crimson'\n\nfig = go.Figure(data=[go.Bar(\n    x=['Feature A', 'Feature B', 'Feature C',\n       'Feature D', 'Feature E'],\n    y=[20, 14, 23, 25, 22],\n    marker_color=colors # marker color can be a single color value or an iterable\n)])\nfig.update_layout(title_text='Least Used Feature')\n```\n\n----------------------------------------\n\nTITLE: Drawing a Great Circle Between London and NYC on a Map in Python\nDESCRIPTION: This snippet demonstrates how to draw a great circle line between two points (London and New York City) on a map using Plotly Graph Objects. It includes customization of the map projection and appearance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-maps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scattergeo(\n    lat = [40.7127, 51.5072],\n    lon = [-74.0059, 0.1275],\n    mode = 'lines',\n    line = dict(width = 2, color = 'blue'),\n))\n\nfig.update_layout(\n    title_text = 'London to NYC Great Circle',\n    showlegend = False,\n    geo = dict(\n        resolution = 50,\n        showland = True,\n        showlakes = True,\n        landcolor = 'rgb(204, 204, 204)',\n        countrycolor = 'rgb(204, 204, 204)',\n        lakecolor = 'rgb(255, 255, 255)',\n        projection_type = \"equirectangular\",\n        coastlinewidth = 2,\n        lataxis = dict(\n            range = [20, 60],\n            showgrid = True,\n            dtick = 10\n        ),\n        lonaxis = dict(\n            range = [-100, 20],\n            showgrid = True,\n            dtick = 20\n        ),\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flight Delay Data with Scattergl Plot\nDESCRIPTION: This snippet creates a scatter plot using Plotly's Scattergl to visualize a subset of flight delay data. It demonstrates the limitation of traditional scatter plots when dealing with large datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/performance.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\nimport datashader as ds\ndf = pd.read_parquet('https://raw.githubusercontent.com/plotly/datasets/master/2015_flights.parquet')\nfig = go.Figure(go.Scattergl(x=df['SCHEDULED_DEPARTURE'][::200],\n                             y=df['DEPARTURE_DELAY'][::200],\n                             mode='markers')\n)\nfig.update_layout(title_text='A busy plot')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Surface Plot with Type Toggle Button in Plotly Python\nDESCRIPTION: Implements a toggle button to switch between 3D surface and heatmap visualizations of volcano data. Uses the restyle method to update trace type while maintaining consistent layout and scene properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Surface(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    template=\"plotly_white\",\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add dropdown\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type = \"buttons\",\n            direction = \"left\",\n            buttons=list([\n                dict(\n                    args=[\"type\", \"surface\"],\n                    label=\"3D Surface\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"type\", \"heatmap\"],\n                    label=\"Heatmap\",\n                    method=\"restyle\"\n                )\n            ]),\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.11,\n            xanchor=\"left\",\n            y=1.1,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\n# Add annotation\nfig.update_layout(\n    annotations=[\n        dict(text=\"Trace type:\", showarrow=False,\n                             x=0, y=1.08, yref=\"paper\", align=\"left\")\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Map using Graph Objects in Python\nDESCRIPTION: This snippet shows how to create a basic scatter map manually using Plotly Graph Objects, including setting marker properties and updating layout options for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n        lat=[\"45.5017\"],\n        lon=[\"-73.5673\"],\n        mode='markers',\n        marker=go.scattermap.Marker(\n            size=14\n        ),\n        text=[\"Montreal\"],\n    ))\n\nfig.update_layout(\n    hovermode='closest',\n    map=dict(\n        bearing=0,\n        center=go.layout.map.Center(\n            lat=45,\n            lon=-73\n        ),\n        pitch=0,\n        zoom=5\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sunburst with Continuous Color in px.sunburst\nDESCRIPTION: This snippet demonstrates using a continuous color scale in a Plotly Express sunburst chart. It loads the `gapminder` dataset, filters for the year 2007, and creates a sunburst chart with 'continent' and 'country' as the path, 'pop' as values, and 'lifeExp' as the color, using a red-blue color scale with a midpoint based on the average life expectancy weighted by population.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(df, path=['continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing 2D Random Walk using Plotly in Python\nDESCRIPTION: This code generates a 2D random walk and visualizes it using a scatter plot with a color scale to denote the time sequence. It uses numpy for random number generation and Plotly for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/random-walk.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nl = 1000\nx_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l) # l steps\ny_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l) # l steps\nx_position = np.cumsum(x_steps) # integrate the position by summing steps values\ny_position = np.cumsum(y_steps) # integrate the position by summing steps values\n\nfig = go.Figure(data=go.Scatter(\n    x=x_position,\n    y=y_position,\n    mode='markers',\n    name='Random Walk',\n    marker=dict(\n        color=np.arange(l),\n        size=8,\n        colorscale='Greens',\n        showscale=True\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Radar Chart with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a simple radar chart using Plotly Express's line_polar function with categorical angular variables. The parameter line_close=True ensures the lines form a closed shape.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/radar-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\ndf = pd.DataFrame(dict(\n    r=[1, 5, 2, 2, 3],\n    theta=['processing cost','mechanical properties','chemical stability',\n           'thermal stability', 'device integration']))\nfig = px.line_polar(df, r='r', theta='theta', line_close=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualize PCA Loadings using Plotly\nDESCRIPTION: This code snippet demonstrates how to visualize PCA loadings using Plotly. It performs PCA on the Iris dataset, calculates the loadings, and creates a scatter plot with annotations to represent the features' contributions to the principal components. It requires the plotly.express and scikit-learn libraries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-pca.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom sklearn.decomposition import PCA\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\n\ndf = px.data.iris()\nfeatures = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\nX = df[features]\n\npca = PCA(n_components=2)\ncomponents = pca.fit_transform(X)\n\nloadings = pca.components_.T * np.sqrt(pca.explained_variance_)\n\nfig = px.scatter(components, x=0, y=1, color=df['species'])\n\nfor i, feature in enumerate(features):\n    fig.add_annotation(\n        ax=0, ay=0,\n        axref=\"x\", ayref=\"y\",\n        x=loadings[i, 0],\n        y=loadings[i, 1],\n        showarrow=True,\n        arrowsize=2,\n        arrowhead=2,\n        xanchor=\"right\",\n        yanchor=\"top\"\n    )\n    fig.add_annotation(\n        x=loadings[i, 0],\n        y=loadings[i, 1],\n        ax=0, ay=0,\n        xanchor=\"center\",\n        yanchor=\"bottom\",\n        text=feature,\n        yshift=5,\n    )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Interactive Distribution Plot with Plotly Express\nDESCRIPTION: Create a histogram with additional marginal statistical representations using Plotly Express, supporting multiple visualization styles like rug and box plots\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/distplot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", y=\"tip\", color=\"sex\", marginal=\"rug\",\n                   hover_data=df.columns)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Histogram with go.Histogram\nDESCRIPTION: This snippet shows how to create a basic histogram using `go.Histogram` from `plotly.graph_objects`. It generates a random dataset using NumPy and plots its distribution using the `go.Histogram` class. The result is displayed using `fig.show()`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\n\nx = np.random.randn(500)\n\nfig = go.Figure(data=[go.Histogram(x=x)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Continuous Color in Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a scatter plot using Plotly Express, with points colored using the Viridis color scale. It uses the iris dataset and maps sepal length to color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\",\n                 color=\"sepal_length\", color_continuous_scale=px.colors.sequential.Viridis)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Bullet Chart for Comparing Multiple Values with Plotly in Python\nDESCRIPTION: This example shows how to create a multi-bullet chart for comparing several values at once. It stacks multiple bullet charts, each representing a different metric (Revenue, Profit, and Satisfaction) with its own range, threshold, and styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bullet-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = 180,\n    delta = {'reference': 200},\n    domain = {'x': [0.25, 1], 'y': [0.08, 0.25]},\n    title = {'text': \"Revenue\"},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, 300]},\n        'threshold': {\n            'line': {'color': \"black\", 'width': 2},\n            'thickness': 0.75,\n            'value': 170},\n        'steps': [\n            {'range': [0, 150], 'color': \"gray\"},\n            {'range': [150, 250], 'color': \"lightgray\"}],\n        'bar': {'color': \"black\"}}))\n\nfig.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = 35,\n    delta = {'reference': 200},\n    domain = {'x': [0.25, 1], 'y': [0.4, 0.6]},\n    title = {'text': \"Profit\"},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, 100]},\n        'threshold': {\n            'line': {'color': \"black\", 'width': 2},\n            'thickness': 0.75,\n            'value': 50},\n        'steps': [\n            {'range': [0, 25], 'color': \"gray\"},\n            {'range': [25, 75], 'color': \"lightgray\"}],\n        'bar': {'color': \"black\"}}))\n\nfig.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = 220,\n    delta = {'reference': 200},\n    domain = {'x': [0.25, 1], 'y': [0.7, 0.9]},\n    title = {'text' :\"Satisfaction\"},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, 300]},\n        'threshold': {\n            'line': {'color': \"black\", 'width': 2},\n            'thickness': 0.75,\n            'value': 210},\n        'steps': [\n            {'range': [0, 150], 'color': \"gray\"},\n            {'range': [150, 250], 'color': \"lightgray\"}],\n        'bar': {'color': \"black\"}}))\nfig.update_layout(height = 400 , margin = {'t':0, 'b':0, 'l':0})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Figure Traces Based on Attribute Findings - Python\nDESCRIPTION: This snippet illustrates updating the traces of a Plotly figure based on attribute inspection, specifically to change text position and clipping behavior.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig.update_traces(cliponaxis=False, textposition=\"top right\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Ticks in Plotly Contour Plots in Python\nDESCRIPTION: This snippet demonstrates how to customize the spacing between the x and y axis ticks in a Plotly contour plot. It uses the `dx`, `x0`, `dy`, and `y0` parameters to control the tick intervals and starting positions. The `dx` and `dy` parameters set the intervals between ticks on the x and y axes, respectively, while `x0` and `y0` specify the starting positions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data =\n    go.Contour(\n        z= [[10, 10.625, 12.5, 15.625, 20],\n              [5.625, 6.25, 8.125, 11.25, 15.625],\n              [2.5, 3.125, 5., 8.125, 12.5],\n              [0.625, 1.25, 3.125, 6.25, 10.625],\n              [0, 0.625, 2.5, 5.625, 10]],\n        dx=10,\n        x0=5,\n        dy=10,\n        y0=10,\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D Brownian Motion Visualization\nDESCRIPTION: Implements and visualizes a 3D Brownian motion trajectory using Plotly Graph Objects. Includes custom geometric Brownian motion calculation and detailed 3D scene configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-line-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\n\nrs = np.random.RandomState()\nrs.seed(0)\n\ndef brownian_motion(T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):\n    dt = float(T)/N\n    t = np.linspace(0, T, N)\n    W = rs.standard_normal(size = N)\n    W = np.cumsum(W)*np.sqrt(dt) # standard brownian motion\n    X = (mu-0.5*sigma**2)*t + sigma*W\n    S = S0*np.exp(X) # geometric brownian motion\n    return S\n\ndates = pd.date_range('2012-01-01', '2013-02-22')\nT = (dates.max()-dates.min()).days / 365\nN = dates.size\nstart_price = 100\ny = brownian_motion(T, N, sigma=0.1, S0=start_price)\nz = brownian_motion(T, N, sigma=0.1, S0=start_price)\n\nfig = go.Figure(data=go.Scatter3d(\n    x=dates, y=y, z=z,\n    marker=dict(\n        size=4,\n        color=z,\n        colorscale='Viridis',\n    ),\n    line=dict(\n        color='darkblue',\n        width=2\n    )\n))\n\nfig.update_layout(\n    width=800,\n    height=700,\n    autosize=False,\n    scene=dict(\n        camera=dict(\n            up=dict(\n                x=0,\n                y=0,\n                z=1\n            ),\n            eye=dict(\n                x=0,\n                y=1.0707,\n                z=1,\n            )\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Passing x and y Data to 3D Surface Plot using Plotly in Python\nDESCRIPTION: This example demonstrates specifying custom x and y coordinates for a 3D surface plot created with Plotly. It uses numpy to generate coordinate arrays and constructs a surface plot with pandas and Plotly. Customizing x and y values allows more control over axis visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-surface-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\nz = z_data.values\nsh_0, sh_1 = z.shape\nx, y = np.linspace(0, 1, sh_0), np.linspace(0, 1, sh_1)\nfig = go.Figure(data=[go.Surface(z=z, x=x, y=y)])\nfig.update_layout(title=dict(text='Mt Bruno Elevation'), autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Regression Surface with SVM and Plotly\nDESCRIPTION: This code visualizes an SVM regression model as a 3D surface using Plotly Express and Plotly Graph Objects. It fits the model to predict Iris petal width based on sepal width and length, creates a mesh grid to visualize the prediction surface, and displays both the original data points and the predicted surface in a 3D visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.svm import SVR\n\nmesh_size = .02\nmargin = 0\n\ndf = px.data.iris()\n\nX = df[['sepal_width', 'sepal_length']]\ny = df['petal_width']\n\n# Condition the model on sepal width and length, predict the petal width\nmodel = SVR(C=1.)\nmodel.fit(X, y)\n\n# Create a mesh grid on which we will run our model\nx_min, x_max = X.sepal_width.min() - margin, X.sepal_width.max() + margin\ny_min, y_max = X.sepal_length.min() - margin, X.sepal_length.max() + margin\nxrange = np.arange(x_min, x_max, mesh_size)\nyrange = np.arange(y_min, y_max, mesh_size)\nxx, yy = np.meshgrid(xrange, yrange)\n\n# Run model\npred = model.predict(np.c_[xx.ravel(), yy.ravel()])\npred = pred.reshape(xx.shape)\n\n# Generate the plot\nfig = px.scatter_3d(df, x='sepal_width', y='sepal_length', z='petal_width')\nfig.update_traces(marker=dict(size=5))\nfig.add_traces(go.Surface(x=xrange, y=yrange, z=pred, name='pred_surface'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Bar Charts with Plotly\nDESCRIPTION: Demonstrates how to create bar charts with rounded corners using the barcornerradius property in the layout. Shows how to set corner radius in pixels for all bars.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.medals_wide()\n\nfig = go.Figure(\n    data=[\n        go.Bar(x=df.nation, y=df.gold, name=\"Gold\"),\n        go.Bar(x=df.nation, y=df.silver, name=\"Silver\"),\n        go.Bar(x=df.nation, y=df.bronze, name=\"Bronze\"),\n    ],\n    layout=dict(\n        barcornerradius=15,\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Explicitly Constructing a Color Scale with Reference Points in Plotly Express\nDESCRIPTION: This example shows how to explicitly construct a color scale with specific reference points. It creates a scatter plot with a custom red-green-blue color scale, specifying the positions of each color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"sepal_length\",\n                 color_continuous_scale=[(0, \"red\"), (0.5, \"green\"), (1, \"blue\")])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Conditional Trace Updates Using for_each_trace()\nDESCRIPTION: Utilizes the `for_each_trace()` function to update markers selectively based on current properties. Here, only the markers of traces named \"setosa\" are updated to square symbols in a Plotly Express figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 title=\"Conditionally Updating Traces In A Plotly Express Figure With for_each_trace()\")\n\nfig.for_each_trace(\n    lambda trace: trace.update(marker_symbol=\"square\") if trace.name == \"setosa\" else (),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Overlaying a 2D Histogram with Scatter Points\nDESCRIPTION: This code demonstrates how to create a visualization that combines a 2D histogram with scatter points, using different marker symbols to distinguish between data groups.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx0 = np.random.randn(100)/5. + 0.5  # 5. enforces float division\ny0 = np.random.randn(100)/5. + 0.5\nx1 = np.random.rand(50)\ny1 = np.random.rand(50) + 1.0\n\nx = np.concatenate([x0, x1])\ny = np.concatenate([y0, y1])\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n    showlegend=False,\n    marker=dict(\n        symbol='x',\n        opacity=0.7,\n        color='white',\n        size=8,\n        line=dict(width=1),\n    )\n))\nfig.add_trace(go.Scatter(\n    x=x1,\n    y=y1,\n    mode='markers',\n    showlegend=False,\n    marker=dict(\n        symbol='circle',\n        opacity=0.7,\n        color='white',\n        size=8,\n        line=dict(width=1),\n    )\n))\nfig.add_trace(go.Histogram2d(\n    x=x,\n    y=y,\n    colorscale='YlGnBu',\n    zmax=10,\n    nbinsx=14,\n    nbinsy=14,\n    zauto=False,\n))\n\nfig.update_layout(\n    xaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),\n    yaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),\n    autosize=False,\n    height=550,\n    width=550,\n    hovermode='closest',\n\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Edges and Nodes for Network Graph in Plotly\nDESCRIPTION: This code creates edge and node traces for the network graph. It extracts node positions, creates edge lines, and sets up scatter plots for both edges and nodes with customized styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/network-graphs.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nedge_x = []\nedge_y = []\nfor edge in G.edges():\n    x0, y0 = G.nodes[edge[0]]['pos']\n    x1, y1 = G.nodes[edge[1]]['pos']\n    edge_x.append(x0)\n    edge_x.append(x1)\n    edge_x.append(None)\n    edge_y.append(y0)\n    edge_y.append(y1)\n    edge_y.append(None)\n\nedge_trace = go.Scatter(\n    x=edge_x, y=edge_y,\n    line=dict(width=0.5, color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\nnode_x = []\nnode_y = []\nfor node in G.nodes():\n    x, y = G.nodes[node]['pos']\n    node_x.append(x)\n    node_y.append(y)\n\nnode_trace = go.Scatter(\n    x=node_x, y=node_y,\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        # colorscale options\n        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |\n        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |\n        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |\n        colorscale='YlGnBu',\n        reversescale=True,\n        color=[],\n        size=10,\n        colorbar=dict(\n            thickness=15,\n            title=dict(\n              text='Node Connections',\n              side='right'\n            ),\n            xanchor='left',\n        ),\n        line_width=2))\n```\n\n----------------------------------------\n\nTITLE: Connecting Gaps in Plotly Contour Plots in Python\nDESCRIPTION: This snippet shows how to connect gaps between `None` values in the Z matrix of a Plotly contour plot.  It uses `make_subplots` to create a 2x2 grid of subplots and then adds contour and heatmap traces with and without the `connectgaps` option set to `True`. This example also demonstrates heatmap functionality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2, subplot_titles=('connectgaps = False',\n                                                        'connectgaps = True'))\nz = [[None, None, None, 12, 13, 14, 15, 16],\n     [None, 1, None, 11, None, None, None, 17],\n     [None, 2, 6, 7, None, None, None, 18],\n     [None, 3, None, 8, None, None, None, 19],\n     [5, 4, 10, 9, None, None, None, 20],\n     [None, None, None, 27, None, None, None, 21],\n     [None, None, None, 26, 25, 24, 23, 22]]\n\nfig.add_trace(go.Contour(z=z, showscale=False), 1, 1)\nfig.add_trace(go.Contour(z=z, showscale=False, connectgaps=True), 1, 2)\nfig.add_trace(go.Heatmap(z=z, showscale=False, zsmooth='best'), 2, 1)\nfig.add_trace(go.Heatmap(z=z, showscale=False, connectgaps=True, zsmooth='best'), 2, 2)\n\nfig['layout']['yaxis1'].update(title=dict(text='Contour map'))\nfig['layout']['yaxis3'].update(title=dict(text='Heatmap'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Figure Updates with Plotly Express\nDESCRIPTION: An example of applying several modifications to a Plotly Express scatter plot through method chaining. Modified properties include title font size, grid visibility, and trace line appearance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\n(px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n            facet_col=\"species\", trendline=\"ols\",\n            title=\"Chaining Multiple Figure Operations With A Plotly Express Figure\")\n .update_layout(title_font_size=24)\n .update_xaxes(showgrid=False)\n .update_traces(\n     line=dict(dash=\"dot\", width=4),\n     selector=dict(type=\"scatter\", mode=\"lines\"))\n).show()\n```\n\n----------------------------------------\n\nTITLE: Reversing Axes Direction in Plotly Express with Python\nDESCRIPTION: This snippet shows how to reverse the direction of an axis using the `autorange` property in Plotly Express. Setting `autorange` to \"reversed\" for the y-axis reverses its direction.  The y-axis will display values in descending order.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(autorange=\"reversed\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Category Orders in Plotly Express using Python\nDESCRIPTION: This code snippet explains creating a bar chart using Plotly Express, where the order of categories in the legends and axes can be controlled using the `category_orders` keyword. It needs Plotly Express and raw data in a structured format.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"day\", y=\"total_bill\", color=\"smoker\", barmode=\"group\", facet_col=\"sex\",\n             category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n                              \"smoker\": [\"Yes\", \"No\"],\n                              \"sex\": [\"Male\", \"Female\"]})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Carpet Plot with Multiple Scatter Traces in Plotly\nDESCRIPTION: This code creates a complex carpet plot with multiple Scattercarpet traces. It demonstrates different trace configurations including constant a values, constant b values, custom line properties with spline smoothing, and varying marker sizes and colors. The layout includes a title and hover mode setting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-scatter.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Carpet(\n    a = [0.1,0.2,0.3],\n    b = [1,2,3],\n    y = [[1,2.2,3],[1.5,2.7,3.5],[1.7,2.9,3.7]],\n    cheaterslope = 1,\n    aaxis = dict(\n        title = \"a\",\n        tickmode = \"linear\",\n        dtick = 0.05\n    ),\n    baxis = dict(\n        title = \"b\",\n        tickmode = \"linear\",\n        dtick = 0.05\n    )\n))\n\nfig.add_trace(go.Scattercarpet(\n    name = \"b = 1.5\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [1.5, 1.5, 1.5, 1.5]\n))\n\nfig.add_trace(go.Scattercarpet(\n    name = \"b = 2\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [2, 2, 2, 2]\n))\n\nfig.add_trace(go.Scattercarpet(\n    name = \"b = 2.5\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [2.5, 2.5, 2.5, 2.5]\n))\n\nfig.add_trace(go.Scattercarpet(\n    name = \"a = 0.15\",\n    a = [0.15, 0.15, 0.15, 0.15],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    )\n))\n\nfig.add_trace(go.Scattercarpet(\n    name = \"a = 0.2\",\n    a = [0.2, 0.2, 0.2, 0.2],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    ),\n      marker = dict(\n        size = [10, 20, 30, 40],\n        color = [\"#000\", \"#f00\", \"#ff0\", \"#fff\"]\n      )\n))\n\nfig.add_trace(go.Scattercarpet(\n    name = \"a = 0.25\",\n    a = [0.25, 0.25, 0.25, 0.25],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    )\n))\n\nfig.update_layout(\n    title = \"scattercarpet extrapolation, clipping, and smoothing\",\n    hovermode = \"closest\"\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Bar Chart with Plotly Graph Objects in Python\nDESCRIPTION: The example uses plotly.graph_objects to create a stacked bar chart. It stacks bar data vertically using the barmode='stack' property, useful for showing the cumulative effect of different categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nanimals=['giraffes', 'orangutans', 'monkeys']\n\nfig = go.Figure(data=[\n    go.Bar(name='SF Zoo', x=animals, y=[20, 14, 23]),\n    go.Bar(name='LA Zoo', x=animals, y=[12, 18, 29])\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sankey Diagram with Custom Hover Template\nDESCRIPTION: Shows how to use hovertemplate and customdata to create detailed hover information for both nodes and links in a Sankey diagram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(color = \"black\", width = 0.5),\n      label = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"],\n      customdata = [\"Long name A1\", \"Long name A2\", \"Long name B1\", \"Long name B2\",\n                    \"Long name C1\", \"Long name C2\"],\n      hovertemplate='Node %{customdata} has total value %{value}<extra></extra>',\n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0, 1, 0, 2, 3, 3],\n      target = [2, 3, 3, 4, 4, 5],\n      value = [8, 4, 2, 8, 4, 2],\n      customdata = [\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"],\n      hovertemplate='Link from node %{source.customdata}<br />'+\n        'to node%{target.customdata}<br />has value %{value}'+\n        '<br />and data %{customdata}<extra></extra>',\n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Colored Bar Charts with Continuous Color Scale\nDESCRIPTION: Shows how to create bar charts with continuous color mapping based on life expectancy data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country == 'Canada'\")\nfig = px.bar(df, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap'], color='lifeExp',\n             labels={'pop':'population of Canada'}, height=400)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Standoff to Position a Marker in Plotly Python\nDESCRIPTION: This snippet shows how to use 'standoff' to position a marker away from others in a Plotly plot. It demonstrates how to set a marker's position away in the direction of its angle, which is useful for clearly displaying overlapping markers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder()\ndf = df.loc[(df.continent == \"Americas\") & (df.year.isin([1987, 2007]))]\n\ncountries = (\n    df.loc[(df.continent == \"Americas\") & (df.year.isin([2007]))]\n    .sort_values(by=[\"pop\"], ascending=True)[\"country\"]\n    .unique()\n)[5:-10]\n\ndata = {\"x\": [], \"y\": [], \"colors\": [], \"years\": []}\n\nfor country in countries:\n    data[\"x\"].extend(\n        [\n            df.loc[(df.year == 1987) & (df.country == country)][\"pop\"].values[0],\n            df.loc[(df.year == 2007) & (df.country == country)][\"pop\"].values[0],\n            None,\n        ]\n    )\n    data[\"y\"].extend([country, country, None]),\n    data[\"colors\"].extend([\"cyan\", \"darkblue\", \"white\"]),\n    data[\"years\"].extend([\"1987\", \"2007\", None])\n\nfig = go.Figure(\n    data=[\n        go.Scatter(\n            x=data[\"x\"],\n            y=data[\"y\"],\n            mode=\"markers+lines\",\n            marker=dict(\n                symbol=\"arrow\",\n                color=\"royalblue\",\n                size=16,\n                angleref=\"previous\",\n                standoff=8,\n            ),\n        ),\n        go.Scatter(\n            x=data[\"x\"],\n            y=data[\"y\"],\n            text=data[\"years\"],\n            mode=\"markers\",\n            marker=dict(\n                color=data[\"colors\"],\n                size=16,\n            ),\n            hovertemplate=\"\"\"Country: %{y} <br> Population: %{x} <br> Year: %{text} <br><extra></extra>\"\"\",\n        ),\n    ]\n)\n\nfig.update_layout(\n    title=dict(text=\"Population changes 1987 to 2007\"),\n    width=1000,\n    height=1000,\n    showlegend=False,\n)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Subplot Axes with Plotly\nDESCRIPTION: This snippet synchronizes axes in subplots using the 'matches' parameter with Plotly Graph Objects and Subplots. It ensures the x-axis ranges in multiple subplots match for consistent interactivity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\nN = 20\nx = np.linspace(0, 1, N)\n\nfig = make_subplots(1, 3)\nfor i in range(1, 4):\n    fig.add_trace(go.Scatter(x=x, y=np.random.random(N)), 1, i)\nfig.update_xaxes(matches='x')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Text Annotations to Shapes in Plotly in Python\nDESCRIPTION: This example illustrates adding text annotations to shapes using the `annotation_text` and `annotation_position` arguments. It leverages Plotly's `add_hline` and `add_vrect` methods and the stocks dataset for line visualization. Plotly and Plotly Express are required.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-vertical-shapes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\nfig = px.line(df)\nfig.add_hline(y=1, line_dash=\"dot\",\n              annotation_text=\"Jan 1, 2018 baseline\", \n              annotation_position=\"bottom right\")\nfig.add_vrect(x0=\"2018-09-24\", x1=\"2018-12-18\", \n              annotation_text=\"decline\", annotation_position=\"top left\",\n              fillcolor=\"green\", opacity=0.25, line_width=0)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating US County Choropleth Map\nDESCRIPTION: Creates a choropleth map of US counties showing unemployment rates using Plotly Express, with custom color scaling and USA-specific projection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\nimport plotly.express as px\n\nfig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           scope=\"usa\",\n                           labels={'unemp':'unemployment rate'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Animation with Simple Play Button using Graph Objects\nDESCRIPTION: This example demonstrates creating an animated figure with a play button using Plotly's Graph Objects. It defines initial data, layout with control buttons, and frames that will be cycled through when animation is triggered.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Scatter(x=[0, 1], y=[0, 1])],\n    layout=go.Layout(\n        xaxis=dict(range=[0, 5], autorange=False),\n        yaxis=dict(range=[0, 5], autorange=False),\n        title=dict(text=\"Start Title\"),\n        updatemenus=[dict(\n            type=\"buttons\",\n            buttons=[dict(label=\"Play\",\n                          method=\"animate\",\n                          args=[None])])]\n    ),\n    frames=[go.Frame(data=[go.Scatter(x=[1, 2], y=[1, 2])]),\n            go.Frame(data=[go.Scatter(x=[1, 4], y=[1, 4])]),\n            go.Frame(data=[go.Scatter(x=[3, 4], y=[3, 4])],\n                     layout=go.Layout(title_text=\"End Title\"))]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Font Size in Bar Chart Using Plotly Express in Python\nDESCRIPTION: With the uniformtext parameter, this example controls text font sizes in a Plotly Express bar chart, ensuring legibility. It also demonstrates the use of textposition and text template formatting for a professional appearance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent == 'Europe' and year == 2007 and pop > 2.e6\")\nfig = px.bar(df, y='pop', x='country', text='pop')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Histogram with Marginal Distribution\nDESCRIPTION: This snippet adds a marginal distribution plot to a histogram. The `marginal` parameter can be set to 'rug', 'box', or 'violin' to display the distribution along the x-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", color=\"sex\", marginal=\"rug\", # can be `box`, `violin`\n                         hover_data=df.columns)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Area Funnel Plot with Plotly Express in Python\nDESCRIPTION: This snippet exemplifies the creation of an area funnel plot using Plotly Express. Each row of the DataFrame is represented as a stage, facilitating a clear visualization of hierarchies or flows. Required dependencies include the Plotly library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.funnel_area(names=[\"The 1st\",\"The 2nd\", \"The 3rd\", \"The 4th\", \"The 5th\"],\n                    values=[5, 4, 3, 2, 1])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Combined Dendrogram and Heatmap Visualization\nDESCRIPTION: Creates a complex visualization combining a dendrogram with a heatmap. Includes both bottom and side dendrograms, and a heatmap showing distance data between clusters. Uses external data and includes detailed layout customization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dendrogram.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nfrom scipy.spatial.distance import pdist, squareform\n\n\n# get data\ndata = np.genfromtxt(\"http://files.figshare.com/2133304/ExpRawData_E_TABM_84_A_AFFY_44.tab\",\n                     names=True,usecols=tuple(range(1,30)),dtype=float, delimiter=\"\\t\")\ndata_array = data.view((float, len(data.dtype.names)))\ndata_array = data_array.transpose()\nlabels = data.dtype.names\n\n# Initialize figure by creating upper dendrogram\nfig = ff.create_dendrogram(data_array, orientation='bottom', labels=labels)\nfor i in range(len(fig['data'])):\n    fig['data'][i]['yaxis'] = 'y2'\n\n# Create Side Dendrogram\ndendro_side = ff.create_dendrogram(data_array, orientation='right')\nfor i in range(len(dendro_side['data'])):\n    dendro_side['data'][i]['xaxis'] = 'x2'\n\n# Add Side Dendrogram Data to Figure\nfor data in dendro_side['data']:\n    fig.add_trace(data)\n\n# Create Heatmap\ndendro_leaves = dendro_side['layout']['yaxis']['ticktext']\ndendro_leaves = list(map(int, dendro_leaves))\ndata_dist = pdist(data_array)\nheat_data = squareform(data_dist)\nheat_data = heat_data[dendro_leaves,:]\nheat_data = heat_data[:,dendro_leaves]\n\nheatmap = [\n    go.Heatmap(\n        x = dendro_leaves,\n        y = dendro_leaves,\n        z = heat_data,\n        colorscale = 'Blues'\n    )\n]\n\nheatmap[0]['x'] = fig['layout']['xaxis']['tickvals']\nheatmap[0]['y'] = dendro_side['layout']['yaxis']['tickvals']\n\n# Add Heatmap Data to Figure\nfor data in heatmap:\n    fig.add_trace(data)\n\n# Edit Layout\nfig.update_layout({'width':800, 'height':800,\n                         'showlegend':False, 'hovermode': 'closest',\n                         })\n# Edit xaxis\nfig.update_layout(xaxis={'domain': [.15, 1],\n                                  'mirror': False,\n                                  'showgrid': False,\n                                  'showline': False,\n                                  'zeroline': False,\n                                  'ticks':''})\n# Edit xaxis2\nfig.update_layout(xaxis2={'domain': [0, .15],\n                                   'mirror': False,\n                                   'showgrid': False,\n                                   'showline': False,\n                                   'zeroline': False,\n                                   'showticklabels': False,\n                                   'ticks':''})\n\n# Edit yaxis\nfig.update_layout(yaxis={'domain': [0, .85],\n                                  'mirror': False,\n                                  'showgrid': False,\n                                  'showline': False,\n                                  'zeroline': False,\n                                  'showticklabels': False,\n                                  'ticks': ''\n                        })\n# Edit yaxis2\nfig.update_layout(yaxis2={'domain':[.825, .975],\n                                   'mirror': False,\n                                   'showgrid': False,\n                                   'showline': False,\n                                   'zeroline': False,\n                                   'showticklabels': False,\n                                   'ticks':''})\n\n# Plot!\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Charts in Subplots with Domain Type in Python\nDESCRIPTION: Shows how to create multiple pie charts in a subplot layout using make_subplots with domain type. This example creates two donut charts showing different emissions data with annotations in the center of each.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = [\"US\", \"China\", \"European Union\", \"Russian Federation\", \"Brazil\", \"India\",\n          \"Rest of World\"]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=[16, 15, 12, 6, 5, 4, 42], name=\"GHG Emissions\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[27, 11, 25, 8, 1, 3, 25], name=\"CO2 Emissions\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Global Emissions 1990-2011\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='GHG', x=sum(fig.get_subplot(1, 1).x) / 2, y=0.5,\n                      font_size=20, showarrow=False, xanchor=\"center\"),\n                 dict(text='CO2', x=sum(fig.get_subplot(1, 2).x) / 2, y=0.5,\n                      font_size=20, showarrow=False, xanchor=\"center\")])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding OLS Trendlines to Scatterplots with Plotly Express\nDESCRIPTION: Demonstrates how to add Ordinary Least Squares regression trendlines to scatterplots using the 'trendline' parameter in Plotly Express. Requires statsmodels to be installed. Hovering over the trendline will show the equation and R-squared value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", trendline=\"ols\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Polar Plot Range and Direction with Plotly Express in Python\nDESCRIPTION: This example demonstrates how to customize the range, start angle, and direction of a polar plot using Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.scatter_polar(r=range(0,90,10), theta=range(0,90,10),\n                       range_theta=[0,90], start_angle=0, direction=\"counterclockwise\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Cone Vortex Visualization with External Data in Plotly\nDESCRIPTION: This example loads vortex data from an external CSV file and creates a 3D cone plot to visualize the vortex flow patterns. It uses the 'Blues' colorscale to represent vector magnitudes and sets custom aspect ratio and camera position.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/cone-plot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/vortex.csv\")\n\nfig = go.Figure(data = go.Cone(\n    x=df['x'],\n    y=df['y'],\n    z=df['z'],\n    u=df['u'],\n    v=df['v'],\n    w=df['w'],\n    colorscale='Blues',\n    sizemode=\"absolute\",\n    sizeref=40))\n\nfig.update_layout(scene=dict(aspectratio=dict(x=1, y=1, z=0.8),\n                             camera_eye=dict(x=1.2, y=1.2, z=0.6)))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Single-Channel 2D Data Visualization as Heatmap\nDESCRIPTION: Illustrates how to convert 2D numerical arrays into heatmap visualizations using px.imshow with automatic colorscale mapping\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nimg = np.arange(15**2).reshape((15, 15))\nfig = px.imshow(img)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Plot Modes with graph_objects in Python\nDESCRIPTION: Illustrates different line plot modes (lines, lines+markers, and markers) using graph_objects. The example creates random data and displays three traces with different visualization modes, showing the flexibility of the go.Scatter class for different plot styles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Create random data with numpy\nimport numpy as np\nnp.random.seed(1)\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N) + 5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N) - 5\n\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=random_x, y=random_y0,\n                    mode='lines',\n                    name='lines'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y1,\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y2,\n                    mode='markers', name='markers'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Geographic Scatter Plot with Plotly Express\nDESCRIPTION: Creates a basic geographical scatter plot using px.scatter_geo() with the gapminder dataset. Demonstrates setting marker sizes based on population data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/scatter-plots-on-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\",\n                     size=\"pop\", # size of markers, \"pop\" is one of the columns of gapminder\n                     )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Polar Chart Subplots with Plotly\nDESCRIPTION: This snippet demonstrates the creation of a multi-panel polar chart using Plotly with subplots. It incorporates different types of polar scatter traces, allowing for diverse data representation across multiple polar charts on a single figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2, specs=[[{'type': 'polar'}]*2]*2)\n\nfig.add_trace(go.Scatterpolar(\n        r = [1, 2, 3],\n        theta = [50, 100, 200],\n        marker_symbol = \"square\"\n    ), 1, 1)\nfig.add_trace(go.Scatterpolar(\n        r = [1, 2, 3],\n        theta = [1, 2, 3],\n        thetaunit = \"radians\"\n    ), 1, 1)\nfig.add_trace(go.Scatterpolar(\n        r = [\"a\", \"b\", \"c\", \"b\"],\n        theta = [\"D\", \"C\", \"B\", \"A\"],\n        subplot = \"polar2\"\n    ), 1, 2)\nfig.add_trace(go.Scatterpolar(\n        r = [50, 300, 900],\n        theta = [0, 90, 180],\n        subplot = \"polar3\"\n    ), 2, 1)\nfig.add_trace(go.Scatterpolar(\n        mode = \"lines\",\n        r = [3, 3, 4, 3],\n        theta = [0, 45, 90, 270],\n        fill = \"toself\",\n        subplot = \"polar4\"\n    ), 2, 2)\n\n\nfig.update_layout(\n    polar = dict(\n      radialaxis_range = [1, 4],\n      angularaxis_thetaunit = \"radians\"\n    ),\n    polar3 = dict(\n      radialaxis = dict(type = \"log\", tickangle = 45),\n      sector = [0, 180]\n    ),\n    polar4 = dict(\n      radialaxis = dict(visible = False, range = [0, 6])),\n    showlegend = False\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Loading GeoJSON Data for US Counties\nDESCRIPTION: Loads and parses GeoJSON data containing US county geometry information where feature.id represents FIPS codes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\ncounties[\"features\"][0]\n```\n\n----------------------------------------\n\nTITLE: Styled Categorical Dot Plot with Plotly in Python\nDESCRIPTION: This illustration showcases a styled dot plot with Plotly Graph Objects, depicting the voting population proportion in OECD countries. It necessitates Plotly library and structures data into arrays. It applies custom marker styling, layout configurations, and results in an interactive plot, visually distinguishing voting populations and registered voters.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dot-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ncountry = ['Switzerland (2011)', 'Chile (2013)', 'Japan (2014)',\n           'United States (2012)', 'Slovenia (2014)', 'Canada (2011)',\n           'Poland (2010)', 'Estonia (2015)', 'Luxembourg (2013)', 'Portugal (2011)']\nvoting_pop = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6]\nreg_voters = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=voting_pop,\n    y=country,\n    name='Percent of estimated voting age population',\n    marker=dict(\n        color='rgba(156, 165, 196, 0.95)',\n        line_color='rgba(156, 165, 196, 1.0)',\n    )\n))\nfig.add_trace(go.Scatter(\n    x=reg_voters, y=country,\n    name='Percent of estimated registered voters',\n    marker=dict(\n        color='rgba(204, 204, 204, 0.95)',\n        line_color='rgba(217, 217, 217, 1.0)'\n    )\n))\n\nfig.update_traces(mode='markers', marker=dict(line_width=1, symbol='circle', size=16))\n\nfig.update_layout(\n    title=dict(text=\"Votes cast for ten lowest voting age population in OECD countries\"),\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=10,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(l=140, r=40, b=50, t=80),\n    legend=dict(\n        font_size=10,\n        yanchor='middle',\n        xanchor='right',\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    hovermode='closest',\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic 3D Scatter Plot with go.Scatter3d\nDESCRIPTION: This snippet creates a basic 3D scatter plot using `go.Scatter3d` from `plotly.graph_objects`. It imports `plotly.graph_objects` and `numpy`, generates data for a helix, and plots it using `go.Scatter3d` with the 'markers' mode.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-scatter-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Helix equation\nt = np.linspace(0, 10, 50)\nx, y, z = np.cos(t), np.sin(t), t\n\nfig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z,\n                                   mode='markers')])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Line Plot with Sorted Input Data using Plotly Express\nDESCRIPTION: This snippet illustrates the importance of sorting data before creating line plots with `plotly.express`. It demonstrates that Plotly connects points in the order they are provided. Therefore, if the data is not sorted by the x-axis variable, the line may appear unsorted. The code shows both an unsorted and a sorted example, and displays the resulting plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame(dict(\n    x = [1, 3, 2, 4],\n    y = [1, 2, 3, 4]\n))\nfig = px.line(df, x=\\\"x\\\", y=\\\"y\\\", title=\\\"Unsorted Input\\\")\nfig.show()\n\ndf = df.sort_values(by=\\\"x\\\")\nfig = px.line(df, x=\\\"x\\\", y=\\\"y\\\", title=\\\"Sorted Input\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Treemap with Continuous Color Argument - Python\nDESCRIPTION: This snippet showcases how to create a Treemap that incorporates a color argument, where colors are determined based on the weighted average of children node values. It demonstrates the use of a dummy first path element for proper display.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.treemap(df, path=[px.Constant(\"world\"), 'continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configure Surface Contour Levels using Plotly in Python\nDESCRIPTION: This script illustrates how to set contour levels on a 3D surface for x, y, and z axes using Plotly. Each axis’s contours are configured with start, end, and size parameters, offering precise control over contour distribution. This configuration is essential for detailed surface analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-surface-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Surface(\n    contours = {\n        \"x\": {\"show\": True, \"start\": 1.5, \"end\": 2, \"size\": 0.04, \"color\":\"white\"},\n        \"z\": {\"show\": True, \"start\": 0.5, \"end\": 0.8, \"size\": 0.05}\n    },\n    x = [1,2,3,4,5],\n    y = [1,2,3,4,5],\n    z = [\n        [0, 1, 0, 1, 0],\n        [1, 0, 1, 0, 1],\n        [0, 1, 0, 1, 0],\n        [1, 0, 1, 0, 1],\n        [0, 1, 0, 1, 0]\n    ]))\nfig.update_layout(\n        scene = {\n            \"xaxis\": {\"nticks\": 20},\n            \"zaxis\": {\"nticks\": 4},\n            'camera_eye': {\"x\": 0, \"y\": -1, \"z\": 0.5},\n            \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 0.2}\n        })\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Bar Chart with Plotly Express\nDESCRIPTION: This snippet shows how to create an animated bar chart using Plotly Express, displaying population by continent over time. It demonstrates setting the animation frame to year, animation group to country, and fixing the y-axis range to ensure data visibility across all frames.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder()\n\nfig = px.bar(df, x=\"continent\", y=\"pop\", color=\"continent\",\n  animation_frame=\"year\", animation_group=\"country\", range_y=[0,4000000000])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Making Modebar Always Visible in Plotly Python\nDESCRIPTION: This code shows how to make the modebar (interactive toolbar) always visible in a Plotly figure, instead of only appearing on hover.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nconfig = {'displayModeBar': True}\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]))\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Strip Chart with Plotly Express in Python\nDESCRIPTION: This example demonstrates how to generate a basic strip chart using Plotly Express's `px.strip()` function. It visualizes data from the 'tips' dataset, plotting 'total_bill' against 'day'. The function requires the dataset to be passed as a parameter and the x and y-axis attributes specified.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/strip-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.strip(df, x=\"total_bill\", y=\"day\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Explicit Color Sequence using Plotly Express in Python\nDESCRIPTION: This snippet shows how to create a horizontal bar chart using Plotly Express, where an explicit color sequence for the bars is defined. The `category_orders` parameter ensures the ordering of categorical values in the chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.bar(df, y=\"continent\", x=\"pop\", color=\"continent\", orientation=\"h\", hover_name=\"country\",\n             color_discrete_sequence=[\"red\", \"green\", \"blue\", \"goldenrod\", \"magenta\"],\n             category_orders={\"continent\": [\"Oceania\", \"Europe\", \"Asia\", \"Africa\", \"Americas\"]},\n             title=\"Explicit color sequence with explicit ordering\"\n            )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Animated Hexbin Map in Plotly\nDESCRIPTION: This snippet demonstrates creating an animated hexbin map where frames animate based on periods computed with random data. It uses Mapbox for visualization, requiring an access token. Numpy is used for generating random data, and animation features are employed to add dynamic elements.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hexbin-mapbox.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport numpy as np\n\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\nnp.random.seed(0)\n\nN = 500\nn_frames = 12\nlat = np.concatenate([\n    np.random.randn(N) * 0.5 + np.cos(i / n_frames * 2 * np.pi) + 10\n    for i in range(n_frames)\n])\nlon = np.concatenate([\n    np.random.randn(N) * 0.5 + np.sin(i / n_frames * 2 * np.pi)\n    for i in range(n_frames)\n])\nframe = np.concatenate([\n    np.ones(N, int) * i for i in range(n_frames)\n])\n\nfig = ff.create_hexbin_mapbox(\n    lat=lat, lon=lon, nx_hexagon=15, animation_frame=frame,\n    color_continuous_scale=\"Cividis\", labels={\"color\": \"Point Count\", \"frame\": \"Period\"},\n    opacity=0.5, min_count=1,\n    show_original_data=True, original_data_marker=dict(opacity=0.6, size=4, color=\"deeppink\")\n)\nfig.update_layout(margin=dict(b=0, t=0, l=0, r=0))\nfig.layout.sliders[0].pad.t=20\nfig.layout.updatemenus[0].pad.t=40\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Time Series with Range Slider using Plotly Express\nDESCRIPTION: This example demonstrates how to add a range slider to a time series plot using Plotly Express. The range slider allows users to pan and zoom the X-axis while maintaining an overview of the chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = px.line(df, x='Date', y='AAPL.High', title='Time Series with Rangeslider')\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sunburst with Discrete Color Mapping in px.sunburst\nDESCRIPTION: This snippet shows how to use an explicit color mapping for discrete colors in a Plotly Express sunburst chart. It loads the `tips` dataset and creates a sunburst chart using 'sex', 'day', and 'time' as the path, 'total_bill' as the values, and 'time' as the color. It defines a `color_discrete_map` to specify the colors for 'Lunch', 'Dinner' and missing values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['sex', 'day', 'time'], values='total_bill', color='time',\n                  color_discrete_map={'(?)':'black', 'Lunch':'gold', 'Dinner':'darkblue'})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Triangular Moving Average Smoothing with Plotly in Python\nDESCRIPTION: This code implements the Triangular Moving Average smoothing method. It defines a custom function for the smoothing algorithm and creates a Plotly figure comparing the original sine wave, noisy data, and smoothed data using the Triangular Moving Average.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/smoothing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef smoothTriangle(data, degree):\n    triangle=np.concatenate((np.arange(degree + 1), np.arange(degree)[::-1])) # up then down\n    smoothed=[]\n\n    for i in range(degree, len(data) - degree * 2):\n        point=data[i:i + len(triangle)] * triangle\n        smoothed.append(np.sum(point)/np.sum(triangle))\n    # Handle boundaries\n    smoothed=[smoothed[0]]*int(degree + degree/2) + smoothed\n    while len(smoothed) < len(data):\n        smoothed.append(smoothed[-1])\n    return smoothed\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    marker=dict(\n        size=2,\n        color='rgb(0, 0, 0)',\n    ),\n    name='Sine'\n))\n\nfig.add_trace(go.Scatter(\n    x=x,\n    y=y_noise,\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='#5E88FC',\n        symbol='circle-open'\n    ),\n    name='Noisy Sine'\n))\n\nfig.add_trace(go.Scatter(\n    x=x,\n    y=smoothTriangle(y_noise, 10),  # setting degree to 10\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='#C190F0',\n        symbol='triangle-up'\n    ),\n    name='Moving Triangle - Degree 10'\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plot Title Alignment and Positioning\nDESCRIPTION: Demonstrates how to precisely align and position plot titles using x and y coordinates, anchors, and reference points\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-labels.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    y=[3, 1, 4],\n    x=[\"Mon\", \"Tue\", \"Wed\"]))\n\nfig.update_layout(\n    title={\n        'text': \"Plot Title\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Hover Label Appearance in Plotly\nDESCRIPTION: This snippet demonstrates how to customize the appearance of hover labels using the `layout.hoverlabel` attribute.  It creates a line plot and then updates the layout to set the background color, font size, and font family of the hover labels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\n\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\", title=\"Custom layout.hoverlabel formatting\")\nfig.update_traces(mode=\"markers+lines\")\n\nfig.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=16,\n        font_family=\"Rockwell\"\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Treemap from Rectangular DataFrame with Plotly Express - Python\nDESCRIPTION: In this snippet, a Treemap is created from a rectangular DataFrame using the Plotly Express library, focusing on distinct column paths that define the hierarchy of the data. The 'path' parameter is utilized to reflect different levels in the hierarchical structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.treemap(df, path=[px.Constant(\"all\"), 'day', 'time', 'sex'], values='total_bill')\nfig.update_traces(root_color=\"lightgrey\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sunburst with Repeated Labels using go.Sunburst\nDESCRIPTION: This snippet creates a sunburst plot with repeated labels using `go.Sunburst`. It defines `ids`, `labels`, and `parents` to manage the hierarchy and repeated labels. The layout is updated to have tight margins.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n ids=[\n    \"North America\", \"Europe\", \"Australia\", \"North America - Football\", \"Soccer\",\n    \"North America - Rugby\", \"Europe - Football\", \"Rugby\",\n    \"Europe - American Football\",\"Australia - Football\", \"Association\",\n    \"Australian Rules\", \"Autstralia - American Football\", \"Australia - Rugby\",\n    \"Rugby League\", \"Rugby Union\"\n  ],\n  labels= [\n    \"North<br>America\", \"Europe\", \"Australia\", \"Football\", \"Soccer\", \"Rugby\",\n    \"Football\", \"Rugby\", \"American<br>Football\", \"Football\", \"Association\",\n    \"Australian<br>Rules\", \"American<br>Football\", \"Rugby\", \"Rugby<br>League\",\n    \"Rugby<br>Union\"\n  ],\n  parents=[\n    \"\", \"\", \"\", \"North America\", \"North America\", \"North America\", \"Europe\",\n    \"Europe\", \"Europe\",\"Australia\", \"Australia - Football\", \"Australia - Football\",\n    \"Australia - Football\", \"Australia - Football\", \"Australia - Rugby\",\n    \"Australia - Rugby\"\n  ],\n))\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Stacked Area Chart in Python\nDESCRIPTION: This snippet creates a stacked area chart using the 'stackgroup' parameter, illustrating how to visualize multiple data series stacked on top of each other, enhancing readability of cumulative trends.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['Winter', 'Spring', 'Summer', 'Fall']\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x, y=[40, 60, 40, 10],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5, color='rgb(131, 90, 241)'),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[20, 10, 10, 60],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5, color='rgb(111, 231, 219)'),\n    stackgroup='one'\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[40, 30, 50, 30],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5, color='rgb(184, 247, 212)'),\n    stackgroup='one'\n))\n\nfig.update_layout(yaxis_range=(0, 100))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Text Elements with Font Arrays in Plotly Geo Maps\nDESCRIPTION: This example demonstrates how to style each text element differently using arrays for text font properties in a Plotly geo map. It shows Canadian cities with different colors, font families, and sizes for each label.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scattergeo(\n    lat=[45.5, 43.4, 49.13, 51.1, 53.34, 45.24, 44.64, 48.25, 49.89, 50.45],\n    lon=[-73.57, -79.24, -123.06, -114.1, -113.28, -75.43, -63.57, -123.21, -97.13,\n         -104.6],\n    marker={\n        \"color\": [\"MidnightBlue\", \"IndianRed\", \"MediumPurple\", \"Orange\", \"Crimson\",\n                  \"LightSeaGreen\", \"RoyalBlue\", \"LightSalmon\", \"DarkOrange\", \"MediumSlateBlue\"],\n        \"line\": {\n            \"width\": 1\n        },\n        \"size\": 10\n    },\n    mode=\"markers+text\",\n    name=\"\",\n    text=[\"Montreal\", \"Toronto\", \"Vancouver\", \"Calgary\", \"Edmonton\", \"Ottawa\",\n          \"Halifax\",\n          \"Victoria\", \"Winnepeg\", \"Regina\"],\n    textfont={\n        \"color\": [\"MidnightBlue\", \"IndianRed\", \"MediumPurple\", \"Gold\", \"Crimson\",\n                  \"LightSeaGreen\",\n                  \"RoyalBlue\", \"LightSalmon\", \"DarkOrange\", \"MediumSlateBlue\"],\n        \"family\": [\"Arial, sans-serif\", \"Balto, sans-serif\", \"Courier New, monospace\",\n                   \"Droid Sans, sans-serif\", \"Droid Serif, serif\",\n                   \"Droid Sans Mono, sans-serif\",\n                   \"Gravitas One, cursive\", \"Old Standard TT, serif\",\n                   \"Open Sans, sans-serif\",\n                   \"PT Sans Narrow, sans-serif\", \"Raleway, sans-serif\",\n                   \"Times New Roman, Times, serif\"],\n        \"size\": [22, 21, 20, 19, 18, 17, 16, 15, 14, 13]\n    },\n    textposition=[\"top center\", \"middle left\", \"top center\", \"bottom center\",\n                  \"top right\",\n                  \"middle left\", \"bottom right\", \"bottom left\", \"top right\",\n                  \"top right\"]\n))\n\nfig.update_layout(\n    title_text=\"Canadian cities\",\n    geo=dict(\n        lataxis=dict(range=[40, 70]),\n        lonaxis=dict(range=[-130, -55]),\n        scope=\"north america\"\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: West Africa Ebola Cases Bubble Map\nDESCRIPTION: Creates a complex visualization of Ebola cases in West Africa with both a main map and an inset. Includes time-based data representation and custom styling for different months.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')\ndf.head()\n\ncolors = ['rgb(239,243,255)','rgb(189,215,231)','rgb(107,174,214)','rgb(33,113,181)']\nmonths = {6:'June',7:'July',8:'Aug',9:'Sept'}\n\nfig = go.Figure()\n\nfor i in range(6,10)[::-1]:\n    df_month = df.query('Month == %d' %i)\n    fig.add_trace(go.Scattergeo(\n            lon = df_month['Lon'],\n            lat = df_month['Lat'],\n            text = df_month['Value'],\n            name = months[i],\n            marker = dict(\n                size = df_month['Value']/50,\n                color = colors[i-6],\n                line_width = 0\n            )))\n\ndf_sept = df.query('Month == 9')\nfig['data'][0].update(mode='markers+text', textposition='bottom center',\n                      text=df_sept['Value'].map('{:.0f}'.format).astype(str)+' '+\\\n                      df_sept['Country'])\n\nfig.add_trace(go.Choropleth(\n        locationmode = 'country names',\n        locations = df_sept['Country'],\n        z = df_sept['Value'],\n        text = df_sept['Country'],\n        colorscale = [[0,'rgb(0, 0, 0)'],[1,'rgb(0, 0, 0)']],\n        autocolorscale = False,\n        showscale = False,\n        geo = 'geo2'\n    ))\nfig.add_trace(go.Scattergeo(\n        lon = [21.0936],\n        lat = [7.1881],\n        text = ['Africa'],\n        mode = 'text',\n        showlegend = False,\n        geo = 'geo2'\n    ))\n\nfig.update_layout(\n    title = go.layout.Title(\n        text = 'Ebola cases reported by month in West Africa 2014<br> \\\nSource: <a href=\"https://data.hdx.rwlabs.org/dataset/rowca-ebola-cases\">\\\nHDX</a>'),\n    geo = go.layout.Geo(\n        resolution = 50,\n        scope = 'africa',\n        showframe = False,\n        showcoastlines = True,\n        landcolor = \"rgb(229, 229, 229)\",\n        countrycolor = \"white\" ,\n        coastlinecolor = \"white\",\n        projection_type = 'mercator',\n        lonaxis_range= [ -15.0, -5.0 ],\n        lataxis_range= [ 0.0, 12.0 ],\n        domain = dict(x = [ 0, 1 ], y = [ 0, 1 ])\n    ),\n    geo2 = go.layout.Geo(\n        scope = 'africa',\n        showframe = False,\n        landcolor = \"rgb(229, 229, 229)\",\n        showcountries = False,\n        domain = dict(x = [ 0, 0.6 ], y = [ 0, 0.6 ]),\n        bgcolor = 'rgba(255, 255, 255, 0.0)',\n    ),\n    legend_traceorder = 'reversed'\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing USA Choropleth Map - Python\nDESCRIPTION: This snippet shows how to customize a choropleth map by adding hover text that breaks down the agricultural exports, utilizing the Plotly graph objects library to create a more informative visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv')\n\nfor col in df.columns:\n    df[col] = df[col].astype(str)\n\ndf['text'] = df['state'] + '<br>' + \\\n    'Beef ' + df['beef'] + ' Dairy ' + df['dairy'] + '<br>' + \\\n    'Fruits ' + df['total fruits'] + ' Veggies ' + df['total veggies'] + '<br>' + \\\n    'Wheat ' + df['wheat'] + ' Corn ' + df['corn']\n\nfig = go.Figure(data=go.Choropleth(\n    locations=df['code'],\n    z=df['total exports'].astype(float),\n    locationmode='USA-states',\n    colorscale='Reds',\n    autocolorscale=False,\n    text=df['text'], # hover text\n    marker_line_color='white', # line markers between states\n    colorbar=dict(\n        title=dict(\n            text=\"Millions USD\"\n            )\n    )\n))\n\nfig.update_layout(\n    title_text='2011 US Agriculture Exports by State<br>(Hover for breakdown)',\n    geo = dict(\n        scope='usa',\n        projection=go.layout.geo.Projection(type = 'albers usa'),\n        showlakes=True, # lakes\n        lakecolor='rgb(255, 255, 255)'),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Contour Lines on a Globe using Plotly in Python\nDESCRIPTION: This code creates a visualization of contour lines on a 3D globe using Plotly Graph Objects. It demonstrates how to load data from a CSV file and plot multiple traces with different colors on an orthographic projection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-maps.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/globe_contours.csv')\ndf.head()\n\n\nscl = ['rgb(213,62,79)', 'rgb(244,109,67)', 'rgb(253,174,97)', \\\n    'rgb(254,224,139)', 'rgb(255,255,191)', 'rgb(230,245,152)', \\\n    'rgb(171,221,164)', 'rgb(102,194,165)', 'rgb(50,136,189)'\n]\nn_colors = len(scl)\n\nfig = go.Figure()\n\nfor i, (lat, lon) in enumerate(zip(df.columns[::2], df.columns[1::2])):\n    fig.add_trace(go.Scattergeo(\n        lon = df[lon],\n        lat = df[lat],\n        mode = 'lines',\n        line = dict(width = 2, color = scl[i % n_colors]\n        )))\n\nfig.update_layout(\n    title_text = 'Contour lines over globe<br>(Click and drag to rotate)',\n    showlegend = False,\n    geo = dict(\n        showland = True,\n        showcountries = True,\n        showocean = True,\n        countrywidth = 0.5,\n        landcolor = 'rgb(230, 145, 56)',\n        lakecolor = 'rgb(0, 255, 255)',\n        oceancolor = 'rgb(0, 255, 255)',\n        projection = dict(\n            type = 'orthographic',\n            rotation = dict(\n                lon = -100,\n                lat = 40,\n                roll = 0\n            )\n        ),\n        lonaxis = dict(\n            showgrid = True,\n            gridcolor = 'rgb(102, 102, 102)',\n            gridwidth = 0.5\n        ),\n        lataxis = dict(\n            showgrid = True,\n            gridcolor = 'rgb(102, 102, 102)',\n            gridwidth = 0.5\n        )\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: US Cities Population Bubble Map\nDESCRIPTION: Creates a detailed bubble map of US city populations using Scattergeo. Implements custom sizing and color coding based on population ranges, with interactive tooltips showing city names and populations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')\ndf.head()\n\ndf['text'] = df['name'] + '<br>Population ' + (df['pop']/1e6).astype(str)+' million'\nlimits = [(0,3),(3,11),(11,21),(21,50),(50,3000)]\ncolors = [\"royalblue\",\"crimson\",\"lightseagreen\",\"orange\",\"lightgrey\"]\ncities = []\nscale = 5000\n\nfig = go.Figure()\n\nfor i in range(len(limits)):\n    lim = limits[i]\n    df_sub = df[lim[0]:lim[1]]\n    fig.add_trace(go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df_sub['lon'],\n        lat = df_sub['lat'],\n        text = df_sub['text'],\n        marker = dict(\n            size = df_sub['pop']/scale,\n            color = colors[i],\n            line_color='rgb(40,40,40)',\n            line_width=0.5,\n            sizemode = 'area'\n        ),\n        name = '{0} - {1}'.format(lim[0],lim[1])))\n\nfig.update_layout(\n        title_text = '2014 US city populations<br>(Click legend to toggle traces)',\n        showlegend = True,\n        geo = dict(\n            scope = 'usa',\n            landcolor = 'rgb(217, 217, 217)',\n        )\n    )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend Order and Stack in Plotly Express in Python\nDESCRIPTION: Illustrates setting the legend order and bar stack tracing in Plotly Express. It utilizes `update_layout` to reverse legend orders and necessitates Plotly Express usage. Input data should be tabular and deterministic.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"day\", y=\"total_bill\", color=\"smoker\", barmode=\"stack\", facet_col=\"sex\",\n             category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n                              \"smoker\": [\"Yes\", \"No\"],\n                              \"sex\": [\"Male\", \"Female\"]})\nfig.update_layout(legend_traceorder=\"reversed\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Marimekko Chart Using Plotly Graph Objects in Python\nDESCRIPTION: This example demonstrates a marimekko chart implementation using plotly.graph_objects, by customizing both bar widths and stacking other parameters. It's useful for visualizing distinct ratios and comparisons among categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nlabels = [\"apples\",\"oranges\",\"pears\",\"bananas\"]\nwidths = np.array([10,20,20,50])\n\ndata = {\n    \"South\": [50,80,60,70],\n    \"North\": [50,20,40,30]\n}\n\nfig = go.Figure()\nfor key in data:\n    fig.add_trace(go.Bar(\n        name=key,\n        y=data[key],\n        x=np.cumsum(widths)-widths,\n        width=widths,\n        offset=0,\n        customdata=np.transpose([labels, widths*data[key]]),\n        texttemplate=\"%{y} x %{width} =<br>%{customdata[1]}\",\n        textposition=\"inside\",\n        textangle=0,\n        textfont_color=\"white\",\n        hovertemplate=\"<br>\".join([\n            \"label: %{customdata[0]}\",\n            \"width: %{width}\",\n            \"height: %{y}\",\n            \"area: %{customdata[1]}\",\n        ])\n    ))\n\nfig.update_xaxes(\n    tickvals=np.cumsum(widths)-widths/2,\n    ticktext= [\"%s<br>%d\" % (l, w) for l, w in zip(labels, widths)]\n)\n\nfig.update_xaxes(range=[0,100])\nfig.update_yaxes(range=[0,100])\n\nfig.update_layout(\n    title_text=\"Marimekko Chart\",\n    barmode=\"stack\",\n    uniformtext=dict(mode=\"hide\", minsize=10),\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image and Its Color Histogram with Plotly Subplots\nDESCRIPTION: Creates a subplot with an image and histograms of its RGB channel values using make_subplots and go.Image instead of px.imshow, with separate histograms for each color channel.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nfrom skimage import data\nimg = data.chelsea()\nfig = make_subplots(1, 2)\n# We use go.Image because subplots require traces, whereas px functions return a figure\nfig.add_trace(go.Image(z=img), 1, 1)\nfor channel, color in enumerate(['red', 'green', 'blue']):\n    fig.add_trace(go.Histogram(x=img[..., channel].ravel(), opacity=0.5,\n                               marker_color=color, name='%s channel' %color), 1, 2)\nfig.update_layout(height=400)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar and Scatter Chart - Python Plotly Graph Objects\nDESCRIPTION: This snippet illustrates how to create a grouped bar and scatter chart using Plotly's graph objects. It groups data by gender and smoker status, calculating average tips and plotting them alongside individual tips, linked via the `offsetgroup` attribute.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/graphing-multiple-chart-types.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.tips()[data.tips()[\"day\"] == \"Sun\"]\n\nmean_values_df = df.groupby(by=[\"sex\", \"smoker\"], as_index=False).mean(numeric_only=True)\n\nsmoker_mean = mean_values_df[mean_values_df.smoker == \"Yes\"].sort_values(by=\"tip\", ascending=False)\nnon_smoker_mean = mean_values_df[mean_values_df.smoker == \"No\"].sort_values(by=\"tip\", ascending=False)\n\nsmoker = df[df.smoker == \"Yes\"].sort_values(by=\"tip\", ascending=False)\nnon_smoker = df[df.smoker == \"No\"].sort_values(by=\"tip\", ascending=False)\n\nfig = go.Figure(\n    layout=dict(\n        xaxis=dict(categoryorder=\"category descending\"),\n        yaxis=dict(range=[0, 7]),\n        scattermode=\"group\",\n        legend=dict(groupclick=\"toggleitem\"),\n    )\n)\n\nfig.add_trace(\n    go.Bar(\n        x=smoker_mean.sex,\n        y=smoker_mean.tip,\n        name=\"Average\",\n        marker_color=\"IndianRed\",\n        offsetgroup=\"smoker\",\n        legendgroup=\"smoker\",\n        legendgrouptitle_text=\"Smoker\",\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=smoker.sex,\n        y=smoker.tip,\n        mode=\"markers\",\n        name=\"Individual tips\",\n        marker=dict(color=\"LightSlateGrey\", size=5),\n        offsetgroup=\"smoker\",\n        legendgroup=\"smoker\",\n    )\n)\n\nfig.add_trace(\n    go.Bar(\n        x=non_smoker_mean.sex,\n        y=non_smoker_mean.tip,\n        name=\"Average\",\n        marker_color=\"LightSalmon\",\n        offsetgroup=\"non-smoker\",\n        legendgroup=\"non-smoker\",\n        legendgrouptitle_text=\"Non-Smoker\",\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=non_smoker.sex,\n        y=non_smoker.tip,\n        mode=\"markers\",\n        name=\"Individual tips\",\n        marker=dict(color=\"LightSteelBlue\", size=5),\n        offsetgroup=\"non-smoker\",\n        legendgroup=\"non-smoker\",\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Strip Charts using Plotly Express\nDESCRIPTION: Shows how to create a strip chart (box plot with only points) using Plotly Express and the tips dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.strip(df, x='day', y='tip')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Bar Widths Using Plotly Graph Objects in Python\nDESCRIPTION: This snippet shows how to customize bar widths using plotly.graph_objects, allowing variation in bar size to reflect different categories or quantities. The result is a more informative and visually diverse plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Bar(\n    x=[1, 2, 3, 5.5, 10],\n    y=[10, 8, 6, 4, 2],\n    width=[0.8, 0.8, 0.8, 3.5, 4] # customize width here\n)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Information Above a Chart\nDESCRIPTION: This example shows how to overlay an indicator trace above other chart traces using Plotly. It displays an indicator for the number of users online while adding a scatter trace to visualize data trends beneath it.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/indicator.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"number+delta\",\n    value = 492,\n    delta = {\"reference\": 512, \"valueformat\": \".0f\"},\n    title = {\"text\": \"Users online\"},\n    domain = {'y': [0, 1], 'x': [0.25, 0.75]}))\n\nfig.add_trace(go.Scatter(\n    y = [325, 324, 405, 400, 424, 404, 417, 432, 419, 394, 410, 426, 413, 419, 404, 408, 401, 377, 368, 361, 356, 359, 375, 397, 394, 418, 437, 450, 430, 442, 424, 443, 420, 418, 423, 423, 426, 440, 437, 436, 447, 460, 478, 472, 450, 456, 436, 418, 429, 412, 429, 442, 464, 447, 434, 457, 474, 480, 499, 497, 480, 502, 512, 492]))\n\nfig.update_layout(xaxis = {'range': [0, 62]})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Gauge Chart Appearance\nDESCRIPTION: This snippet shows how to customize the appearance of gauge charts with various style options such as color and layout adjustments. It provides a comprehensive styling example to enhance visual representation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/gauge-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"gauge+number+delta\",\n    value = 420,\n    domain = {'x': [0, 1], 'y': [0, 1]},\n    title = {'text': \"Speed\", 'font': {'size': 24}},\n    delta = {'reference': 400, 'increasing': {'color': \"RebeccaPurple\"}},\n    gauge = {\n        'axis': {'range': [None, 500], 'tickwidth': 1, 'tickcolor': \"darkblue\"},\n        'bar': {'color': \"darkblue\"},\n        'bgcolor': \"white\",\n        'borderwidth': 2,\n        'bordercolor': \"gray\",\n        'steps': [\n            {'range': [0, 250], 'color': 'cyan'},\n            {'range': [250, 400], 'color': 'royalblue'}],\n        'threshold': {\n            'line': {'color': \"red\", 'width': 4},\n            'thickness': 0.75,\n            'value': 490}}))\n\nfig.update_layout(paper_bgcolor = \"lavender\", font = {'color': \"darkblue\", 'family': \"Arial\"})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Line Dashes in Plotly Express with Python\nDESCRIPTION: This snippet illustrates how to change the style of grid lines in a Plotly Express scatter plot using the `griddash` property.  It sets the x-axis grid lines to 'dash' and the minor grid lines to 'dot'. Other allowable values are `longdash`, `dashdot`, or `longdashdot`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_xaxes(gridcolor='black', griddash='dash', minor_griddash=\"dot\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Axes and Labels with Plotly Express\nDESCRIPTION: This snippet shows how to customize axes labels and titles on a heatmap using Plotly Express.  The `labels` argument in `px.imshow()` is used to set axis titles and the colorbar title. The `x` and `y` arguments specify the labels for each axis tick. `.update_xaxes(side=\"top\")` moves the x-axis labels to the top.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndata=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]\nfig = px.imshow(data,\n                labels=dict(x=\"Day of Week\", y=\"Time of Day\", color=\"Productivity\"),\n                x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n                y=['Morning', 'Afternoon', 'Evening']\n               )\nfig.update_xaxes(side=\"top\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Tables and Charts using Plotly\nDESCRIPTION: This code snippet demonstrates how to create a subplot consisting of a table and two scatter plots using Plotly. It involves importing necessary libraries, reading data from a CSV file, preprocessing the data, creating subplots with `make_subplots`, adding traces for table and scatter plots, and updating the layout for better visualization. The data source is a CSV file obtained from a public GitHub repository.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table-subplots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport pandas as pd\nimport re\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv\")\n\nfor i, row in enumerate(df[\"Date\"]):\n    p = re.compile(\" 00:00:00\")\n    datetime = p.split(df[\"Date\"][i])[0]\n    df.iloc[i, 1] = datetime\n\nfig = make_subplots(\n    rows=3, cols=1,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}],\n           [{\"type\": \"scatter\"}],\n           [{\"type\": \"scatter\"}]]\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=df[\"Date\"],\n        y=df[\"Mining-revenue-USD\"],\n        mode=\"lines\",\n        name=\"mining revenue\"\n    ),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=df[\"Date\"],\n        y=df[\"Hash-rate\"],\n        mode=\"lines\",\n        name=\"hash-rate-TH/s\"\n    ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Table(\n        header=dict(\n            values=[\"Date\", \"Number<br>Transactions\", \"Output<br>Volume (BTC)\",\n                    \"Market<br>Price\", \"Hash<br>Rate\", \"Cost per<br>trans-USD\",\n                    \"Mining<br>Revenue-USD\", \"Trasaction<br>fees-BTC\"],\n            font=dict(size=10),\n            align=\"left\"\n        ),\n        cells=dict(\n            values=[df[k].tolist() for k in df.columns[1:]],\n            align = \"left\")\n    ),\n    row=1, col=1\n)\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    title_text=\"Bitcoin mining stats for 180 days\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Heatmap with Graph Objects\nDESCRIPTION: This snippet creates a basic heatmap using Plotly graph objects.  It initializes a `go.Heatmap` object with a 2D array as the `z` value and then creates a `go.Figure` to display it.  This approach offers more control over the heatmap's properties compared to Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Heatmap(\n                    z=[[1, 20, 30],\n                      [20, 1, 60],\n                      [30, 60, 1]]))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Text Annotations on Log Axes with Plotly Graph Objects in Python\nDESCRIPTION: This snippet illustrates adding text annotations on log-scaled axes using the `fig.add_annotation()` function. The y-axis in this example is a log scale, so annotations use `log10` values for positioning. The `plotly.graph_objects` module is necessary to create the plot and annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport math\n\ndates = [\n    \"2024-01-01\",\n    \"2024-01-02\",\n    \"2024-01-03\",\n    \"2024-01-04\",\n    \"2024-01-05\",\n    \"2024-01-06\",\n]\ny_values = [1, 30, 70, 100, 1000, 10000000]\n\nfig = go.Figure(\n    data=[go.Scatter(x=dates, y=y_values, mode=\"lines+markers\")],\n    layout=go.Layout(\n        yaxis=dict(\n            type=\"log\",\n        )\n    ),\n)\n\nfig.add_annotation(\n    x=\"2024-01-05\",\n    y=math.log10(1000),\n    text=\"Log axis annotation\",\n    showarrow=True,\n    xanchor=\"right\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Map with GeoPandas in Python\nDESCRIPTION: This example demonstrates how to create a scatter map using a GeoPandas DataFrame. It visualizes city locations from a natural earth dataset, mapping coordinates extracted from the geometry column.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport geopandas as gpd\n\ngeo_df = gpd.read_file(gpd.datasets.get_path('naturalearth_cities'))\n\nfig = px.scatter_map(geo_df,\n                        lat=geo_df.geometry.y,\n                        lon=geo_df.geometry.x,\n                        hover_name=\"name\",\n                        zoom=1)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating X Axes Properties\nDESCRIPTION: Demonstrates disabling of vertical grid lines across all subplots in a figure using `update_xaxes()`. Applicable for figures created using Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 facet_col=\"species\", title=\"Using update_xaxes() With A Plotly Express Figure\")\n\nfig.update_xaxes(showgrid=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with Pandas in Python\nDESCRIPTION: This snippet demonstrates how to import CSV data from a URL using the Pandas library and display the first few rows using the head() method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plot-data-from-csv.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Converting Dictionary to Graph Object Figure\nDESCRIPTION: Demonstrates how to convert a dictionary-based figure specification into a Graph Object figure\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ndict_of_fig = dict({\n    \"data\": [{\"type\": \"bar\",\n              \"x\": [1, 2, 3],\n              \"y\": [1, 3, 2]}],\n    \"layout\": {\"title\": {\"text\": \"A Figure Specified By A Graph Object With A Dictionary\"}}\n})\n\nfig = go.Figure(dict_of_fig)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: GeoPandas Integration Example\nDESCRIPTION: Demonstrates using px.scatter_geo with GeoPandas dataframes containing Point geometries for city locations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/scatter-plots-on-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport geopandas as gpd\n\ngeo_df = gpd.read_file(gpd.datasets.get_path('naturalearth_cities'))\n\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\nfig = px.scatter_geo(geo_df,\n                    lat=geo_df.geometry.y,\n                    lon=geo_df.geometry.x,\n                    hover_name=\"name\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Indicators with Plotly\nDESCRIPTION: This code snippet demonstrates how to create multiple indicators in a single figure using Plotly. It showcases different modes like gauge and delta, and customizes the layout using grid patterns.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/indicator.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Indicator(\n    value = 200,\n    delta = {'reference': 160},\n    gauge = {\n        'axis': {'visible': False}},\n    domain = {'row': 0, 'column': 0}))\n\nfig.add_trace(go.Indicator(\n    value = 120,\n    gauge = {\n        'shape': \"bullet\",\n        'axis' : {'visible': False}},\n    domain = {'x': [0.05, 0.5], 'y': [0.15, 0.35]}))\n\nfig.add_trace(go.Indicator(\n    mode = \"number+delta\",\n    value = 300,\n    domain = {'row': 0, 'column': 1}))\n\nfig.add_trace(go.Indicator(\n    mode = \"delta\",\n    value = 40,\n    domain = {'row': 1, 'column': 1}))\n\nfig.update_layout(\n    grid = {'rows': 2, 'columns': 2, 'pattern': \"independent\"},\n    template = {'data' : {'indicator': [{\n        'title': {'text': \"Speed\"},\n        'mode' : \"number+delta+gauge\",\n        'delta' : {'reference': 90}}]\n                         }})\n```\n\n----------------------------------------\n\nTITLE: Adding Lines and Rectangles to Facet Plots - Python\nDESCRIPTION: This example shows how to add horizontal and vertical lines and rectangles to facet plots using Plotly. It uses various add methods to enhance the visualization with significant annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\nfig = px.line(df, facet_col=\"company\", facet_col_wrap=2)\nfig.add_hline(y=1, line_dash=\"dot\", annotation_text=\"Jan 1, 2018 baseline\", annotation_position=\"bottom right\")\nfig.add_vrect(x0=\"2018-09-24\", x1=\"2018-12-18\", col=1, annotation_text=\"decline\", annotation_position=\"top left\", fillcolor=\"green\", opacity=0.25, line_width=0)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 2x2 Subplots with Shared Y-Axes - Python\nDESCRIPTION: This snippet demonstrates how to create a 2x2 subplot grid where the y-axes of the first row are linked. Each trace is added to the corresponding subplot defined by its row and column in the make_subplots function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=2, cols=2, shared_yaxes=True)\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[2, 3, 4]),\n              row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[20, 30, 40], y=[5, 5, 5]),\n              row=1, col=2)\n\nfig.add_trace(go.Scatter(x=[2, 3, 4], y=[600, 700, 800]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),\n              row=2, col=2)\n\nfig.update_layout(height=600, width=600,\n                  title_text=\"Multiple Subplots with Shared Y-Axes\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Smith Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Smith Chart using Plotly's graph objects. It initializes a Figure object with a Scattersmith trace, plotting complex numbers with real and imaginary parts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/smith-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattersmith(imag=[0.5, 1, 2, 3], real=[0.5, 1, 2, 3]))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Shapes in Plotly Visualizations in Python\nDESCRIPTION: This snippet showcases how to style horizontal and vertical lines and rectangles in Plotly using additional styling arguments like line width, dash style, line color, fill color, and opacity. Dependencies include Plotly and Plotly Express, utilizing the iris dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-vertical-shapes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"petal_length\", y=\"petal_width\")\nfig.add_vline(x=2.5, line_width=3, line_dash=\"dash\", line_color=\"green\")\nfig.add_hrect(y0=0.9, y1=2.6, line_width=0, fillcolor=\"red\", opacity=0.2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sunburst with Missing Values in Rectangular Data\nDESCRIPTION: This snippet demonstrates how to handle missing values in rectangular data for Plotly Express sunburst charts. It creates a DataFrame with missing vendor values (None) and uses `px.sunburst` to generate the chart. Note that `None` entries should be leaves in the hierarchy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nvendors = [\"A\", \"B\", \"C\", \"D\", None, \"E\", \"F\", \"G\", \"H\", None]\nsectors = [\"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\",\n           \"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\"]\nregions = [\"North\", \"North\", \"North\", \"North\", \"North\",\n           \"South\", \"South\", \"South\", \"South\", \"South\"]\nsales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]\ndf = pd.DataFrame(\n    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)\n)\nprint(df)\nfig = px.sunburst(df, path=['regions', 'sectors', 'vendors'], values='sales')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Multi-Color Parallel Categories with Titanic Data\nDESCRIPTION: Creates a multi-color parallel categories diagram using Titanic dataset, with ribbons colored by survival outcome. Includes custom hover information and freeform arrangement.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ntitanic_df = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/titanic.csv\")\n\n# Create dimensions\nclass_dim = go.parcats.Dimension(\n    values=titanic_df.Pclass,\n    categoryorder='category ascending', label=\"Class\"\n)\n\ngender_dim = go.parcats.Dimension(values=titanic_df.Sex, label=\"Gender\")\n\nsurvival_dim = go.parcats.Dimension(\n    values=titanic_df.Survived, label=\"Outcome\", categoryarray=[0, 1],\n    ticktext=['perished', 'survived']\n)\n\n# Create parcats trace\ncolor = titanic_df.Survived;\ncolorscale = [[0, 'lightsteelblue'], [1, 'mediumseagreen']];\n\nfig = go.Figure(data = [go.Parcats(dimensions=[class_dim, gender_dim, survival_dim],\n        line={'color': color, 'colorscale': colorscale},\n        hoveron='color', hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='freeform')])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Stacked Bar Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet demonstrates Plotly's capability to create grouped stacked bar charts in version 6.0.0 and later. By using 'offsetgroup', bars can be organized both by group and within stacks, allowing for an intricate representation of layered data across categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ndata = [\n    go.Bar(\n        x=['Q1', 'Q2', 'Q3', 'Q4'],\n        y=[150, 200, 250, 300],\n        name='New York',\n        offsetgroup=\"USA\"\n    ),\n    go.Bar(\n        x=['Q1', 'Q2', 'Q3', 'Q4'],\n        y=[180, 220, 270, 320],\n        name='Boston',\n        offsetgroup=\"USA\"\n    ),\n    go.Bar(\n        x=['Q1', 'Q2', 'Q3', 'Q4'],\n        y=[130, 170, 210, 260],\n        name='Montreal',\n        offsetgroup=\"Canada\"\n    ),\n    go.Bar(\n        x=['Q1', 'Q2', 'Q3', 'Q4'],\n        y=[160, 210, 260, 310],\n        name='Toronto',\n        offsetgroup=\"Canada\"\n    )\n]\n\nlayout = go.Layout(\n    title={\n        'text': 'Quarterly Sales by City, Grouped by Country'\n    },\n    xaxis={\n        'title': {\n            'text': 'Quarter'\n        }\n    },\n    yaxis={\n        'title': {\n            'text': 'Sales'\n        }\n    },\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled Parallel Categories Diagram\nDESCRIPTION: Creates a styled parallel categories diagram with custom dimensions, color scales and labels. Uses the tips dataset to show relationships between sex, smoker status and day of week.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.parallel_categories(df, dimensions=['sex', 'smoker', 'day'],\n                color=\"size\", color_continuous_scale=px.colors.sequential.Inferno,\n                labels={'sex':'Payer sex', 'smoker':'Smokers at the table', 'day':'Day of week'})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Categorical Scatter Plot (Dot Plot)\nDESCRIPTION: Demonstrates creating a scatter plot with categorical axes using medal data, including color and symbol encoding.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.scatter(df, y=\"nation\", x=\"count\", color=\"medal\", symbol=\"medal\")\nfig.update_traces(marker_size=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D t-SNE Projection with Plotly 3D Scatter Plot\nDESCRIPTION: Projects Iris dataset into 3D space using t-SNE and creates an interactive 3D scatter plot visualization. Demonstrates t-SNE's flexibility in choosing output dimensions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-tsne-umap-projections.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.manifold import TSNE\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfeatures = df.loc[:, :'petal_width']\n\ntsne = TSNE(n_components=3, random_state=0)\nprojections = tsne.fit_transform(features, )\n\nfig = px.scatter_3d(\n    projections, x=0, y=1, z=2,\n    color=df.species, labels={'color': 'species'}\n)\nfig.update_traces(marker_size=8)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Side-by-Side Subplots in Plotly Python\nDESCRIPTION: Creates a figure with two scatter plots in side-by-side subplots using make_subplots with 1 row and 2 columns.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(\n    go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),\n    row=1, col=2\n)\n\nfig.update_layout(height=600, width=800, title_text=\"Side By Side Subplots\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map in Python with Plotly\nDESCRIPTION: This snippet creates a choropleth map visualizing unemployment rates using Plotly's figure factory. It defines color scales, binning endpoints, and additional layout settings for the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncolorscale = [\"#f7fbff\",\"#ebf3fb\",\"#deebf7\",\"#d2e3f3\",\"#c6dbef\",\"#b3d2e9\",\"#9ecae1\",\n              \"#85bcdb\",\"#6baed6\",\"#57a0ce\",\"#4292c6\",\"#3082be\",\"#2171b5\",\"#1361a9\",\n              \"#08519c\",\"#0b4083\",\"#08306b\"]\nendpts = list(np.linspace(1, 12, len(colorscale) - 1))\nfips = df_sample['FIPS'].tolist()\nvalues = df_sample['Unemployment Rate (%)'].tolist()\n\nfig = ff.create_choropleth(\n    fips=fips, values=values,\n    binning_endpoints=endpts,\n    colorscale=colorscale,\n    show_state_data=False,\n    show_hover=True, centroid_marker={'opacity': 0},\n    asp=2.9, title='USA by Unemployment %',\n    legend_title='% unemployed'\n)\n\nfig.layout.template = None\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Box Plot Outliers in Plotly Python\nDESCRIPTION: Demonstrates different outlier styling options using boxpoints parameter, including showing all points, only whiskers, suspected outliers, and regular outliers. Uses custom colors and markers for each variation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Box(\n    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,\n       8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name=\"All Points\",\n    jitter=0.3,\n    pointpos=-1.8,\n    boxpoints='all', # represent all points\n    marker_color='rgb(7,40,89)',\n    line_color='rgb(7,40,89)'\n))\n\nfig.add_trace(go.Box(\n    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,\n        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name=\"Only Whiskers\",\n    boxpoints=False, # no data points\n    marker_color='rgb(9,56,125)',\n    line_color='rgb(9,56,125)'\n))\n\nfig.add_trace(go.Box(\n    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,\n        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name=\"Suspected Outliers\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n))\n\nfig.add_trace(go.Box(\n    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,\n        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name=\"Whiskers and Outliers\",\n    boxpoints='outliers', # only outliers\n    marker_color='rgb(107,174,214)',\n    line_color='rgb(107,174,214)'\n))\n\n\nfig.update_layout(title_text=\"Box Plot Styling Outliers\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Candlestick Chart with Custom Colors\nDESCRIPTION: Demonstrates how to customize the colors of increasing and decreasing candlesticks using custom line colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/candlestick-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=[go.Candlestick(\n    x=df['Date'],\n    open=df['AAPL.Open'], high=df['AAPL.High'],\n    low=df['AAPL.Low'], close=df['AAPL.Close'],\n    increasing_line_color= 'cyan', decreasing_line_color= 'gray'\n)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Heatmap with Aspect Ratio Control using Plotly Express\nDESCRIPTION: This example demonstrates controlling the aspect ratio of a heatmap using Plotly Express. The `aspect=\"auto\"` argument in `px.imshow()` makes the tiles non-square and fills the plotting area. The z variable defines the 2D array data for the heatmap.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nz = [[.1, .3, .5, .7, .9],\n     [1, .8, .6, .4, .2],\n     [.2, 0, .5, .7, .9],\n     [.9, .8, .4, .2, 0],\n     [.3, .4, .5, .7, 1]]\n\nfig = px.imshow(z, text_auto=True, aspect=\"auto\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Marginal Plots to Density Heatmaps\nDESCRIPTION: This code shows how to add marginal histogram plots to a density heatmap to visualize the 1-dimensional distributions of both variables simultaneously.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", marginal_x=\"histogram\", marginal_y=\"histogram\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Chart Subplots with Plotly\nDESCRIPTION: This snippet creates a figure with 2x2 subplots, using the 'domain' type for pie charts. It then adds four pie charts to the subplots, each representing the color composition of a different Van Gogh painting.  Each pie chart's marker colors are customized with the color sets defined in the previous snippet.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"# Create subplots, using 'domain' type for pie charts\nspecs = [[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=2, cols=2, specs=specs)\n\n# Define pie charts\nfig.add_trace(go.Pie(labels=labels, values=[38, 27, 18, 10, 7], name='Starry Night',\n                     marker_colors=night_colors), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[28, 26, 21, 15, 10], name='Sunflowers',\n                     marker_colors=sunflowers_colors), 1, 2)\nfig.add_trace(go.Pie(labels=labels, values=[38, 19, 16, 14, 13], name='Irises',\n                     marker_colors=irises_colors), 2, 1)\nfig.add_trace(go.Pie(labels=labels, values=[31, 24, 19, 18, 8], name='The Night Café',\n                     marker_colors=cafe_colors), 2, 2)\n\n# Tune layout and hover info\nfig.update_traces(hoverinfo='label+percent+name', textinfo='none')\nfig.update(layout_title_text='Van Gogh: 5 Most Prominent Colors Shown Proportionally',\n           layout_showlegend=False)\n\nfig = go.Figure(fig)\nfig.show()\"\n```\n\n----------------------------------------\n\nTITLE: Creating Value-Ordered Bar Charts\nDESCRIPTION: Shows how to create bar charts ordered by total values in descending order.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Heatmap from DataFrame with Plotly Express\nDESCRIPTION: This example creates a heatmap from a Pandas DataFrame using Plotly Express.  It utilizes the `px.data.medals_wide()` function to load sample data, and then uses `px.imshow()` to generate the heatmap. The `indexed=True` argument ensures the index is used correctly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.medals_wide(indexed=True)\nfig = px.imshow(df)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance for Large Numbers of Lines on Maps in Python\nDESCRIPTION: This code demonstrates a performance optimization technique for plotting large numbers of lines on a map. It combines multiple paths into a single trace, improving rendering speed and reducing memory usage.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\n\ndf_airports = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf_airports.head()\n\ndf_flight_paths = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv')\ndf_flight_paths.head()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scattergeo(\n    locationmode = 'USA-states',\n    lon = df_airports['long'],\n    lat = df_airports['lat'],\n    hoverinfo = 'text',\n    text = df_airports['airport'],\n    mode = 'markers',\n    marker = dict(\n        size = 2,\n        color = 'rgb(255, 0, 0)',\n        line = dict(\n            width = 3,\n            color = 'rgba(68, 68, 68, 0)'\n        )\n    )))\n\nlons = np.empty(3 * len(df_flight_paths))\nlons[::3] = df_flight_paths['start_lon']\nlons[1::3] = df_flight_paths['end_lon']\nlons[2::3] = None\nlats = np.empty(3 * len(df_flight_paths))\nlats[::3] = df_flight_paths['start_lat']\nlats[1::3] = df_flight_paths['end_lat']\nlats[2::3] = None\n\nfig.add_trace(\n    go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = lons,\n        lat = lats,\n        mode = 'lines',\n        line = dict(width = 1,color = 'red'),\n        opacity = 0.5\n    )\n)\n\nfig.update_layout(\n    title_text = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',\n    showlegend = False,\n    geo = go.layout.Geo(\n        scope = 'north america',\n        projection_type = 'azimuthal equal area',\n        showland = True,\n        landcolor = 'rgb(243, 243, 243)',\n        countrycolor = 'rgb(204, 204, 204)',\n    ),\n    height=700,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Gradient Fill in Area Chart in Python\nDESCRIPTION: This advanced example demonstrates the use of gradient fills between traces. It utilizes the 'fillgradient' property to create a visually appealing effect with a specified colorscale across the area.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    [\n        go.Scatter(\n            x=[1, 2, 3, 4],\n            y=[3, 4, 8, 3],\n            fill=None,\n            mode=\"lines\",\n            line_color=\"darkblue\",\n        ),\n        go.Scatter(\n            x=[1, 2, 3, 4],\n            y=[1, 6, 2, 6],\n            fill=\"tonexty\",\n            mode=\"lines\",\n            line_color=\"darkblue\",\n            fillgradient=dict(\n                type=\"horizontal\",\n                colorscale=[(0.0, \"darkblue\"), (0.5, \"royalblue\"), (1.0, \"cyan\")],\n            ),\n        ),\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Clusters to Scatter Map in Python\nDESCRIPTION: This example demonstrates how to display clustered data points on a scatter map using Plotly Express. It allows the aggregation of multiple data points for clearer visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv\"\n)\nfig = px.scatter_map(df, lat=\"lat\", lon=\"long\", size=\"cnt\", zoom=3)\nfig.update_traces(cluster=dict(enabled=True))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Contour Lines Styling in Plotly in Python\nDESCRIPTION: This snippet demonstrates how to customize the appearance of contour lines in a Plotly contour plot. It sets `contours_coloring` to `lines` to draw distinct contour lines and modifies the `line_width` parameter to adjust the thickness of the lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        contours_coloring='lines',\n        line_width=2,\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Box Plots in Plotly Python\nDESCRIPTION: Shows how to create grouped box plots for multiple categories with custom colors. Uses boxmode='group' to group boxes together for each x-value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\n\nfig = go.Figure()\n\nfig.add_trace(go.Box(\n    y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n    x=x,\n    name='kale',\n    marker_color='#3D9970'\n))\nfig.add_trace(go.Box(\n    y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n    x=x,\n    name='radishes',\n    marker_color='#FF4136'\n))\nfig.add_trace(go.Box(\n    y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n    x=x,\n    name='carrots',\n    marker_color='#FF851B'\n))\n\nfig.update_layout(\n    yaxis=dict(\n        title=dict(\n            text='normalized moisture')\n    ),\n    boxmode='group' # group together boxes of the different traces for each value of x\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Pie Chart with Custom Colors in Python\nDESCRIPTION: Shows how to style a pie chart by customizing colors, hover information, text display, and sector borders. Colors can be specified using CSS color names, RGB values, or hexadecimal strings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\n\nfig = go.Figure(data=[go.Pie(labels=['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen'],\n                             values=[4500,2500,1053,500])])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Plot Layout with Plotly Isosurfaces in Python\nDESCRIPTION: This code segment explains layout and appearance customization for isosurface plots in Plotly, altering margins, eye perspective, and display settings. It customizes margins and camera angles for better visualization. Necessary dependencies include numpy and Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nX, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, 0:5:20j]\n\nvalues = X * X * 0.5 + Y * Y + Z * Z * 2\n\nfig = go.Figure(data=go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=30,\n    isomax=50,\n    surface=dict(count=3, fill=0.7, pattern='odd'),\n    showscale=False, # remove colorbar\n    caps=dict(x_show=True, y_show=True),\n    ))\n\nfig.update_layout(\n    margin=dict(t=0, l=0, b=0), # tight layout\n    scene_camera_eye=dict(x=1.86, y=0.61, z=0.98))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Complex Categorical Bubble Chart\nDESCRIPTION: Creates an advanced bubble chart with multiple categories, custom hover text, and sophisticated styling using the Gapminder dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport pandas as pd\nimport math\n\n# Load data, define hover text and bubble size\ndata = px.data.gapminder()\ndf_2007 = data[data['year']==2007]\ndf_2007 = df_2007.sort_values(['continent', 'country'])\n\nhover_text = []\nbubble_size = []\n\nfor index, row in df_2007.iterrows():\n    hover_text.append(('Country: {country}<br>'+\n                      'Life Expectancy: {lifeExp}<br>'+\n                      'GDP per capita: {gdp}<br>'+\n                      'Population: {pop}<br>'+\n                      'Year: {year}').format(country=row['country'],\n                                            lifeExp=row['lifeExp'],\n                                            gdp=row['gdpPercap'],\n                                            pop=row['pop'],\n                                            year=row['year']))\n    bubble_size.append(math.sqrt(row['pop']))\n\ndf_2007['text'] = hover_text\ndf_2007['size'] = bubble_size\nsizeref = 2.*max(df_2007['size'])/(100**2)\n\n# Dictionary with dataframes for each continent\ncontinent_names = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania']\ncontinent_data = {continent:df_2007.query(\"continent == '%s'\" %continent)\n                              for continent in continent_names}\n\n# Create figure\nfig = go.Figure()\n\nfor continent_name, continent in continent_data.items():\n    fig.add_trace(go.Scatter(\n        x=continent['gdpPercap'], y=continent['lifeExp'],\n        name=continent_name, text=continent['text'],\n        marker_size=continent['size'],\n        ))\n\n# Tune marker appearance and layout\nfig.update_traces(mode='markers', marker=dict(sizemode='area',\n                                              sizeref=sizeref, line_width=2))\n\nfig.update_layout(\n    title=dict(text='Life Expectancy v. Per Capita GDP, 2007'),\n    xaxis=dict(\n        title=dict(text='GDP per capita (2000 dollars)'),\n        gridcolor='white',\n        type='log',\n        gridwidth=2,\n    ),\n    yaxis=dict(\n        title=dict(text='Life Expectancy (years)'),\n        gridcolor='white',\n        gridwidth=2,\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)',\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Update Menus to a Plotly Layout\nDESCRIPTION: This code adds an update menu to the Plotly layout to allow users to toggle the visibility of different traces and annotations.  Each button in the update menu corresponds to a different set of visible traces and annotations, which are updated using the `update_layout` method.  The `args` parameter specifies the changes to apply when a button is clicked.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"None\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, False, True, False]},\n                           {\"title\": \"Yahoo\",\n                            \"annotations\": []}]),\n                dict(label=\"High\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, True, False, False]},\n                           {\"title\": \"Yahoo High\",\n                            \"annotations\": high_annotations}]),\n                dict(label=\"Low\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, True, True]},\n                           {\"title\": \"Yahoo Low\",\n                            \"annotations\": low_annotations}]),\n                dict(label=\"Both\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, True, True, True]},\n                           {\"title\": \"Yahoo\",\n                            \"annotations\": high_annotations + low_annotations}]),\n            ]),\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: Time Series Plot with Custom Date Range using Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a time series plot with a custom date range using Plotly Express. It reads data from a CSV file and sets a specific date range for the x-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = px.line(df, x='Date', y='AAPL.High', range_x=['2016-07-01','2016-12-31'])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Smooth Contour Coloring in Plotly in Python\nDESCRIPTION: This snippet demonstrates how to apply smooth coloring to a Plotly contour plot. It utilizes the `contours_coloring` parameter within the `go.Contour` object and sets it to 'heatmap'. This applies a heatmap gradient coloring scheme between each contour level.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        # heatmap gradient coloring is applied between each contour level\n        contours_coloring='heatmap' # can also be 'lines', or 'none'\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Bubble Chart with Custom Hover Text\nDESCRIPTION: Shows how to add custom hover text to bubble chart markers using HTML formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter(\n    x=[1, 2, 3, 4], y=[10, 11, 12, 13],\n    text=['A<br>size: 40', 'B<br>size: 60', 'C<br>size: 80', 'D<br>size: 100'],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        size=[40, 60, 80, 100],\n    )\n)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Building Scatter Matrix for Stock Comparison with Kernel Density Estimation\nDESCRIPTION: Creates a scatter matrix visualization comparing all combinations of stock tickers, with kernel density estimation plots on the diagonal. This complex visualization helps identify relationships between different stocks' price movements.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef kde_scipy(x, x_grid, bandwidth=0.4, **kwargs):\n    \"\"\"Kernel Density Estimation with Scipy\"\"\"\n    # From https://jakevdp.github.io/blog/2013/12/01/kernel-density-estimation/\n    # Note that scipy weights its bandwidth by the covariance of the\n    # input data.  To make the results comparable to the other methods,\n    # we divide the bandwidth by the sample standard deviation here.\n    kde = gaussian_kde(x, bw_method=bandwidth / x.std(ddof=1), **kwargs)\n    return kde.evaluate(x_grid)\n\nsubplots = range(1,37)\nsp_index = 0\ndata = []\nfor i in range(1,7):\n    x_ticker = df.columns[i-1]\n    for j in range(1,7):\n        y_ticker = df.columns[j-1]\n        if i==j:\n            x = df[x_ticker]\n            x_grid = np.linspace(x.min(), x.max(), 100)\n            sp = [ go.Histogram( x=x, histnorm='probability density' ), \\\n                  go.Scatter( x=x_grid, y=kde_scipy( x.as_matrix(), x_grid ), \\\n                          line=dict(width=2,color='red',opacity='0.5') ) ]\n        else:\n            sp = [ go.Scatter( x=df[x_ticker], y=df[y_ticker], mode='markers', marker=dict(size=3) ) ]\n\n        for ea in sp:\n            ea.update( name='{0} vs {1}'.format(x_ticker,y_ticker),\\\n                      xaxis='x{}'.format(subplots[sp_index]),\\\n                      yaxis='y{}'.format(subplots[sp_index])\n            )\n        sp_index+=1\n        data += sp\n\n# Add x and y labels\nleft_index = 1\nbottom_index = 1\nfor tk in tickers:\n    fig['layout']['xaxis{}'.format(left_index)].update( title=tk )\n    fig['layout']['yaxis{}'.format(bottom_index)].update( title=tk )\n    left_index=left_index+1\n    bottom_index=bottom_index+6\n\n# Remove legend by updating 'layout' key\nfig['layout'].update(showlegend=False,height=1000,width=1000, title='Major technology and CPG stock prices in 2014')\nfig['data'] = data\npy.iplot(fig, height=1000, width=1000, filename='Major technology and CPG stock prices in 2014 - scatter matrix')\n```\n\n----------------------------------------\n\nTITLE: Creating Exploded Pie Chart with Pull Parameter in Python\nDESCRIPTION: Demonstrates how to create a 'pulled-out' or 'exploded' pie chart layout using the pull parameter. It can be a scalar for pulling all sectors or an array to pull only specific sectors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\n# pull is given as a fraction of the pie radius\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0, 0, 0.2, 0])])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding customdata to Hover in Plotly Heatmaps Python\nDESCRIPTION: This snippet illustrates using the 'customdata' attribute to add extra data to hover information in Plotly heatmaps. By integrating 'customdata' with 'hovertemplate', users can display additional values alongside existing chart data when hovering. Dependencies include numpy for array handling and plotly.graph_objects for chart creation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\nnp.random.seed(0)\nz1, z2, z3 = np.random.random((3, 7, 7))\ncustomdata = np.dstack((z2, z3))\nfig = make_subplots(1, 2, subplot_titles=['z1', 'z2'])\nfig.add_trace(go.Heatmap(\n    z=z1,\n    customdata=np.dstack((z2, z3)),\n    hovertemplate='<b>z1:%{z:.3f}</b><br>z2:%{customdata[0]:.3f} <br>z3: %{customdata[1]:.3f} ',\n    coloraxis=\"coloraxis1\", name=''),\n    1, 1)\nfig.add_trace(go.Heatmap(\n    z=z2,\n    customdata=np.dstack((z1, z3)),\n    hovertemplate='z1:%{customdata[0]:.3f} <br><b>z2:%{z:.3f}</b><br>z3: %{customdata[1]:.3f} ',\n    coloraxis=\"coloraxis1\", name=''),\n    1, 2)\nfig.update_layout(title_text='Hover to see the value of z1, z2 and z3 together')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Symbol Mapping using Plotly Express\nDESCRIPTION: This snippet creates a scatter plot with marker symbols mapped to a column in the DataFrame. It utilizes the `symbol` parameter in `px.scatter` to assign different marker symbols based on the 'species' column, enhancing the visualization by distinguishing data points belonging to different species with different symbols.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\\\"sepal_width\\\", y=\\\"sepal_length\\\", color=\\\"species\\\", symbol=\\\"species\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Category-Ordered Bar Charts\nDESCRIPTION: Shows how to create bar charts with different category ordering options including alphabetical and total value-based sorting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'category ascending'})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Angular Gauge Chart\nDESCRIPTION: This snippet showcases how to create a simple angular gauge chart using Plotly. The chart represents a single number with a title and is rendered within specific domain coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/indicator.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"gauge+number\",\n    value = 450,\n    title = {'text': \"Speed\"},\n    domain = {'x': [0, 1], 'y': [0, 1]}\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating US Flight Paths Map with Plotly Graph Objects in Python\nDESCRIPTION: This snippet uses Plotly Graph Objects to create a detailed map of US flight paths. It plots airport locations as markers and flight paths as lines, with opacity based on flight frequency.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf_airports = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf_airports.head()\n\ndf_flight_paths = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv')\ndf_flight_paths.head()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scattergeo(\n    locationmode = 'USA-states',\n    lon = df_airports['long'],\n    lat = df_airports['lat'],\n    hoverinfo = 'text',\n    text = df_airports['airport'],\n    mode = 'markers',\n    marker = dict(\n        size = 2,\n        color = 'rgb(255, 0, 0)',\n        line = dict(\n            width = 3,\n            color = 'rgba(68, 68, 68, 0)'\n        )\n    )))\n\nflight_paths = []\nfor i in range(len(df_flight_paths)):\n    fig.add_trace(\n        go.Scattergeo(\n            locationmode = 'USA-states',\n            lon = [df_flight_paths['start_lon'][i], df_flight_paths['end_lon'][i]],\n            lat = [df_flight_paths['start_lat'][i], df_flight_paths['end_lat'][i]],\n            mode = 'lines',\n            line = dict(width = 1,color = 'red'),\n            opacity = float(df_flight_paths['cnt'][i]) / float(df_flight_paths['cnt'].max()),\n        )\n    )\n\nfig.update_layout(\n    title_text = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',\n    showlegend = False,\n    geo = dict(\n        scope = 'north america',\n        projection_type = 'azimuthal equal area',\n        showland = True,\n        landcolor = 'rgb(243, 243, 243)',\n        countrycolor = 'rgb(204, 204, 204)',\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Box Plot with Plotly Express\nDESCRIPTION: Creates a simple box plot using Plotly Express to visualize the distribution of total bills from the tips dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.box(df, y=\"total_bill\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Carpet Plot Implementation in Python with Plotly\nDESCRIPTION: Creates a basic carpet plot by setting x and y coordinates with a and b attributes. Includes configuration for axis properties including tickprefix, smoothing, and grid settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-contour.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],\n    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    ),\n    baxis = dict(\n        tickprefix = 'b = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Patterns to Encode Multiple Variables\nDESCRIPTION: This snippet creates a histogram using px.histogram() where one variable (sex) is encoded with both color and x-position, while another variable (smoker) is encoded using patterns, allowing visualization of multiple dimensions of data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.histogram(df, x=\"sex\", y=\"total_bill\", color=\"sex\", pattern_shape=\"smoker\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Row Color Based on Variable in Plotly Tables (Python)\nDESCRIPTION: This example demonstrates setting row colors based on a variable in a Pandas DataFrame. It creates a DataFrame with color values and corresponding years, then uses the color values to set both the line and fill colors of the table cells. This requires both `plotly.graph_objects` and `pandas` modules.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ncolors = ['rgb(239, 243, 255)', 'rgb(189, 215, 231)', 'rgb(107, 174, 214)',\n          'rgb(49, 130, 189)', 'rgb(8, 81, 156)']\ndata = {'Year' : [2010, 2011, 2012, 2013, 2014], 'Color' : colors}\ndf = pd.DataFrame(data)\n\nfig = go.Figure(data=[go.Table(\n  header=dict(\n    values=[\"Color\", \"<b>YEAR</b>\"],\n    line_color='white', fill_color='white',\n    align='center', font=dict(color='black', size=12)\n  ),\n  cells=dict(\n    values=[df.Color, df.Year],\n    line_color=[df.Color], fill_color=[df.Color],\n    align='center', font=dict(color='black', size=11)\n  ))\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Slices to Plotly Isosurfaces in Python\nDESCRIPTION: This snippet visualizes axis-parallel slices on top of isosurfaces for enhanced data representation. The fill parameter controls the surface fill ratio. Dependencies include numpy for data grids and Plotly for the plotting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nX, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]\n\n# ellipsoid\nvalues = X * X * 0.5 + Y * Y + Z * Z * 2\n\nfig = go.Figure(data=go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=5,\n    isomax=50,\n    surface_fill=0.4,\n    caps=dict(x_show=False, y_show=False),\n    slices_z=dict(show=True, locations=[-1, -3,]),\n    slices_y=dict(show=True, locations=[0]),\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map with Built-in Country Geometry - Python\nDESCRIPTION: This snippet demonstrates how to create a choropleth map using built-in country geometries from Plotly. It utilizes data from the Gapminder dataset to visualize life expectancy by country in the year 2007. The locations parameter accepts ISO 3166-1 alpha-3 codes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year==2007\")\nfig = px.choropleth(df, locations=\"iso_alpha\",\n                    color=\"lifeExp\", # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Scatter Trace and Shape Regions with Plotly\nDESCRIPTION: This code snippet demonstrates how to create a Plotly figure with a scatter trace representing temperature data and add vertical rectangular regions to highlight specific periods. It uses the `plotly.graph_objects` module for creating the scatter plot and shapes. The code adds a line plot and two vertical rectangles, then displays the resulting figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig.add_trace(go.Scatter(\n    x=[\"2015-02-01\", \"2015-02-02\", \"2015-02-03\", \"2015-02-04\", \"2015-02-05\",\n       \"2015-02-06\", \"2015-02-07\", \"2015-02-08\", \"2015-02-09\", \"2015-02-10\",\n       \"2015-02-11\", \"2015-02-12\", \"2015-02-13\", \"2015-02-14\", \"2015-02-15\",\n       \"2015-02-16\", \"2015-02-17\", \"2015-02-18\", \"2015-02-19\", \"2015-02-20\",\n       \"2015-02-21\", \"2015-02-22\", \"2015-02-23\", \"2015-02-24\", \"2015-02-25\",\n       \"2015-02-26\", \"2015-02-27\", \"2015-02-28\"],\n    y=[-14, -17, -8, -4, -7, -10, -12, -14, -12, -7, -11, -7, -18, -14, -14,\n       -16, -13, -7, -8, -14, -8, -3, -9, -9, -4, -13, -9, -6],\n    mode=\"lines\",\n    name=\"temperature\"\n))\n\n# Add shape regions\nfig.add_vrect(\n    x0=\"2015-02-04\", x1=\"2015-02-06\",\n    fillcolor=\"LightSalmon\", opacity=0.5,\n    layer=\"below\", line_width=0,\n),\n\nfig.add_vrect(\n    x0=\"2015-02-20\", x1=\"2015-02-22\",\n    fillcolor=\"LightSalmon\", opacity=0.5,\n    layer=\"below\", line_width=0,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi Category Waterfall Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a multi-category waterfall chart using Plotly. It utilizes the 'waterfallgroupgap' attribute to adjust the gap between grouped bars and visualizes data across different years and quarters.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/waterfall-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Waterfall(\n    x = [[\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n        [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\"]],\n    measure = [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n    y = [1, 2, 3, -1, None, 1, 2, -4, None],\n    base = 1000\n))\n\nfig.add_trace(go.Waterfall(\n    x = [[\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n        [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\"]],\n    measure = [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n    y = [1.1, 2.2, 3.3, -1.1, None, 1.1, 2.2, -4.4, None],\n    base = 1000\n))\n\nfig.update_layout(\n    waterfallgroupgap = 0.5,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Alternating Row Colors in Plotly Tables (Python)\nDESCRIPTION: This code snippet demonstrates how to create a Plotly table with alternating row colors. It defines variables for header, even row, and odd row colors and then uses these variables to set the `fill_color` property of the `cells` dictionary. The `fill_color` property accepts a 2D list of colors to achieve the alternating effect.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nheaderColor = 'grey'\nrowEvenColor = 'lightgrey'\nrowOddColor = 'white'\n\nfig = go.Figure(data=[go.Table(\n  header=dict(\n    values=['<b>EXPENSES</b>','<b>Q1</b>','<b>Q2</b>','<b>Q3</b>','<b>Q4</b>'],\n    line_color='darkslategray',\n    fill_color=headerColor,\n    align=['left','center'],\n    font=dict(color='white', size=12)\n  ),\n  cells=dict(\n    values=[\n      ['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'],\n      [1200000, 20000, 80000, 2000, 12120000],\n      [1300000, 20000, 70000, 2000, 130902000],\n      [1300000, 20000, 120000, 2000, 131222000],\n      [1400000, 20000, 90000, 2000, 14102000]],\n    line_color='darkslategray',\n    # 2-D list of colors for alternating rows\n    fill_color = [[rowOddColor,rowEvenColor,rowOddColor, rowEvenColor,rowOddColor]*5],\n    align = ['left', 'center'],\n    font = dict(color = 'darkslategray', size = 11)\n    ))\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Constructing Dot Plot with Plotly Graph Objects in Python\nDESCRIPTION: This snippet uses Plotly Graph Objects to visualize gender salary disparity across schools, operating without direct dependency on dataframes. It constructs scatter plots by manually assigning x and y data. It customizes marker attributes, titles, and axis labels. The code outputs an interactive plot with individual traces for men and women.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dot-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nschools = [\"Brown\", \"NYU\", \"Notre Dame\", \"Cornell\", \"Tufts\", \"Yale\",\n           \"Dartmouth\", \"Chicago\", \"Columbia\", \"Duke\", \"Georgetown\",\n           \"Princeton\", \"U.Penn\", \"Stanford\", \"MIT\", \"Harvard\"]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=[72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112],\n    y=schools,\n    marker=dict(color=\"crimson\", size=12),\n    mode=\"markers\",\n    name=\"Women\",\n))\n\nfig.add_trace(go.Scatter(\n    x=[92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165],\n    y=schools,\n    marker=dict(color=\"gold\", size=12),\n    mode=\"markers\",\n    name=\"Men\",\n))\n\nfig.update_layout(\n    title=dict(\n        text=\"Gender Earnings Disparity\"\n    ),\n    xaxis=dict(\n        title=dict(\n            text=\"Annual Salary (in thousands)\"\n        )\n    ),\n    yaxis=dict(\n        title=dict(\n            text=\"School\"\n        )\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Heatmap with Datetime Axis using Graph Objects\nDESCRIPTION: This example demonstrates how to create a heatmap with a datetime axis using Plotly graph objects.  It generates a series of dates and random data, then creates a `go.Heatmap` object with the dates as `x` values.  The `xaxis_nticks` parameter is used to control the number of ticks on the x-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport datetime\nimport numpy as np\nnp.random.seed(1)\n\nprogrammers = ['Alex','Nicole','Sara','Etienne','Chelsea','Jody','Marianne']\n\nbase = datetime.datetime.today()\ndates = base - np.arange(180) * datetime.timedelta(days=1)\nz = np.random.poisson(size=(len(programmers), len(dates)))\n\nfig = go.Figure(data=go.Heatmap(\n        z=z,\n        x=dates,\n        y=programmers,\n        colorscale='Viridis'))\n\nfig.update_layout(\n    title=dict(text='GitHub commits per day'),\n    xaxis_nticks=36)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Categorical Data Histogram with Order\nDESCRIPTION: This snippet demonstrates how to create a histogram from categorical data and specify the order of categories on the x-axis. It uses the 'day' column and the `category_orders` parameter to control the order of the days displayed.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"day\", category_orders=dict(day=[\"Thur\", \"Fri\", \"Sat\", \"Sun\"]))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Annotating Images with Interactive Shapes in Plotly\nDESCRIPTION: Shows how to enable interactive shape drawing tools on an image visualization and programmatically add a shape. This demonstrates the dragmode and newshape parameters with modebar buttons for shape creation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import data\nimg = data.chelsea()\nfig = px.imshow(img)\nfig.add_annotation(\n    x=0.5,\n    y=0.9,\n    text=\"Drag and draw annotations\",\n    xref=\"paper\",\n    yref=\"paper\",\n    showarrow=False,\n    font_size=20, font_color='cyan')\n# Shape defined programatically\nfig.add_shape(\n    type='rect',\n    x0=230, x1=290, y0=230, y1=280,\n    xref='x', yref='y',\n    line_color='cyan'\n)\n# Define dragmode, newshape parameters, amd add modebar buttons\nfig.update_layout(\n    dragmode='drawrect',\n    newshape=dict(line_color='cyan'))\nfig.show(config={'modeBarButtonsToAdd':['drawline',\n                                        'drawopenpath',\n                                        'drawclosedpath',\n                                        'drawcircle',\n                                        'drawrect',\n                                        'eraseshape'\n                                       ]})\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map with Built-in USA States Geometry - Python\nDESCRIPTION: This snippet demonstrates the creation of a choropleth map using built-in geometries for USA states. It allows for visualizing data using two-letter state abbreviations and setting a specific color scale for better representation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.choropleth(locations=[\"CA\", \"TX\", \"NY\"], locationmode=\"USA-states\", color=[1,2,3], scope=\"usa\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Same Shapes to Multiple Subplots in Plotly\nDESCRIPTION: This code snippet demonstrates how to add the same shape to multiple subplots using the 'all' keyword for `row` and `col` in Plotly. It creates a faceted scatter plot and adds a rectangle to all facets, a line to all rows of the second column, and a circle to all columns of the first row, showcasing how to apply shapes across multiple subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", facet_row=\"smoker\", facet_col=\"sex\")\n# Adds a rectangle to all facets\nfig.add_shape(\n    dict(type=\"rect\", x0=25, x1=35, y0=4, y1=6, line_color=\"purple\"),\n    row=\"all\",\n    col=\"all\",\n)\n# Adds a line to all the rows of the second column\nfig.add_shape(\n    dict(type=\"line\", x0=20, x1=25, y0=5, y1=6, line_color=\"yellow\"), row=\"all\", col=2\n)\n\n# Adds a circle to all the columns of the first row\nfig.add_shape(\n    dict(type=\"circle\", x0=10, y0=2, x1=20, y1=7), row=1, col=\"all\", line_color=\"green\"\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Spike Lines in Plotly Line Chart Python\nDESCRIPTION: This snippet extends the spike lines functionality by styling these lines with custom colors, thickness, and snapping behavior using Plotly. It customizes both x and y axes spike lines and set layout parameters like spikedistance and hoverdistance. It stresses on users having a solid understanding of Plotly's layout configuration options.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\n\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\", title=\"Styled Spike Lines\")\nfig.update_traces(mode=\"markers+lines\")\n\nfig.update_xaxes(showspikes=True, spikecolor=\"green\", spikesnap=\"cursor\", spikemode=\"across\")\nfig.update_yaxes(showspikes=True, spikecolor=\"orange\", spikethickness=2)\nfig.update_layout(spikedistance=1000, hoverdistance=100)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing kNN Training and Test Splits with Plotly Graph Objects\nDESCRIPTION: Creates a scatter plot showing training and test data splits for kNN classification using different marker styles. Uses sklearn to generate moon-shaped synthetic data and splits it into training and test sets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-knn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load and split data\nX, y = make_moons(noise=0.3, random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y.astype(str), test_size=0.25, random_state=0)\n\ntrace_specs = [\n    [X_train, y_train, '0', 'Train', 'square'],\n    [X_train, y_train, '1', 'Train', 'circle'],\n    [X_test, y_test, '0', 'Test', 'square-dot'],\n    [X_test, y_test, '1', 'Test', 'circle-dot']\n]\n\nfig = go.Figure(data=[\n    go.Scatter(\n        x=X[y==label, 0], y=X[y==label, 1],\n        name=f'{split} Split, Label {label}',\n        mode='markers', marker_symbol=marker\n    )\n    for X, y, label, split, marker in trace_specs\n])\nfig.update_traces(\n    marker_size=12, marker_line_width=1.5,\n    marker_color=\"lightyellow\"\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Stacked and Grouped Bar Charts\nDESCRIPTION: Demonstrates creating both stacked and grouped bar charts using tips dataset showing total bill by gender and time of day.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"sex\", y=\"total_bill\", color='time')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled Scatter Plot\nDESCRIPTION: Demonstrates how to style scatter plots with custom colors, marker sizes, and layout options using sine and cosine waves.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n\nt = np.linspace(0, 10, 100)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=t, y=np.sin(t),\n    name='sin',\n    mode='markers',\n    marker_color='rgba(152, 0, 0, .8)'\n))\n\nfig.add_trace(go.Scatter(\n    x=t, y=np.cos(t),\n    name='cos',\n    marker_color='rgba(255, 182, 193, .9)'\n))\n\n# Set options common to all traces with fig.update_traces\nfig.update_traces(mode='markers', marker_line_width=2, marker_size=10)\nfig.update_layout(title=dict(text='Styled Scatter'),\n                  yaxis_zeroline=False, xaxis_zeroline=False)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing 2D Histogram Bins and Color Scale with Graph Objects\nDESCRIPTION: This code shows advanced customization options for 2D histograms including manual bin specification, probability normalization, and custom color scale definition.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\n\nfig = go.Figure(go.Histogram2d(x=x, y=y, histnorm='probability',\n        autobinx=False,\n        xbins=dict(start=-3, end=3, size=0.1),\n        autobiny=False,\n        ybins=dict(start=-2.5, end=4, size=0.1),\n        colorscale=[[0, 'rgb(12,51,131)'], [0.25, 'rgb(10,136,186)'], [0.5, 'rgb(242,211,56)'], [0.75, 'rgb(242,143,56)'], [1, 'rgb(217,30,30)']]\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Automatically Shifting Axes in Plotly Python\nDESCRIPTION: This code demonstrates how to use the autoshift feature (new in Plotly 5.12) to automatically reposition axes and avoid overlap. It creates a figure with multiple y-axes and sets autoshift=True on some axes to automatically adjust their positions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/multiple-axes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6], name=\"yaxis data\"))\n\nfig.add_trace(go.Scatter(x=[2, 3, 4], y=[40, 50, 60], name=\"yaxis2 data\", yaxis=\"y2\"))\n\nfig.add_trace(\n    go.Scatter(x=[4, 5, 6], y=[1000, 2000, 3000], name=\"yaxis3 data\", yaxis=\"y3\")\n)\n\nfig.add_trace(\n    go.Scatter(x=[3, 4, 5], y=[400, 500, 600], name=\"yaxis4 data\", yaxis=\"y4\")\n)\n\n\nfig.update_layout(\n    xaxis=dict(\n        domain=[0.25, 0.75]\n    ),\n    yaxis=dict(\n        title=dict(\n            text=\"yaxis title\"\n        )\n    ),\n    yaxis2=dict(\n        title=dict(\n            text=\"yaxis2 title\"\n        ),\n        overlaying=\"y\",\n        side=\"right\"\n    ),\n    yaxis3=dict(\n        title=dict(\n            text=\"yaxis3 title\"\n        ),\n        anchor=\"free\",\n        overlaying=\"y\",\n        autoshift=True\n    ),\n    yaxis4=dict(\n        title=dict(\n            text=\"yaxis4 title\"\n        ),\n        anchor=\"free\",\n        overlaying=\"y\",\n        autoshift=True\n    ),\n)\n\nfig.update_layout(\n    title_text=\"Shifting y-axes with autoshift\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Complex Sankey Diagram with Colored Links\nDESCRIPTION: Creates an energy forecast Sankey diagram with colored links and nodes. Includes data loading from external JSON and opacity customization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport urllib, json\n\nurl = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'\nresponse = urllib.request.urlopen(url)\ndata = json.loads(response.read())\n\nopacity = 0.4\ndata['data'][0]['node']['color'] = ['rgba(255,0,255, 0.8)' if color == \"magenta\" else color for color in data['data'][0]['node']['color']]\ndata['data'][0]['link']['color'] = [data['data'][0]['node']['color'][src].replace(\"0.8\", str(opacity))\n                                    for src in data['data'][0]['link']['source']]\n\nfig = go.Figure(data=[go.Sankey(\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\",\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(color = \"black\", width = 0.5),\n      label =  data['data'][0]['node']['label'],\n      color =  data['data'][0]['node']['color']\n    ),\n    link = dict(\n      source =  data['data'][0]['link']['source'],\n      target =  data['data'][0]['link']['target'],\n      value =  data['data'][0]['link']['value'],\n      label =  data['data'][0]['link']['label'],\n      color =  data['data'][0]['link']['color']\n))])\n\nfig.update_layout(title_text=\"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>\",\n                  font_size=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Candlestick Chart with Custom Text and Annotations\nDESCRIPTION: Shows how to add a title, axis labels, shapes, and annotations to a candlestick chart. Includes custom text placement and reference lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/candlestick-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['AAPL.Open'], high=df['AAPL.High'],\n                low=df['AAPL.Low'], close=df['AAPL.Close'])\n                      ])\n\nfig.update_layout(\n    title=dict(text='The Great Recession'),\n    yaxis=dict(\n      title=dict(\n        text='AAPL Stock'\n        )\n    ),\n    shapes = [dict(\n        x0='2016-12-09', x1='2016-12-09', y0=0, y1=1, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x='2016-12-09', y=0.05, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='Increase Period Begins')]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Parallel Coordinates Chart with Graph Objects\nDESCRIPTION: Creates a parallel coordinates chart using Plotly's Graph Objects with custom dimensions, ranges, and constraint ranges. This lower-level implementation allows for more detailed customization of each axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-coordinates-plot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Parcoords(\n        line_color='blue',\n        dimensions = list([\n            dict(range = [1,5],\n                 constraintrange = [1,2], # change this range by dragging the pink line\n                 label = 'A', values = [1,4]),\n            dict(range = [1.5,5],\n                 tickvals = [1.5,3,4.5],\n                 label = 'B', values = [3,1.5]),\n            dict(range = [1,5],\n                 tickvals = [1,2,4,5],\n                 label = 'C', values = [2,4],\n                 ticktext = ['text 1', 'text 2', 'text 3', 'text 4']),\n            dict(range = [1,5],\n                 label = 'D', values = [4,2])\n        ])\n    )\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Polar WebGL Scatter Plot\nDESCRIPTION: Creates a scatter plot in polar coordinates using WebGL rendering, demonstrating non-uniform point distribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nN = 100000\nr = np.random.uniform(0, 1, N)\ntheta = np.random.uniform(0, 2*np.pi, N)\n\nfig = go.Figure(data=go.Scattergl(\n    x = r * np.cos(theta), # non-uniform distribution\n    y = r * np.sin(theta), # zoom to see more points at the center\n    mode='markers',\n    marker=dict(\n        color=np.random.randn(N),\n        colorscale='Viridis',\n        line_width=1\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Opacity Scale for Volume Plots in Python\nDESCRIPTION: Illustrates different opacity scales for volume plots using Plotly. It compares uniform, extremes, min, and max opacity scales to show how they affect the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-volume.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{'type': 'volume'}, {'type': 'volume'}],\n           [{'type': 'volume'}, {'type': 'volume'}]])\n\nimport numpy as np\n\nX, Y, Z = np.mgrid[-8:8:30j, -8:8:30j, -8:8:30j]\nvalues =    np.sin(X*Y*Z) / (X*Y*Z)\n\n\nfig.add_trace(go.Volume(\n    opacityscale=\"uniform\",\n    ), row=1, col=1)\nfig.add_trace(go.Volume(\n    opacityscale=\"extremes\",\n    ), row=1, col=2)\nfig.add_trace(go.Volume(\n    opacityscale=\"min\",\n    ), row=2, col=1)\nfig.add_trace(go.Volume(\n    opacityscale=\"max\",\n    ), row=2, col=2)\nfig.update_traces(x=X.flatten(), y=Y.flatten(), z=Z.flatten(), value=values.flatten(),\n    isomin=0.15, isomax=0.9, opacity=0.1, surface_count=15)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Heatmap with Unequal Block Sizes using Graph Objects\nDESCRIPTION: This example creates a heatmap with unequal block sizes using Plotly graph objects. It calculates the edges of the heatmap squares based on the golden ratio, and then creates a `go.Heatmap` object using these edges as `x` and `y` values.  It also adds a spiral line plot on top of the heatmap.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Build the rectangles as a heatmap\n# specify the edges of the heatmap squares\nphi = (1 + np.sqrt(5) )/2. # golden ratio\nxe = [0, 1, 1+(1/(phi**4)), 1+(1/(phi**3)), phi]\nye = [0, 1/(phi**3), 1/phi**3+1/phi**4, 1/(phi**2), 1]\n\nz = [ [13,3,3,5],\n      [13,2,1,5],\n      [13,10,11,12],\n      [13,8,8,8]\n    ]\n\nfig = go.Figure(data=go.Heatmap(\n          x = np.sort(xe),\n          y = np.sort(ye),\n          z = z,\n          type = 'heatmap',\n          colorscale = 'Viridis'))\n\n# Add spiral line plot\n\ndef spiral(th):\n    a = 1.120529\n    b = 0.306349\n    r = a*np.exp(-b*th)\n    return (r*np.cos(th), r*np.sin(th))\n\ntheta = np.linspace(-np.pi/13,4*np.pi,1000); # angle\n(x,y) = spiral(theta)\n\nfig.add_trace(go.Scatter(x= -x+x[0], y= y-y[0],\n     line =dict(color='white',width=3)))\n\naxis_template = dict(range = [0,1.6], autorange = False,\n             showgrid = False, zeroline = False,\n             linecolor = 'black', showticklabels = False,\n             ticks = '' )\n\nfig.update_layout(margin = dict(t=200,r=200,b=200,l=200),\n    xaxis = axis_template,\n    yaxis = axis_template,\n    showlegend = False,\n    width = 700, height = 700,\n    autosize = False )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Scatter Plot using Plotly Graph Objects in Python\nDESCRIPTION: This example adds text to a scatter plot using Plotly Graph Objects. The `plotly.graph_objects` module is required. The plot includes multiple traces and positions the text labels differently for each trace, demonstrating various combinations of lines, markers, and text.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    mode=\"lines+markers+text\",\n    name=\"Lines, Markers and Text\",\n    text=[\"Text A\", \"Text B\", \"Text C\"],\n    textposition=\"top center\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    mode=\"markers+text\",\n    name=\"Markers and Text\",\n    text=[\"Text D\", \"Text E\", \"Text F\"],\n    textposition=\"bottom center\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2],\n    y=[3, 3, 3],\n    mode=\"lines+text\",\n    name=\"Lines and Text\",\n    text=[\"Text G\", \"Text H\", \"Text I\"],\n    textposition=\"bottom center\"\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Bar Appearance\nDESCRIPTION: Demonstrates comprehensive customization of color bar including title, size, placement, and tick marks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", title=\"Customized color bar on this density plot\")\n\nfig.update_layout(coloraxis_colorbar=dict(\n    title=dict(text=\"Number of Bills per Cell\"),\n    thicknessmode=\"pixels\", thickness=50,\n    lenmode=\"pixels\", len=200,\n    yanchor=\"top\", y=1,\n    ticks=\"outside\", ticksuffix=\" bills\",\n    dtick=5\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Icicle Chart from DataFrame with Plotly Express in Python\nDESCRIPTION: This snippet shows how to construct an icicle chart using a pandas DataFrame with Plotly Express. It uses the 'path' parameter to determine hierarchical levels based on DataFrame columns. The color and margin settings are customizable. Required dependencies: plotly.express and pandas.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.icicle(df, path=[px.Constant(\"all\"), 'day', 'time', 'sex'], values='total_bill')\nfig.update_traces(root_color=\"lightgrey\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Annotations in Plotly Shapes in Python\nDESCRIPTION: This snippet shows how to format text annotations in shapes by changing font size, color, and family using `annotation` dictionary or magic-underscore properties. Dependencies include Plotly and Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-vertical-shapes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\nfig = px.line(df)\nfig.add_hline(y=1, line_dash=\"dot\",\n              annotation_text=\"Jan 1, 2018 baseline\", \n              annotation_position=\"bottom right\",\n              annotation_font_size=20,\n              annotation_font_color=\"blue\"\n             )\nfig.add_vrect(x0=\"2018-09-24\", x1=\"2018-12-18\", \n              annotation_text=\"decline\", annotation_position=\"top left\",\n              annotation=dict(font_size=20, font_family=\"Times New Roman\"),\n              fillcolor=\"green\", opacity=0.25, line_width=0)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Combining Templates in Plotly\nDESCRIPTION: Shows how to combine multiple templates by joining their names with '+' characters. This example combines the built-in 'plotly' template with a custom 'draft' template.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\npio.templates[\"draft\"] = go.layout.Template(\n    layout_annotations=[\n        dict(\n            name=\"draft watermark\",\n            text=\"DRAFT\",\n            textangle=-30,\n            opacity=0.1,\n            font=dict(color=\"black\", size=100),\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=0.5,\n            showarrow=False,\n        )\n    ]\n)\npio.templates.default = \"plotly+draft\"\n\nfig = go.Figure()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Autorange Options in Plotly\nDESCRIPTION: This snippet shows how to specify autorange options, including minallowed and maxallowed, for axes in Plotly Express plots. These options allow fine control over the autorange behavior for plot axes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.update_yaxes(autorangeoptions=dict(minallowed=3))\nfig.update_xaxes(autorangeoptions=dict(maxallowed=5))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Histogram Bars with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to add text to histogram bars using the texttemplate argument. It shows how to display x-axis values as text and adjust the text size.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nnumbers = [\"5\", \"10\", \"3\", \"10\", \"5\", \"8\", \"5\", \"5\"]\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=numbers, name=\"count\", texttemplate=\"%{x}\", textfont_size=20))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Histograms with Plotly in Python\nDESCRIPTION: This snippet shows how to create styled histograms with custom bin sizes, colors, and opacity. It also demonstrates how to add titles and labels to the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500) + 1\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x=x0,\n    histnorm='percent',\n    name='control', # name used in legend and hover labels\n    xbins=dict( # bins used for histogram\n        start=-4.0,\n        end=3.0,\n        size=0.5\n    ),\n    marker_color='#EB89B5',\n    opacity=0.75\n))\nfig.add_trace(go.Histogram(\n    x=x1,\n    histnorm='percent',\n    name='experimental',\n    xbins=dict(\n        start=-3.0,\n        end=4,\n        size=0.5\n    ),\n    marker_color='#330C73',\n    opacity=0.75\n))\n\nfig.update_layout(\n    title_text='Sampled Results', # title of plot\n    xaxis_title_text='Value', # xaxis label\n    yaxis_title_text='Count', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1 # gap between bars of the same location coordinates\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Plot with Customized Hovertemplate\nDESCRIPTION: Creates a scatter plot with two traces, each having custom hover text formatting. The first trace displays price values with custom text and styling, while the second trace shows a simplified price display with the trace name removed using empty <extra> tags.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    x = [1,2,3,4,5],\n    y = [2.02825,1.63728,6.83839,4.8485,4.73463],\n    hovertemplate =\n    '<i>Price</i>: $%{y:.2f}'+\n    '<br><b>X</b>: %{x}<br>'+\n    '<b>%{text}</b>',\n    text = ['Custom text {}'.format(i + 1) for i in range(5)],\n    showlegend = False))\n\nfig.add_trace(go.Scatter(\n    x = [1,2,3,4,5],\n    y = [3.02825,2.63728,4.83839,3.8485,1.73463],\n    hovertemplate = 'Price: %{y:$.2f}<extra></extra>',\n    showlegend = False))\n\nfig.update_layout(\n    hoverlabel_align = 'right',\n    title = \"Set hover text with hovertemplate\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Mean Value Computation in Hexbin Map with Plotly\nDESCRIPTION: This code snippet computes and visualizes the average value per hexbin in a map. It leverages the carshare dataset and sets specific parameters including opacity, label, color scale, and a computation function. A Mapbox token is needed for rendering the map.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hexbin-mapbox.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport numpy as np\n\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\ndf = px.data.carshare()\n\nfig = ff.create_hexbin_mapbox(\n    data_frame=df, lat=\"centroid_lat\", lon=\"centroid_lon\",\n    nx_hexagon=10, opacity=0.9, labels={\"color\": \"Average Peak Hour\"},\n    color=\"peak_hour\", agg_func=np.mean, color_continuous_scale=\"Icefire\", range_color=[0,23]\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Radar Chart with go.Scatterpolar\nDESCRIPTION: This snippet demonstrates how to create a radar chart using the go.Scatterpolar object from Plotly's graph_objects interface. It also shows how to customize the radial axis and hide the legend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/radar-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatterpolar(\n  r=[1, 5, 2, 2, 3],\n  theta=['processing cost','mechanical properties','chemical stability', 'thermal stability',\n           'device integration'],\n  fill='toself'\n))\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True\n    ),\n  ),\n  showlegend=False\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Explained Variance of PCA Components with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to plot the cumulative explained variance of PCA components using the Diabetes dataset from Scikit-learn and Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-pca.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.datasets import load_diabetes\n\nboston = load_diabetes()\ndf = pd.DataFrame(boston.data, columns=boston.feature_names)\n\npca = PCA()\npca.fit(df)\nexp_var_cumul = np.cumsum(pca.explained_variance_ratio_)\n\npx.area(\n    x=range(1, exp_var_cumul.shape[0] + 1),\n    y=exp_var_cumul,\n    labels={\"x\": \"# Components\", \"y\": \"Explained Variance\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Binned Histograms with Plotly in Python\nDESCRIPTION: This snippet shows how to create histograms with custom binning using Plotly. It demonstrates various ways to set bin sizes and ranges, including using the nbinsx attribute and setting exact xbins values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nx = ['1970-01-01', '1970-01-01', '1970-02-01', '1970-04-01', '1970-01-02',\n     '1972-01-31', '1970-02-13', '1971-04-19']\n\nfig = make_subplots(rows=3, cols=2)\n\ntrace0 = go.Histogram(x=x, nbinsx=4)\ntrace1 = go.Histogram(x=x, nbinsx = 8)\ntrace2 = go.Histogram(x=x, nbinsx=10)\ntrace3 = go.Histogram(x=x,\n                      xbins=dict(\n                      start='1969-11-15',\n                      end='1972-03-31',\n                      size='M18'), # M18 stands for 18 months\n                      autobinx=False\n                     )\ntrace4 = go.Histogram(x=x,\n                      xbins=dict(\n                      start='1969-11-15',\n                      end='1972-03-31',\n                      size='M4'), # 4 months bin size\n                      autobinx=False\n                      )\ntrace5 = go.Histogram(x=x,\n                      xbins=dict(\n                      start='1969-11-15',\n                      end='1972-03-31',\n                      size= 'M2'), # 2 months\n                      autobinx = False\n                      )\n\nfig.add_trace(trace0, 1, 1)\nfig.add_trace(trace1, 1, 2)\nfig.add_trace(trace2, 2, 1)\nfig.add_trace(trace3, 2, 2)\nfig.add_trace(trace4, 3, 1)\nfig.add_trace(trace5, 3, 2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Complex Multi-Trace Carpet Plot with Airfoil Data\nDESCRIPTION: Creates an advanced visualization of airfoil data using multiple traces including carpet plots, contours, and scatter plots. Includes pressure coefficient visualization and streamlines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-contour.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport json\nfrom urllib.request import urlopen\n\nurl = \"https://raw.githubusercontent.com/bcdunbar/datasets/master/airfoil_data.json\"\ndata = json.load(urlopen(url))\n\n\nfig=go.Figure()\n\nfig.add_trace(go.Carpet(\n    a = data[0]['a'],\n    b = data[0]['b'],\n    x = data[0]['x'],\n    y = data[0]['y'],\n    baxis = dict(\n      startline = False,\n      endline = False,\n      showticklabels = \"none\",\n      smoothing = 0,\n      showgrid = False\n    ),\n    aaxis = dict(\n      startlinewidth = 2,\n      startline = True,\n      showticklabels = \"none\",\n      endline = True,\n      showgrid = False,\n      endlinewidth = 2,\n      smoothing = 0\n    )\n))\n\nfig.add_trace(go.Contourcarpet(\n    z = data[1]['z'],\n    autocolorscale = False,\n    zmax = 1,\n    name = \"Pressure\",\n    colorscale = \"Viridis\",\n    zmin = -8,\n    colorbar = dict(\n      y = 0,\n      yanchor = \"bottom\",\n      len = 0.75,\n      title = dict(\n        text=\"Pressure coefficient, c<sub>p</sub>\",\n        side=\"right\")\n    ),\n    contours = dict(\n      start = -1,\n      size = 0.025,\n      end = 1.000,\n      showlines = False\n    ),\n    line = dict(\n      smoothing = 0\n    ),\n    autocontour = False,\n    zauto = False\n))\n\nfig.add_trace(go.Contourcarpet(\n    z = data[2]['z'],\n    opacity = 0.300,\n    showlegend = True,\n    name = \"Streamlines\",\n    autocontour = True,\n    ncontours = 50,\n    contours = dict(\n      coloring = \"none\"\n    ),\n    line = dict(\n      color = \"white\",\n      width = 1\n    )\n))\n\nfig.add_trace(go.Contourcarpet(\n    z = data[3]['z'],\n    showlegend = True,\n    name = \"Pressure<br>contours\",\n    autocontour = False,\n    line = dict(\n        color = \"rgba(0, 0, 0, 0.5)\",\n        smoothing = 1\n    ),\n    contours = dict(\n        size = 0.250,\n        start = -4,\n        coloring = \"none\",\n        end = 1.000,\n        showlines = True\n      )\n))\n\nfig.add_trace(go.Scatter(\n    x = data[4]['x'],\n    y = data[4]['y'],\n    legendgroup = \"g1\",\n    name = \"Surface<br>pressure\",\n    mode = \"lines\",\n    hoverinfo = \"skip\",\n    line = dict(\n      color = \"rgba(255, 0, 0, 0.5)\",\n      width = 1,\n      shape = \"spline\",\n      smoothing = 1\n    ),\n    fill = \"toself\",\n    fillcolor = \"rgba(255, 0, 0, 0.2)\"\n))\n\nfig.add_trace(go.Scatter(\n    x = data[5]['x'],\n    y = data[5]['y'],\n    showlegend = False,\n    legendgroup = \"g1\",\n    mode = \"lines\",\n    hoverinfo = \"skip\",\n    line = dict(\n      color = \"rgba(255, 0, 0, 0.3)\",\n      width = 1\n    )\n))\n\nfig.add_trace(go.Scatter(\n    x = data[6]['x'],\n    y = data[6]['y'],\n    showlegend = False,\n    legendgroup = \"g1\",\n    name = \"cp\",\n    text = data[6]['text'],\n    hoverinfo = \"text\",\n    mode = \"lines\",\n    line = dict(\n      color = \"rgba(255, 0, 0, 0.2)\",\n      width = 0\n    )\n))\n\nfig.update_layout(\n    yaxis = dict(\n      zeroline = False,\n      range = [-1.800,1.800],\n      showgrid = False\n    ),\n    dragmode = \"pan\",\n    height = 700,\n    xaxis = dict(\n      zeroline = False,\n      scaleratio = 1,\n      scaleanchor = 'y',\n      range = [-3.800,3.800],\n      showgrid = False\n    ),\n    title = \"Flow over a Karman-Trefftz airfoil\",\n    hovermode = \"closest\",\n    margin = dict(\n      r = 60,\n      b = 40,\n      l = 40,\n      t = 80\n    ),\n    width = 900\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Venn Diagram with Circle Shapes using Plotly\nDESCRIPTION: This code snippet demonstrates how to create a Venn diagram using circle shapes in Plotly. It generates a figure with text labels for the regions and then adds two circles representing the sets A and B. The circles are styled with blue and gray colors and an opacity of 0.3 to create the overlapping effect of a Venn diagram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Create scatter trace of text labels\nfig.add_trace(go.Scatter(\n    x=[1, 1.75, 2.5],\n    y=[1, 1, 1],\n    text=[\"$A$\", \"$A+B$\", \"$B$\"],\n    mode=\"text\",\n    textfont=dict(\n        color=\"black\",\n        size=18,\n        family=\"Arail\",\n    )\n))\n\n# Update axes properties\nfig.update_xaxes(\n    showticklabels=False,\n    showgrid=False,\n    zeroline=False,\n)\n\nfig.update_yaxes(\n    showticklabels=False,\n    showgrid=False,\n    zeroline=False,\n)\n\n# Add circles\nfig.add_shape(type=\"circle\",\n    line_color=\"blue\", fillcolor=\"blue\",\n    x0=0, y0=0, x1=2, y1=2\n)\nfig.add_shape(type=\"circle\",\n    line_color=\"gray\", fillcolor=\"gray\",\n    x0=1.5, y0=0, x1=3.5, y1=2\n)\nfig.update_shapes(opacity=0.3, xref=\"x\", yref=\"y\")\n\nfig.update_layout(\n    margin=dict(l=20, r=20, b=100),\n    height=600, width=800,\n    plot_bgcolor=\"white\"\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Sunburst Plot with go.Sunburst\nDESCRIPTION: This snippet shows how to create a basic sunburst plot using `go.Sunburst` from `plotly.graph_objects`. It defines lists for `labels`, `parents`, and `values` to represent the hierarchical data.  A `go.Sunburst` object is created with these lists, and then displayed as a figure, with layout margins set to 0.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n    labels=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],\n))\n# Update layout for tight margin\n# See https://plotly.com/python/creating-and-updating-figures/\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Heatmap using Plotly Figure Factory in Python\nDESCRIPTION: This snippet creates an annotated heatmap representing a periodic table using Plotly's Figure Factory. Dependencies include Plotly, with a specific function dependency on `create_annotated_heatmap()`. It requires colorscale definitions, symbols, and atomic masses as inputs and outputs an interactive heatmap with hoverable annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Set Colorscale\ncolorscale=[[0.0, 'rgb(255,255,255)'], [.2, 'rgb(255, 255, 153)'],\n            [.4, 'rgb(153, 255, 204)'], [.6, 'rgb(179, 217, 255)'],\n            [.8, 'rgb(240, 179, 255)'],[1.0, 'rgb(255, 77, 148)']]\n\n# Display element name and atomic mass on hover\nhover=[]\nfor x in range(len(symbol)):\n    hover.append([i + '<br>' + 'Atomic Mass: ' + str(j) if i else ''\n                      for i, j in zip(element[x], atomic_mass[x])])\n\nimport plotly.figure_factory as ff\n# Make Annotated Heatmap\nfig = ff.create_annotated_heatmap(color[::-1], annotation_text=symbol[::-1], text=hover[::-1],\n                                 colorscale=colorscale, font_colors=['black'], hoverinfo='text')\nfig.update_layout(\n     title_text='Periodic Table',\n     margin=dict(l=10, r=10, t=10, b=10, pad=10),\n     xaxis=dict(zeroline=False, showgrid=False),\n     yaxis=dict(zeroline=False, showgrid=False, scaleanchor=\"x\"),\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Applying a Colorscale to Treemap in Python\nDESCRIPTION: This example demonstrates how to apply a continuous colorscale to a treemap using the marker_colorscale attribute. It creates a treemap with predefined data and applies the 'Blues' colorscale to represent the hierarchy levels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nvalues = [0, 11, 12, 13, 14, 15, 20, 30]\nlabels = [\"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"B1\", \"B2\"]\nparents = [\"\", \"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"container\", \"B1\"]\n\nfig = go.Figure(go.Treemap(\n    labels = labels,\n    values = values,\n    parents = parents,\n    marker_colorscale = 'Blues'\n))\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Bar Chart and Line Plot with Plotly Subplots\nDESCRIPTION: This code creates a side-by-side visualization with a horizontal bar chart showing household savings percentage and a scatter line plot showing household net worth for eight OECD countries. It uses Plotly's make_subplots for layout, custom styling for visual appeal, and adds detailed annotations for data points and source attribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-bar-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport numpy as np\n\ny_saving = [1.3586, 2.2623000000000002, 4.9821999999999997, 6.5096999999999996,\n            7.4812000000000003, 7.5133000000000001, 15.2148, 17.520499999999998\n            ]\ny_net_worth = [93453.919999999998, 81666.570000000007, 69889.619999999995,\n               78381.529999999999, 141395.29999999999, 92969.020000000004,\n               66090.179999999993, 122379.3]\nx = ['Japan', 'United Kingdom', 'Canada', 'Netherlands',\n     'United States', 'Belgium', 'Sweden', 'Switzerland']\n\n\n# Creating two subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                    shared_yaxes=False, vertical_spacing=0.001)\n\nfig.add_trace(go.Bar(\n    x=y_saving,\n    y=x,\n    marker=dict(\n        color='rgba(50, 171, 96, 0.6)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1),\n    ),\n    name='Household savings, percentage of household disposable income',\n    orientation='h',\n), 1, 1)\n\nfig.add_trace(go.Scatter(\n    x=y_net_worth, y=x,\n    mode='lines+markers',\n    line_color='rgb(128, 0, 128)',\n    name='Household net worth, Million USD/capita',\n), 1, 2)\n\nfig.update_layout(\n    title=dict(text='Household savings & net worth for eight OECD countries'),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.85],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.85],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.47, 1],\n        side='top',\n        dtick=25000,\n    ),\n    legend=dict(x=0.029, y=1.038, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\nannotations = []\n\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2',\n                            y=xd, x=ydn - 20000,\n                            text='{:,}'.format(ydn) + 'M',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1',\n                            y=xd, x=yd + 3,\n                            text=str(yd) + '%',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(50, 171, 96)'),\n                            showarrow=False))\n# Source\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.2, y=-0.109,\n                        text='OECD \"' +\n                             '(2015), Household savings (indicator), ' +\n                             'Household net worth (indicator). doi: ' +\n                             '10.1787/cfc6f499-en (Accessed on 05 June 2015)',\n                        font=dict(family='Arial', size=10, color='rgb(150,150,150)'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Single Trendline with Multiple Traces\nDESCRIPTION: Shows how to display a single overall trendline across multiple data subsets by setting the 'trendline_scope' parameter to 'overall'. This creates one trendline using the entire dataset that is overlaid on all facets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", symbol=\"smoker\", color=\"sex\", trendline=\"ols\", trendline_scope=\"overall\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Direct Labels Using Plotly in Python\nDESCRIPTION: This snippet illustrates how to use plotly.graph_objects to directly label bar charts. It uses the textposition='auto' property to display values on top of each bar, making them easily readable at a glance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx = ['Product A', 'Product B', 'Product C']\ny = [20, 14, 23]\n\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(\n            x=x, y=y,\n            text=y,\n            textposition='auto',\n        )])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Sparklines with Plotly Express in Python\nDESCRIPTION: Demonstrates how to create minimalist sparklines using Plotly Express facets. The example creates small line charts for each company in the stocks dataset, removing axes, labels, and other elements to focus on the trend patterns in a compact visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.stocks(indexed=True)\nfig = px.line(df, facet_row=\"company\", facet_row_spacing=0.01, height=200, width=200)\n\n# hide and lock down axes\nfig.update_xaxes(visible=False, fixedrange=True)\nfig.update_yaxes(visible=False, fixedrange=True)\n\n# remove facet/subplot labels\nfig.update_layout(annotations=[], overwrite=True)\n\n# strip down the rest of the plot\nfig.update_layout(\n    showlegend=False,\n    plot_bgcolor=\"white\",\n    margin=dict(t=10,l=10,b=10,r=10)\n)\n\n# disable the modebar for such a small plot\nfig.show(config=dict(displayModeBar=False))\n```\n\n----------------------------------------\n\nTITLE: Bar Charts with Text Labels\nDESCRIPTION: Shows how to add text labels to bars using automatic values and custom text formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.bar(df, x=\"medal\", y=\"count\", color=\"nation\", text_auto=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Combined kNN Visualization with Contour and Scatter Plots\nDESCRIPTION: Creates a comprehensive visualization combining contour plot of probability estimates with scatter plot of training and test data points. Shows both prediction surface and actual data distribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-knn.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\nmesh_size = .02\nmargin = 0.25\n\n# Load and split data\nX, y = make_moons(noise=0.3, random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y.astype(str), test_size=0.25, random_state=0)\n\n# Create a mesh grid on which we will run our model\nx_min, x_max = X[:, 0].min() - margin, X[:, 0].max() + margin\ny_min, y_max = X[:, 1].min() - margin, X[:, 1].max() + margin\nxrange = np.arange(x_min, x_max, mesh_size)\nyrange = np.arange(y_min, y_max, mesh_size)\nxx, yy = np.meshgrid(xrange, yrange)\n\n# Create classifier, run predictions on grid\nclf = KNeighborsClassifier(15, weights='uniform')\nclf.fit(X, y)\nZ = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]\nZ = Z.reshape(xx.shape)\n\ntrace_specs = [\n    [X_train, y_train, '0', 'Train', 'square'],\n    [X_train, y_train, '1', 'Train', 'circle'],\n    [X_test, y_test, '0', 'Test', 'square-dot'],\n    [X_test, y_test, '1', 'Test', 'circle-dot']\n]\n\nfig = go.Figure(data=[\n    go.Scatter(\n        x=X[y==label, 0], y=X[y==label, 1],\n        name=f'{split} Split, Label {label}',\n        mode='markers', marker_symbol=marker\n    )\n    for X, y, label, split, marker in trace_specs\n])\nfig.update_traces(\n    marker_size=12, marker_line_width=1.5,\n    marker_color=\"lightyellow\"\n)\n\nfig.add_trace(\n    go.Contour(\n        x=xrange,\n        y=yrange,\n        z=Z,\n        showscale=False,\n        colorscale='RdBu',\n        opacity=0.4,\n        name='Score',\n        hoverinfo='skip'\n    )\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing High-Dimensional Data with Scatter Matrix in Python\nDESCRIPTION: Creates a scatter plot matrix using Plotly Express to visualize relationships between multiple features of the Iris dataset. Colors points by species to show categorical relationships.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-tsne-umap-projections.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfeatures = [\"sepal_width\", \"sepal_length\", \"petal_width\", \"petal_length\"]\nfig = px.scatter_matrix(df, dimensions=features, color=\"species\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 2D PCA Scatter Plot with Plotly Express in Python\nDESCRIPTION: This snippet reduces the Iris dataset to 2 dimensions using PCA and creates a 2D scatter plot of the first two principal components using Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-pca.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom sklearn.decomposition import PCA\n\ndf = px.data.iris()\nX = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\n\npca = PCA(n_components=2)\ncomponents = pca.fit_transform(X)\n\nfig = px.scatter(components, x=0, y=1, color=df['species'])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Quiver Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a basic quiver plot using Plotly's figure factory. It generates a 2D grid of points and calculates velocity vectors using cosine and sine functions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/quiver-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx,y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))\nu = np.cos(x)*y\nv = np.sin(x)*y\n\nfig = ff.create_quiver(x, y, u, v)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dumbbell Plot with Plotly\nDESCRIPTION: Visualizes life expectancy changes for European countries using Plotly's Scatter plot with line and marker modes. The plot compares data points from 1952 and 2002 using different colored markers and connecting lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dumbbell-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\nimport pandas as pd\n\ndf = data.gapminder()\ndf = df.loc[(df.continent == \"Europe\") & (df.year.isin([1952, 2002]))]\n\ncountries = (\n    df.loc[(df.continent == \"Europe\") & (df.year.isin([2002]))]\n    .sort_values(by=[\"lifeExp\"], ascending=True)[\"country\"]\n    .unique()\n)\n\ndata = {\"line_x\": [], \"line_y\": [], \"1952\": [], \"2002\": [], \"colors\": [], \"years\": [], \"countries\": []}\n\nfor country in countries:\n    data[\"1952\"].extend([df.loc[(df.year == 1952) & (df.country == country)][\"lifeExp\"].values[0]])\n    data[\"2002\"].extend([df.loc[(df.year == 2002) & (df.country == country)][\"lifeExp\"].values[0]])\n    data[\"line_x\"].extend(\n        [\n            df.loc[(df.year == 1952) & (df.country == country)][\"lifeExp\"].values[0],\n            df.loc[(df.year == 2002) & (df.country == country)][\"lifeExp\"].values[0],\n            None,\n        ]\n    )\n    data[\"line_y\"].extend([country, country, None]),\n\nfig = go.Figure(\n    data=[\n        go.Scatter(\n            x=data[\"line_x\"],\n            y=data[\"line_y\"],\n            mode=\"lines\",\n            showlegend=False,\n            marker=dict(\n                color=\"grey\"\n            )\n        ),\n        go.Scatter(\n            x=data[\"1952\"],\n            y=countries,\n            mode=\"markers\",\n            name=\"1952\",\n            marker=dict(\n                color=\"green\",\n                size=10\n            )\n\n        ),\n        go.Scatter(\n            x=data[\"2002\"],\n            y=countries,\n            mode=\"markers\",\n            name=\"2002\",\n            marker=dict(\n                color=\"blue\",\n                size=10\n            )\n        ),\n    ]\n)\n\nfig.update_layout(\n    title=dict(text=\"Life Expectancy in Europe: 1952 and 2002\"),\n    height=1000,\n    legend_itemclick=False\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Patterns using Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a bar chart with patterns using px.bar() where both color and pattern shape are used to encode the 'nation' variable. This double-encoding improves accessibility for visually-impaired users.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.bar(df, x=\"medal\", y=\"count\", color=\"nation\", pattern_shape=\"nation\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hiding Non-Business Hours in Time Series Plots with Plotly\nDESCRIPTION: This example shows how to hide non-business hours in time series plots using the rangebreaks feature in Plotly. It demonstrates creating a plot with gaps for non-business hours and another with those gaps hidden.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nimport numpy as np\nnp.random.seed(1)\n\nwork_week_40h = pd.date_range(start='2020-03-01', end='2020-03-07', freq=\"BH\")\n\ndf = pd.DataFrame(dict(\n    date = work_week_40h,\n    value = np.cumsum(np.random.rand(40)-0.5)\n))\n\nfig = px.scatter(df, x=\"date\", y=\"value\",\n                 title=\"Default Display with Gaps\")\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nimport numpy as np\nnp.random.seed(1)\n\nwork_week_40h = pd.date_range(start='2020-03-01', end='2020-03-07', freq=\"BH\")\n\ndf = pd.DataFrame(dict(\n    date = work_week_40h,\n    value = np.cumsum(np.random.rand(40)-0.5)\n))\n\nfig = px.scatter(df, x=\"date\", y=\"value\",\n                 title=\"Hide Non-Business Hour Gaps with rangebreaks\")\nfig.update_xaxes(\n    rangebreaks=[\n        dict(bounds=[17, 9], pattern=\"hour\"), #hide hours outside of 9am-5pm\n    ]\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Faceted ECDF Plot\nDESCRIPTION: Creates a faceted ECDF plot with multiple subplots based on time and day variables.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", color=\"sex\", facet_row=\"time\", facet_col=\"day\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple 3D Cones with Absolute Sizing in Plotly\nDESCRIPTION: This example shows how to create multiple cones in a 3D plot. It uses the 'absolute' sizemode with sizeref to control cone sizes, and sets the anchor to 'tip'. The camera position is customized for optimal viewing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/cone-plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Cone(\n    x=[1, 2, 3],\n    y=[1, 2, 3],\n    z=[1, 2, 3],\n    u=[1, 0, 0],\n    v=[0, 3, 0],\n    w=[0, 0, 2],\n    sizemode=\"absolute\",\n    sizeref=2,\n    anchor=\"tip\"))\n\nfig.update_layout(\n      scene=dict(domain_x=[0, 1],\n                 camera_eye=dict(x=-1.57, y=1.36, z=0.58)))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Positioning Colorbars with Container Coordinates in Plotly in Python\nDESCRIPTION: This example illustrates how to position color bars within the plot area using container coordinates in Plotly's Graph Objects in Python. It involves loading external data via urllib and json. The 'x' parameter positions the color bar based on the container, resulting in a heatmap with a color bar positioned using container reference.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport urllib\nimport json\n\n# Load heatmap data\nresponse = urllib.request.urlopen(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/custom_heatmap_colorscale.json\")\ndataset = json.load(response)\n\n# Create and show figure\nfig = go.Figure(go.Heatmap(\n    z=dataset[\"z\"],\n    colorbar=dict(\n        x=0.2,\n        xref=\"container\",\n        title=dict(text=\"Surface Heat\")\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Mapbox Density Map with Plotly Express\nDESCRIPTION: Demonstrates creating a density map using Mapbox integration through px.density_mapbox. This example shows the same earthquake data visualization but using Mapbox as the mapping backend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/density-heatmaps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nimport plotly.express as px\nfig = px.density_mapbox(df, lat='Latitude', lon='Longitude', z='Magnitude', radius=10,\n                        center=dict(lat=0, lon=180), zoom=0,\n                        mapbox_style=\"open-street-map\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding a Background Image to Plotly Figure in Python\nDESCRIPTION: This code snippet demonstrates how to add a background image to a Plotly figure using the `fig.add_layout_image` method. It imports the `plotly.graph_objects` module and sets the source, position, size, and other properties of the image to customize its appearance. The image is added below the data layer.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/images.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Create figure\nfig = go.Figure()\n\n# Add trace\nfig.add_trace(\n    go.Scatter(x=[0, 0.5, 1, 2, 2.2], y=[1.23, 2.5, 0.42, 3, 1])\n)\n\n# Add images\nfig.add_layout_image(\n        dict(\n            source=\"https://images.plot.ly/language-icons/api-home/python-logo.png\",\n            xref=\"x\",\n            yref=\"y\",\n            x=0,\n            y=3,\n            sizex=2,\n            sizey=2,\n            sizing=\"stretch\",\n            opacity=0.5,\n            layer=\"below\")\n)\n\n# Set templates\nfig.update_layout(template=\"plotly_white\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Polar Bar Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet shows how to create a polar bar chart resembling the matplotlib logo using Plotly Graph Objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Barpolar(\n    r=[3.5, 1.5, 2.5, 4.5, 4.5, 4, 3],\n    theta=[65, 15, 210, 110, 312.5, 180, 270],\n    width=[20,15,10,20,15,30,15,],\n    marker_color=[\"#E4FF87\", '#709BFF', '#709BFF', '#FFAA70', '#FFAA70', '#FFDF70', '#B6FFB4'],\n    marker_line_color=\"black\",\n    marker_line_width=2,\n    opacity=0.8\n))\n\nfig.update_layout(\n    template=None,\n    polar = dict(\n        radialaxis = dict(range=[0, 5], showticklabels=False, ticks=''),\n        angularaxis = dict(showticklabels=False, ticks='')\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Restyle Dropdown for Plot Type Selection\nDESCRIPTION: Creates a 3D surface plot with a dropdown menu to switch between surface and heatmap visualizations using the restyle method. Uses volcano dataset and includes custom layout settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Surface(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    template=\"plotly_white\",\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add dropdown\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"type\", \"surface\"],\n                    label=\"3D Surface\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"type\", \"heatmap\"],\n                    label=\"Heatmap\",\n                    method=\"restyle\"\n                )\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=1.1,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\n# Add annotation\nfig.update_layout(\n    annotations=[\n        dict(text=\"Trace type:\", showarrow=False,\n        x=0, y=1.085, yref=\"paper\", align=\"left\")\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Iris Dataset Visualization with Parallel Coordinates\nDESCRIPTION: Implements a parallel coordinates plot for the Iris dataset using Graph Objects with custom color scaling. The visualization includes constraint ranges and specific axis configurations for each feature dimension.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-coordinates-plot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv\")\n\nfig = go.Figure(data=\n    go.Parcoords(\n        line = dict(color = df['species_id'],\n                   colorscale = [[0,'purple'],[0.5,'lightseagreen'],[1,'gold']]),\n        dimensions = list([\n            dict(range = [0,8],\n                constraintrange = [4,8],\n                label = 'Sepal Length', values = df['sepal_length']),\n            dict(range = [0,8],\n                label = 'Sepal Width', values = df['sepal_width']),\n            dict(range = [0,8],\n                label = 'Petal Length', values = df['petal_length']),\n            dict(range = [0,8],\n                label = 'Petal Width', values = df['petal_width'])\n        ])\n    )\n)\n\nfig.update_layout(\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white'\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 2D histogram contour subplot with graph objects\nDESCRIPTION: This snippet creates a subplot consisting of a 2D histogram contour, a scatter plot, and marginal histograms.  It customizes the layout and axes to properly display all the components together, demonstrating how to create comprehensive visualizations with Plotly graph objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nt = np.linspace(-1, 1.2, 2000)\nx = (t**3) + (0.3 * np.random.randn(2000))\ny = (t**6) + (0.3 * np.random.randn(2000))\n\nfig = go.Figure()\nfig.add_trace(go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Blues',\n        reversescale = True,\n        xaxis = 'x',\n        yaxis = 'y'\n    ))\nfig.add_trace(go.Scatter(\n        x = x,\n        y = y,\n        xaxis = 'x',\n        yaxis = 'y',\n        mode = 'markers',\n        marker = dict(\n            color = 'rgba(0,0,0,0.3)',\n            size = 3\n        )\n    ))\nfig.add_trace(go.Histogram(\n        y = y,\n        xaxis = 'x2',\n        marker = dict(\n            color = 'rgba(0,0,0,1)'\n        )\n    ))\nfig.add_trace(go.Histogram(\n        x = x,\n        yaxis = 'y2',\n        marker = dict(\n            color = 'rgba(0,0,0,1)'\n        )\n    ))\n\nfig.update_layout(\n    autosize = False,\n    xaxis = dict(\n        zeroline = False,\n        domain = [0,0.85],\n        showgrid = False\n    ),\n    yaxis = dict(\n        zeroline = False,\n        domain = [0,0.85],\n        showgrid = False\n    ),\n    xaxis2 = dict(\n        zeroline = False,\n        domain = [0.85,1],\n        showgrid = False\n    ),\n    yaxis2 = dict(\n        zeroline = False,\n        domain = [0.85,1],\n        showgrid = False\n    ),\n    height = 600,\n    width = 600,\n    bargap = 0,\n    hovermode = 'closest',\n    showlegend = False\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Table with Plotly Figure Factory in Python\nDESCRIPTION: This code snippet demonstrates how to create a simple table using the `plotly.figure_factory` module. It imports the module and then uses the `create_table` function to generate a table from a list of lists representing the data matrix.  The `fig.show()` method displays the table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Country', 'Year', 'Population'],\n               ['United States', 2000, 282200000],\n               ['Canada', 2000, 27790000],\n               ['United States', 2005, 295500000],\n               ['Canada', 2005, 32310000],\n               ['United States', 2010, 309000000],\n               ['Canada', 2010, 34000000]]\n\nfig = ff.create_table(data_matrix)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating an Icicle Chart with Continuous Colorscale in Plotly\nDESCRIPTION: This complex example creates an Icicle chart with a continuous colorscale to visualize sales and call success rates. It uses a custom function to build a hierarchical dataframe and creates two subplots with different depth levels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/sales_success.csv')\nprint(df.head())\n\nlevels = ['salesperson', 'county', 'region'] # levels used for the hierarchical chart\ncolor_columns = ['sales', 'calls']\nvalue_column = 'calls'\n\ndef build_hierarchical_dataframe(df, levels, value_column, color_columns=None):\n    \"\"\"\n    Build a hierarchy of levels for Icicle charts.\n\n    Levels are given starting from the bottom to the top of the hierarchy,\n    ie the last level corresponds to the root.\n    \"\"\"\n    df_list = []\n    for i, level in enumerate(levels):\n        df_tree = pd.DataFrame(columns=['id', 'parent', 'value', 'color'])\n        dfg = df.groupby(levels[i:]).sum()\n        dfg = dfg.reset_index()\n        df_tree['id'] = dfg[level].copy()\n        if i < len(levels) - 1:\n            df_tree['parent'] = dfg[levels[i+1]].copy()\n        else:\n            df_tree['parent'] = 'total'\n        df_tree['value'] = dfg[value_column]\n        df_tree['color'] = dfg[color_columns[0]] / dfg[color_columns[1]]\n        df_list.append(df_tree)\n    total = pd.Series(dict(id='total', parent='',\n                              value=df[value_column].sum(),\n                              color=df[color_columns[0]].sum() / df[color_columns[1]].sum()), name=0)\n    df_list.append(total)\n    df_all_trees = pd.concat(df_list, ignore_index=True)\n    return df_all_trees\n\n\ndf_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns)\naverage_score = df['sales'].sum() / df['calls'].sum()\n\nfig = make_subplots(1, 2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]],)\n\nfig.add_trace(go.Icicle(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} </b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    name=''\n    ), 1, 1)\n\nfig.add_trace(go.Icicle(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} </b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    maxdepth=2\n    ), 1, 2)\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Icicle Chart with Continuous Color in Plotly Express in Python\nDESCRIPTION: This example demonstrates an icicle chart where nodes are color-coded based on continuous data, using Plotly Express in Python. It uses the 'color' and 'color_continuous_scale' parameters to determine the average color for nodes. Requires the numpy library to compute weighted averages. Dependencies: plotly.express, numpy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.icicle(df, path=[px.Constant(\"world\"), 'continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Anchors in Plotly\nDESCRIPTION: This example demonstrates how to use 'xanchor' and 'yanchor' to control label positioning anchors. It creates a time series chart with shapes, including a rectangle marking a decline period and a horizontal line with a label positioned below it using 'yanchor'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\nfig = px.line(df)\n\nfig.add_shape(\n    type=\"rect\",\n    x0=\"2018-09-24\",\n    y0=0,\n    x1=\"2018-12-18\",\n    y1=3,\n    line_width=0,\n    label=dict(text=\"Decline\", textposition=\"top center\", font=dict(size=20)),\n    fillcolor=\"green\",\n    opacity=0.25,\n)\n\nfig.add_shape(\n    type=\"line\",\n    x0=min(df.index),\n    y0=1,\n    x1=max(df.index),\n    y1=1,\n    line_width=3,\n    line_dash=\"dot\",\n    label=dict(\n        text=\"Jan 1 2018 Baseline\",\n        textposition=\"end\",\n        font=dict(size=20, color=\"blue\"),\n        yanchor=\"top\",\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Election District Choropleth\nDESCRIPTION: Creates a choropleth map of election results using district properties and vote counts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\ngeojson = px.data.election_geojson()\n\nfig = px.choropleth(df, geojson=geojson, color=\"Bergeron\",\n                    locations=\"district\", featureidkey=\"properties.district\",\n                    projection=\"mercator\"\n                   )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Fixed Ratio Axes in 3D Plots\nDESCRIPTION: Creates a 2x2 subplot of 3D meshes with different aspect ratio modes (cube, manual, data, and auto) to demonstrate various ways of controlling axis proportions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-axes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\nN = 50\n\nfig = make_subplots(rows=2, cols=2,\n                    specs=[[{'is_3d': True}, {'is_3d': True}],\n                           [{'is_3d': True}, {'is_3d': True}]],\n                    print_grid=False)\nfor i in [1,2]:\n    for j in [1,2]:\n        fig.add_trace(\n            go.Mesh3d(\n                x=(60*np.random.randn(N)),\n                y=(25*np.random.randn(N)),\n                z=(40*np.random.randn(N)),\n                opacity=0.5,\n              ),\n            row=i, col=j)\n\nfig.update_layout(width=700, margin=dict(r=10, l=10, b=10, t=10))\n# fix the ratio in the top left subplot to be a cube\nfig.update_layout(scene_aspectmode='cube')\n# manually force the z-axis to appear twice as big as the other two\nfig.update_layout(scene2_aspectmode='manual',\n                  scene2_aspectratio=dict(x=1, y=1, z=2))\n# draw axes in proportion to the proportion of their ranges\nfig.update_layout(scene3_aspectmode='data')\n# automatically produce something that is well proportioned using 'data' as the default\nfig.update_layout(scene4_aspectmode='auto')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Range Slider and Selector Implementation in Plotly\nDESCRIPTION: Creates a time series plot with AAPL stock data featuring a range slider and time period selector buttons. Demonstrates basic configuration of rangeselector with multiple time period options and a rangeslider for timeline navigation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/range-slider.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# Load data\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\ndf.columns = [col.replace(\"AAPL.\", \"\") for col in df.columns]\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=list(df.Date), y=list(df.High)))\n\n# Set title\nfig.update_layout(\n    title_text=\"Time series with range slider and selectors\"\n)\n\n# Add range slider\nfig.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Contour and Scatter Plot - Python Plotly Graph Objects\nDESCRIPTION: This snippet loads data from an external source and creates a contour plot combined with a scatter plot using Plotly's graph objects. It demonstrates how to integrate complex datasets and visualize them effectively.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/graphing-multiple-chart-types.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Load data\nimport json\nimport urllib\n\nresponse = urllib.request.urlopen(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/steepest.json\")\n\ndata = json.load(response)\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Contour(\n        z=data[\"contour_z\"][0],\n        y=data[\"contour_y\"][0],\n        x=data[\"contour_x\"][0],\n        ncontours=30,\n        showscale=False\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=data[\"trace_x\",\n        y=data[\"trace_y\",\n        mode=\"markers+lines\",\n        name=\"steepest\",\n        line=dict(\n            color=\"black\"\n        )\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Tick Labels on Date Axes in Python using plotly.express\nDESCRIPTION: This snippet illustrates how to customize tick labels on date axes to show formatted dates alongside the actual data points using the `plotly.express` library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.stocks()\nfig = px.line(df, x=\"date\", y=df.columns,\n              hover_data={\"date\": \"|%B %d, %Y\"},\n              title='custom tick labels')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Logarithmic Scatter Plot with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a scatter plot with logarithmic axes using Plotly Express. It requires 'plotly' and 'numpy' libraries and provides a quick method to visualize data on a log scale by directly specifying log settings and range bounds.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\n\nx = np.linspace(1, 200, 30)\nfig = px.scatter(x=x, y=x**3, log_x=True, log_y=True, range_x=[0.8, 250])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Error Bands with Self-Filling in Plotly Python\nDESCRIPTION: This snippet demonstrates how to create a continuous error band by constructing a single trace that defines both the upper and lower bounds of the band.  The `fill='toself'` attribute is used to fill the area enclosed by the trace, creating the error band effect. This approach simplifies the creation of error bands when the upper and lower bounds can be defined easily.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/continuous-error-bars.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [1, 2, 7, 4, 5, 6, 7, 8, 9, 10]\ny_upper = [2, 3, 8, 5, 6, 7, 8, 9, 10, 11]\ny_lower = [0, 1, 5, 3, 4, 5, 6, 7, 8, 9]\n\n\nfig = go.Figure([\n    go.Scatter(\n        x=x,\n        y=y,\n        line=dict(color='rgb(0,100,80)'),\n        mode='lines'\n    ),\n    go.Scatter(\n        x=x+x[::-1], # x, then x reversed\n        y=y_upper+y_lower[::-1], # upper, then lower reversed\n        fill='toself',\n        fillcolor='rgba(0,100,80,0.2)',\n        line=dict(color='rgba(255,255,255,0)'),\n        hoverinfo=\"skip\",\n        showlegend=False\n    )\n])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Treemap with Continuous Colorscale and Hierarchical Data in Python\nDESCRIPTION: This complex example creates a treemap with a continuous colorscale based on hierarchical sales data. It demonstrates data preprocessing, color mapping based on success rates, and the use of subplots to show different depth levels of the hierarchy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/sales_success.csv')\nprint(df.head())\n\nlevels = ['salesperson', 'county', 'region'] # levels used for the hierarchical chart\ncolor_columns = ['sales', 'calls']\nvalue_column = 'calls'\n\ndef build_hierarchical_dataframe(df, levels, value_column, color_columns=None):\n    \"\"\"\n    Build a hierarchy of levels for Sunburst or Treemap charts.\n\n    Levels are given starting from the bottom to the top of the hierarchy,\n    ie the last level corresponds to the root.\n    \"\"\"\n    df_list = []\n    for i, level in enumerate(levels):\n        df_tree = pd.DataFrame(columns=['id', 'parent', 'value', 'color'])\n        dfg = df.groupby(levels[i:]).sum()\n        dfg = dfg.reset_index()\n        df_tree['id'] = dfg[level].copy()\n        if i < len(levels) - 1:\n            df_tree['parent'] = dfg[levels[i+1]].copy()\n        else:\n            df_tree['parent'] = 'total'\n        df_tree['value'] = dfg[value_column]\n        df_tree['color'] = dfg[color_columns[0]] / dfg[color_columns[1]]\n        df_list.append(df_tree)\n    total = pd.Series(dict(id='total', parent='',\n                              value=df[value_column].sum(),\n                              color=df[color_columns[0]].sum() / df[color_columns[1]].sum()), name=0)\n    df_list.append(total)\n    df_all_trees = pd.concat(df_list, ignore_index=True)\n    return df_all_trees\n\n\ndf_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns)\naverage_score = df['sales'].sum() / df['calls'].sum()\n\nfig = make_subplots(1, 2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]],)\n\nfig.add_trace(go.Treemap(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} </b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    name=''\n    ), 1, 1)\n\nfig.add_trace(go.Treemap(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} </b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    maxdepth=2\n    ), 1, 2)\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Sunburst Chart with Continuous Colorscale in Plotly\nDESCRIPTION: This complex example creates a sunburst chart with a continuous colorscale to visualize hierarchical data. It includes a custom function to build a hierarchical dataframe and demonstrates the use of subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/sales_success.csv')\nprint(df.head())\n\nlevels = ['salesperson', 'county', 'region'] # levels used for the hierarchical chart\ncolor_columns = ['sales', 'calls']\nvalue_column = 'calls'\n\ndef build_hierarchical_dataframe(df, levels, value_column, color_columns=None):\n    \"\"\"\n    Build a hierarchy of levels for Sunburst or Treemap charts.\n\n    Levels are given starting from the bottom to the top of the hierarchy,\n    ie the last level corresponds to the root.\n    \"\"\"\n    df_list = []\n    for i, level in enumerate(levels):\n        df_tree = pd.DataFrame(columns=['id', 'parent', 'value', 'color'])\n        dfg = df.groupby(levels[i:]).sum()\n        dfg = dfg.reset_index()\n        df_tree['id'] = dfg[level].copy()\n        if i < len(levels) - 1:\n            df_tree['parent'] = dfg[levels[i+1]].copy()\n        else:\n            df_tree['parent'] = 'total'\n        df_tree['value'] = dfg[value_column]\n        df_tree['color'] = dfg[color_columns[0]] / dfg[color_columns[1]]\n        df_list.append(df_tree)\n    total = pd.Series(dict(id='total', parent='',\n                              value=df[value_column].sum(),\n                              color=df[color_columns[0]].sum() / df[color_columns[1]].sum()), name=0)\n    df_list.append(total)\n    df_all_trees = pd.concat(df_list, ignore_index=True)\n    return df_all_trees\n\n\ndf_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns)\naverage_score = df['sales'].sum() / df['calls'].sum()\n\nfig = make_subplots(1, 2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]],)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} </b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    name=''\n    ), 1, 1)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} </b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    maxdepth=2\n    ), 1, 2)\n\nfig.update_layout(margin=dict(t=10, b=10, r=10, l=10))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sharing Bins Between Histograms with Plotly in Python\nDESCRIPTION: This snippet shows how to share bins between multiple histograms using the bingroup attribute. It creates two histograms with compatible bin settings and overlays them.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nfig = go.Figure(go.Histogram(\n    x=np.random.randint(7, size=100),\n    bingroup=1))\n\nfig.add_trace(go.Histogram(\n    x=np.random.randint(7, size=20),\n    bingroup=1))\n\nfig.update_layout(\n    barmode=\"overlay\",\n    bargap=0.1)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hover Template in Plotly Scattermap Python\nDESCRIPTION: This code configures a Plotly scattermap with custom hover templates to display marker symbols and their geographical coordinates. It highlights the use of 'hovertemplate' for personalizing hover text, essential in geographical visualizations. Users must ensure Plotly is set up in their Python environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    name = \"\",\n    mode = \"markers+text+lines\",\n    lon = [-75, -80, -50],\n    lat = [45, 20, -20],\n    marker = {'size': 20, 'symbol': [\"bus\", \"harbor\", \"airport\"]},\n    hovertemplate =\n    \"<b>%{marker.symbol} </b><br><br>\" +\n    \"longitude: %{lon}<br>\" +\n    \"latitude: %{lat}<br>\" ))\n\nfig.update_layout(\n    map = {\n        'style': \"outdoors\", 'zoom': 1},\n    showlegend = False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scatter Plot with Plotly Express in Python\nDESCRIPTION: This code snippet creates a 3D scatter plot using election data, where the axes represent different candidates and the color indicates the winning candidate. It also provides visual details such as district names and total votes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\nfig = px.scatter_3d(df, x=\"Joly\", y=\"Coderre\", z=\"Bergeron\", color=\"winner\", size=\"total\", hover_name=\"district\",\n                  symbol=\"result\", color_discrete_map = {\"Joly\": \"blue\", \"Bergeron\": \"green\", \"Coderre\":\"red\"})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding a Logo to a Plotly Chart in Python\nDESCRIPTION: This code shows how to add a logo image to a Plotly chart. The logo is added using `fig.add_layout_image` with xref and yref set to 'paper' for positioning relative to the entire figure. The xanchor and yanchor attributes are used to control the logo's alignment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/images.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Bar(\n        x=[\"-35.3\", \"-15.9\", \"-15.8\", \"-15.6\", \"-11.1\",\n           \"-9.6\", \"-9.2\", \"-3.5\", \"-1.9\", \"-0.9\",\n           \"1.0\", \"1.4\", \"1.7\", \"2.0\", \"2.8\", \"6.2\",\n           \"8.1\", \"8.5\", \"8.5\", \"8.6\", \"11.4\", \"12.5\",\n           \"13.3\", \"13.7\", \"14.4\", \"17.5\", \"17.7\",\n           \"18.9\", \"25.1\", \"28.9\", \"41.4\"],\n        y=[\"Designers, musicians, artists, etc.\",\n           \"Secretaries and administrative assistants\",\n           \"Waiters and servers\", \"Archivists, curators, and librarians\",\n           \"Sales and related\", \"Childcare workers, home car workers, etc.\",\n           \"Food preparation occupations\", \"Janitors, maids, etc.\",\n           \"Healthcare technicians, assistants. and aides\",\n           \"Counselors, social and religious workers\",\n           \"Physical, life and social scientists\", \"Construction\",\n           \"Factory assembly workers\", \"Machinists, repairmen, etc.\",\n           \"Media and communications workers\", \"Teachers\",\n           \"Mechanics, repairmen, etc.\", \"Financial analysts and advisers\",\n           \"Farming, fishing and forestry workers\",\n           \"Truck drivers, heavy equipment operator, etc.\", \"Accountants and auditors\",\n           \"Human resources, management analysts, etc.\", \"Managers\",\n           \"Lawyers and judges\", \"Engineers, architects and surveyors\",\n           \"Nurses\", \"Legal support workers\",\n           \"Computer programmers and system admin.\", \"Police officers and firefighters\",\n           \"Chief executives\", \"Doctors, dentists and surgeons\"],\n        marker=go.bar.Marker(\n            color=\"rgb(253, 240, 54)\",\n            line=dict(color=\"rgb(0, 0, 0)\",\n                      width=2)\n        ),\n        orientation=\"h\",\n    )\n)\n\n# Add image\nfig.add_layout_image(\n    dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=1, y=1.05,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"right\", yanchor=\"bottom\"\n    )\n)\n\n# update layout properties\nfig.update_layout(\n    autosize=False,\n    height=800,\n    width=700,\n    bargap=0.15,\n    bargroupgap=0.1,\n    barmode=\"stack\",\n    hovermode=\"x\",\n    margin=dict(r=20, l=300, b=75, t=125),\n    title=(\"Moving Up, Moving Down<br>\" +\n           \"<i>Percentile change in income between childhood and adulthood</i>\"),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Different Attributes in a Treemap - Python\nDESCRIPTION: This snippet outlines how to use different attributes when creating a Treemap. The usage of values, textinfo, pathbar, and branchvalues principles effectively demonstrates how various dimensions of the data can be represented visually.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = [\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"]\nparents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"]\n\nfig = make_subplots(\n    cols = 2, rows = 1,\n    column_widths = [0.4, 0.4],\n    subplot_titles = ('branchvalues: <b>remainder<br />&nbsp;<br />', 'branchvalues: <b>total<br />&nbsp;<br />'),\n    specs = [[{'type': 'treemap', 'rowspan': 1}, {'type': 'treemap'}]]\n)\n\nfig.add_trace(go.Treemap(\n    labels = labels,\n    parents = parents,\n    values =  [10, 14, 12, 10, 2, 6, 6, 1, 4],\n    textinfo = \"label+value+percent parent+percent entry+percent root\",\n    root_color=\"lightgrey\"\n),row = 1, col = 1)\n\nfig.add_trace(go.Treemap(\n    branchvalues = \"total\",\n    labels = labels,\n    parents = parents,\n    values = [65, 14, 12, 10, 2, 6, 6, 1, 4],\n    textinfo = \"label+value+percent parent+percent entry\",\n    root_color=\"lightgrey\"\n),row = 1, col = 2)\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Shifting Shapes on Categorical Axes with Plotly\nDESCRIPTION: This code snippet demonstrates how to shift shapes on categorical axes using `x0shift` and `x1shift` (or `y0shift` and `y1shift`) in Plotly. It creates a bar chart with categorical x-axis (countries) and adds two rectangular shapes. The shapes are shifted relative to the category centers to illustrate how to precisely position shapes between or beyond categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent == 'Europe' and year == 1952\")\n\nfig = go.Figure(\n    data=go.Bar(x=df[\"country\"], y=df[\"lifeExp\"], marker_color=\"LightSalmon\"),\n    layout=dict(\n        shapes=[\n            dict(\n                type=\"rect\",\n                x0=\"Germany\",\n                y0=0,\n                x1=\"Germany\",\n                y1=0.5,\n                xref=\"x\",\n                yref=\"paper\",\n                x0shift=-0.5,\n                x1shift=0.5,\n                line=dict(color=\"LightGreen\", width=4),\n            ),\n            dict(\n                type=\"rect\",\n                x0=\"Spain\",\n                y0=0,\n                x1=\"Spain\",\n                y1=0.5,\n                xref=\"x\",\n                yref=\"paper\",\n                x0shift=-1,\n                x1shift=1,\n                line=dict(color=\"MediumTurquoise\", width=4),\n            ),\n        ]\n    ),\n)\n\nfig.update_layout(\n    title=dict(\n        text=\"GDP per Capita in Europe (1972)\"\n    ),\n    xaxis=dict(\n        title=dict(\n            text=\"Country\"\n        )\n    ),\n    yaxis=dict(\n        title=dict(\n            text=\"GDP per Capita\"\n        )\n    ),\n)\n\nfig.show()\n\n```\n\n----------------------------------------\n\nTITLE: Zooming on Static Images in Plotly (Python)\nDESCRIPTION: This code illustrates how to display a static image in a Plotly figure and allow zooming. It creates an invisible scatter trace to help with autoresize logic, configures the axes to match the image dimensions, and adds the image using `fig.add_layout_image`. The autosize feature is disabled on double click to prevent unwanted margins.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/images.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Create figure\nfig = go.Figure()\n\n# Constants\nimg_width = 1600\nimg_height = 900\nscale_factor = 0.5\n\n# Add invisible scatter trace.\n# This trace is added to help the autoresize logic work.\nfig.add_trace(\n    go.Scatter(\n        x=[0, img_width * scale_factor],\n        y=[0, img_height * scale_factor],\n        mode=\"markers\",\n        marker_opacity=0\n    )\n)\n\n# Configure axes\nfig.update_xaxes(\n    visible=False,\n    range=[0, img_width * scale_factor]\n)\n\nfig.update_yaxes(\n    visible=False,\n    range=[0, img_height * scale_factor],\n    # the scaleanchor attribute ensures that the aspect ratio stays constant\n    scaleanchor=\"x\"\n)\n\n# Add image\nfig.add_layout_image(\n    dict(\n        x=0,\n        sizex=img_width * scale_factor,\n        y=img_height * scale_factor,\n        sizey=img_height * scale_factor,\n        xref=\"x\",\n        yref=\"y\",\n        opacity=1.0,\n        layer=\"below\",\n        sizing=\"stretch\",\n        source=\"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/bridge.jpg\")\n)\n\n# Configure other layout\nfig.update_layout(\n    width=img_width * scale_factor,\n    height=img_height * scale_factor,\n    margin={\"l\": 0, \"r\": 0, \"t\": 0, \"b\": 0},\n)\n\n# Disable the autosize on double click because it adds unwanted margins around the image\n# More detail: https://plotly.com/python/configuration-options/\nfig.show(config={'doubleClick': 'reset'})\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Histogram of a Bivariate Normal Distribution with Graph Objects\nDESCRIPTION: This snippet demonstrates how to create a 2D histogram using the lower-level Graph Objects API with randomly generated bivariate normal data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\n\nfig = go.Figure(go.Histogram2d(\n        x=x,\n        y=y\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Positioning Rectangles Relative to Plot and Axes\nDESCRIPTION: Shows how to create rectangles positioned relative to both plot coordinates and axis data coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Create scatter trace of text labels\nfig.add_trace(go.Scatter(\n    x=[1.5, 3],\n    y=[2.5, 2.5],\n    text=[\"Rectangle reference to the plot\",\n          \"Rectangle reference to the axes\"],\n    mode=\"text\",\n))\n\n# Set axes properties\nfig.update_xaxes(range=[0, 4])\nfig.update_yaxes(range=[0, 4])\n\n# Add shapes\nfig.add_shape(type=\"rect\",\n    xref=\"x\", yref=\"y\",\n    x0=2.5, y0=0,\n    x1=3.5, y1=2,\n    line=dict(\n        color=\"RoyalBlue\",\n        width=3,\n    ),\n    fillcolor=\"LightSkyBlue\",\n)\nfig.add_shape(type=\"rect\",\n    xref=\"paper\", yref=\"paper\",\n    x0=0.25, y0=0,\n    x1=0.5, y1=0.5,\n    line=dict(\n        color=\"LightSeaGreen\",\n        width=3,\n    ),\n    fillcolor=\"PaleTurquoise\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Tick Marks in Plotly\nDESCRIPTION: Demonstrates how to customize tick mark appearance including length, width, color, and placement. Shows configuration for both x and y axes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_xaxes(ticks=\"outside\", tickwidth=2, tickcolor='crimson', ticklen=10)\nfig.update_yaxes(ticks=\"outside\", tickwidth=2, tickcolor='crimson', ticklen=10, col=1)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Labeling Spectroscopy Data with Images in Plotly (Python)\nDESCRIPTION: This example details how to label spectroscopy data in a Plotly chart by adding multiple images. It simulates spectroscopy data using numpy and scipy, creates scatter traces from the data, and adds images representing different substances using `fig.add_layout_image`. The layout is then updated to configure axes and other properties for better visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/images.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\nfrom scipy.signal import savgol_filter\n\n# Simulate spectroscopy data\ndef simulated_absorption(mu, sigma, intensity):\n    data = [np.random.normal(mu[i], sigma[i], intensity[i]) for i in range(len(mu))]\n    hists = [np.histogram(d, 1000, range=(200, 500), density=True) for d in data]\n    ys = [y for y, x in hists]\n    s = savgol_filter(np.max(ys, axis=0), 41, 3)\n    return hists[0][1], s\n\nmus = [[290, 240, 260], [330, 350]]\nsigmas = [[4, 6, 10], [5, 4]]\nintensities = [[100000, 300000, 700000], [40000, 20000]]\nsimulated_absorptions = [simulated_absorption(m, s, i) for m, s, i in\n                         zip(mus, sigmas, intensities)]\n\n# Create figure\nfig = go.Figure()\n\n# Create traces from data\nnames = [\"Benzene\", \"Naphthalene\"]\nfor (x, y), n in zip(simulated_absorptions, names):\n    fig.add_trace(go.Scatter(x=x, y=y, name=n))\n\n# Add images\nfig.add_layout_image(\n    dict(\n        source=\"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/benzene.png\",\n        x=0.75,\n        y=0.65,\n    ))\nfig.add_layout_image(dict(\n        source=\"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/naphthalene.png\",\n        x=0.9,\n        y=0.3,\n        )\n)\nfig.update_layout_images(dict(\n        xref=\"paper\",\n        yref=\"paper\",\n        sizex=0.3,\n        sizey=0.3,\n        xanchor=\"right\",\n        yanchor=\"bottom\"\n))\n\n# Add annotations\nfig.update_layout(\n    annotations=[\n        dict(\n            x=93.0 / 300,\n            y=0.07 / 0.1,\n            xref=\"paper\",\n            yref=\"paper\",\n            showarrow=True,\n            arrowhead=0,\n            opacity=0.5,\n            ax=250,\n            ay=-40,\n        ),\n        dict(\n            x=156.0 / 300,\n            y=0.04 / 0.1,\n            xref=\"paper\",\n            yref=\"paper\",\n            showarrow=True,\n            arrowhead=0,\n            opacity=0.5,\n            ax=140,\n            ay=-10,\n        )\n    ]\n)\n\n# Configure axes\nfig.update_xaxes(title_text=\"Wavelength\")\nfig.update_yaxes(title_text=\"Absorption\", hoverformat=\".3f\")\n\n# Configure other layout properties\nfig.update_layout(\n    title_text=\"Absorption Frequencies of Benzene and Naphthalene\",\n    height=500,\n    width=900,\n    template=\"plotly_white\"\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Control Legend Positioning in Plotly Express using Python\nDESCRIPTION: Example code illustrating how to modify legend positioning in Plotly Express. It focuses on assigning anchored positions in a scatter plot using attributes `legend.xanchor`, `legend.yanchor`, among others.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year==2007\")\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\",\n    size=\"pop\", size_max=45, log_x=True)\n\nfig.update_layout(legend=dict(\n    yanchor=\"top\",\n    y=0.99,\n    xanchor=\"left\",\n    x=0.01\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding marginal histograms to density contour plot with Plotly Express\nDESCRIPTION: This snippet extends the previous example by adding marginal histograms to the density contour plot.  `marginal_x` and `marginal_y` parameters are used to display histograms for the 'total_bill' and 'tip' distributions respectively, enhancing the data exploration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_contour(df, x=\"total_bill\", y=\"tip\", marginal_x=\"histogram\", marginal_y=\"histogram\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Big Numbers with Data Cards\nDESCRIPTION: This code example demonstrates how to visualize large numbers using data cards in Plotly. The card displays a number along with a delta indicating change and modifies the layout for better aesthetics.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/indicator.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"number+delta\",\n    value = 400,\n    number = {'prefix': \"$\"},\n    delta = {'position': \"top\", 'reference': 320},\n    domain = {'x': [0, 1], 'y': [0, 1]}))\n\nfig.update_layout(paper_bgcolor = \"lightgray\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Map with Plotly Express in Python\nDESCRIPTION: This snippet creates an outline symbol map using Plotly Express. It imports the necessary libraries, loads the Gapminder dataset, and visualizes countries' populations by continent over a range of years. The geography is represented using the ISO alpha country codes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder()\nfig = px.scatter_geo(df, locations=\"iso_alpha\", color=\"continent\", hover_name=\"country\", size=\"pop\",\n               animation_frame=\"year\", projection=\"natural earth\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Auto-displaying Plotly Figure in IPython\nDESCRIPTION: Demonstrates how figures can auto-display themselves in IPython environments without explicitly calling show(). This works when the figure is the last expression in a cell.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure(\n    data=[go.Bar(y=[2, 1, 3])],\n    layout_title_text=\"A Figure Displaying Itself\"\n)\nfig\n```\n\n----------------------------------------\n\nTITLE: Select Hover Points in Area Chart in Python\nDESCRIPTION: This example demonstrates how to customize hover interactions in an area chart. It differentiates hover activation points between areas filled and points only, enhancing user interactivity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[0,0.5,1,1.5,2], y=[0,1,2,1,0],\n                    fill='toself', fillcolor='darkviolet',\n                    hoveron = 'points+fills', # select where hover is active\n                    line_color='darkviolet',\n                    text=\"Points + Fills\",\n                    hoverinfo = 'text+x+y'))\n\nfig.add_trace(go.Scatter(x=[3,3.5,4,4.5,5], y=[0,1,2,1,0],\n                    fill='toself', fillcolor = 'violet',\n                    hoveron='points',\n                    line_color='violet',\n                    text=\"Points only\",\n                    hoverinfo='text+x+y'))\n\nfig.update_layout(\n    title = \"hover on <i>points</i> or <i>fill</i>\",\n    xaxis_range = [0,5.2],\n    yaxis_range = [0,3]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Streamline Plot Implementation\nDESCRIPTION: Creates a basic streamline plot using Plotly's figure factory. The example demonstrates plotting a 2D vector field with velocity components u and v defined on a meshgrid of x and y coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/streamline-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nY, X = np.meshgrid(x, y)\nu = -1 - X**2 + Y\nv = 1 + X - Y**2\n\n# Create streamline figure\nfig = ff.create_streamline(x, y, u, v, arrow_scale=.1)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiclass ROC Curve\nDESCRIPTION: Creates ROC curves for multiclass classification using the Iris dataset. Demonstrates one-vs-rest approach and calculates AUC scores for each class using Plotly Graph Objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\nnp.random.seed(0)\n\n# Artificially add noise to make task harder\ndf = px.data.iris()\nsamples = df.species.sample(n=50, random_state=0)\nnp.random.shuffle(samples.values)\ndf.loc[samples.index, 'species'] = samples.values\n\n# Define the inputs and outputs\nX = df.drop(columns=['species', 'species_id'])\ny = df['species']\n\n# Fit the model\nmodel = LogisticRegression(max_iter=200)\nmodel.fit(X, y)\ny_scores = model.predict_proba(X)\n\n# One hot encode the labels in order to plot them\ny_onehot = pd.get_dummies(y, columns=model.classes_)\n\n# Create an empty figure, and iteratively add new lines\n# every time we compute a new class\nfig = go.Figure()\nfig.add_shape(\n    type='line', line=dict(dash='dash'),\n    x0=0, x1=1, y0=0, y1=1\n)\n\nfor i in range(y_scores.shape[1]):\n    y_true = y_onehot.iloc[:, i]\n    y_score = y_scores[:, i]\n\n    fpr, tpr, _ = roc_curve(y_true, y_score)\n    auc_score = roc_auc_score(y_true, y_score)\n\n    name = f\"{y_onehot.columns[i]} (AUC={auc_score:.2f})\"\n    fig.add_trace(go.Scatter(x=fpr, y=tpr, name=name, mode='lines'))\n\nfig.update_layout(\n    xaxis=dict(\n        title=dict(\n            text='False Positive Rate'\n        ),\n        constrain='domain'\n    ),\n    yaxis=dict(\n        title=dict(\n            text='True Positive Rate'\n        ),\n        scaleanchor='x',\n        scaleratio=1\n    ),\n    width=700, height=500\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Hexbin Map with Plotly in Python\nDESCRIPTION: This snippet demonstrates the creation of a simple hexbin map using Plotly. It uses mapbox for rendering and requires setting a Mapbox access token. The data is sourced from Plotly's carshare dataset. The hexbin map visualizes point counts in geographical bins. Dependencies include Plotly and access to a Mapbox token.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hexbin-mapbox.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\ndf = px.data.carshare()\n\nfig = ff.create_hexbin_mapbox(\n    data_frame=df, lat=\"centroid_lat\", lon=\"centroid_lon\",\n    nx_hexagon=10, opacity=0.9, labels={\"color\": \"Point Count\"},\n)\nfig.update_layout(margin=dict(b=0, t=0, l=0, r=0))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Dendrogram Creation with Random Data\nDESCRIPTION: Creates a basic dendrogram visualization using random data with 15 samples and 12 dimensions. Uses Plotly's figure factory to perform hierarchical clustering and display the resulting tree.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dendrogram.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\nnp.random.seed(1)\n\nX = np.random.rand(15, 12) # 15 samples, with 12 dimensions each\nfig = ff.create_dendrogram(X)\nfig.update_layout(width=800, height=500)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Ternary Bubble Chart with Plotly Express\nDESCRIPTION: This snippet creates a ternary bubble chart using Plotly Express, extending the previous example by adding size and color to the markers based on other data columns. The `hover_name` parameter displays the district name on hover, and the `color` parameter distinguishes the winning candidate. The `size` parameter represents the total votes and `size_max` controls the maximum bubble size.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.election()\nfig = px.scatter_ternary(df, a=\"Joly\", b=\"Coderre\", c=\"Bergeron\", hover_name=\"district\",\n    color=\"winner\", size=\"total\", size_max=15,\n    color_discrete_map = {\"Joly\": \"blue\", \"Bergeron\": \"green\", \"Coderre\":\"red\"} )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Treemap with go.Treemap Class - Python\nDESCRIPTION: If simpler methods do not meet the requirements, this snippet demonstrates how to use the more generic go.Treemap class from the plotly.graph_objects module to create a Treemap, allowing for advanced customization and more complex structures.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Treemap(\n    labels = [\"Eve\",\"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"],\n    root_color=\"lightgrey\"\n))\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Interior Filling for Area Chart in Python\nDESCRIPTION: This example showcases filling the area between two Scatter traces, with the first trace set to not have any fill. The filling is done using the 'tonexty' fill option, allowing for visual overlap of two datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[3, 4, 8, 3],\n    fill=None,\n    mode='lines',\n    line_color='indigo',\n    ))\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 6, 2, 6],\n    fill='tonexty', # fill area between trace0 and trace1\n    mode='lines', line_color='indigo'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Candlestick Chart with Pandas Data\nDESCRIPTION: Creates a simple candlestick chart using Plotly and Pandas with AAPL stock data. Uses Date for x-axis and OHLC (Open, High, Low, Close) values for the candlesticks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/candlestick-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Text Decoration Lines in Plotly Bar Charts\nDESCRIPTION: This example demonstrates how to add decoration lines to text using the textfont.lineposition property. It shows how to add an underline to text in a horizontal bar chart displaying countries with highest life expectancy per continent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder()\n\ngrouped = df[df.year == 2002].loc[df[df.year == 2002].groupby('continent')['lifeExp'].idxmax()]\n\nfig = go.Figure(\n    data=go.Bar(\n        x=grouped['lifeExp'],\n        y=grouped['continent'],\n        text=grouped['country'],\n        orientation='h',\n        marker_color='MediumSlateBlue',\n        textfont=dict(\n            lineposition=\"under\" # combine different line positions with a \"+\" to add more than one: \"under+over\"\n        )\n    ),\n    layout=go.Layout(\n        title_text='Country with Highest Life Expectancy per Continent, 2002',\n        yaxis=dict(showticklabels=False)\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Discrete Color Choropleth Map\nDESCRIPTION: Creates a choropleth map with discrete colors based on election winners, including hover data for vote counts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\ngeojson = px.data.election_geojson()\n\nfig = px.choropleth(df, geojson=geojson, color=\"winner\",\n                    locations=\"district\", featureidkey=\"properties.district\",\n                    projection=\"mercator\", hover_data=[\"Bergeron\", \"Coderre\", \"Joly\"]\n                   )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a WebGL Polar Chart with Multiple Traces using Plotly Graph Objects in Python\nDESCRIPTION: This snippet demonstrates how to create a WebGL-powered polar chart with multiple traces for improved performance using Plotly Graph Objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/hobbs-pearson-trials.csv\")\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatterpolargl(\n      r = df.trial_1_r,\n      theta = df.trial_1_theta,\n      name = \"Trial 1\",\n      marker=dict(size=15, color=\"mediumseagreen\")\n    ))\nfig.add_trace(go.Scatterpolargl(\n      r = df.trial_2_r,\n      theta = df.trial_2_theta,\n      name = \"Trial 2\",\n      marker=dict(size=20, color=\"darkorange\")\n    ))\nfig.add_trace(go.Scatterpolargl(\n      r = df.trial_3_r,\n      theta = df.trial_3_theta,\n      name = \"Trial 3\",\n      marker=dict(size=12, color=\"mediumpurple\")\n    ))\nfig.add_trace(go.Scatterpolargl(\n      r = df.trial_4_r,\n      theta = df.trial_4_theta,\n      name = \"Trial 4\",\n      marker=dict(size=22, color = \"magenta\")\n    ))\nfig.add_trace(go.Scatterpolargl(\n      r = df.trial_5_r,\n      theta = df.trial_5_theta,\n      name = \"Trial 5\",\n      marker=dict(size=19, color = \"limegreen\")\n      ))\nfig.add_trace(go.Scatterpolargl(\n      r = df.trial_6_r,\n      theta = df.trial_6_theta,\n      name = \"Trial 6\",\n      marker=dict(size=10, color = \"gold\")\n      ))\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot in Plotly\nDESCRIPTION: Creates a scatter plot with 100 random points using Plotly graph objects, with varying colors and sizes for the markers\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nnp.random.seed(1)\n\nN = 100\nx = np.random.rand(N)\ny = np.random.rand(N)\ncolors = np.random.rand(N)\nsz = np.random.rand(N) * 30\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x,\n    y=y,\n    mode=\"markers\",\n    marker=go.scatter.Marker(\n        size=sz,\n        color=colors,\n        opacity=0.6,\n        colorscale=\"Viridis\"\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating and Visualizing Area of an Irregular Polygon with Plotly\nDESCRIPTION: Applies the polygon sorting and area calculation functions to an irregular polygon. The result is visualized using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/polygon-area.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef PolygonSort(corners):\n    n = len(corners)\n    cx = float(sum(x for x, y in corners)) / n\n    cy = float(sum(y for x, y in corners)) / n\n    cornersWithAngles = []\n    for x, y in corners:\n        an = (np.arctan2(y - cy, x - cx) + 2.0 * np.pi) % (2.0 * np.pi)\n        cornersWithAngles.append((x, y, an))\n    cornersWithAngles.sort(key = lambda tup: tup[2])\n    return map(lambda (x, y, an): (x, y), cornersWithAngles)\n\ndef PolygonArea(corners):\n    n = len(corners)\n    area = 0.0\n    for i in range(n):\n        j = (i + 1) % n\n        area += corners[i][0] * corners[j][1]\n        area -= corners[j][0] * corners[i][1]\n    area = abs(area) / 2.0\n    return area\n\ncorners = [(0, 0), (3, 0), (2, 10), (3, 4), (1, 5.5)]\ncorners_sorted = PolygonSort(corners)\narea = PolygonArea(corners_sorted)\n\nx = [corner[0] for corner in corners_sorted]\ny = [corner[1] for corner in corners_sorted]\n\nannotation = go.Annotation(\n    x=5.5,\n    y=8.0,\n    text='The area of the polygon is approximately %s' % (area),\n    showarrow=False\n)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    fill='tozeroy',\n)\n\nlayout = go.Layout(\n    annotations=[annotation],\n    xaxis=dict(\n        range=[-1, 9]\n    ),\n    yaxis=dict(\n        range=[-1, 12]\n    )\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\n\npy.iplot(fig, filename='polygon-area')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subset of PCA Components with Scatter Matrix in Python\nDESCRIPTION: This snippet demonstrates how to visualize a subset of PCA components using the California Housing dataset, selecting only the first two components and displaying them in a scatter matrix.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-pca.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\nfrom sklearn.decomposition import PCA\nfrom sklearn.datasets import fetch_california_housing\n\nhousing = fetch_california_housing(as_frame=True)\ndf = housing.data\nn_components = 2\n\npca = PCA(n_components=n_components)\ncomponents = pca.fit_transform(df)\n\ntotal_var = pca.explained_variance_ratio_.sum() * 100\n\nlabels = {str(i): f\"PC {i+1}\" for i in range(n_components)}\nlabels['color'] = 'Median Price'\n\nfig = px.scatter_matrix(\n    components,\n    color=housing.target,\n    dimensions=range(n_components),\n    labels=labels,\n    title=f'Total Explained Variance: {total_var:.2f}%',\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Ternary Contour Plot with Plotly in Python\nDESCRIPTION: This snippet illustrates how to create a ternary contour plot using Plotly’s Scatterternary graph object. It uses cleaned data to draw closed loops with a color map in a ternary plot. The plot's configuration includes line shape, fill options, and a predefined color palette. It requires the Plotly library and relies on contour data available online.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-scatter-contour.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n\ncontour_dict = contour_raw_data['Data']\n\n# Defining a colormap:\ncolors = ['#8dd3c7','#ffffb3','#bebada',\n          '#fb8072','#80b1d3','#fdb462',\n          '#b3de69','#fccde5','#d9d9d9',\n          '#bc80bd']\ncolors_iterator = iter(colors)\n\nfig = go.Figure()\n\nfor raw_data in contour_dict:\n    data = clean_data(raw_data)\n\n    a = [inner_data[0] for inner_data in data[1:]]\n    a.append(data[1][0]) # Closing the loop\n\n    b = [inner_data[1] for inner_data in data[1:]]\n    b.append(data[1][1]) # Closing the loop\n\n    c = [inner_data[2] for inner_data in data[1:]]\n    c.append(data[1][2]) # Closing the loop\n\n    fig.add_trace(go.Scatterternary(\n        text = data[0],\n        a=a, b=b, c=c, mode='lines',\n        line=dict(color='#444', shape='spline'),\n        fill='toself',\n        fillcolor = colors_iterator.__next__()\n    ))\n\nfig.update_layout(title = 'Ternary Contour Plot')\nfig.show()\n\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sankey Diagram with Plotly\nDESCRIPTION: Creates a simple Sankey diagram with 6 nodes and connecting links. Demonstrates basic node and link configuration including padding, thickness, colors and values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(color = \"black\", width = 0.5),\n      label = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"],\n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0, 1, 0, 2, 3, 3],\n      target = [2, 3, 3, 4, 4, 5],\n      value = [8, 4, 2, 8, 4, 2]\n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling LOWESS Smoothing Level with frac Parameter\nDESCRIPTION: Shows how to adjust the smoothness of LOWESS trendlines by setting the 'frac' parameter in trendline_options. Lower values make the line follow the data more closely, with the default being 0.6666.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"lowess\", trendline_options=dict(frac=0.1))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Mirroring Axis Lines in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates how to mirror axis lines to the opposite side of the plotting area in a Plotly Express histogram. It uses `update_xaxes` and `update_yaxes` to set the `mirror` property to `True` for both x and y axes. The plot will display mirrored axis lines for improved visual representation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.histogram(df, x=\"sex\", y=\"tip\", histfunc='sum', facet_col='smoker')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using the 'usa' Scope with Albers USA Projection\nDESCRIPTION: This snippet demonstrates the usage of the 'usa' scope, which includes state boundaries, and the special 'albers usa' projection. This projection moves Alaska and Hawaii closer to the continental US to reduce distortion.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(\n    visible=False, resolution=110, scope=\"usa\",\n    showcountries=True, countrycolor=\"Black\",\n    showsubunits=True, subunitcolor=\"Blue\"\n)\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Ratio Axes in Plotly Graph Objects with Python\nDESCRIPTION: This snippet shows how to create axes with a fixed ratio of pixels per unit between them using Plotly graph objects. It sets the `scaleanchor` property to \"x\" and the `scaleratio` property to 1 for the y-axis, creating a fixed 1:1 aspect ratio between the x and y axes. The zoom box is constrained, maintaining the shape of the line plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],\n    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]\n))\n\nfig.update_layout(\n    width = 800,\n    height = 500,\n    title = \"fixed-ratio axes\"\n)\nfig.update_yaxes(\n    scaleanchor = \"x\",\n    scaleratio = 1,\n  )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal and Vertical Lines with Plotly in Python\nDESCRIPTION: This snippet demonstrates using Plotly to add horizontal and vertical lines and rectangles to a scatter plot. The `add_hline` and `add_vrect` methods from `plotly.graph_objects.Figure` are used to insert these shapes. The code requires Plotly and Plotly Express as dependencies. The data source is the iris dataset provided by Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-vertical-shapes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"petal_length\", y=\"petal_width\")\nfig.add_hline(y=0.9)\nfig.add_vrect(x0=0.9, x1=2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map with Plotly Express in Python\nDESCRIPTION: Illustrates how to create a choropleth map with Plotly Express, using GeoJSON data and a DataFrame of unemployment rates as inputs. It customizes the map's appearance with a Viridis color scale and sets map properties like zoom level and opacity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\nimport plotly.express as px\n\nfig = px.choropleth_map(df, geojson=counties, locations='fips', color='unemp',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           map_style=\"carto-positron\",\n                           zoom=3, center = {\"lat\": 37.0902, \"lon\": -95.7129},\n                           opacity=0.5,\n                           labels={'unemp':'unemployment rate'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Classification Score Distribution and Threshold Analysis\nDESCRIPTION: Creates histograms of classification scores and analyzes true/false positive rates across different thresholds using Plotly Express. Uses scikit-learn to generate sample data and fit a logistic regression model.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification(n_samples=500, random_state=0)\n\nmodel = LogisticRegression()\nmodel.fit(X, y)\ny_score = model.predict_proba(X)[:, 1]\nfpr, tpr, thresholds = roc_curve(y, y_score)\n\n# The histogram of scores compared to true labels\nfig_hist = px.histogram(\n    x=y_score, color=y, nbins=50,\n    labels=dict(color='True Labels', x='Score')\n)\n\nfig_hist.show()\n\n# Evaluating model performance at various thresholds\ndf = pd.DataFrame({\n    'False Positive Rate': fpr,\n    'True Positive Rate': tpr\n}, index=thresholds)\ndf.index.name = \"Thresholds\"\ndf.columns.name = \"Rate\"\n\nfig_thresh = px.line(\n    df, title='TPR and FPR at every threshold',\n    width=700, height=500\n)\n\nfig_thresh.update_yaxes(scaleanchor=\"x\", scaleratio=1)\nfig_thresh.update_xaxes(range=[0, 1], constrain='domain')\nfig_thresh.show()\n```\n\n----------------------------------------\n\nTITLE: Populating Table with Pandas DataFrame in Python\nDESCRIPTION: This example showcases how to populate a Plotly table using data from a Pandas DataFrame. It reads a CSV file into a DataFrame using `pd.read_csv` and then uses the DataFrame's columns as header values and column data for the table cells. This requires both `plotly.graph_objects` and `pandas` modules.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv')\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(df.columns),\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=[df.Rank, df.State, df.Postal, df.Population],\n               fill_color='lavender',\n               align='left'))\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Performing Convolution Between Two Signals with Visualization\nDESCRIPTION: Demonstrates convolution between a sawtooth wave and stock data using SciPy's signal.convolve function. The code creates three traces for visualization: two original signals (SBUX and AAPL stock data) and their convolution result.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/convolution.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsample = range(15)\nsaw = signal.sawtooth(t=sample)\n\ndata_sample = list(stock_data['SBUX'][0:100])\ndata_sample2 = list(stock_data['AAPL'][0:100])\nx = list(range(len(data_sample)))\ny_convolve = signal.convolve(saw, data_sample2)\nx_convolve = list(range(len(y_convolve)))\n\ntrace1 = go.Scatter(\n    x = x,\n    y = data_sample,\n    mode = 'lines',\n    name = 'SBUX'\n)\n\ntrace2 = go.Scatter(\n    x = x,\n    y = data_sample2,\n    mode = 'lines',\n    name = 'AAPL'\n)\n\ntrace3 = go.Scatter(\n    x = x_convolve,\n    y = y_convolve,\n    mode = 'lines',\n    name = 'Convolution'\n)\n\ndata = [trace1, trace2, trace3]\npy.iplot(data, filename='convolution-of-two-signals')\n```\n\n----------------------------------------\n\nTITLE: Adding Markers to Line Charts in Python with Plotly\nDESCRIPTION: Shows how to add markers to line charts using the markers parameter in Plotly Express. The example filters for Oceania countries and creates a line chart of life expectancy over time with visible markers at each data point.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"continent == 'Oceania'\")\nfig = px.line(df, x='year', y='lifeExp', color='country', markers=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple 3D Surface Plots using Plotly in Python\nDESCRIPTION: This snippet demonstrates how to plot multiple 3D surfaces simultaneously using Plotly. Three surfaces with varying elevations are drawn, showcasing Plotly’s capability to handle multiple datasets within a single figure. Useful for comparative analysis of surfaces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-surface-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nz1 = np.array([\n    [8.83,8.89,8.81,8.87,8.9,8.87],\n    [8.89,8.94,8.85,8.94,8.96,8.92],\n    [8.84,8.9,8.82,8.92,8.93,8.91],\n    [8.79,8.85,8.79,8.9,8.94,8.92],\n    [8.79,8.88,8.81,8.9,8.95,8.92],\n    [8.8,8.82,8.78,8.91,8.94,8.92],\n    [8.75,8.78,8.77,8.91,8.95,8.92],\n    [8.8,8.8,8.77,8.91,8.95,8.94],\n    [8.74,8.81,8.76,8.93,8.98,8.99],\n    [8.89,8.99,8.92,9.1,9.13,9.11],\n    [8.97,8.97,8.91,9.09,9.11,9.11],\n    [9.04,9.08,9.05,9.25,9.28,9.27],\n    [9,9.01,9,9.2,9.23,9.2],\n    [8.99,8.99,8.98,9.18,9.2,9.19],\n    [8.93,8.97,8.97,9.18,9.2,9.18]\n])\n\nz2 = z1 + 1\nz3 = z1 - 1\n\nfig = go.Figure(data=[\n    go.Surface(z=z1),\n    go.Surface(z=z2, showscale=False, opacity=0.9),\n    go.Surface(z=z3, showscale=False, opacity=0.9)\n\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using treemapcolorway for Treemap Color Assignment in Python\nDESCRIPTION: This example shows how to use the treemapcolorway attribute in the layout to set colors for treemap sectors. It creates a treemap with predefined data and applies a color scheme using treemapcolorway, which cycles through the specified colors for different levels of the hierarchy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nvalues = [0, 11, 12, 13, 14, 15, 20, 30]\nlabels = [\"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"B1\", \"B2\"]\nparents = [\"\", \"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"container\", \"B1\"]\n\nfig = go.Figure(go.Treemap(\n    labels = labels,\n    values = values,\n    parents = parents,\n    root_color=\"lightblue\"\n))\n\nfig.update_layout(\n    treemapcolorway = [\"pink\", \"lightgray\"],\n    margin = dict(t=50, l=25, r=25, b=25)\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Shifting Axes by Specific Pixels in Plotly Python\nDESCRIPTION: This snippet shows how to manually shift axes by a specific number of pixels using the shift property (new in Plotly 5.12). It creates a figure with multiple y-axes and demonstrates how to shift one axis by 100 pixels to the left.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/multiple-axes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6], name=\"yaxis data\"))\n\nfig.add_trace(go.Scatter(x=[2, 3, 4], y=[40, 50, 60], name=\"yaxis2 data\", yaxis=\"y2\"))\n\nfig.add_trace(\n    go.Scatter(x=[4, 5, 6], y=[1000, 2000, 3000], name=\"yaxis3 data\", yaxis=\"y3\")\n)\n\nfig.add_trace(\n    go.Scatter(x=[3, 4, 5], y=[400, 500, 600], name=\"yaxis4 data\", yaxis=\"y4\")\n)\n\n\nfig.update_layout(\n    xaxis=dict(\n        domain=[0.25, 0.75]\n    ),\n    yaxis=dict(\n        title=dict(\n            text=\"yaxis title\"\n        )\n    ),\n    yaxis2=dict(\n        title=dict(\n            text=\"yaxis2 title\"\n        ),\n        overlaying=\"y\",\n        side=\"right\"\n    ),\n    yaxis3=dict(\n        title=dict(\n            text=\"yaxis3 title\"\n        ),\n        anchor=\"free\",\n        overlaying=\"y\",\n        autoshift=True\n    ),\n    yaxis4=dict(\n        title=dict(\n            text=\"yaxis4 title\"\n        ),\n        anchor=\"free\",\n        overlaying=\"y\",\n        autoshift=True,\n        shift=-100\n    ),\n)\n\nfig.update_layout(\n    title_text=\"Shifting y-axes by a specific number of pixels\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Sunburst Chart with Pattern Fills in Plotly\nDESCRIPTION: This code creates a sunburst chart with pattern fills using Plotly. It demonstrates how to add different patterns to each level of the hierarchy and specify the pattern solidity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Sunburst(\n        labels=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n        parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"],\n        values=[65, 14, 12, 10, 2, 6, 6, 4, 4],\n        branchvalues=\"total\",\n        textfont_size=16,\n        marker=dict(\n            pattern=dict(\n                shape=[\"\", \"/\", \"/\", \".\", \".\", \"/\", \"/\", \".\", \"/\"], solidity=0.9\n            )\n        ),\n    )\n)\n\nfig.update_layout(margin=dict(t=0, l=0, r=0, b=0))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Maps with Plotly Express using Mapbox\nDESCRIPTION: This code snippet demonstrates how to create a scatter map using Plotly Express's scatter_mapbox function. It loads a car sharing dataset, sets a Mapbox access token, and creates a visualization with points colored by peak hour and sized by car hours.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\ndf = px.data.carshare()\nfig = px.scatter_mapbox(df, lat=\"centroid_lat\", lon=\"centroid_lon\",     color=\"peak_hour\", size=\"car_hours\",\n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=10)\nfig.show()\n\n```\n\n----------------------------------------\n\nTITLE: Using Alternate Input Format for Carpet Plot in Plotly\nDESCRIPTION: This snippet shows an alternate input format for carpet plots where x and y can be specified as arrays of arrays. The length of 'a' should match the inner dimension and 'b' the outer dimension.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-plot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    a = [4, 4.5, 5, 6],\n    b = [1, 2, 3],\n    y = [[2, 3, 5.5, 8],\n         [3.5, 4.5, 6.5, 8.5],\n         [4, 5, 7.5, 10]]\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Colored Marginals\nDESCRIPTION: Creates a scatter plot with colored data points and corresponding colored box and violin plot marginals based on species.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", color=\"species\", \n                 marginal_x=\"box\", marginal_y=\"violin\",\n                  title=\"Click on the legend items!\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Polar Bar Chart using Continuous Color Scale as Discrete Sequence in Python\nDESCRIPTION: This snippet demonstrates how to create a polar bar chart in Plotly Express using a continuous color scale as a discrete color sequence. The `color_discrete_sequence` parameter is set to a part of the `Plasma_r` sequential color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.wind()\nfig = px.bar_polar(df, r=\"frequency\", theta=\"direction\", color=\"strength\",\n                   color_discrete_sequence= px.colors.sequential.Plasma_r,\n                   title=\"Part of a continuous color scale used as a discrete sequence\"\n                  )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Steps and Threshold to a Bullet Chart with Plotly in Python\nDESCRIPTION: This example shows how to add steps (shown as shading) and a threshold to a bullet chart. The steps visually represent different ranges, while the threshold determines boundaries for visual alerts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bullet-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"number+gauge+delta\", value = 220,\n    domain = {'x': [0.1, 1], 'y': [0, 1]},\n    title = {'text' :\"<b>Profit</b>\"},\n    delta = {'reference': 200},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, 300]},\n        'threshold': {\n            'line': {'color': \"red\", 'width': 2},\n            'thickness': 0.75,\n            'value': 280},\n        'steps': [\n            {'range': [0, 150], 'color': \"lightgray\"},\n            {'range': [150, 250], 'color': \"gray\"}]}))\nfig.update_layout(height = 250)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Horizontal Histogram with go.Histogram\nDESCRIPTION: This snippet demonstrates how to create a horizontal histogram using `go.Histogram`. Instead of providing data to the `x` argument, data is passed to the `y` argument. This tells `go.Histogram` to orient the bars horizontally.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\ny = np.random.randn(500)\n# Use `y` argument instead of `x` for horizontal histogram\n\nfig = go.Figure(data=[go.Histogram(y=y)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Ribbon Information and Shapes for Chord Diagram in Python\nDESCRIPTION: This complex snippet creates ribbon information and shapes for the chord diagram. It handles both self-relations and relations between different entities, setting up hover information and ribbon shapes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nribbon_info=[]\nfor k in range(L):\n\n    sigma=idx_sort[k]\n    sigma_inv=invPerm(sigma)\n    for j in range(k, L):\n        if matrix[k][j]==0 and matrix[j][k]==0: continue\n        eta=idx_sort[j]\n        eta_inv=invPerm(eta)\n        l=ribbon_ends[k][sigma_inv[j]]\n\n        if j==k:\n            layout['shapes'].append(make_self_rel(l, 'rgb(175,175,175)' ,\n                                    ideo_colors[k], radius=radii_sribb[k]))\n            z=0.9*np.exp(1j*(l[0]+l[1])/2)\n            #the text below will be displayed when hovering the mouse over the ribbon\n            text=labels[k]+' commented on '+ '{:d}'.format(matrix[k][k])+' of '+ 'herself Fb posts',\n            ribbon_info.append(go.Scatter(x=[z.real],\n                                       y=[z.imag],\n                                       mode='markers',\n                                       marker=dict(size=0.5, color=ideo_colors[k]),\n                                       text=text,\n                                       hoverinfo='text'\n                                       )\n                              )\n        else:\n            r=ribbon_ends[j][eta_inv[k]]\n            zi=0.9*np.exp(1j*(l[0]+l[1])/2)\n            zf=0.9*np.exp(1j*(r[0]+r[1])/2)\n            #texti and textf are the strings that will be displayed when hovering the mouse\n            #over the two ribbon ends\n            texti=labels[k]+' commented on '+ '{:d}'.format(matrix[k][j])+' of '+\\\n                  labels[j]+ ' Fb posts',\n\n            textf=labels[j]+' commented on '+ '{:d}'.format(matrix[j][k])+' of '+\\\n            labels[k]+ ' Fb posts',\n            ribbon_info.append(go.Scatter(x=[zi.real],\n                                       y=[zi.imag],\n                                       mode='markers',\n                                       marker=dict(size=0.5, color=ribbon_color[k][j]),\n                                       text=texti,\n                                       hoverinfo='text'\n                                       )\n                              ),\n            ribbon_info.append(go.Scatter(x=[zf.real],\n                                       y=[zf.imag],\n                                       mode='markers',\n                                       marker=dict(size=0.5, color=ribbon_color[k][j]),\n                                       text=textf,\n                                       hoverinfo='text'\n                                       )\n                              )\n            r=(r[1], r[0])#IMPORTANT!!!  Reverse these arc ends because otherwise you get\n                          # a twisted ribbon\n            #append the ribbon shape\n            layout['shapes'].append(make_ribbon(l, r, 'rgb(175,175,175)' , ribbon_color[k][j]))\n```\n\n----------------------------------------\n\nTITLE: Configuring Figure Dictionary for Animated Visualization\nDESCRIPTION: Prepares the figure dictionary with layout, data, and frame configurations for creating an animated bubble chart, including axis settings, hover mode, and update menus\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig_dict = {\n    \"data\": [],\n    \"layout\": {},\n    \"frames\": []\n}\n\n# fill in most of layout\nfig_dict[\"layout\"][\"xaxis\"] = {\"range\": [30, 85], \"title\": \"Life Expectancy\"}\nfig_dict[\"layout\"][\"yaxis\"] = {\"title\": \"GDP per Capita\", \"type\": \"log\"}\nfig_dict[\"layout\"][\"hovermode\"] = \"closest\"\nfig_dict[\"layout\"][\"updatemenus\"] = [...]\n```\n\n----------------------------------------\n\nTITLE: Finalizing and Displaying Interactive Plotly Visualization\nDESCRIPTION: Constructs the final figure by adding slider configuration and rendering the interactive animated bubble chart using Plotly's Figure object\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfig_dict[\"layout\"][\"sliders\"] = [sliders_dict]\n\nfig = go.Figure(fig_dict)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Horizontal Bar Chart with Plotly Express\nDESCRIPTION: Create a simple horizontal bar chart using Plotly Express with tips dataset, displaying total bill by day with horizontal orientation\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-bar-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"total_bill\", y=\"day\", orientation='h')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Box Plot with All Data Points\nDESCRIPTION: Creates a box plot showing all underlying data points instead of just outliers using the points parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.box(df, x=\"time\", y=\"total_bill\", points=\"all\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with LaTeX Labels using Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a simple line plot using Plotly Express with LaTeX-formatted title and axis labels. It uses the MathJax library for rendering mathematical formulas.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/LaTeX.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], title=r'$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$')\nfig.update_layout(\n    xaxis_title=r'$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$',\n    yaxis_title=r'$d, r \\text{ (solar radius)}$'\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Array-like Data using Plotly Express\nDESCRIPTION: This snippet demonstrates creating a simple scatter plot using `plotly.express` with `x` and `y` values provided as array-like objects. It imports the `plotly.express` library and uses the `px.scatter` function to generate the plot, then displays it using `fig.show()`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"# x and y given as array_like objects\nimport plotly.express as px\nfig = px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])\nfig.show()\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap with Reversed Color Scale in Plotly Express\nDESCRIPTION: This example shows how to create a heatmap using a reversed built-in color scale (Cividis_r) in Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndata = [[1, .3, .5, .9],\n        [.3, .1, .4, 1],\n        [.2, .8, .9, .3]]\nfig = px.imshow(data, color_continuous_scale=px.colors.sequential.Cividis_r)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Highlighting Scatter Point Clusters with Circles in Plotly\nDESCRIPTION: This code snippet illustrates how to highlight clusters of scatter points using circle shapes in a Plotly figure. It generates two sets of random data points and adds them as scatter traces. Then, it adds two circles, each encompassing one of the clusters, using the minimum and maximum x and y values of the data points to define the circle boundaries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\n\n# Generate data\nx0 = np.random.normal(2, 0.45, 300)\ny0 = np.random.normal(2, 0.45, 300)\n\nx1 = np.random.normal(6, 0.4, 200)\ny1 = np.random.normal(6, 0.4, 200)\n\n# Create figure\nfig = go.Figure()\n\n# Add scatter traces\nfig.add_trace(go.Scatter(x=x0, y=y0, mode=\"markers\"))\nfig.add_trace(go.Scatter(x=x1, y=y1, mode=\"markers\"))\n\n# Add shapes\nfig.add_shape(type=\"circle\",\n    xref=\"x\", yref=\"y\",\n    x0=min(x0), y0=min(y0),\n    x1=max(x0), y1=max(y0),\n    opacity=0.2,\n    fillcolor=\"blue\",\n    line_color=\"blue\",\n)\n\nfig.add_shape(type=\"circle\",\n    xref=\"x\", yref=\"y\",\n    x0=min(x1), y0=min(y1),\n    x1=max(x1), y1=max(y1),\n    opacity=0.2,\n    fillcolor=\"orange\",\n    line_color=\"orange\",\n)\n\n\n# Hide legend\nfig.update_layout(showlegend=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Horizontal Error Bars\nDESCRIPTION: Demonstrates how to add horizontal error bars to a scatter plot using a percentage-based approach.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_x=dict(\n            type='percent',\n            value=10)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Bar Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet illustrates how to create a grouped bar chart using plotly.graph_objects. It includes bar data for different zoos, which gets grouped using the barmode='group' layout update. This approach is ideal for comparing individual categories across different sets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nanimals=['giraffes', 'orangutans', 'monkeys']\n\nfig = go.Figure(data=[\n    go.Bar(name='SF Zoo', x=animals, y=[20, 14, 23]),\n    go.Bar(name='LA Zoo', x=animals, y=[12, 18, 29])\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Treemap with Nested Layers in Python\nDESCRIPTION: This example demonstrates how to create a treemap with nested layers using hierarchical data. It uses a CSV file containing coffee flavor data and sets a maximum depth of 3 levels for the rendered sectors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv')\n\nfig = go.Figure()\n\nfig.add_trace(go.Treemap(\n    ids = df.ids,\n    labels = df.labels,\n    parents = df.parents,\n    maxdepth=3,\n    root_color=\"lightgrey\"\n))\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: GeoPandas Integration with Choropleth\nDESCRIPTION: Demonstrates creating a choropleth map using GeoPandas DataFrames with election data and geometry information.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport geopandas as gpd\n\ndf = px.data.election()\ngeo_df = gpd.GeoDataFrame.from_features(\n    px.data.election_geojson()[\"features\"]\n).merge(df, on=\"district\").set_index(\"district\")\n\nfig = px.choropleth(geo_df,\n                   geojson=geo_df.geometry,\n                   locations=geo_df.index,\n                   color=\"Joly\",\n                   projection=\"mercator\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Layout and Traces for Polar Chart in Plotly\nDESCRIPTION: This snippet updates the traces and layout of a polar chart in Plotly, setting various visual properties such as marker style, title, and background colors. It uses the 'update_traces' method for consistent trace styling and the 'update_layout' method for layout customization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Common parameters for all traces\nfig.update_traces(mode=\"markers\", marker=dict(line_color='white', opacity=0.7))\n\nfig.update_layout(\n    title = \"Hobbs-Pearson Trials\",\n    font_size = 15,\n    showlegend = False,\n    polar = dict(\n      bgcolor = \"rgb(223, 223, 223)\",\n      angularaxis = dict(\n        linewidth = 3,\n        showline=True,\n        linecolor='black'\n      ),\n      radialaxis = dict(\n        side = \"counterclockwise\",\n        showline = True,\n        linewidth = 2,\n        gridcolor = \"white\",\n        gridwidth = 2,\n      )\n    ),\n    paper_bgcolor = \"rgb(223, 223, 223)\"\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Density Heatmaps\nDESCRIPTION: This example demonstrates how to create multiple density heatmaps in a grid layout using faceting by categorical variables.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", facet_row=\"sex\", facet_col=\"smoker\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Color, Size, and Family in Plotly Scatter Plots\nDESCRIPTION: This example demonstrates how to use the textfont parameter to configure font family, size, and color for text labels in Plotly scatter plots. It creates two traces with different text positions and font styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    mode=\"lines+markers+text\",\n    name=\"Lines, Markers and Text\",\n    text=[\"Text A\", \"Text B\", \"Text C\"],\n    textposition=\"top right\",\n    textfont=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"crimson\"\n    )\n))\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    mode=\"lines+markers+text\",\n    name=\"Lines and Text\",\n    text=[\"Text G\", \"Text H\", \"Text I\"],\n    textposition=\"bottom center\",\n    textfont=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"LightSeaGreen\"\n    )\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Hover Labels\nDESCRIPTION: Creates a scatter plot of US state populations with custom hover text showing state names.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata= pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv\")\n\nfig = go.Figure(data=go.Scatter(x=data['Postal'],\n                                y=data['Population'],\n                                mode='markers',\n                                marker_color=data['Population'],\n                                text=data['State'])) # hover text goes here\n\nfig.update_layout(title=dict(text='Population of USA States'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Tickformat Attribute for Percentage - Plotly Python\nDESCRIPTION: This code snippet demonstrates how to format the y-axis ticks as percentages using the 'tickformat' attribute in Plotly. It updates the layout of the figure to specify that the y-axis should be displayed as a percentage.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\n))\n\nfig.update_layout(yaxis_tickformat = '%')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Choropleth Map with Scope Adjustment for Multiple States\nDESCRIPTION: This snippet shows how to create a choropleth map focusing on California and nearby states with population data, using specified binning endpoints and a custom color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')\ndf_sample_r = df_sample[df_sample['STNAME'] == 'California']\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\ncolorscale = [\n    'rgb(193, 193, 193)',\n    'rgb(239,239,239)',\n    'rgb(195, 196, 222)',\n    'rgb(144,148,194)',\n    'rgb(101,104,168)',\n    'rgb(65, 53, 132)'\n]\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada', 'Oregon', ' Idaho'],\n    binning_endpoints=[14348, 63983, 134827, 426762, 2081313], colorscale=colorscale,\n    county_outline={'color': 'rgb(255,255,255)', 'width': 0.5}, round_legend_values=True,\n    legend=dict(\n      title=dict(\n        text='Population by County'\n      )\n    ),\n    title=dict(\n      text='California and Nearby States'\n    )\n)\nfig.layout.template = None\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Ternary Scatter Plot with Plotly in Python\nDESCRIPTION: This snippet creates a ternary scatter plot using Plotly’s Scatterternary chart. The clean data is plotted in a ternary diagram where each point's position is determined by three variables. It constructs the ternary graph, assigns the scatter mode to markers, and sets various layout properties like axis titles and marker styles. It requires the Plotly library and properly cleaned data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-scatter-contour.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\na_list = []\nb_list = []\nc_list = []\ntext = []\n\nfor raw_data in scatter_data:\n    data = clean_data(raw_data)\n    text.append(data[0])\n    c_list.append(data[1][0])\n    a_list.append(data[1][1])\n    b_list.append(data[1][2])\n\nfig = go.Figure(go.Scatterternary(\n  text=text,\n  a=a_list,\n  b=b_list,\n  c=c_list,\n  mode='markers',\n  marker={'symbol': 100,\n          'color': 'green',\n          'size': 10},\n))\n\nfig.update_layout({\n    'title': 'Ternary Scatter Plot',\n    'ternary':\n        {\n        'sum':1,\n        'aaxis':{'title': 'X', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },\n        'baxis':{'title': 'W', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },\n        'caxis':{'title': 'S', 'min': 0.01, 'linewidth':2, 'ticks':'outside' }\n    },\n    'showlegend': False\n})\n\nfig.show()\n\n```\n\n----------------------------------------\n\nTITLE: Explicitly Constructing a Color Scale in Plotly Express\nDESCRIPTION: This snippet demonstrates how to explicitly construct a color scale using a list of CSS colors. It creates a scatter plot with a custom red-green-blue color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"sepal_length\",\n                 color_continuous_scale=[\"red\", \"green\", \"blue\"])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Order Legends with Plotly Graph Objects in Python\nDESCRIPTION: Example of arranging legends using plotly.graph_objects, where the order of traces defines the legend order. The code displays color-coded bars with respect to x and y coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(name=\"first\", x=[\"a\", \"b\"], y=[1,2]))\nfig.add_trace(go.Bar(name=\"second\", x=[\"a\", \"b\"], y=[2,1]))\nfig.add_trace(go.Bar(name=\"third\", x=[\"a\", \"b\"], y=[1,2]))\nfig.add_trace(go.Bar(name=\"fourth\", x=[\"a\", \"b\"], y=[2,1]))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram on Date Axes in Python with Plotly\nDESCRIPTION: This snippet demonstrates the capabilities of histograms as data aggregation tools, showcasing daily data represented as monthly averages on date axes using `plotly.express`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = px.histogram(df, x=\"Date\", y=\"AAPL.Close\", histfunc=\"avg\", title=\"Histogram on Date Axes\")\nfig.update_traces(xbins_size=\"M1\")\nfig.update_xaxes(showgrid=True, ticklabelmode=\"period\", dtick=\"M1\", tickformat=\"%b\\n%Y\")\nfig.update_layout(bargap=0.1)\nfig.add_trace(go.Scatter(mode=\"markers\", x=df[\"Date\"], y=df[\"AAPL.Close\"], name=\"daily\"))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Custom Text and Labels with Plotly Express\nDESCRIPTION: Shows how to create the same custom annotated heatmap using the modern Plotly Express approach with px.imshow().\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nx = ['Team A', 'Team B', 'Team C']\ny = ['Game One', 'Game Two', 'Game Three']\n\nz = [[.1, .3, .5],\n     [1.0, .8, .6],\n     [.6, .4, .2]]\n\nz_text = [['Win', 'Lose', 'Win'],\n          ['Lose', 'Lose', 'Win'],\n          ['Win', 'Win', 'Lose']]\n\nfig = px.imshow(z, x=x, y=y, color_continuous_scale='Viridis', aspect=\"auto\")\nfig.update_traces(text=z_text, texttemplate=\"%{text}\")\nfig.update_xaxes(side=\"top\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bubble Chart with Plotly Express\nDESCRIPTION: Demonstrates creating a bubble chart using Plotly Express with the Gapminder dataset. The visualization shows GDP per capita vs life expectancy, with population represented by bubble size and continents by color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder()\n\nfig = px.scatter(df.query(\"year==2007\"), x=\"gdpPercap\", y=\"lifeExp\",\n\t         size=\"pop\", color=\"continent\",\n                 hover_name=\"country\", log_x=True, size_max=60)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Period Data with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to display period data using Plotly, including raw data and data aligned to the start, middle, and end of monthly periods. It uses the xperiod and xperiodalignment attributes to configure the display.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.DataFrame(dict(\n    date=[\"2020-01-10\", \"2020-02-10\", \"2020-03-10\", \"2020-04-10\", \"2020-05-10\", \"2020-06-10\"],\n    value=[1,2,3,1,2,3]\n))\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    name=\"Raw Data\",\n    mode=\"markers+lines\", x=df[\"date\"], y=df[\"value\"],\n    marker_symbol=\"star\"\n))\nfig.add_trace(go.Scatter(\n    name=\"Start-aligned\",\n    mode=\"markers+lines\", x=df[\"date\"], y=df[\"value\"],\n    xperiod=\"M1\",\n    xperiodalignment=\"start\"\n))\nfig.add_trace(go.Scatter(\n    name=\"Middle-aligned\",\n    mode=\"markers+lines\", x=df[\"date\"], y=df[\"value\"],\n    xperiod=\"M1\",\n    xperiodalignment=\"middle\"\n))\nfig.add_trace(go.Scatter(\n    name=\"End-aligned\",\n    mode=\"markers+lines\", x=df[\"date\"], y=df[\"value\"],\n    xperiod=\"M1\",\n    xperiodalignment=\"end\"\n))\nfig.add_trace(go.Bar(\n    name=\"Middle-aligned\",\n    x=df[\"date\"], y=df[\"value\"],\n    xperiod=\"M1\",\n    xperiodalignment=\"middle\"\n))\nfig.update_xaxes(showgrid=True, ticklabelmode=\"period\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Grouped Box Plots in Plotly Python\nDESCRIPTION: Demonstrates how to create horizontal grouped box plots by setting orientation='h' and using boxmode='group'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ny = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\n\nfig = go.Figure()\nfig.add_trace(go.Box(\n    x=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n    y=y,\n    name='kale',\n    marker_color='#3D9970'\n))\nfig.add_trace(go.Box(\n    x=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n    y=y,\n    name='radishes',\n    marker_color='#FF4136'\n))\nfig.add_trace(go.Box(\n    x=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n    y=y,\n    name='carrots',\n    marker_color='#FF851B'\n))\n\nfig.update_layout(\n    xaxis=dict(title=dict(text='normalized moisture'), zeroline=False),\n    boxmode='group'\n)\n\nfig.update_traces(orientation='h') # horizontal box plots\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Explicit Color Mapping using Plotly Express in Python\nDESCRIPTION: This snippet illustrates how to create a horizontal bar chart in Plotly Express with explicit color mappings for each category using the `color_discrete_map` parameter, ensuring a specific color for each continent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.bar(df, y=\"continent\", x=\"pop\", color=\"continent\", orientation=\"h\", hover_name=\"country\",\n             color_discrete_map={\n                \"Europe\": \"red\",\n                \"Asia\": \"green\",\n                \"Americas\": \"blue\",\n                \"Oceania\": \"goldenrod\",\n                \"Africa\": \"magenta\"},\n             category_orders={\"continent\": [\"Oceania\", \"Europe\", \"Asia\", \"Africa\", \"Americas\"]},\n             title=\"Explicit color mapping with explicit ordering\"\n            )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Tags in Plotly Text Annotations\nDESCRIPTION: Creates a line chart with two series and demonstrates the use of HTML tags in text annotations, including bold, italic, underline, and hyperlinks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[\n        go.Scatter(\n            x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n            y=[0, 1, 3, 2, 4, 3, 4, 6, 5],\n            mode=\"lines+markers\",\n            name=\"Series 1\",\n        ),\n        go.Scatter(\n            x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n            y=[0, 4, 5, 1, 2, 2, 3, 4, 2],\n            mode=\"lines+markers\",\n            name=\"Series 2\",\n        ),\n    ],\n    layout=go.Layout(\n        annotations=[\n            dict(\n                x=2,\n                y=5,\n                text=\"Text annotation using <b>bolded text</b>, <i>italicized text</i>, <u>underlined text</u>, <br>and a new line\",\n                showarrow=True,\n                arrowhead=1,\n            ),\n            dict(\n                x=4,\n                y=4,\n                text=\"Text annotation with <a href='https://dash.plotly.com'>a link</a>.\",\n                showarrow=False,\n                yshift=10,\n            ),\n        ],\n        showlegend=False,\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bullet Gauge Chart\nDESCRIPTION: This code demonstrates how to create a bullet gauge chart with Plotly. It includes a title, value, delta for comparison, and layout settings specific to bullet charts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/indicator.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"number+gauge+delta\",\n    gauge = {'shape': \"bullet\"},\n    delta = {'reference': 300},\n    value = 220,\n    domain = {'x': [0.1, 1], 'y': [0.2, 0.9]},\n    title = {'text': \"Avg order size\"}))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Random Walk Distance over Time using Plotly in Python\nDESCRIPTION: This code simulates multiple random walks and analyzes the average distance and mean squared distance over time. It uses Plotly subplots to visualize both metrics side by side.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/random-walk.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\nl = 1000\nN = 10000\nt = np.arange(l)\nsteps = np.random.choice([-1, 1], size=(N, l)) + 0.05 * np.random.standard_normal((N, l)) # l steps\nposition = np.cumsum(steps, axis=1) # integrate the position by summing steps values\naverage_distance = np.std(position, axis=0) # average distance\n\nfig = make_subplots(1, 2)\nfig.add_trace(go.Scatter(x=t, y=average_distance, name='mean distance'), 1, 1)\nfig.add_trace(go.Scatter(x=t, y=average_distance**2, name='mean squared distance'), 1, 2)\nfig.update_xaxes(title_text='$t$')\nfig.update_yaxes(title_text='$l$', col=1)\nfig.update_yaxes(title_text='$l^2$', col=2)\nfig.update_layout(showlegend=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Categorical Histogram with Summation\nDESCRIPTION: This snippet illustrates a histogram with categorical data on the x-axis and a sum aggregation on the y-axis.  It shows the total bill amount for each day of the week. The `category_orders` parameter ensures the days are displayed in the desired order.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"day\", y=\"total_bill\", category_orders=dict(day=[\"Thur\", \"Fri\", \"Sat\", \"Sun\"]))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization of Plotly Express Histogram\nDESCRIPTION: Demonstrates advanced figure customization using update methods to modify axes, layout, and add shapes and annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/styling-plotly-express.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"day\", y=\"total_bill\", color=\"sex\",\n            title=\"Receipts by Payer Gender and Day of Week vs Target\",\n            width=600, height=400,\n            labels={\"sex\": \"Payer Gender\",  \"day\": \"Day of Week\", \"total_bill\": \"Receipts\"},\n            category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"sex\": [\"Male\", \"Female\"]},\n            color_discrete_map={\"Male\": \"RebeccaPurple\", \"Female\": \"MediumPurple\"},\n            template=\"simple_white\"\n            )\n\nfig.update_yaxes( # the y-axis is in dollars\n    tickprefix=\"$\", showgrid=True\n)\n\nfig.update_layout( # customize font and legend orientation & position\n    font_family=\"Rockwell\",\n    legend=dict(\n        title=None, orientation=\"h\", y=1, yanchor=\"bottom\", x=0.5, xanchor=\"center\"\n    )\n)\n\nfig.add_shape( # add a horizontal \"target\" line\n    type=\"line\", line_color=\"salmon\", line_width=3, opacity=1, line_dash=\"dot\",\n    x0=0, x1=1, xref=\"paper\", y0=950, y1=950, yref=\"y\"\n)\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"below target!\", x=\"Fri\", y=400, arrowhead=1, showarrow=True\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Removing Caps from Plotly Isosurfaces in Python\nDESCRIPTION: This code snippet demonstrates how to enhance the visualization of internal surfaces by removing side caps in a Plotly isosurface plot. Caps are removed by setting show flags to False on the caps dictionary. Dependencies include numpy for grid creation and plotly.graph_objects for rendering.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nX, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]\n\n# ellipsoid\nvalues = X * X * 0.5 + Y * Y + Z * Z * 2\n\nfig = go.Figure(data=go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=10,\n    isomax=40,\n    caps=dict(x_show=False, y_show=False)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Contours to Carpet Plot in Python with Plotly\nDESCRIPTION: Demonstrates how to add contours to a carpet plot by combining Contourcarpet and Carpet traces. Includes contour settings like start, end, size, and colorbar configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-contour.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Contourcarpet(\n    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    z = [1, 1.96, 2.56, 3.0625, 4, 5.0625, 1, 7.5625, 9, 12.25, 15.21, 14.0625],\n    autocontour = False,\n    contours = dict(\n        start = 1,\n        end = 14,\n        size = 1\n    ),\n    line = dict(\n        width = 2,\n        smoothing = 0\n    ),\n    colorbar = dict(\n       len = 0.4,\n        y = 0.25\n    )\n))\n\nfig.add_trace(go.Carpet(\n    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],\n    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    ),\n    baxis = dict(\n        tickprefix = 'b = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Animating 3D Images with px.imshow in Python\nDESCRIPTION: This snippet demonstrates how to create an animation by slicing a 3D image dataset along a specified axis using `px.imshow` and the `animation_frame` argument. It loads a sample image using `skimage.io`, selects a subset of the data, and then displays the image as an animation, where each frame represents a different slice of the 3D image.  The `binary_string` parameter is used to indicate that the input is a binary image.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import io\ndata = io.imread(\"https://github.com/scikit-image/skimage-tutorials/raw/main/images/cells.tif\")\nimg = data[25:40]\nfig = px.imshow(img, animation_frame=0, binary_string=True, labels=dict(animation_frame=\"slice\"))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Network Graph with Plotly in Python\nDESCRIPTION: This code creates the final network graph figure using Plotly. It combines the edge and node traces, sets up the layout with custom styling, and displays the graph.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/network-graphs.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title=dict(\n                    text=\"<br>Network graph made with Python\",\n                    font=dict(\n                        size=16\n                    )\n                ),\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=20,l=5,r=5,t=40),\n                annotations=[ dict(\n                    text=\"Python code: <a href='https://plotly.com/python/network-graphs/'> https://plotly.com/python/network-graphs/</a>\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\",\n                    x=0.005, y=-0.002 ) ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))\n                )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing kNN Predictions with Plotly Express\nDESCRIPTION: Creates a scatter plot showing model prediction confidence on test data using color gradients. Uses Plotly Express for simplified visualization with continuous color scales.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-knn.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load and split data\nX, y = make_moons(noise=0.3, random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y.astype(str), test_size=0.25, random_state=0)\n\n# Fit the model on training data, predict on test data\nclf = KNeighborsClassifier(15)\nclf.fit(X_train, y_train)\ny_score = clf.predict_proba(X_test)[:, 1]\n\nfig = px.scatter(\n    X_test, x=0, y=1,\n    color=y_score, color_continuous_scale='RdBu',\n    symbol=y_test, symbol_map={'0': 'square-dot', '1': 'circle-dot'},\n    labels={'symbol': 'label', 'color': 'score of <br>first class'}\n)\nfig.update_traces(marker_size=12, marker_line_width=1.5)\nfig.update_layout(legend_orientation='h')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Normalized Histogram with go.Histogram\nDESCRIPTION: This snippet creates a normalized histogram using `go.Histogram`. The `histnorm` parameter is set to 'probability' to normalize the histogram so that the sum of the bar heights represents a probability distribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx = np.random.randn(500)\nfig = go.Figure(data=[go.Histogram(x=x, histnorm='probability')])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Carpet Plot with Plotly in Python\nDESCRIPTION: This code creates a basic carpet plot using Plotly's go.Carpet object. It defines the carpet grid using a and b coordinates with corresponding y values, and configures axis properties including tick labels, smoothing, and grid count.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-scatter.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n      tickprefix = 'a = ',\n      ticksuffix = 'm',\n      smoothing = 1,\n      minorgridcount = 9\n      ),\n    baxis = dict(\n      tickprefix = 'b = ',\n      ticksuffix = 'Pa',\n      smoothing = 1,\n      minorgridcount = 9\n      )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Streamtube Plot with Plotly\nDESCRIPTION: Creates a simple 3D streamtube visualization using Plotly with basic vector field coordinates and components.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/streamtube-plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Streamtube(x=[0, 0, 0], y=[0, 1, 2], z=[0, 0, 0],\n                                   u=[0, 0, 0], v=[1, 1, 1], w=[0, 0, 0]))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Display Sequential Colorscales\nDESCRIPTION: Creates a figure showing all built-in sequential colorscales available in Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/builtin-colorscales.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.colors.sequential.swatches_continuous()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Precision and Recall for Multiple Classes\nDESCRIPTION: This code loops through each class's predicted scores to calculate precision and recall metrics. It utilizes `precision_recall_curve` and `average_precision_score` for each class and adds the resulting curves to the figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfor i in range(y_scores.shape[1]):\n    y_true = y_onehot.iloc[:, i]\n    y_score = y_scores[:, i]\n\n    precision, recall, _ = precision_recall_curve(y_true, y_score)\n    auc_score = average_precision_score(y_true, y_score)\n\n    name = f\"{y_onehot.columns[i]} (AP={auc_score:.2f})\"\n    fig.add_trace(go.Scatter(x=recall, y=precision, name=name, mode='lines'))\n```\n\n----------------------------------------\n\nTITLE: Simple 3D Mesh Plot with Delaunay Triangulation\nDESCRIPTION: Creates a basic 3D mesh plot using Plotly's go.Mesh3d with data loaded from an external dataset. Uses Delaunay triangulation for triangle generation and applies a light pink color with 50% opacity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-mesh.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Download data set from plotly repo\npts = np.loadtxt(np.DataSource().open('https://raw.githubusercontent.com/plotly/datasets/master/mesh_dataset.txt'))\nx, y, z = pts.T\n\nfig = go.Figure(data=[go.Mesh3d(x=x, y=y, z=z, color='lightpink', opacity=0.50)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Isosurfaces with Caps using Plotly in Python\nDESCRIPTION: This example emphasizes rendering multiple isosurfaces with caps by utilizing different surface counts and patterns. It demonstrates advanced customization options within Plotly charts. It uses numpy for the mathematical grid setup and Plotly for rendering.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nX, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, 0:5:20j]\n\nvalues = X * X * 0.5 + Y * Y + Z * Z * 2\n\nfig = go.Figure(data=go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=30,\n    isomax=50,\n    surface=dict(count=3, fill=0.7, pattern='odd'),\n    caps=dict(x_show=True, y_show=True),\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Horizontal Color Bars with Plotly in Python\nDESCRIPTION: This example demonstrates changing the default vertical orientation of color bars to horizontal using Plotly's Graph Objects in Python. It requires the Plotly library and external heatmap data. The input is a loaded dataset used for heatmap values, resulting in a heatmap with a horizontally oriented color bar.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport urllib\nimport json\n\n# Load heatmap data\nresponse = urllib.request.urlopen(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/custom_heatmap_colorscale.json\")\ndataset = json.load(response)\n\n# Create and show figure\nfig = go.Figure()\n\nfig.add_trace(go.Heatmap(\n    z=dataset[\"z\"],\n    colorbar=dict(orientation='h')))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Manhattan Plot with Plotly and Dash\nDESCRIPTION: This snippet demonstrates how to create a basic ManhattanPlot using the Dash Bio library. It reads data from a CSV file and visualizes it interactively. The required dependency is the 'dash_bio' library. The input is a DataFrame containing genomic data, and the output is a Manhattan plot displayed within a Dash application.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-manhattanplot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport dash_bio\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/manhattan_data.csv')\n\ndash_bio.ManhattanPlot(\n    dataframe=df,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Contour Plot Color scale with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a contour plot with a custom color scale using Plotly's Graph Objects in Python. Dependencies include the Plotly library. The input is a 2D list 'z' representing data points, and the output is a contour plot displayed using a specified RGB color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Contour(\n    z=[[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n    colorscale=[[0, \"rgb(166,206,227)\"],\n                [0.25, \"rgb(31,120,180)\"],\n                [0.45, \"rgb(178,223,138)\"],\n                [0.65, \"rgb(51,160,44)\"],\n                [0.85, \"rgb(251,154,153)\"],\n                [1, \"rgb(227,26,28)\"]],\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Custom Sized Subplots - Python\nDESCRIPTION: This snippet creates a 5x2 subplot layout with mixed sizes using rowspan and colspan to customize their arrangement. The print_grid argument is set to true to visualize the grid layout structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=5, cols=2,\n    specs=[[{}, {\"rowspan\": 2}],\n           [{}, None],\n           [{\"rowspan\": 2, \"colspan\": 2}, None],\n           [None, None],\n           [{}, {}]],\n    print_grid=True)\n\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(1,1)\"), row=1, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(1,2)\"), row=1, col=2)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(2,1)\"), row=2, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(3,1)\"), row=3, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(5,1)\"), row=5, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(5,2)\"), row=5, col=2)\n\nfig.update_layout(height=600, width=600, title_text=\"specs examples\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Facets With Independent Axes - Python\nDESCRIPTION: This code snippet demonstrates how to configure facet plots so that the axes are independent for each facet. It shows the total bill versus tip, allowing for independent row and column axis configurations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color='sex', facet_row=\"day\")\nfig.update_yaxes(matches=None)\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color='sex', facet_col=\"day\")\nfig.update_xaxes(matches=None)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sum Value Computation in Hexbin Map with Plotly\nDESCRIPTION: This hexbin map example calculates the sum of values in each hexbin. It uses Plotly’s figure factory along with numpy for aggregation. The use of the carshare dataset and a Mapbox token is essential to run this snippet.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hexbin-mapbox.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport numpy as np\n\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\ndf = px.data.carshare()\n\nfig = ff.create_hexbin_mapbox(\n    data_frame=df, lat=\"centroid_lat\", lon=\"centroid_lon\",\n    nx_hexagon=10, opacity=0.9, labels={\"color\": \"Summed Car.Hours\"},\n    color=\"car_hours\", agg_func=np.sum, color_continuous_scale=\"Magma\"\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart of Stock Ticker Values using plotly.express in Python\nDESCRIPTION: This snippet creates a bar chart representing the relative values of stock tickers using the `plotly.express` library. It indexes the stock data and plots the values along the x-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)-1\nfig = px.bar(df, x=df.index, y=\"GOOG\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Simple Bubble Chart with Graph Objects\nDESCRIPTION: Creates a basic bubble chart using Plotly Graph Objects with custom marker sizes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter(\n    x=[1, 2, 3, 4], y=[10, 11, 12, 13],\n    mode='markers',\n    marker_size=[40, 60, 80, 100])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Multiple Histograms by Category\nDESCRIPTION: This snippet creates multiple histograms, one for each category in a specified column. The `color` parameter separates the data by the unique values in the 'sex' column, creating separate histograms for each gender.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", color=\"sex\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Interactive Histogram with Rug Plot Marginal\nDESCRIPTION: Creates an interactive histogram with hover functionality and rug plot marginal showing country-specific data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.histogram(df, x=\"lifeExp\", color=\"continent\", marginal=\"rug\", hover_name=\"country\",\n                  title=\"Hover over the rug plot!\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Aggregation Functions in Density Heatmaps\nDESCRIPTION: This example demonstrates how to use a custom aggregation function (average) instead of count by specifying a z value and histfunc parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.density_heatmap(df, x=\"petal_length\", y=\"petal_width\", z=\"sepal_length\", histfunc=\"avg\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Reversing Axes with Range and Min Autorange in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates using a reversed axis while specifying only a lower bound for the range.  It sets `autorange=\"min reversed\"` and provides the upper bound in the `range` property as the first element in the list with `None` as the second to enable auto range for the maximum value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(range=[9, None], autorange=\"min reversed\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Range of 3D Axes in Plotly\nDESCRIPTION: Creates a 3D mesh plot with manually configured ranges for x, y, and z axes using Plotly. Uses random data points and sets specific ranges for each axis using the scene attribute.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-axes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nnp.random.seed(1)\n\nN = 70\n\nfig = go.Figure(data=[go.Mesh3d(x=(70*np.random.randn(N)),\n                   y=(55*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='rgba(244,22,100,0.6)'\n                  )])\n\nfig.update_layout(\n    scene = dict(\n        xaxis = dict(nticks=4, range=[-100,100],),\n                     yaxis = dict(nticks=4, range=[-50,100],),\n                     zaxis = dict(nticks=4, range=[-100,100],),),\n    width=700,\n    margin=dict(r=20, l=10, b=10, t=10))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Slider Control with Plotly\nDESCRIPTION: This code snippet demonstrates how to create a simple slider control for a Plotly figure. It sets up traces that change visibility based on the slider's position, using the 'update' method to modify both data and layout attributes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sliders.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Create figure\nfig = go.Figure()\n\n# Add traces, one for each slider step\nfor step in np.arange(0, 5, 0.1):\n    fig.add_trace(\n        go.Scatter(\n            visible=False,\n            line=dict(color=\"#00CED1\", width=6),\n            name=\"𝜈 = \" + str(step),\n            x=np.arange(0, 10, 0.01),\n            y=np.sin(step * np.arange(0, 10, 0.01))))\n\n# Make 10th trace visible\nfig.data[10].visible = True\n\n# Create and add slider\nsteps = []\nfor i in range(len(fig.data)):\n    step = dict(\n        method=\"update\",\n        args=[{\"visible\": [False] * len(fig.data)},\n              {\"title\": \"Slider switched to step: \" + str(i)}],  # layout attribute\n    )\n    step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active=10,\n    currentvalue={\"prefix\": \"Frequency: \"},\n    pad={\"t\": 50},\n    steps=steps\n)]\n\nfig.update_layout(\n    sliders=sliders\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Shape Drawing with Modebar Buttons in Plotly\nDESCRIPTION: This code demonstrates how to set up a Plotly figure with shape-drawing capabilities. It configures the dragmode to 'drawrect' and adds various shape-drawing buttons to the modebar, allowing users to draw and edit shapes on the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure()\ntext=\"Click and drag here <br> to draw a rectangle <br><br> or select another shape <br>in the modebar\"\nfig.add_annotation(\n            x=0.5,\n            y=0.5,\n            text=text,\n            xref=\"paper\",\n            yref=\"paper\",\n            showarrow=False,\n            font_size=20\n)\n# shape defined programatically\nfig.add_shape(editable=True,\n              x0=-1, x1=0, y0=2, y1=3,\n              xref='x', yref='y')\n# define dragmode and add modebar buttons\nfig.update_layout(dragmode='drawrect')\nfig.show(config={'modeBarButtonsToAdd':['drawline',\n                                        'drawopenpath',\n                                        'drawclosedpath',\n                                        'drawcircle',\n                                        'drawrect',\n                                        'eraseshape'\n                                       ]})\n```\n\n----------------------------------------\n\nTITLE: Multiple Attribute Updates with Restyle Dropdown\nDESCRIPTION: Creates a heatmap with multiple dropdown menus to control colorscale, colorscale direction, and line display. Demonstrates updating multiple data attributes simultaneously.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# Create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Heatmap(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=100, b=0, l=0, r=0),\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add dropdowns\nbutton_layer_1_height = 1.08\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"colorscale\", \"Viridis\"],\n                    label=\"Viridis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Cividis\"],\n                    label=\"Cividis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Blues\"],\n                    label=\"Blues\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Greens\"],\n                    label=\"Greens\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"reversescale\", False],\n                    label=\"False\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"reversescale\", True],\n                    label=\"True\",\n                    method=\"restyle\"\n                )\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.37,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[{\"contours.showlines\": False, \"type\": \"contour\"}],\n                    label=\"Hide lines\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"contours.showlines\": True, \"type\": \"contour\"}],\n                    label=\"Show lines\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.58,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"colorscale\", x=0, xref=\"paper\", y=1.06, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Reverse<br>Colorscale\", x=0.25, xref=\"paper\", y=1.07,\n                             yref=\"paper\", showarrow=False),\n        dict(text=\"Lines\", x=0.54, xref=\"paper\", y=1.06, yref=\"paper\",\n                             showarrow=False)\n    ])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sharing Bin Settings Between Multiple 2D Histograms\nDESCRIPTION: This example demonstrates how to use the bingroup attribute to ensure compatible bin settings across multiple 2D histograms in a subplot layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(2,2)\nfig.add_trace(go.Histogram2d(\n    x = [ 1, 2, 2, 3, 4 ],\n    y = [ 1, 2, 2, 3, 4 ],\n    coloraxis = \"coloraxis\",\n    xbins = {'start':1, 'size':1}), 1,1)\nfig.add_trace(go.Histogram2d(\n    x = [ 4, 5, 5, 5, 6 ],\n    y = [ 4, 5, 5, 5, 6 ],\n    coloraxis = \"coloraxis\",\n    ybins = {'start': 3, 'size': 1}),1,2)\nfig.add_trace(go.Histogram2d(\n    x = [ 1, 2, 2, 3, 4 ],\n    y = [ 1, 2, 2, 3, 4 ],\n    bingroup = 1,\n    coloraxis = \"coloraxis\",\n    xbins = {'start':1, 'size':1}), 2,1)\nfig.add_trace(go.Histogram2d(\n    x = [ 4, 5, 5, 5, 6 ],\n    y = [ 4, 5, 5, 5, 6 ],\n    bingroup = 1,\n    coloraxis = \"coloraxis\",\n    ybins = {'start': 3, 'size': 1}),2,2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Exponentially-Weighted Moving Average Trendlines\nDESCRIPTION: Shows how to create an exponentially-weighted moving average (EWMA) trendline using Pandas' ewm function. Uses 'trendline=\"ewm\"' with a halflife parameter to control the weighting decay.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"ewm\", trendline_options=dict(halflife=2),\n                title=\"Exponentially-weighted moving average (halflife of 2 points)\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Histogram with Pattern Shapes\nDESCRIPTION: This snippet creates a histogram with pattern shapes to differentiate categories. It visualizes the distribution of 'sex' with 'total_bill' aggregated by sum, using 'smoker' status to define the pattern shape for each bar.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.histogram(df, x=\"sex\", y=\"total_bill\", color=\"sex\", pattern_shape=\"smoker\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Asymmetric Error Bars with Plotly Express\nDESCRIPTION: Shows how to create a scatter plot with asymmetric error bars using different values for positive and negative errors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\ndf[\"e_plus\"] = df[\"sepal_width\"]/100\ndf[\"e_minus\"] = df[\"sepal_width\"]/40\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 error_y=\"e_plus\", error_y_minus=\"e_minus\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing 3D Cone Lighting Properties in Plotly\nDESCRIPTION: This snippet demonstrates various lighting properties for 3D cones including opacity, ambient, diffuse, specular, roughness, fresnel, and light position. Each cone has different lighting settings to show the visual impact of each parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/cone-plot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Cone(x=[1,] * 3, name=\"base\"))\nfig.add_trace(go.Cone(x=[2,] * 3, opacity=0.3, name=\"opacity:0.3\"))\nfig.add_trace(go.Cone(x=[3,] * 3, lighting_ambient=0.3, name=\"lighting.ambient:0.3\"))\nfig.add_trace(go.Cone(x=[4,] * 3, lighting_diffuse=0.3, name=\"lighting.diffuse:0.3\"))\nfig.add_trace(go.Cone(x=[5,] * 3, lighting_specular=2, name=\"lighting.specular:2\"))\nfig.add_trace(go.Cone(x=[6,] * 3, lighting_roughness=1, name=\"lighting.roughness:1\"))\nfig.add_trace(go.Cone(x=[7,] * 3, lighting_fresnel=2, name=\"lighting.fresnel:2\"))\nfig.add_trace(go.Cone(x=[8,] * 3, lightposition=dict(x=0, y=0, z=1e5),\n                                  name=\"lighting.position x:0,y:0,z:1e5\"))\n\nfig.update_traces(y=[1, 2, 3], z=[1, 1, 1],\n                  u=[1, 2, 3], v=[1, 1, 2], w=[4, 4, 1],\n                  hoverinfo=\"u+v+w+name\",\n                  showscale=False)\n\nfig.update_layout(scene=dict(aspectmode=\"data\",\n                             camera_eye=dict(x=0.05, y=-2.6, z=2)),\n                  margin=dict(t=0, b=0, l=0, r=0))\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Specifying Color Scale by Name in Plotly Express\nDESCRIPTION: This example shows how to specify a color scale by name as a string. It creates a scatter plot using the Inferno color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\",\n                 color=\"sepal_length\", color_continuous_scale='Inferno')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Waterfall Chart with Plotly in Python\nDESCRIPTION: This snippet generates a horizontal waterfall chart, illustrating profit and loss data in a compact format. It utilizes the orientation parameter and customizes connector lines for better visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/waterfall-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Waterfall(\n    name = \"2018\", orientation = \"h\", measure = [\"relative\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\",\n                                              \"relative\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"total\", \"relative\", \"total\"],\n    y = [\"Sales\", \"Consulting\", \"Maintenance\", \"Other revenue\", \"Net revenue\", \"Purchases\", \"Material expenses\",\n       \"Personnel expenses\", \"Other expenses\", \"Operating profit\", \"Investment income\", \"Financial income\",\n       \"Profit before tax\", \"Income tax (15%)\", \"Profit after tax\"],\n    x = [375, 128, 78, 27, None, -327, -12, -78, -12, None, 32, 89, None, -45, None],\n    connector = {\"mode\":\"between\", \"line\":{\"width\":4, \"color\":\"rgb(0, 0, 0)\", \"dash\":\"solid\"}}\n))\n\nfig.update_layout(title = \"Profit and loss statement 2018\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Placing Images Relative to Axes in Plotly Subplots using Python\nDESCRIPTION: This code creates a scatter plot of iris data using Plotly Express, then adds images to each subplot. The images are positioned relative to the axes using 'xref' and 'yref' parameters set to domain values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/images.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", facet_col=\"species\")\n# sources of images\nsources = [\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Iris_setosa_var._setosa_%282595031014%29.jpg/360px-Iris_setosa_var._setosa_%282595031014%29.jpg\",\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Iris_versicolor_quebec_1.jpg/320px-Iris_versicolor_quebec_1.jpg\",\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Iris_virginica_2.jpg/480px-Iris_virginica_2.jpg\",\n]\n# add images\nfor col, src in enumerate(sources):\n    fig.add_layout_image(\n        row=1,\n        col=col + 1,\n        source=src,\n        xref=\"x domain\",\n        yref=\"y domain\",\n        x=1,\n        y=1,\n        xanchor=\"right\",\n        yanchor=\"top\",\n        sizex=0.2,\n        sizey=0.2,\n    )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Line Plot with LaTeX Labels using Plotly Graph Objects\nDESCRIPTION: This snippet shows how to create a more complex plot with multiple lines using Plotly Graph Objects. It includes LaTeX-formatted names for each trace and LaTeX-formatted axis labels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/LaTeX.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 4, 9, 16],\n    name=r'$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$'\n))\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[0.5, 2, 4.5, 8],\n    name=r'$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$'\n))\nfig.update_layout(\n    xaxis_title=r'$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$',\n    yaxis_title=r'$d, r \\text{ (solar radius)}$'\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Weekly Minor Ticks with Monthly Major Labels in Python using plotly.express\nDESCRIPTION: This snippet demonstrates how to set up weekly minor ticks on the date axis while keeping monthly labels as major ticks for better visual distinction of time periods.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\ndf = df.loc[(df[\"Date\"] >= \"2016-07-01\") & (df[\"Date\"] <= \"2016-12-01\")]\n\nfig = px.line(df, x='Date', y='AAPL.High')\nfig.update_xaxes(ticks= \"outside\",\n                 ticklabelmode= \"period\", \n                 tickcolor= \"black\", \n                 ticklen=10, \n                 minor=dict(\n                     ticklen=4,  \n                     dtick=7*24*60*60*1000,  \n                     tick0=\"2016-07-03\", \n                     griddash='dot', \n                     gridcolor='white')\n                )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Legends in Plotly Python\nDESCRIPTION: This example shows various styling options for legends, including positioning, font customization, background color, and border settings. It creates a scatter plot with continents color-coded.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year==2007\")\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\",\n    size=\"pop\", size_max=45, log_x=True)\n\n\nfig.update_layout(\n    legend=dict(\n        x=0,\n        y=1,\n        traceorder=\"reversed\",\n        title_font_family=\"Times New Roman\",\n        font=dict(\n            family=\"Courier\",\n            size=12,\n            color=\"black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Black\",\n        borderwidth=2\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D Mesh Tetrahedron with Manual Triangle Specification\nDESCRIPTION: Creates a tetrahedron mesh by manually specifying vertices and triangle indices using i, j, k parameters. Includes color interpolation based on vertex intensity values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-mesh.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[\n    go.Mesh3d(\n        x=[0, 1, 2, 0],\n        y=[0, 0, 1, 2],\n        z=[0, 2, 0, 1],\n        colorbar=dict(title=dict(text='z')),\n        colorscale=[[0, 'gold'],\n                    [0.5, 'mediumturquoise'],\n                    [1, 'magenta']],\n        intensity=[0, 0.33, 0.66, 1],\n        i=[0, 0, 0, 1],\n        j=[1, 2, 3, 2],\n        k=[2, 3, 1, 3],\n        name='y',\n        showscale=True\n    )\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Rainbow Box Plots in Plotly Python\nDESCRIPTION: Shows how to create box plots with rainbow colors using HSL color space and numpy to generate random data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nN = 30     # Number of boxes\n\n# generate an array of rainbow colors by fixing the saturation and lightness of the HSL\n# representation of colour and marching around the hue.\n# Plotly accepts any CSS color format, see e.g. http://www.w3schools.com/cssref/css_colors_legal.asp.\nc = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 360, N)]\n\n# Each box is represented by a dict that contains the data, the type, and the colour.\n# Use list comprehension to describe N boxes, each with a different colour and with different randomly generated data:\nfig = go.Figure(data=[go.Box(\n    y=3.5 * np.sin(np.pi * i/N) + i/N + (1.5 + 0.5 * np.cos(np.pi*i/N)) * np.random.rand(10),\n    marker_color=c[i]\n    ) for i in range(int(N))])\n\n# format the layout\nfig.update_layout(\n    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n    yaxis=dict(zeroline=False, gridcolor='white'),\n    paper_bgcolor='rgb(233,233,233)',\n    plot_bgcolor='rgb(233,233,233)',\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Contour Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a basic contour plot using Plotly's `graph_objects` module. It initializes a `go.Contour` object with a 2D array `z` representing the data for the contour plot and displays the plot using `fig.show()`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data =\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]]\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Animating a Frenet Frame Moving Along a Planar Curve\nDESCRIPTION: This example creates an advanced animation showing a Frenet frame (tangent and normal vectors) moving along a planar curve. It calculates curve data, velocity, and unit vectors, then creates frames showing the moving frame at different points along the curve.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\n\n# Generate curve data\nt = np.linspace(-1, 1, 100)\nx = t + t ** 2\ny = t - t ** 2\nxm = np.min(x) - 1.5\nxM = np.max(x) + 1.5\nym = np.min(y) - 1.5\nyM = np.max(y) + 1.5\nN = 50\ns = np.linspace(-1, 1, N)\nxx = s + s ** 2\nyy = s - s ** 2\nvx = 1 + 2 * s\nvy = 1 - 2 * s  # v=(vx, vy) is the velocity\nspeed = np.sqrt(vx ** 2 + vy ** 2)\nux = vx / speed  # (ux, uy) unit tangent vector, (-uy, ux) unit normal vector\nuy = vy / speed\n\nxend = xx + ux  # end coordinates for the unit tangent vector at (xx, yy)\nyend = yy + uy\n\nxnoe = xx - uy  # end coordinates for the unit normal vector at (xx,yy)\nynoe = yy + ux\n\n\n# Create figure\nfig = go.Figure(\n    data=[go.Scatter(x=x, y=y,\n                     name=\"frame\",\n                     mode=\"lines\",\n                     line=dict(width=2, color=\"blue\")),\n          go.Scatter(x=x, y=y,\n                     name=\"curve\",\n                     mode=\"lines\",\n                     line=dict(width=2, color=\"blue\"))\n          ],\n    layout=go.Layout(width=600, height=600,\n                     xaxis=dict(range=[xm, xM], autorange=False, zeroline=False),\n                     yaxis=dict(range=[ym, yM], autorange=False, zeroline=False),\n                     title=dict(text=\"Moving Frenet Frame Along a Planar Curve\"),\n                     hovermode=\"closest\",\n                     updatemenus=[dict(type=\"buttons\",\n                                       buttons=[dict(label=\"Play\",\n                                                     method=\"animate\",\n                                                     args=[None])])]),\n\n    frames=[go.Frame(\n        data=[go.Scatter(\n            x=[xx[k], xend[k], None, xx[k], xnoe[k]],\n            y=[yy[k], yend[k], None, yy[k], ynoe[k]],\n            mode=\"lines\",\n            line=dict(color=\"red\", width=2))\n        ]) for k in range(N)]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pie Chart with Plotly Express in Python\nDESCRIPTION: Creates a pie chart using px.pie() to visualize the population of European countries. It shows how to set values and names parameters and handle smaller values by grouping them into an 'Other countries' category.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Europe'\")\ndf.loc[df['pop'] < 2.e6, 'country'] = 'Other countries' # Represent only large countries\nfig = px.pie(df, values='pop', names='country', title='Population of European continent')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Advanced Parallel Coordinates Plot with Complex Customization\nDESCRIPTION: Creates an advanced parallel coordinates visualization with electric colorscale, custom tick values, and various dimension configurations. This example demonstrates more sophisticated features including specialized tick text and visibility settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-coordinates-plot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv\")\n\nfig = go.Figure(data=\n    go.Parcoords(\n        line = dict(color = df['colorVal'],\n                   colorscale = 'Electric',\n                   showscale = True,\n                   cmin = -4000,\n                   cmax = -100),\n        dimensions = list([\n            dict(range = [32000,227900],\n                 constraintrange = [100000,150000],\n                 label = \"Block Height\", values = df['blockHeight']),\n            dict(range = [0,700000],\n                 label = 'Block Width', values = df['blockWidth']),\n            dict(tickvals = [0,0.5,1,2,3],\n                 ticktext = ['A','AB','B','Y','Z'],\n                 label = 'Cyclinder Material', values = df['cycMaterial']),\n            dict(range = [-1,4],\n                 tickvals = [0,1,2,3],\n                 label = 'Block Material', values = df['blockMaterial']),\n            dict(range = [134,3154],\n                 visible = True,\n                 label = 'Total Weight', values = df['totalWeight']),\n            dict(range = [9,19984],\n                 label = 'Assembly Penalty Wt', values = df['assemblyPW']),\n            dict(range = [49000,568000],\n                 label = 'Height st Width', values = df['HstW'])])\n    )\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Simple OHLC Chart with Pandas in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create a basic OHLC chart using Plotly and Pandas. It loads data from a CSV file and plots open, high, low, and close values for Apple stock.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ohlc-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=go.Ohlc(x=df['Date'],\n                    open=df['AAPL.Open'],\n                    high=df['AAPL.High'],\n                    low=df['AAPL.Low'],\n                    close=df['AAPL.Close']))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Different DataFrame Types with Plotly Express\nDESCRIPTION: Illustrates how to use pandas and Polars dataframes with Plotly Express functions. Both examples create a scatter plot using the iris dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/px-arguments.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x='sepal_length', y='sepal_width', color='species', size='petal_length')\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris(return_type='polars')\n\nfig = px.scatter(df, x='sepal_length', y='sepal_width', color='species', size='petal_length')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating HTML for Plotly figures and dropdown\nDESCRIPTION: This code generates HTML code for a dropdown menu and corresponding Plotly figures, using data from a dictionary of Plotly figures.  It iterates through the figure dictionary, creates HTML option tags for the dropdown menu, and creates HTML div tags containing the Plotly figures. The figures are initially hidden except for the first one, and their visibility is controlled by JavaScript when the dropdown selection changes. It also generates custom text for each figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndata_for_jinja= collections.defaultdict(str)\ntext_dict = {}\nfor n, figname in enumerate(fig_dict.keys()):\n    text_dict[figname]=f\"Here is some custom text about the {figname} figure\"  #This is a succinct way to populate text_dict; in practice you'd probably populate it manually elsewhere\n    data_for_jinja[\"dropdown_entries\"]+=f\"<option value='{figname}'>{fig_dict[figname].layout.title.text}</option>\"\n    #YOU MAY NEED TO UPDATE THE LINK TO THE LATEST PLOTLY.JS\n    fig_html = fig_dict[figname].to_html(full_html=False, config=dict(responsive=False, scrollZoom=False, doubleClick=False), include_plotlyjs = \"cdn\")\n    initially_hide_divs_other_than_the_first = \"style=\\\"display:none;\\\"\"*(n>0)   \n    data_for_jinja[\"divs\"]+=f'<div id=\"{figname}\" class=\"content-div\" {initially_hide_divs_other_than_the_first}>{fig_html}{text_dict[figname]}</div>'\n```\n\n----------------------------------------\n\nTITLE: Styling User-Drawn Shapes in Plotly\nDESCRIPTION: This code shows how to style user-drawn shapes by configuring the 'newshape' attribute in the layout. It sets properties like line color, fill color, and opacity for newly drawn shapes, and also includes a pre-defined shape with custom styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure()\ntext=\"Click and drag<br> to draw a rectangle <br><br> or select another shape <br>in the modebar\"\nfig.add_annotation(\n            x=0.5,\n            y=0.5,\n            text=text,\n            xref=\"paper\",\n            yref=\"paper\",\n            showarrow=False,\n            font_size=20\n)\n# shape defined programatically\nfig.add_shape(line_color='yellow',\n              fillcolor='turquoise',\n              opacity=0.4,\n              editable=True,\n              x0=0, x1=1, y0=2, y1=3,\n              xref='x', yref='y'\n)\nfig.update_layout(dragmode='drawrect',\n                  # style of new shapes\n                  newshape=dict(line_color='yellow',\n                                fillcolor='turquoise',\n                                opacity=0.5))\nfig.show(config={'modeBarButtonsToAdd':['drawline',\n                                        'drawopenpath',\n                                        'drawclosedpath',\n                                        'drawcircle',\n                                        'drawrect',\n                                        'eraseshape'\n                                       ]})\n```\n\n----------------------------------------\n\nTITLE: Setting Midpoint for Diverging Color Scale in Choropleth\nDESCRIPTION: Demonstrates setting a midpoint for a diverging color scale in a choropleth map using the color_continuous_midpoint parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year == 2007\")\navg_lifeExp = (df['lifeExp']*df['pop']).sum()/df['pop'].sum()\n\nfig = px.choropleth(df, locations=\"iso_alpha\", color=\"lifeExp\",\n                    color_continuous_scale=px.colors.diverging.BrBG,\n                    color_continuous_midpoint=avg_lifeExp,\n                    title=\"World Average Life Expectancy in 2007 in years was %.1f\" % avg_lifeExp)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Annotating Lines in Plotly with Annotations\nDESCRIPTION: This code snippet illustrates how to annotate different lines in a multi-line plot created using Plotly. Annotations help summarize the data visually, providing insights directly on the graph.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\ntitle = 'Main Source for News'\nlabels = ['Television', 'Newspaper', 'Internet', 'Radio']\ncolors = ['rgb(67,67,67)', 'rgb(115,115,115)', 'rgb(49,130,189)', 'rgb(189,189,189)']\n\nmode_size = [8, 8, 12, 8]\nline_size = [2, 2, 4, 2]\n\nx_data = np.vstack((np.arange(2001, 2014),)*4)\n\ny_data = np.array([\n    [74, 82, 80, 74, 73, 72, 74, 70, 70, 66, 66, 69],\n    [45, 42, 50, 46, 36, 36, 34, 35, 32, 31, 31, 28],\n    [13, 14, 20, 24, 20, 24, 24, 40, 35, 41, 43, 50],\n    [18, 21, 18, 21, 16, 14, 13, 18, 17, 16, 19, 23],\n])\n\nfig = go.Figure()\n\nfor i in range(0, 4):\n    fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines',\n        name=labels[i],\n        line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,\n    ))\n\n    # endpoints\n    fig.add_trace(go.Scatter(\n        x=[x_data[i][0], x_data[i][-1]],\n        y=[y_data[i][0], y_data[i][-1]],\n        mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n    plot_bgcolor='white'\n)\n\nannotations = []\n\n# Adding labels\nfor y_trace, label, color in zip(y_data, labels, colors):\n    # labeling the left_side of the plot\n    annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],\n                                  xanchor='right', yanchor='middle',\n                                  text=label + ' {}%'.format(y_trace[0]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n    # labeling the right_side of the plot\n    annotations.append(dict(xref='paper', x=0.95, y=y_trace[11],\n                                  xanchor='left', yanchor='middle',\n                                  text='{}%'.format(y_trace[11]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Main Source for News',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n# Source\nannotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n                              xanchor='center', yanchor='top',\n                              text='Source: PewResearch Center & ' +\n                                   'Storytelling with data',\n                              font=dict(family='Arial',\n                                        size=12,\n                                        color='rgb(150,150,150)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Dendrogram with Custom Orientation and Labels\nDESCRIPTION: Creates a dendrogram with left orientation and custom labels for each data point. Shows how to customize the presentation of the hierarchical clustering visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dendrogram.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nX = np.random.rand(10, 12)\nnames = ['Jack', 'Oxana', 'John', 'Chelsea', 'Mark', 'Alice', 'Charlie', 'Rob', 'Lisa', 'Lily']\nfig = ff.create_dendrogram(X, orientation='left', labels=names)\nfig.update_layout(width=800, height=800)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Cycling Default Marker Symbols in Templates\nDESCRIPTION: This snippet creates a Template with a cycling default for scatter trace markers. As more traces are added, the properties cycle through the defined list of default properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nsymbol_template = go.layout.Template()\nsymbol_template.data.scatter = [\n    go.Scatter(marker=dict(symbol=\"diamond\", size=10)),\n    go.Scatter(marker=dict(symbol=\"square\", size=10)),\n    go.Scatter(marker=dict(symbol=\"circle\", size=10)),\n]\n\nfig = go.Figure()\nfig.update_layout(template=symbol_template)\nfig.add_scatter(y=[1, 2, 3], mode=\"markers\", name=\"first\")\nfig.add_scatter(y=[2, 3, 4], mode=\"markers\", name=\"second\")\nfig.add_scatter(y=[3, 4, 5], mode=\"markers\", name=\"third\")\nfig.add_scatter(y=[4, 5, 6], mode=\"markers\", name=\"forth\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Title Position and Styling\nDESCRIPTION: Shows how to set axis title position using standoff attribute and customize title appearance. Creates a scatter plot with angled tick labels and styled axis titles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    mode = \"lines+markers\",\n    y = [4, 1, 3],\n    x = [\"December\", \"January\", \"February\"]))\n\nfig.update_xaxes(\n        tickangle = 90,\n        title_text = \"Month\",\n        title_font = {\"size\": 20},\n        title_standoff = 25)\n\nfig.update_yaxes(\n        title_text = \"Temperature\",\n        title_standoff = 25)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Grouping Legend Items in Plotly Graph Objects\nDESCRIPTION: This snippet shows how to group legend items using the 'legendgroup' attribute and add group titles with 'legendgrouptitle_text'. It creates four scatter plots grouped into two legend groups.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 1, 3],\n    legendgroup=\"group\",  # this can be any string, not just \"group\"\n    legendgrouptitle_text=\"First Group Title\",\n    name=\"first legend group\",\n    mode=\"markers\",\n    marker=dict(color=\"Crimson\", size=10)\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 2, 2],\n    legendgroup=\"group\",\n    name=\"first legend group - average\",\n    mode=\"lines\",\n    line=dict(color=\"Crimson\")\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 9, 2],\n    legendgroup=\"group2\",\n    legendgrouptitle_text=\"Second Group Title\",\n    name=\"second legend group\",\n    mode=\"markers\",\n    marker=dict(color=\"MediumPurple\", size=10)\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[5, 5, 5],\n    legendgroup=\"group2\",\n    name=\"second legend group - average\",\n    mode=\"lines\",\n    line=dict(color=\"MediumPurple\")\n))\n\nfig.update_layout(title=dict(text=\"Try Clicking on the Legend Items!\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hover Templates with Mixed Period Data in Plotly\nDESCRIPTION: This example shows how to create hover templates for mixed period data (quarterly and monthly) using Plotly. It demonstrates the use of xhoverformat and the %{xother} hover-template directive for controlling the display of X values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=[\"2020-01-01\", \"2020-04-01\", \"2020-07-01\"],\n    y=[1000, 1500, 1700],\n    xperiod=\"M3\",\n    xperiodalignment=\"middle\",\n    xhoverformat=\"Q%q\",\n    hovertemplate=\"%{y}%{_xother}\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[\"2020-01-01\", \"2020-02-01\", \"2020-03-01\",\n      \"2020-04-01\", \"2020-05-01\", \"2020-06-01\",\n      \"2020-07-01\", \"2020-08-01\", \"2020-09-01\"],\n    y=[1100,1050,1200,1300,1400,1700,1500,1400,1600],\n    xperiod=\"M1\",\n    xperiodalignment=\"middle\",\n    hovertemplate=\"%{y}%{_xother}\"\n))\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Values on Density Heatmaps\nDESCRIPTION: This code shows how to display the count values as text on each bin of a density heatmap using the text_auto parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", text_auto=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Percentage-based Error Bars\nDESCRIPTION: Demonstrates how to create error bars that are calculated as a percentage of the y-value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=dict(\n            type='percent', # value of error bar given as percentage of y value\n            value=50,\n            visible=True)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Embedding a Dash App with 3D Scatter Plot\nDESCRIPTION: This snippet embeds a Dash application displaying a 3D scatter plot using an IFrame. It imports `IFrame` from `IPython.display` and uses it to display a Dash app hosted externally.  This requires `IPython` to be installed and is intended for environments like Jupyter notebooks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-scatter-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + '3d-scatter-plots', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Controlling Facet Spacing - Python\nDESCRIPTION: This snippet illustrates how to control the spacing between facets in a facet plot created with Plotly Express. The spacing is adjusted for better visualization with specific parameter settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent == 'Africa'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", facet_col=\"country\", facet_col_wrap=7, facet_row_spacing=0.04, facet_col_spacing=0.04, height=600, width=800, title=\"Life Expectancy in Africa\")\nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[-1]))\nfig.update_yaxes(showticklabels=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Click Event Documentation\nDESCRIPTION: Shows how to access help documentation for the click event handler in Plotly FigureWidget. Creates a basic scatter plot and displays the documentation for the on_click method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/click-events.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nf = go.FigureWidget([go.Scatter()])\nhelp(f.data[0].on_click)\n```\n\n----------------------------------------\n\nTITLE: Gauge Chart with Steps, Threshold, and Delta\nDESCRIPTION: This snippet extends the basic gauge chart to include steps, thresholds, and delta indicators. It illustrates the boundaries for a target value and highlights when the actual value crosses these defined thresholds.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/gauge-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    domain = {'x': [0, 1], 'y': [0, 1]},\n    value = 450,\n    mode = \"gauge+number+delta\",\n    title = {'text': \"Speed\"},\n    delta = {'reference': 380},\n    gauge = {'axis': {'range': [None, 500]},\n             'steps' : [\n                 {'range': [0, 250], 'color': \"lightgray\"},\n                 {'range': [250, 400], 'color': \"gray\"}],\n             'threshold' : {'line': {'color': \"red\", 'width': 4}, 'thickness': 0.75, 'value': 490}}))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Stacked Area Chart with Normalized Values in Python\nDESCRIPTION: This example demonstrates a stacked area chart with normalization, using the 'groupnorm' parameter to display percentage values, allowing the viewer to analyze the proportional contributions across groups.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['Winter', 'Spring', 'Summer', 'Fall']\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x, y=[40, 20, 30, 40],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(184, 247, 212)'),\n    stackgroup='one',\n    groupnorm='percent' # sets the normalization for the sum of the stackgroup\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[50, 70, 40, 60],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(111, 231, 219)'),\n    stackgroup='one'\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[70, 80, 60, 70],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(127, 166, 238)'),\n    stackgroup='one'\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[100, 100, 100, 100],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(131, 90, 241)'),\n    stackgroup='one'\n))\n\nfig.update_layout(\n    showlegend=True,\n    xaxis_type='category',\n    yaxis=dict(\n        type='linear',\n        range=[1, 100],\n        ticksuffix='%'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Shape Controls in Plotly Python\nDESCRIPTION: Creates a scatter plot with buttons to toggle visibility of circular shapes highlighting different clusters. Uses the relayout method to update shape definitions in the layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Generate dataset\nimport numpy as np\nnp.random.seed(1)\n\nx0 = np.random.normal(2, 0.4, 400)\ny0 = np.random.normal(2, 0.4, 400)\nx1 = np.random.normal(3, 0.6, 600)\ny1 = np.random.normal(6, 0.4, 400)\nx2 = np.random.normal(4, 0.2, 200)\ny2 = np.random.normal(4, 0.4, 200)\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(\n    go.Scatter(\n        x=x0,\n        y=y0,\n        mode=\"markers\",\n        marker=dict(color=\"DarkOrange\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x1,\n        y=y1,\n        mode=\"markers\",\n        marker=dict(color=\"Crimson\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x2,\n        y=y2,\n        mode=\"markers\",\n        marker=dict(color=\"RebeccaPurple\")\n    )\n)\n\n# Add buttons that add shapes\ncluster0 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x0), y0=min(y0),\n                            x1=max(x0), y1=max(y0),\n                            line=dict(color=\"DarkOrange\"))]\ncluster1 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x1), y0=min(y1),\n                            x1=max(x1), y1=max(y1),\n                            line=dict(color=\"Crimson\"))]\ncluster2 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x2), y0=min(y2),\n                            x1=max(x2), y1=max(y2),\n                            line=dict(color=\"RebeccaPurple\"))]\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            buttons=[\n                dict(label=\"None\",\n                     method=\"relayout\",\n                     args=[\"shapes\", []]),\n                dict(label=\"Cluster 0\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster0]),\n                dict(label=\"Cluster 1\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster1]),\n                dict(label=\"Cluster 2\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster2]),\n                dict(label=\"All\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster0 + cluster1 + cluster2])\n            ],\n        )\n    ]\n)\n\n# Update remaining layout properties\nfig.update_layout(\n    title_text=\"Highlight Clusters\",\n    showlegend=False,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Torus Trisurf Plot in Python\nDESCRIPTION: Creates a 3D torus surface plot using Plotly's figure factory and Delaunay triangulation with trigonometric coordinate generation\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/trisurf.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(0, 2*np.pi, 20)\nv = np.linspace(0, 2*np.pi, 20)\nu,v = np.meshgrid(u,v)\nu = u.flatten()\nv = v.flatten()\n\nx = (3 + (np.cos(v)))*np.cos(u)\ny = (3 + (np.cos(v)))*np.sin(u)\nz = np.sin(v)\n\npoints2D = np.vstack([u,v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\nfig = ff.create_trisurf(x=x, y=y, z=z,\n                         simplices=simplices,\n                         title=dict(text=\"Torus\"), aspectratio=dict(x=1, y=1, z=0.3))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sized Subplot with Titles - Python\nDESCRIPTION: This snippet demonstrates the use of the specs argument in make_subplots to customize the layout of subplots, including shared subplot titles and specifying the number of grid columns a subplot should occupy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{}, {}],\n           [{\"colspan\": 2}, None]],\n    subplot_titles=(\"First Subplot\",\"Second Subplot\", \"Third Subplot\"))\n\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2]),\n                 row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2]),\n                 row=1, col=2)\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[2, 1, 2]),\n                 row=2, col=1)\n\nfig.update_layout(showlegend=False, title_text=\"Specs with Subplot Title\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Parallel Categories with Graph Objects\nDESCRIPTION: Demonstrates creating a parallel categories diagram using Plotly Graph Objects to visualize relationships between hair color, eye color, and sex. Includes interactive dimension reordering.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Parcats(\n    dimensions=[\n        {'label': 'Hair',\n         'values': ['Black', 'Black', 'Black', 'Brown', 'Brown', 'Brown', 'Red', 'Brown']},\n        {'label': 'Eye',\n         'values': ['Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Blue', 'Blue', 'Blue']},\n        {'label': 'Sex',\n         'values': ['Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Male', 'Male']}]\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Raw Sizemode for 3D Cone Plots in Plotly\nDESCRIPTION: This snippet demonstrates the 'raw' sizemode (introduced in v5.21) for cone sizing. It loads cone plot data from an external CSV, configures custom coloring with the 'Portland' colorscale, and adds hover information with custom text.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/cone-plot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/cone_plot_data.csv\"\n)\n\nfig = go.Figure(\n    data=go.Cone(\n        x=df[\"x\"],\n        y=df[\"y\"],\n        z=df[\"z\"],\n        u=df[\"u\"],\n        v=df[\"v\"],\n        w=df[\"w\"],\n        sizemode=\"raw\",\n        sizeref=0.1,\n        colorscale=\"Portland\",\n        cmin=0,\n        cmax=80,\n        hoverinfo=\"u+v+w+text\",\n        text=\"-> wind <-\",\n    ),\n    layout=dict(\n        width=900, height=600, scene=dict(camera=dict(eye=dict(x=1.2, y=0, z=0.6)))\n    ),\n)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating OHLC Chart with Datetime Objects in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create an OHLC chart using datetime objects for the x-axis. It manually creates lists for open, high, low, close data and corresponding dates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ohlc-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfrom datetime import datetime\n\nopen_data = [33.0, 33.3, 33.5, 33.0, 34.1]\nhigh_data = [33.1, 33.3, 33.6, 33.2, 34.8]\nlow_data = [32.7, 32.7, 32.8, 32.6, 32.8]\nclose_data = [33.0, 32.9, 33.3, 33.1, 33.1]\ndates = [datetime(year=2013, month=10, day=10),\n         datetime(year=2013, month=11, day=10),\n         datetime(year=2013, month=12, day=10),\n         datetime(year=2014, month=1, day=10),\n         datetime(year=2014, month=2, day=10)]\n\nfig = go.Figure(data=[go.Ohlc(x=dates,\n                          open=open_data, high=high_data,\n                          low=low_data, close=close_data)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Streamline with Source Point Plot\nDESCRIPTION: Creates a more complex streamline plot that includes a source point. The example shows how to combine streamlines with scatter plots to visualize flow from a source point in a vector field.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/streamline-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nN = 50\nx_start, x_end = -2.0, 2.0\ny_start, y_end = -1.0, 1.0\nx = np.linspace(x_start, x_end, N)\ny = np.linspace(y_start, y_end, N)\nX, Y = np.meshgrid(x, y)\nsource_strength = 5.0\nx_source, y_source = -1.0, 0.0\n\n# Compute the velocity field on the mesh grid\nu = (source_strength/(2*np.pi) *\n     (X - x_source)/((X - x_source)**2 + (Y - y_source)**2))\nv = (source_strength/(2*np.pi) *\n     (Y - y_source)/((X - x_source)**2 + (Y - y_source)**2))\n\n# Create streamline figure\nfig = ff.create_streamline(x, y, u, v,\n                           name='streamline')\n\n# Add source point\nfig.add_trace(go.Scatter(x=[x_source], y=[y_source],\n                          mode='markers',\n                          marker_size=14,\n                          name='source point'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Bubble Chart with Colorscale\nDESCRIPTION: Creates a bubble chart with continuous color scale based on data values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter(\n    x=[1, 3.2, 5.4, 7.6, 9.8, 12.5],\n    y=[1, 3.2, 5.4, 7.6, 9.8, 12.5],\n    mode='markers',\n    marker=dict(\n        color=[120, 125, 130, 135, 140, 145],\n        size=[15, 30, 55, 70, 90, 110],\n        showscale=True\n        )\n)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Scatter Plot Lines Using update_traces() with Plotly Express\nDESCRIPTION: This example shows how to customize trend lines in a Plotly Express scatter plot by making them dotted. Uses `update_traces()` with a selector to target scatter lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 facet_col=\"species\", trendline=\"ols\", title=\"Using update_traces() With Plotly Express Figures\")\n\nfig.update_traces(\n    line=dict(dash=\"dot\", width=4),\n    selector=dict(type=\"scatter\", mode=\"lines\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Polar Charts with Different Directions using Plotly Graph Objects in Python\nDESCRIPTION: This example shows how to create polar charts with different directions (clockwise and counterclockwise) using Plotly Graph Objects and subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type': 'polar'},    {'type': 'polar'}]])\n\nr = [1,2,3,4,5]\ntheta = [0,90,180,360,0]\n\nfig.add_trace(go.Scatterpolar(), 1, 1)\nfig.add_trace(go.Scatterpolar(), 1, 2)\n\n# Same data for the two Scatterpolar plots, we will only change the direction in the layout\nfig.update_traces(r= r, theta=theta,\n                  mode=\"lines+markers\", line_color='indianred',\n                  marker=dict(color='lightslategray', size=8, symbol='square'))\nfig.update_layout(\n    showlegend = False,\n    polar = dict(\n      radialaxis_tickfont_size = 8,\n      angularaxis = dict(\n        tickfont_size=8,\n        rotation=90, # start position of angular axis\n        direction=\"counterclockwise\"\n      )\n    ),\n    polar2 = dict(\n      radialaxis_tickfont_size = 8,\n      angularaxis = dict(\n        tickfont_size = 8,\n        rotation = 90,\n        direction = \"clockwise\"\n      ),\n    ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating County Choropleth Maps Using Figure Factory - Python\nDESCRIPTION: This snippet shows how to create county-level choropleth maps using the Plotly figure factory. It involves processing FIPS codes and visualizing unemployment data across US counties with a specified colorscale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv')\ndf_sample['State FIPS Code'] = df_sample['State FIPS Code'].apply(lambda x: str(x).zfill(2))\ndf_sample['County FIPS Code'] = df_sample['County FIPS Code'].apply(lambda x: str(x).zfill(3))\ndf_sample['FIPS'] = df_sample['State FIPS Code'] + df_sample['County FIPS Code']\n\ncolorscale = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"]\nendpts = list(np.linspace(1, 12, len(colorscale) - 1))\nfips = df_sample['FIPS'].tolist()\nvalues = df_sample['Unemployment Rate (%)'].tolist()\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['usa'],\n    binning_endpoints=endpts, colorscale=colorscale,\n    show_state_data=False,\n    show_hover=True,\n    asp = 2.9,\n    title_text = 'USA by Unemployment %',\n    legend_title = '% unemployed'\n)\nfig.layout.template = None\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Rectangles Relative to Axis Data\nDESCRIPTION: Demonstrates creating filled and unfilled rectangles positioned relative to axis data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1.5, 4.5],\n    y=[0.75, 0.75],\n    text=[\"Unfilled Rectangle\", \"Filled Rectangle\"],\n    mode=\"text\",\n))\n\n# Set axes properties\nfig.update_xaxes(range=[0, 7], showgrid=False)\nfig.update_yaxes(range=[0, 3.5])\n\n# Add shapes\nfig.add_shape(type=\"rect\",\n    x0=1, y0=1, x1=2, y1=3,\n    line=dict(color=\"RoyalBlue\"),\n)\nfig.add_shape(type=\"rect\",\n    x0=3, y0=1, x1=6, y1=2,\n    line=dict(\n        color=\"RoyalBlue\",\n        width=2,\n    ),\n    fillcolor=\"LightSkyBlue\",\n)\nfig.update_shapes(dict(xref='x', yref='y'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled Sankey Diagram with Custom Hover Mode\nDESCRIPTION: Creates a styled Sankey diagram with custom hover mode and dark theme. Includes value formatting and custom layout settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport urllib, json\n\nurl = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'\nresponse = urllib.request.urlopen(url)\ndata = json.loads(response.read())\n\nfig = go.Figure(data=[go.Sankey(\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\",\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(color = \"black\", width = 0.5),\n      label =  data['data'][0]['node']['label'],\n      color =  data['data'][0]['node']['color']\n    ),\n    link = dict(\n      source =  data['data'][0]['link']['source'],\n      target =  data['data'][0]['link']['target'],\n      value =  data['data'][0]['link']['value'],\n      label =  data['data'][0]['link']['label']\n  ))])\n\nfig.update_layout(\n    hovermode = 'x',\n    title=dict(text=\"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>\"),\n    font=dict(size = 10, color = 'white'),\n    plot_bgcolor='black',\n    paper_bgcolor='black'\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Bar Base Using Plotly Graph Objects in Python\nDESCRIPTION: This snippet demonstrates how to adjust the base level of bars using plotly.graph_objects. By setting the 'base' property, bars can be anchored at different levels, useful for showing net changes from a starting value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nyears = ['2016','2017','2018']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=years, y=[500, 600, 700],\n                base=[-500,-600,-700],\n                marker_color='crimson',\n                name='expenses'))\nfig.add_trace(go.Bar(x=years, y=[300, 400, 700],\n                base=0,\n                marker_color='lightslategrey',\n                name='revenue'\n                ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Faceted Scatter Plot with Box Plot Marginal (Column)\nDESCRIPTION: Creates a faceted scatter plot by day with box plot marginals on x-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"sex\", facet_col=\"day\",\n                  marginal_x=\"box\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Gauge Chart with Plotly\nDESCRIPTION: This snippet demonstrates how to create a basic radial gauge chart using Plotly. The chart displays a single value to estimate progress toward a goal. The default attributes are used for simplicity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/gauge-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"gauge+number\",\n    value = 270,\n    domain = {'x': [0, 1], 'y': [0, 1]},\n    title = {'text': \"Speed\"}))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Normalized Histogram with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a normalized histogram using the `histnorm` parameter. It normalizes the histogram to represent probability density, where the area under the histogram equals 1.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", histnorm='probability density')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Polar Plot with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a basic scatter polar plot using Plotly Express. It uses the wind dataset to plot frequency against direction.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.wind()\nfig = px.scatter_polar(df, r=\"frequency\", theta=\"direction\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Mapbox Plot with USGS Imagery Tiles in Python\nDESCRIPTION: This snippet shows how to create a scatter mapbox plot using USGS imagery tiles as a base map. It demonstrates the use of custom tile layers with the 'layout.mapbox.layers' parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-map-layers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nus_cities = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\")\n\nimport plotly.express as px\n\nfig = px.scatter_mapbox(us_cities, lat=\"lat\", lon=\"lon\", hover_name=\"City\", hover_data=[\"State\", \"Population\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=3, height=300)\nfig.update_layout(\n    mapbox_style=\"white-bg\",\n    mapbox_layers=[\n        {\n            \"below\": 'traces',\n            \"sourcetype\": \"raster\",\n            \"sourceattribution\": \"United States Geological Survey\",\n            \"source\": [\n                \"https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}\"\n            ]\n        }\n      ])\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Orientation Inside Pie Sectors in Python\nDESCRIPTION: Demonstrates how to control text orientation inside pie sectors using the insidetextorientation attribute. Options include 'auto', 'horizontal', 'radial', and 'tangential' to position text in different ways.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial'\n                            )])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Asymmetric Error Bars with Graph Objects\nDESCRIPTION: Shows how to create a scatter plot with asymmetric error bars using different arrays for upper and lower error values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=dict(\n            type='data',\n            symmetric=False,\n            array=[0.1, 0.2, 0.1, 0.1],\n            arrayminus=[0.2, 0.4, 1, 0.2])\n        ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Rangemode in Plotly Express\nDESCRIPTION: This snippet demonstrates how to configure the 'rangemode' for axes using Plotly Express. It highlights different modes such as 'normal', 'tozero', and 'nonnegative' for adjusting the calculated range.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_xaxes(rangemode=\"tozero\")\nfig.update_yaxes(rangemode=\"tozero\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hiding Legend Items in Plotly Graph Objects\nDESCRIPTION: This example demonstrates how to hide specific legend items by setting 'showlegend=False' for a trace. It creates two scatter plots but only shows one in the legend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n    showlegend=False\n))\n\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n))\n\nfig.update_layout(showlegend=True)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing kNN Probability Estimates with Contour Plot\nDESCRIPTION: Creates a contour plot showing probability estimates across the feature space using kNN classifier. Uses numpy meshgrid to create prediction surface.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-knn.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\nmesh_size = .02\nmargin = 0.25\n\n# Load and split data\nX, y = make_moons(noise=0.3, random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y.astype(str), test_size=0.25, random_state=0)\n\n# Create a mesh grid on which we will run our model\nx_min, x_max = X[:, 0].min() - margin, X[:, 0].max() + margin\ny_min, y_max = X[:, 1].min() - margin, X[:, 1].max() + margin\nxrange = np.arange(x_min, x_max, mesh_size)\nyrange = np.arange(y_min, y_max, mesh_size)\nxx, yy = np.meshgrid(xrange, yrange)\n\n# Create classifier, run predictions on grid\nclf = KNeighborsClassifier(15, weights='uniform')\nclf.fit(X, y)\nZ = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]\nZ = Z.reshape(xx.shape)\n\n\n# Plot the figure\nfig = go.Figure(data=[\n    go.Contour(\n        x=xrange,\n        y=yrange,\n        z=Z,\n        colorscale='RdBu'\n    )\n])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Pandas Instead of Plotly Transform\nDESCRIPTION: Shows how to filter a DataFrame in Pandas as a replacement for the removed 'filter' transform functionality in Plotly.py.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v6-changes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf_2007 = df[df['year'] == 2007]\n```\n\n----------------------------------------\n\nTITLE: Custom Opacity Scale for Volume Plots in Python\nDESCRIPTION: Demonstrates how to create a custom opacity scale for volume plots using Plotly. It maps scalar values to relative opacity values, allowing for specific ranges to be made transparent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-volume.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nX, Y, Z = np.mgrid[-1:1:30j, -1:1:30j, -1:1:30j]\nvalues =    np.sin(np.pi*X) * np.cos(np.pi*Z) * np.sin(np.pi*Y)\n\nfig = go.Figure(data=go.Volume(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=-0.5,\n    isomax=0.5,\n    opacity=0.1, # max opacity\n    opacityscale=[[-0.5, 1], [-0.2, 0], [0.2, 0], [0.5, 1]],\n    surface_count=21,\n    colorscale='RdBu'\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Default Clustergram with Dash Bio\nDESCRIPTION: Demonstrates how to create a basic clustergram using Dash Bio component with brain cancer dataset. The code loads data from a CSV file and creates a clustergram with default settings, including column and row labels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-clustergram.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport dash_bio\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv')\n\ndash_bio.Clustergram(\n    data=df,\n    column_labels=list(df.columns.values),\n    row_labels=list(df.index),\n    height=800,\n    width=700\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line and Bar Chart - Python Plotly Graph Objects\nDESCRIPTION: This code snippet demonstrates how to create both a line chart and a bar chart using Plotly's graph objects. It initializes a figure and adds line and bar traces representing different datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/graphing-multiple-chart-types.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=[0, 1, 2, 3, 4, 5],\n        y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]\n    ))\n\nfig.add_trace(\n    go.Bar(\n        x=[0, 1, 2, 3, 4, 5],\n        y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]\n    ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Explicit Color Sequence Bar Chart\nDESCRIPTION: Creates a bar chart with an explicitly defined color sequence using CSS color values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.bar(df, y=\"continent\", x=\"pop\", color=\"continent\", orientation=\"h\", hover_name=\"country\",\n             color_discrete_sequence=[\"red\", \"green\", \"blue\", \"goldenrod\", \"magenta\"],\n             title=\"Explicit color sequence\"\n            )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Size and Color for Funnel in Python\nDESCRIPTION: In this example, the text position and information on the funnel are customized, demonstrating how to adjust the appearance of the funnel using properties like opacity and marker settings. It requires the plotly library's graph_objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\nfig = go.Figure(go.Funnel(\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"Finalized\"],\n    x = [39, 27.4, 20.6, 11, 2],\n    textposition = \"inside\",\n    textinfo = \"value+percent initial\",\n    opacity = 0.65, marker = {\"color\": [\"deepskyblue\", \"lightsalmon\", \"tan\", \"teal\", \"silver\"],\n    \"line\": {\"width\": [4, 2, 2, 3, 1, 1], \"color\": [\"wheat\", \"wheat\", \"blue\", \"wheat\", \"wheat\"]}},\n    connector = {\"line\": {\"color\": \"royalblue\", \"dash\": \"dot\", \"width\": 3}})\n    )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart with Color and Smoker Category\nDESCRIPTION: Creates a grouped bar chart showing total bill by sex and smoker status\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"sex\", y=\"total_bill\", color=\"smoker\", barmode=\"group\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Treemap with Rounded Corners - Python\nDESCRIPTION: This example illustrates how to update Treemap sectors to have rounded corners, a new feature introduced in version 5.12 of Plotly. The configuration demonstrates a simple adjustment of the corner radius in sector visuals.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.treemap(\n    names = [\"Eve\",\"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"]\n)\nfig.update_traces(marker=dict(cornerradius=5))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled Error Bars with Theoretical Curve\nDESCRIPTION: Demonstrates how to create a plot combining a theoretical curve with measured data points, featuring customized error bars with specific colors and styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nx_theo = np.linspace(-4, 4, 100)\nsincx = np.sinc(x_theo)\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x_theo, y=sincx,\n    name='sinc(x)'\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y,\n    mode='markers',\n    name='measured',\n    error_y=dict(\n        type='constant',\n        value=0.1,\n        color='purple',\n        thickness=1.5,\n        width=3,\n    ),\n    error_x=dict(\n        type='constant',\n        value=0.2,\n        color='purple',\n        thickness=1.5,\n        width=3,\n    ),\n    marker=dict(color='purple', size=8)\n))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Marker-Specific Opacity\nDESCRIPTION: Demonstrates how to set opacity specifically for markers while maintaining other trace properties. This approach is recommended for visualizing density in scatter plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Generate example data\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=6, size=(500,))\n\n# Build figure\nfig = go.Figure()\n\n# Add scatter trace with medium sized markers\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=x,\n        y=y,\n        marker=dict(\n            color='LightSkyBlue',\n            size=20,\n            opacity=0.5,\n            line=dict(\n                color='MediumPurple',\n                width=2\n            )\n        ),\n        showlegend=False\n    )\n)\n\n\n# Add trace with large markers\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=[2, 2],\n        y=[4.25, 4.75],\n        marker=dict(\n            color='LightSkyBlue',\n            size=80,\n            opacity=0.5,\n            line=dict(\n                color='MediumPurple',\n                width=8\n            )\n        ),\n        showlegend=False\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Heatmap with Categorical Axis Labels using Graph Objects\nDESCRIPTION: This example demonstrates creating a heatmap with categorical axis labels using Plotly graph objects.  It initializes a `go.Heatmap` object with `x` and `y` values for the axis labels, and sets `hoverongaps=False` to hide hovertext for missing values. The z data represents the heatmap values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Heatmap(\n                   z=[[1, None, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],\n                   x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n                   y=['Morning', 'Afternoon', 'Evening'],\n                   hoverongaps = False))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines on Maps Using Scattermap Traces\nDESCRIPTION: This example demonstrates how to use go.Scattermap to create lines on maps with Graph Objects. The code creates multiple traces with mode='markers+lines' to display both markers at data points and lines connecting them, and configures the map layout including center position and zoom level.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-tile-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    mode = \"markers+lines\",\n    lon = [10, 20, 30],\n    lat = [10, 20,30],\n    marker = {'size': 10}))\n\nfig.add_trace(go.Scattermap(\n    mode = \"markers+lines\",\n    lon = [-50, -60,40],\n    lat = [30, 10, -20],\n    marker = {'size': 10}))\n\nfig.update_layout(\n    margin ={'l':0,'t':0,'b':0,'r':0},\n    map = {\n        'center': {'lon': 10, 'lat': 10},\n        'style': \"open-street-map\",\n        'center': {'lon': -20, 'lat': -20},\n        'zoom': 1})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Variable ECDF Plot\nDESCRIPTION: Shows how to create an ECDF plot with multiple variables using wide-form data support.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=[\"total_bill\", \"tip\"])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Comparing Image Filtering Results with Facet Plots in Plotly\nDESCRIPTION: Shows how to use facets to compare multiple images of equal shape, in this case images processed with different Gaussian blur sigma values. The example also demonstrates customizing facet titles to show the parameter values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nfrom skimage import data, filters, img_as_float\nimg = data.camera()\nsigmas = [1, 2, 4]\nimg_sequence = [filters.gaussian(img, sigma=sigma) for sigma in sigmas]\nfig = px.imshow(np.array(img_sequence), facet_col=0, binary_string=True,\n                labels={'facet_col':'sigma'})\n# Set facet titles\nfor i, sigma in enumerate(sigmas):\n    fig.layout.annotations[i]['text'] = 'sigma = %d' %sigma\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Slider Configuration for Year Selection\nDESCRIPTION: Defines a slider configuration with transitions, styling, and animation steps for navigating through different years in the dataset\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsliders_dict = {\n    \"active\": 0,\n    \"yanchor\": \"top\",\n    \"xanchor\": \"left\",\n    \"currentvalue\": {\n        \"font\": {\"size\": 20},\n        \"prefix\": \"Year:\",\n        \"visible\": True,\n        \"xanchor\": \"right\"\n    },\n    \"transition\": {\"duration\": 300, \"easing\": \"cubic-in-out\"},\n    \"pad\": {\"b\": 10, \"t\": 50},\n    \"len\": 0.9,\n    \"x\": 0.1,\n    \"y\": 0,\n    \"steps\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Traces to Empty Figure\nDESCRIPTION: Shows how to create an empty figure and add traces using add_trace() method with graph objects\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=[1, 2, 3], y=[1, 3, 2]))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Range for Log Plot with Graph Objects\nDESCRIPTION: Shows how to set axis ranges using Graph Objects, demonstrating the difference in range specification for logarithmic axes using exponents.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/log-plot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(mode=\"markers\", x=df[\"gdpPercap\"], y=df[\"lifeExp\"] ))\n\nfig.update_xaxes(type=\"log\", range=[0,5]) # log range: 10^0=1, 10^5=100000\nfig.update_yaxes(range=[0,100]) # linear range\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Animated Data Frames and Slider Steps\nDESCRIPTION: Dynamically creates data frames for each year and continent, preparing visualization data and slider navigation steps\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# make frames\nfor year in years:\n    frame = {\"data\": [], \"name\": str(year)}\n    for continent in continents:\n        dataset_by_year = dataset[dataset[\"year\"] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[\n            dataset_by_year[\"continent\"] == continent]\n\n        data_dict = {\n            \"x\": list(dataset_by_year_and_cont[\"lifeExp\"]),\n            \"y\": list(dataset_by_year_and_cont[\"gdpPercap\"]),\n            \"mode\": \"markers\",\n            \"text\": list(dataset_by_year_and_cont[\"country\"]),\n            \"marker\": {\n                \"sizemode\": \"area\",\n                \"sizeref\": 200000,\n                \"size\": list(dataset_by_year_and_cont[\"pop\"])\n            },\n            \"name\": continent\n        }\n        frame[\"data\"].append(data_dict)\n\n    fig_dict[\"frames\"].append(frame)\n```\n\n----------------------------------------\n\nTITLE: Customizing Tick Placement Between Categories - Plotly Python\nDESCRIPTION: This snippet demonstrates how to position ticks and gridlines outside of category bars on a bar chart. It updates the x-axis settings to customize the appearance of ticks and gridlines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Bar(\n    x = [\"apples\", \"oranges\", \"pears\"],\n    y = [1, 2, 3]\n))\n\nfig.update_xaxes(\n    showgrid=True,\n    ticks=\"outside\",\n    tickson=\"boundaries\",\n    ticklen=20\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing D'Agostino's K² Test with Plotly Visualization\nDESCRIPTION: Performs D'Agostino's K² test for normality and creates a table visualization of results using Plotly. The code calculates test statistics and p-value, interpreting results against a 5% significance level.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import normaltest\n\nstat, p = normaltest(gauss_data)\n\n# interpret\nalpha = 0.05\nif p > alpha:\n    msg = 'Sample looks Gaussian (fail to reject H0)'\nelse:\n    msg = 'Sample does not look Gaussian (reject H0)'\n\nresult_mat = [\n    ['Length of the sample data', 'Test Statistic', 'p-value', 'Comments'],\n    [len(gauss_data), stat, p, msg]\n]\n\nnormt_table = ff.create_table(result_mat)\nnormt_table['data'][0].colorscale=[[0, '#2a3f5f'],[1, '#ffffff']]\nnormt_table['layout']['height']=200\nnormt_table['layout']['margin']['t']=50\nnormt_table['layout']['margin']['b']=50\n\npy.iplot(normt_table, filename=\"D'Agostino-test-table\")\n```\n\n----------------------------------------\n\nTITLE: Generating Boy's Surface Trisurf Plot in Python\nDESCRIPTION: Creates a 3D Boy's surface plot using Plotly's figure factory and Delaunay triangulation with complex parametric coordinate generation\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/trisurf.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu=np.linspace(-np.pi/2, np.pi/2, 60)\nv=np.linspace(0, np.pi, 60)\nu,v=np.meshgrid(u,v)\nu=u.flatten()\nv=v.flatten()\n\nx = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.cos(2*u) + np.cos(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))\ny = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.sin(2*u) - np.sin(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))\nz = (3*(np.cos(v)*np.cos(v)))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))\n\npoints2D = np.vstack([u, v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\nfig = ff.create_trisurf(x=x, y=y, z=z,\n                         colormap=['rgb(50, 0, 75)', 'rgb(200, 0, 200)', '#c8dcc8'],\n                         show_colorbar=True,\n                         simplices=simplices,\n                         title=dict(text=\"Boy's Surface\"))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Z-Order Control\nDESCRIPTION: Demonstrates how to control the order of trace rendering using zorder parameter to specify which traces appear on top of others.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.data as data\n\ndf = data.gapminder()\n\ndf_europe = df[df['continent'] == 'Europe']\n\ntrace1 = go.Scatter(x=df_europe[df_europe['country'] == 'France']['year'],\n                    y=df_europe[df_europe['country'] == 'France']['lifeExp'],\n                    mode='lines+markers',\n                    zorder=3,\n                    name='France',\n                    marker=dict(size=15))\n\ntrace2 = go.Scatter(x=df_europe[df_europe['country'] == 'Germany']['year'],\n                    y=df_europe[df_europe['country'] == 'Germany']['lifeExp'],\n                    mode='lines+markers',\n                    zorder=1,\n                    name='Germany',\n                    marker=dict(size=15))\n\ntrace3 = go.Scatter(x=df_europe[df_europe['country'] == 'Spain']['year'],\n                    y=df_europe[df_europe['country'] == 'Spain']['lifeExp'],\n                    mode='lines+markers',\n                    zorder=2,\n                    name='Spain',\n                    marker=dict(size=15))\n\nlayout = go.Layout(title=dict(text='Life Expectancy in Europe Over Time'))\n\nfig = go.Figure(data=[trace1, trace2, trace3], layout=layout)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Background and Grid Colors in 3D Plots\nDESCRIPTION: Shows how to set custom background colors and grid colors for each axis plane. Includes configuration for background visibility and zero line colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-axes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nN = 50\nfig = go.Figure(data=[go.Mesh3d(x=(30*np.random.randn(N)),\n                   y=(25*np.random.randn(N)),\n                   z=(30*np.random.randn(N)),\n                   opacity=0.5,)])\n\n\n# xaxis.backgroundcolor is used to set background color\nfig.update_layout(scene = dict(\n                    xaxis = dict(\n                         backgroundcolor=\"rgb(200, 200, 230)\",\n                         gridcolor=\"white\",\n                         showbackground=True,\n                         zerolinecolor=\"white\",),\n                    yaxis = dict(\n                        backgroundcolor=\"rgb(230, 200,230)\",\n                        gridcolor=\"white\",\n                        showbackground=True,\n                        zerolinecolor=\"white\"),\n                    zaxis = dict(\n                        backgroundcolor=\"rgb(230, 230,200)\",\n                        gridcolor=\"white\",\n                        showbackground=True,\n                        zerolinecolor=\"white\",),),\n                    width=700,\n                    margin=dict(\n                    r=10, l=10,\n                    b=10, t=10)\n                  )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Log Plot with Plotly Express\nDESCRIPTION: Creates a scatter plot with logarithmic x-axis using Plotly Express. Uses the Gapminder dataset to plot GDP per capita against life expectancy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/log-plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\n\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", hover_name=\"country\", log_x=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Discrete Color Choropleth Map with Plotly Express\nDESCRIPTION: This snippet demonstrates using discrete colors in choropleth maps by setting the `color` parameter to a categorical column, like election winners. It illustrates the flexibility of Plotly Express in customizing map color schemes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\ngeojson = px.data.election_geojson()\n\nfig = px.choropleth_map(df, geojson=geojson, color=\"winner\",\n                           locations=\"district\", featureidkey=\"properties.district\",\n                           center={\"lat\": 45.5517, \"lon\": -73.7073},\n                           map_style=\"carto-positron\", zoom=9)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Case in Plotly Bar Charts\nDESCRIPTION: This example demonstrates how to modify text case using the textfont.textcase property in Plotly. It shows how to convert all text to uppercase in a horizontal bar chart displaying countries with highest life expectancy per continent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder()\n\ngrouped = df[df.year == 2007].loc[df[df.year == 2007].groupby('continent')['lifeExp'].idxmax()]\n\nfig = go.Figure(\n    data=go.Bar(\n        x=grouped['lifeExp'],\n        y=grouped['continent'],\n        text=grouped['country'],\n        orientation='h',\n        textfont=dict(\n            family=\"sans serif\",\n            size=14,\n            # Here we set textcase to \"upper.\n            # Set to lower\" for lowercase text, or \"word caps\" to capitalize the first letter of each word\n            textcase=\"upper\"\n\n        )\n    ),\n    layout=go.Layout(\n        title_text='Country with Highest Life Expectancy per Continent, 2007',\n        yaxis=dict(showticklabels=False)\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Positioning Circles Relative to Axis Data using Plotly\nDESCRIPTION: This code snippet demonstrates how to position circles relative to the axis data in a Plotly figure. It creates a figure with text labels and then adds two circles with specified positions, sizes, and colors. The first circle is unfilled, while the second is filled, showcasing different styling options for shapes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Create scatter trace of text labels\nfig.add_trace(go.Scatter(\n    x=[1.5, 3.5],\n    y=[0.75, 2.5],\n    text=[\"Unfilled Circle\",\n          \"Filled Circle\"],\n    mode=\"text\",\n))\n\n# Set axes properties\nfig.update_xaxes(range=[0, 4.5], zeroline=False)\nfig.update_yaxes(range=[0, 4.5])\n\n# Add circles\nfig.add_shape(type=\"circle\",\n    xref=\"x\", yref=\"y\",\n    x0=1, y0=1, x1=3, y1=3,\n    line_color=\"LightSeaGreen\",\n)\nfig.add_shape(type=\"circle\",\n    xref=\"x\", yref=\"y\",\n    fillcolor=\"PaleTurquoise\",\n    x0=3, y0=3, x1=4, y1=4,\n    line_color=\"LightSeaGreen\",\n)\n\n# Set figure size\nfig.update_layout(width=800, height=800)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tube Color and Diameter Variations\nDESCRIPTION: Creates a subplot of three streamtube visualizations showing how vector field direction affects tube color and diameter based on norm and divergence.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/streamtube-plot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\nx, y, z = np.mgrid[0:10, 0:10, 0:10]\nx = x.flatten()\ny = y.flatten()\nz = z.flatten()\n\nu = np.zeros_like(x)\nv = np.zeros_like(y)\nw = z**2\n\nfig = make_subplots(rows=1, cols=3, specs=[[{'is_3d': True}, {'is_3d': True}, {'is_3d':True}]])\n\nfig.add_trace(go.Streamtube(x=x, y=y, z=z, u=u, v=v, w=w), 1, 1)\nfig.add_trace(go.Streamtube(x=x, y=y, z=z, u=w, v=v, w=u), 1, 2)\nfig.add_trace(go.Streamtube(x=x, y=y, z=z, u=u, v=w, w=v), 1, 3)\n\nfig.update_layout(scene_camera_eye=dict(x=2, y=2, z=2),\n                  scene2_camera_eye=dict(x=2, y=2, z=2),\n                  scene3_camera_eye=dict(x=2, y=2, z=2))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Dendrogram with Color Threshold\nDESCRIPTION: Demonstrates how to create a dendrogram with a specified color threshold value of 1.5, which affects the coloring of clusters in the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dendrogram.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nX = np.random.rand(15, 10) # 15 samples, with 10 dimensions each\nfig = ff.create_dendrogram(X, color_threshold=1.5)\nfig.update_layout(width=800, height=500)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Choropleth Map for Multiple New England States\nDESCRIPTION: This snippet generates a choropleth map for multiple New England states, showcasing population data per county using a custom color scale and proper annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\nNE_states = ['Connecticut', 'Maine', 'Massachusetts', 'New Hampshire', 'Rhode Island', 'Vermont']\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')\ndf_sample_r = df_sample[df_sample['STNAME'].isin(NE_states)]\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\ncolorscale = [\n    'rgb(68.0, 1.0, 84.0)',\n    'rgb(66.0, 64.0, 134.0)',\n    'rgb(38.0, 130.0, 142.0)',\n    'rgb(63.0, 188.0, 115.0)',\n    'rgb(216.0, 226.0, 25.0)'\n]\n\nfig = ff.create_choropleth(\n    fips=fips, values=values,\n    scope=NE_states, county_outline={'color': 'rgb(255,255,255)', 'width': 0.5},\n    legend_title='Population per county'\n)\nfig.update_layout(\n    legend_x = 0,\n    annotations = {'x': -0.12, 'xanchor': 'left'}\n)\n\nfig.layout.template = None\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Symbols on Scatter Map in Python\nDESCRIPTION: This snippet demonstrates how to set different marker symbols on a scatter map, showcasing customization for visual representation using various map styles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    mode = \"markers+text+lines\",\n    lon = [-75, -80, -50], lat = [45, 20, -20],\n    marker = {'size': 20, 'symbol': [\"bus\", \"harbor\", \"airport\"]},\n    text = [\"Bus\", \"Harbor\", \"airport\"],textposition = \"bottom right\"))\n\nfig.update_layout(\n    map = {\n        'style': \"outdoors\", 'zoom': 0.7},\n    showlegend = False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Plotly Bar Chart in JupyterLab\nDESCRIPTION: Python code to create and display an interactive bar chart using Plotly Express in a JupyterLab notebook. It requires plotly.express to be installed and imported.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"b\", \"c\"], y=[1, 3, 2])\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"b\", \"c\"], y=[1, 3, 2])\n\nimport plotly.graph_objects as go\nfig_widget = go.FigureWidget(fig)\nfig_widget\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Scatter Plot with 1 Million Points using Plotly Graph Objects\nDESCRIPTION: This snippet demonstrates how to create a WebGL-based scatter plot with 1 million random points using Plotly's Graph Objects. It utilizes the go.Scattergl class for efficient rendering of large datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/performance.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nN = 1_000_000\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scattergl(\n        x = np.random.randn(N),\n        y = np.random.randn(N),\n        mode = 'markers',\n        marker = dict(\n            line = dict(\n                width = 1,\n                color = 'DarkSlateGrey')\n        )\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Facet Grids - Python\nDESCRIPTION: In this snippet, a histogram is created with row and column facets using Plotly Express. The data is categorized by time and day to visualize total bill against tip for different categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", y=\"tip\", color=\"sex\", facet_row=\"time\", facet_col=\"day\", category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"time\": [\"Lunch\", \"Dinner\"]})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bullet Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a basic bullet chart using Plotly's Indicator object. It includes a number, gauge, and delta, with the gauge shaped as a bullet.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bullet-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"number+gauge+delta\",\n    gauge = {'shape': \"bullet\"},\n    value = 220,\n    delta = {'reference': 300},\n    domain = {'x': [0, 1], 'y': [0, 1]},\n    title = {'text': \"Profit\"}))\nfig.update_layout(height = 250)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Sankey Diagram with Arrow Links in Plotly Python\nDESCRIPTION: This snippet demonstrates how to create a Sankey diagram with arrow links using Plotly in Python. The `arrowlen` attribute in the `link` dictionary is specified to create arrows between nodes. It requires the Plotly library and involves setting up the diagram with predefined nodes and links. Key parameters include `source`, `target`, and `value` arrays that define the flow structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Sankey(\n    arrangement='snap',\n    node=dict(\n        label=['A', 'B', 'C', 'D', 'E', 'F'],\n        x=[0.2, 0.1, 0.5, 0.7, 0.3, 0.5],\n        y=[0.7, 0.5, 0.2, 0.4, 0.2, 0.3],\n        pad=10,\n        align=\"right\",\n    ),\n    link=dict(\n        arrowlen=15,\n        source=[0, 0, 1, 2, 5, 4, 3, 5],\n        target=[5, 3, 4, 3, 0, 2, 2, 3],\n        value=[1, 2, 1, 1, 1, 1, 1, 2]\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Simple ECDF Plot in Python with Plotly Express\nDESCRIPTION: Demonstrates how to create a basic ECDF plot using a single column of data from the tips dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Distribution Plot with Rug Text and Colors\nDESCRIPTION: Create a distribution plot with custom rug text, specific colors, and a title for enhanced visualization\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/distplot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\n\nx1 = np.random.randn(26)\nx2 = np.random.randn(26) + .5\n\ngroup_labels = ['2014', '2015']\n\nrug_text_one = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n                'u', 'v', 'w', 'x', 'y', 'z']\n\nrug_text_two = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'ii', 'jj',\n                'kk', 'll', 'mm', 'nn', 'oo', 'pp', 'qq', 'rr', 'ss', 'tt',\n                'uu', 'vv', 'ww', 'xx', 'yy', 'zz']\n\nrug_text = [rug_text_one, rug_text_two]\ncolors = ['rgb(0, 0, 100)', 'rgb(0, 200, 200)']\n\nfig = ff.create_distplot(\n    [x1, x2], group_labels, bin_size=.2,\n    rug_text=rug_text, colors=colors)\n\nfig.update_layout(title_text='Customized Distplot')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Display Diverging Colorscales\nDESCRIPTION: Creates a figure showing all built-in diverging colorscales available in Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/builtin-colorscales.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.colors.diverging.swatches_continuous()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Colorscale of Plotly Isosurfaces in Python\nDESCRIPTION: This snippet illustrates how to adjust the color scale of isosurfaces, using a specific color scheme for better data visualization. The colorscale parameter is critical for these adjustments. Dependencies remain as numpy for data handling and Plotly for plot creation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nX, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]\n\n# ellipsoid\nvalues = X * X * 0.5 + Y * Y + Z * Z * 2\n\nfig = go.Figure(data=go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    colorscale='BlueRed',\n    isomin=10,\n    isomax=50,\n    surface_count=3,\n    caps=dict(x_show=False, y_show=False)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Conservation Bar Chart with Plotly Express\nDESCRIPTION: Creates a bar chart visualization for gene conservation data using Plotly Express. The code loads conservation data from a CSV file, processes it using pandas, and creates an interactive bar chart showing conservation scores with consensus labels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-alignment-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = (pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Genetic/gene_conservation.csv')\n        .set_index('0')\n        .loc[['consensus','conservation']]\n        .T\n        .astype({\"conservation\": float}))\n\nfig = px.bar(df, labels={ 'index': 'base' }, hover_name='consensus', y='conservation')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sunburst Branchvalues Total using go.Sunburst\nDESCRIPTION: This snippet demonstrates the use of `branchvalues=\"total\"` in `go.Sunburst`.  It creates a sunburst chart where the value of a parent node represents the total width of its children's wedges.  The layout is updated to have tight margins.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n    labels=[ \"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\",    \"Eve\",  \"Eve\",  \"Seth\", \"Seth\", \"Eve\",  \"Eve\",  \"Awan\",  \"Eve\" ],\n    values=[  65,    14,     12,     10,     2,      6,      6,      4,       4],\n    branchvalues=\"total\",\n))\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Color Range in Scatter Plot\nDESCRIPTION: Shows how to explicitly set a color range using the range_color parameter in a scatter plot visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"sepal_length\", range_color=[5,8])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Histogram Appearance\nDESCRIPTION: This code snippet demonstrates customizing the appearance of a Plotly Express histogram. It allows setting the title, labels, opacity, and colors of the histogram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\",\n                   title='Histogram of bills',\n                   labels={'total_bill':'total bill'}, # can specify one label per df column\n                   opacity=0.8,\n                   log_y=True, # represent bars with log scale\n                   color_discrete_sequence=['indianred'] # color of histogram bars\n                   )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Legend Rank in Plotly to Order Traces in Python\nDESCRIPTION: Example of using the `legendrank` attribute in plotly.graph_objects to arrange shapes and traces in a legend. The script demonstrates control over legend items for better visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(name=\"fourth\", x=[\"a\", \"b\"], y=[2,1], legendrank=5))\nfig.add_trace(go.Bar(name=\"second\", x=[\"a\", \"b\"], y=[2,1], legendrank=4))\nfig.add_trace(go.Bar(name=\"first\", x=[\"a\", \"b\"], y=[1,2], legendrank=2))\nfig.add_trace(go.Bar(name=\"third\", x=[\"a\", \"b\"], y=[1,2], legendrank=3))\nfig.add_shape(\n    legendrank=1,\n    showlegend=True,\n    type=\"line\",\n    xref=\"paper\",\n    line=dict(dash=\"5px\"),\n    x0=0.05,\n    x1=0.45,\n    y0=1.5,\n    y1=1.5,\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Fills to Treemap Root Node in Python\nDESCRIPTION: This example demonstrates how to apply pattern fills (hatching or texture) to the root node of a treemap. It creates a simple family tree treemap and applies a vertical line pattern to the root node.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Treemap(\n        labels = [\"Eve\",\"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n        parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"],\n        root_color=\"lightgrey\",\n        textfont_size=20,\n        marker=dict(pattern=dict(shape=[\"|\"], solidity=0.80)),\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Filled Shape with Scatter Plot\nDESCRIPTION: Demonstrates how to create a simple filled triangle shape using a scatter trace with fill='toself' property.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(x=[0,1,2,0], y=[0,2,0,0], fill=\"toself\"))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Complementary Mode ECDF Plot\nDESCRIPTION: Shows how to create a complementary CDF plot showing fraction above X value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.ecdf(df, x=[1,2,3,4], markers=True, ecdfmode=\"complementary\",\n              title=\"ecdfmode='complementary' (Y=fraction above X value)\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Random Data in Plotly\nDESCRIPTION: Python code to generate a scatter plot with 100 random points of varying color and size using Plotly's graph_objects. The points use the Viridis colorscale with partial transparency.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\n\n# Generate scatter plot data\nN = 100\nx = np.random.rand(N)\ny = np.random.rand(N)\ncolors = np.random.rand(N)\nsz = np.random.rand(N) * 30\n\n# Build and display figure\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x,\n    y=y,\n    mode=\"markers\",\n    marker={\"size\": sz,\n            \"color\": colors,\n            \"opacity\": 0.6,\n            \"colorscale\": \"Viridis\"\n            }\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Ribbon Ends for Chord Diagram in Python\nDESCRIPTION: This function computes the ribbon ends and stores them as tuples in a list of lists. It uses mapped data, ideogram ends, and sorted indices as inputs.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef make_ribbon_ends(mapped_data, ideo_ends,  idx_sort):\n    L=mapped_data.shape[0]\n    ribbon_boundary=np.zeros((L,L+1))\n    for k in range(L):\n        start=ideo_ends[k][0]\n        ribbon_boundary[k][0]=start\n        for j in range(1,L+1):\n            J=idx_sort[k][j-1]\n            ribbon_boundary[k][j]=start+mapped_data[k][J]\n            start=ribbon_boundary[k][j]\n    return [[(ribbon_boundary[k][j],ribbon_boundary[k][j+1] ) for j in range(L)] for k in range(L)]\n\nribbon_ends=make_ribbon_ends(mapped_data, ideo_ends,  idx_sort)\nprint 'ribbon ends starting from the ideogram[2]\\n', ribbon_ends[2]\n```\n\n----------------------------------------\n\nTITLE: Advanced Horizontal Bar Chart with Color Palette and Annotations\nDESCRIPTION: Complex horizontal bar chart demonstrating color palette, stacked bars, and custom annotations for survey responses\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-bar-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ntop_labels = ['Strongly<br>agree', 'Agree', 'Neutral', 'Disagree',\n              'Strongly<br>disagree']\n\ncolors = ['rgba(38, 24, 74, 0.8)', 'rgba(71, 58, 131, 0.8)',\n          'rgba(122, 120, 168, 0.8)', 'rgba(164, 163, 204, 0.85)',\n          'rgba(190, 192, 213, 1)']\n\nx_data = [[21, 30, 21, 16, 12],\n          [24, 31, 19, 15, 11],\n          [27, 26, 23, 11, 13],\n          [29, 24, 15, 18, 14]]\n\ny_data = ['The course was effectively<br>organized',\n          'The course developed my<br>abilities and skills ' +\n          'for<br>the subject', 'The course developed ' +\n          'my<br>ability to think critically about<br>the subject',\n          'I would recommend this<br>course to a friend']\n\nfig = go.Figure()\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        fig.add_trace(go.Bar(\n            x=[xd[i]], y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(color='rgb(248, 248, 249)', width=1)\n            )\n        ))\n\nfig.update_layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    margin=dict(l=120, r=10, t=140, b=80),\n    showlegend=False,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Waterfall Chart with Plotly in Python\nDESCRIPTION: This code snippet creates a basic vertical waterfall chart using Plotly's graph objects. It initializes the chart with given sales and expense data, and updates the layout to include a title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/waterfall-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Waterfall(\n    name = \"20\", orientation = \"v\",\n    measure = [\"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"total\"],\n    x = [\"Sales\", \"Consulting\", \"Net revenue\", \"Purchases\", \"Other expenses\", \"Profit before tax\"],\n    textposition = \"outside\",\n    text = [\"+60\", \"+80\", \"\", \"-40\", \"-20\", \"Total\"],\n    y = [60, 80, 0, -40, -20, 0],\n    connector = {\"line\":{\"color\":\"rgb(63, 63, 63)\"}},\n))\n\nfig.update_layout(\n        title = \"Profit and loss statement 2018\",\n        showlegend = True\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Polar Scatter Plot with Plotly Express in Python\nDESCRIPTION: This code snippet generates a polar scatter plot using wind data from Plotly Express. The plot visualizes frequency as radial coordinates and direction as angular coordinates, with color indicating strength.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.wind()\nfig = px.scatter_polar(df, r=\"frequency\", theta=\"direction\", color=\"strength\", symbol=\"strength\",\n            color_discrete_sequence=px.colors.sequential.Plasma_r)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Side by Side Subplots using Low-Level API - Python\nDESCRIPTION: This snippet creates side-by-side subplots using Plotly's low-level API approach, defining traces and their arrangement using layout properties like domain.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = go.Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis=\"x2\",\n    yaxis=\"y2\"\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.7]\n    ),\n    xaxis2=dict(\n        domain=[0.8, 1]\n    ),\n    yaxis2=dict(\n        anchor=\"x2\"\n    )\n)\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Branchvalues in Icicle Chart with Plotly Graph Objects in Python\nDESCRIPTION: This example demonstrates setting 'branchvalues' in Plotly Graph Objects for icicle charts in Python. Adjusting 'branchvalues' changes how parent sector sizes relate to child sector sizes, using 'total' or 'remainder' modes. Dependency: plotly.graph_objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig =go.Figure(go.Icicle(\n    labels=[ \"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\",    \"Eve\",  \"Eve\",  \"Seth\", \"Seth\", \"Eve\",  \"Eve\",  \"Awan\",  \"Eve\" ],\n    values=[  65,    14,     12,     10,     2,      6,      6,      4,       4],\n    branchvalues=\"total\",\n    root_color=\"lightgrey\"\n))\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Subplots Directly on a Plotly Figure (Python)\nDESCRIPTION: This snippet shows how to set subplots directly on an existing Plotly figure using the set_subplots method introduced in version 4.13. It creates a 2x3 grid of subplots with specified horizontal spacing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure().set_subplots(2, 3, horizontal_spacing=0.1)\n```\n\n----------------------------------------\n\nTITLE: Setting Angle Reference for Markers in Plotly Python\nDESCRIPTION: This snippet illustrates how to set the angle reference for markers in a Plotly scatter plot. By using 'angleref' set to 'previous', an arrow marker takes its angle from the previous data point for better visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndf = px.data.gapminder()\n\nfig = go.Figure()\n\nfor x in df.loc[df.continent.isin([\"Europe\")].country.unique()[:5]:\n    fil = df.loc[(df.country.str.contains(x))]\n    fig.add_trace(\n        go.Scatter(\n            x=fil[\"year\"],\n            y=fil[\"pop\"],\n            mode=\"lines+markers\",\n            marker=dict(\n                symbol=\"arrow\",\n                size=15,\n                angleref=\"previous\",\n            ),\n            name=x,\n        )\n    )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling 2D histogram contour with graph objects\nDESCRIPTION: This snippet demonstrates advanced styling options for a 2D histogram contour plot using Plotly graph objects. It sets the colorscale to 'Jet', configures contour label appearance, and customizes the hover labels to improve the visual appeal and information provided by the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx = np.random.uniform(-1, 1, size=500)\ny = np.random.uniform(-1, 1, size=500)\n\nfig = go.Figure(go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Jet',\n        contours = dict(\n            showlabels = True,\n            labelfont = dict(\n                family = 'Raleway',\n                color = 'white'\n            )\n        ),\n        hoverlabel = dict(\n            bgcolor = 'white',\n            bordercolor = 'black',\n            font = dict(\n                family = 'Raleway',\n                color = 'black'\n            )\n        )\n\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Mapbox Plot with Mapbox Dark Style in Python\nDESCRIPTION: This snippet illustrates how to create a scatter mapbox plot using the Mapbox 'dark' style. It requires a Mapbox Access Token and demonstrates how to use it in the plot configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-map-layers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntoken = open(\".mapbox_token\").read() # you will need your own token\n\nimport pandas as pd\nus_cities = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\")\n\nimport plotly.express as px\n\nfig = px.scatter_mapbox(us_cities, lat=\"lat\", lon=\"lon\", hover_name=\"City\", hover_data=[\"State\", \"Population\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=3, height=300)\nfig.update_layout(mapbox_style=\"dark\", mapbox_accesstoken=token)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Color-Coded ECDF Plot\nDESCRIPTION: Creates an ECDF plot with color dimension mapping to categorize data by sex.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", color=\"sex\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Plotly Dashboard Objects Insert Method in Python\nDESCRIPTION: Reference to the insert method of Plotly's Dashboard objects class, which allows inserting boxes into dashboard layouts with the fill_percent parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nhelp(plotly.dashboard_objs.Dashboard.insert)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Automatic Axis Labels\nDESCRIPTION: Demonstrates automatic axis labeling using Plotly Express with a DataFrame input. The code creates a scatter plot from the tips dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"sex\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Extracting Line Data from GeoPandas for Plotly Maps\nDESCRIPTION: This snippet shows how to extract point data from GeoPandas linestring and multilinestring geometries to create line maps with Plotly Express. The code downloads a shapefile containing river data, extracts coordinate sequences from each geometry, and plots them as lines on a map.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-tile-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport geopandas as gpd\nimport shapely.geometry\nimport numpy as np\nimport wget\n\n# download a zipped shapefile\nwget.download(\"https://plotly.github.io/datasets/ne_50m_rivers_lake_centerlines.zip\")\n\n# open a zipped shapefile with the zip:// pseudo-protocol\ngeo_df = gpd.read_file(\"zip://ne_50m_rivers_lake_centerlines.zip\")\n\nlats = []\nlons = []\nnames = []\n\nfor feature, name in zip(geo_df.geometry, geo_df.name):\n    if isinstance(feature, shapely.geometry.linestring.LineString):\n        linestrings = [feature]\n    elif isinstance(feature, shapely.geometry.multilinestring.MultiLineString):\n        linestrings = feature.geoms\n    else:\n        continue\n    for linestring in linestrings:\n        x, y = linestring.xy\n        lats = np.append(lats, y)\n        lons = np.append(lons, x)\n        names = np.append(names, [name]*len(y))\n        lats = np.append(lats, None)\n        lons = np.append(lons, None)\n        names = np.append(names, None)\n\nfig = px.line_map(lat=lats, lon=lons, hover_name=names,\n                     map_style=\"open-street-map\", zoom=1)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Overlaid Area Chart Without Boundary Lines in Python\nDESCRIPTION: This snippet modifies the previous example by removing boundary lines in the area chart, changing the mode of the traces to 'none'. It shows how to create cleaner fills without grid lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy',\n                    mode='none'))\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty',\n                    mode= 'none'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Icicle Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet uses Plotly Graph Objects to create a basic icicle chart visualizing hierarchical data. It highlights the use of 'labels', 'parents', and 'values' to structure the icicle sectors, with customizable root colors and layout margins. Dependency: plotly.graph_objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig =go.Figure(go.Icicle(\n    labels=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],\n    root_color=\"lightgrey\"\n))\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Variables to New Shape Labels in Plotly Python\nDESCRIPTION: This example shows how to use texttemplate to add variables to labels of new shapes drawn on the graph. It enables drawing lines and displays the calculated 'dy' variable in the shape label.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.stocks()\n\nfig = go.Figure(\n    data=go.Scatter(\n        x=df.date,\n        y=df.GOOG,\n    ),\n    layout=go.Layout(\n        yaxis=dict(\n            title=dict(\n                text=\"Price in USD\"\n            )),\n        newshape=dict(\n            label=dict(texttemplate=\"Change: %{dy:.2f}\")\n        ),\n        title=dict(text=\"Google Share Price 2018/2019\"),\n    ),\n)\n\n\nfig.show(\n    config={\n        \"modeBarButtonsToAdd\": [\n            \"drawline\",\n        ]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Time Series Plot with Custom Date Range using Graph Objects\nDESCRIPTION: This example shows how to create a time series plot with a custom date range using Plotly Graph Objects. It demonstrates setting the x-axis range using datetime objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport datetime\n\nx = [datetime.datetime(year=2013, month=10, day=4),\n     datetime.datetime(year=2013, month=11, day=5),\n     datetime.datetime(year=2013, month=12, day=6)]\n\nfig = go.Figure(data=[go.Scatter(x=x, y=[1, 3, 6])])\n# Use datetime objects to set xaxis range\nfig.update_layout(xaxis_range=[datetime.datetime(2013, 10, 17),\n                               datetime.datetime(2013, 11, 20)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Ternary Scatter Plot with Plotly Graph Objects\nDESCRIPTION: This snippet creates a ternary scatter plot using Plotly Graph Objects. It defines raw data representing journalist, developer, and designer scores and generates a scatter plot on a ternary axis using `go.Scatterternary`. A custom `makeAxis` function defines the appearance of each axis.  The plot is then customized using `fig.update_layout` to set axis titles, annotations, and other layout properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nrawData = [\n    {'journalist':75,'developer':25,'designer':0,'label':'point 1'},\n    {'journalist':70,'developer':10,'designer':20,'label':'point 2'},\n    {'journalist':75,'developer':20,'designer':5,'label':'point 3'},\n    {'journalist':5,'developer':60,'designer':35,'label':'point 4'},\n    {'journalist':10,'developer':80,'designer':10,'label':'point 5'},\n    {'journalist':10,'developer':90,'designer':0,'label':'point 6'},\n    {'journalist':20,'developer':70,'designer':10,'label':'point 7'},\n    {'journalist':10,'developer':20,'designer':70,'label':'point 8'},\n    {'journalist':15,'developer':5,'designer':80,'label':'point 9'},\n    {'journalist':10,'developer':10,'designer':80,'label':'point 10'},\n    {'journalist':20,'developer':10,'designer':70,'label':'point 11'},\n];\n\ndef makeAxis(title, tickangle):\n    return {\n      'title': {'text': title, 'font': { 'size': 20}},\n      'tickangle': tickangle,\n      'tickfont': { 'size': 15 },\n      'tickcolor': 'rgba(0,0,0,0)',\n      'ticklen': 5,\n      'showline': True,\n      'showgrid': True\n    }\n\nfig = go.Figure(go.Scatterternary({\n    'mode': 'markers',\n    'a': [i for i in map(lambda x: x['journalist'], rawData)],\n    'b': [i for i in map(lambda x: x['developer'], rawData)],\n    'c': [i for i in map(lambda x: x['designer'], rawData)],\n    'text': [i for i in map(lambda x: x['label'], rawData)],\n    'marker': {\n        'symbol': 100,\n        'color': '#DB7365',\n        'size': 14,\n        'line': { 'width': 2 }\n    }\n}))\n\nfig.update_layout({\n    'ternary': {\n        'sum': 100,\n        'aaxis': makeAxis('Journalist', 0),\n        'baxis': makeAxis('<br>Developer', 45),\n        'caxis': makeAxis('<br>Designer', -45)\n    },\n    'annotations': [{\n      'showarrow': False,\n      'text': 'Simple Ternary Plot with Markers',\n        'x': 0.5,\n        'y': 1.3,\n        'font': { 'size': 15 }\n    }]\n})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Sunburst Plot with plotly.express\nDESCRIPTION: This snippet creates a basic sunburst plot using Plotly Express. It defines data with 'character', 'parent', and 'value' keys, then uses `px.sunburst` to generate the chart, mapping the data keys to the corresponding parameters. Finally, it displays the chart using `fig.show()`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndata = dict(\n    character=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parent=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])\n\nfig = px.sunburst(\n    data,\n    names='character',\n    parents='parent',\n    values='value',\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Custom Category Order using categoryarray\nDESCRIPTION: Shows how to customize category order using categoryarray parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack')\nfig.update_xaxes(categoryorder='array', categoryarray= ['d','a','c','b'])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Animating a Moving Point on a Curve with Graph Objects\nDESCRIPTION: This code creates an animation of a moving point along a curve using Plotly's Graph Objects. It generates curve data, creates a figure with a line and an initial point, and defines frames that update the point's position along the curve.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n# Generate curve data\nt = np.linspace(-1, 1, 100)\nx = t + t ** 2\ny = t - t ** 2\nxm = np.min(x) - 1.5\nxM = np.max(x) + 1.5\nym = np.min(y) - 1.5\nyM = np.max(y) + 1.5\nN = 25\ns = np.linspace(-1, 1, N)\nxx = s + s ** 2\nyy = s - s ** 2\n\n\n# Create figure\nfig = go.Figure(\n    data=[go.Scatter(x=x, y=y,\n                     mode=\"lines\",\n                     line=dict(width=2, color=\"blue\")),\n          go.Scatter(x=[xx[0]], y=[yy[0]],\n                     mode=\"markers\",\n                     marker=dict(color=\"red\", size=10))])\nfig.update_layout(width=600, height=450,\n        xaxis=dict(range=[xm, xM], autorange=False, zeroline=False),\n        yaxis=dict(range=[ym, yM], autorange=False, zeroline=False),\n        title_text=\"Kinematic Generation of a Planar Curve\", title_x=0.5,\n        updatemenus = [dict(type = \"buttons\",\n        buttons = [\n            dict(\n                args = [None, {\"frame\": {\"duration\": 10, \"redraw\": False},\n                                \"fromcurrent\": True, \"transition\": {\"duration\": 10}}],\n                label = \"Play\",\n                method = \"animate\",\n\n                )])])\n\nfig.update(frames=[go.Frame(\n                        data=[go.Scatter(\n                                   x=[xx[k]],\n                                   y=[yy[k]])],\n                        traces=[1]) # fig.data[1] is updated by each frame\n        for k in range(N)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Polar Chart with Multiple Traces using Plotly Graph Objects in Python\nDESCRIPTION: This example demonstrates how to create a line polar chart with multiple traces using Plotly Graph Objects. It plots different microphone patterns.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/polar_dataset.csv\")\n\nfig = go.Figure()\nfig.add_trace(go.Scatterpolar(\n        r = df['x1'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'Figure 8',\n        line_color = 'peru'\n    ))\nfig.add_trace(go.Scatterpolar(\n        r = df['x2'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'Cardioid',\n        line_color = 'darkviolet'\n    ))\nfig.add_trace(go.Scatterpolar(\n        r = df['x3'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'Hypercardioid',\n        line_color = 'deepskyblue'\n    ))\n\n\nfig.update_layout(\n    title = 'Mic Patterns',\n    showlegend = False\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling and Coloring Annotations in Plotly Scatter Plots\nDESCRIPTION: This example demonstrates how to style annotations in Plotly graphs. It shows how to configure font properties, arrow styles, border, background color, and opacity for an annotation marking a maximum value in a scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n))\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n))\n\nfig.add_annotation(\n        x=2,\n        y=5,\n        xref=\"x\",\n        yref=\"y\",\n        text=\"max=5\",\n        showarrow=True,\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=16,\n            color=\"#ffffff\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-30,\n        bordercolor=\"#c7c7c7\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ff7f0e\",\n        opacity=0.8\n        )\n\nfig.update_layout(showlegend=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Performing Shapiro-Wilk Normality Test with SciPy\nDESCRIPTION: Applies the Shapiro-Wilk statistical test to determine if the sample data follows a normal distribution. The test returns a statistic and p-value, which are interpreted against a significance level (alpha) to make a conclusion about normality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import shapiro\nstat, p = shapiro(gauss_data)\n\n# interpret\nalpha = 0.05\nif p > alpha:\n    msg = 'Sample looks Gaussian (fail to reject H0)'\nelse:\n    msg = 'Sample does not look Gaussian (reject H0)'\n\nresult_mat = [\n    ['Length of the sample data', 'Test Statistic', 'p-value', 'Comments'],\n    [len(gauss_data), stat, p, msg]\n]\n\nswt_table = ff.create_table(result_mat)\nswt_table['data'][0].colorscale=[[0, '#2a3f5f'],[1, '#ffffff']]\nswt_table['layout']['height']=200\nswt_table['layout']['margin']['t']=50\nswt_table['layout']['margin']['b']=50\n\npy.iplot(swt_table, filename='shapiro-wilk-table')\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Mixed Data Types in Plotly Express\nDESCRIPTION: Shows how to create a bar chart using a combination of DataFrame columns and NumPy arrays. Demonstrates using the labels parameter to override axis titles and includes hover data configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/px-arguments.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nimport pandas as pd\n\ndf = px.data.gapminder()\ngdp = np.log(df['pop'] * df['gdpPercap'])  # NumPy array\nfig = px.bar(df, x='year', y=gdp, color='continent', labels={'y':'log gdp'},\n             hover_data=['country'],\n             title='Evolution of world GDP')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using GeoPandas DataFrame with Plotly for Choropleth Maps\nDESCRIPTION: This example shows how to integrate GeoPandas DataFrames with Plotly's choropleth_map, using GeoPandas' geometry as input to build maps. The snippet highlights the combination of geospatial data manipulation and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport geopandas as gpd\n\ndf = px.data.election()\ngeo_df = gpd.GeoDataFrame.from_features(\n    px.data.election_geojson()[\"features\"]\n).merge(df, on=\"district\").set_index(\"district\")\n\nfig = px.choropleth_map(geo_df,\n                           geojson=geo_df.geometry,\n                           locations=geo_df.index,\n                           color=\"Joly\",\n                           center={\"lat\": 45.5517, \"lon\": -73.7073},\n                           map_style=\"open-street-map\",\n                           zoom=8.5)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Histogram with Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a basic histogram using Plotly Express with the `px.histogram` function. It takes a dataframe and the name of a column as input and generates a histogram showing the distribution of the data in that column. It uses `px.data.tips()` as a sample dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding New Shapes to Legend in Plotly Python\nDESCRIPTION: This example shows how to add newly drawn shapes to the legend using the newshape attribute with showlegend=True. Each new line drawn on the graph appears in the legend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.stocks()\n\nfig = go.Figure(\n    data=go.Scatter(\n        x=df.date,\n        y=df.AAPL,\n        name=\"Apple\"\n    ),\n    layout=go.Layout(\n        yaxis=dict(\n            title=dict(text=\"Price in USD\"),\n            ),\n        newshape=dict(\n            showlegend=True,\n            label=dict(texttemplate=\"Change: %{dy:.2f}\")\n        ),\n        title=dict(text=\"Apple Share Price 2018/2019\"),\n    ),\n)\n\n\nfig.show(\n    config={\n        \"modeBarButtonsToAdd\": [\n            \"drawline\",\n        ]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Text to 2D Histogram Bins\nDESCRIPTION: This example shows how to display text values directly on 2D histogram bins by using the texttemplate attribute to show the z-values (counts).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2D-Histogram.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.tips()\n\nfig = go.Figure(go.Histogram2d(\n        x=df.total_bill,\n        y=df.tip,\n        texttemplate= \"%{z}\"\n    ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing CSV Data Visualization with Plotly Graph Objects\nDESCRIPTION: This snippet demonstrates how to create a more customized scatter plot using Plotly's graph_objects interface. It includes styling options like background color and layout customization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plot-data-from-csv.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.graph_objects as go\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\n\nfig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],\n                  name='Share Prices (in USD)'))\n\nfig.update_layout(title=dict(text='Apple Share Prices over time (2014)'),\n                   plot_bgcolor='rgb(230, 230,230)',\n                   showlegend=True)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Automatic Contrast Rescaling with px.imshow in Python\nDESCRIPTION: Demonstrates how to use the 'contrast_rescaling' parameter set to 'infer' with a single-channel image to automatically determine appropriate zmin and zmax values based on the data type.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimg = np.arange(100, dtype=np.uint8).reshape((10, 10))\nfig = px.imshow(img, contrast_rescaling='infer')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Histogram with Aggregation\nDESCRIPTION: This snippet demonstrates how to aggregate data within histogram bins using the `histfunc` parameter. It calculates the average tip for each bin of 'total_bill'.  The `y` parameter specifies the column to aggregate.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", y=\"tip\", histfunc='avg')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Matrix for Multiple Experiments\nDESCRIPTION: Creates a scatter plot matrix to visualize relationships between all experiment combinations, colored by gender.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nmixed_df = px.data.experiment(indexed=True)\n\nfig = px.scatter_matrix(mixed_df, dimensions=[\"experiment_1\", \"experiment_2\", \"experiment_3\"], color=\"gender\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Treemap with Discrete Color Argument - Python\nDESCRIPTION: This snippet illustrates the creation of a Treemap with a discrete color argument, assigning different colors based on non-numeric data values. It accounts for cases where child nodes may share color values leading to the use of mixed colors if there are differing values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.treemap(df, path=[px.Constant(\"all\"), 'sex', 'day', 'time'],\n                 values='total_bill', color='day')\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Shapes to Multiple Facets and Subplots in Plotly in Python\nDESCRIPTION: Illustrates how to place lines or rectangles across multiple subplots or facet plots by setting `row` and `col` to 'all' using Plotly's figure methods. Requires Plotly and Plotly Express, with data from the stocks dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-vertical-shapes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\nfig = px.line(df, facet_col=\"company\", facet_col_wrap=2)\nfig.add_hline(y=1, line_dash=\"dot\", row=3, col=\"all\",\n              annotation_text=\"Jan 1, 2018 baseline\", \n              annotation_position=\"bottom right\")\nfig.add_vrect(x0=\"2018-09-24\", x1=\"2018-12-18\", row=\"all\", col=1,\n              annotation_text=\"decline\", annotation_position=\"top left\",\n              fillcolor=\"green\", opacity=0.25, line_width=0)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Cone Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a simple 3D cone plot with a single cone. The cone's position is defined by (x,y,z) coordinates and its direction by (u,v,w) vector components. The camera position is adjusted for better visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/cone-plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Cone(x=[1], y=[1], z=[1], u=[1], v=[1], w=[0]))\n\nfig.update_layout(scene_camera_eye=dict(x=-0.76, y=1.8, z=0.92))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Counting Values with COUNT and GROUP BY\nDESCRIPTION: Demonstrates how to count complaints by agency using SQL COUNT function and GROUP BY clause.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT Agency, COUNT(*) as `num_complaints`'\n                       'FROM data '\n                       'GROUP BY Agency ', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Creating a Wind Rose Chart using Area Traces in Python\nDESCRIPTION: This snippet demonstrates how to create a wind rose chart for visualizing wind speed distribution. It uses the Area trace type with polar coordinates to create a stacked chart representing different wind speed ranges with distinct colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/legacy-polar-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Area(\n    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='11-14 m/s',\n    marker=dict(\n        color='rgb(106,81,163)'\n    )\n)\ntrace2 = go.Area(\n    r=[57.49999999999999, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.00000000000001],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='8-11 m/s',\n    marker=dict(\n        color='rgb(158,154,200)'\n    )\n)\ntrace3 = go.Area(\n    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='5-8 m/s',\n    marker=dict(\n        color='rgb(203,201,226)'\n    )\n)\ntrace4 = go.Area(\n    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='< 5 m/s',\n    marker=dict(\n        color='rgb(242,240,247)'\n    )\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    title='Wind Speed Distribution in Laurel, NE',\n    font=dict(\n        size=16\n    ),\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    ),\n    radialaxis=dict(\n        ticksuffix='%'\n    ),\n    orientation=270\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='polar-area-chart')\n```\n\n----------------------------------------\n\nTITLE: Simple Volume Plot with go.Volume in Python\nDESCRIPTION: Creates a basic 3D volume plot using Plotly's go.Volume function. It demonstrates how to set up the data, define isosurface levels, and adjust opacity for better volume rendering.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-volume.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nX, Y, Z = np.mgrid[-8:8:40j, -8:8:40j, -8:8:40j]\nvalues = np.sin(X*Y*Z) / (X*Y*Z)\n\nfig = go.Figure(data=go.Volume(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=0.1,\n    isomax=0.8,\n    opacity=0.1, # needs to be small to see through all surfaces\n    surface_count=17, # needs to be a large number for good volume rendering\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Funnel Plot with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a stacked funnel plot using Plotly Express by combining data from two different offices (Montreal and Toronto). This visualization enables comparisons between multiple categories in the funnel stages. Dependencies include Plotly Express and pandas.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\nstages = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\"]\ndf_mtl = pd.DataFrame(dict(number=[39, 27.4, 20.6, 11, 3], stage=stages))\ndf_mtl['office'] = 'Montreal'\ndf_toronto = pd.DataFrame(dict(number=[52, 36, 18, 14, 5], stage=stages))\ndf_toronto['office'] = 'Toronto'\ndf = pd.concat([df_mtl, df_toronto], axis=0)\nfig = px.funnel(df, x='number', y='stage', color='office')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Marker Borders using Graph Objects\nDESCRIPTION: Creates a scatter plot with custom marker borders using Plotly Graph Objects. Demonstrates adding multiple traces with different marker sizes and border properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Generate example data\nimport numpy as np\nnp.random.seed(1)\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=6, size=(500,))\n\n# Build figure\nfig = go.Figure()\n\n# Add scatter trace with medium sized markers\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=x,\n        y=y,\n        marker=dict(\n            color='LightSkyBlue',\n            size=20,\n            line=dict(\n                color='MediumPurple',\n                width=2\n            )\n        ),\n        showlegend=False\n    )\n)\n\n# Add trace with large marker\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=[2],\n        y=[4.5],\n        marker=dict(\n            color='LightSkyBlue',\n            size=120,\n            line=dict(\n                color='MediumPurple',\n                width=12\n            )\n        ),\n        showlegend=False\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Trace Type Specified - Python\nDESCRIPTION: This snippet is a variation of the previous one that specifies the subplot types using trace type names instead of the typical type options in the specs. It enhances compatibility with the corresponding traces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"barpolar\"}],\n           [{\"type\": \"pie\"}, {\"type\": \"scatter3d\"}]],\n)\n\nfig.add_trace(go.Bar(y=[2, 3, 1]),\n              row=1, col=1)\n\nfig.add_trace(go.Barpolar(theta=[0, 45, 90], r=[2, 3, 1]),\n              row=1, col=2)\n\nfig.add_trace(go.Pie(values=[2, 3, 1]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter3d(x=[2, 3, 1], y=[0, 0, 0],\n                           z=[0.5, 1, 2], mode=\"lines\"),\n              row=2, col=2)\n\nfig.update_layout(height=700, showlegend=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Drawing Tools to Plotly Chart in Python\nDESCRIPTION: This snippet demonstrates how to add custom drawing tools to a Plotly chart's modebar. It sets the dragmode to 'drawrect' and adds various shape drawing options to the modebar.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/images.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig.update_layout(\n    dragmode='drawrect',\n    newshape=dict(line_color='cyan'),\n    title_text='Drag to add annotations - use modebar to change drawing tool'\n)\nfig.show(config={'modeBarButtonsToAdd':['drawline',\n                                        'drawopenpath',\n                                        'drawclosedpath',\n                                        'drawcircle',\n                                        'drawrect',\n                                        'eraseshape'\n                                       ]})\n```\n\n----------------------------------------\n\nTITLE: Adding Shapes to Subplots in Plotly\nDESCRIPTION: This code demonstrates how to add shapes to subplots created using `plotly.subplots.make_subplots`.  It creates a 2x2 grid of subplots with different chart types (scatter and bar). Then, it adds shapes (line, rectangles, and a circle) to different subplots by referencing their respective axes (`x1`, `y1`, `x2`, `y2`, etc.).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Create Subplots\nfig = make_subplots(rows=2, cols=2)\n\nfig.add_trace(go.Scatter(x=[2, 6], y=[1,1]), row=1, col=1)\nfig.add_trace(go.Bar(x=[1,2,3], y=[4,5,6]), row=1, col=2)\nfig.add_trace(go.Scatter(x=[10,20], y=[40,50]), row=2, col=1)\nfig.add_trace(go.Bar(x=[11,13,15], y=[8,11,20]), row=2, col=2)\n\n# Add shapes\nfig.update_layout(\n    shapes=[\n        dict(type=\"line\", xref=\"x\", yref=\"y\",\n            x0=3, y0=0.5, x1=5, y1=0.8, line_width=3),\n        dict(type=\"rect\", xref=\"x2\", yref='y2',\n             x0=4, y0=2, x1=5, y1=6),\n        dict(type=\"rect\", xref=\"x3\", yref=\"y3\",\n             x0=10, y0=20, x1=15, y1=30),\n        dict(type=\"circle\", xref=\"x4\", yref=\"y4\",\n             x0=5, y0=12, x1=10, y1=18)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Facet plotting with indexed data frames\nDESCRIPTION: Illustrates faceting plots using named index references for color and column arguments in a Plotly Express bar chart. Demonstrates capabilities of labeled indices.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide(indexed=True)\n\nfig = px.bar(wide_df, facet_col=\"medal\", color=wide_df.index)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Enabling Scroll Zoom in Plotly Python\nDESCRIPTION: This snippet demonstrates how to enable scroll zoom functionality in a Plotly figure. It allows users to zoom in and out using the mouse scroll wheel or two-finger scroll.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nconfig = {'scrollZoom': True}\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]))\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themes with Template Objects\nDESCRIPTION: This code snippet illustrates how to create a custom Template object in Plotly that modifies the default title font for figures. It updates the layout of a figure object to use the custom template.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nlarge_rockwell_template = dict(\n    layout=go.Layout(title_font=dict(family=\"Rockwell\", size=24))\n)\n\nfig = go.Figure()\nfig.update_layout(title=dict(text=\"Figure Title\"),\n                  template=large_rockwell_template)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding colorscale to 2D histogram contour with graph objects\nDESCRIPTION: This snippet extends the basic 2D histogram contour plot by adding a colorscale. The `colorscale` parameter is set to 'Blues' to visualize the density with a blue color gradient.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx = np.random.uniform(-1, 1, size=500)\ny = np.random.uniform(-1, 1, size=500)\n\nfig = go.Figure(go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Blues'\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Display with Templates\nDESCRIPTION: Shows how to use text templates to customize the display of text in a pie chart, including formatting for currency and percentages.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Pie(\n    values = [40000000, 20000000, 30000000, 10000000],\n    labels = [\"Wages\", \"Operating expenses\", \"Cost of sales\", \"Insurance\"],\n    texttemplate = \"%{label}: %{value:$,s} <br>(%{percent})\",\n    textposition = \"inside\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Tickmode to Array - Plotly Python\nDESCRIPTION: This snippet shows how to configure the tick mode to 'array', allowing for custom tick placements and labels using 'tickvals' and 'ticktext'. It creates a scatter plot with a specific x-axis setup.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\n))\n\nfig.update_layout(\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [1, 3, 5, 7, 9, 11],\n        ticktext = ['One', 'Three', 'Five', 'Seven', 'Nine', 'Eleven']\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying LaTeX Equations in Plotly Table, Python\nDESCRIPTION: This code snippet demonstrates how to include LaTeX equations in a Plotly table using the `plotly.figure_factory` module.  It defines a data matrix where LaTeX strings are included, and then calls `ff.create_table` to generate the table.  Plotly automatically renders LaTeX equations when they are enclosed in '$' symbols.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Name', 'Equation'],\n               ['Pythagorean Theorem', '$a^{2}+b^{2}=c^{2}$'],\n               ['Euler\\'s Formula', '$F-E+V=2$'],\n               ['The Origin of Complex Numbers', '$i^{2}=-1$'],\n               ['Einstein\\'s Theory of Relativity', '$E=m c^{2}$']]\n\nfig =  ff.create_table(data_matrix)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating and Visualizing Peak Integration\nDESCRIPTION: Calculates baseline values, creates area outline, and visualizes peak integration using Plotly scatter plots. Includes trapezoid integration calculation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbaseline_values = peakutils.baseline(time_series)\n\nx = [j for j in range(len(time_series))]\ntime_series = time_series.tolist()\nbaseline_values = baseline_values.tolist()\n\nrev_baseline_values = baseline_values[:11]\nrev_baseline_values.reverse()\narea_x = [0,1,2,3,4,5,6,7,8,9,10,11,10,9,8,7,6,5,4,3,2,1]\narea_y = time_series[:11] + rev_baseline_values\n\ntrace = go.Scatter(\n    x=x,\n    y=time_series,\n    mode='lines',\n    marker=dict(\n        color='#B292EA',\n    ),\n    name='Original Plot'\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=baseline_values,\n    mode='markers',\n    marker=dict(\n        size=3,\n        color='#EB55BF',\n    ),\n    name='Bassline'\n)\n\ntrace3 = go.Scatter(\n    x=area_x,\n    y=area_y,\n    mode='lines+markers',\n    marker=dict(\n        size=4,\n        color='rgb(255,0,0)',\n    ),\n    name='1st Peak Outline'\n)\n\nfirst_peak_x = [j for j in range(11)]\narea_under_first_peak = np.trapz(time_series[:11], first_peak_x) - np.trapz(baseline_values[:11], first_peak_x)\narea_under_first_peak\n\nannotation = go.Annotation(\n    x=80,\n    y=1000,\n    text='The peak integration for the first peak is approximately %s' % (area_under_first_peak),\n    showarrow=False\n)\n\nlayout = go.Layout(\n    annotations=[annotation]\n)\n\ntrace_data = [trace, trace2, trace3]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='milk-production-peak-integration')\n```\n\n----------------------------------------\n\nTITLE: Periodic Table Heatmap Example\nDESCRIPTION: Complex example showing how to create a periodic table visualization using the annotated heatmap figure factory with custom text and hover information.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Periodic Table Data\nsymbol = [['H', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'He'],\n         ['Li', 'Be', '', '', '', '', '', '', '', '', '', '', 'B', 'C', 'N', 'O', 'F', 'Ne'],\n         ['Na', 'Mg', '', '', '', '', '', '', '', '', '', '', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar'],\n         ['K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr'],\n         ['Rb ', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe' ],\n         ['Cs', 'Ba', '', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn' ],\n         ['Fr', 'Ra', '', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Uut', 'Fl', 'Uup', 'Lv', 'Uus', 'Uuo'],\n         ['', '', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', ''],\n         ['', '', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', '' ],\n         ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n         ['', 'Alkali Metal', '', '', 'Transition Metal', '', '', 'Actinide', '', '', 'Semimetal', '', '', 'Halogen', '', '', '', ''],\n         ['', 'Alkaline Metal', '', '', 'Lanthanide', '', '', 'Basic Metal', '', '', 'Nonmetal', '', '', 'Noble Gas', '', '', '', '']]\n```\n\n----------------------------------------\n\nTITLE: Faceted Scatter Plot with Box Plot Marginal (Row)\nDESCRIPTION: Creates a faceted scatter plot by time with box plot marginals on y-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"sex\", facet_row=\"time\",\n                  marginal_y=\"box\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Tick Locations in Plotly\nDESCRIPTION: Shows how to set specific tick locations using the tickvals property. Places ticks at exact positions specified in an array.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(tickvals=[5.1, 5.9, 6.3, 7.5])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Layout and Displaying Figure - Python\nDESCRIPTION: This snippet updates the layout of the figure, including setting the title and x-axis domain, and then displays the figure. It is finalizing the visualization process.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfig.update_layout(\n    title_text=\"Yahoo\",\n    xaxis_domain=[0.05, 1.0]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Indenting Legend Entries in Plotly Graph Objects\nDESCRIPTION: This example shows how to indent legend entries using the 'indentation' parameter. It creates a scatter plot of iris data with indented legend entries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.iris()\n\nfig = go.Figure(\n    [\n        go.Scatter(\n            x=df[df[\"species\"] == species][\"sepal_width\"],\n            y=df[df[\"species\"] == species][\"sepal_length\"],\n            mode=\"markers\",\n            name=species,\n        )\n        for species in df[\"species\"].unique()\n    ],\n    layout=dict(\n        legend=dict(\n            title=dict(\n                text=\"Species\",\n            ),\n            indentation=10\n        )\n    ),\n)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dot Plot with Plotly Express in Python\nDESCRIPTION: This snippet creates a basic dot plot using Plotly Express in Python, demonstrating the visualization of medal counts by nation. Prerequisites are the Plotly library and data in long form. It takes nation and count as axes and customizes markers by medal type. The output is a plotted figure displayed through `fig.show()`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dot-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.scatter(df, y=\"nation\", x=\"count\", color=\"medal\", symbol=\"medal\")\nfig.update_traces(marker_size=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Density Heatmap with Box and Violin Marginals\nDESCRIPTION: Generates a density heatmap of Iris dataset with box plot marginal on x-axis and violin plot marginal on y-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.density_heatmap(df, x=\"sepal_length\", y=\"sepal_width\", marginal_x=\"box\", marginal_y=\"violin\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Streamtube Starting Positions and Segments\nDESCRIPTION: Demonstrates how to create a more complex streamtube plot with custom starting positions, size references, and color scales using wind data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/streamtube-plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv').drop(['Unnamed: 0'],axis=1)\n\nfig = go.Figure(data=go.Streamtube(\n    x = df['x'],\n    y = df['y'],\n    z = df['z'],\n    u = df['u'],\n    v = df['v'],\n    w = df['w'],\n    starts = dict(\n        x = [80] * 16,\n        y = [20,30,40,50] * 4,\n        z = [0,0,0,0,5,5,5,5,10,10,10,10,15,15,15,15]\n    ),\n    sizeref = 0.3,\n    colorscale = 'Portland',\n    showscale = False,\n    maxdisplayed = 3000\n))\n\nfig.update_layout(\n    scene = dict(\n        aspectratio = dict(\n            x = 2,\n            y = 1,\n            z = 0.3\n        )\n    ),\n    margin = dict(\n        t = 20,\n        b = 20,\n        l = 20,\n        r = 20\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Polar Chart with Custom Sector using Plotly Graph Objects in Python\nDESCRIPTION: This snippet demonstrates how to create a polar chart with a custom sector using Plotly Graph Objects and subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type': 'polar'}]*2])\n\nfig.add_trace(go.Scatterpolar(), 1, 1)\nfig.add_trace(go.Scatterpolar(), 1, 2)\n\n# Same data for the two Scatterpolar plots, we will only change the sector in the layout\nfig.update_traces(mode = \"lines+markers\",\n      r = [1,2,3,4,5],\n      theta = [0,90,180,360,0],\n      line_color = \"magenta\",\n      marker = dict(\n        color = \"royalblue\",\n        symbol = \"square\",\n        size = 8\n      ))\n\n# The sector is [0, 360] by default, we update it for the first plot only\nfig.update_layout(\n    showlegend = False,\n    polar = dict(# setting parameters for the second plot would be polar2=dict(...)\n      sector = [150,210],\n    ))\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Heatmaps with Parula Colorscale in Plotly\nDESCRIPTION: This code visualizes a set of heatmaps using the Parula colorscale that was previously converted from Matplotlib format. It calls the heatmap_plot function with the parula colorscale and 'PARULA' title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(heatmap_plot(colorscale=parula, title='PARULA'))\n```\n\n----------------------------------------\n\nTITLE: Violin Plot with Categorical Axis\nDESCRIPTION: Demonstrates creating a violin plot with categorical x-axis using tips dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.violin(df, x=\"sex\", y=\"total_bill\", color=\"smoker\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Density Map with Plotly Express\nDESCRIPTION: Demonstrates how to create a basic density map using Plotly Express (px.density_map). The example plots earthquake data with latitude, longitude, and magnitude using OpenStreetMap as the base layer.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/density-heatmaps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nimport plotly.express as px\nfig = px.density_map(df, lat='Latitude', lon='Longitude', z='Magnitude', radius=10,\n                        center=dict(lat=0, lon=180), zoom=0,\n                        map_style=\"open-street-map\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Minor Ticks on the X-axis in Python using plotly.express\nDESCRIPTION: This snippet demonstrates how to enhance the x-axis with minor ticks using the `plotly.express` library, allowing for more granularity in the visualization of stock data over time.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\ndf = px.data.stocks()\nfig = px.line(df, x='date', y=\"GOOG\")\n\nfig.update_xaxes(minor=dict(ticks=\"inside\", showgrid=True))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D Mesh with Alphahull Configuration\nDESCRIPTION: Demonstrates creating a 3D mesh using the alpha-shape algorithm by setting alphahull=5. The mesh is rendered in cyan with 40% opacity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-mesh.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\npts = np.loadtxt(np.DataSource().open('https://raw.githubusercontent.com/plotly/datasets/master/mesh_dataset.txt'))\nx, y, z = pts.T\n\nfig = go.Figure(data=[go.Mesh3d(x=x, y=y, z=z,\n                   alphahull=5,\n                   opacity=0.4,\n                   color='cyan')])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Multi-country 3D Line Plot with Color Coding\nDESCRIPTION: Creates a 3D line plot for European countries with color differentiation by country, visualizing GDP per capita, population, and year relationships.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-line-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"continent=='Europe'\")\nfig = px.line_3d(df, x=\"gdpPercap\", y=\"pop\", z=\"year\", color='country')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Colorscale and Image Representation\nDESCRIPTION: Demonstrates techniques for customizing colorscales, converting images to grayscale, and controlling binary string representation\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nimg = np.arange(100).reshape((10, 10))\nfig = px.imshow(img, color_continuous_scale='gray')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Histogram with Text Labels\nDESCRIPTION: This snippet demonstrates adding text labels to histogram bars, displaying the values directly on the bars. The `text_auto` argument enables this feature. Formatting can be controlled with a `d3-format` string.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", y=\"tip\", histfunc=\"avg\", nbins=8, text_auto=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hiding Traces Initially in Plotly Graph Objects\nDESCRIPTION: This snippet shows how to hide a trace initially by setting its 'visible' attribute to 'legendonly'. It creates two scatter plots with one hidden initially.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n    visible='legendonly'\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Colors in Plotly Table, Python\nDESCRIPTION: This example illustrates how to customize font colors in a Plotly table using the `font_colors` parameter in `ff.create_table`. The `font_colors` list corresponds to the colors for each row of the table. It also sets a fixed width to `fig.layout.width`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\ntext = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]\n\ncolorscale = [[0, '#272D31'],[.5, '#ffffff'],[1, '#ffffff']]\nfont=['#FCFCFC', '#00EE00', '#008B00', '#004F00', '#660000', '#CD0000', '#FF3030']\n\nfig = ff.create_table(text, colorscale=colorscale, font_colors=font)\nfig.layout.width=250\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: North American Precipitation Map\nDESCRIPTION: Creates a detailed precipitation map of North America with custom color scaling and extensive geographic configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/scatter-plots-on-maps.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv')\n\nscl = [0,\"rgb(150,0,90)\"],[0.125,\"rgb(0, 0, 200)\"],[0.25,\"rgb(0, 25, 255)\"],\\\n[0.375,\"rgb(0, 152, 255)\"],[0.5,\"rgb(44, 255, 150)\"],[0.625,\"rgb(151, 255, 0)\"],\\\n[0.75,\"rgb(255, 234, 0)\"],[0.875,\"rgb(255, 111, 0)\"],[1,\"rgb(255, 0, 0)\"]\n\nfig = go.Figure(data=go.Scattergeo(\n    lat = df['Lat'],\n    lon = df['Lon'],\n    text = df['Globvalue'].astype(str) + ' inches',\n    marker = dict(\n        color = df['Globvalue'],\n        colorscale = scl,\n        reversescale = True,\n        opacity = 0.7,\n        size = 2,\n        colorbar = dict(\n            title = dict(\n                side=\"right\"\n            ),\n            outlinecolor = \"rgba(68, 68, 68, 0)\",\n            ticks = \"outside\",\n            showticksuffix = \"last\",\n            dtick = 0.1\n        )\n    )\n))\n\nfig.update_layout(\n    geo = dict(\n        scope = 'north america',\n        showland = True,\n        landcolor = \"rgb(212, 212, 212)\",\n        subunitcolor = \"rgb(255, 255, 255)\",\n        countrycolor = \"rgb(255, 255, 255)\",\n        showlakes = True,\n        lakecolor = \"rgb(255, 255, 255)\",\n        showsubunits = True,\n        showcountries = True,\n        resolution = 50,\n        projection = dict(\n            type = 'conic conformal',\n            rotation_lon = -100\n        ),\n        lonaxis = dict(\n            showgrid = True,\n            gridwidth = 0.5,\n            range= [ -140.0, -55.0 ],\n            dtick = 5\n        ),\n        lataxis = dict (\n            showgrid = True,\n            gridwidth = 0.5,\n            range= [ 20.0, 60.0 ],\n            dtick = 5\n        )\n    ),\n    title=dict(text='US Precipitation 06-30-2015<br>Source: <a href=\"http://water.weather.gov/precip/\">NOAA</a>'),\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Waterfall Chart Marker Size and Color in Python\nDESCRIPTION: This code illustrates how to customize the marker colors and sizes in a waterfall chart. It specifies properties for decreasing and increasing marker styles as well as total bars, showcasing a visual distinction in the chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/waterfall-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Waterfall(\n    x = [[\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n       [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\"]],\n    measure = [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n    y = [10, 20, 30, -10, None, 10, 20, -40, None], base = 300,\n    decreasing = {\"marker\":{\"color\":\"Maroon\", \"line\":{\"color\":\"red\", \"width\":2}}},\n    increasing = {\"marker\":{\"color\":\"Teal\"}},\n    totals = {\"marker\":{\"color\":\"deep sky blue\", \"line\":{\"color\":\"blue\", \"width\":3}}}\n))\n\nfig.update_layout(title = \"Profit and loss statement\", waterfallgap = 0.3)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Surface Data with NumPy\nDESCRIPTION: Define surface coordinates and height values using NumPy meshgrid and mathematical functions\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/2d-projection-of-3d-surface.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nxx=np.linspace(-3.5, 3.5, 100)\nyy=np.linspace(-3.5, 3.5, 100)\nx,y=np.meshgrid(xx, yy)\nz=np.exp(-(x-1)**2-y**2)-10*(x**3+y**4-x/5)*np.exp(-(x**2+y**2))\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Layout with 3D Scene Parameters\nDESCRIPTION: Set up a detailed 3D plot layout with custom axis properties, size, and aspect ratio\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/2d-projection-of-3d-surface.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naxis = dict(\nshowbackground=True,\nbackgroundcolor=\"rgb(230, 230,230)\",\nshowgrid=False,\nzeroline=False,\nshowline=False)\n\nztickvals=list(range(-6,4))\nlayout = go.Layout(title=\"Projections of a surface onto coordinate planes\" ,\n                autosize=False,\n                width=700,\n                height=600,\n                scene=dict(xaxis=dict(axis, range=[-3.5, 3.5]),\n                            yaxis=dict(axis, range=[-3.5, 3.5]),\n                            zaxis=dict(axis , tickvals=ztickvals),\n                            aspectratio=dict(x=1,\n                                             y=1,\n                                             z=0.95)\n                           )\n                )\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Funnel Chart with go.Funnel in Python\nDESCRIPTION: This snippet uses the 'go.Funnel' class from 'plotly.graph_objects' to create a basic funnel chart without relying on Plotly Express. It's useful for scenarios requiring more customization that Plotly Express may not provide. The primary dependency is the graph_objects module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\nfig = go.Figure(go.Funnel(\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\"],\n    x = [39, 27.4, 20.6, 11, 2]))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Changing Camera View Point and Perspective\nDESCRIPTION: Demonstrates multiple techniques for adjusting camera position in 3D surface plots by modifying eye coordinates\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-camera-controls.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\nfig = go.Figure(data=go.Surface(z=z_data, showscale=False))\nfig.update_layout(\n    title=dict(text='Mt Bruno Elevation'),\n    width=400, height=400,\n    margin=dict(t=30, r=0, l=20, b=10)\n)\n\nname = 'eye = (x:2, y:2, z:0.1)'\ncamera = dict(\n    eye=dict(x=2, y=2, z=0.1)\n)\n\nfig.update_layout(scene_camera=camera, title=name)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Ternary Contour Plot with Lines Only\nDESCRIPTION: This snippet generates a ternary contour plot displaying only the contour lines, without solid coloring. This is achieved by setting the `coloring` parameter to `'lines'` in the `create_ternary_contour` function.  This provides a clearer visualization of the contour lines themselves.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-contour.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\nAl = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])\nCu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])\nY = 1 - Al - Cu\n# synthetic data for mixing enthalpy\n# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html\nenthalpy = 2.e6 * (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2 - 5000\nfig = ff.create_ternary_contour(np.array([Al, Y, Cu]), enthalpy,\n                                pole_labels=['Al', 'Y', 'Cu'],\n                                interp_mode='cartesian',\n                                ncontours=20,\n                                coloring='lines')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Bar Corner Radius with Subplots\nDESCRIPTION: Shows how to set different corner radii for individual bar traces using marker.cornerradius property with subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly import data\n\ndf = data.medals_wide()\n\nfig = make_subplots(rows=1, cols=3, shared_yaxes=True)\n\nfig.add_trace(\n    go.Bar(x=df.nation, y=df.gold, name=\"Gold\", marker=dict(cornerradius=30)), 1, 1\n)\nfig.add_trace(\n    go.Bar(x=df.nation, y=df.silver, name=\"Silver\", marker=dict(cornerradius=\"30%\")),\n    1,\n    2,\n)\n\nfig.add_trace(\n    go.Bar(x=df.nation, y=df.bronze, name=\"Bronze\"),\n    1,\n    3,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Splom with Hidden Diagonal Plots\nDESCRIPTION: Creates a scatterplot matrix with diagonal plots removed using the diagonal_visible parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv')\nindex_vals = df['class'].astype('category').cat.codes\n\nfig = go.Figure(data=go.Splom(\n                dimensions=[dict(label='sepal length',\n                                 values=df['sepal length']),\n                            dict(label='sepal width',\n                                 values=df['sepal width']),\n                            dict(label='petal length',\n                                 values=df['petal length']),\n                            dict(label='petal width',\n                                 values=df['petal width'])],\n                diagonal_visible=False,\n                text=df['class'],\n                marker=dict(color=index_vals,\n                            showscale=False,\n                            line_color='white', line_width=0.5)\n                ))\n\nfig.update_layout(\n    title=dict(text='Iris Data set'),\n    width=600,\n    height=600,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Figures with Subplots - Python\nDESCRIPTION: This snippet demonstrates how to create a figure with subplots using the new default theme introduced in version 4. It utilizes the `make_subplots` function and adds different trace types, including bar and surface types.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\n# Make figure with subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"bar\"},\n                                            {\"type\": \"surface\"}]])\n\n# Add bar traces to subplot (1, 1)\nfig.add_trace(go.Bar(y=[2, 1, 3]), row=1, col=1)\nfig.add_trace(go.Bar(y=[3, 2, 1]), row=1, col=1)\nfig.add_trace(go.Bar(y=[2.5, 2.5, 3.5]), row=1, col=1)\n\n# Add surface trace to subplot (1, 2)\n# Read data from a csv\nz_data = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv\")\nfig.add_surface(z=z_data)\n\n# Hide legend\nfig.update_layout(\n    showlegend=False,\n    title_text=\"Default Theme\",\n    height=500,\n    width=800,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a bar chart from wide-form data\nDESCRIPTION: This snippet creates a bar chart using a wide-form dataset and specifies multiple columns for the `y` parameter to trigger wide-form processing. Outputs a figure object with the specified title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], title=\"Wide-Form Input\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Drawing Buttons to Modebar in Plotly Python\nDESCRIPTION: This code shows how to add optional shape-drawing buttons to the modebar in a Plotly figure using the modeBarButtonsToAdd configuration option.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x='petal_width', y='sepal_length', color='species')\n\nfig.update_layout(\n    dragmode='drawopenpath',\n    newshape_line_color='cyan',\n    title_text='Draw a path to separate versicolor and virginica'\n)\n\nfig.show(config={'modeBarButtonsToAdd': ['drawline',\n                                        'drawopenpath',\n                                        'drawclosedpath',\n                                        'drawcircle',\n                                        'drawrect',\n                                        'eraseshape'\n                                       ]})\n```\n\n----------------------------------------\n\nTITLE: Customizing Subplot Dimensions in Plotly Python\nDESCRIPTION: Shows how to customize subplot column widths using the column_widths parameter in make_subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2, column_widths=[0.7, 0.3])\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),\n              row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),\n              row=1, col=2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Zero Lines in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates how to configure the appearance of zero lines on the axes of a Plotly Express line plot. It uses `update_xaxes` and `update_yaxes` to set the `zeroline`, `zerolinewidth`, and `zerolinecolor` properties. The resulting plot will display zero lines with the specified width and color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.line(y=[1, 0])\n\nfig.update_xaxes(zeroline=True, zerolinewidth=2, zerolinecolor='LightPink')\nfig.update_yaxes(zeroline=True, zerolinewidth=2, zerolinecolor='LightPink')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Chart with Patterns using Plotly Express\nDESCRIPTION: This example shows how to create an area chart with patterns using px.area() where both color and pattern shape encode the 'nation' variable, providing multiple visual cues for the same data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.area(df, x=\"medal\", y=\"count\", color=\"nation\", pattern_shape=\"nation\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Tree Graph with igraph\nDESCRIPTION: This snippet demonstrates creating a tree graph using the igraph library. It initializes a tree with a specified number of vertices and children, calculates node positions using a layout algorithm, and extracts edge information for plotting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tree-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"import igraph\nfrom igraph import Graph, EdgeSeq\nnr_vertices = 25\nv_label = list(map(str, range(nr_vertices)))\nG = Graph.Tree(nr_vertices, 2) # 2 stands for children number\nlay = G.layout('rt')\n\nposition = {k: lay[k] for k in range(nr_vertices)}\nY = [lay[k][1] for k in range(nr_vertices)]\nM = max(Y)\n\nes = EdgeSeq(G) # sequence of edges\nE = [e.tuple for e in G.es] # list of edges\n\nL = len(position)\nXn = [position[k][0] for k in range(L)]\nYn = [2*M-position[k][1] for k in range(L)]\nXe = []\nYe = []\nfor edge in E:\n    Xe+=[position[edge[0]][0],position[edge[1]][0], None]\n    Ye+=[2*M-position[edge[0]][1],2*M-position[edge[1]][1], None]\n\nlabels = v_label\"\n```\n\n----------------------------------------\n\nTITLE: Adding Source Lines and Figure Notes\nDESCRIPTION: Demonstrates how to add source notes at the bottom of a figure using container coordinates and create a figure title using annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig.update_layout(\n        title=dict(text=\"Note: this is the Plotly title element.\",\n                 yref=\"container\",\n                 y=0.005,\n                 xref=\"paper\",\n                 xanchor=\"right\",\n                 x=1, \n                 font=dict(size=12)),\n                plot_bgcolor=\"white\",\n  legend=dict(\n                yanchor=\"top\",\n                y=1,\n                xanchor=\"right\",\n                x=1,\n                borderwidth=1)\n                )\n\nfig.add_annotation(\n    yref=\"paper\",\n    yanchor=\"bottom\",\n    y=1.025,\n    text=\"This title is a Plotly annotation\",\n    xref=\"paper\",\n    xanchor=\"center\",\n    x=0.5, \n    showarrow=False,\n    font=dict(size=18)\n    )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Probability Distribution in Plotly\nDESCRIPTION: Generates a histogram with the y-axis representing the probability distribution of alcohol consumption data. Uses custom bin sizes and styling for the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = data['alcohol'].values.tolist()\n\ntrace = go.Histogram(x=x, histnorm='probability',\n                     xbins=dict(start=np.min(x),\n                                size=0.25,\n                                end=np.max(x)),\n                     marker=dict(color='rgb(25, 25, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram with Probability Distribution\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-prob-dist')\n```\n\n----------------------------------------\n\nTITLE: Customized Volcano Plot with Modified Visual Parameters\nDESCRIPTION: Creates a volcano plot with customized visual parameters including larger point sizes and modified line widths for effect size and genome-wide lines. Demonstrates how to adjust the visual appearance of the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-volcano-plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport dash_bio\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/volcano_data1.csv')\n\ndash_bio.VolcanoPlot(\n    dataframe=df,\n    point_size=10,\n    effect_size_line_width=4,\n    genomewideline_width=2\n)\n```\n\n----------------------------------------\n\nTITLE: Forcing Categorical Axis Type in Plotly Bar Chart\nDESCRIPTION: Example showing how to force an axis to be categorical type using update_xaxes() when automatic detection would default to linear.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"a\", \"b\", 3], y = [1,2,3,4])\nfig.update_xaxes(type='category')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling density contour plots with Plotly Express\nDESCRIPTION: This snippet shows how to style the density contour plot in Plotly Express. It updates the traces to fill the contours with color (`contours_coloring=\"fill\"`) and show labels on the contours (`contours_showlabels = True`), enhancing the plot's readability.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_contour(df, x=\"total_bill\", y=\"tip\")\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels = True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 2D t-SNE Projection with Plotly Scatter Plot\nDESCRIPTION: Implements t-SNE dimensionality reduction to project Iris dataset features into 2D space and visualizes results using a scatter plot. Uses scikit-learn's TSNE implementation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-tsne-umap-projections.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.manifold import TSNE\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfeatures = df.loc[:, :'petal_width']\n\ntsne = TSNE(n_components=2, random_state=0)\nprojections = tsne.fit_transform(features)\n\nfig = px.scatter(\n    projections, x=0, y=1,\n    color=df.species, labels={'color': 'species'}\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Long Format Bar Chart\nDESCRIPTION: Creates a bar chart using long-format data with medals data, showing count by nation and medal type.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nlong_df = px.data.medals_long()\n\nfig = px.bar(long_df, x=\"nation\", y=\"count\", color=\"medal\", title=\"Long-Form Input\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Fully Styled Box Plots with NBA Data in Plotly Python\nDESCRIPTION: Demonstrates creating fully styled box plots with custom colors, markers, and layout settings using NBA player scoring data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx_data = ['Carmelo Anthony', 'Dwyane Wade',\n          'Deron Williams', 'Brook Lopez',\n          'Damian Lillard', 'David West',]\n\nN = 50\n\ny0 = (10 * np.random.randn(N) + 30).astype(int)\ny1 = (13 * np.random.randn(N) + 38).astype(int)\ny2 = (11 * np.random.randn(N) + 33).astype(int)\ny3 = (9 * np.random.randn(N) + 36).astype(int)\ny4 = (15 * np.random.randn(N) + 31).astype(int)\ny5 = (12 * np.random.randn(N) + 40).astype(int)\n\ny_data = [y0, y1, y2, y3, y4, y5]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)',\n          'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\n\nfig = go.Figure()\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        fig.add_trace(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker_size=2,\n            line_width=1)\n        )\n\nfig.update_layout(\n    title=dict(text='Points Scored by the Top 9 Scoring NBA Players in 2012'),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=5,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)',\n    showlegend=False\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: 3D Mesh Cube with Vertex Intensity\nDESCRIPTION: Creates a cube mesh with 8 vertices and defines triangles manually. Uses vertex-based intensity interpolation for coloring.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-mesh.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nfig = go.Figure(data=[\n    go.Mesh3d(\n        x=[0, 0, 1, 1, 0, 0, 1, 1],\n        y=[0, 1, 1, 0, 0, 1, 1, 0],\n        z=[0, 0, 0, 0, 1, 1, 1, 1],\n        colorbar=dict(title=dict(text='z')),\n        colorscale=[[0, 'gold'],\n                    [0.5, 'mediumturquoise'],\n                    [1, 'magenta']],\n        intensity = np.linspace(0, 1, 8, endpoint=True),\n        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],\n        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],\n        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],\n        name='y',\n        showscale=True\n    )\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Text Labels for Shapes in Plotly\nDESCRIPTION: This code shows how to customize the appearance of text labels on shapes by configuring the 'font' property. It demonstrates setting different colors, sizes, and font families for labels on rectangles and lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor='MediumSlateBlue',\n    x0=1,\n    y0=1,\n    x1=2,\n    y1=3,\n    label=dict(text=\"Text in rectangle\", font=dict(color=\"DarkOrange\")),\n)\nfig.add_shape(\n    type=\"line\",\n    x0=3,\n    y0=0.5,\n    x1=5,\n    y1=0.8,\n    line_width=3,\n    label=dict(text=\"Text above line\", font=dict(size=20)),\n)\nfig.add_shape(\n    type=\"rect\",\n    fillcolor='Lavender',\n    x0=2.5,\n    y0=2.5,\n    x1=5,\n    y1=3.5,\n    label=dict(\n        text=\"Text in rectangle 2\", font=dict(family=\"Courier New, monospace\", size=20)\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Reversing Axes with Range and Max Autorange in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates using a reversed axis while specifying only an upper bound for the range.  It sets `autorange=\"max reversed\"` and provides the lower bound in the `range` property as the second element in the list with `None` as the first to enable auto range for the minimum value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(range=[None, 3], autorange=\"max reversed\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Matrix Multiplication Implementation\nDESCRIPTION: Shows how to multiply two matrices using NumPy's matrix multiplication operator and visualize the result with a heatmap.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmatrix1 = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\nmatrix2 = np.matrix(\n    [[-1, 2],\n     [1, -2]]\n)\n\nmatrix_prod = matrix1 * matrix2\n\ncolorscale = [[0, '#F1FFD9'], [1, '#8BDBF5']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(matrix_prod.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='matrix-prod')\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Template Module in Python\nDESCRIPTION: Shows how to create a separate Python module file (my_themes.py) that defines and registers a custom template. This template can then be imported and used in other scripts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\npio.templates[\"draft\"] = go.layout.Template(\n    layout_annotations=[\n        dict(\n            name=\"draft watermark\",\n            text=\"DRAFT\",\n            textangle=-30,\n            opacity=0.1,\n            font=dict(color=\"black\", size=100),\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=0.5,\n            showarrow=False,\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing High-Dimensional Data with Scatter Matrix in Python\nDESCRIPTION: This snippet uses Plotly Express to create a scatter matrix plot of the Iris dataset, showing relationships between all original features colored by species.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-pca.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfeatures = [\"sepal_width\", \"sepal_length\", \"petal_width\", \"petal_length\"]\n\nfig = px.scatter_matrix(\n    df,\n    dimensions=features,\n    color=\"species\"\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Annotations in Plotly Python\nDESCRIPTION: Demonstrates how to add text annotations to scatter plots in a subplot layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[4, 5, 6],\n        mode=\"markers+text\",\n        text=[\"Text A\", \"Text B\", \"Text C\"],\n        textposition=\"bottom center\"\n    ),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=[20, 30, 40],\n        y=[50, 60, 70],\n        mode=\"markers+text\",\n        text=[\"Text D\", \"Text E\", \"Text F\"],\n        textposition=\"bottom center\"\n    ),\n    row=1, col=2\n)\n\nfig.update_layout(height=600, width=800, title_text=\"Subplots with Annotations\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing 'Download Plot' Button in Plotly Python\nDESCRIPTION: This snippet demonstrates how to customize the 'Download Plot' button in the modebar, including changing the format, filename, dimensions, and scale of the downloaded image.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nconfig = {\n  'toImageButtonOptions': {\n    'format': 'svg', # one of png, svg, jpeg, webp\n    'filename': 'custom_image',\n    'height': 500,\n    'width': 700,\n    'scale': 1 # Multiply title/legend/axis/canvas sizes by this factor\n  }\n}\n\nfig = px.bar(x=[1, 2, 3], y=[1, 3, 1])\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Customizing Tick Label Formatting by Zoom Level in Plotly\nDESCRIPTION: This example demonstrates how to customize the formatting of tick labels based on the zoom level using the tickformatstops attribute in Plotly. It shows different formatting for various time ranges.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(go.Scatter(\n    x = df['Date'],\n    y = df['mavg']\n))\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    tickformatstops = [\n        dict(dtickrange=[None, 1000], value=\"%H:%M:%S.%L ms\"),\n        dict(dtickrange=[1000, 60000], value=\"%H:%M:%S s\"),\n        dict(dtickrange=[60000, 3600000], value=\"%H:%M m\"),\n        dict(dtickrange=[3600000, 86400000], value=\"%H:%M h\"),\n        dict(dtickrange=[86400000, 604800000], value=\"%e. %b d\"),\n        dict(dtickrange=[604800000, \"M1\"], value=\"%e. %b w\"),\n        dict(dtickrange=[\"M1\", \"M12\"], value=\"%b '%y M\"),\n        dict(dtickrange=[\"M12\", None], value=\"%Y Y\")\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Automatic Zooming with Fitbounds\nDESCRIPTION: This snippet demonstrates how to automatically adjust the map's center and latitude/longitude range to fit the plotted data using the `fitbounds` attribute. It creates a line geo plot and sets `fitbounds` to \"locations\".\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.line_geo(lat=[0,15,20,35], lon=[5,10,25,30])\nfig.update_geos(fitbounds=\"locations\")\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Prevent automatic color mapping in Plotly Express\nDESCRIPTION: Example of disabling automatic color mapping in Plotly Express when mapping variable data to a different argument than color using `px.NO_COLOR`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide(indexed=False)\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], facet_col=\"variable\", color=px.NO_COLOR)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing a Bullet Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a highly customized bullet chart. It includes custom colors, fonts, and styling for various elements of the chart, such as the delta, title, and gauge components.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bullet-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"number+gauge+delta\", value = 220,\n    domain = {'x': [0, 1], 'y': [0, 1]},\n    delta = {'reference': 280, 'position': \"top\"},\n    title = {'text':\"<b>Profit</b><br><span style='color: gray; font-size:0.8em'>U.S. $</span>\", 'font': {\"size\": 14}},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, 300]},\n        'threshold': {\n            'line': {'color': \"red\", 'width': 2},\n            'thickness': 0.75, 'value': 270},\n        'bgcolor': \"white\",\n        'steps': [\n            {'range': [0, 150], 'color': \"cyan\"},\n            {'range': [150, 250], 'color': \"royalblue\"}],\n        'bar': {'color': \"darkblue\"}}))\nfig.update_layout(height = 250)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Map Scope and Showing Subunits\nDESCRIPTION: This code snippet shows how to set the map's scope to a specific region (e.g., 'north america') and display country sub-units like states or provinces. It customizes the colors of countries and subunits using `countrycolor` and `subunitcolor`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(\n    visible=False, resolution=50, scope=\"north america\",\n    showcountries=True, countrycolor=\"Black\",\n    showsubunits=True, subunitcolor=\"Blue\"\n)\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating basic density contour plot with Plotly Express\nDESCRIPTION: This snippet creates a density contour plot using Plotly Express with 'total_bill' on the x-axis and 'tip' on the y-axis from the tips dataset. It demonstrates the basic usage of `px.density_contour()` to visualize the density of data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.density_contour(df, x=\"total_bill\", y=\"tip\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Choropleth Map with Simplified County and State Outlines\nDESCRIPTION: This code snippet creates a choropleth map for Oregon with parameters that simplify the outlines of counties and states. The snippet includes detailed settings for colorscale and titles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\nscope = ['Oregon']\ndf_sample = pd.read_csv(\n    'https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv'\n)\ndf_sample_r = df_sample[df_sample['STNAME'].isin(scope)]\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\ncolorscale = [\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\",\n              \"#80b1d3\", \"#fdb462\", \"#b3de69\", \"#fccde5\",\n              \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\",\n              \"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\",\n              \"#80b1d3\", \"#fdb462\", \"#b3de69\", \"#fccde5\",\n              \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\",\n              \"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\",\n              \"#80b1d3\", \"#fdb462\", \"#b3de69\", \"#fccde5\",\n              \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\"]\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=scope,\n    colorscale=colorscale, round_legend_values=True,\n    simplify_county=0, simplify_state=0,\n    county_outline={'color': 'rgb(15, 15, 55)', 'width': 0.5},\n    state_outline={'width': 1},\n    legend_title='pop. per county',\n    title='Oregon'\n)\n\nfig.layout.template = None\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Saving Scatter Matrix Plot URL for Report\nDESCRIPTION: Saves the Plotly scatter matrix visualization URL to include in the HTML report. The plot is created with specified dimensions and stored on Plotly's servers without opening in the browser.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsecond_plot_url = py.plot(fig, height=1000, width=1000, auto_open=False,\\\n                          filename='Major technology and CPG stock prices in 2014 - scatter matrix')\nprint second_plot_url\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Heatmap Figure with Plotly\nDESCRIPTION: Constructs the figure for the heatmap animation by defining data, layout, and frames components. The animation displays the contour plots of bivariate normal distributions with varying correlation coefficients.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/heatmap-animation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata=[dict(type='heatmap',\n           xsrc=grid.get_column_reference('x'),\n           ysrc=grid.get_column_reference('y'),\n           zsrc=grid.get_column_reference('z1'),\n           zmin=0,\n           zmax=zvmax[6],\n           zsmooth='best',\n           colorscale=colorscale,\n           colorbar=dict(thickness=20, ticklen=4))]\n\ntitle='Contour plot for bivariate normal distribution'+\\\n'<br> N(m=[0,0], sigma=[1,1], rho in (-1, 1))'\n\nlayout = dict(title=title,\n              autosize=False,\n              height=600,\n              width=600,\n              hovermode='closest',\n              xaxis=dict(range=[-3, 3], autorange=False),\n              yaxis=dict(range=[-3, 3], autorange=False),\n              showlegend=False,\n              updatemenus=[dict(type='buttons', showactive=False,\n                                y=1, x=-0.05, xanchor='right',\n                                yanchor='top', pad=dict(t=0, r=10),\n                                buttons=[dict(label='Play',\n                                              method='animate',\n                                              args=[None,\n                                                    dict(frame=dict(duration=100,\n                                                                    redraw=True),\n                                                    transition=dict(duration=0),\n                                                    fromcurrent=True,\n                                                    mode='immediate')])])])\n\nframes=[dict(data=[dict(zsrc=grid.get_column_reference('z{}'.format(k + 1)),\n                        zmax=zvmax[k])],\n                        traces=[0],\n                        name='frame{}'.format(k),\n                        ) for k in range(len(correls))]\n\n\nfig=dict(data=data, layout=layout, frames=frames)\npy.icreate_animations(fig, filename='animheatmap'+str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Displaying Nuclear Waste Sites on Campuses in Python\nDESCRIPTION: This code snippet reads a CSV file containing nuclear waste site data and visualizes these locations on a scatter map, demonstrating dynamic data loading and marker customization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Nuclear%20Waste%20Sites%20on%20American%20Campuses.csv')\nsite_lat = df.lat\nsite_lon = df.lon\nlocations_name = df.text\n\nfig = go.Figure()\n\nfig.add_trace(go.Scattermap(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=go.scattermap.Marker(\n            size=17,\n            color='rgb(255, 0, 0)',\n            opacity=0.7\n        ),\n        text=locations_name,\n        hoverinfo='text'\n    ))\n\nfig.add_trace(go.Scattermap(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=go.scattermap.Marker(\n            size=8,\n            color='rgb(242, 177, 172)',\n            opacity=0.7\n        ),\n        hoverinfo='none'\n    ))\n\nfig.update_layout(\n    title=dict(text='Nuclear Waste Sites on Campus'),\n    autosize=True,\n    hovermode='closest',\n    showlegend=False,\n    map=dict(\n        bearing=0,\n        center=dict(\n            lat=38,\n            lon=-94\n        ),\n        pitch=0,\n        zoom=3,\n        style='light'\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Line Plot with Symbol Mapping using Plotly Express\nDESCRIPTION: This snippet creates a line plot using `plotly.express` and maps a data column to the marker symbol. The 'country' column is mapped to the `symbol` argument, causing each line to have a unique marker, enhancing visual differentiation of the lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\\\"continent == 'Oceania'\\\")\nfig = px.line(df, x='year', y='lifeExp', color='country', symbol=\\\"country\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Zorder to Layer Traces - Python Plotly Graph Objects\nDESCRIPTION: This snippet explains how to use the `zorder` attribute to control the stacking order of traces in a Plotly figure. It defines a bar trace and an area trace, adjusting their visual output by setting the `zorder` appropriately.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/graphing-multiple-chart-types.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\ny_bar = [10, 15, 7, 10, 17, 15, 14, 20, 16, 19, 15, 17]\ny_area = [12, 13, 10, 14, 15, 13, 16, 18, 15, 17, 14, 16]\n\narea_trace = go.Scatter(\n    x=x,\n    y=y_area,\n    fill=\"tozeroy\",\n    mode=\"lines+markers\",\n    name=\"Area Trace with default `zorder` of 0\",\n    line=dict(color=\"lightsteelblue\"),\n)\n\nbar_trace = go.Bar(\n    x=x,\n    y=y_bar,\n    name=\"Bar Trace with `zorder` of 1\",\n    zorder=1,\n    marker=dict(color=\"lightslategray\"),\n)\n\nfig = go.Figure(data=[area_trace, bar_trace])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Hover Text Using Plotly in Python\nDESCRIPTION: This example shows the use of the hovertext argument within plotly.graph_objects to add detailed tooltips to bar charts. Additional data insights are displayed when hovering over individual bars, enhancing the information density of the chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx = ['Product A', 'Product B', 'Product C']\ny = [20, 14, 23]\n\n# Use the hovertext kw argument for hover text\nfig = go.Figure(data=[go.Bar(x=x, y=y,\n            hovertext=['27% market share', '24% market share', '19% market share'])])\n# Customize aspect\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.update_layout(title_text='January 2013 Sales Report')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Box Plot with Custom Quartile Method\nDESCRIPTION: Demonstrates how to use different quartile calculation methods (exclusive) for box plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\n\nfig = px.box(df, x=\"day\", y=\"total_bill\", color=\"smoker\")\nfig.update_traces(quartilemethod=\"exclusive\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Magic Underscore Notation in Selectors\nDESCRIPTION: Demonstrates the use of magic underscore notation in `update_traces()` to update traces by matching existing nested properties. Targets traces with a specific marker color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_scatter(y=[4, 2, 3.5], mode=\"markers\",\n                marker=dict(size=20, color=\"LightSeaGreen\"),\n                name=\"a\", row=1, col=1)\n\nfig.add_bar(y=[2, 1, 3],\n            marker=dict(color=\"MediumPurple\"),\n            name=\"b\", row=1, col=1)\n\nfig.add_scatter(y=[2, 3.5, 4], mode=\"markers\",\n                marker=dict(size=20, color=\"MediumPurple\"),\n                name=\"c\", row=1, col=2)\n\nfig.add_bar(y=[1, 3, 2],\n            marker=dict(color=\"LightSeaGreen\"),\n            name=\"d\", row=1, col=2)\n\nfig.update_traces(marker_color=\"RoyalBlue\",\n                  selector=dict(marker_color=\"MediumPurple\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Choropleth Map with Plotly Graph Objects in Python\nDESCRIPTION: Shows how to use Plotly Graph Objects to create a choropleth map, providing a more detailed control over the plot. Integrates GeoJSON and data manipulation with Plotly's `go.Figure` for customization beyond Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Choroplethmap(geojson=counties, locations=df.fips, z=df.unemp,\n                                    colorscale=\"Viridis\", zmin=0, zmax=12,\n                                    marker_opacity=0.5, marker_line_width=0))\nfig.update_layout(map_style=\"carto-positron\",\n                  map_zoom=3, map_center = {\"lat\": 37.0902, \"lon\": -95.7129})\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Font Size in Sunburst Chart using Plotly\nDESCRIPTION: This example shows how to control text font size in a sunburst chart using the 'uniformtext' layout parameter. It sets a minimum font size and specifies how to handle overflow text.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')\n\nfig = go.Figure(go.Sunburst(\n        ids = df.ids,\n        labels = df.labels,\n        parents = df.parents))\nfig.update_layout(uniformtext=dict(minsize=10, mode='hide'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Categorical Axis Type in Plotly Python\nDESCRIPTION: Example showing how to force an axis type to be categorical using update_xaxes() method. The code creates a bar chart with mixed string and numeric x-values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"a\", \"b\", 3], y = [1,2,3,4])\nfig.update_xaxes(type='category')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a bar chart from long-form data\nDESCRIPTION: This code snippet creates a bar chart using a long-form dataset with Plotly Express. It specifies the `x` and `y` parameters to map data columns to axes and applies a color differentiation by the 'medal' column. Outputs a figure object.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nlong_df = px.data.medals_long()\n\nfig = px.bar(long_df, x=\"nation\", y=\"count\", color=\"medal\", title=\"Long-Form Input\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled Box Plot with Notches\nDESCRIPTION: Creates a styled box plot with notches and custom hover data showing total bills by time and smoker status.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.box(df, x=\"time\", y=\"total_bill\", color=\"smoker\",\n             notched=True,\n             title=\"Box plot of total bill\",\n             hover_data=[\"day\"]\n            )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using RGBA Colors for Marker Opacity\nDESCRIPTION: Shows how to use RGBA color values to control marker opacity while keeping marker borders opaque. Uses rgba(135, 206, 250, 0.5) to create semi-transparent light blue markers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Generate example data\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=6, size=(500,))\n\n\n# Build figure\nfig = go.Figure()\n\n# Add scatter trace with medium sized markers\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=x,\n        y=y,\n        marker=dict(\n            color='rgba(135, 206, 250, 0.5)',\n            size=20,\n            line=dict(\n                color='MediumPurple',\n                width=2\n            )\n        ),\n        showlegend=False\n    )\n)\n\n\n# Add trace with large markers\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=[2, 2],\n        y=[4.25, 4.75],\n        marker=dict(\n            color='rgba(135, 206, 250, 0.5)',\n            size=80,\n            line=dict(\n                color='MediumPurple',\n                width=8\n            )\n        ),\n        showlegend=False\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled Scatterplot Matrix with Multiple Customizations\nDESCRIPTION: Creates a fully styled scatterplot matrix with custom title, labels, symbols, and hidden diagonal plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_matrix(df,\n    dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\n    color=\"species\", symbol=\"species\",\n    title=\"Scatter matrix of iris data set\",\n    labels={col:col.replace('_', ' ') for col in df.columns})\nfig.update_traces(diagonal_visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot Using Dictionary with Nested Dictionary\nDESCRIPTION: This example demonstrates how to create a Scatter plot using dictionaries for both the trace and its marker property.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\ndict(\n    type='scatter',\n    x=[0],\n    y=[0],\n    marker=dict(\n        color='rgb(255,45,15)'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting Gaps in Scatter Plot with Plotly\nDESCRIPTION: This snippet demonstrates how to use the 'connectgaps' parameter in a Plotly scatter plot, allowing users to control whether to connect missing values in the data series. It showcases the difference between series with and without gaps.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x,\n    y=[10, 20, None, 15, 10, 5, 15, None, 20, 10, 10, 15, 25, 20, 10],\n    name = '<b>No</b> Gaps', # Style name/legend entry with html tags\n    connectgaps=True # override default to connect the gaps\n))\nfig.add_trace(go.Scatter(\n    x=x,\n    y=[5, 15, None, 10, 5, 0, 10, None, 15, 5, 5, 10, 20, 15, 5],\n    name='Gaps',\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: JavaScript for dropdown interaction\nDESCRIPTION: This Javascript code listens for changes in the dropdown menu, hides all divs with the class \"content-div\", and then shows the div that corresponds to the selected value in the dropdown. This allows the user to select which Plotly figure to display.  It uses `document.querySelectorAll` to select all divs with the class \"content-div\", and `document.getElementById` to select the div that corresponds to the selected value in the dropdown.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('dropdown').addEventListener('change', function() {\n            const divs = document.querySelectorAll('.content-div');\n            divs.forEach(div =&gt; div.style.display = 'none');\n\n            const selectedDiv = document.getElementById(this.value);\n            if (selectedDiv) {\n                selectedDiv.style.display = 'block';\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Labels with Plotly Express\nDESCRIPTION: Shows how to override default axis labels using the labels parameter in Plotly Express. Uses the tips dataset to create a scatter plot with custom axis titles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"sex\",\n    labels=dict(total_bill=\"Total Bill ($)\", tip=\"Tip ($)\", sex=\"Payer Gender\")\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Exploring Data Attributes of Full Figure - Python\nDESCRIPTION: This snippet showcases how to access the first data entry of a full figure and use help to explore its attributes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(full_fig.data[0])\nhelp(go.Scatter.cliponaxis)\n```\n\n----------------------------------------\n\nTITLE: Customizing Size and Range of Plotly Contour Plots in Python\nDESCRIPTION: This snippet demonstrates how to customize the size and range of contours in a Plotly contour plot. It configures the `contours` dictionary with `start`, `end`, and `size` to control the contour levels displayed.  `start` and `end` specify the minimum and maximum contour values, and `size` sets the interval between contours.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data =\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale='Hot',\n        contours=dict(\n            start=0,\n            end=8,\n            size=2,\n        ),\n    ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: ECDF Plot with Only Markers\nDESCRIPTION: Creates an ECDF plot with markers but without connecting lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", color=\"sex\", markers=True, lines=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Most Common Complaint Types with Bar Chart\nDESCRIPTION: Retrieves and visualizes the most common complaint types using SQL aggregation and Plotly bar chart with custom layout settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, COUNT(*) as `num_complaints`, Agency '\n                       'FROM data '\n                       'GROUP BY `ComplaintType` '\n                       'ORDER BY -num_complaints', disk_engine)\n\n\nmost_common_complaints = df # used later\npy.iplot({\n    'data': [go.Bar(x=df['ComplaintType'], y=df.num_complaints)],\n    'layout': {\n        'margin': {'b': 150}, # Make the bottom margin a bit bigger to handle the long text\n        'xaxis': {'tickangle': 40}} # Angle the labels a bit\n    }, filename='311/most common complaints by complaint type')\n```\n\n----------------------------------------\n\nTITLE: Generating Mobius Band Trisurf Plot in Python\nDESCRIPTION: Creates a 3D Mobius band surface plot using Plotly's figure factory and Delaunay triangulation with parametric coordinate generation\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/trisurf.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(0, 2*np.pi, 24)\nv = np.linspace(-1, 1, 8)\nu,v = np.meshgrid(u,v)\nu = u.flatten()\nv = v.flatten()\n\ntp = 1 + 0.5*v*np.cos(u/2.)\nx = tp*np.cos(u)\ny = tp*np.sin(u)\nz = 0.5*v*np.sin(u/2.)\n\npoints2D = np.vstack([u,v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\nfig = ff.create_trisurf(x=x, y=y, z=z,\n                         colormap=\"Portland\",\n                         simplices=simplices,\n                         title=dict(text=\"Mobius Band\"))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Ribbon Plot with Spectral Data in Python\nDESCRIPTION: Creates a basic ribbon plot using spectral data loaded from a CSV file. The code processes wavelength data and creates multiple surface traces with color gradients to form the ribbon visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/ribbon-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport urllib\nimport numpy as np\n\nurl = \"https://raw.githubusercontent.com/plotly/datasets/master/spectral.csv\"\nf = urllib.urlopen(url)\nspectra=np.loadtxt(f, delimiter=',')\n\ntraces = []\ny_raw = spectra[:, 0] # wavelength\nsample_size = spectra.shape[1]-1\nfor i in range(1, sample_size):\n    z_raw = spectra[:, i]\n    x = []\n    y = []\n    z = []\n    ci = int(255/sample_size*i) # ci = \"color index\"\n    for j in range(0, len(z_raw)):\n        z.append([z_raw[j], z_raw[j]])\n        y.append([y_raw[j], y_raw[j]])\n        x.append([i*2, i*2+1])\n    traces.append(dict(\n        z=z,\n        x=x,\n        y=y,\n        colorscale=[ [i, 'rgb(%d,%d,255)'%(ci, ci)] for i in np.arange(0,1.1,0.1) ],\n        showscale=False,\n        type='surface',\n    ))\n\nfig = { 'data':traces, 'layout':{'title':'Ribbon Plot'} }\npy.iplot(fig, filename='ribbon-plot-python')\n```\n\n----------------------------------------\n\nTITLE: Defining Color Sets for Pie Charts in Plotly\nDESCRIPTION: This snippet defines lists of RGB color codes for various paintings. These color lists are used later to customize the appearance of pie charts representing color proportions in those paintings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\"# Define color sets of paintings\nnight_colors = ['rgb(56, 75, 126)', 'rgb(18, 36, 37)', 'rgb(34, 53, 101)',\n                'rgb(36, 55, 57)', 'rgb(6, 4, 4)']\nsunflowers_colors = ['rgb(177, 127, 38)', 'rgb(205, 152, 36)', 'rgb(99, 79, 37)',\n                     'rgb(129, 180, 179)', 'rgb(124, 103, 37)']\nirises_colors = ['rgb(33, 75, 99)', 'rgb(79, 129, 102)', 'rgb(151, 179, 100)',\n                 'rgb(175, 49, 35)', 'rgb(36, 73, 147)']\ncafe_colors =  ['rgb(146, 123, 21)', 'rgb(177, 180, 34)', 'rgb(206, 206, 40)',\n                'rgb(175, 51, 21)', 'rgb(35, 36, 21)']\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Multichannel Image Data with Graph Objects\nDESCRIPTION: Shows how to use go.Image trace to display multichannel RGB images using the lower-level graph_objects API\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimg_rgb = [[[255, 0, 0], [0, 255, 0], [0, 0, 255]],\n           [[0, 255, 0], [0, 0, 255], [255, 0, 0]]]\nfig = go.Figure(go.Image(z=img_rgb))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Subplot Axes in Plotly Python\nDESCRIPTION: Demonstrates how to customize individual subplot axes properties including titles, ranges, and grid styles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=2, subplot_titles=(\"Plot 1\", \"Plot 2\", \"Plot 3\", \"Plot 4\")\n)\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6]), row=1, col=1)\nfig.add_trace(go.Scatter(x=[20, 30, 40], y=[50, 60, 70]), row=1, col=2)\nfig.add_trace(go.Scatter(x=[300, 400, 500], y=[600, 700, 800]), row=2, col=1)\nfig.add_trace(go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]), row=2, col=2)\n\nfig.update_xaxes(title_text=\"xaxis 1 title\", row=1, col=1)\nfig.update_xaxes(title_text=\"xaxis 2 title\", range=[10, 50], row=1, col=2)\nfig.update_xaxes(title_text=\"xaxis 3 title\", showgrid=False, row=2, col=1)\nfig.update_xaxes(title_text=\"xaxis 4 title\", type=\"log\", row=2, col=2)\n\nfig.update_yaxes(title_text=\"yaxis 1 title\", row=1, col=1)\nfig.update_yaxes(title_text=\"yaxis 2 title\", range=[40, 80], row=1, col=2)\nfig.update_yaxes(title_text=\"yaxis 3 title\", showgrid=False, row=2, col=1)\nfig.update_yaxes(title_text=\"yaxis 4 title\", row=2, col=2)\n\nfig.update_layout(title_text=\"Customizing Subplot Axes\", height=700)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Pattern Fills in Area Funnel Plots in Python\nDESCRIPTION: This example introduces pattern fills (also known as hatching or texture) in funnel area charts, adding a layer of visual distinction for different stages in the funnel. It showcases the use of colors and patterns together for enhanced representation. Dependencies include the plotly library's graph_objects module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\ncolors = [\"gold\", \"gold\", \"lightgreen\", \"lavender\"]\n\nfig = go.Figure(\n    go.Funnelarea(\n        labels=[\"Interview 1\", \"Interview 2\", \"Test\", \"Final Stage\"],\n        values=[100, 70, 40, 20],\n        textfont_size=20,\n        marker=dict(colors=colors, pattern=dict(shape=[\"\", \"/\", \"\", \"\"])),\n    )\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Grouped Scatter Plot using Plotly Express\nDESCRIPTION: This snippet creates a grouped scatter plot using `plotly.express`. It loads the `medals_long` dataset, sets 'count' as the y-axis, 'nation' as the x-axis and 'medal' as the color. It updates the marker size and sets `scattermode` to 'group' so that points are displayed next to one another, instead of overlaid. Finally, the plot is displayed.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.medals_long()\n\nfig = px.scatter(df, y=\\\"count\\\", x=\\\"nation\\\", color=\\\"medal\\\")\nfig.update_traces(marker_size=10)\nfig.update_layout(scattermode=\\\"group\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling Line Plots with graph_objects in Python\nDESCRIPTION: Demonstrates advanced line styling options using graph_objects including colors, line widths, and dash patterns. The example creates multiple traces showing temperature data across months with different line styles to distinguish between years and temperature types (high/low).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Add data\nmonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n         'August', 'September', 'October', 'November', 'December']\nhigh_2000 = [32.5, 37.6, 49.9, 53.0, 69.1, 75.4, 76.5, 76.6, 70.7, 60.6, 45.1, 29.3]\nlow_2000 = [13.8, 22.3, 32.5, 37.2, 49.9, 56.1, 57.7, 58.3, 51.2, 42.8, 31.6, 15.9]\nhigh_2007 = [36.5, 26.6, 43.6, 52.3, 71.5, 81.4, 80.5, 82.2, 76.0, 67.3, 46.1, 35.0]\nlow_2007 = [23.6, 14.0, 27.0, 36.8, 47.6, 57.7, 58.9, 61.2, 53.3, 48.5, 31.0, 23.6]\nhigh_2014 = [28.8, 28.5, 37.0, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\nlow_2014 = [12.7, 14.3, 18.6, 35.5, 49.9, 58.0, 60.0, 58.6, 51.7, 45.2, 32.2, 29.1]\n\nfig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=month, y=high_2014, name='High 2014',\n                         line=dict(color='firebrick', width=4)))\nfig.add_trace(go.Scatter(x=month, y=low_2014, name = 'Low 2014',\n                         line=dict(color='royalblue', width=4)))\nfig.add_trace(go.Scatter(x=month, y=high_2007, name='High 2007',\n                         line=dict(color='firebrick', width=4,\n                              dash='dash') # dash options include 'dash', 'dot', and 'dashdot'\n))\nfig.add_trace(go.Scatter(x=month, y=low_2007, name='Low 2007',\n                         line = dict(color='royalblue', width=4, dash='dash')))\nfig.add_trace(go.Scatter(x=month, y=high_2000, name='High 2000',\n                         line = dict(color='firebrick', width=4, dash='dot')))\nfig.add_trace(go.Scatter(x=month, y=low_2000, name='Low 2000',\n                         line=dict(color='royalblue', width=4, dash='dot')))\n```\n\n----------------------------------------\n\nTITLE: Customizing PNG Renderer Settings\nDESCRIPTION: Demonstrates how to customize PNG renderer properties like width and height, set it as default, and display a figure with the custom settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npng_renderer = pio.renderers[\"png\"]\npng_renderer.width = 500\npng_renderer.height = 500\n\npio.renderers.default = \"png\"\n\nimport plotly.graph_objects as go\nfig = go.Figure(\n    data=[go.Bar(y=[2, 1, 3])],\n    layout_title_text=\"A Figure Displayed with the 'png' Renderer\"\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scaled Bubble Chart\nDESCRIPTION: Demonstrates bubble size scaling using sizeref and sizemode attributes for better visualization control.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nsize = [20, 40, 60, 80, 100, 80, 60, 40, 20, 40]\nfig = go.Figure(data=[go.Scatter(\n    x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    y=[11, 12, 10, 11, 12, 11, 12, 13, 12, 11],\n    mode='markers',\n    marker=dict(\n        size=size,\n        sizemode='area',\n        sizeref=2.*max(size)/(40.**2),\n        sizemin=4\n    )\n)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Disabling Base Map Features\nDESCRIPTION: This snippet shows how to disable the visibility of default base map features and selectively display specific features like rivers and lakes.  The `visible` parameter is set to `False` to hide all base map attributes except those explicitly set to true.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(\n    visible=False,\n    resolution=50,\n    showlakes=True, lakecolor=\"Blue\",\n    showrivers=True, rivercolor=\"Blue\"\n)\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Legend Entry Width in Plotly Python\nDESCRIPTION: This snippet demonstrates how to set the width of horizontal legend entries using the 'entrywidth' parameter. It creates a scatter plot with continents color-coded and sets the legend orientation to horizontal.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year==2007\")\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\",\n    size=\"pop\", size_max=45, log_x=True)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    entrywidth=70,\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotly: Sunburst Chart for Hierarchical Data\nDESCRIPTION: This snippet demonstrates creating a Sunburst chart to represent hierarchical data.  It uses the `go.Sunburst` object, defining the labels, parents, and values to create the hierarchical structure and display the data accordingly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"import plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n    labels=[\\\"Eve\\\", \\\"Cain\\\", \\\"Seth\\\", \\\"Enos\\\", \\\"Noam\\\", \\\"Abel\\\", \\\"Awan\\\", \\\"Enoch\\\", \\\"Azura\\\"],\n    parents=[\\\"\\\", \\\"Eve\\\", \\\"Eve\\\", \\\"Seth\\\", \\\"Seth\\\", \\\"Eve\\\", \\\"Eve\\\", \\\"Awan\\\", \\\"Eve\\\" ],\n    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],\n))\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()\n\"\n```\n\n----------------------------------------\n\nTITLE: Color Bar Size for Plotly Contour Plots in Python\nDESCRIPTION: This snippet demonstrates how to customize the size of the color bar in a Plotly contour plot. It configures the `thickness`, `thicknessmode`, `len`, `lenmode`, and `outlinewidth` properties within the `colorbar` dictionary to control the color bar's dimensions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorbar=dict(\n            thickness=25,\n            thicknessmode='pixels',\n            len=0.6,\n            lenmode='fraction',\n            outlinewidth=0\n        )\n    ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Moebius Band Triangulation\nDESCRIPTION: Applies the triangulated surface plotting function to the Moebius band data and sets up the plot layout. This demonstrates the creation of a 3D surface plot with optional edge lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata1=plotly_trisurf(x,y,z, tri.simplices, colormap=cm.RdBu, plot_edges=True)\n\naxis = dict(\nshowbackground=True,\nbackgroundcolor=\"rgb(230, 230,230)\",\ngridcolor=\"rgb(255, 255, 255)\",\nzerolinecolor=\"rgb(255, 255, 255)\",\n    )\n\nlayout = go.Layout(\n         title='Moebius band triangulation',\n         width=800,\n         height=800,\n         scene=dict(\n         xaxis=dict(axis),\n         yaxis=dict(axis),\n         zaxis=dict(axis),\n        aspectratio=dict(\n            x=1,\n            y=1,\n            z=0.5\n        ),\n        )\n        )\n\nfig1 = go.Figure(data=data1, layout=layout)\n\npy.iplot(fig1, filename='Moebius-band-trisurf')\n```\n\n----------------------------------------\n\nTITLE: Customizing Pie Chart Appearance and Hover Data in Python\nDESCRIPTION: Shows how to create and then customize a pie chart by using px.pie() options like hover_data and labels, then further refining with update_traces() to adjust text position and displayed information.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Americas'\")\nfig = px.pie(df, values='pop', names='country',\n             title='Population of American continent',\n             hover_data=['lifeExp'], labels={'lifeExp':'life expectancy'})\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Funnel Plot with go.Funnel in Python\nDESCRIPTION: This snippet creates a stacked funnel plot using 'go.Funnel', allowing for different categorical data to be displayed side by side, enhancing comparative analysis across various stages in the funnel. It requires the graph_objects module from Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Funnel(\n    name = 'Montreal',\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\"],\n    x = [120, 60, 30, 20],\n    textinfo = \"value+percent initial\"))\n\nfig.add_trace(go.Funnel(\n    name = 'Toronto',\n    orientation = \"h\",\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\"],\n    x = [100, 60, 40, 30, 20],\n    textposition = \"inside\",\n    textinfo = \"value+percent previous\"))\n\nfig.add_trace(go.Funnel(\n    name = 'Vancouver',\n    orientation = \"h\",\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\", \"Finalized\"],\n    x = [90, 70, 50, 30, 10, 5],\n    textposition = \"outside\",\n    textinfo = \"value+percent total\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Icicle Chart with Discrete Color in Plotly Express in Python\nDESCRIPTION: This snippet illustrates the use of discrete colors in an icicle chart using Plotly Express in Python. The 'color' parameter specifies categorical data to color nodes discretely. The example also demonstrates the handling of categorical values with mixed data in parent nodes. Dependency: plotly.express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.icicle(df, path=[px.Constant(\"all\"), 'sex', 'day', 'time'],\n                values='total_bill', color='day')\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Filled Areas with Scattermap in Python\nDESCRIPTION: Demonstrates creating multiple disconnected filled map areas using None values and Scattermap trace with custom longitude and latitude coordinates\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-tile-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    mode = \"lines\", fill = \"toself\",\n    lon = [-10, -10, 8, 8, -10, None, 30, 30, 50, 50, 30, None, 100, 100, 80, 80, 100],\n    lat = [30, 6, 6, 30, 30,    None, 20, 30, 30, 20, 20, None, 40, 50, 50, 40, 40]))\n\nfig.update_layout(\n    map = {'style': \"open-street-map\", 'center': {'lon': 30, 'lat': 30}, 'zoom': 2},\n    showlegend = False,\n    margin = {'l':0, 'r':0, 'b':0, 't':0})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Open Marker Colors in Plotly Python\nDESCRIPTION: This snippet demonstrates how to use open marker symbols in a Plotly scatter plot, where 'diamond-open' serves as the custom symbol. It highlights that open markers utilize a single color for display since the fill is transparent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\n\nfig.update_traces(\n    marker=dict(\n        size=8,\n        symbol=\"diamond-open\",\n        line=dict(\n            width=2,\n#             color=\"DarkSlateGrey\" Line colors don't apply to open markers\n        )\n    ),\n    selector=dict(mode=\"markers\"),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Time Series Plot with Custom Date Range using String Dates\nDESCRIPTION: This snippet shows how to create a time series plot with a custom date range using string dates. It reads data from a CSV file and sets the x-axis range using date strings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = px.line(df, x='Date', y='AAPL.High')\n\n# Use date string to set xaxis range\nfig.update_layout(xaxis_range=['2016-07-01','2016-12-31'],\n                  title_text=\"Manually Set Date Range\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Colors with Plotly Figure Factory, Python\nDESCRIPTION: This code shows how to customize the color scale of a Plotly table using the `colorscale` parameter. It defines a custom color scale and passes it to the `create_table` function.  It imports `plotly.figure_factory` and `pandas`, reads a CSV file into a Pandas DataFrame, selects a sample, defines the `colorscale` variable, and then creates and displays the table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')\ndf_sample = df[400:410]\n\ncolorscale = [[0, '#4d004c'],[.5, '#f2e5ff'],[1, '#ffffff']]\n\nfig =  ff.create_table(df_sample, colorscale=colorscale)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Size in Bar Charts with Plotly Express in Python\nDESCRIPTION: This snippet shows how to control text size in bar charts using the `uniformtext` layout parameter in Plotly Express. The uniform text ensures all text labels have the same font size, hiding those that don't fit. It uses a dataset from `plotly.express.data` to demonstrate with a bar chart example.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder(year=2007)\nfig = px.bar(df, x='continent', y='pop', color=\"lifeExp\", text='country',\n             title=\"Uniform Text: min size is 8, hidden if can't fit\")\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Orientation Control for Wide-Form Plots\nDESCRIPTION: Demonstrates controlling plot orientation using 'orientation' parameter and column specifications for various plot types.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide(indexed=True)\n\nfig = px.bar(wide_df, orientation=\"h\")\nfig.show()\n\nfig = px.area(wide_df, x=wide_df.columns)\nfig.show()\n\nmixed_df = px.data.experiment(indexed=True)\nwide_df = mixed_df[[\"experiment_1\", \"experiment_2\", \"experiment_3\"]]\n\nfig = px.histogram(wide_df, orientation=\"h\")\nfig.show()\n\nfig = px.violin(wide_df, orientation=\"h\")\nfig.show()\n\nfig = px.box(wide_df, orientation=\"h\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Font in Scatter Map in Python\nDESCRIPTION: This snippet shows how to customize the text font in Scattermap traces using Plotly Graph Objects, including changing size, color, and family of the font.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    mode = \"markers+text+lines\",\n    lon = [-75, -80, -50], lat = [45, 20, -20],\n    marker = {'size': 20, 'symbol': [\"bus\", \"harbor\", \"airport\"]},\n    text = [\"Bus\", \"Harbor\", \"airport\"], textposition = \"bottom right\",\n    textfont = dict(size=18, color=\"black\", family=\"Open Sans Bold\")\n    ))\n\nfig.update_layout(\n    map = {\n        'style': \"outdoors\", 'zoom': 0.7},\n    showlegend = False,)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Faceted Histogram with Box Plot Marginal\nDESCRIPTION: Creates a faceted histogram by day with box plot marginals.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", y=\"tip\", color=\"sex\", facet_col=\"day\",\n                  marginal=\"box\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic 3D Line Plot with Plotly Express\nDESCRIPTION: Creates a simple 3D line plot using Plotly Express to visualize Brazil's GDP per capita, population, and year data from the gapminder dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-line-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"country=='Brazil'\")\nfig = px.line_3d(df, x=\"gdpPercap\", y=\"pop\", z=\"year\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hovermode with graph_objects\nDESCRIPTION: Demonstrates how to set the hovermode when creating a figure using `plotly.graph_objects`. It creates a figure with two scatter traces and sets the hovermode to 'x unified'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nt = np.linspace(0, 2 * np.pi, 100)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=t, y=np.sin(t), name='sin(t)'))\nfig.add_trace(go.Scatter(x=t, y=np.cos(t), name='cost(t)'))\nfig.update_layout(hovermode='x unified')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Preparing Amazon Redshift COPY Commands for Sample Data Loading\nDESCRIPTION: Prepares COPY commands to load Amazon's sample data from S3 into Redshift tables. Uses AWS credentials to access the S3 bucket and configures appropriate delimiters for each data file.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\naws_key = os.getenv(\"AWS_ACCESS_KEY_ID\") # needed to access S3 Sample Data\naws_secret = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nbase_copy_string = \"\"\"copy %s from 's3://awssampledbuswest2/tickit/%s.txt'\ncredentials 'aws_access_key_id=%s;aws_secret_access_key=%s'\ndelimiter '%s';\"\"\" # the base COPY string that we'll be using\n\n#easily generate each table that we'll need to COPY data from\ntables = [\"users\", \"venue\", \"category\", \"date\", \"event\", \"listing\"]\ndata_files = [\"allusers_pipe\", \"venue_pipe\", \"category_pipe\", \"date2008_pipe\", \"allevents_pipe\", \"listings_pipe\"]\ndelimiters = [\"|\", \"|\", \"|\", \"|\", \"|\", \"|\", \"|\"]\n\n#the generated COPY statements we'll be using to load data;\ncopy_statements = []\nfor tab, f, delim in zip(tables, data_files, delimiters):\n    copy_statements.append(base_copy_string % (tab, f, aws_key, aws_secret, delim))\n\n# add in Sales data, delimited by '\\t'\ncopy_statements.append(\"\"\"copy sales from 's3://awssampledbuswest2/tickit/sales_tab.txt'\ncredentials 'aws_access_key_id=%s;aws_secret_access_key=%s'\ndelimiter '\\t' timeformat 'MM/DD/YYYY HH:MI:SS';\"\"\" % (aws_key, aws_secret))\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Dataset Distribution Plot\nDESCRIPTION: Generate a distribution plot with multiple datasets using different colors, bin sizes, and custom group labels\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/distplot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\n\nx1 = np.random.randn(200) - 2\nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2\nx4 = np.random.randn(200) + 4\n\nhist_data = [x1, x2, x3, x4]\ngroup_labels = ['Group 1', 'Group 2', 'Group 3', 'Group 4']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Percentage Values in Plotly\nDESCRIPTION: Generates a histogram with the y-axis showing percentage values rather than raw counts or probabilities. Uses custom bin sizes and color styling for the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x, histnorm='percent',\n                     xbins=dict(start=np.min(x),\n                                size=0.25,\n                                end=np.max(x)),\n                     marker=dict(color='rgb(50, 50, 125)'))\n\nlayout = go.Layout(\n    title=\"Histogram with Frequency Count\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-percentage')\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Categorical Axes using Plotly Express\nDESCRIPTION: This snippet creates a scatter plot with categorical axes using `plotly.express`. It loads the `medals_long` dataset, sets 'nation' as the y-axis, 'count' as the x-axis, and maps color and symbol to the 'medal' column. It then updates the marker size to 10 and displays the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.scatter(df, y=\\\"nation\\\", x=\\\"count\\\", color=\\\"medal\\\", symbol=\\\"medal\\\")\nfig.update_traces(marker_size=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Express Global Defaults\nDESCRIPTION: Sets global default styling parameters including template, color scale, and figure dimensions using Plotly Express defaults configuration system\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/styling-plotly-express.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\\nimport plotly.io as pio\\n\\npio.templates.default = \"simple_white\"\\n\\npx.defaults.template = \"ggplot2\"\\npx.defaults.color_continuous_scale = px.colors.sequential.Blackbody\\npx.defaults.width = 600\\npx.defaults.height = 400\\n\\ndf = px.data.iris()\\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"sepal_length\", width=400)\\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Random Walk Diffusion with Histogram in Python\nDESCRIPTION: This code simulates multiple random walks and visualizes the distribution of final positions using a histogram. It demonstrates the link between random walks and diffusion.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/random-walk.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nl = 1000\nN = 10000\nsteps = np.random.choice([-1, 1], size=(N, l)) + 0.05 * np.random.standard_normal((N, l)) # l steps\nposition = np.cumsum(steps, axis=1) # integrate all positions by summing steps values along time axis\n\nfig = go.Figure(data=go.Histogram(x=position[:, -1])) # positions at final time step\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hover on Subplots\nDESCRIPTION: Demonstrates hoversubplots to define how hover effects expand to additional subplots. With `hoversubplots=axis`, hover effects are included on stacked subplots using the same axis when `hovermode` is set to `x`, `x unified`, `y`, or `y unified`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom plotly import data\n\ndf = data.stocks()\n\nlayout = dict(\n    hoversubplots=\"axis\",\n    title=dict(text=\"Stock Price Changes\"),\n    hovermode=\"x\",\n    grid=dict(rows=3, columns=1),\n)\n\ndata = [\n    go.Scatter(x=df[\"date\"], y=df[\"AAPL\"], xaxis=\"x\", yaxis=\"y\", name=\"Apple\"),\n    go.Scatter(x=df[\"date\"], y=df[\"GOOG\"], xaxis=\"x\", yaxis=\"y2\", name=\"Google\"),\n    go.Scatter(x=df[\"date\"], y=df[\"AMZN\"], xaxis=\"x\", yaxis=\"y3\", name=\"Amazon\"),\n]\n\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Plotly FigureWidget in Python\nDESCRIPTION: This snippet creates an empty Plotly FigureWidget instance. It imports the necessary `plotly.graph_objects` module and initializes a `FigureWidget` object, which can then be populated with data and layout information.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nf = go.FigureWidget()\nf\n```\n\n----------------------------------------\n\nTITLE: Advanced Range Slider with Multiple Subplots in Plotly\nDESCRIPTION: Creates a complex visualization with multiple vertically stacked subplots, each with different metrics and styling. Includes range slider, annotations, shapes, and detailed axis configurations for each subplot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/range-slider.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(\n    x=[\"2013-01-15\", \"2013-01-29\", \"2013-02-26\", \"2013-04-19\", \"2013-07-02\",\n       \"2013-08-27\",\n       \"2013-10-22\", \"2014-01-20\", \"2014-05-05\", \"2014-07-01\", \"2015-02-09\",\n       \"2015-04-13\",\n       \"2015-05-13\", \"2015-06-08\", \"2015-08-05\", \"2016-02-25\"],\n    y=[\"8\", \"3\", \"2\", \"10\", \"5\", \"5\", \"6\", \"8\", \"3\", \"3\", \"7\", \"5\", \"10\", \"10\", \"9\",\n       \"14\"],\n    name=\"var0\",\n    text=[\"8\", \"3\", \"2\", \"10\", \"5\", \"5\", \"6\", \"8\", \"3\", \"3\", \"7\", \"5\", \"10\", \"10\", \"9\",\n          \"14\"],\n    yaxis=\"y\",\n))\n\nfig.add_trace(go.Scatter(\n    x=[\"2015-04-13\", \"2015-05-13\", \"2015-06-08\", \"2015-08-05\", \"2016-02-25\"],\n    y=[\"53.0\", \"69.0\", \"89.0\", \"41.0\", \"41.0\"],\n    name=\"var1\",\n    text=[\"53.0\", \"69.0\", \"89.0\", \"41.0\", \"41.0\"],\n    yaxis=\"y2\",\n))\n\nfig.add_trace(go.Scatter(\n    x=[\"2013-01-29\", \"2013-02-26\", \"2013-04-19\", \"2013-07-02\", \"2013-08-27\",\n       \"2013-10-22\",\n       \"2014-01-20\", \"2014-04-09\", \"2014-05-05\", \"2014-07-01\", \"2014-09-30\",\n       \"2015-02-09\",\n       \"2015-04-13\", \"2015-06-08\", \"2016-02-25\"],\n    y=[\"9.6\", \"4.6\", \"2.7\", \"8.3\", \"18\", \"7.3\", \"3\", \"7.5\", \"1.0\", \"0.5\", \"2.8\", \"9.2\",\n       \"13\", \"5.8\", \"6.9\"],\n    name=\"var2\",\n    text=[\"9.6\", \"4.6\", \"2.7\", \"8.3\", \"18\", \"7.3\", \"3\", \"7.5\", \"1.0\", \"0.5\", \"2.8\",\n          \"9.2\",\n          \"13\", \"5.8\", \"6.9\"],\n    yaxis=\"y3\",\n))\n\nfig.add_trace(go.Scatter(\n    x=[\"2013-01-29\", \"2013-02-26\", \"2013-04-19\", \"2013-07-02\", \"2013-08-27\",\n       \"2013-10-22\",\n       \"2014-01-20\", \"2014-04-09\", \"2014-05-05\", \"2014-07-01\", \"2014-09-30\",\n       \"2015-02-09\",\n       \"2015-04-13\", \"2015-06-08\", \"2016-02-25\"],\n    y=[\"6.9\", \"7.5\", \"7.3\", \"7.3\", \"6.9\", \"7.1\", \"8\", \"7.8\", \"7.4\", \"7.9\", \"7.9\", \"7.6\",\n       \"7.2\", \"7.2\", \"8.0\"],\n    name=\"var3\",\n    text=[\"6.9\", \"7.5\", \"7.3\", \"7.3\", \"6.9\", \"7.1\", \"8\", \"7.8\", \"7.4\", \"7.9\", \"7.9\",\n          \"7.6\",\n          \"7.2\", \"7.2\", \"8.0\"],\n    yaxis=\"y4\",\n))\n\nfig.add_trace(go.Scatter(\n    x=[\"2013-02-26\", \"2013-07-02\", \"2013-09-26\", \"2013-10-22\", \"2013-12-04\",\n       \"2014-01-02\",\n       \"2014-01-20\", \"2014-05-05\", \"2014-07-01\", \"2015-02-09\", \"2015-05-05\"],\n    y=[\"290\", \"1078\", \"263\", \"407\", \"660\", \"740\", \"33\", \"374\", \"95\", \"734\", \"3000\"],\n    name=\"var4\",\n    text=[\"290\", \"1078\", \"263\", \"407\", \"660\", \"740\", \"33\", \"374\", \"95\", \"734\", \"3000\"],\n    yaxis=\"y5\",\n))\n\n# style all the traces\nfig.update_traces(\n    hoverinfo=\"name+x+text\",\n    line={\"width\": 0.5},\n    marker={\"size\": 8},\n    mode=\"lines+markers\",\n    showlegend=False\n)\n\n# Add annotations\nfig.update_layout(\n    annotations=[\n        dict(\n            x=\"2013-06-01\",\n            y=0,\n            arrowcolor=\"rgba(63, 81, 181, 0.2)\",\n            arrowsize=0.3,\n            ax=0,\n            ay=30,\n            text=\"state1\",\n            xref=\"x\",\n            yanchor=\"bottom\",\n            yref=\"y\"\n        ),\n        dict(\n            x=\"2014-09-13\",\n            y=0,\n            arrowcolor=\"rgba(76, 175, 80, 0.1)\",\n            arrowsize=0.3,\n            ax=0,\n            ay=30,\n            text=\"state2\",\n            xref=\"x\",\n            yanchor=\"bottom\",\n            yref=\"y\"\n        )\n    ],\n)\n\n# Add shapes\nfig.update_layout(\n    shapes=[\n        dict(\n            fillcolor=\"rgba(63, 81, 181, 0.2)\",\n            line={\"width\": 0},\n            type=\"rect\",\n            x0=\"2013-01-15\",\n            x1=\"2013-10-17\",\n            xref=\"x\",\n            y0=0,\n            y1=0.95,\n            yref=\"paper\"\n        ),\n        dict(\n            fillcolor=\"rgba(76, 175, 80, 0.1)\",\n            line={\"width\": 0},\n            type=\"rect\",\n            x0=\"2013-10-22\",\n            x1=\"2015-08-05\",\n            xref=\"x\",\n            y0=0,\n            y1=0.95,\n            yref=\"paper\"\n        )\n    ]\n)\n\n# Update axes\nfig.update_layout(\n    xaxis=dict(\n        autorange=True,\n        range=[\"2012-10-31 18:36:37.3129\", \"2016-05-10 05:23:22.6871\"],\n        rangeslider=dict(\n            autorange=True,\n            range=[\"2012-10-31 18:36:37.3129\", \"2016-05-10 05:23:22.6871\"]\n        ),\n        type=\"date\"\n    ),\n    yaxis=dict(\n        anchor=\"x\",\n        autorange=True,\n        domain=[0, 0.2],\n        linecolor=\"#673ab7\",\n        mirror=True,\n        range=[-60.0858369099, 28.4406294707],\n        showline=True,\n        side=\"right\",\n        tickfont={\"color\": \"#673ab7\"},\n        tickmode=\"auto\",\n        ticks=\"\",\n        title=dict(\n            font=dict(\n                color=\"#673ab7\"\n            )\n        ),\n        type=\"linear\",\n        zeroline=False\n    ),\n    yaxis2=dict(\n        anchor=\"x\",\n        autorange=True,\n        domain=[0.2, 0.4],\n        linecolor=\"#E91E63\",\n        mirror=True,\n        range=[29.3787777032, 100.621222297],\n        showline=True,\n        side=\"right\",\n        tickfont={\"color\": \"#E91E63\"},\n        tickmode=\"auto\",\n        ticks=\"\",\n        title=dict(\n            font=dict(\n                color=\"#E91E63\"\n            )\n        ),\n        type=\"linear\",\n        zeroline=False\n    ),\n    yaxis3=dict(\n        anchor=\"x\",\n        autorange=True,\n        domain=[0.4, 0.6],\n        linecolor=\"#795548\",\n        mirror=True,\n        range=[-3.73690396239, 22.2369039624],\n        showline=True,\n        side=\"right\",\n        tickfont={\"color\": \"#795548\"},\n        tickmode=\"auto\",\n        ticks=\"\",\n        title=dict(\n            text=\"mg/L\",\n            font=dict(\n                color=\"#795548\"\n            )\n        ),\n        type=\"linear\",\n        zeroline=False\n    ),\n    yaxis4=dict(\n        anchor=\"x\",\n        autorange=True,\n        domain=[0.6, 0.8],\n        linecolor=\"#607d8b\",\n        mirror=True,\n        range=[6.63368032236, 8.26631967764],\n        showline=True,\n        side=\"right\",\n        tickfont={\"color\": \"#607d8b\"},\n        tickmode=\"auto\",\n        ticks=\"\",\n        title=dict(\n            text=\"mmol/L\",\n            font=dict(\n                color=\"#607d8b\"\n            )\n        ),\n        type=\"linear\",\n        zeroline=False\n    ),\n    yaxis5=dict(\n        anchor=\"x\",\n        autorange=True,\n        domain=[0.8, 1],\n        linecolor=\"#2196F3\",\n        mirror=True,\n        range=[-685.336803224, 3718.33680322],\n        showline=True,\n        side=\"right\",\n        tickfont={\"color\": \"#2196F3\"},\n        tickmode=\"auto\",\n        ticks=\"\",\n        title=dict(\n            text=\"mg/Kg\",\n            font=dict(\n                color=\"#2196F3\"\n            )\n        ),\n        type=\"linear\",\n        zeroline=False\n    )\n)\n\n# Update layout\nfig.update_layout(\n    dragmode=\"zoom\",\n    hovermode=\"x\",\n    legend=dict(traceorder=\"reversed\"),\n    height=600,\n    template=\"plotly_white\",\n    margin=dict(\n        t=100,\n        b=100\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Disabling or customizing hover columns in plotly express\nDESCRIPTION: This snippet shows how to customize and disable hover columns in plotly express using the `hover_data` dictionary.  It allows to remove columns, add new data with custom formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\ndf = px.data.iris()\nfig = px.scatter(df, x='petal_length', y='sepal_length', facet_col='species', color='species',\n                 hover_data={'species':False, # remove species from hover data\n                             'sepal_length':':.2f', # customize hover for column of y attribute\n                             'petal_width':True, # add other column, default formatting\n                             'sepal_width':':.2f', # add other column, customized formatting\n                             # data not in dataframe, default formatting\n                             'suppl_1': np.random.random(len(df)),\n                             # data not in dataframe, customized formatting\n                             'suppl_2': (':.3f', np.random.random(len(df)))\n                            })\nfig.update_layout(height=300)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Redshift Connection Configuration in Python\nDESCRIPTION: Configures the connection parameters for Amazon Redshift using environment variables. This includes the endpoint URL, username, password, port, and database name.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nredshift_endpoint = os.getenv(\"REDSHIFT_ENDPOINT\")\nredshift_user = os.getenv(\"REDSHIFT_USER\")\nredshift_pass = os.getenv(\"REDSHIFT_PASS\")\nport = 5439\ndbname = 'dev'\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Legends in Plotly Scatter Plot in Python\nDESCRIPTION: This snippet illustrates how to assign multiple legends to traces in a Plotly scatter plot. It demonstrates using the legend property to create separate legends for different groups of data. Dependencies are the plotly library and the gapminder dataset. Key parameters include trace data and legend identifiers; the output is a scatter plot with organized legends.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder()\n\ndf_germany = df.loc[(df.country.isin([\"Germany\"]))]\ndf_france = df.loc[(df.country.isin([\"France\"]))]\ndf_uk = df.loc[(df.country.isin([\"United Kingdom\"]))]\n\n\ndf_averages_europe = (\n    df.loc[(df.continent.isin([\"Europe\"]))].groupby(by=\"year\").mean(numeric_only=True)\n)\ndf_averages_americas = (\n    df.loc[(df.continent.isin([\"Americas\"]))].groupby(by=\"year\").mean(numeric_only=True)\n)\n\n\nfig = go.Figure(\n    data=[\n        go.Scatter(x=df_germany.year, y=df_germany.gdpPercap, name=\"Germany\"),\n        go.Scatter(x=df_france.year, y=df_france.gdpPercap, name=\"France\"),\n        go.Scatter(x=df_uk.year, y=df_uk.gdpPercap, name=\"UK\"),\n        go.Scatter(\n            x=df_averages_europe.index,\n            y=df_averages_europe.gdpPercap,\n            name=\"Europe\",\n            legend=\"legend2\",\n        ),\n        go.Scatter(\n            x=df_averages_americas.index,\n            y=df_averages_americas.gdpPercap,\n            name=\"Americas\",\n            legend=\"legend2\",\n        ),\n    ],\n    layout=dict(\n        title=dict(\n            text=\"GDP Per Capita\"\n        ),\n        legend=dict(\n            title=dict(\n                text=\"By country\"\n            ),\n            xref=\"container\",\n            yref=\"container\",\n            y=0.65,\n            bgcolor=\"Orange\"\n        ),\n        legend2=dict(\n            title=dict(\n                text=\"By continent\"\n            ),\n            xref=\"container\",\n            yref=\"container\",\n            y=0.85,\n            bgcolor=\"Gold\"\n        ),\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Violin Plot Quartile Method in Plotly Express\nDESCRIPTION: Demonstrates how to create a violin plot using Plotly Express and specify the quartile calculation method. The example uses the tips dataset and shows how to set the quartilemethod parameter to 'exclusive', 'inclusive', or 'linear' (default).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/violin.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.violin(df, y=\"total_bill\")\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Template with Watermark Annotation in Plotly\nDESCRIPTION: Creates a template that adds a 'DRAFT' watermark to any figure it's applied to. The template defines a layout annotation that appears as a large semi-transparent text overlay.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ndraft_template = go.layout.Template()\ndraft_template.layout.annotations = [\n    dict(\n        name=\"draft watermark\",\n        text=\"DRAFT\",\n        textangle=-30,\n        opacity=0.1,\n        font=dict(color=\"black\", size=100),\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.5,\n        showarrow=False,\n    )\n]\n\nfig=go.Figure()\nfig.update_layout(template=draft_template)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Max/Min Allowed Axis Value in Plotly Express with Python\nDESCRIPTION: This snippet shows how to set a maximum or minimum allowed value for an axis when manually setting the range. It utilizes `minallowed` and `maxallowed` to restrict panning beyond the specified limits. The plot's x-axis has a minimum allowed value, and the y-axis has a maximum allowed value, preventing users from panning beyond these limits.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.update_xaxes(range=[1.5, 4.5], minallowed=1)\nfig.update_yaxes(range=[3, 9], maxallowed=10)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Reversing Axes with Specified Range in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates reversing the direction of an axis while manually setting the range extents. The `range` axis property is set with the upper bound followed by the lower bound. The y-axis will be reversed and limited to the specified range.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(range=[9, 3])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Filled Radar Chart with Plotly Express\nDESCRIPTION: This example shows how to create a filled radar chart by first creating a line_polar chart with Plotly Express, then updating the traces to add a fill effect with the 'toself' option.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/radar-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\ndf = pd.DataFrame(dict(\n    r=[1, 5, 2, 2, 3],\n    theta=['processing cost','mechanical properties','chemical stability',\n           'thermal stability', 'device integration']))\nfig = px.line_polar(df, r='r', theta='theta', line_close=True)\nfig.update_traces(fill='toself')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing OHLC Chart Colors in Python using Plotly\nDESCRIPTION: This example shows how to customize the colors of increasing and decreasing lines in an OHLC chart. It sets the increasing line color to cyan and the decreasing line color to gray.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ohlc-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=[go.Ohlc(\n    x=df['Date'],\n    open=df['AAPL.Open'], high=df['AAPL.High'],\n    low=df['AAPL.Low'], close=df['AAPL.Close'],\n    increasing_line_color= 'cyan', decreasing_line_color= 'gray'\n)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Plot Subtitle with Custom Styling\nDESCRIPTION: Shows how to add a subtitle to a plot with custom font styling and positioning in Plotly Graph Objects\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-labels.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder().query(\"continent == 'Europe' and (year == 1952 or year == 2002)\")\n\ndf_pivot = df.pivot(index=\"country\", columns=\"year\", values=\"lifeExp\")\n\nfig = go.Figure(\n    [\n        go.Bar(\n            x=df_pivot.index, y=df_pivot[1952], name=\"1952\", marker_color=\"IndianRed\"\n        ),\n        go.Bar(\n            x=df_pivot.index, y=df_pivot[2002], name=\"2002\", marker_color=\"LightSalmon\"\n        ),\n    ],\n    layout=dict(\n        title=dict(\n            text=\"Life Expectancy\",\n            subtitle=dict(\n                text=\"Life expectancy by European country in 1952 and in 2002\",\n                font=dict(color=\"gray\", size=13),\n            ),\n        )\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Candlestick Chart with Datetime Objects\nDESCRIPTION: Shows how to create a candlestick chart using Python datetime objects instead of string dates, with manually defined OHLC data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/candlestick-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom datetime import datetime\n\nopen_data = [33.0, 33.3, 33.5, 33.0, 34.1]\nhigh_data = [33.1, 33.3, 33.6, 33.2, 34.8]\nlow_data = [32.7, 32.7, 32.8, 32.6, 32.8]\nclose_data = [33.0, 32.9, 33.3, 33.1, 33.1]\ndates = [datetime(year=2013, month=10, day=10),\n         datetime(year=2013, month=11, day=10),\n         datetime(year=2013, month=12, day=10),\n         datetime(year=2014, month=1, day=10),\n         datetime(year=2014, month=2, day=10)]\n\nfig = go.Figure(data=[go.Candlestick(x=dates,\n                       open=open_data, high=high_data,\n                       low=low_data, close=close_data)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Numpy Random Heatmap with Plotly Express\nDESCRIPTION: Shows how to create the same random data heatmap using the modern Plotly Express method with automatic text formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nnp.random.seed(1)\n\nz = np.random.randn(20, 20)\n\nfig = px.imshow(z, text_auto=\".2f\", color_continuous_scale='Greys', aspect=\"auto\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Map with Bounded View in Python\nDESCRIPTION: This snippet demonstrates how to create a scatter map with a bounded view using Plotly Express. It sets specific longitude and latitude boundaries to restrict the map's pan and zoom capabilities.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-map-layers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\nus_cities = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\"\n)\n\nfig = px.scatter_map(\n    us_cities,\n    lat=\"lat\",\n    lon=\"lon\",\n    hover_name=\"City\",\n    hover_data=[\"State\", \"Population\"],\n    color_discrete_sequence=[\"fuchsia\"],\n    zoom=3,\n    height=300,\n)\nfig.update_layout(map_style=\"open-street-map\")\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(map_bounds={\"west\": -180, \"east\": -50, \"south\": 20, \"north\": 90})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Log-Scaled Axes with Log-Transformed OLS Trendlines\nDESCRIPTION: Demonstrates using both log-scaled X-axis (visually) and log-transformed OLS fitting (mathematically). The 'log_x=True' parameter scales the axis while 'trendline_options=dict(log_x=True)' transforms the data for fitting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder(year=2007)\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", log_x=True, \n                 trendline=\"ols\", trendline_options=dict(log_x=True),\n                 title=\"Log-scaled X axis and log-transformed fit\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Box Plot with Categorical Axis\nDESCRIPTION: Shows how to create a box plot with categorical x-axis using tips dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.box(df, x=\"sex\", y=\"total_bill\", color=\"smoker\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Matrix Determinant\nDESCRIPTION: Shows how to calculate the determinant of a matrix using NumPy's linalg module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\ndet = np.linalg.det(matrix)\ndet\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Bar Trace - Python Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a line chart with a bar trace using Plotly Express. It uses the `px.line()` function to create the initial line chart and the `add_bar()` method to overlay a bar chart representing another dataset. The snippet includes a list of fruits and their values for different years.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/graphing-multiple-chart-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfruits = [\"apples\", \"oranges\", \"bananas\"]\nfig = px.line(x=fruits, y=[1,3,2], color=px.Constant(\"This year\"),\n             labels=dict(x=\"Fruit\", y=\"Amount\", color=\"Time Period\"))\nfig.add_bar(x=fruits, y=[2,1,3], name=\"Last year\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Text on Heatmap Points using Graph Objects\nDESCRIPTION: This example demonstrates how to add text annotations to heatmap points using Plotly graph objects.  It creates a `go.Heatmap` object and uses the `text` attribute to specify the text to display on each point. The `texttemplate` and `textfont` parameters are used to customize the appearance of the text.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/heatmaps.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Heatmap(\n                    z=[[1, 20, 30],\n                      [20, 1, 60],\n                      [30, 60, 1]],\n                    text=[['one', 'twenty', 'thirty'],\n                          ['twenty', 'one', 'sixty'],\n                          ['thirty', 'sixty', 'one']],\n                    texttemplate=\"%{text}\",\n                    textfont={\"size\":20}))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Geo Scatter Plot with Plotly - Python\nDESCRIPTION: This snippet demonstrates how to create a scatter geo plot using Plotly Graph Objects, including setting layout parameters.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Scattergeo(\n        mode=\"markers+text\",\n        lat=[10, 20],\n        lon=[20, 10],\n        text=[\"Point A\", \"Point B\"]\n    )],\n    layout=dict(height=400, width=400,\n                margin=dict(l=0,r=0,b=0,t=0),\n                template=\"none\")\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Font Size in Icicle Charts with Plotly\nDESCRIPTION: This example shows how to control text font size in an Icicle chart using the 'uniformtext' layout parameter. It sets a minimum font size and specifies how to handle labels that don't fit.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv')\n\nfig = go.Figure(go.Icicle(\n    ids = df.ids,\n    labels = df.labels,\n    parents = df.parents,\n    root_color=\"lightgrey\"\n))\nfig.update_layout(\n    uniformtext=dict(minsize=10, mode='hide'),\n    margin = dict(t=50, l=25, r=25, b=25)\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Advanced Violin Plot with Color and Faceting\nDESCRIPTION: Creates a violin plot combining both wide and long-form data aspects, with gender-based coloring and group-based faceting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nmixed_df = px.data.experiment(indexed=True)\n\nfig = px.violin(mixed_df, y=[\"experiment_1\", \"experiment_2\", \"experiment_3\"],\n                color=\"gender\", facet_col=\"group\", hover_data=[mixed_df.index])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Categorical Polar Charts with Plotly Graph Objects in Python\nDESCRIPTION: This example demonstrates how to create categorical polar charts with various customizations using Plotly Graph Objects and subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2, specs=[[{'type': 'polar'}]*2]*2)\n\nfig.add_trace(go.Scatterpolar(\n      name = \"angular categories\",\n      r = [5, 4, 2, 4, 5],\n      theta = [\"a\", \"b\", \"c\", \"d\", \"a\"],\n    ), 1, 1)\nfig.add_trace(go.Scatterpolar(\n      name = \"radial categories\",\n      r = [\"a\", \"b\", \"c\", \"d\", \"b\", \"f\", \"a\"],\n      theta = [1, 4, 2, 1.5, 1.5, 6, 5],\n      thetaunit = \"radians\",\n    ), 1, 2)\nfig.add_trace(go.Scatterpolar(\n      name = \"angular categories (w/ categoryarray)\",\n      r = [5, 4, 2, 4, 5],\n      theta = [\"a\", \"b\", \"c\", \"d\", \"a\"],\n    ), 2, 1)\nfig.add_trace(go.Scatterpolar(\n      name = \"radial categories (w/ category descending)\",\n      r = [\"a\", \"b\", \"c\", \"d\", \"b\", \"f\", \"a\", \"a\"],\n      theta = [45, 90, 180, 200, 300, 15, 20, 45],\n    ), 2, 2)\n\nfig.update_traces(fill='toself')\nfig.update_layout(\n    polar = dict(\n      radialaxis_angle = -45,\n      angularaxis = dict(\n        direction = \"clockwise\",\n        period = 6)\n    ),\n    polar2 = dict(\n      radialaxis = dict(\n        angle = 180,\n        tickangle = -180 # so that tick labels are not upside down\n      )\n    ),\n    polar3 = dict(\n      sector = [80, 400],\n      radialaxis_angle = -45,\n      angularaxis_categoryarray = [\"d\", \"a\", \"c\", \"b\"]\n    ),\n    polar4 = dict(\n      radialaxis_categoryorder = \"category descending\",\n      angularaxis = dict(\n        thetaunit = \"radians\",\n        dtick = 0.3141592653589793\n      ))\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Color Bar Title for Plotly Contour Plots in Python\nDESCRIPTION: This snippet demonstrates how to add a title to the color bar of a Plotly contour plot. It uses the `colorbar` dictionary to customize the color bar's title by setting the `text`, `side`, and `font` properties within the nested `title` dictionary.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorbar=dict(\n            title=dict(\n                text='Color bar title', # title here\n                side='right',\n                font=dict(\n                    size=14,\n                    family='Arial, sans-serif')\n                )\n            ),\n        ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Aggregating data in density contour plots with Plotly Express\nDESCRIPTION: This snippet demonstrates how to aggregate data using the `z` and `histfunc` parameters in Plotly Express's `density_contour()` function.  It calculates the average Sepal Length grouped by Petal Length and Petal Width from the Iris dataset, illustrating data aggregation for density contours.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.density_contour(df, x=\"petal_length\", y=\"petal_width\", z=\"sepal_length\", histfunc=\"avg\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Assigning inferred columns to arguments\nDESCRIPTION: Shows reassigning Plotly Express default-inferred columns for arguments such as `facet_col` and excluding automatic color assignment using `px.NO_COLOR`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide(indexed=False)\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], facet_col=\"variable\", color=\"nation\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Absolute Positioning of Text Annotations\nDESCRIPTION: Shows how to position text annotations using paper coordinates instead of axis coordinates, making them stay fixed during pan and zoom operations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.scatter(x=[1, 2, 3], y=[1, 2, 3], title=\"Try panning or zooming!\")\n\nfig.add_annotation(text=\"Absolutely-positioned annotation\",\n                  xref=\"paper\", yref=\"paper\",\n                  x=0.3, y=0.3, showarrow=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Decreasing Domain Spanned by Axis in Plotly Graph Objects with Python\nDESCRIPTION: This example demonstrates restricting the domain of an axis to force it to span only the set range using `constrain='domain'`. The x and y axes are anchored together, and the range of the yaxis is set manually.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],\n    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]\n))\n\nfig.update_layout(\n    width = 800,\n    height = 500,\n    title = \"fixed-ratio axes\"\n)\nfig.update_xaxes(\n    scaleanchor = \"x\",\n    scaleratio = 1,\n)\nfig.update_yaxes(\n    range=(-0.5, 3.5),\n    constrain='domain'\n)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Text Labels to Shapes in Plotly\nDESCRIPTION: This example demonstrates how to add text labels to shapes in Plotly using the 'label' property with 'text' attribute. It creates a rectangle and a line shape, each with its own text label.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor='turquoise',\n    x0=1,\n    y0=1,\n    x1=2,\n    y1=3,\n    label=dict(text=\"Text in rectangle\")\n)\nfig.add_shape(\n    type=\"line\",\n    x0=3,\n    y0=0.5,\n    x1=5,\n    y1=0.8,\n    line_width=3,\n    label=dict(text=\"Text above line\")\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using SVG Paths for Shapes in Plotly\nDESCRIPTION: This code demonstrates how to use SVG paths to create complex shapes in Plotly figures. It creates a figure with text labels indicating different shape types and then adds shapes using the 'path' type. These shapes include quadratic Bezier curves, cubic Bezier curves, filled triangles, and filled polygons, defined using SVG path syntax.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Create scatter trace of text labels\nfig.add_trace(go.Scatter(\n    x=[2, 1, 8, 8],\n    y=[0.25, 9, 2, 6],\n    text=[\"Filled Triangle\",\n          \"Filled Polygon\",\n          \"Quadratic Bezier Curves\",\n          \"Cubic Bezier Curves\"],\n    mode=\"text\",\n))\n\n# Update axes properties\nfig.update_xaxes(\n    range=[0, 9],\n    zeroline=False,\n)\n\nfig.update_yaxes(\n    range=[0, 11],\n    zeroline=False,\n)\n\n# Add shapes\nfig.update_layout(\n    shapes=[\n        # Quadratic Bezier Curves\n        dict(\n            type=\"path\",\n            path=\"M 4,4 Q 6,0 8,4\",\n            line_color=\"RoyalBlue\",\n        ),\n        # Cubic Bezier Curves\n        dict(\n            type=\"path\",\n            path=\"M 1,4 C 2,8 6,4 8,8\",\n            line_color=\"MediumPurple\",\n        ),\n        # filled Triangle\n        dict(\n            type=\"path\",\n            path=\" M 1 1 L 1 3 L 4 1 Z\",\n            fillcolor=\"LightPink\",\n            line_color=\"Crimson\",\n        ),\n        # filled Polygon\n        dict(\n            type=\"path\",\n            path=\" M 3,7 L2,8 L2,9 L3,10 L4,10 L5,9 L5,8 L4,7 Z\",\n            fillcolor=\"PaleTurquoise\",\n            line_color=\"LightSeaGreen\",\n        ),\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly Visualization\nDESCRIPTION: Imports essential Python libraries including Plotly, NumPy, Pandas and SciPy for data manipulation and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interpolation-and-extrapolation-in-2d.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Integrating and Plotting Sine Function\nDESCRIPTION: Calculates the numerical integration of sin(x) from 0 to 2π using NumPy's trapezoid rule and creates a visualization using Plotly. The result is displayed as an interactive plot with an annotation showing the integration result.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/numerical-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n)\n\n# use numpy's built in trapezoid-rule integration tool\ndy = np.trapz(y, x)\n\nannotation = go.Annotation(\n    x=4.5,\n    y=1.25,\n    text='Numerical Integration of sin(x) is approximately %s' % (dy),\n    showarrow=False\n)\n\nlayout = go.Layout(\n    annotations=[annotation]\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\n\npy.iplot(fig, filename='1d-numerical-integration')\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data to [0, 1] Interval and Visualizing with Plotly in Python\nDESCRIPTION: This code normalizes the Apple stock data to the [0, 1] interval by dividing each point by the norm of the dataset. It then creates histograms of both the original and normalized data using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normalization.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata_norm_to_0_1 = [number/scipy.linalg.norm(data) for number in data]\n\ntrace1 = go.Histogram(\n    x=data,\n    opacity=0.75,\n    name='data',\n)\n\ntrace2 = go.Histogram(\n    x=data_norm_to_0_1,\n    opacity=0.75,\n    name='normalized to [0,1]',\n)\n\nfig = tools.make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(height=600, width=800, title='Normalize to [0,1]')\npy.iplot(fig, filename='apple-data-normalize-0-1')\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Text Labels using Plotly Express in Python\nDESCRIPTION: This snippet demonstrates creating a scatter plot with text labels using Plotly Express. It requires the `plotly.express` module and a dataset from `plotly.express.data`. The x and y axes represent GDP per capita and life expectancy respectively, with text labels showing country names.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year==2007 and continent=='Americas'\")\n\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", text=\"country\", log_x=True, size_max=60)\n\nfig.update_traces(textposition='top center')\n\nfig.update_layout(\n    height=800,\n    title_text='GDP and Life Expectancy (Americas, 2007)'\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Numerical Derivative of Sine Function in Python\nDESCRIPTION: This code calculates the numerical derivative of the sine function using NumPy, then plots both the original function and its derivative using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/numerical-differentiation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\ndy = np.zeros(y.shape,np.float)\ndy[0:-1] = np.diff(y)/np.diff(x)\ndy[-1] = (y[-1] - y[-2])/(x[-1] - x[-2])\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n    name='sin(x)'\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=dy,\n    mode='lines',\n    name='numerical derivative of sin(x)'\n)\n\ntrace_data = [trace1, trace2]\npy.iplot(trace_data, filename='numerical-differentiation')\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Subplots in Plotly Python\nDESCRIPTION: Demonstrates how to create vertically stacked subplots using make_subplots with 3 rows and 1 column.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(go.Scatter(\n    x=[3, 4, 5],\n    y=[1000, 1100, 1200],\n), row=1, col=1)\n\nfig.add_trace(go.Scatter(\n    x=[2, 3, 4],\n    y=[100, 110, 120],\n), row=2, col=1)\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2],\n    y=[10, 11, 12]\n), row=3, col=1)\n\nfig.update_layout(height=600, width=600, title_text=\"Stacked Subplots\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Hovermode to X in Plotly\nDESCRIPTION: This snippet shows how to set the hovermode to 'x'.  It creates a line plot using Plotly Express and disables the default hovertemplate for a more compact label.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\n\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\", title=\"layout.hovermode='x'\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Horizontal Bar Chart with Graph Objects\nDESCRIPTION: Create a simple horizontal bar chart using Plotly Graph Objects with predefined data for animals\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-bar-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Bar(\n            x=[20, 14, 23],\n            y=['giraffes', 'orangutans', 'monkeys'],\n            orientation='h'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Variables to Shape Labels in Plotly Python\nDESCRIPTION: This snippet demonstrates how to use texttemplate to add variables to shape labels in Plotly. It shows examples of using raw variables (x0, y0) and calculated variables (height, slope, length, width) in different shapes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor=\"MediumSlateBlue\",\n    x0=-0.5,\n    y0=-0.5,\n    x1=1,\n    y1=1,\n    label=dict(\n        texttemplate=\"x0 is %{x0:.3f}, y0 is %{y0:.3f}\", font=dict(color=\"DarkOrange\")\n    ),\n)\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor=\"LightGreen\",\n    x0=1,\n    y0=1.75,\n    x1=2.25,\n    y1=3,\n    label=dict(texttemplate=\"Height: %{height:.3f}\", font=dict(color=\"DarkOrange\")),\n)\nfig.add_shape(\n    type=\"line\",\n    x0=3,\n    y0=0.5,\n    x1=5,\n    y1=1.5,\n    line_width=3,\n    label=dict(\n        texttemplate=\"Slope of %{slope:.3f} and length of %{length:.3f}\",\n        font=dict(size=20),\n    ),\n)\nfig.add_shape(\n    type=\"rect\",\n    fillcolor=\"Lavender\",\n    x0=2.5,\n    y0=2.5,\n    x1=5,\n    y1=3.5,\n    label=dict(\n        texttemplate=\"Width: %{width:.3f}\",\n        font=dict(family=\"Courier New, monospace\", size=20),\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Animated Bubble Map with Plotly Express\nDESCRIPTION: Creates an animated bubble map that shows population changes over time using the gapminder dataset. The animation is controlled by the year field.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder()\nfig = px.scatter_geo(df, locations=\"iso_alpha\", color=\"continent\",\n                     hover_name=\"country\", size=\"pop\",\n                     animation_frame=\"year\",\n                     projection=\"natural earth\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Advanced Bubble Chart Creation\nDESCRIPTION: Creates an advanced bubble chart with continent-based coloring, population-based bubble sizes, and custom hover text.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/graph-data-from-mysql-database-in-python.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Complete bubble chart code omitted for brevity due to length, includes size mode, color definitions, hover text, and trace generation\n```\n\n----------------------------------------\n\nTITLE: Styling Cultural Map Features (Country Borders)\nDESCRIPTION: This example demonstrates how to enable and style cultural features, specifically country borders, on a Geo Map. The map's visibility is initially set to `False`, and then `showcountries` is set to `True` with a specified `countrycolor`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(\n    visible=False, resolution=50,\n    showcountries=True, countrycolor=\"RebeccaPurple\"\n)\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Legend Item Sizes in Plotly Graph Objects\nDESCRIPTION: This example demonstrates how to control the size of legend items using the 'itemsizing' attribute. It creates two scatter plots with different marker sizes but constant legend item sizes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n    mode='markers',\n    marker={'size':10}\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n    mode='markers',\n    marker={'size':100}\n))\n\nfig.update_layout(legend= {'itemsizing': 'constant'})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Patterns with Graph Objects\nDESCRIPTION: This example shows how to add patterns to a bar chart using the lower-level plotly.graph_objects API, which provides more flexibility than Plotly Express for custom visualizations by setting marker_pattern_shape for each trace.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=[\"a\",\"b\"], y=[1,2], marker_pattern_shape=\".\"))\nfig.add_trace(go.Bar(x=[\"a\",\"b\"], y=[3,1], marker_pattern_shape=\"x\"))\nfig.add_trace(go.Bar(x=[\"a\",\"b\"], y=[2,3], marker_pattern_shape=\"+\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Polar Bar Chart with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates the creation of a polar bar chart that represents wind data using Plotly Express. It visualizes the radial frequency with directional bars colored by strength.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.wind()\nfig = px.bar_polar(df, r=\"frequency\", theta=\"direction\", color=\"strength\", template=\"plotly_dark\",\n            color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customized Bubble Chart with Color and Opacity\nDESCRIPTION: Creates a bubble chart with custom colors, opacity levels, and sizes for each marker.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bubble-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter(\n    x=[1, 2, 3, 4], y=[10, 11, 12, 13],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',\n               'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        opacity=[1, 0.8, 0.6, 0.4],\n        size=[40, 60, 80, 100],\n    )\n)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Title of Plotly FigureWidget (Python)\nDESCRIPTION: This snippet updates the title of the FigureWidget's layout. It accesses the `layout.title` attribute and assigns a new title string, which will immediately reflect in the FigureWidget display.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nf.layout.title = 'Hello FigureWidget'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hovertext to OHLC Chart in Python using Plotly\nDESCRIPTION: This example shows how to add custom hovertext to an OHLC chart. It creates a list of hovertext strings containing open and close values for each data point.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ohlc-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\nfrom datetime import datetime\n\nhovertext=[]\nfor i in range(len(df['AAPL.Open'])):\n    hovertext.append('Open: '+str(df['AAPL.Open'][i])+'<br>Close: '+str(df['AAPL.Close'][i]))\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'],\n                text=hovertext,\n                hoverinfo='text'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hexbin Map with Minimum Count and Opacity in Plotly\nDESCRIPTION: This example extends the hexbin map by setting a minimum count for hexbins and a custom opacity level. This is used for better visualization when some bins may have low data points. The map still uses Plotly's carshare dataset. The Mapbox token is required for accessing map styles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hexbin-mapbox.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\ndf = px.data.carshare()\n\nfig = ff.create_hexbin_mapbox(\n    data_frame=df, lat=\"centroid_lat\", lon=\"centroid_lon\",\n    nx_hexagon=10, opacity=0.5, labels={\"color\": \"Point Count\"},\n    min_count=1,\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Underlying Data in Hexbin Map using Plotly\nDESCRIPTION: This example creates a hexbin map with additional visual detail by displaying the underlying data points. The snippet includes parameters to modify the size, opacity, and color of the displayed points. It requires a Mapbox access token and uses the Plotly carshare dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hexbin-mapbox.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\npx.set_mapbox_access_token(open(\".mapbox_token\").read())\ndf = px.data.carshare()\n\nfig = ff.create_hexbin_mapbox(\n    data_frame=df, lat=\"centroid_lat\", lon=\"centroid_lon\",\n    nx_hexagon=10, opacity=0.5, labels={\"color\": \"Point Count\"},\n    min_count=1, color_continuous_scale=\"Viridis\",\n    show_original_data=True,\n    original_data_marker=dict(size=4, opacity=0.6, color=\"deeppink\")\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Fixed Ratio Axes with Compressed Domain in Plotly Graph Objects with Python\nDESCRIPTION: This snippet demonstrates how to handle axis compression when using fixed ratio axes in Plotly graph objects. The `constrain` property determines how compression happens: by increasing the range or decreasing the domain.  In this example the x axis is compressed by decreasing its \"domain\".\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],\n    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]\n))\nfig.update_layout(\n    width = 800,\n    height = 500,\n    title = \"fixed-ratio axes with compressed axes\"\n)\nfig.update_xaxes(\n    range=[-1,4],  # sets the range of xaxis\n    constrain=\"domain\",  # meanwhile compresses the xaxis by decreasing its \"domain\"\n)\nfig.update_yaxes(\n    scaleanchor = \"x\",\n    scaleratio = 1\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating OLS Regression Plot with Plotly Express\nDESCRIPTION: This Python snippet demonstrates how to create a scatter plot with an Ordinary Least Squares (OLS) regression trendline using Plotly Express. The dataset used is the 'tips' dataset, and the regression line is plotted based on 'total_bill' against 'tip'. No external libraries are required beyond Plotly itself, and the expected input is a DataFrame with the 'total_bill' and 'tip' columns.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-regression.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(\n    df, x='total_bill', y='tip', opacity=0.65,\n    trendline='ols', trendline_color_override='darkblue'\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding High and Low Traces to Figure - Python\nDESCRIPTION: This code snippet adds traces for the high and low prices to the Plotly figure, setting the appearance and visibility as needed. It uses data from the loaded dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfig.add_trace(\n    go.Scatter(x=list(df.index),\n               y=list(df.High),\n               name=\"High\",\n               line=dict(color=\"MediumSlateBlue\")))\n```\n\nLANGUAGE: Python\nCODE:\n```\nfig.add_trace(\n    go.Scatter(x=list(df.index),\n               y=[df.High.mean()] * len(df.index),\n               name=\"High Average\",\n               visible=False,\n               line=dict(color=\"MediumSlateBlue\", dash=\"dash\")))\n```\n\nLANGUAGE: Python\nCODE:\n```\nfig.add_trace(\n    go.Scatter(x=list(df.index),\n               y=list(df.Low),\n               name=\"Low\",\n               line=dict(color=\"DarkOrange\")))\n```\n\nLANGUAGE: Python\nCODE:\n```\nfig.add_trace(\n    go.Scatter(x=list(df.index),\n               y=[df.Low.mean()] * len(df.index),\n               name=\"Low Average\",\n               visible=False,\n               line=dict(color=\"DarkOrange\", dash=\"dash\")))\n```\n\n----------------------------------------\n\nTITLE: Disabling Responsiveness in Plotly Python Figures\nDESCRIPTION: This code shows how to turn off the default responsive behavior of Plotly figures. It forces the figure to maintain a fixed size regardless of window dimensions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nconfig = {'responsive': False}\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]))\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Sorting Histogram Bars by Category Order with Plotly Express in Python\nDESCRIPTION: These snippets demonstrate how to sort histogram bars based on the ordering logic of categorical values using the categoryorder attribute. It shows sorting in both ascending and descending order.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.histogram(df, x=\"day\").update_xaxes(categoryorder='total ascending')\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.histogram(df, x=\"day\", color=\"smoker\").update_xaxes(categoryorder='total descending')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Polar Plot with Plotly Express in Python\nDESCRIPTION: This snippet shows how to create a line polar plot using Plotly Express, with customized colors and template.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.wind()\nfig = px.line_polar(df, r=\"frequency\", theta=\"direction\", color=\"strength\", line_close=True,\n                    color_discrete_sequence=px.colors.sequential.Plasma_r,\n                    template=\"plotly_dark\",)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Colors for Icicle Chart Sectors in Plotly\nDESCRIPTION: This example demonstrates how to set custom colors for individual sectors in an Icicle chart using Plotly. It uses a list of colors in the marker_colors attribute.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nlabels = [\"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"B1\", \"B2\"]\nparents = [\"\", \"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"container\", \"B1\"]\n\nfig = go.Figure(go.Icicle(\n    labels = labels,\n    parents = parents,\n    marker_colors = [\"pink\", \"royalblue\", \"lightgray\", \"purple\",\n                     \"cyan\", \"lightgray\", \"lightblue\", \"lightgreen\"]))\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Chart with Repeated Labels in Python\nDESCRIPTION: Demonstrates how Plotly automatically groups rows with the same value in the 'names' parameter into the same pie sector. This example uses the tips dataset with 244 rows but only 4 distinct days.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n# This dataframe has 244 lines, but 4 distinct values for `day`\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styling A and B Axes in Carpet Plot with Plotly\nDESCRIPTION: This code snippet demonstrates advanced styling of A and B axes in a carpet plot. It includes customization of grid lines, colors, and overall plot appearance with a black background.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-plot.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        ticksuffix = 'm',\n        smoothing = 1,\n        minorgridcount = 9,\n        minorgridwidth = 0.6,\n        minorgridcolor = 'white',\n        gridcolor = 'white',\n        color = 'white'\n    ),\n    baxis = dict(\n        ticksuffix = 'Pa',\n        smoothing = 1,\n        minorgridcount = 9,\n        minorgridwidth = 0.6,\n        gridcolor = 'white',\n        minorgridcolor = 'white',\n        color = 'white'\n    )\n))\n\nfig.update_layout(\n    plot_bgcolor = 'black',\n    paper_bgcolor = 'black',\n    xaxis = dict(\n        showgrid = False,\n        showticklabels = False\n    ),\n    yaxis = dict(\n        showgrid = False,\n        showticklabels = False\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Axes in Subplots - Python\nDESCRIPTION: This example demonstrates how to synchronize axes in subplots created with `make_subplots` from Plotly, allowing the x-axes of multiple subplots to be zoomed and panned together.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\nN = 20\nx = np.linspace(0, 1, N)\n\nfig = make_subplots(1, 3)\nfor i in range(1, 4):\n    fig.add_trace(go.Scatter(x=x, y=np.random.random(N)), 1, i)\nfig.update_xaxes(matches='x')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Jinja2 Integration\nDESCRIPTION: This HTML template provides a basic structure for integrating a Plotly graph using Jinja2 templating.  It includes a placeholder `{{ fig }}` where the HTML representation of the Plotly figure will be inserted. The UTF-8 charset is essential for plotly graphics to get e.g. negative signs to render correctly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/interactive-html-export.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;   &lt;!--It is necessary to use the UTF-8 encoding with plotly graphics to get e.g. negative signs to render correctly --&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;h1&gt;Here's a Plotly graph!&lt;/h1&gt;\n{{ fig }}\n&lt;p&gt;And here's some text after the graph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n```\n\n----------------------------------------\n\nTITLE: Creating a Plotly Graph Object Figure - Python\nDESCRIPTION: This snippet shows how to create a figure using Plotly Graph Objects, including the setup of text labels and layout, along with displaying the figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Scatter(\n        mode=\"markers+text\",\n        x=[10,20],\n        y=[20, 10],\n        text=[\"Point A\", \"Point B\"]\n    )],\n    layout=dict(height=400, width=400, template=\"none\")\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Stamen Terrain Density Map with Mapbox Token\nDESCRIPTION: Shows how to create a density map using Stamen Terrain base map with Mapbox, requiring a Stadia Maps token. This example demonstrates token-based authentication and custom map styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/density-heatmaps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ntoken = open(\".mapbox_token\").read() # you will need your own token\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nfig = px.density_mapbox(df, lat='Latitude', lon='Longitude', z='Magnitude', radius=10,\n                        center=dict(lat=0, lon=180), zoom=0,\n                        map_style=\"stamen-terrain\")\nfig.update_layout(mapbox_accesstoken=token)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Simple US Airports Map\nDESCRIPTION: Creates a basic scatter map of US airports using go.Scattergeo, with markers colored by traffic count.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/scatter-plots-on-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf['text'] = df['airport'] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: ' + df['cnt'].astype(str)\n\nfig = go.Figure(data=go.Scattergeo(\n        lon = df['long'],\n        lat = df['lat'],\n        text = df['text'],\n        mode = 'markers',\n        marker_color = df['cnt'],\n        ))\n\nfig.update_layout(\n        title = 'Most trafficked US airports<br>(Hover for airport names)',\n        geo_scope='usa',\n    )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Excluding Inside Tick Labels from Range in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates how to use `insiderange` instead of `range` on an axis to prevent overlap with tick labels positioned inside the axis.  It sets `ticklabelposition=\"inside\"` on the y axis and `insiderange` on the x axis, ensuring that the data point is displayed after the y axis labels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.stocks(indexed=True)\n\nfig = px.line(df, df.index, y=\"GOOG\")\nfig.update_yaxes(ticklabelposition=\"inside\", title=dict(text=\"Price\"))\nfig.update_xaxes(insiderange=['2018-10-01', '2019-01-01'], title=dict(text=\"Date\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Spikes in 3D Plots\nDESCRIPTION: Demonstrates how to disable tooltip guideline spikes for specific axes while keeping them for others. Shows how to control the visibility of projection lines during hover interactions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-axes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nN = 50\nfig = go.Figure(data=[go.Mesh3d(x=(30*np.random.randn(N)),\n                   y=(25*np.random.randn(N)),\n                   z=(30*np.random.randn(N)),\n                   opacity=0.5,)])\nfig.update_layout(scene=dict(xaxis_showspikes=False,\n                             yaxis_showspikes=False))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Data Processing with Pandas\nDESCRIPTION: Converts MySQL query results into a pandas DataFrame and processes the data for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/graph-data-from-mysql-database-in-python.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame( [[ij for ij in i] for i in rows] )\ndf.rename(columns={0: 'Name', 1: 'Continent', 2: 'Population', 3: 'LifeExpectancy', 4:'GNP'}, inplace=True);\ndf = df.sort_values(['LifeExpectancy'], ascending=[1]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Low-Pass FFT Filter in Python\nDESCRIPTION: This code implements a low-pass FFT filter on the wind speed data. It defines the cutoff frequency, transition band, and applies the filter using convolution. The filtered signal is then plotted using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/fft-filters.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfc = 0.1\nb = 0.08\nN = int(np.ceil((4 / b)))\nif not N % 2: N += 1\nn = np.arange(N)\n\nsinc_func = np.sinc(2 * fc * (n - (N - 1) / 2.))\nwindow = 0.42 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) + 0.08 * np.cos(4 * np.pi * n / (N - 1))\nsinc_func = sinc_func * window\nsinc_func = sinc_func / np.sum(sinc_func)\n\ns = list(data['10 Min Std Dev'])\nnew_signal = np.convolve(s, sinc_func)\n\ntrace1 = go.Scatter(\n    x=list(range(len(new_signal))),\n    y=new_signal,\n    mode='lines',\n    name='Low-Pass Filter',\n    marker=dict(\n        color='#C54C82'\n    )\n)\n\nlayout = go.Layout(\n    title='Low-Pass Filter',\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='fft-low-pass-filter')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Polar Chart with Multiple Line Traces in Python\nDESCRIPTION: This snippet demonstrates how to create a basic polar chart with multiple line traces representing different patterns. It uses pandas to read data and plotly.graph_objs to create Scatter objects with polar coordinates, then configures layout options.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/legacy-polar-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport pandas as pd\n\ndf = pd.read_csv('polar_dataset.csv')\n\ntrace1 = go.Scatter(\n    r=df['x1'],\n    t=df['y'],\n    mode='lines',\n    name='go.Figure8',\n    marker=dict(\n        color='none',\n        line=dict(\n            color='peru'\n        )\n    )\n)\ntrace2 = go.Scatter(\n    r=df['x2'],\n    t=df['y'],\n    mode='lines',\n    name='Cardioid',\n    marker=dict(\n        color='none',\n        line=dict(\n            color='darkviolet'\n        )\n    )\n)\ntrace3 = go.Scatter(\n    r=df['x3'],\n    t=df['y'],\n    mode='lines',\n    name='Hypercardioid',\n    marker=dict(\n        color='none',\n        line=dict(\n            color='deepskyblue'\n        )\n    )\n)\ntrace4 = go.Scatter(\n    r=df['x4'],\n    t=df['y'],\n    mode='lines',\n    name='Subcardioid',\n    marker=dict(\n        color='none',\n        line=dict(\n            color='orangered'\n        )\n    )\n)\ntrace5 = go.Scatter(\n    r=df['x5'],\n    t=df['y'],\n    mode='lines',\n    name='Supercardioid',\n    marker=dict(\n        color='none',\n        line=dict(\n            color='green'\n        )\n    )\n)\ndata = [trace1, trace2, trace3, trace4, trace5]\nlayout = go.Layout(\n    title='Mic Patterns',\n    font=dict(\n        family='Arial, sans-serif;',\n        size=12,\n        color='#000'\n    ),\n    orientation=-90\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='polar-line')\n```\n\n----------------------------------------\n\nTITLE: Comparing Histogram and Bar Charts with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates the difference between histogram and bar charts using Plotly Express. It creates both chart types using the same dataset and compares their outputs.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig1 = px.bar(df, x='day', y='tip', height=300,\n              title='Stacked Bar Chart - Hover on individual items')\nfig2 = px.histogram(df, x='day', y='tip', histfunc='sum', height=300,\n                    title='Histogram Chart')\nfig1.show()\nfig2.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Links to Plotly Dashboard Header in Python\nDESCRIPTION: Shows how to add links to the header of a Plotly dashboard using Python. Multiple links can be added to the dashboard settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard['settings']['links'] = []\nmy_dboard['settings']['links'].append({'title': 'Link to Plotly', 'url': 'https://plot.ly/'})\nmy_dboard['settings']['links'].append({'title': 'Link to Python Website', 'url': 'https://www.python.org/'})\n```\n\n----------------------------------------\n\nTITLE: Creating a Choropleth Map for a Single State (Florida)\nDESCRIPTION: This snippet creates a choropleth map focusing on the population of counties in Florida using data pulled from a CSV file. It uses a specified colorscale and background colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')\ndf_sample_r = df_sample[df_sample['STNAME'] == 'Florida']\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\nendpts = list(np.mgrid[min(values):max(values):4j])\ncolorscale = [\"#030512\",\"#1d1d3b\",\"#323268\",\"#3d4b94\",\"#3e6ab0\",\n              \"#4989bc\",\"#60a7c7\",\"#85c5d3\",\"#b7e0e4\",\"#eafcfd\"]\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['Florida'], show_state_data=True,\n    colorscale=colorscale, binning_endpoints=endpts, round_legend_values=True,\n    plot_bgcolor='rgb(229,229,229)',\n    paper_bgcolor='rgb(229,229,229)',\n    legend_title='Population by County',\n    county_outline={'color': 'rgb(255,255,255)', 'width': 0.5},\n    exponent_format=True,\n)\nfig.layout.template = None\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Manhattan Plot Colors in Plotly and Dash\nDESCRIPTION: This snippet shows how to customize the colors of significant points and the suggestive and genome-wide lines in a ManhattanPlot. The required dependencies are the 'dash_bio' library and 'pandas'. It takes a DataFrame as input and outputs a customized Manhattan plot with specified highlight colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-manhattanplot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport dash_bio\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/manhattan_data.csv')\n\ndash_bio.ManhattanPlot(\n    dataframe=df,\n    highlight_color='#00FFAA',\n    suggestiveline_color='#AA00AA',\n    genomewideline_color='#AA5500'\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting with Specified Themes in Plotly Express\nDESCRIPTION: This code snippet demonstrates using different pre-defined themes with Plotly Express to create scatter plots. It queries data for the year 2007 from the gapminder dataset and applies various themes to the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder()\ndf_2007 = df.query(\"year==2007\")\n\nfor template in [\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"]:\n    fig = px.scatter(df_2007,\n                     x=\"gdpPercap\", y=\"lifeExp\", size=\"pop\", color=\"continent\",\n                     log_x=True, size_max=60,\n                     template=template, title=\"Gapminder 2007: '%s' theme\" % template)\n    fig.show()\n```\n\n----------------------------------------\n\nTITLE: Handling Hover Information with Binary String Images in Plotly\nDESCRIPTION: Shows how binary string mode affects hover information in an image visualization. When binary_string=True, original intensity values are not available in the hover tooltip.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import data\nimport numpy as np\nimg = np.arange(100).reshape((10, 10))\nfig = px.imshow(img, binary_string=True)\n# You can check that only x and y are displayed in the hover\n# You can use a hovertemplate to override the hover information\n# See https://plotly.com/python/hover-text-and-formatting/#customize-tooltip-text-with-a-hovertemplate\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Correlation Between Saw and Shifted Saw Wave with Plotly\nDESCRIPTION: This code calculates and plots the correlation between a saw wave and a phase-shifted saw wave, using NumPy, SciPy's signal processing functions, and Plotly for visualization. The code defines x values, creates a standard saw wave, a shifted saw wave, calculates the convolution between them, and then uses Plotly scatter plots to present the saw waves and their convolution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/1d-correlation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 20, 50)\n\nsaw_y = signal.sawtooth(t=x)\nsquare_y = signal.square(t=x)\nshifted_saw_y = signal.sawtooth(t=np.linspace(10, 30, 50))\nconvolve_y = signal.convolve(saw_y, shifted_saw_y)\n\ntrace_saw = go.Scatter(\n    x = x,\n    y = saw_y,\n    mode = 'lines',\n    name = 'Saw',\n    marker = dict(\n        color='#FF7844'\n    ),\n    opacity = 0.8\n)\n\ntrace_shifted_saw = go.Scatter(\n    x = x,\n    y = shifted_saw_y,\n    mode = 'lines',\n    name = 'Shifted Saw',\n    marker = dict(\n        color='#A64942'\n    ),\n    opacity = 0.8\n)\n\ntrace_convolution = go.Scatter(\n    x = x,\n    y = convolve_y,\n    mode = 'lines',\n    name = 'Convolution',\n    marker = dict(\n        color='#53354A'\n    )\n)\n\ndata = [trace_saw, trace_shifted_saw, trace_convolution]\npy.iplot(data, filename='1d-convolution-of-saw-and-shifted-saw')\n```\n\n----------------------------------------\n\nTITLE: Setting Spark Home Environment Variable\nDESCRIPTION: Sets the SPARK_HOME environment variable to the local Spark installation directory. This variable is essential for the PySpark setup script to locate Spark resources.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport SPARK_HOME=\"$HOME/Downloads/spark-1.3.1\"\n```\n\n----------------------------------------\n\nTITLE: Sunburst with Discrete Color in px.sunburst\nDESCRIPTION: This snippet illustrates using discrete colors in a Plotly Express sunburst chart. It loads the `tips` dataset and creates a sunburst chart with 'sex', 'day', and 'time' as the path, 'total_bill' as values, and 'day' as the color.  The color of each sector is determined by the value of the `color` column for all its children; if mixed, a default color is used.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['sex', 'day', 'time'], values='total_bill', color='day')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Graticules (Latitude and Longitude Grid Lines)\nDESCRIPTION: This code snippet shows how to display graticules (latitude and longitude grid lines) on a Geo Map.  `lataxis_showgrid` and `lonaxis_showgrid` are set to True to enable the grid lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(lataxis_showgrid=True, lonaxis_showgrid=True)\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-categorical Axes\nDESCRIPTION: Demonstrates how to create a two-level categorical axis using 2-dimensional lists for hierarchical categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n  x = [['First', 'First', 'Second', 'Second'],\n       [\"A\", \"B\", \"A\", \"B\"]],\n  y = [2, 3, 1, 5],\n  name = \"Adults\",\n))\n\nfig.add_trace(go.Bar(\n  x = [['First', 'First', 'Second', 'Second'],\n       [\"A\", \"B\", \"A\", \"B\"]],\n  y = [8, 3, 6, 5],\n  name = \"Children\",\n))\n\nfig.update_layout(title_text=\"Multi-category axis\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: ECDF Plot with Rug Marginal\nDESCRIPTION: Shows how to add a rug plot marginal to an ECDF visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", color=\"sex\", marginal=\"rug\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Tickmode to Linear - Plotly Python\nDESCRIPTION: This snippet demonstrates how to set the tick mode of a Plotly graph to 'linear', defining tick placement through a starting position 'tick0' and a tick step 'dtick'. It creates a scatter plot with a specified x-axis layout for ticks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\n))\n\nfig.update_layout(\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0.5,\n        dtick = 0.75\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Row and Column Size in Plotly Tables (Python)\nDESCRIPTION: This example demonstrates how to customize the row and column sizes in a Plotly table. It sets the `columnorder` and `columnwidth` properties of the `go.Table` object. It also showcases multi-line headers with HTML-like formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nvalues = [['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL<br>EXPENSES</b>'], #1st col\n  [\"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\"]]\n\n\nfig = go.Figure(data=[go.Table(\n  columnorder = [1,2],\n  columnwidth = [80,400],\n  header = dict(\n    values = [['<b>EXPENSES</b><br>as of July 2017'],\n                  ['<b>DESCRIPTION</b>']],\n    line_color='darkslategray',\n    fill_color='royalblue',\n    align=['left','center'],\n    font=dict(color='white', size=12),\n    height=40\n  ),\n  cells=dict(\n    values=values,\n    line_color='darkslategray',\n    fill=dict(color=['paleturquoise', 'white']),\n    align=['left', 'center'],\n    font_size=12,\n    height=30)\n    )\n])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Graph Objects\nDESCRIPTION: This snippet creates Plotly graph objects to visualize the tree structure. It generates scatter plots for the edges (lines) and nodes (markers) of the tree, customizing their appearance with colors, sizes, and hover information. Dependencies: plotly.graph_objects as go.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tree-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=Xe,\n                   y=Ye,\n                   mode='lines',\n                   line=dict(color='rgb(210,210,210)', width=1),\n                   hoverinfo='none'\n                   ))\nfig.add_trace(go.Scatter(x=Xn,\n                  y=Yn,\n                  mode='markers',\n                  name='bla',\n                  marker=dict(symbol='circle-dot',\n                                size=18,\n                                color='#6175c1',    #'#DB4551',\n                                line=dict(color='rgb(50,50,50)', width=1)\n                                ),\n                  text=labels,\n                  hoverinfo='text',\n                  opacity=0.8\n                  ))\"\n```\n\n----------------------------------------\n\nTITLE: Adding Axis-Referenced Annotations\nDESCRIPTION: Demonstrates how to add annotations referenced to axis domains, allowing for relative positioning based on axis length or height.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndf = px.data.wind()\nfig = px.scatter(df, y=\"frequency\")\n\nfig.update_layout(xaxis=dict(domain=[0, 0.5]), yaxis=dict(domain=[0.25, 0.75]))\n\nfig.add_annotation(\n    xref=\"x domain\",\n    yref=\"y domain\",\n    x=0.25,\n    y=0.4,\n    text=\"An annotation referencing the axes\",\n    arrowhead=2,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines on Mapbox Maps Using Scattermapbox\nDESCRIPTION: This example shows how to use the deprecated Mapbox-based go.Scattermapbox for creating lines on maps. Similar to Scattermap, it creates line traces with markers at the data points, but uses the Mapbox rendering engine instead of MapLibre. The layout is configured with mapbox parameters for styling and positioning.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-tile-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n    mode = \"markers+lines\",\n    lon = [10, 20, 30],\n    lat = [10, 20,30],\n    marker = {'size': 10}))\n\nfig.add_trace(go.Scattermapbox(\n    mode = \"markers+lines\",\n    lon = [-50, -60,40],\n    lat = [30, 10, -20],\n    marker = {'size': 10}))\n\nfig.update_layout(\n    margin ={'l':0,'t':0,'b':0,'r':0},\n    mapbox = {\n        'center': {'lon': 10, 'lat': 10},\n        'style': \"open-street-map\",\n        'center': {'lon': -20, 'lat': -20},\n        'zoom': 1})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Gridlines and Ticks to Categorical Axes\nDESCRIPTION: Example showing how to add gridlines and ticks to categorical axes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.bar(x=[\"A\",\"B\",\"C\"], y=[1,3,2])\nfig.update_xaxes(showgrid=True, ticks=\"outside\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Print-Friendly Black and White Patterns\nDESCRIPTION: This example shows how to create a printer-friendly chart by setting pattern_fillmode to 'replace' instead of the default 'overlay', and using a monochrome color scheme suitable for black and white printing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.bar(df, x=\"medal\", y=\"count\", color=\"nation\",\n             pattern_shape=\"nation\", pattern_shape_sequence=[\".\", \"x\", \"+\"],\n             template=\"simple_white\"\n            )\nfig.update_traces(\n    marker=dict(color=\"black\", line_color=\"black\", pattern_fillmode=\"replace\")\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data to Custom Interval and Visualizing with Plotly in Python\nDESCRIPTION: This snippet normalizes the Apple stock data to a custom interval [10, 50]. It then creates histograms of both the original and normalized data using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normalization.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na = 10\nb = 50\ndata_norm_to_a_b = [(number - a)/(b - a) for number in data]\n\ntrace1 = go.Histogram(\n    x=data,\n    opacity=0.75,\n    name='data',\n)\n\ntrace2 = go.Histogram(\n    x=data_norm_to_a_b,\n    opacity=0.75,\n    name='normalized to [10,50]',\n)\n\nfig = tools.make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(height=600, width=800, title='Normalize to [10,50]')\npy.iplot(fig, filename='apple-data-normalize-a-b')\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redshift Using Psycopg2 in Python\nDESCRIPTION: Establishes a direct connection to Amazon Redshift using the psycopg2 library. Creates a cursor object for executing SQL queries against the Redshift database.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg2\nconn = psycopg2.connect(\n    host=\"datawarehouse.cm4z2iunjfsc.us-west-2.redshift.amazonaws.com\",\n    user=redshift_user,\n    port=port,\n    password=redshift_pass,\n    dbname=dbname)\ncur = conn.cursor() # create a cursor for executing queries\n```\n\n----------------------------------------\n\nTITLE: Date Histogram with Plotly Express\nDESCRIPTION: This code snippet creates a histogram from date data.  It utilizes the `px.data.stocks()` dataset and plots the distribution of the 'date' column.  The `update_layout` function is used to add a gap between the bars.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks()\nfig = px.histogram(df, x=\"date\")\nfig.update_layout(bargap=0.2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Area Funnel Plot with go.Funnelarea in Python\nDESCRIPTION: This example illustrates how to create a basic area funnel plot using the go.Funnelarea class from plotly.graph_objects, allowing for more customization and complex structures compared to Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\nfig = go.Figure(go.Funnelarea(\n    text = [\"The 1st\",\"The 2nd\", \"The 3rd\", \"The 4th\", \"The 5th\"],\n    values = [5, 4, 3, 2, 1]\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Ternary Contour Plot with ILR Interpolation\nDESCRIPTION: This snippet generates a ternary contour plot using interpolation based on the isometric log-ratio (ILR) transformation. It defines coordinate grids a and b such that a + b <= 1, then stacks (a,b, 1-a-b) into coords, and calculates value based on a and b. The plot is created by create_ternary_contour with interp_mode='cartesian'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-contour.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\na, b = np.mgrid[0:1:20j, 0:1:20j]\nmask = a + b <= 1\na, b = a[mask], b[mask]\ncoords = np.stack((a, b, 1 - a - b))\nvalue = np.sin(3.2 * np.pi * (a + b)) + np.sin(3 * np.pi * (a - b))\nfig = ff.create_ternary_contour(coords, value, interp_mode='cartesian',\n                                ncontours=9)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Changing Icicle Chart Direction in Plotly\nDESCRIPTION: This example demonstrates how to change the direction of an Icicle chart using Plotly. It uses the 'tiling' attribute with 'orientation' and 'flip' settings to create a chart growing upwards (flame chart).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv')\n\nfig = go.Figure(\n    go.Icicle(\n        ids = df.ids,\n        labels = df.labels,\n        parents = df.parents,\n        root_color=\"lightgrey\",\n        tiling = dict(\n            orientation='v',\n            flip='y'\n        )\n    )\n)\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Heatmap using Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to generate a periodic table heatmap using Plotly Express, emphasizing reduced complexity and array manipulation. It utilizes Plotly Express's `imshow` for simplicity, with custom data for hover annotations, requiring dependencies on Plotly Express and NumPy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\n\nfig = px.imshow(color, color_continuous_scale=colorscale, aspect=\"auto\",\n               title='Periodic Table')\nfig.update_traces(\n    text=symbol, texttemplate=\"%{text}\", textfont_size=12,\n    customdata=np.moveaxis([element, atomic_mass], 0,-1),\n    hovertemplate=\"%{customdata[0]}<br>Atomic Mass: %{customdata[1]:.2f}<extra></extra>\"\n)\nfig.update_xaxes(visible=False)\nfig.update_yaxes(visible=False)\nfig.update_coloraxes(showscale=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Callbacks for Dynamic Updates\nDESCRIPTION: Defines and installs a callback function that updates the DataShader image whenever the axis ranges or figure dimensions change. This enables responsive visualization during user interaction.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef update_ds_image(layout, x_range, y_range, plot_width, plot_height):\n    img = f.layout.images[0]\n\n    # Update with batch_update so all updates happen simultaneously\n    with f.batch_update():\n        img.x = x_range[0]\n        img.y = y_range[1]\n        img.sizex = x_range[1] - x_range[0]\n        img.sizey = y_range[1] - y_range[0]\n        img.source = gen_ds_image(x_range, y_range, plot_width, plot_height)\n\n# Install callback to run exactly once if one or more of the following properties changes\n#  - xaxis range\n#  - yaxis range\n#  - figure width\n#  - figure height\nf.layout.on_change(update_ds_image, 'xaxis.range', 'yaxis.range', 'width', 'height')\n```\n\n----------------------------------------\n\nTITLE: Controlling Facet Ordering - Python\nDESCRIPTION: This code snippet demonstrates how to control the ordering of facets and categorical data in Plotly Express visualizations, allowing for customized arrangements of bars and facets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.bar(df, x=\"day\", y=\"total_bill\", color=\"smoker\", barmode=\"group\", facet_col=\"sex\", category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"smoker\": [\"Yes\", \"No\"], \"sex\": [\"Male\", \"Female\"]})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Standard Mode ECDF Plot\nDESCRIPTION: Creates an ECDF plot in standard mode with markers showing fraction at or below X value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.ecdf(df, x=[1,2,3,4], markers=True, ecdfmode=\"standard\",\n              title=\"ecdfmode='standard' (Y=fraction at or below X value, this the default)\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Values with Full Figure Method - Python\nDESCRIPTION: This snippet shows how to access the full figure representation and computed defaults via Plotly.js for debugging and learning.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfull_fig = fig.full_figure_for_development()\nprint(full_fig)\n```\n\n----------------------------------------\n\nTITLE: Parallel Categories with Counts\nDESCRIPTION: Shows how to create a parallel categories diagram with predefined frequency counts for combinations of attributes using Graph Objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Parcats(\n    dimensions=[\n        {'label': 'Hair',\n         'values': ['Black', 'Brown', 'Brown', 'Brown', 'Red']},\n        {'label': 'Eye',\n         'values': ['Brown', 'Brown', 'Brown', 'Blue', 'Blue']},\n        {'label': 'Sex',\n         'values': ['Female', 'Male', 'Female', 'Male', 'Male']}],\n    counts=[6, 10, 40, 23, 7]\n))\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Tick Label Step in Plotly\nDESCRIPTION: Shows how to set intervals between tick labels using ticklabelstep property. Hides labels between every 2 ticks on the y-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(ticklabelstep=2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Exponentformat Attribute - Plotly Python\nDESCRIPTION: This snippet demonstrates setting the exponent format for y-axis ticks, allowing scientific notation display settings in the y-axis of a Plotly figure. It updates the layout of the figure for exponent settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    y = [68000, 52000, 60000, 20000, 95000, 40000, 60000, 79000, 74000, 42000, 20000, 90000]\n))\n\nfig.update_layout(\n    yaxis = dict(\n        showexponent = 'all',\n        exponentformat = 'e'\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Tick Marks in Plotly Python\nDESCRIPTION: Shows how to specify the approximate number of ticks displayed on an axis using the nticks property. The example creates a scatter plot with iris dataset and sets 20 ticks on the y-axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(nticks=20)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Viewing Sample DataFrame Records\nDESCRIPTION: Retrieves the first three records from the DataFrame to see the data format.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbtd.take(3)\n```\n\n----------------------------------------\n\nTITLE: Sorting Categories by Total Value\nDESCRIPTION: Demonstrates sorting categories by their total values using categoryorder parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack')\nfig.update_xaxes(categoryorder='total ascending')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dixon's Q-Test for Outlier Detection\nDESCRIPTION: Define a function to perform Dixon's Q-Test for the smallest point in a dataset, comparing the Q-statistic to a reference value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/outlier-test.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef q_test_for_smallest_point(dataset):\n    q_ref = 0.29  # the reference Q value for a significance level of 95% and 30 data points\n    q_stat = (dataset[1] - dataset[0])/(dataset[-1] - dataset[0])\n\n    if q_stat > q_ref:\n        print(\"Since our Q-statistic is %f and %f > %f, we have evidence that our \"\n              \"minimum point IS an outlier to the data.\") %(q_stat, q_stat, q_ref)\n    else:\n        print(\"Since our Q-statistic is %f and %f < %f, we have evidence that our \"\n              \"minimum point is NOT an outlier to the data.\") %(q_stat, q_stat, q_ref)\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Subplots with Shared X-Axis in Plotly (Python)\nDESCRIPTION: This snippet demonstrates how to create stacked subplots with a shared x-axis using Plotly's low-level API. It creates three scatter plots with different y-axis domains and combines them into a single figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2],\n    y=[10, 11, 12]\n)\ntrace2 = go.Scatter(\n    x=[2, 3, 4],\n    y=[100, 110, 120],\n    yaxis=\"y2\"\n)\ntrace3 = go.Scatter(\n    x=[3, 4, 5],\n    y=[1000, 1100, 1200],\n    yaxis=\"y3\"\n)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    yaxis=dict(\n        domain=[0, 0.33]\n    ),\n    legend=dict(\n        traceorder=\"reversed\"\n    ),\n    yaxis2=dict(\n        domain=[0.33, 0.66]\n    ),\n    yaxis3=dict(\n        domain=[0.66, 1]\n    )\n)\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Logo to Plotly Dashboard in Python\nDESCRIPTION: Demonstrates how to add a logo to the top-left corner of a Plotly dashboard using Python.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard['settings']['logoUrl'] = 'https://images.plot.ly/language-icons/api-home/python-logo.png'\n```\n\n----------------------------------------\n\nTITLE: Visualizing 1D Random Walk using Plotly in Python\nDESCRIPTION: This code generates a 1D random walk and visualizes it using a scatter plot with a color scale to denote the time sequence. It uses numpy for random number generation and Plotly for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/random-walk.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nnp.random.seed(1)\n\nl = 100\nsteps = np.random.choice([-1, 1], size=l) + 0.05 * np.random.randn(l) # l steps\nposition = np.cumsum(steps) # integrate the position by summing steps values\ny = 0.05 * np.random.randn(l)\n\nfig = go.Figure(data=go.Scatter(\n    x=position,\n    y=y,\n    mode='markers',\n    name='Random Walk in 1D',\n    marker=dict(\n        color=np.arange(l),\n        size=7,\n        colorscale='Reds',\n        showscale=True,\n    )\n))\n\nfig.update_layout(yaxis_range=[-1, 1])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Querying Full Figure Layout Defaults - Python\nDESCRIPTION: This snippet demonstrates how to check the computed static and dynamic defaults from a full figure, specifically the font size and axis range.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(\"full_fig.layout.font.size: \", full_fig.layout.font.size)\nprint(\"full_fig.layout.xaxis.range: \", full_fig.layout.xaxis.range)\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing Network Data with igraph in Python\nDESCRIPTION: Loads a coauthorship network from a GML file using the igraph library and prepares it for visualization with the Kamada-Kawai layout. The code extracts nodes, edges, and labels from the graph.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/igraph-networkx-comparison.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport igraph as ig\n\nG=ig.Graph.Read_GML('netscience.gml.txt')\nlabels=list(G.vs['label'])\nN=len(labels)\nE=[e.tuple for e in G.es]# list of edges\nlayt=G.layout('kk') #kamada-kawai layout\ntype(layt)\n```\n\n----------------------------------------\n\nTITLE: Mapping Specific Patterns to Variables with pattern_shape_map\nDESCRIPTION: This snippet demonstrates how to explicitly assign specific patterns to each value of a variable using pattern_shape_map, regardless of the order in which the values appear in the data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.bar(df, x=\"medal\", y=\"count\", color=\"nation\",\n             pattern_shape=\"nation\", pattern_shape_map={\n             \"China\": \".\", \"Canada\": \"/\", \"South Korea\": \"+\"\n             })\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Customized Text and Annotations to OHLC Chart in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to add custom text, title, and annotations to an OHLC chart. It includes adding a vertical line and text annotation to highlight a specific date.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ohlc-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close']))\n\nfig.update_layout(\n    title=dict(text='The Great Recession'),\n    yaxis=dict(title=dict(text='AAPL Stock')),\n    shapes = [dict(\n        x0='2016-12-09', x1='2016-12-09', y0=0, y1=1, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x='2016-12-09', y=0.05, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='Increase Period Begins')]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Publishing the Notebook with Custom Styling\nDESCRIPTION: Sets up custom styling for the notebook and publishes it to Plotly's documentation using the publisher utility. This code handles the documentation formatting and metadata.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'change-callbacks-datashader.ipynb', 'python/change-callbacks-datashader/', 'FigureWidget | plotly',\n    'Display Large Datasets with DataShader and Change Callbacks',\n    title = 'DataShader Case Study',\n    name = 'DataShader Case Study',\n    uses_plotly_offline=True,\n    has_thumbnail='true', thumbnail='thumbnail/ipython_widgets.jpg',\n    language='python', page_type='example_index',\n    display_as='chart_events', order=24,\n    ipynb= '~notebook_demo/239')\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Facetting using Plotly Express\nDESCRIPTION: This snippet creates a scatter plot with faceting using `plotly.express`. It loads the `tips` dataset and utilizes `px.scatter` with 'total_bill' as x, 'tip' as y, 'smoker' as color, 'sex' as `facet_col`, and 'time' as `facet_row`, creating a grid of scatter plots split by sex and time, with data points colored by smoking status.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\\\"total_bill\\\", y=\\\"tip\\\", color=\\\"smoker\\\", facet_col=\\\"sex\\\", facet_row=\\\"time\\\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Gaussian Window for Rolling Means with function_args\nDESCRIPTION: Shows how to use the 'function_args' parameter to pass additional arguments to Pandas functions. Creates a rolling mean with a Gaussian window by providing the required 'std' parameter via function_args.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"rolling\", \n                 trendline_options=dict(window=5, win_type=\"gaussian\", function_args=dict(std=2)),\n                title=\"Rolling Mean with Gaussian Window\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Marker Symbols in Plotly Python\nDESCRIPTION: This snippet demonstrates how to initialize custom marker symbols in a Plotly figure using the SymbolValidator class. It creates lists to store raw symbols and their corresponding names and variants, before populating the figure with markers. The figure utilizes a scatter plot where hovering reveals details about the marker.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.validators.scatter.marker import SymbolValidator\n\nraw_symbols = SymbolValidator().values\nnamestems = []\nnamevariants = []\nsymbols = []\nfor i in range(0,len(raw_symbols),3):\n    name = raw_symbols[i+2]\n    symbols.append(raw_symbols[i])\n    namestems.append(name.replace(\"-open\", \"\").replace(\"-dot\", \"\"))\n    namevariants.append(name[len(namestems[-1]):])\n\nfig = go.Figure(go.Scatter(mode=\"markers\", x=namevariants, y=namestems, marker_symbol=symbols,\n                           marker_line_color=\"midnightblue\", marker_color=\"lightskyblue\",\n                           marker_line_width=2, marker_size=15,\n                           hovertemplate=\"name: %{y}%{x}<br>number: %{marker.symbol}<extra></extra>\"))\nfig.update_layout(title=dict(text=\"Mouse over symbols for name & number!\"),\n                  xaxis_range=[-1,4], yaxis_range=[len(set(namestems)),-1],\n                  margin=dict(b=0,r=0), xaxis_side=\"top\", height=1400, width=400)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Hover Text with Plotly Express\nDESCRIPTION: This snippet demonstrates how to customize hover text using the `hover_name` and `hover_data` arguments in Plotly Express. It creates a scatter plot and specifies which columns to display in the hover tooltip.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf_2007 = px.data.gapminder().query(\"year==2007\")\n\nfig = px.scatter(df_2007, x=\"gdpPercap\", y=\"lifeExp\", log_x=True,\n                 hover_name=\"country\", hover_data=[\"continent\", \"pop\"])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Multiple Selections in Cartesian Subplots\nDESCRIPTION: Demonstrates how to add multiple selections across different subplots using axis references. Creates a complex visualization with histograms and scatter plots with multiple selections.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nnp.random.seed(0)\nt = np.linspace(-1, 1.2, 2000)\nx = (t**3) + (0.3 * np.random.randn(2000))\ny = (t**6) + (0.3 * np.random.randn(2000))\n\nfig = go.Figure()\nfig.add_trace(go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Blues',\n        reversescale = True,\n        xaxis = 'x',\n        yaxis = 'y'\n    ))\nfig.add_trace(go.Scatter(\n        x = x,\n        y = y,\n        xaxis = 'x',\n        yaxis = 'y',\n        mode = 'markers',\n        marker = dict(\n            color = 'rgba(0,0,0,0.3)',\n            size = 3\n        )\n    ))\nfig.add_trace(go.Histogram(\n        y = y,\n        xaxis = 'x2',\n        marker = dict(\n            color = 'rgba(0,0,0,1)'\n        )\n    ))\nfig.add_trace(go.Histogram(\n        x = x,\n        yaxis = 'y2',\n        marker = dict(\n            color = 'rgba(0,0,0,1)'\n        )\n    ))\n\nfig.update_layout(\n    autosize = False,\n    xaxis = dict(\n        zeroline = False,\n        domain = [0,0.85],\n        showgrid = False\n    ),\n    yaxis = dict(\n        zeroline = False,\n        domain = [0,0.85],\n        showgrid = False\n    ),\n    xaxis2 = dict(\n        zeroline = False,\n        domain = [0.85,1],\n        showgrid = False\n    ),\n    yaxis2 = dict(\n        zeroline = False,\n        domain = [0.85,1],\n        showgrid = False\n    ),\n    height = 600,\n    width = 600,\n    bargap = 0,\n    hovermode = 'closest',\n    showlegend = False,\n    selections = [\n        dict(\n            x0 = 0.5,\n            x1 = -0.5,\n            xref = \"x\",\n            y0 = 190,\n            y1= 0,\n            yref = \"y2\",\n            line = dict(\n                color=\"yellow\"\n            )\n        ),\n        dict(\n            x0 = -0.2,\n            x1 = -1.5,\n            xref = \"x\",\n            y0 = 2,\n            y1= -1,\n            yref = \"y\",\n            line = dict(\n                color=\"yellow\"\n            )\n        ),\n        dict(\n            path= \"M0.75,2.39L0.98,3.38L1.46,3.68L1.80,3.35L2.01,2.51L1.67,1.15L1.18,0.50L0.65,0.66L0.54,0.83L0.49,1.56Z\",\n            xref= 'x',\n            yref = 'y',\n            line = dict(\n                color='yellow'\n            )\n        )\n    ]\n)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Layout and Displaying Plot\nDESCRIPTION: This snippet configures the layout of the Plotly plot, including axis settings, title, annotations, and margins. It then displays the plot using fig.show(). The layout is customized to hide axis lines and grid, add the generated annotations, and adjust the plot's background color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tree-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"axis = dict(showline=False, # hide axis line, grid, ticklabels and  title\n            zeroline=False,\n            showgrid=False,\n            showticklabels=False,\n            )\n\nfig.update_layout(title= 'Tree with Reingold-Tilford Layout',\n              annotations=make_annotations(position, v_label),\n              font_size=12,\n              showlegend=False,\n              xaxis=axis,\n              yaxis=axis,\n              margin=dict(l=40, r=40, b=85, t=100),\n              hovermode='closest',\n              plot_bgcolor='rgb(248,248,248)'\n              )\nfig.show()\"\n```\n\n----------------------------------------\n\nTITLE: Changing Opacity of Plotly Isosurfaces in Python\nDESCRIPTION: This example shows how to alter the opacity of isosurfaces, allowing for better visualization of overlapping surfaces. The opacity parameter is adjusted for a more transparent view. Requirements include numpy and plotly libraries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nX, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]\n\n# ellipsoid\nvalues = X * X * 0.5 + Y * Y + Z * Z * 2\n\nfig = go.Figure(data=go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    opacity=0.6,\n    isomin=10,\n    isomax=50,\n    surface_count=3,\n    caps=dict(x_show=False, y_show=False)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Manual Labelling with Graph Objects\nDESCRIPTION: Shows how to explicitly label traces, axes, and legends when using Plotly Graph Objects, with detailed font and styling configuration\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-labels.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    name=\"Name of Trace 1\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[1, 0, 3, 2, 5, 4, 7, 6, 8],\n    name=\"Name of Trace 2\"\n))\n\nfig.update_layout(\n    title=dict(text=\"Plot Title\"),\n    xaxis=dict(title=dict(text=\"X Axis Title\")),\n    yaxis=dict(title=dict(text=\"Y Axis Title\")),\n    legend=dict(title=dict(text=\"Legend Title\")),\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logarithmic Axes with Plotly Graph Objects\nDESCRIPTION: This snippet shows how to set up a scatter plot with log axes using Plotly Graph Objects. It imports 'plotly.graph_objects' and 'numpy'. The range for each axis is configured using base-10 logarithm values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nx = np.linspace(1, 200, 30)\nfig = go.Figure(go.Scatter(x=x, y=x**3))\nfig.update_xaxes(type=\"log\", range=[np.log10(0.8), np.log10(250)])\nfig.update_yaxes(type=\"log\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Filled Scattermap Trace with Python and Plotly\nDESCRIPTION: Creates a simple filled map area using Scattermap trace with specified longitude and latitude coordinates and orange marker color\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-tile-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    fill = \"toself\",\n    lon = [-74, -70, -70, -74], lat = [47, 47, 45, 45],\n    marker = { 'size': 10, 'color': \"orange\" }))\n\nfig.update_layout(\n    map = {\n        'style': \"open-street-map\",\n        'center': {'lon': -73, 'lat': 46 },\n        'zoom': 5},\n    showlegend = False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Printing Continuous Color Scale in Python\nDESCRIPTION: This snippet shows how to print the list of CSS colors for the built-in Plasma continuous color scale from Plotly Express. It can be useful for understanding the colors available in the scale for use in visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nprint(px.colors.sequential.Plasma)\n```\n\n----------------------------------------\n\nTITLE: Rendering Plotly graph inside Dash\nDESCRIPTION: This code snippet demonstrates how to embed a Plotly graph within a Dash application using an IFrame. It imports the IFrame class from the IPython.display module and uses it to display a remote snippet containing the Plotly graph. The width and height parameters control the size of the embedded frame.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'renderers', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Setting Pie Chart Colors with Sequential Color Scale in Python\nDESCRIPTION: Shows how to customize pie chart colors using a sequential color palette from Plotly Express. This example applies the RdBu (Red-Blue) color sequence to pie sectors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Color Encoding in Python\nDESCRIPTION: Demonstrates how to create a line plot with multiple lines colored by country using Plotly Express. The example filters the gapminder dataset for Oceania countries and plots life expectancy over time with different colors representing different countries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color='country')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Scatterplot Matrix with Plotly Express\nDESCRIPTION: Creates a basic scatterplot matrix using Plotly Express with the iris dataset. Shows relationships between all numeric columns in the dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_matrix(df)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Font Size in Treemap using uniformtext in Python\nDESCRIPTION: This example shows how to control the text font size in a treemap using the uniformtext layout parameter. It sets a minimum font size and specifies how to handle labels that cannot fit with the desired font size.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv')\n\nfig = go.Figure(go.Treemap(\n    ids = df.ids,\n    labels = df.labels,\n    parents = df.parents,\n    pathbar_textfont_size=15,\n    root_color=\"lightgrey\"\n))\nfig.update_layout(\n    uniformtext=dict(minsize=10, mode='hide'),\n    margin = dict(t=50, l=25, r=25, b=25)\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Time Series Selection Implementation\nDESCRIPTION: Shows how to add selections to time series data. Creates a rectangular selection defined by date ranges and numerical value boundaries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks()\nfig = px.line(df, x='date', y=\"GOOG\", markers=True)\nfig.add_selection(x0=\"2019-01-01\", y0=0.95, x1=\"2019-10-01\", y1=1.15)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Categorical Histogram with Plotly Express\nDESCRIPTION: This snippet creates a histogram using a column with categorical data. It uses the 'day' column from the `px.data.tips()` dataset to generate a histogram that displays the distribution of values within the 'day' category. The `px.histogram` function automatically handles categorical data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n# Here we use a column with categorical data\nfig = px.histogram(df, x=\"day\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Bar Marker Properties Using Plotly Property Assignment\nDESCRIPTION: Shows how to modify bar chart marker properties using property assignment syntax. Updates the bar outline width and color using the marker.line properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Bar(x=[1, 2, 3], y=[1, 3, 2]))\n\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting X and Y Coordinates for Plotly Contour Plot in Python\nDESCRIPTION: This snippet demonstrates how to set the x and y coordinates for a contour plot in Plotly. It initializes a `go.Contour` object, passing the `z` data along with the `x` and `y` coordinate arrays.  The `x` and `y` parameters define the horizontal and vertical axes respectively.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data =\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        x=[-9, -6, -5 , -3, -1], # horizontal axis\n        y=[0, 1, 4, 5, 7] # vertical axis\n    ))\nfig.show()\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting Plotly Figures in Google Colab\nDESCRIPTION: Python code to create a simple Plotly figure and export it to SVG and PNG formats in Google Colab. This demonstrates how to use the write_image method after Orca is installed.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure( go.Scatter(x=[1,2,3], y=[1,3,2] ) )\nfig.write_image(\"fig1.svg\")\nfig.write_image(\"fig1.png\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Carpet Scatter Trace to a Carpet Plot with Plotly\nDESCRIPTION: This example demonstrates how to add a Scattercarpet trace to an existing carpet plot. It creates a carpet plot first, then adds a scatter trace that follows a line along the carpet surface with b=2.5 and varying a values. The scatter trace uses a spline shape with smoothing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-scatter.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n      tickprefix = 'a = ',\n      ticksuffix = 'm',\n      smoothing = 1,\n      minorgridcount = 9\n      ),\n    baxis = dict(\n      tickprefix = 'b = ',\n      ticksuffix = 'Pa',\n      smoothing = 1,\n      minorgridcount = 9\n      )\n))\n\nfig.add_trace(go.Scattercarpet(\n    a = [4, 4.5, 5, 6],\n    b = [2.5, 2.5, 2.5, 2.5],\n    line = dict(\n      shape = 'spline',\n      smoothing = 1,\n      color = 'blue'\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tick Placement in Plotly\nDESCRIPTION: Demonstrates how to control tick placement using tick0 and dtick properties. Sets ticks at intervals of 0.5 starting at 0.25.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_yaxes(tick0=0.25, dtick=0.5)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Cheater Plot Layout in Carpet Plot with Plotly\nDESCRIPTION: This example demonstrates how to create a cheater plot layout using the 'cheaterslope' and 'cheatertype' parameters. It shows how the layout can be different while representing the same data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-plot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    a = [4, 4.5, 5, 6],\n    b = [1, 2, 3],\n    y = [[2, 3, 5.5, 8],\n         [3.5, 4.5, 6.5, 8.5],\n         [4, 5, 7.5, 10]],\n    cheaterslope = -5,\n    aaxis = dict(cheatertype = 'index'),\n    baxis = dict(cheatertype = 'value')\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Diverging Horizontal Bar Chart\nDESCRIPTION: Create a diverging bar chart showing survey responses with color-coded positive and negative sentiments\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-bar-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/gss_2002_5_pt_likert.csv')\n\ndf.rename(columns={'Unnamed: 0':\"Category\"}, inplace=True)\n\nfor v in [\"Disagree\",\"Strongly Disagree\"]:\n    df[v]=df[v]*-1\n\nfig = go.Figure()\n\ncolor_by_category={\n    \"Strongly Agree\":'darkblue',\n    \"Agree\":'lightblue',\n    \"Disagree\":'orange',\n    \"Strongly Disagree\":'red',\n}\n\nlegend_rank_by_category={\n    \"Strongly Disagree\":1,\n    \"Disagree\":2,\n    \"Agree\":3,\n    \"Strongly Agree\":4,\n}\n\nfor col in [\"Disagree\",\"Strongly Disagree\",\"Agree\",\"Strongly Agree\"]:\n    fig.add_trace(go.Bar(\n        y=df[\"Category\"], \n        x=df[col], \n        name=col, \n        orientation='h',\n        marker=dict(color=color_by_category[col]),\n        legendrank=legend_rank_by_category[col]\n    ))\n\nfig.update_layout(\n   title=\"Reactions to statements from the 2002 General Social Survey:\",\n    yaxis_title = \"\",\n    barmode='relative',\n    plot_bgcolor=\"white\",\n)\n\nfig.update_xaxes(\n        title=\"Percent of Responses\",\n        zeroline=True,\n        zerolinecolor=\"black\",\n        tickmode = 'array',     \n        tickvals = [-50, 0, 50, 100],\n        ticktext = [50, 0, 50, 100]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Display and Publishing\nDESCRIPTION: This snippet sets up custom CSS for the Jupyter notebook, installs the Plotly publisher package, and publishes the notebook content to the Plotly documentation site.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/fft-filters.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-FFT-Filters.ipynb', 'python/fft-filters/', 'FFT Filters | plotly',\n    'Learn how filter out the frequencies of a signal by using low-pass, high-pass and band-pass FFT filtering.',\n    title='FFT Filters in Python | plotly',\n    name='FFT Filters',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='signal-analysis', order=2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Mapbox Plot with OpenStreetMap Tiles in Python\nDESCRIPTION: This snippet demonstrates how to create a scatter mapbox plot using OpenStreetMap tiles without requiring a Mapbox Access Token. It uses Plotly Express to visualize US cities data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-map-layers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nus_cities = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\")\n\nimport plotly.express as px\n\nfig = px.scatter_mapbox(us_cities, lat=\"lat\", lon=\"lon\", hover_name=\"City\", hover_data=[\"State\", \"Population\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=3, height=300)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting the 3D Network Graph in Python\nDESCRIPTION: This snippet combines the traces and layout into a Plotly figure and visualizes it within a Jupyter notebook using the iplot method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndata=[trace1, trace2]\nfig=go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='Les-Miserables')\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Domain in Plotly Visualizations\nDESCRIPTION: This code sets specific domain ranges for the x and y axes in a Plotly graph. It utilizes 'plotly.graph_objects' and demonstrates how to alter the portion of the plot frame dedicated to the axes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],\n    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]\n))\nfig.update_xaxes(domain=(0.25, 0.75))\nfig.update_yaxes(domain=(0.25, 0.75))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Edges and Creating Graph Object in Python\nDESCRIPTION: This code defines the edges of the graph using the data and creates an 'igraph.Graph' object. The edges are extracted from the 'links' provided in the JSON data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nL=len(data['links'])\nEdges=[(data['links'][k]['source'], data['links'][k]['target']) for k in range(L)]\n\nG=ig.Graph(Edges, directed=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Rolling Median Trendlines\nDESCRIPTION: Shows how to create a rolling median trendline by specifying a custom function in trendline_options. Uses 'function=\"median\"' with the rolling trendline type and a window size of 5.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"rolling\", trendline_options=dict(function=\"median\", window=5),\n                title=\"Rolling Median\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Shapes with Single Scatter Trace\nDESCRIPTION: Shows how to create multiple filled shapes in a single scatter trace by using None values to break the path.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(x=[0,1,2,0,None,3,3,5,5,3], y=[0,2,0,0,None,0.5,1.5,1.5,0.5,0.5], fill=\"toself\"))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Politico Logo to Existing Chart in Python\nDESCRIPTION: This snippet retrieves an existing figure and adds the Politico logo to the bottom left corner of the chart. It shows how to position a logo outside the main plot area.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/logos.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nfig = py.get_figure('https://plot.ly/~Dreamshot/8155/')\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/politico.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.1, y=-0.2,\n        sizex=0.4, sizey=0.4,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Foreign_Policy_Politico')\n```\n\n----------------------------------------\n\nTITLE: Sharing Color Axis Across Subplots with Plotly in Python\nDESCRIPTION: This snippet shows how to share a single color axis among multiple subplots using Plotly's Graph Objects in Python. Dependencies include Plotly's Graph Objects and Subplots module. Inputs are data for different heatmaps, and the output is two heatmaps in subplots sharing the same color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(1,2)\n\nfig.add_trace(\n go.Heatmap(x = [1, 2, 3, 4], z = [[1, 2, 3, 4], [4, -3, -1, 1]], coloraxis = \"coloraxis\"), 1,1)\n\nfig.add_trace(\n go.Heatmap(x = [3, 4, 5, 6], z = [[10, 2, 1, 0], [4, 3, 5, 6]], coloraxis = \"coloraxis\"),1,2)\nfig.update_layout(coloraxis = {'colorscale':'viridis'})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Linked Brushing with Parallel Categories\nDESCRIPTION: Implements linked brushing between categorical and continuous dimensions using callbacks. Shows interaction between parallel categories and scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom ipywidgets import widgets\nimport pandas as pd\nimport numpy as np\n\ncars_df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv')\n\n# Build parcats dimensions\ncategorical_dimensions = ['body-style', 'drive-wheels', 'fuel-type'];\n\ndimensions = [dict(values=cars_df[label], label=label) for label in categorical_dimensions]\n\n# Build colorscale\ncolor = np.zeros(len(cars_df), dtype='uint8')\ncolorscale = [[0, 'gray'], [1, 'firebrick']]\n\n# Build figure as FigureWidget\nfig = go.FigureWidget(\n    data=[go.Scatter(x=cars_df.horsepower, y=cars_df['highway-mpg'],\n    marker={'color': 'gray'}, mode='markers', selected={'marker': {'color': 'firebrick'}},\n    unselected={'marker': {'opacity': 0.3}}), go.Parcats(\n        domain={'y': [0, 0.4]}, dimensions=dimensions,\n        line={'colorscale': colorscale, 'cmin': 0,\n              'cmax': 1, 'color': color, 'shape': 'hspline'})]\n    )\n\nfig.update_layout(\n        height=800, xaxis={'title': 'Horsepower'},\n        yaxis={'title': 'MPG', 'domain': [0.6, 1]},\n        dragmode='lasso', hovermode='closest')\n\n# Update color callback\ndef update_color(trace, points, state):\n    # Update scatter selection\n    fig.data[0].selectedpoints = points.point_inds\n\n    # Update parcats colors\n    new_color = np.zeros(len(cars_df), dtype='uint8')\n    new_color[points.point_inds] = 1\n    fig.data[1].line.color = new_color\n\n# Register callback on scatter selection...\nfig.data[0].on_selection(update_color)\n# and parcats click\nfig.data[1].on_click(update_color)\n\nfig\n```\n\n----------------------------------------\n\nTITLE: Setting Up Display and Publishing Notebook in Python\nDESCRIPTION: This code configures the display settings for the notebook by loading custom fonts and CSS, then uses a publisher tool to publish the notebook to the Plotly website with specific metadata and configuration options.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/anova.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Anova.ipynb', 'python/anova/', 'Anova | plotly',\n    'Learn how to perform a one and two way ANOVA test using Python.',\n    title='Anova in Python | plotly',\n    name='Anova',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=8,\n    ipynb= '~notebook_demo/108')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Treemap with Plotly Express - Python\nDESCRIPTION: This code snippet demonstrates how to create a basic Treemap chart using the Plotly Express library. The treemap captures hierarchical relationships through names and parent attributes, with configured layout margins.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.treemap(\n    names = [\"Eve\",\"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"]\n)\nfig.update_traces(root_color=\"lightgrey\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Colorscale for Plotly Contour Plot in Python\nDESCRIPTION: This snippet demonstrates how to set the colorscale for a contour plot in Plotly.  It initializes a `go.Contour` object and sets the `colorscale` parameter to 'Electric'.  The `colorscale` parameter determines the color gradient used to represent the data values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data =\n     go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale='Electric',\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hover Templates with Mixtures of Period Data\nDESCRIPTION: Demonstrates using hover templates with mixed periodic data (quarterly and monthly). Uses xhoverformat to control date display format and the %{xother} directive to display additional information for points not directly hovered over.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=[\"2020-01-01\", \"2020-04-01\", \"2020-07-01\"],\n    y=[1000, 1500, 1700],\n    xperiod=\"M3\",\n    xperiodalignment=\"middle\",\n    xhoverformat=\"Q%q\",\n    hovertemplate=\"%{y}%{_xother}\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[\"2020-01-01\", \"2020-02-01\", \"2020-03-01\",\n      \"2020-04-01\", \"2020-05-01\", \"2020-06-01\",\n      \"2020-07-01\", \"2020-08-01\", \"2020-09-01\"],\n    y=[1100,1050,1200,1300,1400,1700,1500,1400,1600],\n    xperiod=\"M1\",\n    xperiodalignment=\"middle\",\n    hovertemplate=\"%{y}%{_xother}\"\n))\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Trace Opacity in Scatter Plots\nDESCRIPTION: Shows how to control opacity at the trace level for scatter plots. Demonstrates the difference between opacity settings of 0.5 and 1.0 across multiple traces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Generate example data\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=4.5, size=(500,))\nx2 = np.random.uniform(low=3, high=6, size=(500,))\ny2 = np.random.uniform(low=4.5, high=6, size=(500,))\n\n# Build figure\nfig = go.Figure()\n\n# Add first scatter trace with medium sized markers\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=x,\n        y=y,\n        opacity=0.5,\n        marker=dict(\n            color='LightSkyBlue',\n            size=20,\n            line=dict(\n                color='MediumPurple',\n                width=2\n            )\n        ),\n        name='Opacity 0.5'\n    )\n)\n\n# Add second scatter trace with medium sized markers\n# and opacity 1.0\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=x2,\n        y=y2,\n        marker=dict(\n            color='LightSkyBlue',\n            size=20,\n            line=dict(\n                color='MediumPurple',\n                width=2\n            )\n        ),\n        name='Opacity 1.0'\n    )\n)\n\n# Add trace with large markers\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=[2, 2],\n        y=[4.25, 4.75],\n        opacity=0.5,\n        marker=dict(\n            color='LightSkyBlue',\n            size=80,\n            line=dict(\n                color='MediumPurple',\n                width=8\n            )\n        ),\n        showlegend=False\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table with Plotly in Python\nDESCRIPTION: This code snippet demonstrates how to create a basic table using Plotly's `go.Table` object. It defines the header values and cell values for the table and then displays the table using `fig.show()`. This requires the `plotly.graph_objects` module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(header=dict(values=['A Scores', 'B Scores']),\n                 cells=dict(values=[[100, 90, 80, 90], [95, 85, 75, 95]]))\n                     ])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Modifying Row Height of Plotly Table, Python\nDESCRIPTION: This code demonstrates how to modify the row height of a Plotly table using the `height_constant` parameter in `ff.create_table`.  It sets the height constant to 20, reducing the height of each row in the table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Country', 'Year', 'Population'],\n               ['United States', 2000, 282200000],\n               ['Canada', 2000, 27790000],\n               ['United States', 2005, 295500000],\n               ['Canada', 2005, 32310000],\n               ['United States', 2010, 309000000],\n               ['Canada', 2010, 34000000]]\n\nfig =  ff.create_table(data_matrix, height_constant=20)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Line Chart of Sales by Category with Plotly\nDESCRIPTION: Python code that generates a single line chart with multiple lines representing sales trends for each event category using Plotly. This allows for direct comparison of seasonal patterns across categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndata = []\nfor name, g in df.groupby(\"category_name\"):\n    data.append(go.Scatter(\n            name=name,\n            x=g.caldate,\n            y=g.quantity_sold\n        ))\n\nfig = go.Figure()\nfig['layout'].update(title=\"Event Sales Per Day By Category\")\nfig['data'] += data\npy.iplot(fig, filename='redshift/Event Sales Per Day by Category')\n```\n\n----------------------------------------\n\nTITLE: Sankey Diagram with Custom Node Positioning\nDESCRIPTION: Demonstrates how to manually position nodes in a Sankey diagram using x and y coordinates with snap arrangement to prevent overlapping.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Sankey(\n    arrangement = \"snap\",\n    node = {\n        \"label\": [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\n        \"x\": [0.2, 0.1, 0.5, 0.7, 0.3, 0.5],\n        \"y\": [0.7, 0.5, 0.2, 0.4, 0.2, 0.3],\n        'pad':10},\n    link = {\n        \"source\": [0, 0, 1, 2, 5, 4, 3, 5],\n        \"target\": [5, 3, 4, 3, 0, 2, 2, 3],\n        \"value\": [1, 2, 1, 1, 1, 1, 1, 2]}))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Trace Properties in Template Data\nDESCRIPTION: This snippet demonstrates how to create a Template object that sets default properties for scatter traces. It shows how to customize default marker symbols and add scatter plots with those settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ndiamond_template = go.layout.Template()\ndiamond_template.data.scatter = [go.Scatter(marker=dict(symbol=\"diamond\", size=20))]\n\nfig = go.Figure()\nfig.update_layout(template=diamond_template)\nfig.add_scatter(y=[2, 1, 3], mode=\"markers\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Trendline Color with Overall Scope\nDESCRIPTION: Demonstrates how to create a single overall trendline across faceted plots while overriding the trendline color. Uses 'trendline_scope=\"overall\"' to fit one model to all data and 'trendline_color_override' to set a specific color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", facet_col=\"smoker\", color=\"sex\", \n                 trendline=\"ols\", trendline_scope=\"overall\", trendline_color_override=\"black\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Marker Borders with Plotly Express\nDESCRIPTION: Demonstrates how to add borders to markers in a faceted scatter plot using Plotly Express. Sets marker size and border properties using update_traces method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\n\nfig.update_traces(marker=dict(size=12,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Log Plot with Graph Objects\nDESCRIPTION: Demonstrates creating a logarithmic plot using the lower-level Graph Objects API, offering more fine-grained control over the plot configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/log-plot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(mode=\"markers\", x=df[\"gdpPercap\"], y=df[\"lifeExp\"] ))\n\nfig.update_xaxes(type=\"log\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying the Plotly Figure\nDESCRIPTION: This snippet executes the command to display the fully configured Plotly figure that has been populated with curves corresponding to precision and recall calculations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Data Order in Line Charts with Python\nDESCRIPTION: Shows how data ordering affects line charts in Plotly. The example creates two line charts: one with unsorted input data where the line appears to move backward, and another with sorted data where the line progresses forward, illustrating the importance of data ordering in connected scatterplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame(dict(\n    x = [1, 3, 2, 4],\n    y = [1, 2, 3, 4]\n))\nfig = px.line(df, x=\"x\", y=\"y\", title=\"Unsorted Input\")\nfig.show()\n\ndf = df.sort_values(by=\"x\")\nfig = px.line(df, x=\"x\", y=\"y\", title=\"Sorted Input\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Sliders in Plotly Express\nDESCRIPTION: This snippet demonstrates how to create a scatter plot in Plotly Express with an implicit slider for animation. The slider is configured using the 'animate' method, showcasing changes in data over time.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sliders.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder()\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\",\n           log_x=True, size_max=55, range_x=[100,100000], range_y=[25,90])\n\nfig[\"layout\"].pop(\"updatemenus\") # optional, drop animation buttons\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Enhancing Figure Development Functions in Python Plotly\nDESCRIPTION: This snippet details the introduction of `plotly.io.full_figure_for_development()` and `plotly.graph_objects.Figure.full_figure_for_development()`, which aids in the development process of figures.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n- Added `plotly.io.full_figure_for_development()` and `plotly.graph_objects.Figure.full_figure_for_development()`.\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Size and Color in Area Funnel Plots in Python\nDESCRIPTION: This snippet customizes the marker size and colors in area funnel plots using the go.Funnelarea class. Different attributes for the marker's properties are modified for visualization purposes. It requires the graph_objects module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\nfig = go.Figure(go.Funnelarea(\n      values = [5, 4, 3, 2, 1], text = [\"The 1st\",\"The 2nd\", \"The 3rd\", \"The 4th\", \"The 5th\"],\n      marker = {\"colors\": [\"deepskyblue\", \"lightsalmon\", \"tan\", \"teal\", \"silver\"],\n                \"line\": {\"color\": [\"wheat\", \"wheat\", \"blue\", \"wheat\", \"wheat\"], \"width\": [0, 1, 5, 0, 4]}},\n      textfont = {\"family\": \"Old Standard TT, serif\", \"size\": 13, \"color\": \"black\"}, opacity = 0.65))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Icicle Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Icicle chart using Plotly and pandas. It loads data from a CSV file and creates an Icicle chart with custom layout settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv')\n\nfig = go.Figure()\n\nfig.add_trace(go.Icicle(\n    ids=df.ids,\n    labels=df.labels,\n    parents=df.parents,\n    root_color=\"lightgrey\"\n))\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Comparison of Quartile Algorithms\nDESCRIPTION: Compares different quartile calculation methods (linear, inclusive, exclusive) using the same dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndata = [1,2,3,4,5,6,7,8,9]\ndf = pd.DataFrame(dict(\n    linear=data,\n    inclusive=data,\n    exclusive=data\n)).melt(var_name=\"quartilemethod\")\n\nfig = px.box(df, y=\"value\", facet_col=\"quartilemethod\", color=\"quartilemethod\",\n             boxmode=\"overlay\", points='all')\n\nfig.update_traces(quartilemethod=\"linear\", jitter=0, col=1)\nfig.update_traces(quartilemethod=\"inclusive\", jitter=0, col=2)\nfig.update_traces(quartilemethod=\"exclusive\", jitter=0, col=3)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Treemap with Explicit Mapping for Discrete Colors - Python\nDESCRIPTION: Here, the snippet shows how to use an explicit color mapping for the discrete color argument in a Treemap, enhancing the representation of categorical data through tailored color codes for different categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.treemap(df, path=[px.Constant(\"all\"), 'sex', 'day', 'time'],\n                 values='total_bill', color='time',\n                  color_discrete_map={'(?)':'lightgrey', 'Lunch':'gold', 'Dinner':'darkblue'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Candlestick Chart without Rangeslider\nDESCRIPTION: Creates a candlestick chart without the default range slider at the bottom. Demonstrates how to modify the layout options of the chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/candlestick-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['AAPL.Open'], high=df['AAPL.High'],\n                low=df['AAPL.Low'], close=df['AAPL.Close'])\n                     ])\n\nfig.update_layout(xaxis_rangeslider_visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Peak Detection\nDESCRIPTION: Imports the necessary Python libraries Pandas for data manipulation and SciPy for peak finding functionality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/peak-finding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom scipy.signal import find_peaks\n```\n\n----------------------------------------\n\nTITLE: Tilting Camera Vertical Orientation\nDESCRIPTION: Shows how to modify camera vertical orientation by changing the up vector and enabling orbit drag mode\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-camera-controls.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport math\nimport plotly.graph_objects as go\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\nfig = go.Figure(data=go.Surface(z=z_data, showscale=False))\nfig.update_layout(\n    title=dict(text='Mt Bruno Elevation'),\n    width=400, height=400,\n    margin=dict(t=30, r=0, l=20, b=10)\n)\n\nangle = math.pi / 4 # 45 degrees\n\nname = 'vertical is along y+z'\ncamera = dict(\n    up=dict(x=0, y=math.cos(angle), z=math.sin(angle)),\n    eye=dict(x=2, y=0, z=0)\n)\n\nfig.update_layout(scene_camera=camera, scene_dragmode='orbit', title=name)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Continuous Color Scatter Plot with Numeric Values\nDESCRIPTION: Demonstrates how numeric values automatically create a continuous color scale in a scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"size\",\n                 title=\"Numeric 'size' values mean continuous color\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Subplot Figure Titles - Python\nDESCRIPTION: This snippet shows how to customize subplot titles in a facet plot by removing specific characters. A lambda function is used to update the subplot titles in the figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.scatter(px.data.tips(), x=\"total_bill\", y=\"tip\", facet_col=\"smoker\")\nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[-1]))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Treemap Sector Colors with marker.colors in Python\nDESCRIPTION: This example demonstrates how to set custom colors for treemap sectors using the marker_colors attribute in Plotly Python. It creates a basic treemap with predefined values, labels, and parents, and assigns specific colors to each sector.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nvalues = [0, 11, 12, 13, 14, 15, 20, 30]\nlabels = [\"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"B1\", \"B2\"]\nparents = [\"\", \"container\", \"A1\", \"A2\", \"A3\", \"A4\", \"container\", \"B1\"]\n\nfig = go.Figure(go.Treemap(\n    labels = labels,\n    values = values,\n    parents = parents,\n    marker_colors = [\"pink\", \"royalblue\", \"lightgray\", \"purple\",\n                     \"cyan\", \"lightgray\", \"lightblue\", \"lightgreen\"]\n))\n\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image in the Notebook\nDESCRIPTION: Python code that displays an image from an external URL in the notebook using IPython's Image class. The image likely shows a visualization or analysis result.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nImage(url=\"http://i.imgur.com/nUVihzx.png\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Heatmaps with Magma Colorscale in Plotly\nDESCRIPTION: This code visualizes a set of heatmaps using the Magma colorscale that was previously converted from Matplotlib format. It calls the heatmap_plot function with the magma colorscale and 'MAGMA' title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(heatmap_plot(colorscale=magma, title='MAGMA'))\n```\n\n----------------------------------------\n\nTITLE: Adding The Verge Logo to Existing Chart in Python\nDESCRIPTION: This snippet retrieves an existing figure, adds The Verge logo to the top left corner, and changes the legend orientation to horizontal. It demonstrates how to add a logo and modify chart layout properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/logos.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nfig = py.get_figure('https://plot.ly/~Dreamshot/8158/')\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/theverge.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.1, y=1.0,\n        sizex=0.2, sizey=0.3,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\nfig.layout.legend.orientation = 'h'\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Apple_Labor_Violations_TheVerge')\n```\n\n----------------------------------------\n\nTITLE: Box Plot with Categorical X-Axis\nDESCRIPTION: Creates a box plot with categorical x-axis values showing distribution of total bills by time of day.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/box-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.box(df, x=\"time\", y=\"total_bill\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Nodes from Graph Data in Python\nDESCRIPTION: This snippet retrieves the number of nodes present in the graph data read from the JSON file. It accesses the 'nodes' key in the data dictionary.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nN=len(data['nodes'])\nN\n```\n\n----------------------------------------\n\nTITLE: ECDF Plot with Histogram Marginal\nDESCRIPTION: Demonstrates how to add a histogram marginal plot to an ECDF visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", color=\"sex\", markers=True, lines=False, marginal=\"histogram\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Opacity and Size Controls with ipywidgets in Python\nDESCRIPTION: This code creates interactive slider widgets to control the opacity and size of scatter plot markers using ipywidgets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interactive\n\ndef set_opacity(opacity, size):\n    scatter.marker.opacity = opacity\n    scatter.marker.size = size\n\nopacity_slider = interactive(set_opacity,\n                             opacity=(0.0, 1.0, 0.01),\n                             size=(1, 10, 0.25))\nopacity_slider\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Express in Python\nDESCRIPTION: Basic import statement for the plotly.express module, which provides access to Plotly's high-level visualization API.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/plotly.express.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import plotly.express as px\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Bar Title, Labels, and Ticks with Plotly in Python\nDESCRIPTION: This code snippet shows how to customize the color bar title, labels, and tick marks for a heatmap using Plotly's Graph Objects in Python. It requires Plotly and external data loading via urllib and json. The input is a JSON dataset used for heatmap values, and the output is a customized heatmap with designated title and tick specifications.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport urllib\nimport json\n\n# Load heatmap data\nresponse = urllib.request.urlopen(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/custom_heatmap_colorscale.json\")\ndataset = json.load(response)\n\n# Create and show figure\nfig = go.Figure()\n\nfig.add_trace(go.Heatmap(\n    z=dataset[\"z\"],\n    colorbar=dict(\n        title=dict(\n            text=\"Surface Heat\",\n            side=\"top\",\n        ),\n        tickmode=\"array\",\n        tickvals=[2, 50, 100],\n        ticktext=[\"Cool\", \"Mild\", \"Hot\"],\n        ticks=\"outside\"\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Asymmetric Percentage Error Bars\nDESCRIPTION: Shows how to create asymmetric error bars using different percentage values for upper and lower errors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=dict(\n            type='percent',\n            symmetric=False,\n            value=15,\n            valueminus=25)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Rendering Jinja2 Template with Plotly Figures\nDESCRIPTION: This code snippet reads a Jinja2 template, inserts the generated HTML content (including dropdown entries and figure divs) into the template, and writes the final HTML output to a file. It uses the `jinja2.Template` class to render the template with the provided data, effectively embedding the Plotly figures and JavaScript logic into a complete HTML page.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Insert data into the template and write the file to disk\n# You'll need to add the path to your template and to your preferred output location\ninput_template_path=r\"<path-to-Jinja-template.html>\"\noutput_html_path=r\"<path-to-output-file.html>\"\n\nwith open(output_html_path, \"w\", encoding='utf-8') as output_file:\n    with open(input_template_path) as template_file:\n        j2_template = Template(template_file.read())\n        output_file.write(j2_template.render(data_for_jinja))\n```\n\n----------------------------------------\n\nTITLE: Styling Color Bar Ticks for Plotly Contour Plots in Python\nDESCRIPTION: This snippet demonstrates how to style the ticks of the color bar in a Plotly contour plot.  It configures the `nticks`, `ticks`, `ticklen`, `tickwidth`, `showticklabels`, `tickangle`, and `tickfont_size` properties within the `colorbar` dictionary to customize the ticks' appearance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data =\n         go.Contour(\n           z=[[10, 10.625, 12.5, 15.625, 20],\n              [5.625, 6.25, 8.125, 11.25, 15.625],\n              [2.5, 3.125, 5., 8.125, 12.5],\n              [0.625, 1.25, 3.125, 6.25, 10.625],\n              [0, 0.625, 2.5, 5.625, 10]],\n           colorbar=dict(nticks=10, ticks='outside',\n                         ticklen=5, tickwidth=1,\n                         showticklabels=True,\n                         tickangle=0, tickfont_size=12)\n            ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Response Function for Widget Updates\nDESCRIPTION: Defines a response function that updates the FigureWidget based on user interactions with widgets, filtering data dynamically\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget-app.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef validate():\n    if origin.value in df['origin'].unique() and textbox.value in df['carrier'].unique():\n        return True\n    else:\n        return False\n\n\ndef response(change):\n    if validate():\n        if use_date.value:\n            filter_list = [i and j and k for i, j, k in\n                           zip(df['month'] == month.value, df['carrier'] == textbox.value,\n                               df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n\n        else:\n            filter_list = [i and j for i, j in\n                           zip(df['carrier'] == 'DL', df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n        x1 = temp_df['arr_delay']\n        x2 = temp_df['dep_delay']\n        with g.batch_update():\n            g.data[0].x = x1\n            g.data[1].x = x2\n            g.layout.barmode = 'overlay'\n            g.layout.xaxis.title = 'Delay in Minutes'\n            g.layout.yaxis.title = 'Number of Delays'\n\n\norigin.observe(response, names=\"value\")\ntextbox.observe(response, names=\"value\")\nmonth.observe(response, names=\"value\")\nuse_date.observe(response, names=\"value\")\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Template as the Default in Plotly\nDESCRIPTION: Demonstrates how to set a custom template as the default, eliminating the need to specify it for each figure. This makes all figures automatically use the custom template.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\npio.templates[\"draft\"] = go.layout.Template(\n    layout_annotations=[\n        dict(\n            name=\"draft watermark\",\n            text=\"DRAFT\",\n            textangle=-30,\n            opacity=0.1,\n            font=dict(color=\"black\", size=100),\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=0.5,\n            showarrow=False,\n        )\n    ]\n)\npio.templates.default = \"draft\"\n\nfig = go.Figure()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Histogram with Box Plot Marginal\nDESCRIPTION: Creates a histogram with colored species data and box plot marginal distribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.histogram(df, x=\"sepal_length\", color=\"species\", marginal=\"box\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Polynomial Fit Plot with Plotly\nDESCRIPTION: Creates a scatter plot with polynomial regression line using numpy for calculations and Plotly for visualization. Includes data point plotting, curve fitting, and custom styling options.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/polynomial-fits.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Scientific libraries\nimport numpy as np\n\npoints = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])\n\n# get x and y vectors\nx = points[:,0]\ny = points[:,1]\n\n# calculate polynomial\nz = np.polyfit(x, y, 3)\nf = np.poly1d(z)\nprint f\n\n# calculate new x's and y's\nx_new = np.linspace(x[0], x[-1], 50)\ny_new = f(x_new)\n\n# Creating the dataset, and generating the plot\ntrace1 = go.Scatter(\n                  x=x,\n                  y=y,\n                  mode='markers',\n                  marker=go.Marker(color='rgb(255, 127, 14)'),\n                  name='Data'\n                  )\n\ntrace2 = go.Scatter(\n                  x=x_new,\n                  y=y_new,\n                  mode='lines',\n                  marker=go.Marker(color='rgb(31, 119, 180)'),\n                  name='Fit'\n                  )\n\nannotation = go.Annotation(\n                  x=6,\n                  y=-4.5,\n                  text='$\\textbf{Fit}: 0.43X^3 - 0.56X^2 + 16.78X + 10.61$',\n                  showarrow=False\n                  )\nlayout = go.Layout(\n                title='Polynomial Fit in Python',\n                plot_bgcolor='rgb(229, 229, 229)',\n                  xaxis=go.XAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  yaxis=go.YAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  annotations=[annotation]\n                )\n\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\n\npy.plot(fig, filename='Polynomial-Fit-in-python')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Trend Visualization with Plotly\nDESCRIPTION: Detailed plot configuration using Plotly to create an interactive line chart comparing Python and PHP trends, including custom styling and annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=python_df['years'],\n    y=python_df['trends'],\n    mode='lines',\n    line=dict(color='rgba(115,115,115,1)', width=4),\n    connectgaps=True,\n)\n\ntrace2 = go.Scatter(\n    x=[python_df['years'][0], python_df['years'][8]],\n    y=[python_df['trends'][0], python_df['trends'][8]],\n    mode='markers',\n    marker=dict(color='rgba(115,115,115,1)', size=8)\n)\n\ntrace3 = go.Scatter(\n    x=php_df['years'],\n    y=php_df['trends'],\n    mode='lines',\n    line=dict(color='rgba(189,189,189,1)', width=4),\n    connectgaps=True,\n)\n\ntrace4 = go.Scatter(\n    x=[php_df['years'][0], php_df['years'][8]],\n    y=[php_df['trends'][0], php_df['trends'][8]],\n    mode='markers',\n    marker=dict(color='rgba(189,189,189,1)', size=8)\n)\n\ntraces = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        tickmode='linear',\n        ticks='outside',\n        tickcolor='rgb(204, 204, 204)',\n        tickwidth=2,\n        ticklen=5,\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nannotations.append(\n    dict(xref='paper', x=0.95, y=python_df['trends'][8],\n    xanchor='left', yanchor='middle',\n    text='Python',\n    font=dict(\n        family='Arial',\n        size=14,\n        color='rgba(49,130,189, 1)'\n    ),\n    showarrow=False)\n)\n\nannotations.append(\n    dict(xref='paper', x=0.95, y=php_df['trends'][8],\n    xanchor='left', yanchor='middle',\n    text='PHP',\n    font=dict(\n        family='Arial',\n        size=14,\n        color='rgba(49,130,189, 1)'\n    ),\n    showarrow=False)\n)\n\nannotations.append(\n    dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n    xanchor='center', yanchor='top',\n    text='Source: Hacker News submissions with the title containing Python/PHP',\n    font=dict(\n        family='Arial',\n        size=12,\n        color='rgb(150,150,150)'\n    ),\n    showarrow=False)\n)\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='programming-language-trends')\n```\n\n----------------------------------------\n\nTITLE: Setting Partial Range Bounds in 3D Axes\nDESCRIPTION: Demonstrates how to set only lower or upper bounds for axis ranges while allowing autorange for the other bound. Uses None to enable autorange for specific bounds.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-axes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\nnp.random.seed(1)\n\nN = 70\n\nfig = go.Figure(data=[go.Mesh3d(x=(70*np.random.randn(N)),\n                   y=(55*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='rgba(244,22,100,0.6)'\n                  )])\n\nfig.update_layout(\n    scene = dict(\n        xaxis = dict(nticks=4, range=[-100,100],),\n                     yaxis = dict(nticks=4, range=[None, 100],),\n                     zaxis = dict(nticks=4, range=[-100, None],),),\n    width=700,\n    margin=dict(r=20, l=10, b=10, t=10))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Maximum Text Size in Pie Charts with Plotly Express in Python\nDESCRIPTION: This example demonstrates setting the maximum font size for text in pie charts using the `textfont_size` parameter in Plotly Express. It uses a dataset from `plotly.express.data` and updates the pie chart layout to specify the text position and font size.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent == 'Asia' and year == 2007\")\nfig = px.pie(df, values='pop', names='country')\nfig.update_traces(textposition='inside', textfont_size=14)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Minimum Plot Size with Automargins in Plotly\nDESCRIPTION: Demonstrates setting minimum width and height constraints when using automargin feature. Creates a bar chart with minimum size limits of 250 pixels in both dimensions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/setting-graph-size.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=[\"Apples\", \"Oranges\", \"Watermelon\", \"Pears\"],\n    y=[3, 2, 1, 4]\n))\n\nfig.update_layout(\n    autosize=False,\n    minreducedwidth=250,\n    minreducedheight=250,\n    width=450,\n    height=450,\n    yaxis=dict(\n        title=dict(\n            text=\"Y-axis Title\",\n            font=dict(\n                size=30\n            )\n        ),\n        ticktext=[\"Label\", \"Very long label\", \"Other label\", \"Very very long label\"],\n        tickvals=[1, 2, 3, 4],\n        tickmode=\"array\",\n    )\n)\n\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Filtering Multiple Values with WHERE IN Clause\nDESCRIPTION: Demonstrates how to filter SQL query results for multiple values using the WHERE IN clause, retrieving data for both NYPD and DOB agencies.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, Descriptor, Agency '\n                       'FROM data '\n                       'WHERE Agency IN (\"NYPD\", \"DOB\")'\n                       'LIMIT 10', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Gender Earnings Disparity with Plotly Express in Python\nDESCRIPTION: The example uses Plotly Express to create a dot plot visualizing gender earnings disparity among schools, requiring Plotly and pandas libraries. It uses gender and salary as visual elements and customizes axes with labels. Inputs are school names and respective salaries categorized by gender, outputting an interactive plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dot-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\nschools = [\"Brown\", \"NYU\", \"Notre Dame\", \"Cornell\", \"Tufts\", \"Yale\",\n           \"Dartmouth\", \"Chicago\", \"Columbia\", \"Duke\", \"Georgetown\",\n           \"Princeton\", \"U.Penn\", \"Stanford\", \"MIT\", \"Harvard\"]\nn_schools = len(schools)\n\nwomen_salary = [72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112]\nmen_salary = [92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165]\n\ndf = pd.DataFrame(dict(school=schools*2, salary=men_salary + women_salary,\n                       gender=[\"Men\"]*n_schools + [\"Women\"]*n_schools))\n\n# Use column names of df for the different parameters x, y, color, ...\nfig = px.scatter(df, x=\"salary\", y=\"school\", color=\"gender\",\n                 title=\"Gender Earnings Disparity\",\n                 labels={\"salary\":\"Annual Salary (in thousands)\"} # customize axis label\n                )\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Milk Production Data\nDESCRIPTION: Imports a CSV file containing monthly milk production data, converts it to a NumPy array, and creates a table to display the first 15 rows of the dataset using Plotly's figure factory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-subtraction.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\ntime_series = np.asarray(time_series)\n\ndf = milk_data[0:15]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='milk-production-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Sorting Categories Alphabetically\nDESCRIPTION: Shows how to sort categories alphabetically using categoryorder parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Violin Plot with Wide-Form Data\nDESCRIPTION: Creates a violin plot using the wide-form portion of the data, showing experiments 1-3 with hover data including participant IDs.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nmixed_df = px.data.experiment(indexed=True)\n\nfig = px.violin(mixed_df, y=[\"experiment_1\", \"experiment_2\", \"experiment_3\"], hover_data=[mixed_df.index])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Replace Mode with Colors\nDESCRIPTION: This snippet demonstrates how to use pattern_fillmode='replace' while still maintaining colored traces, which can provide better visual distinction while ensuring the patterns are clearly visible.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.bar(df, x=\"medal\", y=\"count\", color=\"nation\",\n             pattern_shape=\"nation\", pattern_shape_sequence=[\".\", \"x\", \"+\"],\n            )\nfig.update_traces(\n    marker=dict(line_color=\"grey\", pattern_fillmode=\"replace\")\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Rectangular Selection to Scatter Plot\nDESCRIPTION: Demonstrates how to add a rectangular selection to a scatter plot using Plotly Express. The selection is defined by x and y coordinates specifying the selection boundaries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.add_selection(x0=3.0, y0=6.5, x1=3.5, y1=5.5)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Custom Labels\nDESCRIPTION: Example of using custom labels with Plotly Express without a DataFrame input. Creates a simple bar chart with custom axis and color labels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.bar(df, x=[\"Apples\", \"Oranges\"], y=[10,20], color=[\"Here\", \"There\"],\n    labels=dict(x=\"Fruit\", y=\"Amount\", color=\"Place\")\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Funnel Charts with Date Formatting in Plotly Python\nDESCRIPTION: This code creates two horizontal funnel charts using Plotly, demonstrating date formatting in the y-axis and text labels. It showcases the use of texttemplate for custom date formatting and compares it with textinfo for displaying trace information.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Funnel(\n    name = 'Montreal',\n    orientation = \"h\",\n    y = [\"2018-01-01\", \"2018-07-01\", \"2019-01-01\", \"2020-01-01\"],\n    x = [100, 60, 40, 20],\n    textposition = \"inside\",\n    texttemplate = \"%{y| %a. %_d %b %Y}\"))\n\nfig.add_trace(go.Funnel(\n    name = 'Vancouver',\n    orientation = \"h\",\n    y = [\"2018-01-01\", \"2018-07-01\", \"2019-01-01\", \"2020-01-01\"],\n    x = [90, 70, 50, 10],\n    textposition = \"inside\",\n    textinfo = \"label\"))\n\nfig.update_layout(yaxis = {'type': 'date'})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Changing Map Projection Type\nDESCRIPTION: These snippets demonstrate how to change the map projection type for a Geo Map.  Examples show setting the projection to 'orthographic' and 'natural earth', showcasing different ways to flatten the Earth's surface.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(projection_type=\"orthographic\")\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(projection_type=\"natural earth\")\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Loading GeoJSON for US Counties in Python\nDESCRIPTION: This snippet loads GeoJSON data for US counties, where each feature is identified by a FIPS code, using Python's urllib and json libraries. The data is essential for constructing geographic representations in mapping visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\ncounties[\"features\"][0]\n```\n\n----------------------------------------\n\nTITLE: Alternatives for Static Image Export with Orca\nDESCRIPTION: Installation commands for using the older Orca tool to export Plotly visualizations to static images. Orca requires both the Orca tool and the psutil package.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c plotly plotly-orca==1.3.1 psutil\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install psutil\n```\n\n----------------------------------------\n\nTITLE: Initializing Default 3D Surface Plot with Plotly\nDESCRIPTION: Creates a basic 3D surface plot using Mt Bruno elevation data with default camera settings\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-camera-controls.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\nfig = go.Figure(data=go.Surface(z=z_data, showscale=False))\nfig.update_layout(\n    title=dict(text='Mt Bruno Elevation'),\n    width=400, height=400,\n    margin=dict(t=40, r=0, l=20, b=20)\n)\n\nname = 'default'\ncamera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=1.25, y=1.25, z=1.25)\n)\n\nfig.update_layout(scene_camera=camera, title=name)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Marginal Distributions and Trendline\nDESCRIPTION: Creates an advanced scatter plot with violin and box marginal plots, OLS trendline, and simple white template\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Querying Daily Sales Data from Redshift\nDESCRIPTION: Python code that uses pandas to query the total quantity of tickets sold per day, joining the sales and date tables to obtain chronological sales data for trend analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(sales.qtysold) as quantity_sold, date.caldate\nFROM sales, date\nWHERE sales.dateid = date.dateid\nGROUP BY date.caldate\nORDER BY date.caldate asc;\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Using Symbol Mapping in Line Charts with Python\nDESCRIPTION: Demonstrates how to map a data field to marker symbols in Plotly Express line charts. The example uses country names to determine different marker symbols, providing another visual dimension to distinguish between data series beyond color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"continent == 'Oceania'\")\nfig = px.line(df, x='year', y='lifeExp', color='country', symbol=\"country\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Subplots with Plotly Figure Factory in Python\nDESCRIPTION: This code snippet demonstrates how to create two different figures (a quiver chart and a streamline chart) and arrange them as subplots using Plotly's figure factory. The figures are manipulated to ensure they have correctly defined axis attributes for subplotting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-subplots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\n\nimport numpy as np\n\n## Create first figure\nx1,y1 = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))\nu1 = np.cos(x1)*y1\nv1 = np.sin(x1)*y1\n\nfig1 = ff.create_quiver(x1, y1, u1, v1, name='Quiver')\n\n## Create second figure\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nY, X = np.meshgrid(x, y)\nu = -1 - X**2 + Y\nv = 1 + X - Y**2\n\nfig2 = ff.create_streamline(x, y, u, v, arrow_scale=.1, name='Streamline')\n```\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(len(fig1.data)):\n    fig1.data[i].xaxis='x1'\n    fig1.data[i].yaxis='y1'\n\nfig1.layout.xaxis1.update({'anchor': 'y1'})\nfig1.layout.yaxis1.update({'anchor': 'x1', 'domain': [.55, 1]})\n\nfor i in range(len(fig2.data)):\n    fig2.data[i].xaxis='x2'\n    fig2.data[i].yaxis='y2'\n\n# initialize xaxis2 and yaxis2\nfig2['layout']['xaxis2'] = {} \nfig2['layout']['yaxis2'] = {} \n\nfig2.layout.xaxis2.update({'anchor': 'y2'})\nfig2.layout.yaxis2.update({'anchor': 'x2', 'domain': [0, .45]})\n```\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure()\nfig.add_traces([fig1.data[0], fig2.data[0]])\n\nfig.layout.update(fig1.layout)\nfig.layout.update(fig2.layout)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Hiding Color Bar in Density Heatmap\nDESCRIPTION: Shows how to hide the color bar in a density heatmap plot using layout configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", title=\"No color bar on this density plot\")\n\nfig.update_layout(coloraxis_showscale=False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating On-the-fly Graph Images\nDESCRIPTION: Creates a template for generating and embedding Plotly graph images dynamically using base64 encoding and the Plotly image server.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/pdf-reports.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport base64\n\nwidth = 600\nheight = 600\n\ntemplate = (''\n    '<img style=\"width: {width}; height: {height}\" src=\"data:image/png;base64,{image}>\">'\n    '{caption}'                              \n    '<br>'\n    '<hr>'\n'')\n\nfigures = [\n    {'data': [{'x': [1,2,3], 'y': [3,1,6]}], 'layout': {'title': 'the first graph'}},\n    {'data': [{'x': [1,2,3], 'y': [3,7,6], 'type': 'bar'}], 'layout': {'title': 'the second graph'}}\n]\n\nimages = [base64.b64encode(py.image.get(figure, width=width, height=height)).decode('utf-8') for figure in figures]\n\nreport_html = ''\nfor image in images:\n    _ = template\n    _ = _.format(image=image, caption='', width=width, height=height)\n    report_html += _\n\ndisplay(HTML(report_html))\nconvert_html_to_pdf(report_html, 'report-2.pdf')\n```\n\n----------------------------------------\n\nTITLE: Plotting Basic Isosurface with Plotly in Python\nDESCRIPTION: This snippet creates a basic isosurface plot using hardcoded x, y, z coordinates and specified isomin and isomax values for the isosurface. The plot visualizes a scalar field between the specified threshold values without any site-specific customization. Essential dependencies include the Plotly library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig= go.Figure(data=go.Isosurface(\n    x=[0,0,0,0,1,1,1,1],\n    y=[1,0,1,0,1,0,1,0],\n    z=[1,1,0,0,1,1,0,0],\n    value=[1,2,3,4,5,6,7,8],\n    isomin=2,\n    isomax=6,\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing igraph Library for Graph Operations in Python\nDESCRIPTION: This snippet imports the 'igraph' library, which is used for high-performance graph generation and analysis. Ensure the library is installed using 'sudo pip install igraph'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport igraph as ig\n```\n\n----------------------------------------\n\nTITLE: Creating Random Network Graph with NetworkX in Python\nDESCRIPTION: This snippet demonstrates how to create a random geometric graph using NetworkX library. It initializes a graph with 200 nodes and a probability of 0.125 for edge creation between nodes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/network-graphs.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport networkx as nx\n\nG = nx.random_geometric_graph(200, 0.125)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Plotly FigureWidget in Python\nDESCRIPTION: This snippet creates a scatter plot using Plotly's FigureWidget, plotting Torque against City MPG from the cars dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nfig = go.FigureWidget(\n    data=[\n        dict(\n            type='scattergl',\n            x=cars_df['Torque'],\n            y=cars_df['City mpg'],\n            mode='markers',\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Singular Value Decomposition (SVD)\nDESCRIPTION: Performs SVD decomposition of a matrix and visualizes the components using Plotly's table visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\nsvd = np.linalg.svd(matrix)\n\nu = svd[0]\nsigma = svd[1]\nv = svd[2]\n\nu = u.tolist()\nsigma = sigma.tolist()\nv = v.tolist()\n\ncolorscale = [[0, '#111111'],[1, '#222222']]\nfont=['#ffffff', '#ffffff']\n\nmatrix_prod = [\n    ['$U$', '', '$\\Sigma$', '$V^*$', ''],\n    [u[0][0], u[0][1], sigma[0], v[0][0], v[0][1]],\n    [u[1][0], u[1][1], sigma[1], v[1][0], v[1][1]]\n]\n\ntable = FF.create_table(matrix_prod)\npy.iplot(table, filename='svd')\n```\n\n----------------------------------------\n\nTITLE: Controlling Category Order in Plotly Express\nDESCRIPTION: Example showing how to control category ordering using category_orders parameter in Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"day\", y=\"total_bill\", color=\"smoker\", barmode=\"group\", facet_col=\"sex\",\n             category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n                              \"smoker\": [\"Yes\", \"No\"],\n                              \"sex\": [\"Male\", \"Female\"]})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Shape Layer in Plotly Python\nDESCRIPTION: This snippet demonstrates how to control the layer on which shapes are drawn in Plotly. It shows examples of shapes drawn above traces, between traces and gridlines, and below gridlines using the 'layer' attribute.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\n\nfig = px.line(df)\n\nfig.add_shape(\n    type=\"rect\",\n    x0=\"2018-03-01\",\n    y0=0,\n    x1=\"2018-08-01\",\n    y1=3,\n    line_width=0,\n    layer=\"above\",\n    label=dict(text=\"Above\", textposition=\"top center\", font=dict(size=15)),\n    fillcolor=\"LightGreen\",\n    opacity=0.80,\n)\n\nfig.add_shape(\n    type=\"rect\",\n    x0=\"2018-10-01\",\n    y0=0,\n    x1=\"2019-03-01\",\n    y1=3,\n    line_width=0,\n    layer=\"between\",\n    label=dict(text=\"Between\", textposition=\"top center\", font=dict(size=15)),\n    fillcolor=\"LightGreen\",\n    opacity=0.80,\n)\n\nfig.add_shape(\n    type=\"rect\",\n    x0=\"2019-05-01\",\n    y0=0,\n    x1=\"2019-10-01\",\n    y1=3,\n    line_width=0,\n    layer=\"below\",\n    label=dict(text=\"Below\", textposition=\"top center\", font=dict(size=15)),\n    fillcolor=\"LightGreen\",\n    opacity=0.80,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Empty Code Cell\nDESCRIPTION: An empty code cell at the end of the notebook, likely for adding additional code or notes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-detection.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Map with Plotly Express in Python\nDESCRIPTION: This snippet utilizes Plotly Express to create a scatter map using a DataFrame containing car share data. It visualizes the data by mapping latitude and longitude with color and size representing different variables.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.carshare()\nfig = px.scatter_map(df, lat=\"centroid_lat\", lon=\"centroid_lon\",     color=\"peak_hour\", size=\"car_hours\",\n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Log-Transformed OLS Trendlines on Linear Axes\nDESCRIPTION: Shows how to fit OLS trendlines with logarithmic transformations to X data using the 'trendline_options' parameter, independent of axis scaling. Uses log-transformed fitting on linear axes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder(year=2007)\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", \n                 trendline=\"ols\", trendline_options=dict(log_x=True),\n                 title=\"Log-transformed fit on linear axes\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tick Positions on Category Boundaries\nDESCRIPTION: Shows how to adjust tick positions to category boundaries using tickson parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/categorical-axes.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.bar(x=[\"A\",\"B\",\"C\"], y=[1,3,2])\nfig.update_xaxes(showgrid=True, ticks=\"outside\", tickson=\"boundaries\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Examining Built-in Templates in Plotly\nDESCRIPTION: Demonstrates how to access and inspect the contents of built-in templates. This example loads the 'plotly' template and displays its layout properties for reference when creating custom templates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\nplotly_template = pio.templates[\"plotly\"]\nplotly_template.layout\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Map with Multiple Markers in Python\nDESCRIPTION: This snippet creates a scatter map that plots multiple locations, each represented by different markers. It demonstrates customization of markers and layout settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n        lat=[\"38.91427\",\"38.91538\",\"38.91458\",\n             \"38.92239\",\"38.93222\",\"38.90842\",\n             \"38.91931\",\"38.93260\",\"38.91368\",\n             \"38.88516\",\"38.921894\",\"38.93206\",\n             \"38.91275\"],\n        lon=[\"-77.02827\",\"-77.02013\",\"-77.03155\",\n             \"-77.04227\",\"-77.02854\",\"-77.02419\",\n             \"-77.02518\",\"-77.03304\",\"-77.04509\",\n             \"-76.99656\",\"-77.042438\",\"-77.02821\",\n             \"-77.01239\"],\n        mode='markers',\n        marker=go.scattermap.Marker(\n            size=9\n        ),\n        text=[\"The coffee bar\",\"Bistro Bohem\",\"Black Cat\",\n             \"Snap\",\"Columbia Heights Coffee\",\"Azi's Cafe\",\n             \"Blind Dog Cafe\",\"Le Caprice\",\"Filter\",\n             \"Peregrine\",\"Tryst\",\"The Coupe\",\n             \"Big Bear Cafe\"],\n    ))\n\nfig.update_layout(\n    autosize=True,\n    hovermode='closest',\n    map=dict(\n        bearing=0,\n        center=dict(\n            lat=38.92,\n            lon=-77.07\n        ),\n        pitch=0,\n        zoom=10\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Exponential Fit with Plotly\nDESCRIPTION: Creates an exponential fit using scipy.optimize.curve_fit and visualizes the data and fitted curve using Plotly. Includes data points, fitted line, and custom annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/exponential-fits.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Learn about API authentication here: https://plot.ly/python/getting-started\n# Find your api_key here: https://plot.ly/settings/api\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Scientific libraries\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\n\nx = np.array([399.75, 989.25, 1578.75, 2168.25, 2757.75, 3347.25, 3936.75, 4526.25, 5115.75, 5705.25])\ny = np.array([109,62,39,13,10,4,2,0,1,2])\n\ndef exponenial_func(x, a, b, c):\n    return a*np.exp(-b*x)+c\n\n\npopt, pcov = curve_fit(exponenial_func, x, y, p0=(1, 1e-6, 1))\n\nxx = np.linspace(300, 6000, 1000)\nyy = exponenial_func(xx, *popt)\n\n# Creating the dataset, and generating the plot\ntrace1 = go.Scatter(\n                  x=x,\n                  y=y,\n                  mode='markers',\n                  marker=go.Marker(color='rgb(255, 127, 14)'),\n                  name='Data'\n                  )\n\ntrace2 = go.Scatter(\n                  x=xx,\n                  y=yy,\n                  mode='lines',\n                  marker=go.Marker(color='rgb(31, 119, 180)'),\n                  name='Fit'\n                  )\n\nannotation = go.Annotation(\n                  x=2000,\n                  y=100,\n                  text='$\\textbf{Fit}: 163.56e^{-0.00097x} - 1.16$',\n                  showarrow=False\n                  )\nlayout = go.Layout(\n                title='Exponential Fit in Python',\n                plot_bgcolor='rgb(229, 229, 229)',\n                  xaxis=go.XAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  yaxis=go.YAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  annotations=[annotation]\n                )\n\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\n\npy.plot(fig, filename='Exponential-Fit-in-python')\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data into Spark DataFrame\nDESCRIPTION: Loads bike rental data from a JSON file into a Spark DataFrame using the SQLContext.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbtd = sqlContext.jsonFile(\"btd2.json\")\n```\n\n----------------------------------------\n\nTITLE: Display Cyclical Colorscales\nDESCRIPTION: Creates figures showing all built-in cyclical colorscales in both cyclical and continuous formats.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/builtin-colorscales.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.colors.cyclical.swatches_cyclical()\nfig.show()\n\nfig = px.colors.cyclical.swatches_continuous()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Tickformatstops for Zoom Levels - Plotly Python\nDESCRIPTION: This snippet illustrates using 'tickformatstops' to set different formats for axis ticks based on zoom levels. It adjusts the tick formatting for various time intervals on the x-axis for a financial data visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(go.Scatter(\n    x = df['Date'],\n    y = df['mavg']\n))\n\nfig.update_layout(\n    xaxis_tickformatstops = [\n        dict(dtickrange=[None, 1000], value='%H:%M:%S.%L ms'),\n        dict(dtickrange=[1000, 60000], value='%H:%M:%S s'),\n        dict(dtickrange=[60000, 3600000], value='%H:%M m'),\n        dict(dtickrange=[3600000, 86400000], value='%H:%M h'),\n        dict(dtickrange=[86400000, 604800000], value='%e. %b d'),\n        dict(dtickrange=[604800000, \"M1\"], value='%e. %b w'),\n        dict(dtickrange=[\"M1\", \"M12\"], value='%b '%y M'),\n        dict(dtickrange=[\"M12\", None], value='%Y Y')\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Binary String Representation for Faster Image Display in Plotly\nDESCRIPTION: Demonstrates using the binary_string parameter to pass image data to the figure as a PNG binary string for faster rendering of large arrays. This approach is more performant but offers less flexibility than passing numerical values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\nimg = np.arange(15**2).reshape((15, 15))\nfig = px.imshow(img, binary_string=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Network Graph with networkx in Python\nDESCRIPTION: Initializes the same network using the networkx library and applies the Fruchterman-Reingold layout. The code defines nodes and edges from the previously loaded data since networkx cannot directly read the GML file.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/igraph-networkx-comparison.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\n\nV=range(N)# list of vertices\ng=nx.Graph()\ng.add_nodes_from(V)\ng.add_edges_from(E)# E is the list of edges\n\npos=nx.fruchterman_reingold_layout(g)\n```\n\n----------------------------------------\n\nTITLE: Creating basic 2D histogram contour with graph objects\nDESCRIPTION: This snippet creates a basic 2D histogram contour plot using Plotly graph objects. It generates random x and y data points and uses `go.Histogram2dContour` to visualize the density distribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/2d-histogram-contour.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\n\nx = np.random.uniform(-1, 1, size=500)\ny = np.random.uniform(-1, 1, size=500)\n\nfig = go.Figure(go.Histogram2dContour(\n        x = x,\n        y = y\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Execute BigQuery and Create Table\nDESCRIPTION: Execute the BigQuery query and create a table visualization using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    top10_active_users_df = gbq.read_gbq(top10_active_users_query, project_id=project_id)\nexcept:\n    print 'Error reading the dataset'\n\ntop_10_users_table = ff.create_table(top10_active_users_df)\npy.iplot(top_10_users_table, filename='top-10-active-users')\n```\n\n----------------------------------------\n\nTITLE: ECDF Plot with Raw Counts\nDESCRIPTION: Demonstrates how to configure the Y-axis to show raw counts instead of probability.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", color=\"sex\", ecdfnorm=None)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Specifying Aggregation Functions in Histograms with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to specify different aggregation functions (count and sum) for histograms using Plotly. It uses categorical data for both x and y axes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nx = [\"Apples\",\"Apples\",\"Apples\",\"Oranges\", \"Bananas\"]\ny = [\"5\",\"10\",\"3\",\"10\",\"5\"]\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"count\", y=y, x=x, name=\"count\"))\nfig.add_trace(go.Histogram(histfunc=\"sum\", y=y, x=x, name=\"sum\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding annotations to a Plotly figure\nDESCRIPTION: This snippet demonstrates adding annotations to a Plotly figure to highlight specific data points, such as the average and maximum values of 'High' and 'Low' data. It defines annotation dictionaries with coordinates, text, and styling options, and then later incorporates these annotations into the layout update for the update menu buttons.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nhigh_annotations = [dict(x=\"2016-03-01\",\n                         y=df.High.mean(),\n                         xref=\"x\", yref=\"y\",\n                         text=\"High Average:<br> %.3f\" % df.High.mean(),\n                         ax=0, ay=-40),\n                    dict(x=df.Date[df.High.idxmax()],\n                         y=df.High.max(),\n                         xref=\"x\", yref=\"y\",\n                         text=\"High Max:<br> %.3f\" % df.High.max(),\n                         ax=-40, ay=-40)]\nlow_annotations = [dict(x=\"2015-05-01\",\n                        y=df.Low.mean(),\n                        xref=\"x\", yref=\"y\",\n                        text=\"Low Average:<br> %.3f\" % df.Low.mean(),\n                        ax=0, ay=40),\n                   dict(x=df.Date[df.High.idxmin()],\n                        y=df.Low.min(),\n                        xref=\"x\", yref=\"y\",\n                        text=\"Low Min:<br> %.3f\" % df.Low.min(),\n                        ax=0, ay=40)]\n```\n\n----------------------------------------\n\nTITLE: Styling Selection Borders in Scatter Plot\nDESCRIPTION: Demonstrates how to style selection borders by setting color, width, and dash properties. The example creates a dashed crimson border for the selection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.add_selection(\n    x0=2.5, y0=6.5, x1=3.5, y1=5.5,\n    line=dict(\n        color=\"Crimson\",\n        width=2,\n        dash=\"dash\",\n    ))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting with index references in Plotly Express\nDESCRIPTION: Illustrates using index references in dataset while plotting with Plotly Express. Demonstrates automatic label inference for non-y-axis elements and reusing indices as plot arguments.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide(indexed=True)\n\nfig = px.bar(wide_df, x=wide_df.index, y=wide_df.columns)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Probability Histogram\nDESCRIPTION: Creates a normalized histogram showing the probability distribution of 10-minute standard deviations in wind speed.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/statistics-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Histogram(\n        x=wind_data['10 Min Std Dev'],\n        histnorm='probability'\n    )\n]\npy.iplot(data, filename='wind-data-histogram')\n```\n\n----------------------------------------\n\nTITLE: Area Plot Example\nDESCRIPTION: Demonstrates creating an area plot using the Plotly backend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\n\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\nfig = df.plot.area()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Chart in Plotly Python\nDESCRIPTION: This snippet demonstrates how to create a static chart in Plotly Python, which disables all interactive features.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nconfig = {'staticPlot': True}\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]))\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating Gantt Charts with FigureFactory in Python\nDESCRIPTION: Example of how to use the FigureFactory to create gantt charts. This snippet demonstrates how to access the help documentation for the create_gantt function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.tools as tls\nhelp(tls.FigureFactory.create_gantt)\n```\n\n----------------------------------------\n\nTITLE: Default Statistical Plots for Wide-Form Data\nDESCRIPTION: Shows default behaviors for statistical plots (histogram, violin, box) with wide-form experimental data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nmixed_df = px.data.experiment(indexed=True)\nwide_df = mixed_df[[\"experiment_1\", \"experiment_2\", \"experiment_3\"]]\n\nfig = px.histogram(wide_df)\nfig.show()\n\nfig = px.violin(wide_df)\nfig.show()\n\nfig = px.box(wide_df)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Box Plot with Variable Faceting\nDESCRIPTION: Creates a box plot with experiments as facets, grouping by participant groups and coloring by gender.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nmixed_df = px.data.experiment(indexed=True)\n\nfig = px.box(mixed_df, x=\"group\", y=[\"experiment_1\", \"experiment_2\", \"experiment_3\"],\n                color=\"gender\", facet_col=\"variable\", hover_data=[mixed_df.index])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Top Complaints by Hour using Python and SQL\nDESCRIPTION: This complex snippet iterates through each hour, queries the top complaints, and prepares data for a stacked bar chart. It demonstrates advanced SQL usage with Pandas and data manipulation in Python to create a comprehensive visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncomplaint_traces = {} # Each series in the graph will represent a complaint\ncomplaint_traces['Other'] = {}\n\nfor hour in range(1, 24):\n    hour_str = '0'+str(hour) if hour < 10 else str(hour)\n    df = pd.read_sql_query('SELECT  CreatedDate, '\n                                   'ComplaintType ,'\n                                   'strftime(\\'%H\\', CreatedDate) as `hour`,  '\n                                   'COUNT(*) as num_complaints '\n                           'FROM data '\n                           'WHERE hour = \"{}\" '\n                           'GROUP BY ComplaintType '\n                           'ORDER BY -num_complaints'.format(hour_str), disk_engine)\n\n    complaint_traces['Other'][hour] = sum(df.num_complaints)\n\n    # Grab the 7 most common complaints for that hour\n    for i in range(7):\n        complaint = df.get_value(i, 'ComplaintType')\n        count = df.get_value(i, 'num_complaints')\n        complaint_traces['Other'][hour] -= count\n        if complaint in complaint_traces:\n            complaint_traces[complaint][hour] = count\n        else:\n            complaint_traces[complaint] = {hour: count}\n\ntraces = []\nfor complaint in complaint_traces:\n    traces.append({\n        'x': range(25),\n        'y': [complaint_traces[complaint].get(i, None) for i in range(25)],\n        'name': complaint,\n        'type': 'bar'\n    })\n\npy.iplot({\n    'data': traces,\n    'layout': {\n        'barmode': 'stack',\n        'xaxis': {'title': 'Hour in Day'},\n        'yaxis': {'title': 'Number of Complaints'},\n        'title': 'The 7 Most Common 311 Complaints by Hour in a Day'\n    }}, filename='311/most common complaints by hour')\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Column Facets - Python\nDESCRIPTION: This snippet illustrates how to create a choropleth plot with facets for different candidates in an election. It uses Plotly Express to visualize election vote counts by candidate in geographic regions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\ndf = df.melt(id_vars=\"district\", value_vars=[\"Coderre\", \"Bergeron\", \"Joly\"], var_name=\"candidate\", value_name=\"votes\")\ngeojson = px.data.election_geojson()\n\nfig = px.choropleth(df, geojson=geojson, color=\"votes\", facet_col=\"candidate\", locations=\"district\", featureidkey=\"properties.district\", projection=\"mercator\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Average of Two Curves using Python and Plotly\nDESCRIPTION: This code defines two curves (sine and cosine), calculates their average, and plots all three using Plotly. It demonstrates how to create scatter plots for each curve and customize their appearance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/average_multiple_curves.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 2*np.pi, 100)\nf = np.sin(x)\ng = np.cos(x)\nh = [(f[j] + g[j])/2 for j in range(len(x))]\n\ntrace1 = go.Scatter(\n    x=x,\n    y=f,\n    mode='lines',\n    name='f(x)',\n    marker=dict(\n        color='rgb(220, 20, 60)'\n    )\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=g,\n    mode='lines',\n    name='g(x)',\n    marker=dict(\n        color='rgb(100, 149, 237)'\n    )\n)\n\ntrace3 = go.Scatter(\n    x=x,\n    y=h,\n    mode='markers+lines',\n    name='Average of f and g',\n    marker=dict(\n        color='rgb(128, 0, 128)',\n        symbol='diamond-open',\n    )\n)\n\ndata = [trace1, trace2, trace3]\npy.iplot(data, filename='2-curves')\n```\n\n----------------------------------------\n\nTITLE: Setting Double-Click Delay in Plotly Python\nDESCRIPTION: This snippet demonstrates how to set the maximum delay between two consecutive clicks to be interpreted as a double-click in a Plotly figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nconfig = {'doubleClickDelay': 1000}\n\nfig = go.Figure(go.Bar(\n    y=[3, 5, 3, 2],\n    x=[\"2019-09-02\", \"2019-10-10\", \"2019-11-12\", \"2019-12-22\"],\n    texttemplate=\"%{label}\",\n    textposition=\"inside\"))\n\nfig.update_layout(xaxis={'type': 'date'})\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Histogram and Rug Marginals in Plotly Express\nDESCRIPTION: Creates a scatter plot of Iris dataset with histogram marginal on x-axis and rug plot marginal on y-axis using Plotly Express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marginal-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", marginal_x=\"histogram\", marginal_y=\"rug\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Writing HTML Report to File in Python\nDESCRIPTION: This snippet demonstrates how to write the generated HTML string to a local file. It uses the built-in open() function to create and write to a file named 'report.html'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nf = open('/home/jack/report.html','w')\nf.write(html_string)\nf.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Polar Line Plot with Plotly Express in Python\nDESCRIPTION: This snippet creates a polar line chart using wind data to visualize frequency against direction. The chart is colored according to strength and closes the line to form a complete shape.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.wind()\nfig = px.line_polar(df, r=\"frequency\", theta=\"direction\", color=\"strength\", line_close=True,\n            color_discrete_sequence=px.colors.sequential.Plasma_r)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty FigureWidget with a Scatter Trace\nDESCRIPTION: Initialize an empty Plotly FigureWidget and add a scatter trace to be manipulated interactively later.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interact-decorator.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfig = go.FigureWidget()\nscatt = fig.add_scatter()\nfig\n```\n\n----------------------------------------\n\nTITLE: Visualizing Network Graph with igraph and Plotly\nDESCRIPTION: Creates a network visualization using Plotly based on igraph layout data. The code sets up scatter traces for both edges and nodes, with custom styling and hover information, and configures the layout with annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/igraph-networkx-comparison.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\nXn=[layt[k][0] for k in range(N)]\nYn=[layt[k][1] for k in range(N)]\nXe=[]\nYe=[]\nfor e in E:\n    Xe+=[layt[e[0]][0],layt[e[1]][0], None]\n    Ye+=[layt[e[0]][1],layt[e[1]][1], None]\n\ntrace1=Scatter(x=Xe,\n               y=Ye,\n               mode='lines',\n               line= dict(color='rgb(210,210,210)', width=1),\n               hoverinfo='none'\n               )\ntrace2=Scatter(x=Xn,\n               y=Yn,\n               mode='markers',\n               name='ntw',\n               marker=dict(symbol='circle-dot',\n                                        size=5,\n                                        color='#6959CD',\n                                        line=dict(color='rgb(50,50,50)', width=0.5)\n                                        ),\n               text=labels,\n               hoverinfo='text'\n               )\n\naxis=dict(showline=False, # hide axis line, grid, ticklabels and  title\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title=''\n          )\n\nwidth=800\nheight=800\nlayout=Layout(title= \"Coauthorship network of scientists working on network theory and experiment\"+\\\n              \"<br> Data source: <a href='https://networkdata.ics.uci.edu/data.php?id=11'> [1]</a>\",\n    font= dict(size=12),\n    showlegend=False,\n    autosize=False,\n    width=width,\n    height=height,\n    xaxis=layout.XAxis(axis),\n    yaxis=layout.YAxis(axis),\n    margin=layout.Margin(\n        l=40,\n        r=40,\n        b=85,\n        t=100,\n    ),\n    hovermode='closest',\n    annotations=[\n           dict(\n           showarrow=False,\n            text='This igraph.Graph has the Kamada-Kawai layout',\n            xref='paper',\n            yref='paper',\n            x=0,\n            y=-0.1,\n            xanchor='left',\n            yanchor='bottom',\n            font=dict(\n            size=14\n            )\n            )\n        ]\n    )\n\ndata=[trace1, trace2]\nfig=Figure(data=data, layout=layout)\npy.iplot(fig, filename='Coautorship-network-igraph')\n```\n\n----------------------------------------\n\nTITLE: Clipping Axis Range in Plotly Express\nDESCRIPTION: This snippet demonstrates clipping minimum and maximum values for axes in a Plotly Express plot using autorangeoptions. This constrains the axis to specified limits.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.update_yaxes(autorangeoptions=dict(clipmin=5))\nfig.update_xaxes(autorangeoptions=dict(clipmax=4))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Dendrogram Colors and Line Widths\nDESCRIPTION: Shows how to customize the appearance of dendrogram clusters by setting specific colors for row and column clusters, background color, and line width.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-clustergram.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport dash_bio\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv')\n\ndash_bio.Clustergram(\n    data=df,\n    column_labels=list(df.columns.values),\n    row_labels=list(df.index),\n    height=800,\n    width=700,\n    color_list={\n        'row': ['#636EFA', '#00CC96', '#19D3F3'],\n        'col': ['#AB63FA', '#EF553B'],\n        'bg': '#506784'\n    },\n    line_width=2\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Pan/Zoom on Axes in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates how to disable pan and zoom interactions on a specific axis in a Plotly Express scatter plot. It sets the `fixedrange` property to `True` for the x-axis using `update_xaxes`. Users will no longer be able to pan or zoom on the specified axis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", facet_col=\"species\")\nfig.update_xaxes(fixedrange=True)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing Iris Dataset with Plotly Express\nDESCRIPTION: Demonstrates how to load the built-in iris dataset using px.data and display the first few rows. It also shows how to specify an alternative dataframe type (Polars) for the returned data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/px-arguments.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\ndf.head()\n```\n\nLANGUAGE: python\nCODE:\n```\ndf = px.data.iris(return_type='polars')\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Data Conversion with Binary Strings\nDESCRIPTION: Demonstrates converting numpy arrays to base64 encoded image strings for efficient image data transmission and visualization\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom skimage import data\nfrom PIL import Image\nimport base64\nfrom io import BytesIO\n\nimg = data.astronaut()\npil_img = Image.fromarray(img)\nprefix = \"data:image/png;base64,\"\nwith BytesIO() as stream:\n    pil_img.save(stream, format=\"png\")\n    base64_string = prefix + base64.b64encode(stream.getvalue()).decode(\"utf-8\")\nfig = go.Figure(go.Image(source=base64_string))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Loading and Plotting Time Series Data\nDESCRIPTION: Loads milk production data from a CSV file and creates a basic line plot using Plotly Graph Objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/peak-finding.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\n\nfig = go.Figure(data=go.Scatter(\n    y = time_series,\n    mode = 'lines'\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Stock Data for Peak Analysis in Python\nDESCRIPTION: Load stock data from a CSV file using Pandas and create a table visualization using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-fitting.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstock_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/stockdata.csv')\ndf = stock_data[0:15]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='stockdata-peak-fitting')\n```\n\n----------------------------------------\n\nTITLE: Filtering Ride Durations with Spark SQL\nDESCRIPTION: Creates a new DataFrame containing only rides shorter than 2 hours (7200 seconds) using SQL.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf2 = sqlCtx.sql(\"SELECT Duration as d1 from bay_area_bike where Duration < 7200\")\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Maps with Graph Objects using Mapbox\nDESCRIPTION: This code snippet shows how to create a scatter map using the Graph Objects interface with go.Scattermapbox. It plots a single point (Montreal) on a Mapbox map, and configures the map view settings including center coordinates, zoom level, and bearing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nmapbox_access_token = open(\".mapbox_token\").read()\n\nfig = go.Figure(go.Scattermapbox(\n        lat=['45.5017'],\n        lon=['-73.5673'],\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=14\n        ),\n        text=['Montreal'],\n    ))\n\nfig.update_layout(\n    hovermode='closest',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=45,\n            lon=-73\n        ),\n        pitch=0,\n        zoom=5\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Contour Line Labels in Plotly in Python\nDESCRIPTION: This snippet demonstrates how to add and customize contour line labels in a Plotly contour plot. It sets `contours.showlabels` to `True` to display labels on the contours and modifies the `labelfont` dictionary to customize the label font's size and color.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        contours=dict(\n            coloring ='heatmap',\n            showlabels = True, # show labels on contours\n            labelfont = dict( # label font properties\n                size = 12,\n                color = 'white',\n            )\n        )))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Renderer Configuration\nDESCRIPTION: Shows how to inspect the current renderer configuration using plotly.io.renderers. This displays the default renderer and lists all available renderers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.renderers\n```\n\n----------------------------------------\n\nTITLE: Wide Format Bar Chart\nDESCRIPTION: Creates a bar chart using wide-format data showing medal counts by nation across different medal types.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nwide_df = px.data.medals_wide()\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], title=\"Wide-Form Input\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Showing a Plotly Express Figure - Python\nDESCRIPTION: This snippet demonstrates how to create a scatter plot using Plotly Express, show the figure, and print its representation in the console.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nfig = px.scatter(x=[10, 20], y=[20, 10], height=400, width=400)\nfig.show()\nprint(fig)\n```\n\n----------------------------------------\n\nTITLE: Registering DataFrame as SQL Table\nDESCRIPTION: Registers the DataFrame as a temporary SQL table to enable SQL queries on the data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsqlCtx.registerDataFrameAsTable(btd, \"bay_area_bike\")\n```\n\n----------------------------------------\n\nTITLE: Using Themes in Graph Object Figures\nDESCRIPTION: This snippet illustrates the application of a selected template to a surface plot in Plotly. It constructs a figure using six different themes iteratively and displays them.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\nz_data = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv\")\n\nfig = go.Figure(\n    data=go.Surface(z=z_data.values),\n    layout=go.Layout(\n        title=dict(text=\"Mt Bruno Elevation\"),\n        width=500,\n        height=500,\n    ))\n\nfor template in [\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"]:\n    fig.update_layout(template=template, title=dict(text=\"Mt Bruno Elevation: '%s' theme\" % template))\n    fig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Cumulative Histograms with Plotly in Python\nDESCRIPTION: This snippet shows how to create a cumulative histogram using Plotly. It generates random data and enables the cumulative option in the histogram trace.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx = np.random.randn(500)\nfig = go.Figure(data=[go.Histogram(x=x, cumulative_enabled=True)])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Annotating Layout Image with Shapes in Plotly (Python)\nDESCRIPTION: This code snippet demonstrates how to annotate a layout image with shapes using Plotly. It adds an image to the layout using `fig.add_layout_image`, configures the axes, and then adds a line shape programmatically using `fig.add_shape`. The example also mentions the use of dragmode and modebar buttons for interactive shape drawing and modification.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/images.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure()\n# Add image\nimg_width = 1600\nimg_height = 900\nscale_factor = 0.5\nfig.add_layout_image(\n        x=0,\n        sizex=img_width,\n        y=0,\n        sizey=img_height,\n        xref=\"x\",\n        yref=\"y\",\n        opacity=1.0,\n        layer=\"below\",\n        source=\"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/bridge.jpg\"\n)\nfig.update_xaxes(showgrid=False, range=(0, img_width))\nfig.update_yaxes(showgrid=False, scaleanchor='x', range=(img_height, 0))\n# Line shape added programatically\nfig.add_shape(\n    type='line', xref='x', yref='y',\n    x0=650, x1=1080, y0=380, y1=180, line_color='cyan'\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Absolute Text Position\nDESCRIPTION: Shows how to specify text coordinates and arrow dimensions absolutely while maintaining the same coordinate system as the arrowhead.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndf = px.data.wind()\nfig = px.scatter(df, y=\"frequency\")\n\nfig.update_layout(xaxis=dict(domain=[0, 0.5]), yaxis=dict(domain=[0.25, 0.75]))\nfig.add_annotation(\n    xref=\"x domain\",\n    yref=\"y\",\n    x=0.75,\n    y=1,\n    text=\"An annotation whose text and arrowhead reference the axes and the data\",\n    axref=\"x domain\",\n    ayref=\"y\",\n    ax=0.5,\n    ay=2,\n    arrowhead=2,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Table and Chart with Plotly in Python\nDESCRIPTION: This code snippet contains the implementation of a vertical bar chart alongside a data table using Plotly's figure factory. The graphs are organized to visualize the data on goals per game in a vertical format.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-subplots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\n# Add table data\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montréal<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0],\n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n\n# Initialize a figure with ff.create_table(table_data)\nfig = ff.create_table(table_data, height_constant=60)\n\n# Add graph data\nteams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]\n\n# Make traces for graph\ntrace1 = go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#0099ff'),\n                name='Goals For<br>Per Game')\ntrace2 = go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#404040'),\n                name='Goals Against<br>Per Game')\n\n# Add trace data to figure\nfig.add_traces([trace1, trace2])\n```\n\nLANGUAGE: python\nCODE:\n```\n# initialize xaxis2 and yaxis2\nfig['layout']['xaxis2'] = {} \nfig['layout']['yaxis2'] = {} \n\n# Edit layout for subplots\nfig.layout.yaxis.update({'domain': [0, .45]})\nfig.layout.yaxis2.update({'domain': [.6, 1]})\n\n# The graph's yaxis2 MUST BE anchored to the graph's xaxis2 and vice versa\nfig.layout.yaxis2.update({'anchor': 'x2'})\nfig.layout.xaxis2.update({'anchor': 'y2'})\nfig.layout.yaxis2.update({'title': 'Goals'})\n\n# Update the margins to add a title and see graph x-labels.\nfig.layout.margin.update({'t':75, 'l':50})\nfig.layout.update({'title': '2016 Hockey Stats'})\n\n# Update the height because adding a graph vertically will interact with\n# the plot height calculated for the table\nfig.layout.update({'height':800})\n\n# Plot!\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Mapping for Discrete Colors in Plotly Express Icicle Chart\nDESCRIPTION: This example demonstrates using explicit color mappings for discrete colors in a Plotly Express icicle chart in Python. The 'color_discrete_map' parameter is used to define specific colors for different values. It allows customization of color output for categorical data. Dependency: plotly.express.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.icicle(df, path=[px.Constant(\"all\"), 'sex', 'day', 'time'],\n                values='total_bill', color='time',\n                color_discrete_map={'(?)':'lightgrey', 'Lunch':'gold', 'Dinner':'darkblue'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Assembling Interactive Dashboard Layout\nDESCRIPTION: Combines created widgets and FigureWidget into a vertical layout for interactive flight delay data exploration\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget-app.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncontainer2 = widgets.HBox([origin, textbox])\nwidgets.VBox([container,\n              container2,\n              g])\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Numerical Differentiation in Python\nDESCRIPTION: This snippet imports the necessary libraries for numerical differentiation and plotting, including Plotly, NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/numerical-differentiation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Figure Property Access - Python\nDESCRIPTION: Example demonstrating the renamed property access for the indicator gauge steps property in Plotly graph objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ngraph_objects.indicator.Gauge.steps\n```\n\n----------------------------------------\n\nTITLE: Styling a Plotly Express bar chart\nDESCRIPTION: This code snippet shows how to apply styling to a Plotly Express bar chart using wide-form data. Customizes the chart's appearance with color mapping and template options, and updates layout to change the font family and hide legend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"],\n             title=\"Wide-Form Input, styled\",\n             labels={\"value\": \"Medal Count\", \"variable\": \"Medal\", \"nation\": \"Olympic Nation\"},\n             color_discrete_map={\"gold\": \"gold\", \"silver\": \"silver\", \"bronze\": \"#c96\"},\n             template=\"simple_white\"\n            )\nfig.update_layout(font_family=\"Rockwell\", showlegend=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Anderson-Darling Normality Test with Plotly Visualization\nDESCRIPTION: Performs Anderson-Darling test on gaussian data and creates a tabular visualization of results using Plotly. The code calculates test statistics and evaluates normality at different significance levels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import anderson\n\nresult = anderson(gauss_data)\nstat = round(result.statistic, 4)\n\np = 0\nresult_mat = []\nfor i in range(len(result.critical_values)):\n    sl, cv = result.significance_level[i], result.critical_values[i]\n    if result.statistic < result.critical_values[i]:\n        msg = 'Sample looks Gaussian (fail to reject H0)'\n    else:\n        msg = 'Sample does not look Gaussian (reject H0)'\n    result_mat.append([len(gauss_data), stat, sl, cv, msg])\n\ntrace = go.Table(\n    header=dict(values=['<b>Sample Size</b>', '<b>Statistic</b>', '<b>Significance Level</b>', '<b>Critical Value</b>', '<b>Comment</b>'],\n                line = dict(width=0),\n                fill = dict(color='rgba(42,63,95,0.8)'),\n                align = 'center',\n                font = dict(\n                    color = '#ffffff',\n                    size = 12\n                )),\n    cells=dict(values=np.array(result_mat).T,\n               line = dict(width=0),\n               fill = dict(color=[['#EBF0F8', '#ffffff', '#EBF0F8', '#ffffff', '#EBF0F8']]),\n               align = 'center',\n               height = 40),\n    columnwidth=[0.3, 0.25, 0.3, 0.25, 0.5])\nlayout = dict(\n    height=300,\n    margin=dict(\n        l=5,\n        r=5,\n        t=30,\n        b=0\n    )\n)\ndata = [trace]\nandar_table = dict(data=data, layout=layout)\n\npy.iplot(andar_table, filename='anderson-darling-table')\n```\n\n----------------------------------------\n\nTITLE: Plotting Animated Bubble Chart with Plotly in Python\nDESCRIPTION: This snippet creates the animation using the previously defined figure and frames. It uses Plotly's icreate_animations function to generate the final animated visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npy.icreate_animations(figure, 'gapminder_example'+str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Numpy Random Heatmap with Legacy Figure Factory\nDESCRIPTION: Creates an annotated heatmap using random data from numpy, with rounded text annotations and custom hover information.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\nnp.random.seed(1)\n\nz = np.random.randn(20, 20)\nz_text = np.around(z, decimals=2)\n\nfig = ff.create_annotated_heatmap(z, annotation_text=z_text, colorscale='Greys',\n                                  hoverinfo='z')\n\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 8\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Callbacks for Data Display in Plotly Python\nDESCRIPTION: This snippet sets up hover callbacks to display detailed information and images for each data point when hovering over the scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import HTML, Image, Layout\n\ndetails = HTML()\nimage_widget = Image(\n    value=image_data['2012_Chevrolet_Camaro_Coupe'],\n    layout=Layout(height='252px', width='400px')\n)\n\ndef hover_fn(trace, points, state):\n    ind = points.point_inds[0]\n    details.value = cars_df.iloc[ind].to_frame().to_html()\n    model_year = cars_df['Model Year'][ind].replace(' ', '_')\n    image_widget.value = image_data[model_year]\n\nscatter.on_hover(hover_fn)\n```\n\n----------------------------------------\n\nTITLE: Overriding PNG Renderer Parameters\nDESCRIPTION: Shows how to temporarily override renderer parameters by passing them as keyword arguments to the show() method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Bar(y=[2, 1, 3])],\n    layout_title_text=\"A Figure Displayed with the 'png' Renderer\"\n)\nfig.show(renderer=\"png\", width=800, height=300)\n```\n\n----------------------------------------\n\nTITLE: Styling Physical Map Features\nDESCRIPTION: This code snippet demonstrates how to style physical features of a Geo Map such as coastlines, land, oceans, lakes, and rivers. It sets the resolution to a larger scale (1:50m) and customizes the colors of each feature using the `update_geos` method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(\n    resolution=50,\n    showcoastlines=True, coastlinecolor=\"RebeccaPurple\",\n    showland=True, landcolor=\"LightGreen\",\n    showocean=True, oceancolor=\"LightBlue\",\n    showlakes=True, lakecolor=\"Blue\",\n    showrivers=True, rivercolor=\"Blue\"\n)\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: SOQL Query Execution\nDESCRIPTION: Executes a SOQL query to retrieve lead information from Salesforce.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/salesforce.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nleads_for_status = sf.query(\"SELECT Id, Status, Owner.Name FROM Lead\")\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Histograms with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create stacked histograms using Plotly's graph_objects module. It generates random data and plots two histograms on top of each other.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx0 = np.random.randn(2000)\nx1 = np.random.randn(2000) + 1\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=x0))\nfig.add_trace(go.Histogram(x=x1))\n\n# The two histograms are drawn on top of another\nfig.update_layout(barmode='stack')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Inset Graph with Plotly\nDESCRIPTION: Creates a figure with two scatter plots where one plot is inset within the main plot using custom axis domains. The main plot uses the default axes while the inset plot uses secondary axes with specified domains.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/insets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 3, 2]\n)\ntrace2 = go.Scatter(\n    x=[20, 30, 40],\n    y=[30, 40, 50],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2'\n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='simple-inset')\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to use Plotly Express to create a scatter plot with multiple visual dimensions like color and symbol. It sets legend attributes using `showlegend` and `legendgroup`. The snippet uses a DataFrame and demands familiarity with Plotly Express's API.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"sex\", symbol=\"smoker\", facet_col=\"time\",\n          labels={\"sex\": \"Gender\", \"smoker\": \"Smokes\"})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating OHLC Chart without Rangeslider in Python using Plotly\nDESCRIPTION: This example shows how to create an OHLC chart without a rangeslider. It uses the same data as the previous example but disables the rangeslider in the layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ohlc-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(data=go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close']))\nfig.update(layout_xaxis_rangeslider_visible=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Table from Pandas DataFrame with Plotly, Python\nDESCRIPTION: This code demonstrates how to create a Plotly table directly from a Pandas DataFrame.  It imports both `plotly.figure_factory` and `pandas`, reads a CSV file into a Pandas DataFrame, selects a subset of the DataFrame, and then uses `ff.create_table` to generate the table.  The `fig.show()` method displays the table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')\ndf_sample = df[100:120]\n\nfig =  ff.create_table(df_sample)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Layout Updates with Relayout Dropdown\nDESCRIPTION: Creates a scatter plot with dropdowns to control the visibility of cluster shapes using the relayout method. Demonstrates updating layout attributes like shapes and annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Generate dataset\nimport numpy as np\nnp.random.seed(1)\n\nx0 = np.random.normal(2, 0.4, 400)\ny0 = np.random.normal(2, 0.4, 400)\nx1 = np.random.normal(3, 0.6, 600)\ny1 = np.random.normal(6, 0.4, 400)\nx2 = np.random.normal(4, 0.2, 200)\ny2 = np.random.normal(4, 0.4, 200)\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(\n    go.Scatter(\n        x=x0,\n        y=y0,\n        mode=\"markers\",\n        marker=dict(color=\"DarkOrange\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x1,\n        y=y1,\n        mode=\"markers\",\n        marker=dict(color=\"Crimson\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x2,\n        y=y2,\n        mode=\"markers\",\n        marker=dict(color=\"RebeccaPurple\")\n    )\n)\n\n# Add buttons that add shapes\ncluster0 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x0), y0=min(y0),\n                            x1=max(x0), y1=max(y0),\n                            line=dict(color=\"DarkOrange\"))]\ncluster1 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x1), y0=min(y1),\n                            x1=max(x1), y1=max(y1),\n                            line=dict(color=\"Crimson\"))]\ncluster2 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x2), y0=min(y2),\n                            x1=max(x2), y1=max(y2),\n                            line=dict(color=\"RebeccaPurple\"))]\n\nfig.update_layout(\n    updatemenus=[\n        dict(buttons=list([\n            dict(label=\"None\",\n                 method=\"relayout\",\n                 args=[\"shapes\", []]),\n            dict(label=\"Cluster 0\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0]),\n            dict(label=\"Cluster 1\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster1]),\n            dict(label=\"Cluster 2\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster2]),\n            dict(label=\"All\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0 + cluster1 + cluster2])\n        ]),\n        )\n    ]\n)\n\n# Update remaining layout properties\nfig.update_layout(\n    title_text=\"Highlight Clusters\",\n    showlegend=False,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding traces to a Plotly figure\nDESCRIPTION: This code snippet demonstrates adding multiple traces to a Plotly figure using the `add_trace` method. It creates scatter plots for 'High' and 'Low' data, along with their averages, and customizes their appearance using color and dash styles. The average traces are initially set to be invisible and are meant to be toggled using an update menu.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig.add_trace(\n    go.Scatter(x=list(df.Date),\n               y=list(df.High),\n               name=\"High\",\n               line=dict(color=\"#33CFA5\")))\n\nfig.add_trace(\n    go.Scatter(x=list(df.Date),\n               y=[df.High.mean()] * len(df.index),\n               name=\"High Average\",\n               visible=False,\n               line=dict(color=\"#33CFA5\", dash=\"dash\")))\n\nfig.add_trace(\n    go.Scatter(x=list(df.Date),\n               y=list(df.Low),\n               name=\"Low\",\n               line=dict(color=\"#F06A6A\")))\n\nfig.add_trace(\n    go.Scatter(x=list(df.Date),\n               y=[df.Low.mean()] * len(df.index),\n               name=\"Low Average\",\n               visible=False,\n               line=dict(color=\"#F06A6A\", dash=\"dash\")))\n```\n\n----------------------------------------\n\nTITLE: Custom Color Sequence Line Plot\nDESCRIPTION: Creates a line plot using a custom qualitative color sequence from the G10 palette.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder()\nfig = px.line(df, y=\"lifeExp\", x=\"year\", color=\"continent\", line_group=\"country\",\n              line_shape=\"spline\", render_mode=\"svg\",\n             color_discrete_sequence=px.colors.qualitative.G10,\n             title=\"Built-in G10 color sequence\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly figures for continents\nDESCRIPTION: This code snippet iterates through unique continents in a DataFrame and creates a scatter plot for each continent using Plotly Express.  It filters data for each continent and year 2007, creates a scatter plot of GDP per capita vs. life expectancy, customizes axis ranges, and stores the figure in a dictionary with the continent name as the key.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom jinja2 import Template\nimport collections\n# Load the gapminder dataset\ndf = px.data.gapminder()\n\n# Create a dictionary with Plotly figures as values\nfig_dict = {}\n\n# we need to fill that dictionary with figures.  this example assumes that each figure has a title and that\n# we want to use the titles as descriptions in the drop down\n# This example happens to fill the dictionary by creating a scatter plot for each continent using the 2007 Gapminder data\nfor continent in df['continent'].unique():\n    # Filter data for the current continent \n    continent_data = df[(df['continent'] == continent) & (df['year'] == 2007)]\n    \n    fig_dict[continent] = px.scatter(continent_data, x='gdpPercap', y='lifeExp', \n                     title=f'GDP vs Life Expectancy for {continent}',\n                     labels={'gdpPercap': 'GDP per Capita (USD)', 'lifeExp': 'Life Expectancy (Years)'},\n                     hover_name='country',size=\"pop\", size_max=55 \n                     )\n    #Standardizing the axes makes the graphs easier to compare\n    fig_dict[continent].update_xaxes(range=[0,50000])\n    fig_dict[continent].update_yaxes(range=[25,90])\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Milk Production Data\nDESCRIPTION: Imports milk production time series data from a CSV file and creates a table visualization using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\ntime_series = np.asarray(time_series)\n\ndf = milk_data[0:15]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='milk-production-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Slider Controls\nDESCRIPTION: Creates a slider control for the animation with customized appearance and behavior settings. The slider allows users to manually select different years in the animation sequence.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n```\n\n----------------------------------------\n\nTITLE: Polynomial Curve Fitting and Visualization\nDESCRIPTION: Creates a polynomial fit for a set of points and visualizes both the original points and the fitted curve using Plotly. Uses numpy's polyfit for curve fitting and generates points for smooth visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interpolation-and-extrapolation-in-1d.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npoints = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])\n\nx = points[:,0]\ny = points[:,1]\n\nz = np.polyfit(x, y, 3)\nf = np.poly1d(z)\n\nx_new = np.linspace(0, 10, 50)\ny_new = f(x_new)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Data',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=x_new,\n    y=y_new,\n    mode='lines',\n    name='Fit'\n)\n\nannotation = go.Annotation(\n    x=6,\n    y=-4.5,\n    text='$0.43X^3 - 0.56X^2 + 16.78X + 10.61$',\n    showarrow=False\n)\n\nlayout = go.Layout(\n    title='Polynomial Fit in Python',\n    annotations=[annotation]\n)\n\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='interpolation-and-extrapolation')\n```\n\n----------------------------------------\n\nTITLE: Modifying Number of Plotly Isosurfaces in Python\nDESCRIPTION: This snippet configures the number of isosurfaces rendered in a Plotly graph by adjusting the surface count. It showcases the use of customized parameters for better visualization. It requires numpy for data setup and Plotly for plot generation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-isosurface-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nX, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]\n\n# ellipsoid\nvalues = X * X * 0.5 + Y * Y + Z * Z * 2\n\nfig = go.Figure(data=go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=10,\n    isomax=50,\n    surface_count=5, # number of isosurfaces, 2 by default: only min and max\n    colorbar_nticks=5, # colorbar ticks correspond to isosurface values\n    caps=dict(x_show=False, y_show=False)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Bubble Scatter Plot\nDESCRIPTION: Creates a bubble chart where marker sizes and colors vary to represent additional dimensions of data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    mode='markers',\n    marker=dict(size=[40, 60, 80, 100],\n                color=[0, 1, 2, 3])\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Two Matrices with NumPy and Plotly Visualization\nDESCRIPTION: Demonstrates matrix addition using NumPy matrix objects and visualizes the result using Plotly's annotated heatmap.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmatrix1 = np.matrix(\n    [[0, 4],\n     [2, 0]]\n)\n\nmatrix2 = np.matrix(\n    [[-1, 2],\n     [1, -2]]\n)\n\nmatrix_sum = matrix1 + matrix2\n\ncolorscale = [[0, '#EAEFC4'], [1, '#9BDF46']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(matrix_sum.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='matrix-sum')\n```\n\n----------------------------------------\n\nTITLE: Updating Layout of Plotly Figure\nDESCRIPTION: This snippet configures the layout of the Plotly figure, setting titles for the axes, adjusting their constraints, and defining the figure's size for optimal visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfig.update_layout(\n    xaxis=dict(\n        title=dict(\n            text='Recall'\n        ),\n        constrain='domain'\n    ),\n    yaxis=dict(\n        title=dict(\n            text='Precision'\n        ),\n        scaleanchor='x',\n        scaleratio=1\n    ),\n    width=700, height=500\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Title Text in Plotly FigureWidget (Python)\nDESCRIPTION: This snippet updates the text of the title in the FigureWidget's layout. It directly accesses the `text` attribute of the `title` object within the `layout` and assigns a new string.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nf.layout.title.text = 'This is a new title'\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend Item Names in Plotly Graph Objects\nDESCRIPTION: This snippet shows how to set legend item names for traces using the 'name' attribute when creating figures with Plotly Graph Objects. It creates two scatter plots with custom names.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n    name=\"Positive\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n    name=\"Negative\"\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Installing development requirements (Non-Windows)\nDESCRIPTION: Command to install the development requirements for plotly.py on non-Windows systems using pip.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(plotly_dev) $ pip install -r requires-optional.txt\n```\n\n----------------------------------------\n\nTITLE: Applying Text Shadow Effects in Plotly Bar Charts\nDESCRIPTION: This example demonstrates how to apply shadow effects to text using the textfont.shadow property. It shows how to add a pink shadow to text in a horizontal bar chart displaying countries with highest life expectancy per continent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder()\n\ngrouped = df[df.year == 1997].loc[df[df.year == 1997].groupby('continent')['lifeExp'].idxmax()]\n\nfig = go.Figure(\n    data=go.Bar(\n        x=grouped['lifeExp'],\n        y=grouped['continent'],\n        text=grouped['country'],\n        orientation='h',\n        textfont=dict(\n            shadow=\"1px 1px 2px pink\"\n        )\n    ),\n    layout=go.Layout(\n        title_text='Country with Highest Life Expectancy per Continent, 1997',\n        yaxis=dict(showticklabels=False)\n    )\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Range for Log Plot with Plotly Express\nDESCRIPTION: Demonstrates how to set axis ranges on a logarithmic plot using Plotly Express, with x-axis in log scale from 1 to 100000 and y-axis from 0 to 100.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/log-plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\n\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", hover_name=\"country\",\n                 log_x=True, range_x=[1,100000], range_y=[0,100])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Axes Titles in 3D Plots\nDESCRIPTION: Shows how to set custom titles for x, y, and z axes in a 3D plot with multiple mesh objects. Demonstrates title text configuration within the scene dictionary.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-axes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Define random surface\nN = 50\nfig = go.Figure()\nfig.add_trace(go.Mesh3d(x=(60*np.random.randn(N)),\n                   y=(25*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='yellow'\n                  ))\nfig.add_trace(go.Mesh3d(x=(70*np.random.randn(N)),\n                   y=(55*np.random.randn(N)),\n                   z=(30*np.random.randn(N)),\n                   opacity=0.5,\n                   color='pink'\n                  ))\n\nfig.update_layout(scene = dict(\n                      xaxis=dict(\n                          title=dict(\n                              text='X AXIS TITLE'\n                          )\n                      ),\n                      yaxis=dict(\n                          title=dict(\n                              text='Y AXIS TITLE'\n                          )\n                      ),\n                      zaxis=dict(\n                          title=dict(\n                              text='Z AXIS TITLE'\n                          )\n                      ),\n                    ),\n                    width=700,\n                    margin=dict(r=20, b=10, l=10, t=10))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Modebar Buttons in Plotly Python\nDESCRIPTION: This snippet demonstrates how to remove specific buttons from the modebar in a Plotly figure using the modeBarButtonsToRemove configuration option.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]))\n\nfig.show(config={\n    'modeBarButtonsToRemove': ['zoom', 'pan']\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Figure to Image Bytes\nDESCRIPTION: Demonstrates how to convert a Plotly figure to bytes and display the first 20 bytes\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimg_bytes = fig.to_image(format=\"png\")\nimg_bytes[:20]\n```\n\n----------------------------------------\n\nTITLE: Sphinx Class Documentation Template with Jinja2\nDESCRIPTION: A Sphinx documentation template that uses Jinja2 templating to generate API documentation for a Python class. The template includes module references, autosummary directives for methods, and autoclass directives for full class documentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/_templates/class_figure.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:mod:`{{module}}`.{{objname}}\n{{ underline }}==============\n\n\n.. currentmodule:: {{ module }}\n\n.. autosummary::\n   :toctree: generated/\n\n   Figure\n\n   Figure.show\n   Figure.add_traces\n   Figure.update_traces\n   Figure.update_layout\n\n\n.. autoclass:: {{ objname }}\n   {% block methods %}\n   .. automethod:: __init__\n   {% endblock %}\n\n\n.. autoclass:: {{ objname }}\n   :members:\n   :inherited-members:\n\n.. raw:: html\n\n    <div class=\"clearer\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Donut Chart with Hole Parameter in Python\nDESCRIPTION: Shows how to create a donut chart by using the hole parameter in go.Pie. The hole parameter accepts a value between 0 and 1 representing the fraction of the radius to cut out from the center.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Widgets for Flight Data Filtering\nDESCRIPTION: Defines interactive widgets for filtering flight data by month, airline, and origin airport using ipywidgets with specific configurations\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget-app.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmonth = widgets.IntSlider(\n    value=1.0,\n    min=1.0,\n    max=12.0,\n    step=1.0,\n    description='Month:',\n    continuous_update=False\n)\n\nuse_date = widgets.Checkbox(\n    description='Date: ',\n    value=True,\n)\n\ncontainer = widgets.HBox(children=[use_date, month])\n\ntextbox = widgets.Dropdown(\n    description='Airline:   ',\n    value='DL',\n    options=df['carrier'].unique().tolist()\n)\n\norigin = widgets.Dropdown(\n    options=list(df['origin'].unique()),\n    value='LGA',\n    description='Origin Airport:',\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Color Mapping Function for Tri-Surface Plotting\nDESCRIPTION: This function maps normalized z-values to colors in a given colormap, converting matplotlib colors to Plotly RGB format. It's used to color the triangles on the surface based on their z-coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef map_z2color(zval, colormap, vmin, vmax):\n    #map the normalized value zval to a corresponding color in the colormap\n\n    if vmin>vmax:\n        raise ValueError('incorrect relation between vmin and vmax')\n    t=(zval-vmin)/float((vmax-vmin))#normalize val\n    R, G, B, alpha=colormap(t)\n    return 'rgb('+'{:d}'.format(int(R*255+0.5))+','+'{:d}'.format(int(G*255+0.5))+\\\n           ','+'{:d}'.format(int(B*255+0.5))+')'\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Area with Scattermapbox Trace in Python\nDESCRIPTION: Demonstrates creating a filled map area using the Scattermapbox trace, which may require a Mapbox access token\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-tile-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n    fill = \"toself\",\n    lon = [-74, -70, -70, -74], lat = [47, 47, 45, 45],\n    marker = { 'size': 10, 'color': \"orange\" }))\n\nfig.update_layout(\n    mapbox = {\n        'style': \"open-street-map\",\n        'center': {'lon': -73, 'lat': 46 },\n        'zoom': 5},\n    showlegend = False)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Rating Data to Linear-Gauge Chart in Python with Plotly\nDESCRIPTION: This code shows how to add data points to the linear-gauge chart. Ratings should be scaled between 0-6 to align with the y-values of the scales created in the previous snippet. The data is represented as circular markers positioned at the appropriate value on each scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-gauge-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nratings = [4.5, 5, 1, 2.75]\n\nfor i in range(len(ratings)):\n    traces.append(go.Scatter(\n            x=[0.5], y=[ratings[i]],\n            xaxis='x'+str(i+1), yaxis='y'+str(i+1),\n            mode='markers', marker={'size': 16, 'color': '#29ABD6'},\n            text=ratings[i], hoverinfo='text', showlegend=False\n    ))\n\nfig = dict(data=traces, layout=layout)\npy.iplot(fig, filename='linear-gauge')\n```\n\n----------------------------------------\n\nTITLE: Adding Color Threshold to Dendrogram\nDESCRIPTION: The create_dendrogram function now includes a color_threshold argument which allows users to customize clustering cutoffs visually in the dendrogram representation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ncreate_dendrogram(data, color_threshold=value) // Where 'value' defines the cutoff.\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Wind Speed Data\nDESCRIPTION: This code imports wind speed data from a CSV file, creates a sample dataframe, and displays it as a table using Plotly's figure factory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/fft-filters.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\ndf = data[0:10]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='wind-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiver Plot with Additional Points using Plotly in Python\nDESCRIPTION: This example shows how to create a more complex quiver plot with additional scatter points. It uses a gradient function to calculate velocity vectors and adds two marker points to the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/quiver-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\n\nimport numpy as np\n\nx,y = np.meshgrid(np.arange(-2, 2, .2),\n                  np.arange(-2, 2, .25))\nz = x*np.exp(-x**2 - y**2)\nv, u = np.gradient(z, .2, .2)\n\n# Create quiver figure\nfig = ff.create_quiver(x, y, u, v,\n                       scale=.25,\n                       arrow_scale=.4,\n                       name='quiver',\n                       line_width=1)\n\n# Add points to figure\nfig.add_trace(go.Scatter(x=[-.7, .75], y=[0,0],\n                    mode='markers',\n                    marker_size=12,\n                    name='points'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Trisurf Plot with Magma Colorscale in Plotly\nDESCRIPTION: This code generates a parametric mobius strip as a triangulated surface (trisurf) plot using the Magma colorscale. It uses Scipy's Delaunay triangulation to create the surface mesh and Plotly's FigureFactory to visualize it.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.tools import FigureFactory as FF\nimport plotly.graph_objs as go\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(0, 2*np.pi, 24)\nv = np.linspace(-1, 1, 8)\nu,v = np.meshgrid(u, v)\nu = u.flatten()\nv = v.flatten()\n\ntp = 1 + 0.5*v*np.cos(u/2.)\nx = tp*np.cos(u)\ny = tp*np.sin(u)\nz = 0.5*v*np.sin(u/2.)\n\npoints2D = np.vstack([u, v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\ntrace1 = FF.create_trisurf(x=x, y=y, z=z,\n                           simplices=simplices, colormap=magma_rgb, plot_edges=False,\n                           title='Magma Colorscale for Trisurf Plot')\npy.iplot(trace1)\n```\n\n----------------------------------------\n\nTITLE: Faceted Bar Plot Example\nDESCRIPTION: Demonstrates creating faceted bar plots using the variable parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\n\nfig = df.plot.bar(facet_row=\"variable\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customized Ternary Contour Plot\nDESCRIPTION: This snippet demonstrates how to customize the appearance of a ternary contour plot.  It allows modifying various parameters such as the number of contours, colorscale, and title. This involves setting the `ncontours`, `colorscale`, `showscale` and `title` parameters within the `create_ternary_contour` function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-contour.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\nAl = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])\nCu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])\nY = 1 - Al - Cu\n# synthetic data for mixing enthalpy\n# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html\nenthalpy = 2.e6 * (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2 - 5000\nfig = ff.create_ternary_contour(np.array([Al, Y, Cu]), enthalpy,\n                                pole_labels=['Al', 'Y', 'Cu'],\n                                interp_mode='cartesian',\n                                ncontours=20,\n                                colorscale='Viridis',\n                                showscale=True,\n                                title=dict(\n                                  text='Mixing enthalpy of ternary alloy'\n                                ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Examining GeoJSON Properties\nDESCRIPTION: Demonstrates accessing and printing GeoJSON properties for election data visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\ngeojson = px.data.election_geojson()\n\nprint(df[\"district\"][2])\nprint(geojson[\"features\"][0][\"properties\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Size with Graph Objects\nDESCRIPTION: Shows how to control graph dimensions and margins using the lower-level Graph Objects API. Creates a basic scatter plot with custom size, margins, and background color settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/setting-graph-size.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n))\n\nfig.update_layout(\n    autosize=False,\n    width=500,\n    height=500,\n    margin=dict(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Converting Numeric to Categorical Colors\nDESCRIPTION: Shows how to convert numeric values to strings to force discrete color mapping.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\ndf[\"size\"] = df[\"size\"].astype(str)\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"size\",\n                 title=\"String 'size' values mean discrete colors\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Parametric Plot with Plotly in Python\nDESCRIPTION: This code creates a basic 3D parametric surface plot using numpy for calculations and Plotly for visualization. It defines parametric equations where the radius varies with sine functions of the parameters, then maps these to Cartesian coordinates to create a 3D surface.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-parametric-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ns = np.linspace(0, 2 * np.pi, 240)\nt = np.linspace(0, np.pi, 240)\ntGrid, sGrid = np.meshgrid(s, t)\n\nr = 2 + np.sin(7 * sGrid + 5 * tGrid)  # r = 2 + sin(7s+5t)\nx = r * np.cos(sGrid) * np.sin(tGrid)  # x = r*cos(s)*sin(t)\ny = r * np.sin(sGrid) * np.sin(tGrid)  # y = r*sin(s)*sin(t)\nz = r * np.cos(tGrid)                  # z = r*cos(t)\n\nsurface = go.Surface(x=x, y=y, z=z)\ndata = [surface]\n\nlayout = go.Layout(\n    title='Parametric Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Parametric_plot')\n```\n\n----------------------------------------\n\nTITLE: Hiding Weekends and Holidays in Time Series Plots with Plotly\nDESCRIPTION: This snippet demonstrates how to hide weekends and holidays in time series plots using the rangebreaks attribute in Plotly. It shows two plots: one with gaps and one with weekends and holidays hidden.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = px.scatter(df, x='Date', y='AAPL.High', range_x=['2015-12-01', '2016-01-15'],\n                 title=\"Default Display with Gaps\")\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = px.scatter(df, x='Date', y='AAPL.High', range_x=['2015-12-01', '2016-01-15'],\n                 title=\"Hide Weekend and Holiday Gaps with rangebreaks\")\nfig.update_xaxes(\n    rangebreaks=[\n        dict(bounds=[\"sat\", \"mon\"]), #hide weekends\n        dict(values=[\"2015-12-25\", \"2016-01-01\"])  # hide Christmas and New Year's\n    ]\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Extracting Vertex Coordinates and Face Data from PLY File in Python\nDESCRIPTION: This snippet extracts the vertex coordinates and face data from the PLY file. It creates arrays for x, y, z coordinates and a list of faces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npoints=np.array([plydata['vertex'][k] for k in range(nr_points)])\npoints[0]\n\nx,y,z=zip(*points)\n\nfaces=[plydata['face'][k][0] for k in range(nr_faces)]\nfaces[0]\n```\n\n----------------------------------------\n\nTITLE: Creating a Trisurf Plot with Viridis Colorscale in Plotly\nDESCRIPTION: This code generates the same parametric mobius strip as a triangulated surface plot, but uses the Viridis colorscale instead. The geometry and triangulation remain the same as the previous example but with a different color mapping.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntrace2 = FF.create_trisurf(x=x, y=y, z=z,\n                           simplices=simplices, colormap=viridis_rgb, plot_edges=False,\n                           title='Viridis Colorscale for Trisurf Plot')\npy.iplot(trace2)\n```\n\n----------------------------------------\n\nTITLE: Combining Table and Bar Chart in Plotly, Python\nDESCRIPTION: This code combines a Plotly table with a bar chart. It initializes a table using `ff.create_table` and then adds two bar traces using `go.Bar`. The layout is customized to position the table and bar charts vertically, specifying the domains of the y-axes and assigning x-axes accordingly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# Add table data\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montréal<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0],\n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n# Initialize a fig with ff.create_table(table_data)\nfig = ff.create_table(table_data, height_constant=60)\n\n# Add graph data\nteams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]\n\nfig.add_trace(go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#0099ff'),\n                name='Goals For<br>Per Game'))\n\nfig.add_trace(go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#404040'),\n                name='Goals Against<br>Per Game'))\n\nfig.update_layout(\n    title_text = '2016 Hockey Stats',\n    height = 800,\n    margin = {'t':75, 'l':50},\n    yaxis = {'domain': [0, .45]},\n    xaxis2 = {'anchor': 'y2'},\n    yaxis2 = {'domain': [.6, 1], 'anchor': 'x2', 'title': 'Goals'}\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Plotly using conda and pip\nDESCRIPTION: These commands are used to uninstall the plotly library using both conda and pip package managers. This is a common troubleshooting step to resolve conflicts arising from multiple installations of the library. Running these commands will remove plotly from the respective package environments.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ conda uninstall plotly\n$ pip uninstall plotly\n```\n\n----------------------------------------\n\nTITLE: Performing One-Way ANOVA Test with Statsmodels in Python\nDESCRIPTION: This code demonstrates how to perform a one-way ANOVA test using Statsmodels. It loads a dataset from the 'car' package, renames a column to make it Python-friendly, creates a linear model using OLS, and performs a Type 2 ANOVA on the model.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/anova.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmoore = sm.datasets.get_rdataset(\"Moore\", \"car\", cache=True)\n\ndata = moore.data\ndata = data.rename(columns={\"partner.status\" :\"partner_status\"})  # make name pythonic\n\nmoore_lm = ols('conformity ~ C(fcategory, Sum)*C(partner_status, Sum)', data=data).fit()\ntable = sm.stats.anova_lm(moore_lm, typ=2) # Type 2 ANOVA DataFrame\n\nprint(table)\n```\n\n----------------------------------------\n\nTITLE: Setting Label Angles for Shapes in Plotly\nDESCRIPTION: This code demonstrates how to rotate text labels on shapes by setting the 'textangle' attribute. It creates two rectangles with labels rotated at 45 and -45 degrees respectively.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor='LightGreen',\n    x0=0,\n    y0=0,\n    x1=2,\n    y1=2,\n    label=dict(text=\"Text at 45\", textangle=45),\n)\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor='Gold',\n    x0=3,\n    y0=0,\n    x1=5,\n    y1=2,\n    label=dict(text=\"Text at -45\", textangle=-45),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Orca Server Settings in Plotly\nDESCRIPTION: Configure Plotly's Orca server with various options including server URL, port, timeout, and export settings. Allows customization of image export parameters and resource locations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nplotly.io.orca.config\n```\n\n----------------------------------------\n\nTITLE: Setting Hovermode to Closest in Plotly\nDESCRIPTION: This snippet demonstrates how to set the hovermode to 'closest', which is the default setting in Plotly. It creates a line plot using Plotly Express and sets the hovermode in the layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\n\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\", title=\"layout.hovermode='closest' (the default)\")\nfig.update_traces(mode=\"markers+lines\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Legend Titles in Plotly Graph Objects\nDESCRIPTION: This snippet shows how to add a title to the legend using the 'legend_title_text' parameter in the layout. It creates two scatter plots with a custom legend title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n    name=\"Increasing\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n    name=\"Decreasing\"\n))\n\nfig.update_layout(legend_title_text='Trend')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Correlation Between Saw and Square Wave with Plotly\nDESCRIPTION: This snippet calculates and visualizes the correlation (convolution) between a saw wave and a square wave using NumPy, SciPy's signal processing tools, and Plotly for plotting. It defines the x-axis, generates the saw and square waves, calculates the convolution, and then creates Plotly scatter plots to display the results.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/1d-correlation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 20, 50)\nsaw_y = signal.sawtooth(t=x)\nsquare_y = signal.square(t=x)\nconvolve_y = signal.convolve(saw_y, square_y)\n\ntrace_saw = go.Scatter(\n    x = x,\n    y = saw_y,\n    mode = 'lines',\n    name = 'Saw',\n    marker=dict(\n        color='#57D1C9'\n    )\n)\n\ntrace_square = go.Scatter(\n    x = x,\n    y = square_y,\n    mode = 'lines',\n    name = 'Square',\n    marker=dict(\n        color='#ED5485'\n    )\n)\n\ntrace_convolution = go.Scatter(\n    x = x,\n    y = convolve_y,\n    mode = 'lines',\n    name = 'Convolution',\n    marker=dict(\n        color='#FFE869'\n    )\n)\n\ndata = [trace_saw, trace_square, trace_convolution]\npy.iplot(data, filename='1d-convolution-of-saw-and-square')\n```\n\n----------------------------------------\n\nTITLE: Adding Vertical and Horizontal Lines to Plot\nDESCRIPTION: Creates a plot with various line types (vertical, horizontal dashed, diagonal dotted) positioned relative to axis data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Create scatter trace of text labels\nfig.add_trace(go.Scatter(\n    x=[2, 3.5, 6],\n    y=[1, 1.5, 1],\n    text=[\"Vertical Line\",\n          \"Horizontal Dashed Line\",\n          \"Diagonal dotted Line\"],\n    mode=\"text\",\n))\n\n# Set axes ranges\nfig.update_xaxes(range=[0, 7])\nfig.update_yaxes(range=[0, 2.5])\n\n# Add shapes\nfig.add_shape(type=\"line\",\n    x0=1, y0=0, x1=1, y1=2,\n    line=dict(color=\"RoyalBlue\",width=3)\n)\nfig.add_shape(type=\"line\",\n    x0=2, y0=2, x1=5, y1=2,\n    line=dict(\n        color=\"LightSeaGreen\",\n        width=4,\n        dash=\"dashdot\",\n    )\n)\nfig.add_shape(type=\"line\",\n    x0=4, y0=0, x1=6, y1=2,\n    line=dict(\n        color=\"MediumPurple\",\n        width=4,\n        dash=\"dot\",\n    )\n)\nfig.update_shapes(dict(xref='x', yref='y'))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Marker in Plotly Python\nDESCRIPTION: This snippet illustrates how to set a custom marker symbol in a Plotly scatter plot, specifically using the 'diamond' symbol. It demonstrates modifying the trace settings for the markers, including their size and line configurations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\n\nfig.update_traces(\n    marker=dict(size=8, symbol=\"diamond\", line=dict(width=2, color=\"DarkSlateGrey\")),\n    selector=dict(mode=\"markers\"),\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Performing One-Sample T-Test in Python using SciPy\nDESCRIPTION: Conduct a one-sample t-test using SciPy and create a table of results using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/t-test.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrue_mu = 0\n\nonesample_results = scipy.stats.ttest_1samp(data1, true_mu)\n\nmatrix_onesample = [\n    ['', 'Test Statistic', 'p-value'],\n    ['Sample Data', onesample_results[0], onesample_results[1]]\n]\n\nonesample_table = FF.create_table(matrix_onesample, index=True)\npy.iplot(onesample_table, filename='onesample-table')\n```\n\n----------------------------------------\n\nTITLE: Setting Download Size to Current Render Size in Plotly Python\nDESCRIPTION: This code shows how to set the download size of a Plotly figure to match its current rendered size by setting height and width to None in the configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nconfig = {\n  'toImageButtonOptions': { 'height': None, 'width': None, }\n}\n\nfig = px.bar(x=[1, 2, 3], y=[1, 3, 1])\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Loading and Cleaning Data for Ternary Plots in Python\nDESCRIPTION: This code snippet demonstrates how to load raw data from JSON files and clean it to make it suitable for visualizing in ternary plots using Plotly. It uses pandas to read JSON data and includes a clean_data function that processes the input dictionary, splitting strings into lists of floats for plotting. Dependencies include pandas and JSON data files available online.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-scatter-contour.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pandas as pd\n\ncontour_raw_data = pd.read_json('https://raw.githubusercontent.com/plotly/datasets/master/contour_data.json')\nscatter_raw_data = pd.read_json('https://raw.githubusercontent.com/plotly/datasets/master/scatter_data.json')\n\nscatter_data =  scatter_raw_data['Data']\n\ndef clean_data(data_in):\n    \"\"\"\n    Cleans data in a format which can be conveniently\n    used for drawing traces. Takes a dictionary as the\n    input, and returns a list in the following format:\n\n    input = {'key': ['a b c']}\n    output = [key, [a, b, c]]\n    \"\"\"\n    key = list(data_in.keys())[0]\n    data_out = [key]\n    for i in data_in[key]:\n        data_out.append(list(map(float, i.split(' '))))\n\n    return data_out\n\n\n#Example:\nprint(clean_data({'L1': ['.03 0.5 0.47','0.4 0.5 0.1']}))\n\n```\n\n----------------------------------------\n\nTITLE: Filtering and Plotting Noise Complaints by Hour\nDESCRIPTION: This snippet filters the data for various types of noise complaints, aggregates them by hour, and creates a bar plot using Plotly. It demonstrates how to use WHERE clauses with multiple conditions in SQL.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                               'strftime(\\'%H\\', CreatedDate) as `hour`,  '\n                               'count(*) as `Complaints per Hour`'\n                       'FROM data '\n                       'WHERE ComplaintType IN (\"Noise\", '\n                                               '\"Noise - Street/Sidewalk\", '\n                                               '\"Noise - Commercial\", '\n                                               '\"Noise - Vehicle\", '\n                                               '\"Noise - Park\", '\n                                               '\"Noise - House of Worship\", '\n                                               '\"Noise - Helicopter\", '\n                                               '\"Collection Truck Noise\") '\n                       'GROUP BY hour', disk_engine)\n\npy.iplot({\n    'data': [go.Bar(x=df['hour'], y=df['Complaints per Hour'])],\n    'layout': go.Layout(xaxis={'title': 'Hour in Day'},\n                     yaxis={'title': 'Number of Complaints'},\n                     title='Number of Noise Complaints in NYC by Hour in Day'\n                    )}, filename='311/noise complaints per hour')\n```\n\n----------------------------------------\n\nTITLE: Modifying Hovertemplate in Plotly Express Figure\nDESCRIPTION: Demonstrates how to modify the automatically generated hovertemplate in a Plotly Express figure. The example prints the default template, updates it with custom GDP and Life Expectancy labels, and shows how to revert to default hover for a specific continent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf_2007 = px.data.gapminder().query(\"year==2007\")\n\nfig = px.scatter(df_2007, x=\"gdpPercap\", y=\"lifeExp\", log_x=True, color='continent'\n                )\nprint(\"plotly express hovertemplate:\", fig.data[0].hovertemplate)\nfig.update_traces(hovertemplate='GDP: %{x} <br>Life Expectancy: %{y}') #\nfig.update_traces(hovertemplate=None, selector={'name':'Europe'}) # revert to default hover\nprint(\"user_defined hovertemplate:\", fig.data[0].hovertemplate)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Tickformat Attribute for Date/Time - Plotly Python\nDESCRIPTION: This snippet illustrates the use of the 'tickformat' attribute to customize the date/time formatting on the x-axis. It loads data from a CSV file for plotting a time series with custom date formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(go.Scatter(\n    x = df['Date'],\n    y = df['AAPL.High'],\n))\n\nfig.update_layout(\n    title = 'Time Series with Custom Date-Time Format',\n    xaxis_tickformat = '%d %B (%a)<br>%Y'\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Plotly Layout for Chord Diagram in Python\nDESCRIPTION: This function creates the Plotly layout for the chord diagram. It sets up the axes, dimensions, and other plot properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef make_layout(title, plot_size):\n    axis=dict(showline=False, # hide axis line, grid, ticklabels and  title\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title=''\n          )\n\n    return go.Layout(title=title,\n                  xaxis=dict(axis),\n                  yaxis=dict(axis),\n                  showlegend=False,\n                  width=plot_size,\n                  height=plot_size,\n                  margin=dict(t=25, b=25, l=25, r=25),\n                  hovermode='closest',\n                  shapes=[]# to this list one appends below the dicts defining the ribbon,\n                           #respectively the ideogram shapes\n                 )\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Font in Templates\nDESCRIPTION: Demonstrates how to customize text font properties including family, size, and color in a ternary scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scatterternary(\n    a = [3, 2, 5],\n    b = [2, 5, 2],\n    c = [5, 2, 2],\n    mode = \"markers+text\",\n    text = [\"A\", \"B\", \"C\"],\n    texttemplate = \"%{text}<br>(%{a:.2f}, %{b:.2f}, %{c:.2f})\",\n    textposition = \"bottom center\",\n    textfont = {'family': \"Times\", 'size': [18, 21, 20], 'color': [\"IndianRed\", \"MediumPurple\", \"DarkOrange\"]}\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Rotated Bar Chart Labels with Plotly Graph Objects in Python\nDESCRIPTION: This snippet demonstrates how to rotate x-axis labels in a plotly.graph_objects bar chart using the xaxis_tickangle property, which can help manage labels' readability especially when they are lengthy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=months,\n    y=[20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],\n    name='Primary Product',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=months,\n    y=[19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],\n    name='Secondary Product',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Executing COPY Statements for Data Loading in Redshift\nDESCRIPTION: Python code that iterates through a list of COPY statements and executes each one to load data into the Redshift tables. It then commits the transaction to make the changes permanent.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor copy_statement in copy_statements: # execute each COPY statement\n    cur.execute(copy_statement)\nconn.commit()\n```\n\n----------------------------------------\n\nTITLE: Converting Matplotlib Figures to Plotly in Python (Offline)\nDESCRIPTION: Examples of how to convert and plot Matplotlib figures as Plotly figures in offline mode, both independently and inside IPython/Jupyter notebooks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, plot_mpl\nimport matplotlib.pyplot as plt\n\ninit_notebook_mode()\n\nfig = plt.figure()\nx = [10, 15, 20]\ny = [100, 150, 200]\nplt.plot(x, y, \"o\")\n\nplot_mpl(fig)\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot_mpl\nimport matplotlib.pyplot as plt\n\ninit_notebook_mode()\n\nfig = plt.figure()\nx = [10, 15, 20]\ny = [100, 150, 200]\nplt.plot(x, y, \"o\")\n\niplot_mpl(fig)\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, enable_mpl_offline\nimport matplotlib.pyplot as plt\n\ninit_notebook_mode()\nenable_mpl_offline()\n\nfig = plt.figure()\nx = [10, 15, 20, 25, 30]\ny = [100, 250, 200, 150, 300]\nplt.plot(x, y, \"o\")\nfig\n```\n\n----------------------------------------\n\nTITLE: Printing a Plotly Figure - Python\nDESCRIPTION: This code snippet prints the figure object to the console to reveal the JSON structure passed to Plotly.js.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Bar Charts with Custom Layout\nDESCRIPTION: Demonstrates how to create a styled bar chart with custom colors, fonts, and layout properties including title, axis labels, and legend positioning.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bar-charts.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nyears = [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n         2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=years,\n                y=[219, 146, 112, 127, 124, 180, 236, 207, 236, 263,\n                   350, 430, 474, 526, 488, 537, 500, 439],\n                name='Rest of world',\n                marker_color='rgb(55, 83, 109)'\n                ))\nfig.add_trace(go.Bar(x=years,\n                y=[16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270,\n                   299, 340, 403, 549, 499],\n                name='China',\n                marker_color='rgb(26, 118, 255)'\n                ))\n\nfig.update_layout(\n    title=dict(text='US Export of Plastic Scrap'),\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title=dict(\n            text=\"USD (millions)\",\n            font=dict(\n                size=16\n            )\n        ),\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15,\n    bargroupgap=0.1\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Numerical Integration\nDESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas, and SciPy for numerical computation and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/numerical-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Basic Symmetric Error Bars with Graph Objects\nDESCRIPTION: Demonstrates creating a scatter plot with basic symmetric error bars using Plotly Graph Objects, specifying error values directly in data coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=dict(\n            type='data', # value of error bar given in data coordinates\n            array=[1, 2, 3],\n            visible=True)\n    ))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly FigureWidget for Flight Delay Visualization\nDESCRIPTION: Creates a Plotly FigureWidget with two histogram traces to display arrival and departure delays, configuring layout and visual properties\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget-app.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Histogram(x=df['arr_delay'], opacity=0.75, name='Arrival Delays')\ntrace2 = go.Histogram(x=df['dep_delay'], opacity=0.75, name='Departure Delays')\ng = go.FigureWidget(data=[trace1, trace2],\n                    layout=go.Layout(\n                        title=dict(\n                            text='NYC FlightDatabase'\n                        ),\n                        barmode='overlay'\n                    ))\n```\n\n----------------------------------------\n\nTITLE: Customized Scatterplot Matrix with Color Dimension\nDESCRIPTION: Creates a scatterplot matrix with specific dimensions and color coding based on species classification.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_matrix(df,\n    dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\n    color=\"species\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Ternary Contour Plot with Data Points\nDESCRIPTION: This snippet creates a ternary contour plot and displays the data points used to compute the contours. This is enabled by setting the `showmarkers` parameter to `True` in the `create_ternary_contour` function. The markers are best visualized when the coloring is set to 'lines'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-contour.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\nimport numpy as np\nAl, Cu = np.mgrid[0:1:7j, 0:1:7j]\nAl, Cu = Al.ravel(), Cu.ravel()\nmask = Al + Cu <= 1\nAl, Cu = Al[mask], Cu[mask]\nY = 1 - Al - Cu\n\nenthalpy = (Al - 0.5) * (Cu - 0.5) * (Y - 1)**2\nfig = ff.create_ternary_contour(np.array([Al, Y, Cu]), enthalpy,\n                                pole_labels=['Al', 'Y', 'Cu'],\n                                ncontours=20,\n                                coloring='lines',\n                                showmarkers=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Font Size with Uniformtext in Pie Charts\nDESCRIPTION: Shows how to make all text labels have the same size using uniformtext layout parameter. The minsize attribute sets font size, and mode determines what happens when labels don't fit (hide or show with overflow).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent == 'Asia'\")\nfig = px.pie(df, values='pop', names='country')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Interpolation and Extrapolation at Specific Points\nDESCRIPTION: Demonstrates interpolation and extrapolation at specific x-values using polynomial fitting. Visualizes original data points and interpolated/extrapolated points using different marker styles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interpolation-and-extrapolation-in-1d.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npoints = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])\n\n# get x and y vectors\nx = points[:,0]\ny = points[:,1]\n\n# calculate polynomial\nz = np.polyfit(x, y, 3)\nf = np.poly1d(z)\n\n# other x values\nother_x = np.array([1.2, 1.34, 1.57, 1.7, 3.6, 3.8, 3.9, 4.0, 5.4, 6.6, 7.2, 7.3, 7.7, 8, 8.9, 9.1, 9.3])\nother_y = f(other_x)\n\n# calculate new x's and y's\nx_new = np.linspace(0, 10, 50)\ny_new = f(x_new)\n\n# Creating the dataset, and generating the plot\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Data',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=other_x,\n    y=other_y,\n    name='Interpolated/Extrapolated Data',\n    mode='markers',\n    marker=dict(\n        symbol='square-open',\n        size=12\n    )\n)\n\nlayout = go.Layout(\n    title='Interpolation and Extrapolation of Y From X',\n)\n\ndata2 = [trace1, trace2]\nfig2 = go.Figure(data=data2, layout=layout)\n\npy.iplot(fig2, filename='interpolation-and-extrapolation-of-y-from-x')\n```\n\n----------------------------------------\n\nTITLE: Combined Update Method in Financial Chart\nDESCRIPTION: Initial setup for a financial chart that will demonstrate the update method for modifying both data and layout attributes simultaneously. Uses Apple stock price dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# Load dataset\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\ndf.columns = [col.replace(\"AAPL.\", \"\") for col in df.columns]\n\n# Initialize figure\nfig = go.Figure()\n```\n\n----------------------------------------\n\nTITLE: Complete Splom Implementation with Graph Objects\nDESCRIPTION: Creates a detailed scatterplot matrix using Graph Objects with custom dimensions, colors, and layout settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv')\nindex_vals = df['class'].astype('category').cat.codes\n\nfig = go.Figure(data=go.Splom(\n                dimensions=[dict(label='sepal length',\n                                 values=df['sepal length']),\n                            dict(label='sepal width',\n                                 values=df['sepal width']),\n                            dict(label='petal length',\n                                 values=df['petal length']),\n                            dict(label='petal width',\n                                 values=df['petal width'])],\n                text=df['class'],\n                marker=dict(color=index_vals,\n                            showscale=False,\n                            line_color='white', line_width=0.5)\n                ))\n\nfig.update_layout(\n    title=dict(text='Iris Data set'),\n    dragmode='select',\n    width=600,\n    height=600,\n    hovermode='closest',\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Normality Testing in Python\nDESCRIPTION: Imports necessary Python libraries including Plotly for visualization, NumPy for numerical operations, Pandas for data manipulation, and SciPy for statistical functions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Surface Plot from PLY Data using Plotly in Python\nDESCRIPTION: This code creates a 3D surface plot using the extracted vertex and face data. It uses Plotly to generate an interactive visualization with custom layout and camera settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndata3=plotly_trisurf(x,y,z, faces, colormap=cm.RdBu, plot_edges=None)\n\ntitle=\"Trisurf from a PLY file<br>\"+\\\n                \"Data Source:<a href='http://people.sc.fsu.edu/~jburkardt/data/ply/airplane.ply'> [1]</a>\"\n\nnoaxis=dict(showbackground=False,\n            showline=False,\n            zeroline=False,\n            showgrid=False,\n            showticklabels=False,\n            title=''\n          )\n\nfig3 = go.Figure(data=data3, layout=layout)\nfig3['layout'].update(dict(title=title,\n                           width=1000,\n                           height=1000,\n                           scene=dict(xaxis=noaxis,\n                                      yaxis=noaxis,\n                                      zaxis=noaxis,\n                                      aspectratio=dict(x=1, y=1, z=0.4),\n                                      camera=dict(eye=dict(x=1.25, y=1.25, z= 1.25)\n                                     )\n                           )\n                     ))\n\npy.iplot(fig3, filename='Chopper-Ply-cls')\n```\n\n----------------------------------------\n\nTITLE: Creating Expanding Maximum Trendlines\nDESCRIPTION: Demonstrates how to create an expanding maximum trendline by specifying the 'max' function in trendline_options. This shows the highest value seen so far at each position in the data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"expanding\", trendline_options=dict(function=\"max\"),\n                title=\"Expanding Maximum\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Reversing a Built-in Color Scale in Plotly Express\nDESCRIPTION: This snippet demonstrates how to reverse a built-in color scale by appending '_r' to its name. It creates a horizontal bar chart using the reversed Bluered color scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\").sort_values(by=\"lifeExp\")\nfig = px.bar(df, y=\"continent\", x=\"pop\", color=\"lifeExp\", orientation=\"h\",\n             color_continuous_scale='Bluered_r', hover_name=\"country\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Choropleth Map for California Counties\nDESCRIPTION: This snippet demonstrates how to create a choropleth map representing some counties in California using the Plotly figure factory method. It includes data for FIPS codes and corresponding values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nfips = ['06021', '06023', '06027',\n        '06029', '06033', '06059',\n        '06047', '06049', '06051',\n        '06055', '06061']\nvalues = range(len(fips))\n\nfig = ff.create_choropleth(fips=fips, values=values)\nfig.layout.template = None\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Milk Production Time Series Data\nDESCRIPTION: Imports monthly milk production data from a CSV file, converts it to a NumPy array, and creates a table visualization of the first 15 rows using Plotly's figure factory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-detection.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\ntime_series = np.asarray(time_series)\n\ndf = milk_data[0:15]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='milk-production-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Inspecting Subplot Grid in Plotly\nDESCRIPTION: This snippet demonstrates how to create a figure with shared y-axes using make_subplots and then inspect the subplot grid using the print_grid method. It's useful for understanding the new axis object associations in Plotly version 4.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=2, shared_yaxes=True)\nfig.print_grid()\nprint(fig)\n```\n\n----------------------------------------\n\nTITLE: Positioning Legends in Plotly Scatter Plot in Python\nDESCRIPTION: This snippet demonstrates how to position legends in a Plotly scatter plot by adjusting the x and y coordinates and using the xref and yref properties associated with the container. It uses Plotly library and example GDP data. This snippet focuses on layout customization, particularly avoiding legend overlapping using container references.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.gapminder()\n\ndf_germany = df.loc[(df.country.isin([\"Germany\"]))]\ndf_france = df.loc[(df.country.isin([\"France\"]))]\ndf_uk = df.loc[(df.country.isin([\"United Kingdom\"]))]\n\nfig = go.Figure(\n    data=[\n        go.Scatter(x=df_germany.year, y=df_germany.gdpPercap, name=\"Germany\"),\n        go.Scatter(x=df_france.year, y=df_france.gdpPercap, name=\"France\"),\n        go.Scatter(x=df_uk.year, y=df_uk.gdpPercap, name=\"UK\"),\n    ],\n    layout=dict(\n        title=dict(text=\"GDP Per Capita\"),\n        legend={\n            \"x\": 0.9,\n            \"y\": 0.9,\n            \"xref\": \"container\",\n            \"yref\": \"container\",\n            \"bgcolor\": \"Gold\",\n        },\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing a basic Geo Map\nDESCRIPTION: This snippet initializes a basic Geo Map with default settings, creating an empty map with a coastal outline and filled land areas. It uses the `plotly.graph_objects` library to create a scattergeo plot and updates the layout for better presentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Custom SVG Path Selection in Scatter Plot\nDESCRIPTION: Shows how to create a custom-shaped selection using SVG path definitions. The example creates a triangular selection using path coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.add_selection(path=\"M2,6.5L4,7.5L4,6Z\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotly: Pie Chart with Pattern Fills\nDESCRIPTION: This snippet illustrates how to add pattern fills (hatching/texture) to pie chart segments.  The `marker` attribute's `pattern` sub-attribute allows specifying different shapes for each segment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"import plotly.graph_objects as go\n\nlabels = [\\\"Oxygen\\\", \\\"Hydrogen\\\", \\\"Carbon_Dioxide\\\", \\\"Nitrogen\\\"]\nvalues = [4500, 2500, 1053, 500]\ncolors = [\\\"gold\\\", \\\"mediumturquoise\\\", \\\"darkorange\\\", \\\"lightgreen\\\"]\n\nfig = go.Figure(\n    data=[\n        go.Pie(\n            labels=labels,\n            values=values,\n            textfont_size=20,\n            marker=dict(colors=colors, pattern=dict(shape=[\\\".\\\", \\\"x\\\", \\\"+\\\", \\\"-\\\"]))\n        )\n    ]\n)\n\nfig.show()\"\n```\n\n----------------------------------------\n\nTITLE: Lower Half Splom Display\nDESCRIPTION: Creates a scatterplot matrix showing only the lower half by setting showupperhalf to False.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv')\nindex_vals = df['class'].astype('category').cat.codes\n\nfig = go.Figure(data=go.Splom(\n                dimensions=[dict(label='sepal length',\n                                 values=df['sepal length']),\n                            dict(label='sepal width',\n                                 values=df['sepal width']),\n                            dict(label='petal length',\n                                 values=df['petal length']),\n                            dict(label='petal width',\n                                 values=df['petal width'])],\n                showupperhalf=False,\n                text=df['class'],\n                marker=dict(color=index_vals,\n                            showscale=False,\n                            line_color='white', line_width=0.5)\n                ))\n\nfig.update_layout(\n    title=dict(text='Iris Data set'),\n    width=600,\n    height=600,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating a Box Plot of Alcohol Consumption Data using Plotly in Python\nDESCRIPTION: This code creates a box plot to visualize the distribution and statistics of alcohol consumption data using Plotly's graph objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/basic-statistics.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ny = data['alcohol'].values.tolist()\n\ntrace = go.Box(\n    y=y,\n    name = 'Box Plot',\n    boxpoints='all',\n    jitter=0.3,\n    marker = dict(\n        color = 'rgb(214,12,140)',\n    ),\n)\n\nlayout = go.Layout(\n    width=500,\n    yaxis=dict(\n        title='Alcohol Consumption by Country',\n        zeroline=False\n    ),\n)\n\ndata = [trace]\nfig= go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='alcohol-box-plot')\n```\n\n----------------------------------------\n\nTITLE: Accessing Plotly write_html Help\nDESCRIPTION: This code snippet demonstrates how to access the help documentation for the `write_html` method of a Plotly figure. It imports the `plotly.graph_objects` module and uses the `help()` function to display the documentation for `go.Figure.write_html`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/interactive-html-export.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nhelp(go.Figure.write_html)\n```\n\n----------------------------------------\n\nTITLE: Cell Color Based on Variable in Plotly Tables (Python)\nDESCRIPTION: This example shows how to set cell colors based on a variable using Plotly. It generates random integer arrays and then uses these arrays as indices to select colors from a predefined color palette. These selected colors are then applied to the line and fill colors of the table cells. This requires `plotly.graph_objects`, `plotly.colors`, and `numpy`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.colors import n_colors\nimport numpy as np\nnp.random.seed(1)\n\ncolors = n_colors('rgb(255, 200, 200)', 'rgb(200, 0, 0)', 9, colortype='rgb')\na = np.random.randint(low=0, high=9, size=10)\nb = np.random.randint(low=0, high=9, size=10)\nc = np.random.randint(low=0, high=9, size=10)\n\nfig = go.Figure(data=[go.Table(\n  header=dict(\n    values=['<b>Column A</b>', '<b>Column B</b>', '<b>Column C</b>'],\n    line_color='white', fill_color='white',\n    align='center',font=dict(color='black', size=12)\n  ),\n  cells=dict(\n    values=[a, b, c],\n    line_color=[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],\n    fill_color=[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],\n    align='center', font=dict(color='white', size=11)\n    ))\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Original Stock Data with Highlighted Section in Python\nDESCRIPTION: Create a Plotly scatter plot of the stock data, highlighting a specific section for analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-fitting.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nleft_endpt=1857\nright_endpt=1940\n\noriginal_trace = go.Scatter(\n    x = [j for j in range(len(stock_data['SBUX']))],\n    y = stock_data['SBUX'][0:left_endpt].tolist() + [None for k in range(right_endpt - left_endpt)] +\n        stock_data['SBUX'][right_endpt + 1:len(stock_data['SBUX'])].tolist(),\n    mode = 'lines',\n    name = 'Full Data',\n    marker = dict(color = 'rgb(160,200,250)')\n)\n\nhighlighted_trace = go.Scatter(\n    x = [j for j in range(left_endpt, right_endpt)],\n    y = stock_data['SBUX'][left_endpt:right_endpt],\n    mode = 'lines',\n    name = 'Highlighted Section',\n    marker = dict(color = 'rgb(0,56,210)')\n)\n\ndata = [original_trace, highlighted_trace,]\npy.iplot(data, filename='stock-data-SBUX')\n```\n\n----------------------------------------\n\nTITLE: Including Specific Values in Autorange with Plotly Express\nDESCRIPTION: This snippet sets up the autorange to always include a specific value on axes in a Plotly Express plot using the 'include' parameter within 'autorangeoptions'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.update_xaxes(autorangeoptions=dict(include=5))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Shared Colorscale - Python\nDESCRIPTION: This snippet showcases the use of shared colorscale in subplots by utilizing coloraxis. It demonstrates how to create a horizontal subplot grid with color-mapped bar traces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=1, cols=2, shared_yaxes=True)\n\nfig.add_trace(go.Bar(x=[1, 2, 3], y=[4, 5, 6],\n                    marker=dict(color=[4, 5, 6], coloraxis=\"coloraxis\")),\n              1, 1)\n\nfig.add_trace(go.Bar(x=[1, 2, 3], y=[2, 3, 5],\n                    marker=dict(color=[2, 3, 5], coloraxis=\"coloraxis\")),\n              1, 2)\n\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Executing BigQuery Queries with Error Handling\nDESCRIPTION: Code to execute BigQuery queries and load results into pandas DataFrames with error handling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    python_df = gbq.read_gbq(python_query, project_id=project_id)\nexcept:\n    print 'Error reading the dataset'\n\ntry:\n    php_df = gbq.read_gbq(php_query, project_id=project_id)\nexcept:\n    print 'Error reading the dataset'\n```\n\n----------------------------------------\n\nTITLE: Setting Font Weight in Scatter Map in Python\nDESCRIPTION: This snippet illustrates how to set the font weight within a Scattermap trace using numeric values, allowing for varying thicknesses in the text display.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-scatter-maps.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    mode = \"markers+text+lines\",\n    lon = [-75, -80, -50], lat = [45, 20, -20],\n    marker = dict(size=20, symbol=[\"bus\", \"harbor\", \"airport\"]),\n    text = [\"Bus\", \"Harbor\", \"airport\"], textposition = \"bottom right\",\n    textfont = dict(size=18, color=\"black\", weight=900)\n    ))\n\nfig.update_layout(\n    map = dict(\n        style=\"outdoors\", zoom=0.7),\n    showlegend = False,)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Group Click Toggle Behavior in Plotly Legends\nDESCRIPTION: This snippet demonstrates how to customize the toggle behavior when clicking on grouped legend items using the 'groupclick' parameter. It creates four scatter plots in two groups with custom click behavior.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 1, 3],\n    legendgroup=\"group\",  # this can be any string, not just \"group\"\n    legendgrouptitle_text=\"First Group Title\",\n    name=\"first legend group\",\n    mode=\"markers\",\n    marker=dict(color=\"Crimson\", size=10)\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 2, 2],\n    legendgroup=\"group\",\n    name=\"first legend group - average\",\n    mode=\"lines\",\n    line=dict(color=\"Crimson\")\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 9, 2],\n    legendgroup=\"group2\",\n    legendgrouptitle_text=\"Second Group Title\",\n    name=\"second legend group\",\n    mode=\"markers\",\n    marker=dict(color=\"MediumPurple\", size=10)\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3],\n    y=[5, 5, 5],\n    legendgroup=\"group2\",\n    name=\"second legend group - average\",\n    mode=\"lines\",\n    line=dict(color=\"MediumPurple\")\n))\n\nfig.update_layout(title=dict(text=\"Try Clicking on the Legend Items!\"))\nfig.update_layout(legend=dict(groupclick=\"toggleitem\"))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Imports the Plotly library and checks its version to ensure compatibility with the tutorial. This is recommended as Plotly is frequently updated.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Population Pyramid Chart with Plotly\nDESCRIPTION: Implements a stacked population pyramid chart with additional overlaid bars for people with dogs. Uses four bar traces with custom colors and opacity settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/population-pyramid-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nwomen_bins = np.array([-600, -623, -653, -650, -670, -578, -541, -411, -322, -230])\nmen_bins = np.array([600, 623, 653, 650, 670, 578, 541, 360, 312, 170])\nwomen_with_dogs_bins = np.array([-0, -3, -308, -281, -245, -231, -212, -132, -74, -76])\nmen_with_dogs_bins = np.array([0, 1, 300, 273, 256, 211, 201, 170, 145, 43])\n\ny = list(range(0, 100, 10))\n\nlayout = go.Layout(yaxis=go.layout.YAxis(title='Age'),\n                   xaxis=go.layout.XAxis(\n                       range=[-1200, 1200],\n                       tickvals=[-1000, -700, -300, 0, 300, 700, 1000],\n                       ticktext=[1000, 700, 300, 0, 300, 700, 1000],\n                       title='Number'),\n                   barmode='overlay',\n                   bargap=0.1)\n\ndata = [go.Bar(y=y,\n               x=men_bins,\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               ),\n        go.Bar(y=y,\n               x=women_bins,\n               orientation='h',\n               name='Women',\n               text=-1 * women_bins.astype('int'),\n               hoverinfo='text',\n               marker=dict(color='seagreen')\n               ),\n        go.Bar(y=y,\n               x=men_with_dogs_bins,\n               orientation='h',\n               hoverinfo='x',\n               showlegend=False,\n               opacity=0.5,\n               marker=dict(color='teal')\n               ),\n        go.Bar(y=y,\n               x=women_with_dogs_bins,\n               orientation='h',\n               text=-1 * women_bins.astype('int'),\n               hoverinfo='text',\n               showlegend=False,\n               opacity=0.5,\n               marker=dict(color='darkgreen')\n               )]\n\npy.iplot(dict(data=data, layout=layout), filename='EXAMPLES/stacked_bar_pyramid')\n```\n\n----------------------------------------\n\nTITLE: Configuring Xvfb for Headless Image Export in Plotly\nDESCRIPTION: This snippet shows how to disable the automatic use of Xvfb for headless image export on Linux systems. It sets the 'use_xvfb' configuration option to False using the orca configuration object.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.orca.config.use_xvfb = False\n```\n\n----------------------------------------\n\nTITLE: Multi-class Prediction Confidence Visualization with Heatmap in Plotly\nDESCRIPTION: This snippet implements a k-NN classifier on the iris dataset and visualizes prediction confidence using a heatmap. It imports necessary libraries and defines the mesh grid for the classifier's predictions, displaying the results with Plotly visuals.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-knn.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\nmesh_size = .02\nmargin = 1\n\n# We will use the iris data, which is included in px\ndf = px.data.iris()\ndf_train, df_test = train_test_split(df, test_size=0.25, random_state=0)\nX_train = df_train[['sepal_length', 'sepal_width']]\ny_train = df_train.species_id\n\n# Create a mesh grid on which we will run our model\nl_min, l_max = df.sepal_length.min() - margin, df.sepal_length.max() + margin\nw_min, w_max = df.sepal_width.min() - margin, df.sepal_width.max() + margin\nlrange = np.arange(l_min, l_max, mesh_size)\nwrange = np.arange(w_min, w_max, mesh_size)\nll, ww = np.meshgrid(lrange, wrange)\n\n# Create classifier, run predictions on grid\nclf = KNeighborsClassifier(15, weights='distance')\nclf.fit(X_train, y_train)\nZ = clf.predict(np.c_[ll.ravel(), ww.ravel()])\nZ = Z.reshape(ll.shape)\nproba = clf.predict_proba(np.c_[ll.ravel(), ww.ravel()])\nproba = proba.reshape(ll.shape + (3,))\n\n# Compute the confidence, which is the difference\ndiff = proba.max(axis=-1) - (proba.sum(axis=-1) - proba.max(axis=-1))\n\nfig = px.scatter(\n    df_test, x='sepal_length', y='sepal_width',\n    symbol='species',\n    symbol_map={\n        'setosa': 'square-dot',\n        'versicolor': 'circle-dot',\n        'virginica': 'diamond-dot'},\n)\nfig.update_traces(\n    marker_size=12, marker_line_width=1.5,\n    marker_color=\"lightyellow\"\n)\nfig.add_trace(\n    go.Heatmap(\n        x=lrange,\n        y=wrange,\n        z=diff,\n        opacity=0.25,\n        customdata=proba,\n        colorscale='RdBu',\n        hovertemplate=(\n            'sepal length: %{x} <br>'\n            'sepal width: %{y} <br>'\n            'p(setosa): %{customdata[0]:.3f}<br>'\n            'p(versicolor): %{customdata[1]:.3f}<br>'\n            'p(virginica): %{customdata[2]:.3f}<extra></extra>'\n        )\n    )\n)\nfig.update_layout(\n    legend_orientation='h',\n    title=dict(text='Prediction Confidence on Test Split')\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Wind Speed Data for Outlier Analysis\nDESCRIPTION: Load wind speed data from a CSV file and create a table visualization using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/outlier-test.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='wind-data-sample')\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: ReStructuredText documentation defining the plotly.figure_factory module's available chart creation methods. Lists all available factory functions for creating specialized plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/plotly.figure_factory.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ff:\n\n`plotly.figure_factory`: helper methods for building specific complex charts\n==============\n\n.. currentmodule:: plotly.figure_factory\n\n.. autosummary::\n   :toctree: generated/\n   :template: function.rst\n\n   create_2d_density\n   create_annotated_heatmap\n   create_bullet\n   create_candlestick\n   create_choropleth\n   create_dendrogram\n   create_distplot\n   create_facet_grid\n   create_gantt\n   create_hexbin_mapbox\n   create_ohlc\n   create_quiver\n   create_scatterplotmatrix\n   create_streamline\n   create_table\n   create_ternary_contour\n   create_trisurf\n   create_violin\n```\n\n----------------------------------------\n\nTITLE: Positioning Lines Relative to Plot and Axes\nDESCRIPTION: Shows how to position lines both relative to the plot coordinates and axis data coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Create scatter trace of text labels\nfig.add_trace(go.Scatter(\n    x=[2, 6], y=[1, 1],\n    text=[\"Line positioned relative to the plot\",\n          \"Line positioned relative to the axes\"],\n    mode=\"text\",\n))\n\n# Set axes ranges\nfig.update_xaxes(range=[0, 8])\nfig.update_yaxes(range=[0, 2])\n\nfig.add_shape(type=\"line\",\n    xref=\"x\", yref=\"y\",\n    x0=4, y0=0, x1=8, y1=1,\n    line=dict(\n        color=\"LightSeaGreen\",\n        width=3,\n    ),\n)\nfig.add_shape(type=\"line\",\n    xref=\"paper\", yref=\"paper\",\n    x0=0, y0=0, x1=0.5,\n    y1=0.5,\n    line=dict(\n        color=\"DarkOrange\",\n        width=3,\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Using Templates with Plotly Express\nDESCRIPTION: Shows how to use Plotly's template system with Plotly Express to automatically style figures using predefined themes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/styling-plotly-express.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.density_heatmap(df, x=\"sepal_width\", y=\"sepal_length\", template=\"seaborn\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Simple Scatter Plot with Graph Objects\nDESCRIPTION: Creates a basic scatter plot using Plotly Graph Objects, plotting sine wave data points as markers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport numpy as np\n\nN = 1000\nt = np.linspace(0, 10, 100)\ny = np.sin(t)\n\nfig = go.Figure(data=go.Scatter(x=t, y=y, mode='markers'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating and Visualizing Baseline Detection on Time Series Data\nDESCRIPTION: Calculates baseline values using PeakUtils and creates a Plotly visualization showing both the original time series data and the computed baseline points for comparison.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-detection.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# calculate baseline y values\nbaseline_values = peakutils.baseline(time_series)\n\ntrace = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=time_series,\n    mode='lines',\n    marker=dict(\n        color='#B292EA',\n    ),\n    name='Original Plot'\n)\n\ntrace2 = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=baseline_values,\n    mode='markers',\n    marker=dict(\n        size=3,\n        color='#EB55BF',\n        symbol='circle-open'\n    ),\n    name='Baseline'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='milk-production-plot-with-baseline')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Data Normalization in Python\nDESCRIPTION: This snippet imports necessary libraries for data analysis and visualization, including Plotly, NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normalization.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tools\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Figures in Jupyter Notebook\nDESCRIPTION: This implementation enhances responsiveness for figures created with plotly.offline.plot and displayed in Jupyter Notebooks, ensuring that plots resize dynamically based on the display environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nplotly.offline.plot() // Generates an HTML file or div with responsive resize logic.\n```\n\n----------------------------------------\n\nTITLE: Preparing QQ-Plot Data Using Statsmodels\nDESCRIPTION: Uses statsmodels' qqplot function to prepare data for a Quantile-Quantile plot, which compares the distribution of the sample data with the theoretical normal distribution. The 's' parameter adds a standardized line for reference.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom statsmodels.graphics.gofplots import qqplot\n\nqqplot_data = qqplot(gauss_data, line='s').gca().lines\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Chart in IPython Notebook using HTML\nDESCRIPTION: This snippet embeds a Plotly chart in an IPython Notebook using an HTML iframe. It displays a version of the 3D object with triangle edges.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML\nHTML('<iframe src=https://plot.ly/~empet/13734/trisurf-from-a-ply-file-data-source-1/ \\\n     width=800 height=800></iframe>')\n```\n\n----------------------------------------\n\nTITLE: Histogram Plot\nDESCRIPTION: Creates a histogram using random normal data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\npd.options.plotting.backend = \"plotly\"\nnp.random.seed(1)\n\ndf = pd.DataFrame(dict(\n    a=np.random.normal(loc=1, scale=2, size=100),\n    b=np.random.normal(loc=2, scale=1, size=100)\n))\nfig = df.plot.hist()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Converting String to Numeric Colors\nDESCRIPTION: Demonstrates converting string values to numeric for continuous color mapping.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/discrete-color.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\ndf[\"size\"] = df[\"size\"].astype(str) #convert to string\ndf[\"size\"] = df[\"size\"].astype(float) #convert back to numeric\n\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"size\",\n                 title=\"Numeric 'size' values mean continuous color\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive City Analysis with COLLATE NOCASE\nDESCRIPTION: Performs a case-insensitive analysis of complaint types by city using SQL's COLLATE NOCASE, creating a stacked bar chart visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT City, COUNT(*) as `num_complaints` '\n                        'FROM data '\n                        'GROUP BY `City` '\n                       'COLLATE NOCASE '\n                       'ORDER BY -num_complaints '\n                       'LIMIT 11 ', disk_engine)\ncities = list(df.City)\ncities.remove(None)\n\ntraces = [] # the series in the graph - one trace for each city\n\nfor city in cities:\n    df = pd.read_sql_query('SELECT ComplaintType, COUNT(*) as `num_complaints` '\n                           'FROM data '\n                           'WHERE City = \"{}\" COLLATE NOCASE '\n                           'GROUP BY `ComplaintType` '\n                           'ORDER BY -num_complaints'.format(city), disk_engine)\n\n    traces.append(go.Bar(x=df['ComplaintType'], y=df.num_complaints, name=city.capitalize()))\n\npy.iplot({'data': traces, 'layout': go.Layout(barmode='stack', xaxis={'tickangle': 40}, margin={'b': 150})}, filename='311/complaints by city stacked')\n```\n\n----------------------------------------\n\nTITLE: Creating Summary Table from DataFrame with Bootstrap Styling\nDESCRIPTION: Generates an HTML table from the Pandas DataFrame's statistical summary using the to_html() method. The default styling is replaced with Bootstrap table styling for better appearance in the final report.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsummary_table_1 = df.describe()\nsummary_table_1 = summary_table_1\\\n    .to_html()\\\n    .replace('<table border=\"1\" class=\"dataframe\">','<table class=\"table table-striped\">') # use bootstrap styling\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapped Column Facets - Python\nDESCRIPTION: This code demonstrates how to wrap columns for facet plots when the facet dimension has many unique values. It uses the Plotly Express library to create a scatter plot based on GDP and life expectancy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder()\nfig = px.scatter(df, x='gdpPercap', y='lifeExp', color='continent', size='pop', facet_col='year', facet_col_wrap=4)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Embedding IFrame Snippet for k-NN Classification in Dash\nDESCRIPTION: This snippet displays an IFrame that loads an external URL for a k-NN classification example in Dash. It requires the IPython display module for rendering the IFrame.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-knn.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'knn-classification', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Values to Carpet Plot in Python with Plotly\nDESCRIPTION: This code snippet shows how to add parameter values to a carpet plot using the 'a' and 'b' attributes. It includes both x and y coordinates for a more complete plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Dimensions in Parallel Coordinates with Plotly Express\nDESCRIPTION: Demonstrates how to select specific columns to display in a parallel coordinates plot using the dimensions parameter in Plotly Express. This allows for more control over which variables are included in the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-coordinates-plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.parallel_coordinates(df, color=\"species_id\",\n                              dimensions=['sepal_width', 'sepal_length', 'petal_width',\n                                          'petal_length'],\n                              color_continuous_scale=px.colors.diverging.Tealrose,\n                              color_continuous_midpoint=2)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot Column Facets - Python\nDESCRIPTION: This code snippet demonstrates how to create a scatter plot with facets based on a column, using Plotly Express. The plot shows total bill versus tip, colored by smoker status.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/facet-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"smoker\", facet_col=\"sex\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Bar Data in Plotly FigureWidget (Python)\nDESCRIPTION: This snippet updates the y-values of the second bar trace in the FigureWidget. It accesses the `data` attribute, which is a list of traces, and modifies the `y` attribute of the second trace (`f.data[1]`).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# update bar data\nbar = f.data[1]\nbar.y = [5, 3, 2, 8]\n```\n\n----------------------------------------\n\nTITLE: Changing Font Size in Plotly Table, Python\nDESCRIPTION: This code demonstrates how to change the font size of the text within a Plotly table. It iterates through the annotations in the layout and sets the font size for each annotation. The `index=True` parameter of `ff.create_table` adds an index column to the table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-table.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Country', 'Year', 'Population'],\n               ['United States', 2000, 282200000],\n               ['Canada', 2000, 27790000],\n               ['United States', 2005, 295500000],\n               ['Canada', 2005, 32310000],\n               ['United States', 2010, 309000000],\n               ['Canada', 2010, 34000000]]\n\nfig = ff.create_table(data_matrix, index=True)\n\n# Make text size larger\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 20\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map in Dash Using External IFrame\nDESCRIPTION: Use Dash to embed a choropleth map as an IFrame. This snippet shows loading external content, which can be particularly useful for applications with complex layouts or external visual content hosted elsewhere.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'mapbox-county-choropleth', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Activating Plotly Express Backend with Pandas\nDESCRIPTION: This snippet introduces the new ability to set Plotly as the plotting backend for Pandas, allowing users to create plots directly from Pandas dataframes using Plotly's capabilities. The activation requires modification of Pandas options to specify the 'plotly' backend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npandas.options.plotting.backend = \"plotly\"\n```\n\n----------------------------------------\n\nTITLE: Custom Colorscale for Plotly Contour Plots in Python\nDESCRIPTION: This snippet demonstrates how to use a custom colorscale for a Plotly contour plot.  It defines a `colorscale` as a list of lists, where each inner list contains a value between 0 and 1 (inclusive) and a corresponding color string. The color strings can be CSS colors, rgb, or hex strings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/contour-plots.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n# Valid color strings are CSS colors, rgb or hex strings\ncolorscale = [[0, 'gold'], [0.5, 'mediumturquoise'], [1, 'lightsalmon']]\n\nfig = go.Figure(data =\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale=colorscale)\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Imports and displays the Plotly version to ensure compatibility with exponential fits (requires v1.9.2+)\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/exponential-fits.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Configuring New Selection Styling\nDESCRIPTION: Shows how to configure the appearance of new selections made by users. Sets the selection mode and defines blue as the default line color for new selections.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\n\nfig.update_layout(dragmode='select',\n                  newselection=dict(line=dict(color='blue')))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Scatter Plot with Integer Column Names in Plotly Express\nDESCRIPTION: Demonstrates creating a scatter plot using NumPy array data with integer column names. Shows how to reference columns by their integer indices for x, y, size, and color parameters.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/px-arguments.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.express as px\n\nar = np.arange(100).reshape((10, 10))\nfig = px.scatter(ar, x=2, y=6, size=1, color=5)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Apple Stock Data with Plotly in Python\nDESCRIPTION: This code loads Apple stock price data from a CSV file, creates a sample dataframe, and displays it as a table using Plotly's Figure Factory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normalization.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napple_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\ndf = apple_data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='apple-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Rectangular Data for Plotly Express Icicle Chart\nDESCRIPTION: This snippet demonstrates how to handle missing values in hierarchical data when creating icicle charts with Plotly Express in Python. Missing nodes are represented as 'None', ensuring that their parents are leaf nodes to avoid errors. Dependencies: plotly.express, pandas.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nvendors = [\"A\", \"B\", \"C\", \"D\", None, \"E\", \"F\", \"G\", \"H\", None]\nsectors = [\"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\",\n           \"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\"]\nregions = [\"North\", \"North\", \"North\", \"North\", \"North\",\n           \"South\", \"South\", \"South\", \"South\", \"South\"]\nsales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]\ndf = pd.DataFrame(\n    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)\n)\ndf[\"all\"] = \"all\" # in order to have a single root node\nprint(df)\nfig = px.icicle(df, path=['all', 'regions', 'sectors', 'vendors'], values='sales')\nfig.update_traces(root_color='lightgrey')\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Map with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a simple line map using Plotly Express. It uses the gapminder dataset to plot lines on an orthographic projection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.line_geo(df, locations=\"iso_alpha\",\n                  color=\"continent\", # \"continent\" is one of the columns of gapminder\n                  projection=\"orthographic\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Downloading Exported Figures from Google Colab\nDESCRIPTION: Python code to download the exported figure files from Google Colab to the local machine. Uses the files.download function to retrieve the SVG and PNG files.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import files\nfiles.download('fig1.svg')\nfiles.download('fig1.png')\n```\n\n----------------------------------------\n\nTITLE: Defining Color Mapping Function for Triangles\nDESCRIPTION: Creates a function to map z-values to colors using a specified colormap. This is used to color the triangles based on their average z-coordinate.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef map_z2color(zval, colormap, vmin, vmax):\n    #map the normalized value zval to a corresponding color in the colormap\n\n    if vmin>vmax:\n        raise ValueError('incorrect relation between vmin and vmax')\n    t=(zval-vmin)/float((vmax-vmin))#normalize val\n    R, G, B, alpha=colormap(t)\n    return 'rgb('+'{:d}'.format(int(R*255+0.5))+','+'{:d}'.format(int(G*255+0.5))+\\\n           ','+'{:d}'.format(int(B*255+0.5))+')'\n```\n\n----------------------------------------\n\nTITLE: Running Individual Plotly.py Initialization Tests in Bash\nDESCRIPTION: These commands demonstrate how to correctly run specific initialization tests for plotly.py using pytest. The examples show running tests for lazy imports and dependency non-importation separately.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/test_init/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest test_init/test_lazy_imports.py\n$ pytest test_init/test_dependencies_not_imported.py\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Angles in Plotly Python\nDESCRIPTION: This snippet shows how to set an angle for markers in a Plotly scatter plot using the 'arrow' symbol. The angle is specified using the 'angle' property for customization introduced in version 5.11.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/marker-style.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\n\nfig.update_traces(\n    marker=dict(\n        size=12, symbol=\"arrow\", angle=45, line=dict(width=2, color=\"DarkSlateGrey\")\n    ),\n    selector=dict(mode=\"markers\"),\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram to Visualize Distribution with Plotly\nDESCRIPTION: Generates a histogram plot using Plotly to visually inspect if the data follows a normal distribution. The histogram displays the frequency distribution of the sample data across different bins.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(\n    x=gauss_data\n)\n\npy.iplot([trace], filename='normality-histogram')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Method for Running Plotly.py Initialization Tests in Bash\nDESCRIPTION: This command shows the incorrect way to run the initialization tests, which is discouraged. Running all tests in the test_init directory simultaneously is not recommended for these specific tests.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/test_init/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest test_init\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Comparing Experiments\nDESCRIPTION: Creates a scatter plot comparing results between two experiments, with group-based coloring and gender-based faceting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nmixed_df = px.data.experiment(indexed=True)\n\nfig = px.scatter(mixed_df, x=\"experiment_1\", y=\"experiment_2\",\n                color=\"group\", facet_col=\"gender\", hover_data=[mixed_df.index])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Theme in Plotly\nDESCRIPTION: This code demonstrates how to set a default theme for all figures in a session by modifying the plotly.io.templates.default property. It shows the impact by generating a scatter plot without directly specifying a template.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\nimport plotly.express as px\n\npio.templates.default = \"plotly_white\"\n\ndf = px.data.gapminder()\ndf_2007 = df.query(\"year==2007\")\n\nfig = px.scatter(df_2007,\n                 x=\"gdpPercap\", y=\"lifeExp\", size=\"pop\", color=\"continent\",\n                 log_x=True, size_max=60,\n                 title=\"Gapminder 2007: current default theme\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Polar Chart with Plotly Graph Objects in Python\nDESCRIPTION: This snippet shows how to create a basic polar chart using Plotly Graph Objects, specifically the go.Scatterpolar class.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/polar-chart.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Scatterpolar(\n        r = [0.5,1,2,2.5,3,4],\n        theta = [35,70,120,155,205,240],\n        mode = 'markers',\n    ))\n\nfig.update_layout(showlegend=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Placing Rectangle Relative to Axis Domain\nDESCRIPTION: Demonstrates how to place a rectangle relative to an axis's position using domain references.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.express as px\n\ndf = px.data.wind()\nfig = px.scatter(df, y=\"frequency\")\n\nfig.update_layout(xaxis=dict(domain=[0, 0.5]), yaxis=dict(domain=[0.25, 0.75]))\n\n# Add a shape whose x and y coordinates refer to the domains of the x and y axes\nfig.add_shape(type=\"rect\",\n    xref=\"x domain\", yref=\"y domain\",\n    x0=0.6, x1=0.7, y0=0.8, y1=0.9,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart of Daily Sales with Plotly\nDESCRIPTION: Python code that generates a line chart visualizing the quantity of tickets sold each day using Plotly. This helps identify sales patterns and trends over time.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(title=\"Event Sales Per Day\", yaxis=dict(title=\"Sales Quantity\"))\ndata = [go.Scatter(x=df.caldate, y=df.quantity_sold)]\npy.iplot(go.Figure(data=data, layout=layout))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Peak Analysis in Python\nDESCRIPTION: Import necessary libraries including Plotly, NumPy, Pandas, SciPy, and PeakUtils for data analysis and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-fitting.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines on Maps from GeoPandas Data in Python\nDESCRIPTION: This code extracts point data from a GeoPandas geo-data frame with linestring or multilinestring features and uses px.line_geo() to plot lines on a map.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/lines-on-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport geopandas as gpd\nimport shapely.geometry\nimport numpy as np\nimport wget\n\n# download a zipped shapefile\nwget.download(\"https://plotly.github.io/datasets/ne_50m_rivers_lake_centerlines.zip\")\n\n# open a zipped shapefile with the zip:// pseudo-protocol\ngeo_df = gpd.read_file(\"zip://ne_50m_rivers_lake_centerlines.zip\")\n\nlats = []\nlons = []\nnames = []\n\nfor feature, name in zip(geo_df.geometry, geo_df.name):\n    if isinstance(feature, shapely.geometry.linestring.LineString):\n        linestrings = [feature]\n    elif isinstance(feature, shapely.geometry.multilinestring.MultiLineString):\n        linestrings = feature.geoms\n    else:\n        continue\n    for linestring in linestrings:\n        x, y = linestring.xy\n        lats = np.append(lats, y)\n        lons = np.append(lons, x)\n        names = np.append(names, [name]*len(y))\n        lats = np.append(lats, None)\n        lons = np.append(lons, None)\n        names = np.append(names, None)\n\nfig = px.line_geo(lat=lats, lon=lons, hover_name=names)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for HTML Report Generation\nDESCRIPTION: Imports necessary Python libraries including Plotly for visualization, Pandas for data manipulation, and other utilities for data processing. This setup forms the foundation for generating HTML reports with interactive visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly as py\nimport pandas as pd\nimport numpy as np\n\nfrom datetime import datetime\nfrom datetime import time as dt_tm\nfrom datetime import date as dt_date\n\nimport plotly.plotly as py\nimport plotly.tools as plotly_tools\nimport plotly.graph_objs as go\n\nimport os\nimport tempfile\nos.environ['MPLCONFIGDIR'] = tempfile.mkdtemp()\nfrom matplotlib.finance import quotes_historical_yahoo\nimport matplotlib.pyplot as plt\n\nfrom scipy.stats import gaussian_kde\n\nfrom IPython.display import HTML\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Permutation in Python\nDESCRIPTION: This function calculates the inverse of a given permutation. It's used in the chord diagram creation process to map data correctly to ribbon ends.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef invPerm(perm):\n    # function that returns the inverse of a permutation, perm\n    inv = [0] * len(perm)\n    for i, s in enumerate(perm):\n        inv[s] = i\n    return inv\n```\n\n----------------------------------------\n\nTITLE: Ordering Results with ORDER BY and Creating Bar Chart\nDESCRIPTION: Retrieves complaint counts by agency in descending order and creates an interactive bar chart visualization using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT Agency, COUNT(*) as `num_complaints`'\n                       'FROM data '\n                       'GROUP BY Agency '\n                       'ORDER BY -num_complaints', disk_engine)\n\npy.iplot([go.Bar(x=df.Agency, y=df.num_complaints)], filename='311/most common complaints by agency')\n```\n\n----------------------------------------\n\nTITLE: Using data frames with named indexes\nDESCRIPTION: Shows how to set an index column for a wide-form data frame and name it for use in Plotly Express visualizations. Changes data frame's structure, influencing default behavior in plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\nwide_df = wide_df.set_index(\"nation\")\nwide_df.columns.name = \"medals\"\nwide_df\n```\n\n----------------------------------------\n\nTITLE: Adding Caps to Volume Plots in Python\nDESCRIPTION: Shows how to add or remove caps (color-coded surfaces on the sides of the visualization domain) in volume plots using Plotly. It compares plots with and without caps for clearer visualization of internal surfaces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-volume.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.graph_objects as go\n\n\nX, Y, Z = np.mgrid[:1:20j, :1:20j, :1:20j]\nvol = (X - 1)**2 + (Y - 1)**2 + Z**2\n\n\nfig = go.Figure(data=go.Volume(\n    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),\n    value=vol.flatten(),\n    isomin=0.2,\n    isomax=0.7,\n    opacity=0.2,\n    surface_count=21,\n    caps= dict(x_show=True, y_show=True, z_show=True, x_fill=1), # with caps (default mode)\n    ))\n\n# Change camera view for a better view of the sides, XZ plane\n# (see https://plotly.com/python/v3/3d-camera-controls/)\nfig.update_layout(scene_camera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=0.1, y=2.5, z=0.1)\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Chord Diagram with Plotly in Python\nDESCRIPTION: This snippet initializes the Plotly notebook mode and creates the final chord diagram figure by combining ribbon information and ideograms.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\n\ndata = go.Data(ribbon_info+ideograms)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='chord-diagram-Fb')\n```\n\n----------------------------------------\n\nTITLE: Adding Bleacher Report Logo to Existing Chart in Python\nDESCRIPTION: This snippet retrieves an existing figure, removes autobinx and autobiny properties, and adds the Bleacher Report logo to the bottom center of the chart. It shows how to modify chart properties and add a logo.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/logos.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfig = py.get_figure('https://plot.ly/~Dreamshot/8160/', raw=True)\nfor j in range(len(fig['data'])):\n    del fig['data'][j]['autobinx']\n    del fig['data'][j]['autobiny']\nfig = go.Figure(fig)\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/bleacherreport.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.5, y=-0.35,\n        sizex=0.3, sizey=0.3,\n        xanchor=\"center\", yanchor=\"top\"\n      )]\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Top_Earners_BleacherReport')\n```\n\n----------------------------------------\n\nTITLE: Creating Node Annotations for Plotly\nDESCRIPTION: This snippet defines a function to create annotations for the nodes in the Plotly graph. It takes the node positions and text labels as input and generates a list of annotation dictionaries to be added to the plot layout. This is used to render text labels inside the nodes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tree-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"def make_annotations(pos, text, font_size=10, font_color='rgb(250,250,250)'):\n    L=len(pos)\n    if len(text)!=L:\n        raise ValueError('The lists pos and text must have the same len')\n    annotations = []\n    for k in range(L):\n        annotations.append(\n            dict(\n                text=labels[k], # or replace labels with a different list for the text within the circle\n                x=pos[k][0], y=2*M-position[k][1],\n                xref='x1', yref='y1',\n                font=dict(color=font_color, size=font_size),\n                showarrow=False)\n        )\n    return annotations\"\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map with Plotly Express in Python\nDESCRIPTION: This snippet generates a choropleth map that visualizes life expectancy by country using Plotly Express. It utilizes the Gapminder dataset and shows an animation by year while providing hover information with country names.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder()\nfig = px.choropleth(df, locations=\"iso_alpha\", color=\"lifeExp\", hover_name=\"country\", animation_frame=\"year\", range_color=[20,80])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: ECDF Plot with Markers\nDESCRIPTION: Shows how to add markers to an ECDF plot while maintaining lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", color=\"sex\", markers=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: ECDF Plot with Custom Y Values\nDESCRIPTION: Shows how to create an ECDF plot using custom Y values instead of counts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", y=\"tip\", color=\"sex\", ecdfnorm=None)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Frames for Animated Bubble Chart in Python with Plotly\nDESCRIPTION: This snippet creates frames for each year and continent combination, setting up data for an animated bubble chart. It also configures slider steps for the animation control.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for continent in continents:\n        data_dict = {\n            'xsrc': grid.get_column_reference(col_name_template.format(\n                year=year, continent=continent, header='lifeExp'\n            )),\n            'ysrc': grid.get_column_reference(col_name_template.format(\n                year=year, continent=continent, header='gdpPercap'\n            )),\n            'mode': 'markers',\n            'textsrc': grid.get_column_reference(col_name_template.format(\n                year=year, continent=continent, header='country'\n                )),\n            'marker': {\n                'sizemode': 'area',\n                'sizeref': 200000,\n                'sizesrc': grid.get_column_reference(col_name_template.format(\n                    year=year, continent=continent, header='pop'\n                )),\n                'color': custom_colors[continent]\n            },\n            'name': continent\n        }\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\nfigure['layout']['sliders'] = [sliders_dict]\n```\n\n----------------------------------------\n\nTITLE: Aggregating Daily Complaint Data with SQL and Plotly\nDESCRIPTION: This snippet aggregates the complaint data on a daily basis using SQL queries and creates a bar chart using Plotly. It demonstrates how to use SQL's datetime and strftime functions for date-based grouping and aggregation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nhours = 24\nminutes = hours*60\nseconds = minutes*60\n\ndf = pd.read_sql_query('SELECT datetime(('\n                                   'strftime(\\'%s\\', CreatedDate) / {seconds}) * {seconds}, \\'unixepoch\\') interval ,'\n                               'COUNT(*) as \"Complaints / interval\"'\n                       'FROM data '\n                       'GROUP BY interval '\n                       'ORDER BY interval'.format(seconds=seconds), disk_engine)\n\npy.iplot(\n    {\n        'data': [{\n            'x': df.interval,\n            'y': df['Complaints / interval'],\n            'type': 'bar'\n        }],\n        'layout': {\n            'title': 'Number of 311 Complaints per Day'\n        }\n}, filename='311/complaints per day')\n```\n\n----------------------------------------\n\nTITLE: Adding Play and Pause Controls to Animation\nDESCRIPTION: Adds play and pause buttons to the figure layout for controlling the animation. Also defines custom colors for different continents to be used in the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\ncustom_colors = {\n    'Asia': 'rgb(171, 99, 250)',\n    'Europe': 'rgb(230, 99, 250)',\n    'Africa': 'rgb(99, 110, 250)',\n    'Americas': 'rgb(25, 211, 243)',\n    'Oceania': 'rgb(50, 170, 255)'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Overlaid Area Chart with Plotly Graph Objects in Python\nDESCRIPTION: This example creates a simple overlaid area chart using Plotly Graph Objects. It utilizes two Scatter traces to fill the areas beneath them, demonstrating different fill options.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy')) # fill down to xaxis\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty')) # fill to trace0 y\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Grid with Year and Continent Data\nDESCRIPTION: Builds a Plotly grid for animation by extracting unique years and continents from the dataset. For each year-continent combination, it creates columns with relevant data points and uploads the grid to Plotly's server.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nyears_from_col = set(dataset['year'])\nyears_ints = sorted(list(years_from_col))\nyears = [str(year) for year in years_ints]\nyears.remove('1957')\n\n# make list of continents\ncontinents = []\nfor continent in dataset['continent']:\n    if continent not in continents:\n        continents.append(continent)\n\ncolumns = []\n# make grid\nfor year in years:\n    for continent in continents:\n        dataset_by_year = dataset[dataset['year'] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]\n        for col_name in dataset_by_year_and_cont:\n            # each column name is unique\n            column_name = '{year}_{continent}_{header}_gapminder_grid'.format(\n                year=year, continent=continent, header=col_name\n            )\n            a_column = Column(list(dataset_by_year_and_cont[col_name]), column_name)\n            columns.append(a_column)\n\n# upload grid\ngrid = Grid(columns)\nurl = py.grid_ops.upload(grid, 'gapminder_grid'+str(time.time()), auto_open=False)\nurl\n```\n\n----------------------------------------\n\nTITLE: Creating Sunburst Chart with Radial Text Orientation in Python\nDESCRIPTION: This snippet demonstrates how to create a sunburst chart with radial text orientation using Plotly. It loads data from a CSV file and sets the 'insidetextorientation' to 'radial'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sunburst-charts.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv')\n\nfig = go.Figure()\n\nfig.add_trace(go.Sunburst(\n    ids=df.ids,\n    labels=df.labels,\n    parents=df.parents,\n    domain=dict(column=1),\n    maxdepth=2,\n    insidetextorientation='radial'\n))\n\nfig.update_layout(\n    margin = dict(t=10, l=10, r=10, b=10)\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Plotly Backend Plot\nDESCRIPTION: Demonstrates customization options including title, template, labels, and axis formatting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\n\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\nfig = df.plot(title=\"Pandas Backend Example\", template=\"simple_white\",\n              labels=dict(index=\"time\", value=\"money\", variable=\"option\"))\nfig.update_yaxes(tickprefix=\"$\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Gaussian Test Data in Python\nDESCRIPTION: Creates a sample dataset from a normal distribution with added noise for testing normality. The code seeds the random number generator for reproducibility and outputs the mean and standard deviation of the generated data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Seed the random number generator\nnp.random.seed(10)\n\n# Generate Univariate Observations\ngauss_data = 5 * np.random.randn(100) + 50\nprint('mean=%.3f stdv=%.3f' % (np.mean(gauss_data), np.std(gauss_data)))\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Trendlines without Scatter Points\nDESCRIPTION: Demonstrates how to display only the trendlines without the underlying scatter points. Filters the figure's data to keep only trace elements with mode='lines' and enables the legend for trendlines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True, datetimes=True)\nfig = px.scatter(df, trendline=\"rolling\", trendline_options=dict(window=5),\n                title=\"5-point moving average\")\nfig.data = [t for t in fig.data if t.mode == \"lines\"]\nfig.update_traces(showlegend=True) #trendlines have showlegend=False by default\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Trace Return Value - Python\nDESCRIPTION: This snippet compares how to add traces in version 3 versus version 4 of Plotly. It highlights the change where `add_trace` now returns a reference to the calling figure instead of the newly created trace.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nfig = go.Figure()\n# Version 3\nscatter = fig.add_trace(go.Scatter(y=[2, 3, 1]))\nscatter.marker.size = 20\n\n# Version 4\nscatter = fig.add_trace(go.Scatter(y=[2, 3, 1])).data[-1]\nscatter.marker.size = 20\n```\n\n----------------------------------------\n\nTITLE: Performing Two-Sample T-Test in Python using SciPy\nDESCRIPTION: Conduct a two-sample t-test using SciPy and create a table of results using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/t-test.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntwosample_results = scipy.stats.ttest_ind(data1, data2)\n\nmatrix_twosample = [\n    ['', 'Test Statistic', 'p-value'],\n    ['Sample Data', twosample_results[0], twosample_results[1]]\n]\n\ntwosample_table = FF.create_table(matrix_twosample, index=True)\npy.iplot(twosample_table, filename='twosample-table')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with Custom Styling in Python\nDESCRIPTION: This code handles publishing and styling the notebook. It adds custom fonts and CSS, installs the publisher package, and configures publishing settings including metadata like title, description, and thumbnail for the final documentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-gauge-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'linear-gauge.ipynb', 'python/linear-gauge-chart/', 'Python Linear-Gauge Chart | plotly',\n    'How to make interactive linear-guage charts in Python with Plotly. ',\n    title = 'Python Linear-Gauge Chart | plotly',\n    name = 'Linear-Gauge Chart',\n    thumbnail='thumbnail/linear-gauge.jpg', language='python',\n    has_thumbnail='true', display_as='basic', order=12,\n    ipynb='~notebook_demo/12')\n```\n\n----------------------------------------\n\nTITLE: Converting Graph Objects to Dictionary and JSON\nDESCRIPTION: Shows how to convert Graph Object figures to their dictionary and JSON string representations using to_dict() and to_json() methods\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=go.Layout(height=600, width=800)\n)\n\nfig.layout.template = None # to slim down the output\n\nprint(\"Dictionary Representation of A Graph Object:\\n\\n\" + str(fig.to_dict()))\nprint(\"\\n\\n\")\nprint(\"JSON Representation of A Graph Object:\\n\\n\" + str(fig.to_json()))\nprint(\"\\n\\n\")\n```\n\n----------------------------------------\n\nTITLE: Creating Linear-Gauge Chart Layout in Python with Plotly\nDESCRIPTION: This code creates the basic shell for a linear-gauge chart with four scales. It defines scale titles, labels, and builds a custom layout with properly positioned axes. The chart width is configurable, and ticklen should be set to width/20 for proper segment display.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-gauge-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Define Titles and Labels for Each Scale\nscales = ['<b>Tension</b>', '<b>Energy</b>',\n          '<b>Valence</b>', '<b>Prefer</b>']\nscale1 = ['Very <br> Calm ', 'Moderately <br> Calm ',\n          'Slightly <br> Calm ', 'Neutral ',\n          'Slightly <br> Tense ', 'Moderately <br> Tense ',\n          'Very <br> Tense ']\nscale2 = ['Very <br> Tired ', 'Moderately <br> Tired ',\n          'Slightly <br> Tired ', 'Neutral ',\n          'Slightly <br> Awake ', 'Moderately <br> Awake ',\n          'Very <br> Awake ']\nscale3 = ['Very <br> Displeased ', 'Moderately <br> Displeased ',\n          'Slightly <br> Displeased ', 'Neutral ',\n          'Slightly <br> Pleased ', 'Moderately <br> Pleased ',\n          'Very <br> Pleased ']\nscale4 = ['Strongly <br> Dislike ', 'Moderately <br> Dislike ',\n          'Slightly <br> Dislike ', 'Neutral ',\n          'Slightly <br> Like ', 'Moderately <br> Like ',\n          'Strongly <br> Like ']\nscale_labels = [scale1, scale2, scale3, scale4]\n\n# Add Scale Titles to the Plot\ntraces = []\nfor i in range(len(scales)):\n    traces.append(go.Scatter(\n        x=[0.6], # Pad the title - a longer scale title would need a higher value\n        y=[6.25],\n        text=scales[i],\n        mode='text',\n        hoverinfo='none',\n        showlegend=False,\n        xaxis='x'+str(i+1),\n        yaxis='y'+str(i+1)\n    ))\n\n# Create Scales\n## Since we have 7 lables, the scale will range from 0-6\nshapes = []\nfor i in range(len(scales)):\n    shapes.append({'type': 'rect',\n                   'x0': .02, 'x1': 1.02,\n                   'y0': 0, 'y1': 6,\n                   'xref':'x'+str(i+1), 'yref':'y'+str(i+1)})\n\nx_domains = [[0, .25], [.25, .5], [.5, .75], [.75, 1]] # Split for 4 scales\nchart_width = 800\n\n# Define X-Axes\nxaxes = []\nfor i in range(len(scales)):\n    xaxes.append({'domain': x_domains[i], 'range':[0, 4],\n                  'showgrid': False, 'showline': False,\n                  'zeroline': False, 'showticklabels': False})\n\n# Define Y-Axes (and set scale labels)\n## ticklen is used to create the segments of the scale,\n## for more information see: https://plot.ly/python/reference/#layout-yaxis-ticklen\nyaxes = []\nfor i in range(len(scales)):\n    yaxes.append({'anchor':'x'+str(i+1), 'range':[-.5,6.5],\n                  'showgrid': False, 'showline': False, 'zeroline': False,\n                  'ticks':'inside', 'ticklen': chart_width/20,\n                  'ticktext':scale_labels[i], 'tickvals':[0., 1., 2., 3., 4., 5., 6.]\n                 })\n\n# Put all elements of the layout together\nlayout = {'shapes': shapes,\n          'xaxis1': xaxes[0],\n          'xaxis2': xaxes[1],\n          'xaxis3': xaxes[2],\n          'xaxis4': xaxes[3],\n          'yaxis1': yaxes[0],\n          'yaxis2': yaxes[1],\n          'yaxis3': yaxes[2],\n          'yaxis4': yaxes[3],\n          'autosize': False,\n          'width': chart_width,\n          'height': 600\n}\n\n### ADD RATING DATA HERE ###\n\nfig = dict(data=traces, layout=layout)\npy.iplot(fig, filename='linear-gauge-layout')\n```\n\n----------------------------------------\n\nTITLE: Splom with Hidden Dimension\nDESCRIPTION: Creates a scatterplot matrix with one dimension (sepal width) hidden by setting its visible parameter to False.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/splom.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv')\nindex_vals = df['class'].astype('category').cat.codes\n\nfig = go.Figure(data=go.Splom(\n                dimensions=[dict(label='sepal length',\n                                 values=df['sepal length']),\n                            dict(label='sepal width',\n                                 values=df['sepal width'],\n                                 visible=False),\n                            dict(label='petal length',\n                                 values=df['petal length']),\n                            dict(label='petal width',\n                                 values=df['petal width'])],\n                text=df['class'],\n                marker=dict(color=index_vals,\n                            showscale=False,\n                            line_color='white', line_width=0.5)\n                ))\n\nfig.update_layout(\n    title=dict(text='Iris Data set'),\n    width=600,\n    height=600,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Treemap Data - Python\nDESCRIPTION: This snippet provides a method to create a Treemap while gracefully handling missing values in the dataset, represented by 'None'. It ensures the hierarchical integrity is maintained despite the absence of some data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/treemaps.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nvendors = [\"A\", \"B\", \"C\", \"D\", None, \"E\", \"F\", \"G\", \"H\", None]\nsectors = [\"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\",\n           \"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\"]\nregions = [\"North\", \"North\", \"North\", \"North\", \"North\",\n           \"South\", \"South\", \"South\", \"South\", \"South\"]\nsales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]\ndf = pd.DataFrame(\n    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)\n)\ndf[\"all\"] = \"all\" # in order to have a single root node\nprint(df)\nfig = px.treemap(df, path=['all', 'regions', 'sectors', 'vendors'], values='sales')\nfig.update_traces(root_color=\"lightgrey\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Unified Hovermode in Plotly\nDESCRIPTION: This snippet demonstrates how to set the hovermode to 'x unified'.  It creates a line plot using Plotly Express and disables the default hovertemplate to show a compact entry per point in the hover label.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\n\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\", title=\"layout.hovermode='x unified'\")\nfig.update_traces(mode=\"markers+lines\", hovertemplate=None)\nfig.update_layout(hovermode=\"x unified\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Switching plot orientation by transposing axes\nDESCRIPTION: This snippet demonstrates how to switch the orientation of a Plotly Express bar chart by interchanging the x and y axis assignments, changing the horizontal vs. vertical layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide(indexed=True)\n\nfig = px.bar(wide_df, x=wide_df.columns, y=wide_df.index)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Layout in Plotly Python\nDESCRIPTION: This snippet updates the layout of a Plotly figure to set titles for the main plot and axes. It initializes the layout with specified titles for better clarity and representation of the data shown in the plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Edit the layout\nfig.update_layout(\n        title=dict(\n            text='Average High and Low Temperatures in New York'\n        ),\n        xaxis=dict(\n            title=dict(\n                text='Month'\n            )\n        ),\n        yaxis=dict(\n            title=dict(\n                text='Temperature (degrees F)'\n            )\n        ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Band-Pass FFT Filter in Python\nDESCRIPTION: This code implements a band-pass FFT filter on the wind speed data. It combines low-pass and high-pass filters to allow a specific range of frequencies to pass. The filtered signal is then plotted using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/fft-filters.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfL = 0.1\nfH = 0.3\nb = 0.08\nN = int(np.ceil((4 / b)))\nif not N % 2: N += 1  # Make sure that N is odd.\nn = np.arange(N)\n\n# low-pass filter\nhlpf = np.sinc(2 * fH * (n - (N - 1) / 2.))\nhlpf *= np.blackman(N)\nhlpf = hlpf / np.sum(hlpf)\n\n# high-pass filter\nhhpf = np.sinc(2 * fL * (n - (N - 1) / 2.))\nhhpf *= np.blackman(N)\nhhpf = hhpf / np.sum(hhpf)\nhhpf = -hhpf\nhhpf[int((N - 1) / 2)] += 1\n\nh = np.convolve(hlpf, hhpf)\ns = list(data['10 Min Std Dev'])\nnew_signal = np.convolve(s, h)\n\ntrace1 = go.Scatter(\n    x=list(range(len(new_signal))),\n    y=new_signal,\n    mode='lines',\n    name='Band-Pass Filter',\n    marker=dict(\n        color='#BB47BE'\n    )\n)\n\nlayout = go.Layout(\n    title='Band-Pass Filter',\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='fft-band-pass-filter')\n```\n\n----------------------------------------\n\nTITLE: Loading Virtual WebGL in Jupyter Notebook\nDESCRIPTION: This snippet shows how to load the Virtual WebGL script in a Jupyter notebook environment using the HTML magic command. Virtual WebGL can be used to overcome browser limitations on the number of WebGL contexts.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/performance.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%%html\n<script src=\"https://unpkg.com/virtual-webgl@1.0.6/src/virtual-webgl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Aggregating Time Series Data with SQL and Plotly\nDESCRIPTION: This snippet demonstrates how to aggregate time series data into 15-minute intervals using SQL's datetime and strftime functions. It then plots the aggregated data using Plotly, showing the number of complaints per interval.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nminutes = 15\nseconds = 15*60\n\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                               'datetime(('\n                                   'strftime(\\'%s\\', CreatedDate) / {seconds}) * {seconds}, \\'unixepoch\\') interval '\n                       'FROM data '\n                       'LIMIT 10 '.format(seconds=seconds), disk_engine)\n\nminutes = 15\nseconds = minutes*60\n\ndf = pd.read_sql_query('SELECT datetime(('\n                                   'strftime(\\'%s\\', CreatedDate) / {seconds}) * {seconds}, \\'unixepoch\\') interval ,'\n                               'COUNT(*) as \"Complaints / interval\"'\n                       'FROM data '\n                       'GROUP BY interval '\n                       'ORDER BY interval '\n                       'LIMIT 500'.format(seconds=seconds), disk_engine)\n\npy.iplot(\n    {\n        'data': [{\n            'x': df.interval,\n            'y': df['Complaints / interval'],\n            'type': 'bar'\n        }],\n        'layout': {\n            'title': 'Number of 311 Complaints per 15 Minutes'\n        }\n}, filename='311/complaints per 15 minutes')\n```\n\n----------------------------------------\n\nTITLE: Finding Matrix Inverse\nDESCRIPTION: Calculates and visualizes the inverse of a matrix using NumPy's linear algebra functions and Plotly's heatmap.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\ninverse = np.linalg.inv(matrix)\n\ncolorscale = [[0, '#F1FAFB'], [1, '#A0E4F1']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(inverse.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='inverse')\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash App in IFrame\nDESCRIPTION: This code snippet displays a Dash application within an IFrame in the documentation.  It imports the `IFrame` class from `IPython.display` and creates an IFrame element that points to the specified URL of the Dash app.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/interactive-html-export.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'interactive-html-export', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive FigureWidget with Scatter and Parallel Categories\nDESCRIPTION: Constructs a Plotly figure with scatter plot and parallel categories visualization, using custom color markers and layout settings\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig = go.FigureWidget(\n    data=[go.Scatter(x=cars_df.horsepower, y=cars_df['highway-mpg'],\n                marker={'color': color, 'cmin': cmin, 'cmax': cmax,\n                        'colorscale': colorscale, 'showscale': True,\n                        'colorbar': {'tickvals': [0, 1, 2], 'ticktext': ['None', 'Red', 'Blue']}},\n                     mode='markers'),\n\n      go.Parcats(domain={'y': [0, 0.4]}, dimensions=dimensions,\n                   line={'colorscale': colorscale, 'cmin': cmin,\n                   'cmax': cmax, 'color': color, 'shape': 'hspline'})])\n\nfig.update_layout(height=800, xaxis={'title': 'Horsepower'},\n                  yaxis={'title': 'MPG', 'domain': [0.6, 1]},\n                  dragmode='lasso', hovermode='closest')\n```\n\n----------------------------------------\n\nTITLE: Creating Tri-Surface Plot with Plotly in Python\nDESCRIPTION: This code creates a tri-surface plot using Plotly. It sets up the data, configures the layout with custom axis settings and camera position, and generates an interactive 3D plot of the object from the PLY file.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndata3=plotly_trisurf(x,y,z, faces, colormap=cm.RdBu, plot_edges=None)\n\ntitle=\"Trisurf from a PLY file<br>\"+\\\n                \"Data Source:<a href='http://people.sc.fsu.edu/~jburkardt/data/ply/airplane.ply'> [1]</a>\"\n\nnoaxis=dict(showbackground=False,\n            showline=False,\n            zeroline=False,\n            showgrid=False,\n            showticklabels=False,\n            title=''\n          )\n\nfig3 = go.Figure(data=data3, layout=layout)\nfig3['layout'].update(dict(title=title,\n                           width=1000,\n                           height=1000,\n                           scene=dict(xaxis=noaxis,\n                                      yaxis=noaxis,\n                                      zaxis=noaxis,\n                                      aspectratio=dict(x=1, y=1, z=0.4),\n                                      camera=dict(eye=dict(x=1.25, y=1.25, z= 1.25)\n                                     )\n                           )\n                     ))\n\npy.iplot(fig3, filename='Chopper-Ply-cls')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Scale\nDESCRIPTION: Create a custom color scale with multiple RGB color transitions for surface visualization\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/2d-projection-of-3d-surface.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncolorscale=[[0.0, 'rgb(20,29,67)'],\n           [0.1, 'rgb(28,76,96)'],\n           [0.2, 'rgb(16,125,121)'],\n           [0.3, 'rgb(92,166,133)'],\n           [0.4, 'rgb(182,202,175)'],\n           [0.5, 'rgb(253,245,243)'],\n           [0.6, 'rgb(230,183,162)'],\n           [0.7, 'rgb(211,118,105)'],\n           [0.8, 'rgb(174,63,95)'],\n           [0.9, 'rgb(116,25,93)'],\n           [1.0, 'rgb(51,13,53)']]\n```\n\n----------------------------------------\n\nTITLE: Adding Bar Trace to Plotly FigureWidget (Python)\nDESCRIPTION: This snippet adds a bar trace to the existing FigureWidget.  It uses the `add_bar` method to include a bar chart with specified y-values. This will dynamically update the FigureWidget display.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf.add_bar(y=[1, 4, 3, 2]);\n```\n\n----------------------------------------\n\nTITLE: Updating Trace Names in Python\nDESCRIPTION: Change trace names from '*mapbox' to '*map' by removing the 'box' suffix. This applies to both Plotly Express and Graph Objects traces.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/migrate-to-maplibre.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old Mapbox traces\npx.scatter_mapbox()\npx.line_mapbox()\ngo.Scattermapbox()\n\n# New MapLibre traces\npx.scatter_map()\npx.line_map()\ngo.Scattermap()\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Color Scale with Parallel Coordinates\nDESCRIPTION: Demonstrates how to create a discrete color scale with discontinuous colors using parallel coordinates plot. Sets specific color points for different ranges.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/colorscales.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.parallel_coordinates(df, color=\"species_id\",\n                             color_continuous_scale=[(0.00, \"red\"),   (0.33, \"red\"),\n                                                     (0.33, \"green\"), (0.66, \"green\"),\n                                                     (0.66, \"blue\"),  (1.00, \"blue\")])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Pie Chart Hover Information\nDESCRIPTION: Creates a pie chart with customized hover information. The hovertemplate displays the label, percentage value, and custom text for each pie slice when hovering.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Pie(\n    name = \"\",\n    values = [2, 5, 3, 2.5],\n    labels = [\"R\", \"Python\", \"Java Script\", \"Matlab\"],\n    text = [\"textA\", \"TextB\", \"TextC\", \"TextD\"],\n    hovertemplate = \"%{label}: <br>Popularity: %{percent} </br> %{text}\"\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Removing Plotly Logo from Modebar in Python\nDESCRIPTION: This code shows how to remove the Plotly logo from the modebar (interactive toolbar) in a Plotly figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nconfig = {'displaylogo': False}\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]))\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Theming in Plotly\nDESCRIPTION: This snippet shows how to disable default theming in Plotly by setting the default template to 'none'. This is useful for maintaining a consistent appearance across versions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.templates.default = \"none\"\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap with WebGL Text Annotations in Python\nDESCRIPTION: This code snippet generates a heatmap with random data and adds WebGL-based text annotations. It uses Plotly's graph objects and scattergl for efficient rendering of large datasets. The script also includes a slider for adjusting the x-axis range.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/webgl-text-and-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.figure_factory import create_annotated_heatmap\n\nn=250\n\ny = [[i]*n for i in range(12)]\ny = [item for sublist in y for item in sublist]\n\ntrace = dict(type='heatmap', z=np.random.randint(1, 10,(12, n)), colorscale = 'Viridis')\ndata=[trace]\n\n# Here's the key part - Scattergl text!\n\ndata.append({'type': 'scattergl',\n                    'mode': 'text',\n                    'x': list(range(n))*12,\n                    'y': y,\n                    'text': np.random.choice(list('ATGC'), 12*250),\n                    'textfont': {\n                        'size': 20\n                    }})\n\nsteps = [{'args': ['xaxis', {'range': [-0.5 + e, 30.5 + e]}], 'method': 'relayout'} for e in range(n-30)]\n\nsliders = [dict(\n    active = 0,\n    steps = steps\n)]\n\nlayout = dict(sliders=sliders)\nlayout['xaxis'] = {'range': [-0.5, 30.5]}\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot of Alcohol Consumption Data using Plotly in Python\nDESCRIPTION: This snippet creates a violin plot to visualize the distribution of alcohol consumption data using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/basic-statistics.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ny = data['alcohol'].values.tolist()\n\nfig = FF.create_violin(y, title='Violin Plot', colors='#604d9e')\npy.iplot(fig, filename='alcohol-violin-visual')\n```\n\n----------------------------------------\n\nTITLE: Configured Horizontal Bar Chart with Plotly Express\nDESCRIPTION: Advanced horizontal bar chart with color mapping, hover data, custom height, and title using Plotly Express\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-bar-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"total_bill\", y=\"sex\", color='day', orientation='h',\n             hover_data=[\"tip\", \"size\"],\n             height=400,\n             title='Restaurant bills')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Points on Ideogram Arcs with Complex Numbers\nDESCRIPTION: Creates a function that returns evenly spaced points on an ideogram arc represented as complex numbers in polar form. The number of points depends on the arc length for appropriate resolution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef make_ideogram_arc(R, phi, a=50):\n    # R is the circle radius\n    # phi is the list of ends angle coordinates of an arc\n    # a is a parameter that controls the number of points to be evaluated on an arc\n    if not test_2PI(phi[0]) or not test_2PI(phi[1]):\n        phi=[moduloAB(t, 0, 2*PI) for t in phi]\n    length=(phi[1]-phi[0])% 2*PI\n    nr=5 if length<=PI/4 else int(a*length/PI)\n\n    if phi[0] < phi[1]:\n        theta=np.linspace(phi[0], phi[1], nr)\n    else:\n        phi=[moduloAB(t, -PI, PI) for t in phi]\n        theta=np.linspace(phi[0], phi[1], nr)\n    return R*np.exp(1j*theta)\n```\n\n----------------------------------------\n\nTITLE: Query Top 10 Active Users\nDESCRIPTION: BigQuery SQL query to fetch top 10 most active users based on story submissions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntop10_active_users_query = \"\"\"\nSELECT\n  author AS User,\n  count(author) as Stories\nFROM\n  [fh-bigquery:hackernews.stories]\nGROUP BY\n  User\nORDER BY\n  Stories DESC\nLIMIT\n  10\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Mapping Function for Chord Diagram\nDESCRIPTION: Defines utility functions for mapping intervals to points on a unit circle, which is necessary for creating the circular layout of a chord diagram. Includes a modulo function and a validation function for 2π interval.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPI=np.pi\n\ndef moduloAB(x, a, b): #maps a real number onto the unit circle identified with\n                       #the interval [a,b), b-a=2*PI\n        if a>=b:\n            raise ValueError('Incorrect interval ends')\n        y=(x-a)%(b-a)\n        return y+b if y<0 else y+a\n\ndef test_2PI(x):\n    return 0<= x <2*PI\n```\n\n----------------------------------------\n\nTITLE: Importing and Preparing Apple Stock Data\nDESCRIPTION: Imports Apple stock data from a CSV file, cleans column names, and creates a preview table of the first 10 rows using Plotly's Figure Factory\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-area-animation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\nfrom plotly.tools import FigureFactory as FF\n\nimport time\nfrom datetime import datetime\nimport numpy as np\nimport pandas as pd\n\nappl = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\nappl.columns = [col.replace('AAPL.', '') for col in appl.columns]\napple_data_matrix = appl.head(10).round(2)\n\ntable = FF.create_table(apple_data_matrix)\npy.iplot(table, filename='apple_data_table')\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Theme - Python\nDESCRIPTION: This snippet illustrates how to revert to the version 3 figure appearance by disabling the default theme in Plotly version 4. The `plotly.io` module is used to set the template to 'none'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.templates.default = \"none\"\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\n# Make figure with subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"bar\"},\n                                            {\"type\": \"surface\"}]])\n\n# Add bar traces to subplot (1, 1)\nfig.add_trace(go.Bar(y=[2, 1, 3]), row=1, col=1)\nfig.add_trace(go.Bar(y=[3, 2, 1]), row=1, col=1)\nfig.add_trace(go.Bar(y=[2.5, 2.5, 3.5]), row=1, col=1)\n\n# Add surface trace to subplot (1, 2)\n# Read data from a csv\nz_data = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv\")\nfig.add_surface(z=z_data)\n\n# Hide legend\nfig.update_layout(\n    showlegend=False,\n    title_text=\"Default Theme Disabled\",\n    height=500,\n    width=800,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Reading PLY File Header and Counting Elements in Python\nDESCRIPTION: This code reads the header of the PLY file, prints information about its elements, and counts the number of points and faces in the 3D object. It's crucial for understanding the structure of the PLY data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor element in plydata.elements:\n    print element\n\nnr_points=plydata.elements[0].count\nnr_faces=plydata.elements[1].count\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Controls with the Interact Decorator\nDESCRIPTION: Define an update function decorated with @interact that creates sliders for frequency, phase, and color parameters. The function updates the scatter trace properties in real-time as the widget values change.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interact-decorator.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxs=np.linspace(0, 6, 100)\n\n@interact(a=(1.0, 4.0, 0.01), b=(0, 10.0, 0.01), color=['red', 'green', 'blue'])\ndef update(a=3.6, b=4.3, color='blue'):\n    with fig.batch_update():\n        scatt.x=xs\n        scatt.y=np.sin(a*xs-b)\n        scatt.line.color=color\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher\nDESCRIPTION: Use Plotly's publisher to publish the Jupyter notebook with customized metadata and styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/outlier-test.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Outlier-Test.ipynb', 'python/outlier-test/', 'Outlier Test | plotly',\n    'Learn how to test for outliers in datasets using Python.',\n    title='Outlier Test in Python. | plotly',\n    name='Outlier Test',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=6,\n    ipynb= '~notebook_demo/113')\n```\n\n----------------------------------------\n\nTITLE: Creating Quiver Plot with Figure Factory\nDESCRIPTION: Demonstrates using a Figure Factory to create a specialized 2D quiver plot visualization\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.figure_factory as ff\n\nx1,y1 = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))\nu1 = np.cos(x1)*y1\nv1 = np.sin(x1)*y1\n\nfig = ff.create_quiver(x1, y1, u1, v1)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Plot Creation\nDESCRIPTION: Creates a basic scatter plot showing life expectancy vs GNP using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/graph-data-from-mysql-database-in-python.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=df['GNP'],\n    y=df['LifeExpectancy'],\n    text=country_names,\n    mode='markers'\n)\nlayout = go.Layout(\n    title='Life expectancy vs GNP from MySQL world database',\n    xaxis=dict( type='log', title='GNP' ),\n    yaxis=dict( title='Life expectancy' )\n)\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='world GNP vs life expectancy')\n```\n\n----------------------------------------\n\nTITLE: Testing DataShader Image Generation\nDESCRIPTION: Generates an initial image using the defined function and display it to verify correct operation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Test image generation function and display the PIL image\ninitial_img = gen_ds_image(x_range, y_range, plot_width, plot_height)\n```\n\nLANGUAGE: python\nCODE:\n```\ninitial_img\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Area Funnels in Python\nDESCRIPTION: This snippet demonstrates how to create multiple area funnel plots within a single figure, each representing different categories with distinct data points. This setup allows comprehensive comparisons and insights across several datasets. Dependencies include the plotly.graph_objects library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/funnel-charts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Funnelarea(\n    scalegroup = \"first\", values = [500, 450, 340, 230, 220, 110], textinfo = \"value\",\n    title = {\"position\": \"top center\", \"text\": \"Sales for Sale Person A in U.S.\"},\n    domain = {\"x\": [0, 0.5], \"y\": [0, 0.5]}))\n\nfig.add_trace(go.Funnelarea(\n    scalegroup = \"first\", values = [600, 500, 400, 300, 200, 100], textinfo = \"value\",\n    title = {\"position\": \"top center\", \"text\": \"Sales of Sale Person B in Canada\"},\n    domain = {\"x\": [0, 0.5], \"y\": [0.55, 1]}))\n\nfig.add_trace(go.Funnelarea(\n    scalegroup = \"second\", values = [510, 480, 440, 330, 220, 100], textinfo = \"value\",\n    title = {\"position\": \"top left\", \"text\": \"Sales of Sale Person A in Canada\"},\n    domain = {\"x\": [0.55, 1], \"y\": [0, 0.5]}))\n\nfig.add_trace(go.Funnelarea(\n            scalegroup = \"second\", values = [360, 250, 240, 130, 120, 60],\n            textinfo = \"value\", title = {\"position\": \"top left\", \"text\": \"Sales of Sale Person B in U.S.\"},\n            domain = {\"x\": [0.55, 1], \"y\": [0.55, 1]}))\n\nfig.update_layout(\n            margin = {\"l\": 200, \"r\": 200}, shapes = [\n            {\"x0\": 0, \"x1\": 0.5, \"y0\": 0, \"y1\": 0.5},\n            {\"x0\": 0, \"x1\": 0.5, \"y0\": 0.55, \"y1\": 1},\n            {\"x0\": 0.55, \"x1\": 1, \"y0\": 0, \"y1\": 0.5},\n            {\"x0\": 0.55, \"x1\": 1, \"y0\": 0.55, \"y1\": 1}])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Trisurf Plot with Parula Colorscale in Plotly\nDESCRIPTION: This code generates the same parametric mobius strip as a triangulated surface plot, using the Parula colorscale. The geometry and triangulation are identical to the previous examples, only the color mapping changes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntrace3 = FF.create_trisurf(x=x, y=y, z=z,\n                          simplices=simplices, colormap=parula_rgb, plot_edges=False,\n                          title='Parula Colorscale for Trisurf Plot')\npy.iplot(trace3)\n```\n\n----------------------------------------\n\nTITLE: Adding Minor Ticks to Log Plot\nDESCRIPTION: Shows how to add and style minor ticks on a logarithmic axis using the minor parameter, including tick length, position, and grid lines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/log-plot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\n\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", hover_name=\"country\",\n                 log_x=True, range_x=[1,100000], range_y=[0,100])\n\nfig.update_xaxes(minor=dict(ticks=\"inside\", ticklen=6, showgrid=True))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Scatter Trace to Plotly FigureWidget (Python)\nDESCRIPTION: This snippet adds a scatter trace to the existing FigureWidget. It uses the `add_scatter` method to include a scatter plot with the specified y-values. This will dynamically update the FigureWidget display.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf.add_scatter(y=[2, 1, 4, 3]);\n```\n\n----------------------------------------\n\nTITLE: Normalizing Complaint Data and Creating Grouped Bar Chart\nDESCRIPTION: Normalizes complaint counts to percentages by city and creates a grouped bar chart visualization with custom layout settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfor trace in traces:\n    trace['y'] = 100.*trace['y']/sum(trace['y'])\n\npy.iplot({'data': traces,\n          'layout': go.Layout(\n                barmode='group',\n                xaxis={'tickangle': 40, 'autorange': False, 'range': [-0.5, 16]},\n                yaxis={'title': 'Percent of Complaints by City'},\n                margin={'b': 150},\n                title='Relative Number of 311 Complaints by City')\n         }, filename='311/relative complaints by city', validate=False)\n```\n\n----------------------------------------\n\nTITLE: Plotly: Pie Chart with Proportional Area\nDESCRIPTION: This snippet demonstrates how to create pie charts where the area of each pie is proportional to its total value.  It utilizes the `scalegroup` attribute to link the pies, ensuring the areas reflect the relative magnitudes of the values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = [\\\"Asia\\\", \\\"Europe\\\", \\\"Africa\\\", \\\"Americas\\\", \\\"Oceania\\\"]\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['1980', '2007'])\nfig.add_trace(go.Pie(labels=labels, values=[4, 7, 1, 7, 0.5], scalegroup='one',\n                     name=\\\"World GDP 1980\\\"), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[21, 15, 3, 19, 1], scalegroup='one',\n                     name=\\\"World GDP 2007\\\"), 1, 2)\n\nfig.update_layout(title_text='World GDP')\nfig.show()\"\n```\n\n----------------------------------------\n\nTITLE: Finding Top 10 Cities by Complaint Count\nDESCRIPTION: Retrieves the top 10 cities with the most complaints, ordered by complaint count in descending order.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT City, COUNT(*) as `num_complaints` '\n                                'FROM data '\n                                'GROUP BY `City` '\n                       'ORDER BY -num_complaints '\n                       'LIMIT 10 ', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Coordinates for Node and Edge Visualization in Python\nDESCRIPTION: This code sets up the x, y, and z coordinates for the nodes and edges in the graph, preparing data for Plotly plot. It handles coordinate extraction from the graph layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nXn=[layt[k][0] for k in range(N)]# x-coordinates of nodes\nYn=[layt[k][1] for k in range(N)]# y-coordinates\nZn=[layt[k][2] for k in range(N)]# z-coordinates\nXe=[]\nYe=[]\nZe=[]\nfor e in Edges:\n    Xe+=[layt[e[0]][0],layt[e[1]][0], None]# x-coordinates of edge ends\n    Ye+=[layt[e[0]][1],layt[e[1]][1], None]\n    Ze+=[layt[e[0]][2],layt[e[1]][2], None]\n```\n\n----------------------------------------\n\nTITLE: Updates to make_subplots - Python\nDESCRIPTION: This snippet discusses updates to the `make_subplots` function in version 4, including its preferred import location and changes to default behavior regarding printing the grid.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# New preferred import location\nfrom plotly.subplots import make_subplots\n\n# Default value of print_grid is now False\n\n```\n\n----------------------------------------\n\nTITLE: Ternary Contour Plot: Cartesian Interpolation\nDESCRIPTION: This snippet creates a ternary contour plot using Cartesian interpolation.  It defines coordinate grids a and b such that a + b <= 1, then stacks (a,b, 1-a-b) into coords, and calculates value based on a and b. The plot is generated by create_ternary_contour, and the interp_mode parameter defaults to Cartesian.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ternary-contour.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na, b = np.mgrid[0:1:20j, 0:1:20j]\nmask = a + b <= 1\na, b = a[mask], b[mask]\ncoords = np.stack((a, b, 1 - a - b))\nvalue = np.sin(3.2 * np.pi * (a + b)) + np.sin(3 * np.pi * (a - b))\nfig = ff.create_ternary_contour(coords, value, ncontours=9)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: PySpark Setup Script for IPython Startup\nDESCRIPTION: A Python script that initializes the Spark Context when an IPython notebook with the PySpark profile is started. It checks for a valid Spark installation, sets up the necessary Python paths, and imports the Spark Context.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_4\n\nLANGUAGE: py\nCODE:\n```\nimport os\nimport sys\n\nspark_home = os.environ.get('SPARK_HOME', None)\n\n# check if it exists\nif not spark_home:\n    raise ValueError('SPARK_HOME environment variable is not set')\n\n# check if it is a directory\nif not os.path.isdir(spark_home):\n    raise ValueError('SPARK_HOME environment variable is not a directory')\n\n#check if we can find the python sub-directory\nif not os.path.isdir(os.path.join(spark_home, 'python')):\n    raise ValueError('SPARK_HOME directory does not contain python')\n\nsys.path.insert(0, os.path.join(spark_home, 'python'))\n\n#check if we can find the py4j zip file\nif not os.path.exists(os.path.join(spark_home, 'python/lib/py4j-0.8.2.1-src.zip')):\n    raise ValueError('Could not find the py4j library - \\\n            maybe your version number is different?(Looking for 0.8.2.1)')\n\nsys.path.insert(0, os.path.join(spark_home, 'python/lib/py4j-0.8.2.1-src.zip'))\n\nwith open(os.path.join(spark_home, 'python/pyspark/shell.py')) as f:\n    code = compile(f.read(), os.path.join(spark_home, 'python/pyspark/shell.py'), 'exec')\n    exec(code)\n```\n\n----------------------------------------\n\nTITLE: Applying Q-Test to Wind Speed Dataset\nDESCRIPTION: Extract a subset of the wind speed data, sort it, and apply the Q-Test to determine if the minimum value is an outlier.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/outlier-test.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndataset = data[100:130]['10 Min Sampled Avg'].values.tolist()\ndataset.sort()\nq_test_for_smallest_point(dataset)\n```\n\n----------------------------------------\n\nTITLE: Installing Orca with npm and pip for Static Image Export\nDESCRIPTION: Commands to install Orca using npm for the Electron application and pip for Python dependencies. This approach uses npm to install electron version 1.8.4 and orca globally, then pip for psutil and requests.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g electron@1.8.4 orca\n$ pip install psutil requests\n```\n\n----------------------------------------\n\nTITLE: Reversed Mode ECDF Plot\nDESCRIPTION: Demonstrates a reversed mode ECDF plot showing fraction at or above X value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfig = px.ecdf(df, x=[1,2,3,4], markers=True, ecdfmode=\"reversed\",\n              title=\"ecdfmode='reversed' (Y=fraction at or above X value)\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding 3D Text Annotations with Plotly Graph Objects in Python\nDESCRIPTION: This example demonstrates how to add 3D text annotations using `plotly.graph_objects`. It illustrates positioning annotations in a 3D scatter plot, including both show and hide arrow options, with customized appearance and behavior of annotations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter3d(\n    x=[\"2017-01-01\", \"2017-02-10\", \"2017-03-20\"],\n    y=[\"A\", \"B\", \"C\"],\n    z=[1, 1000, 100000],\n    name=\"z\",\n))\n\nfig.update_layout(\n    scene=dict(\n        xaxis=dict(type=\"date\"),\n        yaxis=dict(type=\"category\"),\n        zaxis=dict(type=\"log\"),\n        annotations=[\n        dict(\n            showarrow=False,\n            x=\"2017-01-01\",\n            y=\"A\",\n            z=0,\n            text=\"Point 1\",\n            xanchor=\"left\",\n            xshift=10,\n            opacity=0.7),\n        dict(\n            x=\"2017-02-10\",\n            y=\"B\",\n            z=4,\n            text=\"Point 2\",\n            textangle=0,\n            ax=0,\n            ay=-75,\n            font=dict(\n                color=\"black\",\n                size=12\n            ),\n            arrowcolor=\"black\",\n            arrowsize=3,\n            arrowwidth=1,\n            arrowhead=1),\n        dict(\n            x=\"2017-03-20\",\n            y=\"C\",\n            z=5,\n            ax=50,\n            ay=0,\n            text=\"Point 3\",\n            arrowhead=1,\n            xanchor=\"left\",\n            yanchor=\"bottom\"\n        )]\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Specific Margin Adjustment in Plotly\nDESCRIPTION: Shows how to set automargin for specific sides of the figure (left and top). Creates a bar chart with custom axis settings and selective margin adjustment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/setting-graph-size.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=[\"Apples\", \"Oranges\", \"Watermelon\", \"Pears\"],\n    y=[3, 2, 1, 4]\n))\n\nfig.update_layout(\n    autosize=False,\n    width=500,\n    height=500,\n    yaxis=dict(\n        title=dict(\n            text=\"Y-axis Title\",\n            font=dict(\n                size=30\n            )\n        ),\n        ticktext=[\"Very long label\", \"long label\", \"3\", \"label\"],\n        tickvals=[1, 2, 3, 4],\n        tickmode=\"array\",\n    )\n)\n\nfig.update_yaxes(automargin='left+top')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Custom Text and Labels with Legacy Figure Factory\nDESCRIPTION: Demonstrates creating a heatmap with custom text annotations and axis labels using the legacy figure factory method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nz = [[.1, .3, .5],\n     [1.0, .8, .6],\n     [.6, .4, .2]]\n\nx = ['Team A', 'Team B', 'Team C']\ny = ['Game Three', 'Game Two', 'Game One']\n\nz_text = [['Win', 'Lose', 'Win'],\n          ['Lose', 'Lose', 'Win'],\n          ['Win', 'Win', 'Lose']]\n\nfig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='Viridis')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Polar Scatter Chart with Random Data in Python\nDESCRIPTION: This snippet shows how to create a polar scatter chart with randomly generated data points. It creates multiple scatter traces with different colors and positions, then applies styling to markers including size, color, and opacity.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/legacy-polar-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\ntrace1 = go.Scatter(\n    r = np.random.uniform(1,6,size=62),\n    t = np.random.uniform(30,5,size=62),\n    mode='markers',\n    name='Trial 1',\n    marker=dict(\n        color='rgb(27,158,119)',\n        size=110,\n        line=dict(\n            color='white'\n        ),\n        opacity=0.7\n    )\n)\ntrace2 = go.Scatter(\n    r=np.random.uniform(3,8,size=62),\n    t=np.random.uniform(-14,-76,size=62),\n    mode='markers',\n    name='Trial 2',\n    marker=dict(\n        color='rgb(217,95,2)',\n        size=110,\n        line=dict(\n            color='white'\n        ),\n        opacity=0.7\n    )\n)\ntrace3 = go.Scatter(\n    r=np.random.uniform(1,7,size=62),\n    t=np.random.uniform(131,111,size=62),\n    mode='markers',\n    name='Trial 3',\n    marker=dict(\n        color='rgb(117,112,179)',\n        size=110,\n        line=dict(\n            color='white'\n        ),\n        opacity=0.7\n    )\n)\ntrace4 = go.Scatter(\n    r=np.random.uniform(1,9,size=62),\n    t=np.random.uniform(-140,-177,size=62),\n    mode='markers',\n    name='Trial 4',\n    marker=dict(\n        color='rgb(231,41,138)',\n        size=110,\n        line=dict(\n            color='white'\n        ),\n        opacity=0.7\n    )\n)\ntrace5 = go.Scatter(\n    r=np.random.uniform(1,3,size=62),\n    t=np.random.uniform(-100,-163,size=62),\n    mode='markers',\n    name='Trial 5',\n    marker=dict(\n        color='rgb(102,166,30)',\n        size=110,\n        line=dict(\n            color='white'\n        ),\n        opacity=0.7\n    )\n)\ntrace6 = go.Scatter(\n    r=np.random.uniform(0,5,size=62),\n    t=np.random.uniform(66,47,size=62),\n    mode='markers',\n    name='Trial 6',\n    marker=dict(\n        color='rgb(230,171,2)',\n        size=110,\n        line=dict(\n            color='white'\n        ),\n        opacity=0.7\n    )\n)\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\nlayout = go.Layout(\n    title='Hobbs-Pearson Trials',\n    font=dict(\n        size=15\n    ),\n    plot_bgcolor='rgb(223, 223, 223)',\n    angularaxis=dict(\n        tickcolor='rgb(253,253,253)'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating Icicle Chart with Repeated Labels in Plotly Graph Objects\nDESCRIPTION: This example illustrates creating an icicle chart using Plotly Graph Objects in Python with repeated labels. The 'ids' attribute differentiates nodes with the same label, ensuring accurate hierarchical representation. Margin is adjustable. Dependency: plotly.graph_objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig =go.Figure(go.Icicle(\n ids=[\"Sports\",\n    \"North America\", \"Europe\", \"Australia\", \"North America - Football\", \"Soccer\",\n    \"North America - Rugby\", \"Europe - Football\", \"Rugby\",\n    \"Europe - American Football\",\"Australia - Football\", \"Association\",\n    \"Australian Rules\", \"Autstralia - American Football\", \"Australia - Rugby\",\n    \"Rugby League\", \"Rugby Union\"\n  ],\n  labels= [\"Sports\",\n    \"North<br>America\", \"Europe\", \"Australia\", \"Football\", \"Soccer\", \"Rugby\",\n    \"Football\", \"Rugby\", \"American<br>Football\", \"Football\", \"Association\",\n    \"Australian<br>Rules\", \"American<br>Football\", \"Rugby\", \"Rugby<br>League\",\n    \"Rugby<br>Union\"\n  ],\n  parents=[\"\",\n    \"Sports\", \"Sports\", \"Sports\", \"North America\", \"North America\", \"North America\", \"Europe\",\n    \"Europe\", \"Europe\",\"Australia\", \"Australia - Football\", \"Australia - Football\",\n    \"Australia - Football\", \"Australia - Football\", \"Australia - Rugby\",\n    \"Australia - Rugby\"\n  ],\n    root_color=\"lightgrey\"\n))\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Secondary Statistics on Alcohol Consumption Data in Python\nDESCRIPTION: This code calculates and prints secondary statistics including median, maximum, and minimum values of the alcohol consumption data using NumPy functions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/basic-statistics.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmedian = np.median(data['alcohol'])\nmaximum = np.max(data['alcohol'])\nminimum = np.min(data['alcohol'])\n\nprint(\"The median is %r\") %(median)\nprint(\"The maximum is %r\") %(maximum)\nprint(\"The minimum is %r\") %(minimum)\n```\n\n----------------------------------------\n\nTITLE: Styling Axis Lines in Plotly Express with Python\nDESCRIPTION: This snippet demonstrates how to enable and customize the appearance of axis lines in a Plotly Express histogram.  It uses `update_xaxes` and `update_yaxes` to set the `showline`, `linewidth`, and `linecolor` properties for both x and y axes. The resulting plot will display the x and y axes with the specified line styles.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/axes.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\n\nfig = px.histogram(df, x=\"sex\", y=\"tip\", histfunc='sum', facet_col='smoker')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black')\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black')\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Subplot Grid for Scatter Matrix\nDESCRIPTION: Generates a 6x6 grid of subplots using Plotly's get_subplots function. This grid will hold the scatter matrix comparing all combinations of stock tickers against each other.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig = plotly_tools.get_subplots(rows=6, columns=6, print_grid=True, horizontal_spacing= 0.05, vertical_spacing= 0.05)\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean and Standard Deviation of Alcohol Consumption Data in Python\nDESCRIPTION: This snippet calculates and prints the mean and standard deviation of the alcohol consumption data using NumPy functions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/basic-statistics.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmean = np.mean(data['alcohol'])\nst_dev = np.std(data['alcohol'])\n\nprint(\"The mean is %r\") %(mean)\nprint(\"The standard deviation is %r\") %(st_dev)\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap Visualizations for Cmocean Colorscales in Python\nDESCRIPTION: This function creates a subplot with three heatmaps using different datasets to visualize a given colorscale. It uses Plotly's make_subplots and Heatmap objects to generate the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cmocean-colorscales.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef colorscale_plot(colorscale, title):\n    trace1 = go.Heatmap(z=hist2d, colorscale=colorscale, showscale=False)\n    trace2 = go.Heatmap(z=st_helens, colorscale=colorscale, y0=-5, x0=-5)\n    trace3 = go.Heatmap(z=z,colorscale=colorscale, showscale=False)\n\n    fig = tools.make_subplots(rows=1, cols=3, print_grid=False)\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n    fig.append_trace(trace3, 1, 3)\n\n    fig['layout'].update(title=title)\n    fig['layout']['xaxis2'].update(range=[0, 450])\n    fig['layout']['yaxis2'].update(range=[0, 270])\n\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Defining Moebius Band Parameterization\nDESCRIPTION: Imports necessary libraries and defines the parameterization for a Moebius band surface using NumPy. Creates a meshgrid on the rectangular parameter space.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nimport matplotlib.cm as cm\nfrom scipy.spatial import Delaunay\n\nu=np.linspace(0,2*np.pi, 24)\nv=np.linspace(-1,1, 8)\nu,v=np.meshgrid(u,v)\nu=u.flatten()\nv=v.flatten()\n\n#evaluate the parameterization at the flattened u and v\ntp=1+0.5*v*np.cos(u/2.)\nx=tp*np.cos(u)\ny=tp*np.sin(u)\nz=0.5*v*np.sin(u/2.)\n\n#define 2D points, as input data for the Delaunay triangulation of U\npoints2D=np.vstack([u,v]).T\ntri = Delaunay(points2D)#triangulate the rectangle U\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for make_subplots Function in Plotly (Python)\nDESCRIPTION: This snippet shows how to access the help documentation for the make_subplots function from the plotly.subplots module, which provides detailed information about its usage and parameters.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/subplots.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\nhelp(make_subplots)\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hook for Black Formatter\nDESCRIPTION: The snippet shows how to install a pre-commit hook using pre-commit to automatically run the Black formatter before each commit. The Black formatter ensures code consistency according to its style guide. Ensure that pre-commit and Black are installed and listed in the 'requires-optional.txt' file.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n(plotly_dev) $ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Integration of `_repr_html_` and `_repr_mimebundle_` for Plotly Figures\nDESCRIPTION: This snippet showcases the addition of `_repr_html_` and `_repr_mimebundle_` methods to Plotly figures, enabling better integration with IPython-based systems like Jupyter Notebooks and Sphinx. These methods allow figures to be correctly represented and displayed in various contexts without requiring additional scraping.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nplotly.go.Figure()._repr_html_()\n```\n\nLANGUAGE: python\nCODE:\n```\nplotly.go.Figure()._repr_mimebundle_()\n```\n\n----------------------------------------\n\nTITLE: Performing Two-Way ANOVA Test on Tooth Growth Data in Python\nDESCRIPTION: This code demonstrates how to perform a two-way ANOVA test using Statsmodels. It creates a formula that models tooth length as a function of supplement type, dose, and their interaction, then fits the model and generates an ANOVA table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/anova.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nformula = 'len ~ C(supp) + C(dose) + C(supp):C(dose)'\nmodel = ols(formula, data).fit()\naov_table = statsmodels.stats.anova.anova_lm(model, typ=2)\nprint(aov_table)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing Notebook with Plotly\nDESCRIPTION: This code sets up custom styling for the notebook, installs the Plotly publisher package, and publishes the notebook to Plotly's documentation. It demonstrates how to prepare and share the visualization work.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'triangulation.ipynb', 'python/surface-triangulation/', 'Surface Triangulation',\n    'How to make Tri-Surf plots in Python with Plotly.',\n    title = 'Python Surface Triangulation | plotly',\n    name = 'Surface Triangulation',\n    has_thumbnail='true', thumbnail='thumbnail/trisurf.jpg',\n    language='python',\n    display_as='3d_charts', order=11,\n    ipynb= '~notebook_demo/71')\n```\n\n----------------------------------------\n\nTITLE: Accessing Histogram Counts with NumPy\nDESCRIPTION: This snippet shows how to access the underlying counts (y-axis values) of a histogram by using NumPy's `histogram` function. This allows direct manipulation of the histogram data. It calculates the bin edges, computes the counts and then uses `plotly.express` to generate a bar chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport numpy as np\n\ndf = px.data.tips()\n# create the bins\ncounts, bins = np.histogram(df.total_bill, bins=range(0, 60, 5))\nbins = 0.5 * (bins[:-1] + bins[1:])\n\nfig = px.bar(x=bins, y=counts, labels={'x':'total_bill', 'y':'count'})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Labels and Color Scheme for Chord Diagram\nDESCRIPTION: Sets up the labels for each entity (Facebook friends) and assigns a color scheme using ColorBrewer colors with alpha transparency for the ideograms in the chord diagram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlabels=['Emma', 'Isabella', 'Ava', 'Olivia', 'Sophia']\nideo_colors=['rgba(244, 109, 67, 0.75)',\n             'rgba(253, 174, 97, 0.75)',\n             'rgba(254, 224, 139, 0.75)',\n             'rgba(217, 239, 139, 0.75)',\n             'rgba(166, 217, 106, 0.75)']#brewer colors with alpha set on 0.75\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Headers for Plotly Subplots\nDESCRIPTION: ReStructuredText markup defining the documentation structure for the plotly.subplots module, including section headers and autosummary directives.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/plotly.subplots.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _subplots:\n\n`plotly.subplots`: helper function for laying out multi-plot figures\n===========================\n\n.. currentmodule:: plotly.subplots\n\n.. autosummary::\n    :toctree: generated/\n    :template: function.rst\n\n    make_subplots\n\n\n.. autofunction:: plotly.subplots.make_subplots\n```\n\n----------------------------------------\n\nTITLE: Simple Annotated Heatmap with Figure Factory\nDESCRIPTION: Creates a basic annotated heatmap using the deprecated figure factory method ff.create_annotated_heatmap().\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/annotated-heatmap.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nz = [[.1, .3, .5, .7, .9],\n     [1, .8, .6, .4, .2],\n     [.2, 0, .5, .7, .9],\n     [.9, .8, .4, .2, 0],\n     [.3, .4, .5, .7, 1]]\n\nfig = ff.create_annotated_heatmap(z)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Plotly for Apple Stock Data\nDESCRIPTION: Creates a Plotly line plot with two traces: one for Apple stock prices and another for the moving average. This visualization will be included in the final HTML report as an interactive D3.js chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxy_data = go.Scatter( x=x, y=y, mode='markers', marker=dict(size=4), name='AAPL' )\n# vvv clip first and last points of convolution\nmov_avg = go.Scatter( x=x[5:-4], y=ma[5:-4], \\\n                  line=dict(width=2,color='red',opacity=0.5), name='Moving average' )\ndata = [xy_data, mov_avg]\n\npy.iplot(data, filename='apple stock moving average')\n```\n\n----------------------------------------\n\nTITLE: Registering a Named Template in Plotly\nDESCRIPTION: Shows how to register a custom template with a name in the plotly.io.templates configuration object. The template can then be referenced by name when creating figures.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\npio.templates[\"draft\"] = go.layout.Template(\n    layout_annotations=[\n        dict(\n            name=\"draft watermark\",\n            text=\"DRAFT\",\n            textangle=-30,\n            opacity=0.1,\n            font=dict(color=\"black\", size=100),\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=0.5,\n            showarrow=False,\n        )\n    ]\n)\n\nfig = go.Figure()\nfig.update_layout(template=\"draft\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Extracting File IDs and Creating Dashboard Boxes\nDESCRIPTION: Defines helper functions to extract file IDs and share keys from plot URLs, then creates three different box types (plot, text, and secret plot) for the dashboard and inserts the first box.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\ndef fileId_from_url(url):\n    \"\"\"Return fileId from a url.\"\"\"\n    raw_fileId = re.findall(\"~[A-z]+/[0-9]+\", url)[0][1: ]\n    return raw_fileId.replace('/', ':')\n\ndef sharekey_from_url(url):\n    \"\"\"Return the sharekey from a url.\"\"\"\n    if 'share_key=' not in url:\n        return \"This url is not 'sercret'. It does not have a secret key.\"\n    return url[url.find('share_key=') + len('share_key='):]\n\nfileId_1 = fileId_from_url(url_1)\nfileId_2 = fileId_from_url(url_2)\n\nbox_a = {\n    'type': 'box',\n    'boxType': 'plot',\n    'fileId': fileId_1,\n    'title': 'scatter-for-dashboard'\n}\n\ntext_for_box = \"\"\"\n## Distributions:\n\n\n#### Scatter Plot\n1. Ranging 0 - 500\n2. Even distribution\n\n#### Box Plot\n1. Similar Range\n2. Outliers present in trace 1 and trace 3\n\nYou can view more markdown tips [here](https://daringfireball.net/projects/markdown/syntax).\n\"\"\"\n\nbox_b = {\n    'type': 'box',\n    'boxType': 'text',\n    'text': text_for_box,\n    'title': 'Markdown Options for Text Box'\n}\n\nbox_c = {\n    'type': 'box',\n    'boxType': 'plot',\n    'fileId': fileId_2,\n    'title': 'box-for-dashboard',\n    'shareKey': sharekey_from_url(url_2)\n}\n\nmy_dboard.insert(box_c)\n```\n\n----------------------------------------\n\nTITLE: Loading County Unemployment Data Using Pandas in Python\nDESCRIPTION: This snippet demonstrates how to load a CSV file containing unemployment data for US counties using the Pandas library. The data is indexed by FIPS code and will be used to color the choropleth map.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Relabeling chart labels in Plotly Express\nDESCRIPTION: Demonstrates how to relabel axis and legend labels for a chart created from wide-form data in Plotly Express. The `labels` argument is used to customize label text. Outputs a styled figure object.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], title=\"Wide-Form Input, relabelled\",\n            labels={\"value\": \"count\", \"variable\": \"medal\"})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Counting Distinct Cities in Dataset\nDESCRIPTION: Determines the number of unique cities in the dataset by using SQL DISTINCT and Python's len function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlen(pd.read_sql_query('SELECT DISTINCT City FROM data', disk_engine))\n```\n\n----------------------------------------\n\nTITLE: Converting Matplotlib Colormaps to Plotly Format in Python\nDESCRIPTION: This code imports and converts Matplotlib colormaps (Magma, Viridis, and Parula) to RGB format for use with Plotly. It defines a conversion function 'matplotlib_to_plotly' that transforms colormap objects to Plotly's colorscale format.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport parula as par\nimport matplotlib\nfrom matplotlib import cm\nimport numpy as np\n\nmagma_cmap = matplotlib.cm.get_cmap('magma')\nviridis_cmap = matplotlib.cm.get_cmap('viridis')\nparula_cmap = par.parula_map\n\nviridis_rgb = []\nmagma_rgb = []\nparula_rgb = []\nnorm = matplotlib.colors.Normalize(vmin=0, vmax=255)\n\nfor i in range(0, 255):\n       k = matplotlib.colors.colorConverter.to_rgb(magma_cmap(norm(i)))\n       magma_rgb.append(k)\n\nfor i in range(0, 255):\n       k = matplotlib.colors.colorConverter.to_rgb(viridis_cmap(norm(i)))\n       viridis_rgb.append(k)\n\nfor i in range(0, 255):\n       k = matplotlib.colors.colorConverter.to_rgb(parula_cmap(norm(i)))\n       parula_rgb.append(k)\n\ndef matplotlib_to_plotly(cmap, pl_entries):\n    h = 1.0/(pl_entries-1)\n    pl_colorscale = []\n\n    for k in range(pl_entries):\n        C = map(np.uint8, np.array(cmap(k*h)[:3])*255)\n        pl_colorscale.append([k*h, 'rgb'+str((C[0], C[1], C[2]))])\n\n    return pl_colorscale\n\nmagma = matplotlib_to_plotly(magma_cmap, 255)\nviridis = matplotlib_to_plotly(viridis_cmap, 255)\nparula = matplotlib_to_plotly(parula_cmap, 255)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Line Chart Example in IPython\nDESCRIPTION: Renders an embedded Dash application showing line charts within a Jupyter notebook. The code creates an IFrame to display a Dash example from an external URL, providing a demonstration of how line charts can be integrated into Dash applications.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'line-charts', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for DataShader and Plotly\nDESCRIPTION: Imports necessary packages including core Python libraries, data processing libraries (pandas, numpy), scikit-learn for dataset access, and datashader for efficient large dataset visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# core\nimport io\nimport base64\nimport time\n\n# pandas\nimport pandas as pd\n\n# numpy\nimport numpy as np\n\n# scikit learn\nfrom sklearn import datasets\n\n# datashader\nimport datashader as ds\nimport datashader.transfer_functions as tf\nfrom datashader.colors import inferno\n```\n\n----------------------------------------\n\nTITLE: Display Named Colorscales in Python\nDESCRIPTION: Code snippet that imports Plotly Express and prints all available named colorscales in a formatted output using textwrap.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/builtin-colorscales.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom textwrap import wrap\n\nnamed_colorscales = px.colors.named_colorscales()\nprint(\"\\n\".join(wrap(\"\".join('{:<12}'.format(c) for c in named_colorscales), 96)))\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted and Colored Strip Charts with Plotly Express in Python\nDESCRIPTION: This snippet shows how to enhance strip charts with color coding and facet columns using Plotly Express. The `px.strip()` function is used here to differentiate data points by the 'sex' column and facet by 'day', providing a more detailed visualization. The dataset and the columns for x, y-axis, color, and facet must be defined for proper functioning.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/strip-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.strip(df, x=\"total_bill\", y=\"time\", color=\"sex\", facet_col=\"day\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Figure Factory Module in Python\nDESCRIPTION: Example code showing how to import the Plotly figure factory module in Python. The figure factory provides tools for creating specialized visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n```\n\n----------------------------------------\n\nTITLE: Customizing Hover Templates for Contrast-Rescaled Images in Plotly\nDESCRIPTION: Demonstrates how to set binary_string=False to retain intensity values in hover information for contrast-rescaled images. Also shows how to customize the hovertemplate to display both original and rescaled values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import data\nimg = data.chelsea()\n# Increase contrast by clipping the data range between 50 and 200\nfig = px.imshow(img, binary_string=False, zmin=50, zmax=200)\n# We customize the hovertemplate to show both the data and the color values\n# See https://plotly.com/python/hover-text-and-formatting/#customize-tooltip-text-with-a-hovertemplate\nfig.update_traces(hovertemplate=\"x: %{x} <br> y: %{y} <br> z: %{z} <br> color: %{color}\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Node Alignment in Sankey Diagram using Plotly Python\nDESCRIPTION: The snippet illustrates how to align nodes in a Sankey diagram using Plotly in Python with the `node.align` attribute. Two examples show nodes aligned to the 'left' and 'right'. The alignment feature enhances data readability and visualization customization. It utilizes the same `source` and `target` mappings for consistency in visualization structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Sankey(\n    arrangement='snap',\n    node=dict(\n        label=[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"],\n        align='left'\n\n    ),\n    link=dict(\n        arrowlen=15,\n        source=[0, 1, 4, 2, 1],\n        target=[1, 4, 5, 4, 3],\n        value=[4, 2, 3, 1, 2]\n    )\n))\n\nfig.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Sankey(\n    arrangement='snap',\n    node=dict(\n        label=[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"],\n        align=\"right\",\n    ),\n    link=dict(\n        arrowlen=15,\n        source=[0, 1, 4, 2, 1],\n        target=[1, 4, 5, 4, 3],\n        value=[4, 2, 3, 1, 2]\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map by GeoJSON Property Match in Python\nDESCRIPTION: Sets up a choropleth map where GeoJSON properties are used to match DataFrame values, demonstrating property-based location matching with Plotly Express. The example colors by votes for a specific candidate and configures map appearance.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\ngeojson = px.data.election_geojson()\n\nfig = px.choropleth_map(df, geojson=geojson, color=\"Bergeron\",\n                           locations=\"district\", featureidkey=\"properties.district\",\n                           center={\"lat\": 45.5517, \"lon\": -73.7073},\n                           map_style=\"carto-positron\", zoom=9)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly using pip in Python\nDESCRIPTION: This command installs the Plotly library using pip, the Python package installer.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install plotly\n```\n\n----------------------------------------\n\nTITLE: Fitting a Gaussian Curve to a Detected Peak in Python\nDESCRIPTION: Define a Gaussian function, isolate a specific peak, and fit a Gaussian curve to it using PeakUtils. Visualize the original data, detected peaks, and the fitted Gaussian using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-fitting.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef gaussian(x, mu, sig):\n    return np.exp(-np.power(x - mu, 2.) / (2 * np.power(sig, 2.)))\n\nfirst_index = indices[6]\nleft_gauss_bound = 1894\nright_gauss_bound = 1910\n\nx_values_1 = np.asarray(x[left_gauss_bound-left_endpt:right_gauss_bound-left_endpt])\ny_values_1 = np.asarray(y[left_gauss_bound-left_endpt:right_gauss_bound-left_endpt])\n\ngaussian_params_1 = peakutils.gaussian_fit(x_values_1, y_values_1, center_only=False)\ngaussian_y_1 = [gaussian(x_dummy, gaussian_params_1[1], 1.5) for x_dummy in x_values_1]\n\ntrace = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n    marker=dict(\n        color='rgb(0,56,210)'\n    ),\n    name='Highlighted Plot'\n)\n\ntrace2 = go.Scatter(\n    x=indices + left_endpt,\n    y=[y[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='rgb(255,0,0)',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n)\n\ntrace3 = go.Scatter(\n    x=[item_x + 1.5 for item_x in x_values_1],\n    y=[item_y + 38.2 for item_y in gaussian_y_1],\n    mode='lines',\n    marker=dict(\n        size=2,\n        color='rgb(200,0,250)',\n    ),\n    name='Gaussian Fit'\n)\n\ndata = [trace, trace2, trace3]\npy.iplot(data, filename='stock-data-with-peaks-and-fit')\n```\n\n----------------------------------------\n\nTITLE: Displaying Bar Chart with PNG Renderer in Python\nDESCRIPTION: Creates a simple bar chart figure and displays it using the PNG renderer. This example demonstrates basic figure creation and custom renderer usage.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure(\n    data=[go.Bar(y=[2, 1, 3])],\n    layout_title_text=\"A Figure Displayed with the 'png' Renderer\"\n)\nfig.show(renderer=\"png\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Raw Wind Speed Data\nDESCRIPTION: This snippet creates a line plot of the raw wind speed data using Plotly, visualizing the '10 Min Std Dev' column from the dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/fft-filters.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=list(range(len(list(data['10 Min Std Dev'])))),\n    y=list(data['10 Min Std Dev']),\n    mode='lines',\n    name='Wind Data'\n)\n\nlayout = go.Layout(\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='wind-raw-data-plot')\n```\n\n----------------------------------------\n\nTITLE: Setting Figure Title Using Plotly Property Assignment\nDESCRIPTION: Demonstrates how to set a figure title using property assignment syntax in Plotly. Creates a bar chart and sets its title through the layout.title.text property.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure(data=go.Bar(x=[1, 2, 3], y=[1, 3, 2]))\nfig.layout.title.text = \"Using Property Assignment Syntax With A Graph Object Figure\"\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Processing Apple Stock Data with Moving Average\nDESCRIPTION: Fetches Apple stock data for 2014 using matplotlib's finance module and calculates a moving average with numpy's convolution function. This prepares the data for the first visualization in the report.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = []\ny = []\nma = []\n\ndef moving_average(interval, window_size):\n    window = np.ones(int(window_size))/float(window_size)\n    return np.convolve(interval, window, 'same')\n\ndate1 = dt_date( 2014, 1, 1 )\ndate2 = dt_date( 2014, 12, 12 )\nquotes = quotes_historical_yahoo('AAPL', date1, date2)\nif len(quotes) == 0:\n    print \"Couldn't connect to yahoo trading database\"\nelse:\n    dates = [q[0] for q in quotes]\n    y = [q[1] for q in quotes]\n    for date in dates:\n        x.append(datetime.fromordinal(int(date))\\\n                .strftime('%Y-%m-%d')) # Plotly timestamp format\n    ma = moving_average(y, 10)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying PNG Renderer Configuration\nDESCRIPTION: Shows how to access the PNG renderer object and display its configuration options through the plotly.io.renderers interface.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npng_renderer = pio.renderers[\"png\"]\npng_renderer\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Frequency Counts in Plotly\nDESCRIPTION: Creates a histogram showing the raw frequency counts of alcohol consumption data. Configures bin size and styling for clear visualization of the distribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x,\n                     xbins=dict(start=np.min(x),\n                                size=0.25,\n                                end=np.max(x)),\n                     marker=dict(color='rgb(25, 25, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram with Frequency Count\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-discrete-freq-count')\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Timestamps using SQL and Pandas\nDESCRIPTION: This snippet demonstrates how to use SQL's strftime function to extract the hour from timestamps and query the data using Pandas. It selects the CreatedDate, extracted hour, and ComplaintType from the 'data' table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                              'strftime(\\'%H\\', CreatedDate) as hour, '\n                              'ComplaintType '\n                       'FROM data '\n                       'LIMIT 5 ', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Creating 2D-Density Charts with FigureFactory in Python\nDESCRIPTION: Example of how to use the FigureFactory to create 2D-density charts. This snippet shows how to access the help documentation for the create_2D_density function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.tools as tls\nhelp(tls.FigureFactory.create_2D_density)\n```\n\n----------------------------------------\n\nTITLE: Scaling a Dataset and Visualizing with Plotly in Python\nDESCRIPTION: This snippet demonstrates scaling a dataset by multiplying each value by 2 and visualizing both the original and scaled data using Plotly scatter plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/simple-mathematics-operations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = data['Date']\ny = data['A']\ny2 = [2.*k for k in y]\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Data',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=y2,\n    mode='markers',\n    name='Scaled by 2',\n    marker=dict(\n        size=12,\n        symbol='x'\n    )\n)\n\ntrace_data = [trace1, trace2]\npy.iplot(trace_data, filename='scale-a-dataset')\n```\n\n----------------------------------------\n\nTITLE: Empty Code Cell in Python\nDESCRIPTION: An empty code cell that can be used for adding additional code or notes to the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/frequency-counts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using Specific Renderer with show()\nDESCRIPTION: Shows how to override the default renderer by specifying a renderer (svg in this case) directly in the show() method call.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure(\n    data=[go.Bar(y=[2, 1, 3])],\n    layout_title_text=\"A Figure Displayed with the 'svg' Renderer\"\n)\nfig.show(renderer=\"svg\")\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Simple version check to ensure Plotly is at least version 2.0.0+ which is required for 2D Density Plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/density-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Using Text Labels on Shapes in Plotly in Python\nDESCRIPTION: Introduces the use of text labels directly on shapes using the `label` argument, a feature new in Plotly version 5.14. This example applies to lines and rectangles, with styling through attributes like `textposition` and `font`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-vertical-shapes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\nfig = px.line(df)\nfig.add_hline(\n    y=1,\n    line_dash=\"dot\",\n    label=dict(\n        text=\"Jan 1 2018 Baseline\",\n        textposition=\"end\",\n        font=dict(size=20, color=\"blue\"),\n        yanchor=\"top\",\n    ),\n)\nfig.add_vrect(\n    x0=\"2018-09-24\",\n    x1=\"2018-12-18\",\n    label=dict(\n        text=\"Decline\",\n        textposition=\"top center\",\n        font=dict(size=20, family=\"Times New Roman\"),\n    ),\n    fillcolor=\"green\",\n    opacity=0.25,\n    line_width=0,\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Default Wide-Form Visualizations\nDESCRIPTION: Demonstrates default behaviors for various plot types when using wide-form data without explicit x/y assignments.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide(indexed=True)\n\nfig = px.bar(wide_df)\nfig.show()\n\nfig = px.area(wide_df)\nfig.show()\n\nfig = px.line(wide_df)\nfig.show()\n\nfig = px.scatter(wide_df)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Counting Complaints per Hour using SQL and Plotly\nDESCRIPTION: This code snippet uses SQL to count the number of complaints per hour and then creates a bar plot using Plotly. It groups the data by hour and uses count(*) for aggregation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                               'strftime(\\'%H\\', CreatedDate) as hour,  '\n                               'count(*) as `Complaints per Hour`'\n                       'FROM data '\n                       'GROUP BY hour', disk_engine)\n\npy.iplot({\n    'data': [go.Bar(x=df['hour'], y=df['Complaints per Hour'])],\n    'layout': go.Layout(xaxis={'title': 'Hour in Day'},\n                     yaxis={'title': 'Number of Complaints'})}, filename='311/complaints per hour')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Wireframe Plot with Plotly in Python\nDESCRIPTION: This code snippet demonstrates how to create a 3D wireframe plot using a mathematical function. It generates a grid of points, calculates z-values using a sine function of the radial distance, and renders each row as a 3D line to create the wireframe effect. The plot includes customized axis properties and background colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-wireframe-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\n# Creating the data\nx = np.linspace(-5, 5, 50)\ny = np.linspace(-5, 5, 50)\nxGrid, yGrid = np.meshgrid(y, x)\nR = np.sqrt(xGrid ** 2 + yGrid ** 2)\nz = np.sin(R)\n\n# Creating the plot\nlines = []\nline_marker = dict(color='#0066FF', width=2)\nfor i, j, k in zip(xGrid, yGrid, z):\n    lines.append(go.Scatter3d(x=i, y=j, z=k, mode='lines', line=line_marker))\n\nlayout = go.Layout(\n    title='Wireframe Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    ),\n    showlegend=False,\n)\nfig = go.Figure(data=lines, layout=layout)\npy.iplot(fig, filename='wireframe_plot')\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix to Indicators\nDESCRIPTION: This example demonstrates how to add prefixes and suffixes to both the number and delta in a Plotly indicator. It shows how to customize the displayed values for better contextual understanding.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/indicator.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"number+delta\",\n    value = 492,\n    number = {\"prefix\": \"$\", \"suffix\": \"m\"},\n    delta = {\"reference\": 512, \"valueformat\": \".0f\", \"prefix\": \"$\", \"suffix\": \"m\"},\n    title = {\"text\": \"Profit\"},\n    domain = {'y': [0, 1], 'x': [0.25, 0.75]}))\n\nfig.add_trace(go.Scatter(\n    y = [325, 324, 405, 400, 424, 404, 417, 432, 419, 394, 410, 426, 413, 419, 404, 408, 401, 377, 368, 361, 356, 359, 375, 397, 394, 418, 437, 450, 430, 442, 424, 443, 420, 418, 423, 423, 426, 440, 437, 436, 447, 460, 478, 472, 450, 456, 436, 418, 429, 412, 429, 442, 464, 447, 434, 457, 474, 480, 499, 497, 480, 502, 512, 492]))\n\nfig.update_layout(xaxis = {'range': [0, 62]})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Settings for Plotly Dashboard in Python\nDESCRIPTION: Demonstrates how to change various color settings of a Plotly dashboard, including foreground, background, header, and box colors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard['settings']['foregroundColor'] = '#000000'\nmy_dboard['settings']['backgroundColor'] = '#adcaea'\nmy_dboard['settings']['headerForegroundColor'] = '#ffffff'\nmy_dboard['settings']['headerBackgroundColor'] = '#D232C8'\nmy_dboard['settings']['boxBackgroundColor'] = '#ffffff'\nmy_dboard['settings']['boxBorderColor'] = '#000000'\nmy_dboard['settings']['boxHeaderBackgroundColor'] = '#ffffff'\n```\n\n----------------------------------------\n\nTITLE: Comparing Backend and Direct Plotly Express Usage\nDESCRIPTION: Shows equivalent bar chart creation using both Pandas backend and direct Plotly Express calls.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\n\n# using Plotly Express via the Pandas backend\nfig1 = df.plot.bar()\nfig1.show()\n\n# using Plotly Express directly\nimport plotly.express as px\nfig2 = px.bar(df)\nfig2.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Express and using wide-form data\nDESCRIPTION: This snippet demonstrates loading a dataset in wide-form format using Plotly Express. The `medals_wide()` function is used to retrieve the dataset, which is then displayed.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nwide_df = px.data.medals_wide()\nwide_df\n```\n\n----------------------------------------\n\nTITLE: Querying Language Trends from BigQuery\nDESCRIPTION: SQL queries to extract yearly counts of Python and PHP mentions in HackerNews post titles from BigQuery.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython_query = \"\"\"\nSELECT\n  YEAR(time_ts) as years,\n  COUNT(YEAR(time_ts )) as trends\nFROM\n  [fh-bigquery:hackernews.stories]\nWHERE\n  LOWER(title) contains 'python'\nGROUP BY\n  years\nORDER BY\n  years\n\"\"\"\n\nphp_query = \"\"\"\nSELECT\n  YEAR(time_ts) as years,\n  COUNT(YEAR(time_ts )) as trends\nFROM\n  [fh-bigquery:hackernews.stories]\nWHERE\n  LOWER(title) contains 'php'\nGROUP BY\n  years\nORDER BY\n  years\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for 1D Correlation with Plotly\nDESCRIPTION: This code snippet imports the necessary libraries for performing 1D correlation and plotting the results using Plotly. It imports `plotly.plotly` for plotting, `plotly.graph_objs` for creating graph objects, `numpy` for numerical operations, `pandas` for data manipulation, and `scipy` for signal processing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/1d-correlation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Discrete Frequency Analysis in Python\nDESCRIPTION: Imports necessary libraries including Plotly, NumPy, Pandas, and SciPy for data manipulation and visualization of frequency distributions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Triangulation of a Trigonometric Surface over a Disk\nDESCRIPTION: This snippet demonstrates the triangulation of the surface z=sin(-xy) defined over a unit disk. It uses polar coordinates to create a meshgrid, converts to Cartesian coordinates, and applies the Delaunay triangulation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nn=12 # number of radii\nh=1.0/(n-1)\nr = np.linspace(h, 1.0, n)\ntheta= np.linspace(0, 2*np.pi, 36)\n\nr,theta=np.meshgrid(r,theta)\nr=r.flatten()\ntheta=theta.flatten()\n\n#Convert polar coordinates to cartesian coordinates (x,y)\nx=r*np.cos(theta)\ny=r*np.sin(theta)\nx=np.append(x, 0)#  a trick to include the center of the disk in the set of points. It was avoided\n                 # initially when we defined r=np.linspace(h, 1.0, n)\ny=np.append(y,0)\nz = np.sin(-x*y)\n\npoints2D=np.vstack([x,y]).T\ntri=Delaunay(points2D)\n\ndata2=plotly_trisurf(x,y,z, tri.simplices, colormap=cm.cubehelix, plot_edges=None)\nfig2 = go.Figure(data=data2, layout=layout)\nfig2['layout'].update(dict(title='Triangulated surface',\n                          scene=dict(camera=dict(eye=dict(x=1.75,\n                                                          y=-0.7,\n                                                          z= 0.75)\n                                                )\n                                    )))\n\npy.iplot(fig2, filename='trisurf-cubehx')\n```\n\n----------------------------------------\n\nTITLE: Generating a Box Plot\nDESCRIPTION: Creates a box plot to show the distribution of 10-minute standard deviations in wind speed data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/statistics-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Box(\n        y=wind_data['10 Min Std Dev'],\n    )\n]\n\npy.iplot(data, filename='wind-data-box-plot')\n```\n\n----------------------------------------\n\nTITLE: Dynamic Update of Geo Plot Defaults - Python\nDESCRIPTION: This snippet shows how to dynamically update the geo plot to display rivers and print the new layout settings after modification.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfig.update_geos(showrivers=True)\nfull_fig = fig.full_figure_for_development()\nprint(full_fig.layout.geo)\n```\n\n----------------------------------------\n\nTITLE: Plotting Bar Chart with Plotly Express in Python\nDESCRIPTION: This snippet demonstrates how to create a grouped bar chart using Plotly Express, a high-level interface for creating figures with minimal code. It requires the pandas and plotly.express libraries. The input is a DataFrame 'df' with columns 'Fruit', 'Contestant', and 'Number Eaten'. The function returns a bar chart grouped by 'Contestant' and displays it using 'fig.show()'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/graph-objects.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.DataFrame({\n  \"Fruit\": [\"Apples\", \"Oranges\", \"Bananas\", \"Apples\", \"Oranges\", \"Bananas\"],\n  \"Contestant\": [\"Alex\", \"Alex\", \"Alex\", \"Jordan\", \"Jordan\", \"Jordan\"],\n  \"Number Eaten\": [2, 1, 3, 1, 3, 2],\n})\n\n\n# Plotly Express\n\nimport plotly.express as px\n\nfig = px.bar(df, x=\"Fruit\", y=\"Number Eaten\", color=\"Contestant\", barmode=\"group\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Label Positions for Shapes in Plotly\nDESCRIPTION: This example demonstrates how to control the position of text labels relative to shapes using the 'textposition' attribute. It shows different positions for rectangle labels ('middle center', 'top left') and line labels ('start', 'middle').\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor='Lavender',\n    x0=0,\n    y0=0,\n    x1=1.5,\n    y1=1.5,\n    label=dict(text=\"Text at middle center\"),\n)\n\nfig.add_shape(\n    type=\"rect\",\n    fillcolor='Lavender',\n    x0=3,\n    y0=0,\n    x1=4.5,\n    y1=1.5,\n    label=dict(text=\"Text at top left\", textposition=\"top left\"),\n)\n\n\nfig.add_shape(\n    type=\"line\",\n    line_color=\"MediumSlateBlue\",\n    x0=3,\n    y0=2,\n    x1=5,\n    y1=3,\n    line_width=3,\n    label=dict(text=\"Text at start\", textposition=\"start\"),\n)\n\n\nfig.add_shape(\n    type=\"line\",\n    line_color=\"MediumSlateBlue\",\n    x0=0,\n    y0=2,\n    x1=2,\n    y1=3,\n    line_width=3,\n    label=dict(text=\"Text at middle\"),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Fills to Icicle Chart Sections in Plotly\nDESCRIPTION: This example shows how to apply pattern fills (hatching or texture) to Icicle chart sections using Plotly. It configures the pattern shape, size, and solidity for all chart sections.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/icicle-charts.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Icicle(\n        labels=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n        parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"],\n        values=[10, 14, 12, 10, 2, 6, 6, 4, 4],\n        root_color=\"lightgrey\",\n        textfont_size=20,\n        marker=dict(pattern=dict(shape=\"|\", size=5, solidity=0.9)),\n    )\n)\n\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Figure in Dash Application\nDESCRIPTION: This code snippet shows how to create a Plotly figure and display it in a Dash application using the Graph component. It includes the basic setup for a Dash app and demonstrates how to pass the figure to the Graph component.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/what_about_dash.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go # or plotly.express as px\nfig = go.Figure() # or any Plotly Express function e.g. px.bar(...)\n# fig.add_trace( ... )\n# fig.update_layout( ... )\n\nfrom dash import Dash, dcc, html\n\napp = Dash()\napp.layout = html.Div([\n    dcc.Graph(figure=fig)\n])\n\napp.run_server(debug=True, use_reloader=False)  # Turn off reloader if inside Jupyter\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Figure and Layout\nDESCRIPTION: Sets up the figure configuration including data, layout, and animation frames for the stock price visualization\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-area-animation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata=[dict(type='scatter',\n           xsrc=grid.get_column_reference('x1'),\n           ysrc= grid.get_column_reference('y1'),\n           name='AAPL',\n           mode='lines',\n           line=dict(color= 'rgb(114, 186, 59)'),\n           fill='tozeroy',\n           fillcolor='rgba(114, 186, 59, 0.5)')]\n\naxis=dict(ticklen=4,\n          mirror=True,\n          zeroline=False,\n          showline=True,\n          autorange=False,\n          showgrid=False)\n\nlayout = dict(title='AAPL Daily Stock Price',\n              font=dict(family='Balto'),\n              showlegend=False,\n              autosize=False,\n              width=800,\n              height=400,\n              xaxis=dict(axis, **{'nticks':12, 'tickangle':-45,\n                                  'range': [to_unix_time(datetime(2015, 2, 17)),\n                                            to_unix_time(datetime(2016, 11, 30))]}),\n              yaxis=dict(axis, **{'title': '$', 'range':[0,170]}),\n              updatemenus=[dict(type='buttons',\n                                showactive=False,\n                                y=1,\n                                x=1.1,\n                                xanchor='right',\n                                yanchor='top',\n                                pad=dict(t=0, r=10),\n                                buttons=[dict(label='Play',\n                                              method='animate',\n                                              args=[None, dict(frame=dict(duration=50, redraw=False),\n                                                               transition=dict(duration=0),\n                                                               fromcurrent=True,\n                                                               mode='immediate')])])])\n\nframes=[{'data':[{'xsrc': grid.get_column_reference('x{}'.format(k + 1)),\n                  'ysrc': grid.get_column_reference('y{}'.format(k + 1))}],\n         'traces': [0]\n        } for k in range(len(appl.Date) - 1)]\n\nfig=dict(data=data, layout=layout, frames=frames)\npy.icreate_animations(fig, 'AAPL-stockprice' + str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Filled Line Plot with Plotly\nDESCRIPTION: This code fetches data from a URL, processes it using pandas, and generates a 3D filled line plot using Plotly. It defines the data and layout for the plot, then uses `py.iplot` to display the plot. It depends on the `plotly` and `pandas` libraries.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-filled-line-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport pandas as pd\n\n# The datasets' url. Thanks Jennifer Bryan!\nurl_csv = 'http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt'\n\ndf = pd.read_csv(url_csv, sep='\\t')\ndf.head()\n\ncountries = ['China', 'India', 'United States', 'Bangladesh', 'South Africa']\nfill_colors = ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854']\ngf = df.groupby('country')\n\ndata = []\n\nfor country, fill_color in zip(countries[::-1], fill_colors):\n    group = gf.get_group(country)\n    years = group['year'].tolist()\n    length = len(years)\n    country_coords = [country] * length\n    pop = group['pop'].tolist()\n    zeros = [0] * length\n\n    data.append(dict(\n        type='scatter3d',\n        mode='lines',\n        x=years + years[::-1] + [years[0]],  # year loop: in incr. order then in decr. order then years[0]\n        y=country_coords * 2 + [country_coords[0]],\n        z=pop + zeros + [pop[0]],\n        name='',\n        surfaceaxis=1, # add a surface axis ('1' refers to axes[1] i.e. the y-axis)\n        surfacecolor=fill_color,\n        line=dict(\n            color='black',\n            width=4\n        ),\n    ))\n\nlayout = dict(\n    title='Population from 1957 to 2007 [Gapminder]',\n    showlegend=False,\n    scene=dict(\n        xaxis=dict(title=''),\n        yaxis=dict(title=''),\n        zaxis=dict(title=''),\n        camera=dict(\n            eye=dict(x=-1.7, y=-1.7, z=0.5)\n        )\n    )\n)\n\nfig = dict(data=data, layout=layout)\n\n# IPython notebook\n# py.iplot(fig, filename='filled-3d-lines')\n\npy.iplot(fig, filename='filled-3d-lines')\n\n```\n\n----------------------------------------\n\nTITLE: Salesforce Authentication\nDESCRIPTION: Reads credentials from a file and authenticates with Salesforce using username, password, and security token.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/salesforce.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith open('salesforce_login.txt') as f:\n    username, password, token = [x.strip(\"\\n\") for x in f.readlines()]\nsf = Salesforce(username=username, password=password, security_token=token)\n```\n\n----------------------------------------\n\nTITLE: Print Plasma Colorscale Values\nDESCRIPTION: Demonstrates how to access and print the CSS color values for a specific built-in colorscale (Plasma).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/builtin-colorscales.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\nprint(px.colors.sequential.Plasma)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart of Event Categories with Plotly\nDESCRIPTION: Python code that generates a bar chart visualizing the sum of events in each category using Plotly. This helps identify which event types are more prevalent in the database.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(title=\"Event Categories Sum\", yaxis=dict(title=\"Sum\"))\ndata = [go.Bar(x=df.category_name, y=df.category_sum)]\npy.iplot(go.Figure(data=data, layout=layout))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for ANOVA Testing in Python\nDESCRIPTION: This code imports the necessary Python libraries for performing ANOVA tests, including Plotly for visualization, NumPy and Pandas for data manipulation, SciPy for scientific computing, and Statsmodels for statistical modeling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/anova.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nimport statsmodels\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Plot Ranges and Dimensions\nDESCRIPTION: Defines the initial x and y ranges along with plot dimensions that will be used for the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx_range=[3, 10]\ny_range=[0, 6]\nplot_height=500\nplot_width=700\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Curve Averaging in Python\nDESCRIPTION: This snippet imports the necessary libraries for curve averaging and visualization, including Plotly, NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/average_multiple_curves.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Getting Help Documentation for Facet Grid in Python\nDESCRIPTION: Example showing how to access the help documentation for the create_facet_grid function in Plotly's figure factory module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_facet_grid)\n```\n\n----------------------------------------\n\nTITLE: Configuring Orca Executable Path\nDESCRIPTION: This line of code configures the path to the Orca executable, which is used for static image export in older versions of Plotly. It sets the `executable` attribute of the `plotly.io.orca.config` object to the specified path. This is useful when the system cannot automatically locate the Orca binary or when multiple versions of Orca are present.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nplotly.io.orca.config.executable = '/home/your_name/miniconda3/bin/orca'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Table with Bootstrap Styling\nDESCRIPTION: Manually builds an HTML table with ticker symbols and company names, including hyperlinks to Yahoo Finance. The table uses Bootstrap styling for consistent appearance with the other components of the report.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsummary_table_2 = '''<table class=\"table table-striped\">\n<th>Ticker</th><th>Full name</th>\n<tr>\n    <td>AAPL</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=AAPL\">Apple Inc</a></td>\n</tr>\n<tr>\n    <td>GE</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=GE\">General Electric Company</a></td>\n</tr>\n<tr>\n    <td>IBM</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=IBM\">International Business Machines Corp.</a></td>\n</tr>\n<tr>\n    <td>KO</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=KO\">The Coca-Cola Company</a></td>\n</tr>\n<tr>\n    <td>MSFT</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=MSFT\">Microsoft Corporation</a></td>\n</tr>\n<tr>\n    <td>PEP</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=PEP\">Pepsico, Inc.</a></td>\n</tr>\n</table>\n'''\nHTML(summary_table_2)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling in Plotly\nDESCRIPTION: Sets up custom styling for the notebook display and publishes the notebook to Plotly's documentation. This includes loading custom fonts, CSS styling, and using the publisher module to upload the content with appropriate metadata.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/frequency-counts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Frequency-Counts.ipynb', 'python/frequency-counts/', 'Frequency Counts | plotly',\n    'Learn how to perform frequency counts using Python.',\n    title='Frequency Counts in Python. | plotly',\n    name='Frequency Counts',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=2,\n    ipynb= '~notebook_demo/111')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Plotly Renderer\nDESCRIPTION: Demonstrates how to change the default renderer to 'browser', which will open figures in the default web browser tab.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.renderers.default = \"browser\"\n```\n\n----------------------------------------\n\nTITLE: Querying Event Categories for Analysis\nDESCRIPTION: Python code that uses pandas to query event categories from the database, joining the event and category tables to get the sum of events by category name for further analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(event.catid) as category_sum, catname as category_name\nFROM event, category\nwhere event.catid = category.catid\nGROUP BY category.catname\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Error Bars with Plotly Express\nDESCRIPTION: Demonstrates how to create a scatter plot with symmetric error bars using Plotly Express. Uses the iris dataset with error values calculated from sepal width.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\ndf[\"e\"] = df[\"sepal_width\"]/100\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 error_x=\"e\", error_y=\"e\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Scatter Data in Plotly FigureWidget (Python)\nDESCRIPTION: This snippet updates the y-values of the first scatter trace in the FigureWidget. It accesses the `data` attribute, which is a list of traces, and modifies the `y` attribute of the first trace (`f.data[0]`).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# update scatter data\nscatter = f.data[0]\nscatter.y = [3, 1, 4, 3]\n```\n\n----------------------------------------\n\nTITLE: Installing Orca on Google Colab for Static Image Export\nDESCRIPTION: Commands to set up Orca in a Google Colab environment. This installs plotly, downloads the Orca binary, makes it executable, and installs necessary system dependencies.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n!pip install plotly>=4.7.1\n!wget https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage -O /usr/local/bin/orca\n!chmod +x /usr/local/bin/orca\n!apt-get install xvfb libgtk2.0-0 libgconf-2-4\n```\n\n----------------------------------------\n\nTITLE: Saving Plotly Configuration Settings\nDESCRIPTION: Save Plotly configuration options to the user's home directory, enabling automatic loading of settings in future sessions using the config.save() method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nplotly.io.config.save()\n```\n\n----------------------------------------\n\nTITLE: Basic Line Plot\nDESCRIPTION: Creates a simple line plot using the Plotly backend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\n\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\nfig = df.plot.line()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Expanding Mean Trendlines\nDESCRIPTION: Demonstrates creating an expanding mean trendline using Pandas' expanding function. The 'trendline=\"expanding\"' option calculates the cumulative mean of all prior data points at each position.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"expanding\", title=\"Expanding mean\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly SVG Paths for Ribbon Boundaries in Python\nDESCRIPTION: These functions generate Plotly SVG paths for quadratic Bézier curves and ribbon arcs. They are used to define the boundaries of ribbons in the chord diagram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef make_q_bezier(b):# defines the Plotly SVG path for a quadratic Bezier curve defined by the\n                     #list of its control points\n    if len(b)!=3:\n        raise valueError('control poligon must have 3 points')\n    A, B, C=b\n    return 'M '+str(A[0])+',' +str(A[1])+' '+'Q '+\\\n                str(B[0])+', '+str(B[1])+ ' '+\\\n                str(C[0])+', '+str(C[1])\n\nb=[(1,4), (-0.5, 2.35), (3.745, 1.47)]\n\nmake_q_bezier(b)\n\ndef make_ribbon_arc(theta0, theta1):\n\n    if test_2PI(theta0) and test_2PI(theta1):\n        if theta0 < theta1:\n            theta0= moduloAB(theta0, -PI, PI)\n            theta1= moduloAB(theta1, -PI, PI)\n            if theta0*theta1>0:\n                raise ValueError('incorrect angle coordinates for ribbon')\n\n        nr=int(40*(theta0-theta1)/PI)\n        if nr<=2: nr=3\n        theta=np.linspace(theta0, theta1, nr)\n        pts=np.exp(1j*theta)# points on arc in polar complex form\n\n        string_arc=''\n        for k in range(len(theta)):\n            string_arc+='L '+str(pts.real[k])+', '+str(pts.imag[k])+' '\n        return   string_arc\n    else:\n        raise ValueError('the angle coordinates for an arc side of a ribbon must be in [0, 2*pi]')\n\nmake_ribbon_arc(np.pi/3, np.pi/6)\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook with Custom Styling using Python\nDESCRIPTION: This snippet demonstrates how to publish a Jupyter notebook with custom styling. It includes adding custom fonts, CSS, and using a publisher tool to upload the notebook to Plotly's documentation platform.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/average_multiple_curves.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Average_Multiple_Curves.ipynb', 'python/average_multiple_curves/', 'Average Multiple Curves | plotly',\n    'Learn how to average the values of multiple curves with Python.',\n    title='Average Multiple Curves in Python | plotly',\n    name='Average Multiple Curves',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=9,\n    ipynb= '~notebook_demo/107')\n```\n\n----------------------------------------\n\nTITLE: Importing and Previewing Gapminder Dataset\nDESCRIPTION: Imports Plotly libraries and pandas, then loads the Gapminder dataset from a CSV file. Creates a preview table of the first 10 rows to display the dataset structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nfrom plotly.grid_objs import Grid, Column\n\nimport pandas as pd\nimport time\n\nurl = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'\ndataset = pd.read_csv(url)\n\ntable = ff.create_table(dataset.head(10))\npy.iplot(table, filename='animations-gapminder-data-preview')\n```\n\n----------------------------------------\n\nTITLE: Calculating Node Positions Using Kamada-Kawai Layout in Python\nDESCRIPTION: This snippet computes the positions of the graph nodes using the Kamada-Kawai layout algorithm, specifically configured for 3D visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlayt=G.layout('kk', dim=3)\n```\n\n----------------------------------------\n\nTITLE: Computing Ideogram Arc End Coordinates\nDESCRIPTION: Defines a function to calculate the end angular coordinates for each ideogram arc based on the ideogram lengths and gaps, returning a list of coordinate pairs.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_ideogram_ends(ideogram_len, gap):\n    ideo_ends=[]\n    left=0\n    for k in range(len(ideogram_len)):\n        right=left+ideogram_len[k]\n        ideo_ends.append([left, right])\n        left=right+gap\n    return ideo_ends\n\nideo_ends=get_ideogram_ends(ideogram_length, gap)\nideo_ends\n```\n\n----------------------------------------\n\nTITLE: Viewing Orca Configuration Settings in Plotly\nDESCRIPTION: Python code to display the current Orca configuration settings. This shows all the configuration parameters that control how Plotly communicates with the Orca server.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.orca.config\n```\n\n----------------------------------------\n\nTITLE: Hiding Modebar in Plotly Python Figures\nDESCRIPTION: This snippet demonstrates how to completely hide the modebar (interactive toolbar) in a Plotly figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/configuration-options.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nconfig = {'displayModeBar': False}\n\nfig.add_trace(\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]))\n\nfig.show(config=config)\n```\n\n----------------------------------------\n\nTITLE: Adding New Figure Factory Import\nDESCRIPTION: Example showing how to add a new figure factory import statement to __init__.py.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.figure_factory._foo import create_foo\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap of User Preferences by State with Plotly\nDESCRIPTION: Python code that uses Plotly to create an interactive heatmap visualization of user preferences by state. The columns represent different event types, rows represent states, and the color intensity indicates preference levels.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n        go.Heatmap(\n            z = df.drop('state', axis=1).values,\n            x = df.drop('state', axis=1).columns,\n            y = df.state,\n            colorscale = 'Hot'\n        )\n    ]\nlayout = go.Layout(title=\"State and Music Tastes\", yaxis=dict(tickmode='linear', dtick=1))\npy.iplot(Figure(data=data, layout=layout), filename='redshift/state and music taste heatmap', height=1000)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pie Chart with go.Pie in Python\nDESCRIPTION: Demonstrates creating a pie chart using the lower-level go.Pie class from plotly.graph_objects. This approach offers more control over chart elements by setting labels and values directly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Export Settings\nDESCRIPTION: Shows how to configure default image export settings using plotly.io.kaleido.scope\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.kaleido.scope.default_format = \"svg\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tesla Supercharger Locations\nDESCRIPTION: This code performs a GET request to retrieve Tesla Supercharger locations from a Google Maps page, then parses the HTML to extract location data including address, latitude, and longitude.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/tesla-supercharging-stations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nr = requests.get('https://www.tesla.com/en_CA/findus#/bounds/70,-50,42,-142,d?search=supercharger,&name=Canada')\nr_copy = copy.deepcopy(r.text)\n\nsupercharger_locations = {}\nparams_for_locations = ['latitude\":\"', 'longitude\":\"']\nlocation_param = 'location_id\":\"'\n\nwhile True:\n    # add address line to the dictionary\n    index = r_copy.find(location_param)\n    if index == -1:\n        break\n    index += len(location_param)\n\n    index_end = index\n    while r_copy[index_end] != '\"':\n        index_end += 1\n    address_line_1 = r_copy[index:index_end]\n    address_line_1 = str(address_line_1)\n    supercharger_locations[address_line_1] = {}\n\n    for param in params_for_locations:\n        index = r_copy.find(param)\n        if index == -1:\n            break\n        index += len(param)\n\n        index_end = index\n        while r_copy[index_end] != '\"':\n            index_end += 1\n        supercharger_locations[address_line_1][param[0:-3]] = r_copy[index:index_end]\n\n    r_copy = r_copy[index_end:len(r.text)]  # slice off the traversed code\n\nall_keys = supercharger_locations.keys()\n```\n\n----------------------------------------\n\nTITLE: Defining Layout for Plotly Visualization in Python\nDESCRIPTION: This code snippet defines the layout properties of the 3D plot, including titles, sizes, axes visibility, and annotations for data source.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\naxis=dict(showbackground=False,\n          showline=False,\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title=''\n          )\n\nlayout = go.Layout(\n         title=\"Network of coappearances of characters in Victor Hugo's novel<br> Les Miserables (3D visualization)\",\n         width=1000,\n         height=1000,\n         showlegend=False,\n         scene=dict(\n             xaxis=dict(axis),\n             yaxis=dict(axis),\n             zaxis=dict(axis),\n        ),\n     margin=dict(\n        t=100\n    ),\n    hovermode='closest',\n    annotations=[\n           dict(\n           showarrow=False,\n            text=\"Data source: <a href='http://bost.ocks.org/mike/miserables/miserables.json'>[1] miserables.json</a>\",\n            xref='paper',\n            yref='paper',\n            x=0,\n            y=0.1,\n            xanchor='left',\n            yanchor='bottom',\n            font=dict(\n            size=14\n            )\n            )\n        ],    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Larger Bins in Plotly\nDESCRIPTION: Demonstrates how changing the bin size affects the histogram visualization. This example uses a larger bin size of 0.75 to group the data into wider intervals, which can reveal different patterns in the distribution.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/frequency-counts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x, xbins=dict(start=np.min(x), size=0.75, end=np.max(x)),\n                   marker=dict(color='rgb(0, 0, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram Frequency Counts\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-freq-counts-larger-bins')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up display settings and publishes the notebook with custom styling and metadata\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-area-animation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'filled-area-animation.ipynb', 'python/filled-area-animation/', 'Filled-Area Animation | plotly',\n    'How to make an animated filled-area plot with apple stock data in Python.',\n    title='Filled-Area Animation | plotly',\n    name='Filled-Area Animation',\n    language='python',\n    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/apple_stock_animation.gif',\n    display_as='animations', ipynb= '~notebook_demo/128', order=3)\n```\n\n----------------------------------------\n\nTITLE: Recommended Method for Creating Layout Annotations\nDESCRIPTION: This snippet shows the recommended approach of using a simple list instead of go.Annotations array class when creating annotations in a layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(\n    annotations=[\n        go.layout.Annotations(text='annotation')\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up environment and publishing Plotly tutorial for Amazon Redshift in Python\nDESCRIPTION: This code snippet sets up the Jupyter notebook environment by importing necessary modules, installing the publisher package, and publishing the notebook with specific metadata. It configures fonts, CSS, and publishes a tutorial on plotting Amazon Redshift data with Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'redshift.ipynb', 'python/amazon-redshift/', 'Plot Data From Amazon Redshift',\n    'A tutorial showing how to plot Amazon AWS Redshift data with Plotly.',\n    title = 'Plot Data from Amazon Redshift | plotly',\n    has_thumbnail='false', redirect_from='ipython-notebooks/amazon-redshift/',\n    language='python', page_type='example_index',\n    display_as='databases', order=3,\n    ipynb= '~notebook_demo/1')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with Custom Styling\nDESCRIPTION: This code snippet sets up custom styling for the Jupyter notebook and publishes the notebook using Plotly's publisher module. It includes adding custom fonts, CSS, and setting metadata for the published content.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/webgl-text-and-annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'webgl-text-and-annotations.ipynb', 'python/webgl-text-and-annotations/', 'WebGL Text and Annotations',\n    'How to add webGL based text labels and annotations to plots in python',\n    title = 'WebGL Text and Annotations | plotly',\n    name = 'WebGL Text and Annotations',\n    has_thumbnail='false', thumbnail='thumbnail/webgl-text-and-annotations.jpg',\n    language='python',\n    page_type='example_index', display_as='style_opt', order=2,\n    ipynb= '~notebook_demo/219', uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Carpet Plot in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a basic carpet plot using Plotly in Python. It sets up the y-coordinates for the plot but requires additional parameter values for a complete axis plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for FFT Filtering in Python\nDESCRIPTION: This snippet imports the necessary libraries for FFT filtering, including Plotly for visualization, NumPy for numerical operations, Pandas for data manipulation, and SciPy for signal processing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/fft-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Setting Title and Displaying Plotly Figure\nDESCRIPTION: This snippet sets the title of the Plotly figure and displays it. The `update_layout` method is used to set the title, and the `show` method displays the figure in a browser or appropriate output environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Set title\nfig.update_layout(title_text=\"Yahoo\")\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Recommended Method for Creating a Marker Object\nDESCRIPTION: This example demonstrates the recommended approach to create a Marker object using the hierarchy-specific go.scatter.Marker object for better validation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\ngo.Scatter(\n    x=[0],\n    y=[0],\n    marker=go.scatter.Marker(\n        color='rgb(255,45,15)'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling\nDESCRIPTION: Sets up custom CSS styling for the notebook and publishes it using the plotly publisher tool. This code configures the appearance of the notebook and defines metadata for publication.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/igraph-networkx-comparison.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'igraph_vs_networkx.ipynb', 'python/igraph-networkx-comparison/', 'Python Network Graphs Comparison | plotly',\n    'Comparing a Network Graph created with igraph to one created with networkx in Python with Plotly. ',\n    name = 'Network Graphs Comparison',\n    thumbnail='thumbnail/networks.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=14,\n    ipynb= '~notebook_demo/222')\n```\n\n----------------------------------------\n\nTITLE: Importing Stock Data for Convolution Example\nDESCRIPTION: Loads stock market data from a CSV file hosted on GitHub and creates a table visualization using Plotly's figure factory. The data is limited to the first 15 rows for demonstration purposes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/convolution.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstock_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/stockdata.csv')\ndf = stock_data[0:15]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='stockdata-peak-fitting')\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook as Plotly Documentation\nDESCRIPTION: Use a custom publisher to convert the Jupyter notebook into Plotly documentation format.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/t-test.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-T-Test.ipynb', 'python/t-test/', 'T-Test | plotly',\n    'Learn how to perform a one sample and two sample t-test using Python.',\n    title='T-Test in Python. | plotly',\n    name='T-Test',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=7,\n    ipynb= '~notebook_demo/115')\n```\n\n----------------------------------------\n\nTITLE: Adjusting Dendrogram Size Ratios\nDESCRIPTION: Demonstrates how to modify the relative size of row and column dendrograms compared to the heatmap using the display_ratio parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-clustergram.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport dash_bio\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv')\n\ndash_bio.Clustergram(\n    data=df,\n    column_labels=list(df.columns.values),\n    row_labels=list(df.index),\n    height=800,\n    width=700,\n    display_ratio=[0.1, 0.7]\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Mixed-Form Data with Plotly Express\nDESCRIPTION: Demonstrates loading mixed-form experimental data using Plotly Express's built-in dataset functionality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nmixed_df = px.data.experiment(indexed=True)\nmixed_df.head()\n```\n\n----------------------------------------\n\nTITLE: Bar Chart with Error Bars\nDESCRIPTION: Shows how to create a grouped bar chart with error bars for multiple data series using data-based error values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/error-bars.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    name='Control',\n    x=['Trial 1', 'Trial 2', 'Trial 3'], y=[3, 6, 4],\n    error_y=dict(type='data', array=[1, 0.5, 1.5])\n))\nfig.add_trace(go.Bar(\n    name='Experimental',\n    x=['Trial 1', 'Trial 2', 'Trial 3'], y=[4, 7, 3],\n    error_y=dict(type='data', array=[0.5, 1, 2])\n))\nfig.update_layout(barmode='group')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Table and Chart with Plotly in Python\nDESCRIPTION: This code snippet shows how to create a horizontal bar chart alongside a data table using Plotly's figure factory. The code prepares the data, initializes the table, and defines the bar chart's properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-factory-subplots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montréal<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0],\n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['LA Kings', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n\nfig = ff.create_table(table_data, height_constant=60)\n\nteams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'LA Kings', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]\n\ntrace1 = go.Scatter(x=teams, y=GFPG,\n                    marker=dict(color='#0099ff'),\n                    name='Goals For<br>Per Game',\n                    xaxis='x2', yaxis='y2')\ntrace2 = go.Scatter(x=teams, y=GAPG,\n                    marker=dict(color='#404040'),\n                    name='Goals Against<br>Per Game',\n                    xaxis='x2', yaxis='y2')\n\nfig.add_traces([trace1, trace2])\n```\n\nLANGUAGE: python\nCODE:\n```\n# initialize xaxis2 and yaxis2\nfig['layout']['xaxis2'] = {} \nfig['layout']['yaxis2'] = {} \n\n# Edit layout for subplots\nfig.layout.xaxis.update({'domain': [0, .5]})\nfig.layout.xaxis2.update({'domain': [0.6, 1.]})\n\n# The graph's yaxis MUST BE anchored to the graph's xaxis\nfig.layout.yaxis2.update({'anchor': 'x2'})\nfig.layout.yaxis2.update({'title': 'Goals'})\n\n# Update the margins to add a title and see graph x-labels.\nfig.layout.margin.update({'t':50, 'b':100})\nfig.layout.update({'title': '2016 Hockey Stats'})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Applying Jitter to Scatter Plot Data in Python\nDESCRIPTION: This code applies random jitter to the x and y coordinates of the scatter plot to address data quantization issues.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nscatter = fig.data[0]\nN = len(cars_df)\nscatter.x = scatter.x + np.random.rand(N) * 10\nscatter.y = scatter.y + np.random.rand(N) * 1\n```\n\n----------------------------------------\n\nTITLE: Customizing A and B Axes in Carpet Plot with Plotly\nDESCRIPTION: This example demonstrates how to customize the A and B axes of a carpet plot using the 'aaxis' and 'baxis' attributes. It includes options for tick prefixes, suffixes, smoothing, and grid count.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/carpet-plot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        ticksuffix = 'm',\n        smoothing = 1,\n        minorgridcount = 9,\n    ),\n    baxis = dict(\n        tickprefix = 'b = ',\n        ticksuffix = 'pa',\n        smoothing = 1,\n        minorgridcount = 9,\n    )\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Report Template Generator\nDESCRIPTION: Implements a function that generates HTML blocks for both static and interactive versions of Plotly graphs, including formatting and embedded iframes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/pdf-reports.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndef report_block_template(report_type, graph_url, caption=''):\n    if report_type == 'interactive':\n        graph_block = '<iframe style=\"border: none;\" src=\"{graph_url}.embed\" width=\"100%\" height=\"600px\"></iframe>'\n    elif report_type == 'static':\n        graph_block = (''\n            '<a href=\"{graph_url}\" target=\"_blank\">' \n                '<img style=\"height: 400px;\" src=\"{graph_url}.png\">'\n            '</a>')\n\n    report_block = ('' +\n        graph_block +\n        '{caption}' + \n        '<br>'      + \n        '<a href=\"{graph_url}\" style=\"color: rgb(190,190,190); text-decoration: none; font-weight: 200;\" target=\"_blank\">'+\n            'Click to comment and see the interactive graph' + \n        '</a>' +\n        '<br>' +\n        '<hr>') \n\n    return report_block.format(graph_url=graph_url, caption=caption)\n\n\ninteractive_report = ''\nstatic_report = ''\n\nfor graph_url in graphs:\n    _static_block = report_block_template('static', graph_url, caption='')\n    _interactive_block = report_block_template('interactive', graph_url, caption='')\n\n    static_report += _static_block\n    interactive_report += _interactive_block\n```\n\n----------------------------------------\n\nTITLE: Initializing Figure Layout for Gapminder Visualization\nDESCRIPTION: Sets up the basic figure layout for the visualization including axis properties, background color, and hover interaction mode. Configures the X-axis for life expectancy and Y-axis for GDP per capita with logarithmic scale.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': [],\n    'config': {'scrollzoom': True}\n}\n\n# fill in most of layout\nfigure['layout']['xaxis'] = {'range': [30, 85], 'title': 'Life Expectancy', 'gridcolor': '#FFFFFF'}\nfigure['layout']['yaxis'] = {'title': 'GDP per Capita', 'type': 'log', 'gridcolor': '#FFFFFF'}\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['plot_bgcolor'] = 'rgb(223, 232, 243)'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Data for Multiple Companies\nDESCRIPTION: Fetches historical stock data for multiple technology and CPG companies (Apple, GE, IBM, Coca-Cola, Microsoft, and PepsiCo) for the scatter matrix visualization. This collects the price data for each ticker symbol.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntickers = ['AAPL', 'GE', 'IBM', 'KO', 'MSFT', 'PEP']\nprices = []\nfor ticker in tickers:\n    quotes = quotes_historical_yahoo(ticker, date1, date2)\n    prices.append( [q[1] for q in quotes] )\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tick Labels Mode to Period in Python using plotly.express\nDESCRIPTION: This snippet shows how to set the tick label mode to 'period', effectively placing tick labels at the center of their respective time spans for improved clarity in the visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.stocks()\nfig = px.line(df, x=\"date\", y=df.columns,\n              hover_data={\"date\": \"|%B %d, %Y\"},\n              title='custom tick labels with ticklabelmode=\"period\"')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Matrix Eigenvalues\nDESCRIPTION: Demonstrates how to find eigenvalues of a matrix using NumPy's eigenvalue calculator.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\neigvals = np.linalg.eigvals(matrix)\nprint(\"The eignevalues are %f and %f\") %(eigvals[0], eigvals[1])\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up custom styling and publishes the notebook with specific metadata and configuration settings\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/exponential-fits.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'Exponential-fits.ipynb', 'python/exponential-fits/', 'Exponential Fit',\n    'Create a exponential fit / regression in Python and add a line of best fit to your chart.',\n    title = 'Exponential Fit',\n    name = 'Exponential Fit',\n    has_thumbnail='true', thumbnail='thumbnail/exponential_fit.jpg',\n    language='python', page_type='example_index',\n    display_as='statistics', order=11,\n    ipynb= '~notebook_demo/135')\n```\n\n----------------------------------------\n\nTITLE: Implementing get_plotlyjs Function\nDESCRIPTION: The new function plotly.offline.get_plotlyjs retrieves the contents of the bundled plotly.js library. This is essential for users who need access to the JavaScript library within Python environments, allowing for customized visualization integrations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nplotly.offline.get_plotlyjs() // Returns the plotly.js library as a string.\n```\n\n----------------------------------------\n\nTITLE: Filtering SQL Data with WHERE Clause\nDESCRIPTION: Shows how to filter SQL query results by specific criteria using the WHERE clause to retrieve only rows where Agency is 'NYPD'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, Descriptor, Agency '\n                       'FROM data '\n                       'WHERE Agency = \"NYPD\" '\n                       'LIMIT 10', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Implementing Surface Projections\nDESCRIPTION: Create surface projections onto different coordinate planes with custom color mapping\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/2d-projection-of-3d-surface.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nz_offset=(np.min(z)-2)*np.ones(z.shape)#\nx_offset=np.min(xx)*np.ones(z.shape)\ny_offset=np.min(yy)*np.ones(z.shape)\n\nproj_z=lambda x, y, z: z#projection in the z-direction\ncolorsurfz=proj_z(x,y,z)\nproj_x=lambda x, y, z: x\ncolorsurfx=proj_z(x,y,z)\nproj_y=lambda x, y, z: y\ncolorsurfy=proj_z(x,y,z)\n```\n\n----------------------------------------\n\nTITLE: Box Plot Example\nDESCRIPTION: Shows how to create a box plot using the plot.box method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\npd.options.plotting.backend = \"plotly\"\nnp.random.seed(1)\n\ndf = pd.DataFrame(dict(\n    a=np.random.normal(loc=1, scale=2, size=100),\n    b=np.random.normal(loc=2, scale=1, size=100)\n))\nfig = df.plot.box()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Styled US Airports Map\nDESCRIPTION: Creates a detailed scatter map of US airports with custom styling, including marker size, color scale, and map projection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/scatter-plots-on-maps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf['text'] = df['airport'] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: ' + df['cnt'].astype(str)\n\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df['long'],\n        lat = df['lat'],\n        text = df['text'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'square',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Blues',\n            cmin = 0,\n            color = df['cnt'],\n            cmax = df['cnt'].max(),\n            colorbar=dict(\n                title=dict(\n                    text=\"Incoming flights<br>February 2011\"\n                )\n            )\n        )))\n\nfig.update_layout(\n        title = 'Most trafficked US airports<br>(Hover for airport names)',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5\n        ),\n    )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Sankey Diagram with Link Hover Colors\nDESCRIPTION: Demonstrates how to customize link hover colors in a Sankey diagram. Each link can have a different hover color specified.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/sankey-diagram.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(color = \"black\", width = 0.5),\n      label = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"],\n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0, 1, 0, 2, 3, 3],\n      target = [2, 3, 3, 4, 4, 5],\n      value = [8, 4, 2, 8, 4, 2],\n      hovercolor=[\"midnightblue\", \"lightskyblue\", \"gold\", \"mediumturquoise\", \"lightgreen\", \"cyan\"],\n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Displaying Customized Styles and Publishing in Python\nDESCRIPTION: This code displays custom styles in a Jupyter notebook and uses the 'publisher' library to publish the notebook online with specific metadata.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'Les-miserables-network.ipynb', 'python/3d-network-graph/', 'Python 3D Network Graphs',\n    'How to make 3D Network Graphs in Python. ',\n    title = '3D Network Graphs in Python | plotly',\n    name = '3D Network Graphs',\n    has_thumbnail='true', thumbnail='thumbnail/3dnetwork.jpg',\n    language='python', page_type='example_index',\n    display_as='3d_charts', order=13,\n    ipynb= '~notebook_demo/226')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Q-Test Results with Plotly Scatter Plot\nDESCRIPTION: Create a scatter plot using Plotly to visualize the dataset points and the critical line for outlier detection based on the Q-Test.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/outlier-test.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx = [j for j in range(len(dataset))]\ny1 = dataset\ny2 = [-2.04 for j in range(len(dataset))]\n\ntrace1 = go.Scatter(\n    x = x,\n    y = y1,\n    mode = 'lines+markers',\n    name='Dataset',\n    marker=dict(symbol=[100, 0])\n)\n\ntrace2 = go.Scatter(\n    x = x,\n    y = y2,\n    mode = 'lines',\n    name='Critical Line'\n)\n\ndata = [trace1, trace2]\npy.iplot(data, filename='q-test-scatter')\n```\n\n----------------------------------------\n\nTITLE: Creating Ideograms for Chord Diagram in Python\nDESCRIPTION: This snippet generates ideograms for the chord diagram. It sets the position, color, and associated information for each ideogram in the diagram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nideograms=[]\nfor k in range(len(ideo_ends)):\n    z= make_ideogram_arc(1.1, ideo_ends[k])\n    zi=make_ideogram_arc(1.0, ideo_ends[k])\n    m=len(z)\n    n=len(zi)\n    ideograms.append(go.Scatter(x=z.real,\n                             y=z.imag,\n                             mode='lines',\n                             line=dict(color=ideo_colors[k], shape='spline', width=0.25),\n                             text=labels[k]+'<br>'+'{:d}'.format(row_sum[k]),\n                             hoverinfo='text'\n                             )\n                     )\n\n\n    path='M '\n    for s in range(m):\n        path+=str(z.real[s])+', '+str(z.imag[s])+' L '\n\n    Zi=np.array(zi.tolist()[::-1])\n\n    for s in range(m):\n        path+=str(Zi.real[s])+', '+str(Zi.imag[s])+' L '\n    path+=str(z.real[0])+' ,'+str(z.imag[0])\n\n    layout['shapes'].append(make_ideo_shape(path,'rgb(150,150,150)' , ideo_colors[k]))\n\ndata = go.Data(ideograms+ribbon_info)\nfig = go.Figure(data=data, layout=layout)\n\nimport plotly.offline as off\noff.init_notebook_mode()\n\noff.iplot(fig, filename='chord-diagram-Fb')\n```\n\n----------------------------------------\n\nTITLE: Vertical Bar Plot\nDESCRIPTION: Shows how to create a vertical bar plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\n\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\nfig = df.plot.bar()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Triangulating a Sinusoidal Surface over a Disk\nDESCRIPTION: Defines a meshgrid on a disk using polar coordinates, converts to Cartesian coordinates, and applies the triangulation. This example shows how to handle surfaces defined over non-rectangular domains.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nn=12 # number of radii\nh=1.0/(n-1)\nr = np.linspace(h, 1.0, n)\ntheta= np.linspace(0, 2*np.pi, 36)\n\nr,theta=np.meshgrid(r,theta)\nr=r.flatten()\ntheta=theta.flatten()\n\n#Convert polar coordinates to cartesian coordinates (x,y)\nx=r*np.cos(theta)\ny=r*np.sin(theta)\nx=np.append(x, 0)#  a trick to include the center of the disk in the set of points. It was avoided\n                 # initially when we defined r=np.linspace(h, 1.0, n)\ny=np.append(y,0)\nz = np.sin(-x*y)\n\npoints2D=np.vstack([x,y]).T\ntri=Delaunay(points2D)\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Table with Plotly for Chord Diagram\nDESCRIPTION: Creates a data table showing the number of Facebook comments between 5 friends. The table includes row sums and uses Plotly's figure_factory to create and display the table.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\ndata = [['', 'Emma', 'Isabella', 'Ava', 'Olivia', 'Sophia', 'row-sum'],\n        ['Emma', 16, 3, 28, 0, 18, 65],\n        ['Isabella', 18, 0, 12, 5, 29, 64],\n        ['Ava', 9, 11, 17, 27, 0, 64],\n        ['Olivia', 19, 0, 31, 11, 12, 73],\n        ['Sophia', 23, 17, 10, 0, 34, 84]]\n\ntable = ff.create_table(data, index=True)\npy.iplot(table, filename='Data-Table')\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatterplot Matrix\nDESCRIPTION: Generates a scatterplot matrix showing relationships between all variables in the wind speed dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/statistics-charts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig = FF.create_scatterplotmatrix(wind_data,\n                                  height=1000,\n                                  width=1000,\n                                  title='Wind Data - Scatterplot Matrix')\npy.iplot(fig, filename='wind-data-scatterplot-matrix')\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash App Example in Python\nDESCRIPTION: This snippet shows how to embed a Dash app using an IFrame to display filled area plots interactively. It utilizes the IPython.display module to create a responsive IFrame that loads a specific URL for the filled area plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\n\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'filled-area-plots', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Filtering SQL Data by Timestamp Range\nDESCRIPTION: Demonstrates how to filter SQL query results by a specific time range using timestamp strings in the format 'YYYY-MM-DD hh:mm:ss'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, CreatedDate, City '\n                       'FROM data '\n                       'WHERE CreatedDate < \"2014-11-16 23:47:00\" '\n                       'AND CreatedDate > \"2014-11-16 23:45:00\"', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Dash Integration with Plotly Shapes in Python\nDESCRIPTION: This snippet uses Dash to build interactive analytical applications with Plotly figures. An IFrame loads an interactive HTML component displaying the use of horizontal and vertical shapes. Dash needs to be installed via `pip install dash`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/horizontal-vertical-shapes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'horizontal-vertical-shapes', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Publishing Chord Diagram Notebook with Plotly in Python\nDESCRIPTION: This snippet sets up the environment for publishing the chord diagram notebook, including setting fonts, styles, and metadata for the publication.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'filled-chord.ipynb', 'python/filled-chord-diagram/', 'Python Filled Chord Diagram',\n    'How to make an interactive filled-chord diagram in Python with Plotly and iGraph. ',\n    name = 'Filled Chord Diagram',\n    title = \"Filled Chord Diagram | Plotly\",\n    thumbnail='thumbnail/filled-chord.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=25,\n    ipynb= '~notebook_demo/191')\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Timeseries Data with Plotly in Python\nDESCRIPTION: This code imports a timeseries dataset from a CSV file and displays it as a table using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/simple-mathematics-operations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/timeseries.csv')\n\ntable = FF.create_table(data)\npy.iplot(table, filename='timeseries-data-table')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Display Configuration and Publishing\nDESCRIPTION: Configures display settings for the notebook and publishes the content using Plotly's publisher tool.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/statistics-charts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Statistics-Charts.ipynb', 'python/statistics-charts/', 'Statistics Charts | plotly',\n    'Learn how to plot statistical data with various charts using Python.',\n    title='Statistics Charts in Python. | plotly',\n    name='Statistics Charts',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=5,\n    ipynb= '~notebook_demo/116')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jupyter Notebook Display and Publishing Results\nDESCRIPTION: Configures Jupyter Notebook display settings and publishes the notebook results using a custom publisher module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/polygon-area.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Polygon_Area.ipynb', 'python/polygon-area/', 'Polygon Area | plotly',\n    'Learn how to find the area of any simple polygon',\n    title='Polygon Area in Python. | plotly',\n    name='Polygon Area',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=8,\n    ipynb= '~notebook_demo/100')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Tooth Growth Dataset for ANOVA Analysis\nDESCRIPTION: This code loads a tooth growth dataset from a CSV file hosted on GitHub, selects the first 10 rows, and creates a table visualization using Plotly's FigureFactory. This dataset will be used for the two-way ANOVA example.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/anova.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tooth_growth_csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='tooth-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Displaying IFrame in Python using IPython\nDESCRIPTION: This Python code uses IPython.display to create an IFrame that embeds a Dash app demonstrating Plotly Express functionality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'plotly-express', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Documentation for FigureWidget\nDESCRIPTION: Access the help documentation for the FigureWidget class to view available methods and properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interact-decorator.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.FigureWidget)\n```\n\n----------------------------------------\n\nTITLE: Creating a QQ-Plot with Plotly for Normality Testing\nDESCRIPTION: Constructs a Quantile-Quantile plot using Plotly to compare sample data against a theoretical normal distribution. The plot shows points representing the data and a reference line that would indicate perfect normality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure()\n\nfig.add_trace({\n    'type': 'scatter',\n    'x': qqplot_data[0].get_xdata(),\n    'y': qqplot_data[0].get_ydata(),\n    'mode': 'markers',\n    'marker': {\n        'color': '#19d3f3'\n    }\n})\n\nfig.add_trace({\n    'type': 'scatter',\n    'x': qqplot_data[1].get_xdata(),\n    'y': qqplot_data[1].get_ydata(),\n    'mode': 'lines',\n    'line': {\n        'color': '#636efa'\n    }\n\n})\n\n\nfig['layout'].update({\n    'title': 'Quantile-Quantile Plot',\n    'xaxis': {\n        'title': 'Theoritical Quantities',\n        'zeroline': False\n    },\n    'yaxis': {\n        'title': 'Sample Quantities'\n    },\n    'showlegend': False,\n    'width': 800,\n    'height': 700,\n})\n\n\npy.iplot(fig, filename='normality-QQ')\n```\n\n----------------------------------------\n\nTITLE: Converting Stock Data to Pandas DataFrame\nDESCRIPTION: Transforms the list of stock prices into a Pandas DataFrame for easier manipulation and visualization. The DataFrame columns are named according to the ticker symbols.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame( prices ).transpose()\ndf.columns = tickers\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Embedding a Manhattan Plot IFrame in Dash\nDESCRIPTION: In this snippet, the code demonstrates how to embed an IFrame containing a ManhattanPlot within a Dash application. It uses the 'IPython.display' module to create the IFrame. The output is an embedded interactive plot displayed at the specified dimensions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-manhattanplot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'bio-manhattanplot', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Adding GeoJSON Layer to Map with Scattermap Trace\nDESCRIPTION: Creates a map with a Scattermap marker and adds a complex GeoJSON layer with MultiPolygon geometry and specific styling\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/filled-area-tile-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermap(\n    mode = \"markers\",\n    lon = [-73.605], lat = [45.51],\n    marker = {'size': 20, 'color': [\"cyan\"]}))\n\nfig.update_layout(\n    map = {\n        'style': \"open-street-map\",\n        'center': { 'lon': -73.6, 'lat': 45.5},\n        'zoom': 12, 'layers': [{\n            'source': {\n                'type': \"FeatureCollection\",\n                'features': [{\n                    'type': \"Feature\",\n                    'geometry': {\n                        'type': \"MultiPolygon\",\n                        'coordinates': [[[...]]\n                    }\n                }]\n            },\n            'type': \"fill\", 'below': \"traces\", 'color': \"royalblue\"}]},\n    margin = {'l':0, 'r':0, 'b':0, 't':0})\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Import Required Libraries\nDESCRIPTION: Imports necessary Python packages including plotly, pandas, numpy, and simple-salesforce for API integration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/salesforce.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport requests\n\nfrom simple_salesforce import Salesforce\nrequests.packages.urllib3.disable_warnings()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries and Setting Up API Keys\nDESCRIPTION: This snippet imports necessary libraries and sets up the Google Maps API key. It's essential for making API requests and creating visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/tesla-supercharging-stations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\nimport numpy as np\nimport requests\nimport copy\nimport googlemaps\n\n# add your google maps api key here\nmy_google_maps_api_key = 'YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Modifying Box Title\nDESCRIPTION: Demonstrates how to change the title of an existing box by accessing its properties through the get_box method and updating the title attribute.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.get_box(1)['title'] = 'a new title'\nmy_dboard.get_box(1)\n```\n\n----------------------------------------\n\nTITLE: Mapping Data for Chord Diagram in Python\nDESCRIPTION: This function maps matrix entries to corresponding values in intervals associated with ideograms. It takes a data matrix, row values, and ideogram lengths as inputs.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef map_data(data_matrix, row_value, ideogram_length):\n    mapped=np.zeros(data_matrix.shape)\n    for j  in range(L):\n        mapped[:, j]=ideogram_length*data_matrix[:,j]/row_value\n    return mapped\n\nmapped_data=map_data(matrix, row_sum, ideogram_length)\nmapped_data\n```\n\n----------------------------------------\n\nTITLE: Implementing Triangulated Surface Plotting Function\nDESCRIPTION: Defines a function to create a Plotly Mesh3d object for triangulated surface plotting. It handles the creation of triangle vertices, color mapping, and optional edge plotting.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef tri_indices(simplices):\n    #simplices is a numpy array defining the simplices of the triangularization\n    #returns the lists of indices i, j, k\n\n    return ([triplet[c] for triplet in simplices] for c in range(3))\n\ndef plotly_trisurf(x, y, z, simplices, colormap=cm.RdBu, plot_edges=None):\n    #x, y, z are lists of coordinates of the triangle vertices\n    #simplices are the simplices that define the triangularization;\n    #simplices  is a numpy array of shape (no_triangles, 3)\n    #insert here the  type check for input data\n\n    points3D=np.vstack((x,y,z)).T\n    tri_vertices=map(lambda index: points3D[index], simplices)# vertices of the surface triangles\n    zmean=[np.mean(tri[:,2]) for tri in tri_vertices ]# mean values of z-coordinates of\n                                                      #triangle vertices\n    min_zmean=np.min(zmean)\n    max_zmean=np.max(zmean)\n    facecolor=[map_z2color(zz,  colormap, min_zmean, max_zmean) for zz in zmean]\n    I,J,K=tri_indices(simplices)\n\n    triangles=go.Mesh3d(x=x,\n                     y=y,\n                     z=z,\n                     facecolor=facecolor,\n                     i=I,\n                     j=J,\n                     k=K,\n                     name=''\n                    )\n\n    if plot_edges is None:# the triangle sides are not plotted\n        return [triangles]\n    else:\n        #define the lists Xe, Ye, Ze, of x, y, resp z coordinates of edge end points for each triangle\n        #None separates data corresponding to two consecutive triangles\n        lists_coord=[[[T[k%3][c] for k in range(4)]+[ None]   for T in tri_vertices]  for c in range(3)]\n        Xe, Ye, Ze=[reduce(lambda x,y: x+y, lists_coord[k]) for k in range(3)]\n\n        #define the lines to be plotted\n        lines=go.Scatter3d(x=Xe,\n                        y=Ye,\n                        z=Ze,\n                        mode='lines',\n                        line=dict(color= 'rgb(50,50,50)', width=1.5)\n               )\n        return [triangles, lines]\n```\n\n----------------------------------------\n\nTITLE: Preview CSV Data with Pandas\nDESCRIPTION: Loads and displays the first two rows of the CSV file to understand its structure before processing the entire dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npd.read_csv('311_100M.csv', nrows=2).head()\n```\n\n----------------------------------------\n\nTITLE: Updating Plotly.js Version with Python Command\nDESCRIPTION: The script updates the plotly.js version in the Python package by downloading and replacing necessary files from the plotly/plotly.js GitHub repository. It requires updating the version in 'js/package.json' beforehand.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python commands.py updateplotlyjs\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up display configuration and publishes the notebook with specific metadata and styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Peak-Integration.ipynb', 'python/peak-integration/', 'Peak Integration | plotly',\n    'Learn how to integrate the area between peaks and bassline in Python.',\n    title='Peak Integration in Python | plotly',\n    name='Peak Integration',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=4,\n    ipynb= '~notebook_demo/121')\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data by Standard Deviation and Visualizing with Plotly in Python\nDESCRIPTION: This snippet normalizes the Apple stock data by dividing each point by the standard deviation. It then creates histograms of both the original and normalized data using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normalization.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = apple_data['AAPL_y']\n\ndata_norm_by_std = [number/scipy.std(data) for number in data]\n\ntrace1 = go.Histogram(\n    x=data,\n    opacity=0.75,\n    name='data'\n)\n\ntrace2 = go.Histogram(\n    x=data_norm_by_std,\n    opacity=0.75,\n    name='normalized by std = ' + str(scipy.std(data)),\n)\n\nfig = tools.make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(height=600, width=800, title='Normalize by a Constant')\npy.iplot(fig, filename='apple-data-normalize-constant')\n```\n\n----------------------------------------\n\nTITLE: Loading NYC Flights Dataset\nDESCRIPTION: Reads flight dataset from a GitHub repository, dropping the first column and preparing data for analysis\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget-app.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv(\n    'https://raw.githubusercontent.com/yankev/testing/master/datasets/nycflights.csv')\ndf = df.drop(df.columns[[0]], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Updates and Fixes in Plotly Express Functionality\nDESCRIPTION: This section summarizes updates regarding support for datetime handling, trendline behavior, and various bug fixes to ensure robust functionality in the Plotly Express module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n- Fixed bugs related to the conversion of datetime columns in input dataframes and enhanced handling of hover data.\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid for Bivariate Normal Distribution Heatmap Animation\nDESCRIPTION: Prepares the data grid for an animated heatmap visualization. Generates bivariate normal distributions with mean vector (0,0), standard deviation vector (1,1), and correlation values ranging from -1 to 1. Uploads the grid to Plotly for online animation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/heatmap-animation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\n\nimport time\nimport numpy as np\nfrom scipy.stats import multivariate_normal as Nd\n\ncolorscale = [\n    [0.0, 'rgb(25, 23, 10)'],\n    [0.05, 'rgb(69, 48, 44)'],\n    [0.1, 'rgb(114, 52, 47)'],\n    [0.15, 'rgb(155, 58, 49)'],\n    [0.2, 'rgb(194, 70, 51)'],\n    [0.25, 'rgb(227, 91, 53)'],\n    [0.3, 'rgb(250, 120, 56)'],\n    [0.35, 'rgb(255, 152, 60)'],\n    [0.4, 'rgb(255, 188, 65)'],\n    [0.45, 'rgb(236, 220, 72)'],\n    [0.5, 'rgb(202, 243, 80)'],\n    [0.55, 'rgb(164, 252, 93)'],\n    [0.6, 'rgb(123, 245, 119)'],\n    [0.65, 'rgb(93, 225, 162)'],\n    [0.7, 'rgb(84, 196, 212)'],\n    [0.75, 'rgb(99, 168, 238)'],\n    [0.8, 'rgb(139, 146, 233)'],\n    [0.85, 'rgb(190, 139, 216)'],\n    [0.9, 'rgb(231, 152, 213)'],\n    [0.95, 'rgb(241, 180, 226)'],\n    [1.0, 'rgb(206, 221, 250)']\n]\n\n# returns V=(X,Y)~N(m, Sigma)\ndef bivariate_N(m=[0., 0.], stdev=[1.0, 1.0], rho=0):\n    cov = rho*stdev[0] * stdev[1] # covariance(X,Y)\n    Sigma = np.array([[stdev[0]**2, cov], [cov, stdev[1]**2]]) # covariance  matrix\n    return Nd(mean=m, cov=Sigma) # joint distribution of (X,Y), of mean  vector, m, and cov matrix, Sigma\n\n# returns the pdf of the bivariate normal distribution\ndef pdf_bivariate_N(m, stdev, V):\n    X = np.linspace(m[0] - 3*stdev[0], m[0] + 3*stdev[0], 100)\n    Y = np.linspace(m[1] - 3*stdev[1], m[1] + 3*stdev[1], 100)\n    x, y = np.meshgrid(X, Y)\n    pos = np.empty(x.shape + (2, ))\n    pos[:, :, 0] = x; pos[:, :, 1] = y\n    z = V.pdf(pos)\n    return X, Y, z\n\ncorrels=[-0.95, -0.85, -0.75, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.75, 0.85, 0.95]\n\nm=[0., 0.]\nstdev=[1., 1.]\nV=bivariate_N()\nx, y=pdf_bivariate_N(m, stdev,  V)[:2]\nmy_columns=[Column(x, 'x'), Column(y, 'y')]\nzvmax=[]\nfor k, rho in enumerate(correls):\n    V = bivariate_N(rho = rho)\n    z = pdf_bivariate_N(m, stdev, V)[2]\n    zvmax.append(np.max(z))\n    my_columns.append(Column(z, 'z{}'.format(k + 1)))\ngrid = Grid(my_columns)\npy.grid_ops.upload(grid, 'norm-bivariate1'+str(time.time()), auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Redshift Data Visualization\nDESCRIPTION: Imports necessary Python packages including Plotly for visualization, pandas for data manipulation, and requests for HTTP connections. Disables insecure SSL warnings for development purposes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport pandas as pd\nimport os\nimport requests\nrequests.packages.urllib3.disable_warnings() # this squashes insecure SSL warnings - DO NOT DO THIS ON PRODUCTION!\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Data Analysis and Visualization\nDESCRIPTION: Imports the necessary Python libraries including Pandas for data manipulation, SQLAlchemy for database connection, datetime for time operations, and Plotly for interactive visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom sqlalchemy import create_engine # database connection\nimport datetime as dt\nfrom IPython.display import display\n\nimport plotly.plotly as py # interactive graphing\nimport plotly.graph_objs as go\n```\n\n----------------------------------------\n\nTITLE: Plotting Moebius Band Triangulation with Plotly\nDESCRIPTION: This snippet uses the previously defined functions to create a triangulated surface plot of the Moebius band. It sets up the layout for the plot and creates a Plotly figure object.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata1=plotly_trisurf(x,y,z, tri.simplices, colormap=cm.RdBu, plot_edges=True)\n\naxis = dict(\nshowbackground=True,\nbackgroundcolor=\"rgb(230, 230,230)\",\ngridcolor=\"rgb(255, 255, 255)\",\nzerolinecolor=\"rgb(255, 255, 255)\",\n    )\n\nlayout = go.Layout(\n         title='Moebius band triangulation',\n         width=800,\n         height=800,\n         scene=dict(\n         xaxis=dict(axis),\n         yaxis=dict(axis),\n         zaxis=dict(axis),\n        aspectratio=dict(\n            x=1,\n            y=1,\n            z=0.5\n        ),\n        )\n        )\n\nfig1 = go.Figure(data=data1, layout=layout)\n\npy.iplot(fig1, filename='Moebius-band-trisurf')\n```\n\n----------------------------------------\n\nTITLE: Active Selection Fill Color Configuration\nDESCRIPTION: Demonstrates how to style active selections with a fill color. Sets yellow as the fill color for selections when they are created or clicked.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.add_selection(x0=3.0, y0=6.5, x1=3.5, y1=5.5)\n\nfig.update_layout(dragmode='select',\n                  activeselection=dict(fillcolor='yellow'))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Time Series with Baseline in Plotly\nDESCRIPTION: Calculates baseline values using PeakUtils and visualizes both the original time series data and the baseline in a Plotly scatter plot. The baseline is represented as circle markers while the original data is shown as a line.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-subtraction.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbaseline_values = peakutils.baseline(time_series)\n\ntrace = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=time_series,\n    mode='lines',\n    marker=dict(\n        color='#547C66',\n    ),\n    name='Original Plot'\n)\n\ntrace2 = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=baseline_values,\n    mode='markers',\n    marker=dict(\n        size=3,\n        color='#EB55BF',\n        symbol='circle-open'\n    ),\n    name='Baseline'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='milk-production-plot-with-baseline')\n```\n\n----------------------------------------\n\nTITLE: Figure Factory Import Statement Example\nDESCRIPTION: Example showing the import statement format in __init__.py for figure factories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Require that numpy exists for figure_factory\nimport numpy\n\nfrom plotly.figure_factory._2d_density import create_2d_density\nfrom plotly.figure_factory._annotated_heatmap import create_annotated_heatmap\nfrom plotly.figure_factory._candlestick import create_candlestick\n...\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Values with DISTINCT Clause\nDESCRIPTION: Shows how to retrieve distinct/unique city values from the dataset using the SQL DISTINCT keyword.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT DISTINCT City FROM data', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash App Frame for Pie Charts\nDESCRIPTION: Embeds an IFrame that loads a Dash application example for pie charts from a remote server. This demonstrates how pie charts can be used in Dash applications.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'pie-charts', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Settings for Plotly Dashboard in Python\nDESCRIPTION: Shows how to change font-related settings for a Plotly dashboard, including font family, header font size, and header font weight.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard['settings']['fontFamily'] = 'Raleway'\nmy_dboard['settings']['headerFontSize'] = '1.6em'\nmy_dboard['settings']['headerFontWeight'] = '200'\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Graph in IPython Notebook\nDESCRIPTION: This snippet uses IPython's HTML display functionality to embed a Plotly graph in a Jupyter notebook. It shows how to include an interactive plot directly in the notebook environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML\nHTML('<iframe src=https://plot.ly/~empet/13734/trisurf-from-a-ply-file-data-source-1/ \\\n     width=800 height=800></iframe>')\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Baseline Subtraction in Python\nDESCRIPTION: Imports the necessary libraries for data visualization and analysis including Plotly, NumPy, Pandas, SciPy, and PeakUtils. These libraries are required for processing time series data and calculating baseline values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-subtraction.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tools\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n```\n\n----------------------------------------\n\nTITLE: Modifying DataFrame Entries and Displaying with Plotly in Python\nDESCRIPTION: This code modifies specific entries in a DataFrame using arithmetic operations and displays the updated DataFrame as a table using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/simple-mathematics-operations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndataframe['A'][0] = 120\ndataframe['B'][3] = -2*dataframe['B'][3]\n\ntable = FF.create_table(dataframe)\npy.iplot(table, filename='math-operations-dataframe-changed')\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Table Application in Python\nDESCRIPTION: This snippet embeds a Dash application displaying a table within the documentation using an IFrame. It utilizes `IPython.display.IFrame` to display a remote resource, effectively showcasing a Dash DataTable example. Note the `hide_code=true` which is specific to the documentation generation, and would not be present in functional code.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/table.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'table', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Grouped Scatter Plot with Gap using Plotly Express\nDESCRIPTION: This snippet builds upon the grouped scatter plot by configuring the gap between the groups of points.  It sets the `scattergap` property of the layout to `0.75`, which brings points closer together by increasing the space allocated between groups. The other parameters are identical to the previous snippet.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/line-and-scatter.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.medals_long()\n\nfig = px.scatter(df, y=\\\"count\\\", x=\\\"nation\\\", color=\\\"medal\\\")\nfig.update_traces(marker_size=10)\nfig.update_layout(scattermode=\\\"group\\\", scattergap=0.75)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Baseline Detection in Python\nDESCRIPTION: Imports the necessary Python libraries for data manipulation, visualization, and baseline detection including Plotly, NumPy, Pandas, SciPy, and PeakUtils.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-detection.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n```\n\n----------------------------------------\n\nTITLE: Dynamic Ticks in Dash App - Plotly Python\nDESCRIPTION: This snippet uses Dash to embed an external IFrame that displays tick formatting examples within the Dash application. It requires the Dash library and runs within a web app context.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tick-formatting.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'tick-formatting', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Rotating and Translating Map Projections\nDESCRIPTION: This snippet shows how to rotate and translate a map projection using the `projection_rotation` and `center` attributes. It also demonstrates truncating the map to specific latitude and longitude ranges using `lataxis_range` and `lonaxis_range`.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/map-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattergeo())\nfig.update_geos(\n    center=dict(lon=-30, lat=-30),\n    projection_rotation=dict(lon=30, lat=30, roll=30),\n    lataxis_range=[-50,20], lonaxis_range=[0, 200]\n)\nfig.update_layout(height=300, margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Normal Distributions using Plotly in Python\nDESCRIPTION: Create a plot of two normal probability distribution functions using Plotly for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/t-test.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(-4, 4, 160)\ny1 = scipy.stats.norm.pdf(x)\ny2 = scipy.stats.norm.pdf(x, loc=2)\n\ntrace1 = go.Scatter(\n    x = x,\n    y = y1,\n    mode = 'lines+markers',\n    name='Mean of 0'\n)\n\ntrace2 = go.Scatter(\n    x = x,\n    y = y2,\n    mode = 'lines+markers',\n    name='Mean of 2'\n)\n\ndata = [trace1, trace2]\n\npy.iplot(data, filename='normal-dists-plot')\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Queries with LIMIT Clause\nDESCRIPTION: Demonstrates how to perform basic SQL queries on the SQLite database with LIMIT clause to retrieve a specific number of rows.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT Agency, Descriptor FROM data LIMIT 3', disk_engine)\ndf = pd.read_sql_query('SELECT ComplaintType, Descriptor, Agency '\n                       'FROM data '\n                       'LIMIT 10', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Time Series Analysis Function\nDESCRIPTION: Defines a function to transform rental data into daily counts using pandas resampling capabilities.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef transform_df(df):\n    df['counts'] = 1\n    df['Start Date'] = df['Start Date'].apply(pd.to_datetime)\n    return df.set_index('Start Date').resample('D', how='sum')\n\npop_stations = [] # being popular stations - we could easily extend this to more stations\nfor station in dep_stations['Start Station'][:3]:\n    temp = transform_df(btd.where(btd['Start Station'] == station).select(\"Start Date\").toPandas())\n    pop_stations.append(\n        go.Scatter(\n        x=temp.index,\n        y=temp.counts,\n        name=station\n        )\n    )\n\ndata = pop_stations\npy.iplot(data, filename=\"spark/over_time\")\n```\n\n----------------------------------------\n\nTITLE: Creating Surface Trace with Hover Text\nDESCRIPTION: Generate a Plotly Surface trace with custom hover text displaying coordinate details\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/2d-projection-of-3d-surface.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntextz = [['x: '+'{:0.5f}'.format(x[i][j])+'<br>y: '+'{:0.5f}'.format(y[i][j])+\n        '<br>z: '+'{:0.5f}'.format(z[i][j]) for j in range(z.shape[1])] for i in range(z.shape[0])]\n\ntrace1= go.Surface(\n    x=tuple(x),\n    y=tuple(y),\n    z=tuple(z),\n    colorscale=colorscale,\n    text=textz,\n    hoverinfo='text',\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Imports the Plotly library and displays the installed version. This ensures the user is working with the latest version of Plotly for optimal functionality.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Documentation for 2D Density Creation\nDESCRIPTION: Shows the help documentation for the create_2d_density function from Plotly's Figure Factory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/density-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_2d_density)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Image in FigureWidget\nDESCRIPTION: Adds the DataShader-generated image as a background image to the Plotly FigureWidget, positioning it according to the specified axis ranges.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Set background image\nf.layout.images = [go.layout.Image(\n    source = initial_img,  # plotly now performs auto conversion of PIL image to png data URI\n    xref = \"x\",\n    yref = \"y\",\n    x = x_range[0],\n    y = y_range[1],\n    sizex = x_range[1] - x_range[0],\n    sizey = y_range[1] - y_range[0],\n    sizing = \"stretch\",\n    layer = \"below\")]\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag Zoom for Interactive Exploration\nDESCRIPTION: Sets the dragmode to 'zoom' to enable interactive exploration of the dataset through drag-zoom operations, which will trigger the callback to update the image.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nf.layout.dragmode = 'zoom'\nf\n```\n\n----------------------------------------\n\nTITLE: Extracting Vertex Coordinates and Face Data from PLY in Python\nDESCRIPTION: This snippet extracts the vertex coordinates and face data from the PLY file. It creates arrays for x, y, and z coordinates of vertices and a list of face definitions, which are essential for creating the 3D plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npoints=np.array([plydata['vertex'][k] for k in range(nr_points)])\npoints[0]\n\nx,y,z=zip(*points)\n\nfaces=[plydata['face'][k][0] for k in range(nr_faces)]\nfaces[0]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Linear Algebra Operations\nDESCRIPTION: Imports necessary Python libraries including Plotly for visualization, NumPy for matrix operations, Pandas for data handling, and SciPy for scientific computing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly FigureWidget with Initial Data\nDESCRIPTION: Initializes a Plotly FigureWidget with invisible markers to establish the axes and support autoresizing. This creates the base for adding the DataShader image.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n```\n\nLANGUAGE: python\nCODE:\n```\nf = go.FigureWidget(data=[{'x': x_range,\n                           'y': y_range,\n                           'mode': 'markers',\n                           'marker': {'opacity': 0}}], # invisible trace to init axes and to support autoresize\n                    layout={'width': plot_width, 'height': plot_height})\nf\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly and ipywidgets\nDESCRIPTION: Import Plotly's graph objects, NumPy for numerical operations, and the interact decorator from ipywidgets for creating interactive controls.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interact-decorator.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: Customizing Plotly Express Histogram with Built-in Arguments\nDESCRIPTION: Creates a histogram with customized labels, categories, colors, and template using Plotly Express built-in arguments.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/styling-plotly-express.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"day\", y=\"total_bill\", color=\"sex\",\n            title=\"Receipts by Payer Gender and Day of Week\",\n            width=600, height=400,\n            labels={ # replaces default labels by column name\n                \"sex\": \"Payer Gender\",  \"day\": \"Day of Week\", \"total_bill\": \"Receipts\"\n            },\n            category_orders={ # replaces default order by column name\n                \"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"sex\": [\"Male\", \"Female\"]\n            },\n            color_discrete_map={ # replaces default color mapping by value\n                \"Male\": \"RebeccaPurple\", \"Female\": \"MediumPurple\"\n            },\n            template=\"simple_white\"\n            )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Selections in Scatter Plot Matrix\nDESCRIPTION: Shows how to implement selections in a scatter plot matrix using axis references. Creates selections across different plot combinations in the matrix.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/selections.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.iris()\n\nfig = px.scatter_matrix(df,\n    dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\n    color=\"species\")\n\nfig.update_layout(\n    xaxis = {\"matches\": \"y\"},\n    xaxis2 = {\"matches\": \"y2\"},\n    xaxis3 = {\"matches\": \"y3\"},\n    xaxis4 = {\"matches\": \"y4\"},\n    height = 900,\n    width = 750,\n    dragmode = 'select',\n    selections = [\n        dict(\n            x0 = 3,\n            x1 = 4,\n            xref = \"x2\",\n            y0 = 8,\n            y1= 6,\n            yref = \"y\"\n        ),\n        dict(\n            x0 = 5,\n            x1 = 1,\n            xref = \"x3\",\n            y0 = 5,\n            y1= 4,\n            yref = \"y\",\n        )\n    ]\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Pass FFT Filter in Python\nDESCRIPTION: This snippet implements a high-pass FFT filter on the wind speed data. It uses spectral inversion of a low-pass filter to create a high-pass filter. The filtered signal is then plotted using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/fft-filters.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfc = 0.1\nb = 0.08\nN = int(np.ceil((4 / b)))\nif not N % 2: N += 1\nn = np.arange(N)\n\nsinc_func = np.sinc(2 * fc * (n - (N - 1) / 2.))\nwindow = np.blackman(N)\nsinc_func = sinc_func * window\nsinc_func = sinc_func / np.sum(sinc_func)\n\n# reverse function\nsinc_func = -sinc_func\nsinc_func[int((N - 1) / 2)] += 1\n\ns = list(data['10 Min Std Dev'])\nnew_signal = np.convolve(s, sinc_func)\n\ntrace1 = go.Scatter(\n    x=list(range(len(new_signal))),\n    y=new_signal,\n    mode='lines',\n    name='High-Pass Filter',\n    marker=dict(\n        color='#424242'\n    )\n)\n\nlayout = go.Layout(\n    title='High-Pass Filter',\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='fft-high-pass-filter')\n```\n\n----------------------------------------\n\nTITLE: Generating Random Data from Weibull Distribution in Python\nDESCRIPTION: Creates a dataset of 1000 random samples from a Weibull distribution with shape parameter 1.25, then prints the first 10 elements of the generated array for inspection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/frequency-counts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx=np.random.weibull(1.25, size=1000)\nprint(x[:10])\n```\n\n----------------------------------------\n\nTITLE: Exporting a Plotly Figure to SVG with Time Measurement\nDESCRIPTION: Python code to export a Plotly figure to SVG format and display it, while measuring the execution time. This demonstrates the initial Orca server startup overhead.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n%%time\nimport plotly.io as pio\nfrom IPython.display import SVG, display\nimg_bytes = pio.to_image(fig, format=\"svg\")\ndisplay(SVG(img_bytes))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for T-Tests in Python\nDESCRIPTION: Import necessary libraries including Plotly, NumPy, Pandas, and SciPy for performing t-tests and data visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/t-test.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: DataFrame Boxplot Method\nDESCRIPTION: Demonstrates using the DataFrame's boxplot method with the Plotly backend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\npd.options.plotting.backend = \"plotly\"\nnp.random.seed(1)\n\ndf = pd.DataFrame(dict(\n    a=np.random.normal(loc=1, scale=2, size=100),\n    b=np.random.normal(loc=2, scale=1, size=100)\n))\nfig = df.boxplot()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Package Imports for Data Analysis and Visualization\nDESCRIPTION: Imports required Python libraries including Plotly for visualization, NumPy for numerical operations, Pandas for data manipulation, and SciPy for scientific computing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interpolation-and-extrapolation-in-1d.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Configuring IPython Display and Publishing Plotly Documentation\nDESCRIPTION: Code for configuring IPython display settings with custom fonts and CSS, then using the publisher module to publish Plotly documentation. This sets up custom styling for the notebook and publishes the user guide content.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/userguide.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'user-g.ipynb', 'python/userguide//', 'Getting Started Plotly for Python',\n    'Getting Started with Plotly for Python',\n    title = 'Getting Started Plotly for Python',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots of Sales by Category with Plotly\nDESCRIPTION: Python code that generates subplots showing sales trends for each event category using Plotly. It groups the data by category and creates separate time series plots for clearer trend comparison.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndata = []\nfor count, (name, g) in enumerate(df.groupby(\"category_name\")):\n    data.append(go.Scatter(\n            name=name,\n            x=g.caldate,\n            y=g.quantity_sold,\n            xaxis='x' + str(count + 1),\n            yaxis='y' + str(count + 1)\n        ))\n\nfig = tls.make_subplots(rows=2,cols=2)\nfig['layout'].update(title=\"Event Sales Per Day By Category\")\nfig['data'] += data\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Accessing Class Attributes of a Plotly Express Figure - Python\nDESCRIPTION: This snippet illustrates how to access and understand the attributes of a figure initialized with Plotly Express using the help function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-introspection.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhelp(fig.data[0].__class__.mode)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing a Jupyter Notebook with Plotly\nDESCRIPTION: This snippet shows how to customize Jupyter Notebook display by importing custom fonts and CSS, then demonstrates how to publish the notebook to the Plotly documentation site using the publisher package.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/legacy-polar-chart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'polar.ipynb', 'python/legacy-polar-chart/', 'Polar Charts [Legacy]',\n    'Legacy polar charts in python.',\n    title = 'Python Polar Charts | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/polar-scatter.jpg',\n    language='python',\n    display_as='legacy_charts', order=1,\n    ipynb= '~notebook_demo/37')\n```\n\n----------------------------------------\n\nTITLE: Installing igraph Python Package\nDESCRIPTION: This snippet shows how to install the igraph Python package using pip. Igraph is used for generating and manipulating graph structures.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tree-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"!pip install igraph\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method for Creating a Marker Object\nDESCRIPTION: This example shows the deprecated method of creating a Marker object for a Scatter trace using the generic go.Marker object.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\ngo.Scatter(\n    x=[0],\n    y=[0],\n    marker=go.Marker(\n        color='rgb(255,45,15)'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Display Dash Application in IPython\nDESCRIPTION: This code embeds a Dash application in an IPython notebook using IFrame. It displays a CSV plotting example from a remote URL.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plot-data-from-csv.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'plot-data-from-csv', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Subtracting Two Columns and Visualizing with Plotly in Python\nDESCRIPTION: This code subtracts two columns from a DataFrame and visualizes the original columns and their difference using Plotly scatter plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/simple-mathematics-operations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=data['Date'],\n    y=data['A'],\n    mode='markers',\n    name='Column A',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=data['Date'],\n    y=data['D'],\n    mode='markers',\n    name='Column D',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace3 = go.Scatter(\n    x=data['Date'],\n    y=data['D'] - data['A'],\n    mode='markers',\n    name='Column D - Column A',\n    marker=dict(\n        size=12,\n        symbol='square-open'\n    )\n)\n\ntrace_data1 = [trace1, trace2, trace3]\npy.iplot(trace_data1, filename='subtract-two-dataframe-columns')\n```\n\n----------------------------------------\n\nTITLE: Embedding Volcano Plot in Jupyter using IFrame\nDESCRIPTION: Demonstrates how to embed a Dash-Bio volcano plot within a Jupyter notebook using an IFrame. Links to an external deployment of the plot for interactive visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-volcano-plot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'bio-volcano', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Customizing Margins and Removing Ticks for Plotly Image Visualizations\nDESCRIPTION: Shows how to adjust the layout, width, height, and margins of an image visualization and remove axis tick labels for a cleaner presentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import data\nimg = data.astronaut()\nfig = px.imshow(img)\nfig.update_layout(width=400, height=400, margin=dict(l=10, r=10, b=10, t=10))\nfig.update_xaxes(showticklabels=False).update_yaxes(showticklabels=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Checking Orca Server Status in Plotly\nDESCRIPTION: Python code to check the current status of the Orca server. This displays whether the server is running and other state information if available.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.orca.status\n```\n\n----------------------------------------\n\nTITLE: Uploading Plotly Dashboard to Cloud Account in Python\nDESCRIPTION: Shows how to upload a Plotly dashboard to a Plotly cloud account using the dashboard_ops.upload() function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\npy.dashboard_ops.upload(my_dboard, 'My First Dashboard with Python')\n```\n\n----------------------------------------\n\nTITLE: Analyzing Popular Departure Stations\nDESCRIPTION: Groups bike rentals by starting station and identifies the top three most popular stations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndep_stations = btd.groupBy(btd['Start Station']).count().toPandas().sort('count', ascending=False)\ndep_stations['Start Station'][:3] # top 3 stations\n```\n\n----------------------------------------\n\nTITLE: Static Image Export with Kaleido\nDESCRIPTION: These commands install the Kaleido package required for exporting Plotly visualizations to static image formats. Kaleido is preferred for its ease of installation and compatibility.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U kaleido\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c plotly python-kaleido\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly using conda in Python\nDESCRIPTION: This command installs the Plotly library using conda, an alternative package manager.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge plotly\n```\n\n----------------------------------------\n\nTITLE: Checking Box Title Before Swapping\nDESCRIPTION: Retrieves the title of box 3 before performing a swap operation to verify its current value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.get_box(3)['title']\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Comprehensive list of Python package dependencies required for Plotly, including core scientific computing packages (numpy, pandas), visualization tools (matplotlib), and geospatial libraries (geopandas, Shapely). Some dependencies have version constraints based on Python version compatibility.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/test_requirements/requirements_optional.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests\npandas\nnumpy\nxarray\nstatsmodels\nPillow\npytest\npytz\nipython\njupyter\nanywidget\nscipy\nShapely\ngeopandas\nfiona<=1.9.6;python_version<=\"3.8\"  # fiona>1.9.6 is not compatible with geopandas<1; geopandas>=1 is not compatible with python 3.8\npyshp\nmatplotlib\nscikit-image\npsutil\nkaleido\norjson\npolars[timezone]\npyarrow\nplotly-geo\nvaex;python_version<=\"3.9\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Custom Bin Size in Plotly\nDESCRIPTION: Creates a histogram visualization using Plotly to display the frequency counts of the generated Weibull distribution data. The bin size is set to 0.25 and spans from the minimum to the maximum value in the dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/frequency-counts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x, xbins=dict(start=np.min(x), size=0.25, end=np.max(x)),\n                   marker=dict(color='rgb(0, 0, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram Frequency Counts\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-freq-counts')\n```\n\n----------------------------------------\n\nTITLE: Creating Population Pyramid with Histogram Binning in Plotly\nDESCRIPTION: Demonstrates creating a population pyramid using go.Histogram for automatic binning of raw data. Uses random exponential distributions to simulate age distributions for men and women.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/population-pyramid-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nlayout = go.Layout(barmode='overlay',\n                   yaxis=go.layout.YAxis(range=[0, 90], title='Age'),\n                   xaxis=go.layout.XAxis(\n                       tickvals=[-150, -100, -50, 0, 50, 100, 150],\n                       ticktext=[150, 100, 50, 0, 50, 100, 150],\n                       title='Number'))\n\ndata = [go.Histogram(\n    y=np.random.exponential(50, 1000),\n    orientation='h',\n    name='Men',\n    marker=dict(color='plum'),\n    hoverinfo='skip'\n),\n    go.Histogram(\n        y=np.random.exponential(55, 1000),\n        orientation='h',\n        name='Women',\n        marker=dict(color='purple'),\n        hoverinfo='skip',\n        x=-1 * np.ones(1000),\n        histfunc=\"sum\"\n    )\n]\n\npy.iplot(dict(data=data, layout=layout), filename='EXAMPLES/histogram_pyramid')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plotly Dashboards from Cloud in Python\nDESCRIPTION: Demonstrates how to retrieve dashboard names and specific dashboards from the Plotly cloud using Python.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\npy.dashboard_ops.get_dashboard_names()\n```\n\nLANGUAGE: python\nCODE:\n```\nrecent_dboard = py.dashboard_ops.get_dashboard('My First Dashboard with Python')\n```\n\n----------------------------------------\n\nTITLE: Horizontal ECDF Plot\nDESCRIPTION: Creates a horizontal ECDF plot by changing the orientation parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ecdf-plots.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.ecdf(df, x=\"total_bill\", y=\"tip\", color=\"sex\", ecdfnorm=None, orientation=\"h\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Fonts and Styles for Jupyter Notebook in Python\nDESCRIPTION: This snippet sets up custom fonts and styles for the Jupyter Notebook display. It also installs and imports the publisher module for publishing the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'gapminder-example.ipynb', 'python/gapminder-example/', 'Adding Sliders to Animations | plotly',\n    'How to make the classic Gapminder Animation using sliders and buttons in Python.',\n    title='Adding Sliders to Animations | plotly',\n    name='Adding Sliders to Animations',\n    language='python',\n    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/gapminder_animation.gif',\n    display_as='animations', ipynb= '~notebook_demo/129', order=2)\n```\n\n----------------------------------------\n\nTITLE: Converting Cmocean Colormap to Plotly Colorscale in Python\nDESCRIPTION: This function converts a cmocean colormap to a Plotly colorscale. It takes the colormap and the number of entries as input and returns a list of RGB color values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cmocean-colorscales.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cmocean\n\ndef cmocean_to_plotly(cmap, pl_entries):\n    h = 1.0/(pl_entries-1)\n    pl_colorscale = []\n\n    for k in range(pl_entries):\n        C = map(np.uint8, np.array(cmap(k*h)[:3])*255)\n        pl_colorscale.append([k*h, 'rgb'+str((C[0], C[1], C[2]))])\n\n    return pl_colorscale\n```\n\n----------------------------------------\n\nTITLE: Creating Density Map with Plotly Graph Objects\nDESCRIPTION: Shows how to create a density map using the lower-level Graph Objects API (go.Densitymap). This approach offers more customization options for plotting earthquake data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/density-heatmaps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nquakes = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nimport plotly.graph_objects as go\nfig = go.Figure(go.Densitymap(lat=quakes.Latitude, lon=quakes.Longitude, z=quakes.Magnitude,\n                                 radius=10))\nfig.update_layout(map_style=\"open-street-map\", map_center_lon=180)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Annotation Properties in Templates\nDESCRIPTION: This code snippet shows how to customize default values for annotations in graphs using a template. It specifies default text color for annotations in the figure layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nannotation_template = go.layout.Template()\nannotation_template.layout.annotationdefaults = dict(font=dict(color=\"crimson\"))\n\nfig = go.Figure()\nfig.update_layout(\n     template=annotation_template,\n     annotations=[\n         dict(text=\"Look Here\", x=1, y=1),\n         dict(text=\"Look There\", x=2, y=2)\n     ]\n )\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Row Heights in Plotly (Version 4)\nDESCRIPTION: This snippet shows how to create subplots with different row heights using the new 'row_heights' argument in Plotly version 4. It creates a figure with two rows, where the top row is twice as tall as the bottom row. Note the reversed order of heights compared to the legacy version.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=2, cols=1,\n    row_heights=[0.67, 0.33],\n    start_cell=\"top-left\")\n\nfig.add_scatter(y=[2, 1, 3], row=1, col=1)\nfig.add_bar(y=[2, 3, 1], row=2, col=1)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Display Formatting and Publishing the Notebook in Plotly\nDESCRIPTION: Configures custom CSS styling for the notebook display and publishes the notebook to the Plotly documentation site using the publisher module. Sets metadata like title, description, and category.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Discrete-Frequency.ipynb', 'python/discrete-frequency/', 'Discrete Frequency | plotly',\n    'Learn how to perform discrete frequency analysis using Python.',\n    title='Discrete Frequency in Python. | plotly',\n    name='Discrete Frequency',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=3,\n    ipynb= '~notebook_demo/110')\n```\n\n----------------------------------------\n\nTITLE: Creating a conda environment for plotly development\nDESCRIPTION: Commands to create and activate a conda environment for plotly development using Python 3.11.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n plotly-dev python=3.11\nconda activate plotly-dev\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Statistical Plotting\nDESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas and SciPy for statistical analysis and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/statistics-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Export Dimensions\nDESCRIPTION: Example of exporting an image with custom width, height, and scale settings\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimg_bytes = fig.to_image(format=\"png\", width=600, height=350, scale=2)\nImage(img_bytes)\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Grid for Animation\nDESCRIPTION: Prepares the data grid for animation by creating columns for each time point in the dataset\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-area-animation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef to_unix_time(dt):\n    epoch =  datetime.utcfromtimestamp(0)\n    return (dt - epoch).total_seconds() * 1000\n\nappl_price = list(appl['Adjusted'])\nmy_columns = []\nfor k in range(len(appl.Date) - 1):\n    my_columns.append(Column(list(appl.Date)[:k + 1], 'x{}'.format(k + 1)))\n    my_columns.append(Column(appl_price[:k + 1], 'y{}'.format(k + 1)))\ngrid = Grid(my_columns)\npy.grid_ops.upload(grid, 'AAPL-daily-stock-price' + str(time.time()), auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Histogram Contour Plot with Histogram Subplots\nDESCRIPTION: Creates a 2D density plot with histogram subplots using numpy for data generation and Plotly's Figure Factory. Uses custom colorscale and point styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/density-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nt = np.linspace(-1, 1.2, 2000)\nx = (t**3) + (0.3 * np.random.randn(2000))\ny = (t**6) + (0.3 * np.random.randn(2000))\n\ncolorscale = ['#7A4579', '#D56073', 'rgb(236,158,105)', (1, 1, 0.2), (0.98,0.98,0.98)]\n\nfig = ff.create_2d_density(\n    x, y, colorscale=colorscale,\n    hist_color='rgb(255, 237, 222)', point_size=3\n)\n\npy.iplot(fig, filename='histogram_subplots')\n```\n\n----------------------------------------\n\nTITLE: Adding LaTeX Typesetting Support in Plotly\nDESCRIPTION: This code snippet adds LaTeX typesetting support for figures displayed in Jupyter Notebooks using plotly's offline modules. Users can customize figures with LaTeX format to enhance visual representation, though some browser compatibility issues remain.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nplotly.offline.iplot() // Call to render the plot with LaTeX support.\n```\n\n----------------------------------------\n\nTITLE: Installing Chart Studio Package - Python\nDESCRIPTION: This snippet shows how to install the `chart-studio` package, which is required for online functionalities that have been removed from the main `plotly` package in version 4. The installation can be done using pip or conda.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install chart-studio\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c plotly chart-studio\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Display Configuration\nDESCRIPTION: Configures display settings for documentation including fonts and styles, and sets up publishing parameters for the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interpolation-and-extrapolation-in-2d.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Interpolation_and_Extrapolation_in_2D.ipynb', 'python/interpolation-and-extrapolation-in-2d/', 'Interpolation and Extrapolation in 2D | plotly',\n    'Learn how to interpolation and extrapolate data in two dimensions',\n    title='Interpolation and Extrapolation in 2D in Python. | plotly',\n    name='Interpolation and Extrapolation in 2D',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=4,\n    ipynb= '~notebook_demo/105')\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Metadata for Plotly Documentation\nDESCRIPTION: YAML configuration that defines the metadata for a Jupyter notebook about Plotly's Dash framework. Includes settings for jupytext conversion, kernel specifications, language information, and Plotly-specific documentation parameters.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dash.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njupyter:\n  jupytext:\n    notebook_metadata_filter: all\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.2'\n      jupytext_version: 1.3.1\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.6.8\n  plotly:\n    description: Analytical Apps with Dash\n    display_as: file_settings\n    language: python\n    layout: base\n    name: Analytical Apps with Dash\n    order: 5\n    page_type: example_index\n    permalink: https://dash.plotly.com/\n    sitemap: false\n    thumbnail: thumbnail/dash_apps.png\n```\n\n----------------------------------------\n\nTITLE: Creating a PySpark IPython Profile\nDESCRIPTION: Creates a new IPython profile specifically for PySpark. This is the first step in setting up the environment for working with Spark data in IPython notebooks.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nipython profile create pyspark\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream IDs from Credentials\nDESCRIPTION: Retrieves stream tokens from the credentials file that are needed for streaming data to plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/streaming-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstream_ids = tls.get_credentials_file()['stream_ids']\nprint stream_ids\n```\n\n----------------------------------------\n\nTITLE: Top Stories Query and Visualization\nDESCRIPTION: Complex visualization combining a table and scatter plot of top 10 stories by score.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a table figure from the DataFrame\ntop10_story_figure = FF.create_table(top10_story_df)\n\n# Scatter trace for the bubble chart timeseries\nstory_timeseries_trace = go.Scatter(\n    x=top10_story_df['timestamp'],\n    y=top10_story_df['score'],\n    xaxis='x2',\n    yaxis='y2',\n    mode='markers',\n    text=top10_story_df['title'],\n    marker=dict(\n        color=[80 + i*5 for i in range(10)],\n        size=top10_story_df['score']/50,\n        showscale=False\n    )\n)\n\n# Add the trace data to the figure\ntop10_story_figure['data'].extend(go.Data([story_timeseries_trace]))\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot Using Dictionary\nDESCRIPTION: This snippet shows how to create a Scatter plot using a dictionary with type specification while still using the hierarchical Marker object.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\ndict(\n    type='scatter',\n    x=[0],\n    y=[0],\n    marker=go.scatter.Marker(\n        color='rgb(255,45,15)'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Solving Matrix Equations\nDESCRIPTION: Demonstrates how to solve the matrix equation AX=B using NumPy's linear algebra solver.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/linear-algebra.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nA = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\nB = np.matrix(\n    [[-1, 2],\n     [1, -2]]\n)\n\nX = np.linalg.solve(A, B)\n\ncolorscale = [[0, '#497285'], [1, '#DFEBED']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(X.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='matrix-eq')\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Vox Logo in Python\nDESCRIPTION: This snippet creates a horizontal bar chart showing income percentile changes and adds the Vox logo to the top right corner. It uses plotly.graph_objs to define the chart data and layout, including image positioning.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/logos.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Bar(\n        x=['-35.3', '-15.9', '-15.8', '-15.6', '-11.1',\n           '-9.6', '-9.2', '-3.5', '-1.9', '-0.9',\n           '1.0', '1.4', '1.7', '2.0', '2.8', '6.2',\n           '8.1', '8.5', '8.5', '8.6', '11.4', '12.5',\n           '13.3', '13.7', '14.4', '17.5', '17.7',\n           '18.9', '25.1', '28.9', '41.4'],\n        y=['Designers, musicians, artists, etc.',\n           'Secretaries and administrative assistants',\n           'Waiters and servers', 'Archivists, curators, and librarians',\n           'Sales and related', 'Childcare workers, home car workers, etc.',\n           'Food preparation occupations', 'Janitors, maids, etc.',\n           'Healthcare technicians, assistants. and aides',\n           'Counselors, social and religious workers',\n           'Physical, life and social scientists', 'Construction',\n           'Factory assembly workers', 'Machinists, repairmen, etc.',\n           'Media and communications workers', 'Teachers',\n           'Mechanics, repairmen, etc.', 'Financial analysts and advisers',\n           'Farming, fishing and forestry workers',\n           'Truck drivers, heavy equipment operator, etc.','Accountants and auditors',\n           'Human resources, management analysts, etc.', 'Managers',\n           'Lawyers and judges', 'Engineers, architects and surveyors',\n           'Nurses', 'Legal support workers',\n           'Computer programmers and system admin.', 'Police officers and firefighters',\n           'Chief executives', 'Doctors, dentists and surgeons'],\n        marker=dict(\n            color='rgb(253, 240, 54)',\n            line=dict(color='rgb(0, 0, 0)',\n                      width=2)\n        ),\n        orientation='h',\n    )\n]\n\nlayout = go.Layout(\n    images=[dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=1, y=1.05,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"right\", yanchor=\"bottom\"\n      )],\n    autosize=False, height=800, width=700,\n    bargap=0.15, bargroupgap=0.1,\n    barmode='stack', hovermode='x',\n    margin=dict(r=20, l=300,\n                  b=75, t=125),\n    title='Moving Up, Moving Down<br><i>Percentile change in income between childhood and adulthood</i>',\n    xaxis=dict(\n        dtick=10, nticks=0,\n        gridcolor='rgba(102, 102, 102, 0.4)',\n        linecolor='#000', linewidth=1,\n        mirror=True,\n        showticklabels=True, tick0=0, tickwidth=1,\n        title='<i>Change in percentile</i>',\n    ),\n    yaxis=dict(\n        anchor='x',\n        gridcolor='rgba(102, 102, 102, 0.4)', gridwidth=1,\n        linecolor='#000', linewidth=1,\n        mirror=True, showgrid=False,\n        showline=True, zeroline=False,\n        showticklabels=True, tick0=0,\n        type='category',\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Testing the Ideogram Arc Generator\nDESCRIPTION: Demonstrates the use of the make_ideogram_arc function by generating points on a specific arc and printing the results as complex numbers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nz=make_ideogram_arc(1.3, [11*PI/6, PI/17])\nprint z\n```\n\n----------------------------------------\n\nTITLE: Adding Moving Average Trendlines\nDESCRIPTION: Demonstrates how to add a simple moving average trendline using Pandas' rolling function. The 'trendline=\"rolling\"' option with a window size of 5 creates a 5-point moving average of the data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/linear-fits.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"rolling\", trendline_options=dict(window=5),\n                title=\"5-point moving average\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash App with IFrame in Python\nDESCRIPTION: This snippet showcases how to embed a Dash application in a Jupyter Notebook using an IFrame. It provides a URL to access the time series Dash app and sets the dimensions of the IFrame.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/time-series.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'time-series', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Setting Label Padding for Shapes in Plotly\nDESCRIPTION: This example shows how to adjust the spacing between shapes and their text labels using the 'padding' attribute. It compares a line with custom padding of 30px to another with the default padding of 3px.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_shape(\n    type=\"line\",\n    line_color=\"RoyalBlue\",\n    x0=3,\n    y0=0,\n    x1=5,\n    y1=3,\n    line_width=3,\n    label=dict(text=\"Label padding of 30px\", padding=30),\n)\n\nfig.add_shape(\n    type=\"line\",\n    line_color=\"RoyalBlue\",\n    x0=0,\n    y0=0,\n    x1=2,\n    y1=3,\n    line_width=3,\n    label=dict(text=\"Default label padding of 3px\"),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Installing Kaleido for Static Image Export in Python\nDESCRIPTION: These commands install the Kaleido package, which is used for static image export in Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install -U kaleido\n```\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge python-kaleido\n```\n\n----------------------------------------\n\nTITLE: Creating Output Directory\nDESCRIPTION: Creates a directory to store exported images if it doesn't exist\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nif not os.path.exists(\"images\"):\n    os.mkdir(\"images\")\n```\n\n----------------------------------------\n\nTITLE: Bug Fix in Attribute and Type Handling\nDESCRIPTION: Fixes critical bugs related to the import of FigureWidget when ipywidgets are not installed, and the handling of missing data during figure construction. This enhances robustness by providing informative errors and improving the user experience.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Data Processing and Visualization\nDESCRIPTION: Series of code blocks that process Salesforce data and create various visualizations using Plotly, including bar charts, histograms, and scatter plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/salesforce.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstatuses = [x['Status'] for x in leads_for_status[\"records\"]]\nstatus_counts = Counter(statuses)\n\ndata = [go.Bar(x=status_counts.keys(), y=status_counts.values())]\npy.iplot(data, filename='salesforce/lead-distributions')\n```\n\nLANGUAGE: python\nCODE:\n```\nowners = [x['Owner']['Name'] for x in leads_for_status[\"records\"]]\ndf = pd.DataFrame({'Owners':owners, 'Status':statuses})\n```\n\nLANGUAGE: python\nCODE:\n```\nlead_comparison = []\nfor name, vals in df.groupby('Owners'):\n    counts = vals.Status.value_counts()\n    lead_comparison.append(Bar(x=counts.index, y=counts.values, name=name))\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap Plotting Function with Plotly in Python\nDESCRIPTION: This function creates a three-panel heatmap visualization using different datasets with a specified colorscale. It loads example data and creates three heatmaps with the given colorscale, arranging them in a single row using Plotly's make_subplots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport numpy as np\nimport os\nimport plotly.graph_objs as go\nfrom plotly import tools\n\ndef heatmap_plot(colorscale, title):\n    example_dir = os.path.join(os.path.dirname('__file__'), \"examples\")\n\n    hist2d = np.loadtxt(os.path.join(example_dir, \"hist2d.txt\"))\n    trace1 = go.Heatmap(z=hist2d, colorscale=colorscale, showscale=False)\n\n    st_helens = np.loadtxt(os.path.join(example_dir,\n                                        \"st-helens_before-modified.txt.gz\")).T\n    trace2 = go.Heatmap(z=st_helens, colorscale=colorscale, y0=-5, x0=-5)\n\n    dx = dy = 0.05\n    y, x = np.mgrid[-5 : 5 + dy : dy, -5 : 10 + dx : dx]\n    z = np.sin(x)**10 + np.cos(10 + y*x) + np.cos(x) + 0.2*y + 0.1*x\n    trace3 = go.Heatmap(z=z, colorscale=colorscale, showscale=False)\n\n    fig = tools.make_subplots(rows=1, cols=3, print_grid=False)\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n    fig.append_trace(trace3, 1, 3)\n    fig['layout'].update(title=title)\n    fig['layout']['xaxis2'].update(range=[0, 450])\n    fig['layout']['yaxis2'].update(range=[0, 270])\n\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Installing psutil after Standalone Orca Installation\nDESCRIPTION: Command to install the psutil Python package after manually installing the Orca binary. This is needed for Python to communicate with the Orca process.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install psutil requests\n```\n\n----------------------------------------\n\nTITLE: Embedding a Plotly Plot in the Notebook\nDESCRIPTION: Python code that embeds a previously created Plotly visualization directly into the notebook using Plotly's embed function. This allows for sharing interactive plots with collaborators.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ntls.embed(\"https://plot.ly/~bill_chambers/195\")\n```\n\n----------------------------------------\n\nTITLE: Performing Peak Detection on Stock Data in Python\nDESCRIPTION: Use PeakUtils to detect peaks in the highlighted section of the stock data and visualize them using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-fitting.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = [j for j in range(len(stock_data))][left_endpt:right_endpt]\ny = stock_data['SBUX'][left_endpt:right_endpt]\ny = y.tolist()\n\ncb = np.array(y)\nindices = peakutils.indexes(cb, thres=0.75, min_dist=0.1)\n\ntrace = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n    marker=dict(\n        color='rgb(0,56,210)'\n    ),\n    name='Highlighted Plot'\n)\n\ntrace2 = go.Scatter(\n    x=indices + left_endpt,\n    y=[y[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='rgb(255,0,0)',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='stock-data-with-peaks')\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations and Buttons - Python\nDESCRIPTION: This snippet adds annotations for high and low average values and configures buttons for dynamic visualization updates. It uses data extracted from the dataset.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nhigh_annotations = [dict(x=-0.05,\n                         y=df.High.mean(),\n                         xanchor=\"right\",\n                         yanchor=\"bottom\",\n                         xref=\"x domain\",\n                         yref=\"y\",\n                         text=\"High Avg:<br> %.2f\" % df.High.mean(),\n                         showarrow=False),\n                    dict(x=df.High.idxmax(),\n                         y=df.High.max(),\n                         xref=\"x\",\n                         yref=\"y\",\n                         text=\"High Max:<br> %.2f\" % df.High.max(),\n                         ax=0, ay=-40)]\n```\n\nLANGUAGE: Python\nCODE:\n```\nlow_annotations = [dict(x=-0.05,\n                        y=df.Low.mean(),\n                        xanchor=\"right\",\n                        yanchor=\"top\",\n                        xref=\"x domain\",\n                        yref=\"y\",\n                        text=\"Low Avg:<br> %.2f\" % df.Low.mean(),\n                        showarrow=False),\n                   dict(x=df.Low.idxmin(),\n                        y=df.Low.min(),\n                        xref=\"x\",\n                        yref=\"y\",\n                        text=\"Low Min:<br> %.2f\" % df.Low.min(),\n                        ax=0, ay=40)]\n```\n\nLANGUAGE: Python\nCODE:\n```\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=0.57,\n            y=1.2,\n            buttons=list([\n                dict(label=\"None\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, False, True, False]},\n                           {\"title\": \"Yahoo\",\n                            \"annotations\": []}]),\n                dict(label=\"High\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, True, False, False]},\n                           {\"title\": \"Yahoo High\",\n                            \"annotations\": high_annotations}]),\n                dict(label=\"Low\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, True, True]},\n                           {\"title\": \"Yahoo Low\",\n                            \"annotations\": low_annotations}]),\n                dict(label=\"Both\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, True, True, True]},\n                           {\"title\": \"Yahoo\",\n                            \"annotations\": high_annotations + low_annotations}]),\n            ]),\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: Updating Subplot Column Traces\nDESCRIPTION: This snippet updates the color of all traces located in the second subplot column using the `col` parameter in `update_traces()`. Useful for subgroup modifications in a figure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/creating-and-updating-figures.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_scatter(y=[4, 2, 3.5], mode=\"markers\",\n                marker=dict(size=20, color=\"LightSeaGreen\"),\n                name=\"a\", row=1, col=1)\n\nfig.add_bar(y=[2, 1, 3],\n            marker=dict(color=\"MediumPurple\"),\n            name=\"b\", row=1, col=1)\n\nfig.add_scatter(y=[2, 3.5, 4], mode=\"markers\",\n                marker=dict(size=20, color=\"MediumPurple\"),\n                name=\"c\", row=1, col=2)\n\nfig.add_bar(y=[1, 3, 2],\n            marker=dict(color=\"LightSeaGreen\"),\n            name=\"d\", row=1, col=2)\n\nfig.update_traces(marker=dict(color=\"RoyalBlue\"),\n                  col=2)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Template Example - Python\nDESCRIPTION: Example showing date custom formatting in hovertemplate and texttemplate using Plotly's templating syntax.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n'%{x|%b %-d, %Y}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Display and Publishing with Plotly in Python\nDESCRIPTION: This code sets up custom styling for the Jupyter notebook, installs the Plotly publisher package, and publishes the notebook content to Plotly's documentation site.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normalization.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Normalization.ipynb', 'python/normalization/', 'Normalization | plotly',\n    'Learn how to normalize data by fitting to intervals on the real line and dividing by a constant',\n    title='Normalization in Python. | plotly',\n    name='Normalization',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=2,\n    ipynb= '~notebook_demo/103')\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Amazon Redshift Database\nDESCRIPTION: SQL script that creates multiple tables for a ticketing system database in Amazon Redshift. The tables include users, venue, category, date, event, listing, and sales with appropriate columns and constraints.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users(\n\tuserid integer not null distkey sortkey,\n\tusername char(8),\n\tfirstname varchar(30),\n\tlastname varchar(30),\n\tcity varchar(30),\n\tstate char(2),\n\temail varchar(100),\n\tphone char(14),\n\tlikesports boolean,\n\tliketheatre boolean,\n\tlikeconcerts boolean,\n\tlikejazz boolean,\n\tlikeclassical boolean,\n\tlikeopera boolean,\n\tlikerock boolean,\n\tlikevegas boolean,\n\tlikebroadway boolean,\n\tlikemusicals boolean);\n\ncreate table venue(\n\tvenueid smallint not null distkey sortkey,\n\tvenuename varchar(100),\n\tvenuecity varchar(30),\n\tvenuestate char(2),\n\tvenueseats integer);\n\ncreate table category(\n\tcatid smallint not null distkey sortkey,\n\tcatgroup varchar(10),\n\tcatname varchar(10),\n\tcatdesc varchar(50));\n\ncreate table date(\n\tdateid smallint not null distkey sortkey,\n\tcaldate date not null,\n\tday character(3) not null,\n\tweek smallint not null,\n\tmonth character(5) not null,\n\tqtr character(5) not null,\n\tyear smallint not null,\n\tholiday boolean default('N'));\n\ncreate table event(\n\teventid integer not null distkey,\n\tvenueid smallint not null,\n\tcatid smallint not null,\n\tdateid smallint not null sortkey,\n\teventname varchar(200),\n\tstarttime timestamp);\n\ncreate table listing(\n\tlistid integer not null distkey,\n\tsellerid integer not null,\n\teventid integer not null,\n\tdateid smallint not null  sortkey,\n\tnumtickets smallint not null,\n\tpriceperticket decimal(8,2),\n\ttotalprice decimal(8,2),\n\tlisttime timestamp);\n\ncreate table sales(\n\tsalesid integer not null,\n\tlistid integer not null distkey,\n\tsellerid integer not null,\n\tbuyerid integer not null,\n\teventid integer not null,\n\tdateid smallint not null sortkey,\n\tqtysold smallint not null,\n\tpricepaid decimal(8,2),\n\tcommission decimal(8,2),\n\tsaletime timestamp);\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import the Plotly library and check its installed version. This helps ensure compatibility with the notebook requirements.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Installing plyfile and Reading PLY File in Python\nDESCRIPTION: This snippet installs the plyfile package and reads a PLY file from a URL. It uses urllib2 to fetch the file and PlyData to parse it.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n!pip install plyfile\nfrom plyfile import PlyData, PlyElement\n\nimport urllib2\nreq = urllib2.Request('http://people.sc.fsu.edu/~jburkardt/data/ply/chopper.ply')\nopener = urllib2.build_opener()\nf = opener.open(req)\nplydata = PlyData.read(f)\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a DataFrame with Plotly in Python\nDESCRIPTION: This snippet creates a simple DataFrame and displays it as a table using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/simple-mathematics-operations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndataframe = pd.DataFrame([[1, 2],\n                          [3, 4],\n                          [5, 6],\n                          [7, 8]],\n                         columns=['A', 'B'])\n\ntable = FF.create_table(dataframe)\npy.iplot(table, filename='math-operations-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Querying Sales Data by Category and Date\nDESCRIPTION: Python code that uses pandas to query the quantity of tickets sold per day by event category, joining multiple tables to obtain detailed sales data for category-specific trend analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(sales.qtysold) as quantity_sold, date.caldate, category.catname as category_name\nFROM sales, date, event, category\nWHERE sales.dateid = date.dateid\nAND sales.eventid = event.eventid\nAND event.catid = category.catid\nGROUP BY date.caldate, category_name\nORDER BY date.caldate asc;\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Alcohol Consumption Data in Python\nDESCRIPTION: This code imports a CSV dataset of alcohol consumption by country in 2010, creates a sample dataframe, and displays it as a table using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/basic-statistics.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='alcohol-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Example of Invalid Property in Plotly Scatter Object\nDESCRIPTION: Example showing how Plotly's data validation raises a ValueError when an invalid property is used, providing clear error messages for debugging.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ngo.Scatter(foo=123)\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Data for Plotly\nDESCRIPTION: Prepares the filtered data for visualization by creating a histogram data structure for Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndata = [go.Histogram(x=df2.toPandas()['d1'])]\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Styling and Publishing Notebook with Plotly\nDESCRIPTION: This code sets up custom styling for the notebook, installs the Plotly publisher package, and publishes the notebook to the Plotly documentation site.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'triangulation.ipynb', 'python/surface-triangulation/', 'Surface Triangulation',\n    'How to make Tri-Surf plots in Python with Plotly.',\n    title = 'Python Surface Triangulation | plotly',\n    name = 'Surface Triangulation',\n    has_thumbnail='true', thumbnail='thumbnail/trisurf.jpg',\n    language='python',\n    display_as='3d_charts', order=11,\n    ipynb= '~notebook_demo/71')\n```\n\n----------------------------------------\n\nTITLE: Initializing Streaming Plot\nDESCRIPTION: Sets up the plot structure with an empty scatter trace that will be used for streaming data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/streaming-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=[],\n    y=[],\n    mode='lines+markers',\n    stream=stream_1         # (!) embed stream id, 1 per trace\n)\n\ndata = go.Data([trace1])\n\nlayout = go.Layout(title='Time Series')\n\nfig = go.Figure(data=data, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cumulative Density Function (CDF) with Plotly\nDESCRIPTION: Creates a scatter plot showing the cumulative density function (CDF) of the alcohol consumption dataset. Takes the cumulative sum of the data and normalizes it for visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncumsum = np.cumsum(x)\n\ntrace = go.Scatter(x=[i for i in range(len(cumsum))], y=10*cumsum/np.linalg.norm(cumsum),\n                     marker=dict(color='rgb(150, 25, 120)'))\nlayout = go.Layout(\n    title=\"Cumulative Distribution Function\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='cdf-dataset')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Publisher and Custom Styling for Jupyter Notebook\nDESCRIPTION: This snippet installs the publisher library, sets up custom fonts and styling for the Jupyter Notebook, and uses the publisher.publish() function to publish the HTML report. It also demonstrates how to display HTML content in the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n! pip install publisher --upgrade\n\nfrom IPython.display import HTML, display\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"https://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish('html-reports', '/python/html-reports/',\n                  'Python HTML Reports',\n                  'How to make HTML reports with Python, Pandas, and Plotly Graphs.')\n```\n\n----------------------------------------\n\nTITLE: Plotting Route Between Tesla Stations\nDESCRIPTION: This function plots a route between two Tesla Supercharger stations using the Google Maps Directions API and Plotly's Scattermapbox. It requires a valid Google Maps API key and Mapbox access token.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/tesla-supercharging-stations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef plot_route_between_tesla_stations(address_start, address_end, zoom=3, endpt_size=6):\n    start = (supercharger_locations[address_start]['latitude'], supercharger_locations[address_start]['longitude'])\n    end = (supercharger_locations[address_end]['latitude'], supercharger_locations[address_end]['longitude'])\n\n    directions = gmaps.directions(start, end)\n    steps = []\n    steps.append(start)  # add starting coordinate to trip\n\n    for index in range(len(directions[0]['legs'][0]['steps'])):\n        start_coords = directions[0]['legs'][0]['steps'][index]['start_location']\n        steps.append((start_coords['lat'], start_coords['lng']))\n\n        if index == len(directions[0]['legs'][0]['steps']) - 1:\n            end_coords = directions[0]['legs'][0]['steps'][index]['end_location']\n            steps.append((end_coords['lat'], end_coords['lng']))\n\n    steps.append(end)  # add ending coordinate to trip\n\n    mapbox_access_token = \"ADD_YOUR_TOKEN_HERE\"\n\n    data = Data([\n        Scattermapbox(\n            lat=[item_x[0] for item_x in steps],\n            lon=[item_y[1] for item_y in steps],\n            mode='markers+lines',\n            marker=Marker(\n                size=[endpt_size] + [4 for j in range(len(steps) - 2)] + [endpt_size]\n            ),\n        )\n    ])\n    layout = Layout(\n        autosize=True,\n        hovermode='closest',\n        mapbox=dict(\n            accesstoken=mapbox_access_token,\n            bearing=0,\n            style='streets',\n            center=dict(\n                lat=np.mean([float(step[0]) for step in steps]),\n                lon=np.mean([float(step[1]) for step in steps]),\n            ),\n            pitch=0,\n            zoom=zoom\n        ),\n    )\n\n    fig = dict(data=data, layout=layout)\n    return fig\n\nserver_key = my_google_maps_api_key\ngmaps = googlemaps.Client(key=server_key)\naddress_start = supercharger_locations.keys()[0]\naddress_end = supercharger_locations.keys()[501]\nzoom=12.2\nendpt_size=20\n\nfig = plot_route_between_tesla_stations(address_start, address_end, zoom=10.2, endpt_size=20)\npy.iplot(fig, filename='tesla-driving-directions-between-superchargers')\n```\n\n----------------------------------------\n\nTITLE: Saving Plotly Plot URL for Report Generation\nDESCRIPTION: Saves the Plotly plot URL for the Apple stock visualization to include in the HTML report. The plot is created and stored on Plotly's servers but not opened in the browser.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfirst_plot_url = py.plot(data, filename='apple stock moving average', auto_open=False,)\nprint first_plot_url\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Peak Analysis\nDESCRIPTION: Imports essential Python libraries including Plotly, NumPy, Pandas, SciPy and PeakUtils for peak integration analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n```\n\n----------------------------------------\n\nTITLE: Installing plyfile and Reading PLY Data in Python\nDESCRIPTION: This snippet installs the plyfile package, downloads a PLY file from a URL, and reads its content using PlyData. It demonstrates how to access a remote PLY file and parse its data structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n!pip install plyfile\nfrom plyfile import PlyData, PlyElement\n\nimport urllib2\nreq = urllib2.Request('http://people.sc.fsu.edu/~jburkardt/data/ply/chopper.ply')\nopener = urllib2.build_opener()\nf = opener.open(req)\nplydata = PlyData.read(f)\n```\n\n----------------------------------------\n\nTITLE: Customizing Pattern Assignment with pattern_shape_sequence\nDESCRIPTION: This example shows how to control pattern assignment using pattern_shape_sequence to replace the default patterns with custom ones, including a pattern for the first variable which by default has no pattern.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pattern-hatching-texture.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.medals_long()\n\nfig = px.bar(df, x=\"medal\", y=\"count\", color=\"nation\",\n             pattern_shape=\"nation\", pattern_shape_sequence=[\".\", \"x\", \"+\"])\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a FigureWidget in Jupyter Notebook\nDESCRIPTION: This snippet demonstrates how to create a simple FigureWidget that can be directly displayed in Jupyter notebooks without requiring plotly.offline initialization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport plotly.graph_objs as go\n\nf = go.FigureWidget()\nf  # printing the widget will display it\n```\n\n----------------------------------------\n\nTITLE: Launching JupyterLab\nDESCRIPTION: Command to start the JupyterLab interface, which allows users to work with interactive notebooks that can display Plotly visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript bundle for FigureWidget\nDESCRIPTION: Commands to generate the JavaScript bundle required for testing go.FigureWidget locally.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd js\nnpm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Random Data\nDESCRIPTION: Creates a scatter plot using normally distributed random data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\npd.options.plotting.backend = \"plotly\"\nnp.random.seed(1)\n\ndf = pd.DataFrame(dict(\n    a=np.random.normal(loc=1, scale=2, size=100),\n    b=np.random.normal(loc=2, scale=1, size=100)\n))\nfig = df.plot.scatter(x=\"a\", y=\"b\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Printing DataFrame Schema\nDESCRIPTION: Displays the schema of the DataFrame to understand the structure of the bike rental data.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbtd.printSchema()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook for AI/ML Apps with Dash in Python\nDESCRIPTION: This code snippet defines the Jupyter notebook metadata, including kernel specifications, language information, and Plotly-specific settings for creating AI/ML applications using Dash in Python.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml_apps.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupyter:\n  jupytext:\n    notebook_metadata_filter: all\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.2'\n      jupytext_version: 1.3.1\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.6.8\n  plotly:\n    description: AI/ML Apps with Dash\n    display_as: ai_ml\n    language: python\n    layout: base\n    name: AI/ML Apps with Dash\n    order: 5\n    page_type: example_index\n    permalink: https://plotly.com/building-machine-learning-web-apps-in-python/\n    sitemap: false\n    thumbnail: thumbnail/ml_apps.png\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notebook Display and Publishing\nDESCRIPTION: Configures the notebook display styling and publishes the notebook to Plotly's documentation using the publisher package.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'apachespark.ipynb', 'python/apache-spark/', 'Plot Data from Apache Spark',\n    'A tutorial showing how to plot Apache Spark DataFrames with Plotly',\n    title='Plotting Spark DataFrames | Plotly', has_thumbnail='false',\n    language='python', page_type='example_index', display_as='databases', order=2,\n    redirect_from= 'ipython-notebooks/apache-spark/')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Visualization\nDESCRIPTION: This code installs and uses the `publisher` library to publish a Plotly visualization notebook. It first installs the library from a GitHub repository, then uses it to publish the notebook with specific metadata like title, description, and thumbnail. It depends on the `publisher` library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-filled-line-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    '3d-filled-line.ipynb', 'python/3d-filled-line-plots/', '3D Filled Line Plots in Python | plotly',\n    'How to make 3D Filled Line Plots in Python',\n    title = '3D Filled Line Plots in Python | plotly',\n    name = '3D Filled Line Plots',\n    has_thumbnail='true', thumbnail='thumbnail/3d-filled-line-plot.jpg',\n    language='python',\n    display_as='3d_charts', order=5,\n    ipynb= '~notebook_demo/65')\n\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report String with Python\nDESCRIPTION: This snippet creates an HTML string that includes Bootstrap styling, embedded Plotly graphs, and data tables. It demonstrates how to structure an HTML report with multiple sections and incorporate external resources.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/html-reports.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhtml_string = '''\n<html>\n    <head>\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css\">\n        <style>body{ margin:0 100; background:whitesmoke; }</style>\n    </head>\n    <body>\n        <h1>2014 technology and CPG stock prices</h1>\n\n        <!-- *** Section 1 *** --->\n        <h2>Section 1: Apple Inc. (AAPL) stock in 2014</h2>\n        <iframe width=\"1000\" height=\"550\" frameborder=\"0\" seamless=\"seamless\" scrolling=\"no\" \\\nsrc=\"''' + first_plot_url + '''.embed?width=800&height=550\"></iframe>\n        <p>Apple stock price rose steadily through 2014.</p>\n\n        <!-- *** Section 2 *** --->\n        <h2>Section 2: AAPL compared to other 2014 stocks</h2>\n        <iframe width=\"1000\" height=\"1000\" frameborder=\"0\" seamless=\"seamless\" scrolling=\"no\" \\\nsrc=\"''' + second_plot_url + '''.embed?width=1000&height=1000\"></iframe>\n        <p>GE had the most predictable stock price in 2014. IBM had the highest mean stock price. \\\nThe red lines are kernel density estimations of each stock price - the peak of each red lines \\\ncorresponds to its mean stock price for 2014 on the x axis.</p>\n        <h3>Reference table: stock tickers</h3>\n        ''' + summary_table_2 + '''\n        <h3>Summary table: 2014 stock statistics</h3>\n        ''' + summary_table_1 + '''\n    </body>\n</html>'''\n```\n\n----------------------------------------\n\nTITLE: 3D Mesh Cube with Cell Intensity\nDESCRIPTION: Demonstrates a cube mesh using cell-based intensity mode instead of vertex-based interpolation. Colors are applied per cell rather than interpolated between vertices.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/3d-mesh.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfig = go.Figure(data=[\n    go.Mesh3d(\n        x=[0, 0, 1, 1, 0, 0, 1, 1],\n        y=[0, 1, 1, 0, 0, 1, 1, 0],\n        z=[0, 0, 0, 0, 1, 1, 1, 1],\n        colorbar=dict(title=dict(text='z')),\n        colorscale=[[0, 'gold'],\n                    [0.5, 'mediumturquoise'],\n                    [1, 'magenta']],\n        intensity = np.linspace(0, 1, 12, endpoint=True),\n        intensitymode='cell',\n        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],\n        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],\n        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],\n        name='y',\n        showscale=True\n    )\n])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unselected Line Appearance in Parallel Coordinates\nDESCRIPTION: Demonstrates how to customize the appearance of unselected lines in a parallel coordinates plot using the unselected parameter. This feature (new in version 5.10) allows changing the color and opacity of lines that are not part of the current selection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-coordinates-plot.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=\n    go.Parcoords(\n        line_color='blue',\n        dimensions = list([\n            dict(range = [1,5],\n                 constraintrange = [1,2], # change this range by dragging the pink line\n                 label = 'A', values = [1,4]),\n            dict(range = [1.5,5],\n                 tickvals = [1.5,3,4.5],\n                 label = 'B', values = [3,1.5]),\n            dict(range = [1,5],\n                 tickvals = [1,2,4,5],\n                 label = 'C', values = [2,4],\n                 ticktext = ['text 1', 'text 2', 'text 3', 'text 4']),\n            dict(range = [1,5],\n                 label = 'D', values = [4,2])\n        ]),\n        unselected = dict(line = dict(color = 'green', opacity = 0.5))\n    )\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Shutting Down the Orca Server in Plotly\nDESCRIPTION: Python code to manually shut down the Orca server and then check its status. This demonstrates how to control the Orca server lifecycle.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\npio.orca.shutdown_server()\npio.orca.status\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Row Heights in Plotly (Legacy Version)\nDESCRIPTION: This snippet demonstrates how to create subplots with different row heights using the legacy 'row_width' argument in Plotly version 3. It creates a figure with two rows, where the top row is twice as tall as the bottom row.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=2, cols=1,\n    row_width=[0.33, 0.67],\n    start_cell=\"top-left\")\n\nfig.add_scatter(y=[2, 1, 3], row=1, col=1)\nfig.add_bar(y=[2, 3, 1], row=2, col=1)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Swapping Dashboard Boxes\nDESCRIPTION: Demonstrates how to exchange the positions of two boxes (2 and 3) in the dashboard layout and verifies the swap by checking the title of box 3 afterward.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.swap(2, 3)\nmy_dboard.get_box(3)['title']\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Title in Plotly Python\nDESCRIPTION: Shows how to set the title of a Plotly dashboard using Python.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard['settings']['title'] = 'My First Dashboard with Python'\n```\n\n----------------------------------------\n\nTITLE: Exporting a Figure to SVG After Orca Server Shutdown\nDESCRIPTION: Python code to export a figure to SVG after the Orca server has been shut down. This demonstrates how the server automatically restarts when needed.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\nimg_bytes = pio.to_image(fig, format=\"svg\")\ndisplay(SVG(img_bytes))\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Streaming Dependencies\nDESCRIPTION: Imports required libraries for Plotly streaming functionality including numpy for data manipulation and plotly modules for plotting and tools.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/streaming-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.plotly as py\nimport plotly.tools as tls\nimport plotly.graph_objs as go\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Alcohol Consumption Dataset in Python\nDESCRIPTION: Loads a dataset of alcohol consumption by country in 2010 from a GitHub repository using Pandas and displays the first 10 rows as a table using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='alcohol-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Creating Animations in Plotly Online Mode (Python)\nDESCRIPTION: This code snippet shows how to create animations in Plotly's online mode using the create_animations function. It uploads a grid, creates a figure with frames, and generates an animated plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\n\ncolumn_1 = Column([0.5], 'x')\ncolumn_2 = Column([0.5], 'y')\ncolumn_3 = Column([1.5], 'x2')\ncolumn_4 = Column([1.5], 'y2')\n\ngrid = Grid([column_1, column_2, column_3, column_4])\npy.grid_ops.upload(grid, 'ping_pong_grid', auto_open=False)\n\n# create figure\nfigure = {\n    'data': [\n        {\n            'xsrc': grid.get_column_reference('x'),\n            'ysrc': grid.get_column_reference('y'),\n            'mode': 'markers',\n        }\n    ],\n    'layout': {'title': 'Ping Pong Animation',\n               'xaxis': {'range': [0, 2], 'autorange': False},\n               'yaxis': {'range': [0, 2], 'autorange': False},\n               'updatemenus': [{\n                   'buttons': [\n                       {'args': [None],\n                        'label': u'Play',\n                        'method': u'animate'}\n               ],\n               'pad': {'r': 10, 't': 87},\n               'showactive': False,\n               'type': 'buttons'\n                }]},\n    'frames': [\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x2'),\n                    'ysrc': grid.get_column_reference('y2'),\n                    'mode': 'markers',\n                }\n            ]\n        },\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x'),\n                    'ysrc': grid.get_column_reference('y'),\n                    'mode': 'markers',\n                }\n            ]\n        }\n    ]\n}\n\npy.create_animations(figure, 'ping_pong')\n```\n\n----------------------------------------\n\nTITLE: Image Export Support Addition in Python Plotly\nDESCRIPTION: The integration of Kaleido as an image export support option, providing flexibility in exporting images from Plotly figures through different engines.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n- Added image export support using [Kaleido](https://github.com/plotly/Kaleido).\n```\n\nLANGUAGE: python\nCODE:\n```\nThe image export backend can be configured using the new `engine` argument to `plotly.io.to_image` and `plotly.io.write_image`.\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Defining Moebius Band Parameterization\nDESCRIPTION: This snippet imports necessary libraries and defines the parameterization for a Moebius band using NumPy. It creates a meshgrid on the rectangular domain and evaluates the parameterization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nimport matplotlib.cm as cm\nfrom scipy.spatial import Delaunay\n\nu=np.linspace(0,2*np.pi, 24)\nv=np.linspace(-1,1, 8)\nu,v=np.meshgrid(u,v)\nu=u.flatten()\nv=v.flatten()\n\n#evaluate the parameterization at the flattened u and v\ntp=1+0.5*v*np.cos(u/2.)\nx=tp*np.cos(u)\ny=tp*np.sin(u)\nz=0.5*v*np.sin(u/2.)\n\n#define 2D points, as input data for the Delaunay triangulation of U\npoints2D=np.vstack([u,v]).T\ntri = Delaunay(points2D)#triangulate the rectangle U\n```\n\n----------------------------------------\n\nTITLE: Retrieving Box Properties by ID\nDESCRIPTION: Shows how to access the properties of a specific box using its ID number from the dashboard preview, allowing inspection of its content and settings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.get_box(1)\n```\n\n----------------------------------------\n\nTITLE: Initializing Figure with Plotly - Python\nDESCRIPTION: This snippet initializes a Plotly figure object for visualizing the financial data. It requires the Plotly library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfig = go.Figure()\n```\n\n----------------------------------------\n\nTITLE: Loading Large CSV Data into SQLite Database in Chunks\nDESCRIPTION: Processes a large CSV file in chunks of 20,000 rows, performs data cleaning and column selection, and appends each chunk to a SQLite database. This approach prevents memory issues when handling large datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstart = dt.datetime.now()\nchunksize = 20000\nj = 0\nindex_start = 1\n\nfor df in pd.read_csv('311_100M.csv', chunksize=chunksize, iterator=True, encoding='utf-8'):\n\n    df = df.rename(columns={c: c.replace(' ', '') for c in df.columns}) # Remove spaces from columns\n\n    df['CreatedDate'] = pd.to_datetime(df['CreatedDate']) # Convert to datetimes\n    df['ClosedDate'] = pd.to_datetime(df['ClosedDate'])\n\n    df.index += index_start\n\n    # Remove the un-interesting columns\n    columns = ['Agency', 'CreatedDate', 'ClosedDate', 'ComplaintType', 'Descriptor',\n               'CreatedDate', 'ClosedDate', 'TimeToCompletion',\n               'City']\n\n    for c in df.columns:\n        if c not in columns:\n            df = df.drop(c, axis=1)\n\n\n    j+=1\n    print '{} seconds: completed {} rows'.format((dt.datetime.now() - start).seconds, j*chunksize)\n\n    df.to_sql('data', disk_engine, if_exists='append')\n    index_start = df.index[-1] + 1\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to PDF Function\nDESCRIPTION: Implements a utility function that converts HTML content to PDF format using xhtml2pdf library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/pdf-reports.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom xhtml2pdf import pisa\n\ndef convert_html_to_pdf(source_html, output_filename):\n    # open output file for writing (truncated binary)\n    result_file = open(output_filename, \"w+b\")\n\n    # convert HTML to PDF\n    pisa_status = pisa.CreatePDF(\n            source_html,                # the HTML to convert\n            dest=result_file)           # file handle to recieve result\n\n    # close output file\n    result_file.close()                 \n\n    # return True on success and False on errors\n    return pisa_status.err\n\nconvert_html_to_pdf(static_report, 'report.pdf')\n\n! open report.pdf\n```\n\n----------------------------------------\n\nTITLE: Plotting Heatmaps with Viridis Colorscale in Plotly\nDESCRIPTION: This code visualizes a set of heatmaps using the Viridis colorscale that was previously converted from Matplotlib format. It calls the heatmap_plot function with the viridis colorscale and 'VIRIDIS' title.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(heatmap_plot(colorscale=viridis, title='VIRIDIS'))\n```\n\n----------------------------------------\n\nTITLE: Calculating Ideogram Lengths for Chord Diagram\nDESCRIPTION: Computes the row sums of the data matrix and calculates the corresponding arc lengths for ideograms, including a gap between consecutive ideograms for better visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrow_sum=[np.sum(matrix[k,:]) for k in range(L)]\n\n#set the gap between two consecutive ideograms\ngap=2*PI*0.005\nideogram_length=2*PI*np.asarray(row_sum)/sum(row_sum)-gap*np.ones(L)\n```\n\n----------------------------------------\n\nTITLE: Setting Radii for Bézier Control Points in Python\nDESCRIPTION: This snippet defines the radii of Bézier control points for ribbons associated with diagonal data entries in the chord diagram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nradii_sribb=[0.4, 0.30, 0.35, 0.39, 0.12]# these value are set after a few trials\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Scatter Plots\nDESCRIPTION: This code demonstrates how to create a 2x2 subplot figure and add scatter plots to specific positions using the new trace addition methods with row/column parameters.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nimport pandas as pd\ndataset = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv')\n\nsubplot = tls.make_subplots(2, 2, print_grid=False)\nf2 = go.FigureWidget(subplot)\n\n# Use add_trace method with optional row/col parameters\nf2.add_trace(go.Scatter(x=dataset['Age'], y=dataset['Pregnancies'], mode='markers'), row=1, col=1)\n\n# Use add_traces with optional rows/cols parameters\nf2.add_traces([\n    go.Scatter(x=dataset['Age'], y=dataset['BMI'], mode='markers'),\n    go.Scatter(x=dataset['Age'], y=dataset['SkinThickness'], mode='markers')],\n    rows=[1, 2], cols=[2, 1]\n)\n\n# Use add_scatter with optional row/col parameters\nf2.add_scatter(x=dataset['Age'], y=dataset['BloodPressure'], mode='markers', row=2, col=2)\n\nf2.layout.title = 'Age and Diabetes Factors'\nf2\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Outlier Testing in Python\nDESCRIPTION: Import necessary libraries including Plotly, NumPy, Pandas, and SciPy for data analysis and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/outlier-test.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly Express Dependencies\nDESCRIPTION: This command installs additional dependencies required for using Plotly Express, which simplifies the process of creating complex plots in plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install plotly[express]\n```\n\n----------------------------------------\n\nTITLE: Introducing Selectors for Traces in Python Plotly\nDESCRIPTION: Enhancements to functions within the Plotly library to allow using a function as a selector. This enables more dynamic filtering of graph objects based on custom conditions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFor all `go.Figure` functions accepting a selector argument (e.g., `select_traces`), this argument can now also be a function which is passed each relevant graph object.\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly-Geo for Extended Geo Support in Python\nDESCRIPTION: These commands install the Plotly-Geo package, which provides additional geographic shape files for certain Plotly features.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install plotly-geo==1.0.0\n```\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c plotly plotly-geo=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Checking DataFrame Type\nDESCRIPTION: Prints the type of the loaded DataFrame to verify it's a Spark DataFrame.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(type(btd))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling for IPython Notebook\nDESCRIPTION: This code snippet sets up custom styling for the IPython notebook by loading external fonts and CSS. It also installs and uses a custom publisher package for publishing the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'sqlite.ipynb', 'python/big-data-analytics-with-pandas-and-sqlite/', 'Big Data Analytics with Pandas and SQLite',\n    'A primer on out-of-memory analytics of large datasets with Pandas, SQLite, and IPython notebooks.',\n    title='Big Data Workflow with Pandas and SQLite | Plotly', has_thumbnail='false',\n    redirect_from='ipython-notebooks/big-data-analytics-with-pandas-and-sqlite/',\n    language='python', page_type='example_index', display_as='databases', order=4, ipynb= '~notebook_demo/1')\n```\n\n----------------------------------------\n\nTITLE: Creating Color Selection Widget and Interaction Callback\nDESCRIPTION: Implements a color toggle widget and an update callback function to dynamically change plot colors based on user selection\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncolor_toggle = widgets.ToggleButtons(\n    options=['None', 'Red', 'Blue'],\n    index=1, description='Brush Color:', disabled=False)\n\ndef update_color(trace, points, state):\n    new_color = np.array(fig.data[0].marker.color)\n    new_color[points.point_inds] = color_toggle.index\n\n    with fig.batch_update():\n        fig.data[0].marker.color = new_color\n        fig.data[1].line.color = new_color\n\nfig.data[0].on_selection(update_color)\nfig.data[1].on_click(update_color)\n```\n\n----------------------------------------\n\nTITLE: Installing plotly packages in editable mode\nDESCRIPTION: Command to install plotly packages in editable mode, allowing changes in the local development directory to reflect directly in the environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(plotly_dev) $ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Plotly FigureWidget (Python)\nDESCRIPTION: This snippet displays the help documentation for the `go.FigureWidget` class. It uses the `help()` function to access and print the class's docstring, providing information about its usage and available methods.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figurewidget.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.FigureWidget)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Polygon Area Calculation and Visualization\nDESCRIPTION: Imports necessary libraries including Plotly, NumPy, Pandas, and SciPy for polygon area calculation and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/polygon-area.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Adding Shapes to Legend in Plotly Graph Objects\nDESCRIPTION: This example demonstrates how to add shapes to the legend by setting 'showlegend=True' on a shape. It creates two scatter plots and adds a rectangular shape to the legend.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n    name=\"Positive\"\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n    name=\"Negative\"\n))\n\nfig.add_shape(\n    showlegend=True,\n    type=\"rect\",\n    x0=2,\n    x1=4,\n    y0=4.5,\n    y1=5,\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Publishing Graphs to Plotly Web in Python\nDESCRIPTION: Shows how to publish a graph to the Plotly web platform using the plotly.plotly module. This method uploads the graph to the user's online Plotly account.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import Scatter\n\npy.plot([Scatter(x=[1, 2, 3], y=[5, 1, 6])])\n```\n\n----------------------------------------\n\nTITLE: Testing Spark Context in PySpark\nDESCRIPTION: A simple command to verify that the Spark Context (sc) is properly initialized in the IPython notebook environment. This confirms that the setup was successful.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(sc)\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Using IPython\nDESCRIPTION: Shows how to display a PNG image bytes object in a Jupyter notebook using IPython.display\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\nImage(img_bytes)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plotly Documentation Environment in IPython\nDESCRIPTION: Demonstrates how to set up the Plotly documentation environment in IPython, including font loading and CSS styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'dashboard-api.ipynb', 'python/create-online-dashboard/', 'Dashboard API | plotly',\n    'How to create and publish a dashboard with the Python API.',\n    title = 'Dashboard API | plotly',\n    name = 'Dashboard API',\n    thumbnail='thumbnail/dashboard.jpg', language='python',\n    page_type='u-guide', has_thumbnail='true', display_as='legacy_charts',\n    ipynb= '~notebook_demo/148', order=0)\n```\n\n----------------------------------------\n\nTITLE: Figure Factory Function Template\nDESCRIPTION: Template for creating a new figure factory function with documentation string and required structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef create_foo(attribute1, attribute2=value, ...):\n    \"\"\"\n    Returns figure for a foo plot.\n\n    :param (type) attribute1: description of 'attribute1'.\n    :param (type) attribute2: description of what 'attribute2' is.\n        Default = value\n    # ...\n\n    Example 1:\n    '''\n\n    '''\n\n    Example 2:\n    '''\n\n    '''\n    \"\"\"\n    # code goes here\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Setting up Plotly Documentation Environment\nDESCRIPTION: Configuration code for setting up the documentation environment with custom fonts and styles, and publishing the notebook as a Plotly tutorial.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/normality-test.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Normality-Test.ipynb', 'python/normality-test/', 'Normality Tests',\n    'Learn how to generate various normality tests using Python. ',\n    title = 'Normality Tests | Plotly',\n    has_thumbnail='false',\n    language='python',\n    display_as='statistics', order=2, ipynb='~notebook_demo/266')\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Data Streaming\nDESCRIPTION: Demonstrates the continuous streaming of time-series data with random values using a while loop and time delays.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/streaming-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport time\n\ni = 0    # a counter\nk = 5    # some shape parameter\n\ntime.sleep(5)\n\nwhile True:\n    x = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')\n    y = (np.cos(k*i/50.)*np.cos(i/50.)+np.random.randn(1))[0]\n    s.write(dict(x=x, y=y))\n    time.sleep(1)\ns.close()\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash App in Jupyter Notebook\nDESCRIPTION: This code displays an embedded Dash application within a Jupyter notebook using an IFrame. The app demonstrates how animations can be implemented in Dash, which is Plotly's framework for building analytical web applications.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/animations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'animations', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Signal Analysis and Visualization\nDESCRIPTION: Imports necessary libraries for signal processing and visualization, including Plotly for graphing, NumPy for numerical operations, Pandas for data manipulation, and SciPy for signal processing functions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/convolution.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Sphinx Function Documentation Template\nDESCRIPTION: A reStructuredText template that uses Sphinx directives to document a Python function. The template includes module reference, function autodoc, and HTML div for styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/_templates/function.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:mod:`{{module}}`.{{objname}}\n{{ underline }}====================\n\n.. currentmodule:: {{ module }}\n\n.. autofunction:: {{ objname }}\n\n\n.. raw:: html\n\n    <div class=\"clearer\"></div>\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher\nDESCRIPTION: This code snippet uses `IPython.display` to display custom CSS for styling, then installs and uses the `plotly.publisher` library to publish the current Jupyter Notebook to a Plotly account. It specifies metadata such as the filename, URL, title, description, language, and display settings for the published notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/1d-correlation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-1D-Correlation.ipynb', 'python/1d-correlation/', '1D Correlation | plotly',\n    'Learn how to perform 1 dimensional correlation between two signals in Python.',\n    title='1D Correlation in Python | plotly',\n    name='1D Correlation',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='signal-analysis', order=5)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip\nDESCRIPTION: Command to install Kaleido package using pip package manager\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U kaleido\n```\n\n----------------------------------------\n\nTITLE: Creating a Figure and Adding Shapes in Plotly\nDESCRIPTION: This snippet initializes a Plotly figure and adds a dashed line shape to it. The line is defined by starting coordinates (x0, y0) and ending coordinates (x1, y1).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/ml-roc-pr.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfig = go.Figure()\nfig.add_shape(\n    type='line', line=dict(dash='dash'),\n    x0=0, x1=1, y0=1, y1=0\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Violin Plots with FigureFactory in Python\nDESCRIPTION: Example of how to use the FigureFactory to create violin plots. This snippet shows how to access the help documentation for the create_violin function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.tools as tls\nhelp(tls.FigureFactory.create_violin)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Population Pyramid Chart with Plotly\nDESCRIPTION: Creates a basic population pyramid chart using go.Bar traces with opposing bars for men and women. Uses numpy arrays for data and configures layout with custom axis settings and bar properties.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/population-pyramid-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nwomen_bins = np.array([-600, -623, -653, -650, -670, -578, -541, -411, -322, -230])\nmen_bins = np.array([600, 623, 653, 650, 670, 578, 541, 360, 312, 170])\n\ny = list(range(0, 100, 10))\n\nlayout = go.Layout(yaxis=go.layout.YAxis(title='Age'),\n                   xaxis=go.layout.XAxis(\n                       range=[-1200, 1200],\n                       tickvals=[-1000, -700, -300, 0, 300, 700, 1000],\n                       ticktext=[1000, 700, 300, 0, 300, 700, 1000],\n                       title='Number'),\n                   barmode='overlay',\n                   bargap=0.1)\n\ndata = [go.Bar(y=y,\n               x=men_bins,\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               ),\n        go.Bar(y=y,\n               x=women_bins,\n               orientation='h',\n               name='Women',\n               text=-1 * women_bins.astype('int'),\n               hoverinfo='text',\n               marker=dict(color='seagreen')\n               )]\n\npy.iplot(dict(data=data, layout=layout), filename='EXAMPLES/bar_pyramid')\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Threshold in Seconds\nDESCRIPTION: Converts 2 hours to seconds to use as a filter threshold for bike ride durations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n60 * 60 * 2 # 2 hours in seconds\n```\n\n----------------------------------------\n\nTITLE: Implementing 2D Spline Interpolation with Plotly\nDESCRIPTION: Creates a 3D visualization of interpolated data points using scipy's interp2d function and Plotly's Scatter3d. The code generates a sine wave pattern and interpolates between points using cubic interpolation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interpolation-and-extrapolation-in-2d.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import interpolate\n\nx = np.arange(-5.0, 5.0, 0.25)\ny = np.arange(-5.0, 5.0, 0.25)\nxx, yy = np.meshgrid(x, y)\nz = np.sin(xx**2+yy**2)\nf = interpolate.interp2d(x, y, z, kind='cubic')\n\nxnew = np.arange(-5.0, 5.0, 1e-1)\nynew = np.arange(-5.0, 5.0, 1e-1)\nznew = f(xnew, ynew)\n\ntrace1 = go.Scatter3d(\n    x=x,\n    y=y,\n    z=z[0, :],\n    mode='markers',\n    name='Data',\n    marker = dict(\n        size = 7\n    )\n)\n\ntrace2 = go.Scatter3d(\n    x=ynew,\n    y=xnew,\n    z=znew[0, :],\n    marker=dict(\n        size=3,\n    ),\n    name='Interpolated Data'\n)\n\nlayout = go.Layout(\n    title='Interpolation and Extrapolation in 2D',\n    scene=dict(\n            camera= dict(\n                up=dict(x=0, y=0, z=1),\n                center=dict(x=0, y=0, z=0),\n                eye=dict(x=1, y=-1, z=0)\n            )\n    )\n)\n\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='interpolation-and-extrapolation-2d')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Network Graph with networkx and Plotly\nDESCRIPTION: Creates a second network visualization using Plotly based on networkx layout data. Similar to the igraph visualization, this code sets up scatter traces for edges and nodes but uses the Fruchterman-Reingold layout positions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/igraph-networkx-comparison.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nXv=[pos[k][0] for k in range(N)]\nYv=[pos[k][1] for k in range(N)]\nXed=[]\nYed=[]\nfor edge in E:\n    Xed+=[pos[edge[0]][0],pos[edge[1]][0], None]\n    Yed+=[pos[edge[0]][1],pos[edge[1]][1], None]\n\ntrace3=Scatter(x=Xed,\n               y=Yed,\n               mode='lines',\n               line=dict(color='rgb(210,210,210)', width=1),\n               hoverinfo='none'\n               )\ntrace4=Scatter(x=Xv,\n               y=Yv,\n               mode='markers',\n               name='net',\n               marker=dict(symbol='circle-dot',\n                             size=5,\n                             color='#6959CD',\n                             line=dict(color='rgb(50,50,50)', width=0.5)\n                             ),\n               text=labels,\n               hoverinfo='text'\n               )\n\nannot=\"This networkx.Graph has the Fruchterman-Reingold layout<br>Code:\"+\\\n\"<a href='http://nbviewer.ipython.org/gist/empet/07ea33b2e4e0b84193bd'> [2]</a>\"\n\ndata1=[trace3, trace4]\nfig1=Figure(data=data1, layout=layout)\nfig1['layout']['annotations'][0]['text']=annot\npy.iplot(fig1, filename='Coautorship-network-nx')\n```\n\n----------------------------------------\n\nTITLE: Utilizing hoverinfo in Plotly Scatter Plot Python\nDESCRIPTION: In this snippet, the deprecated 'hoverinfo' attribute is used to control hover text display in a scatter plot created with Plotly. This approach showcases how custom text is set for each data point. Although 'hoverinfo' is deprecated, understanding legacy methods is beneficial for maintaining older codebases. Users need Plotly and appropriate setups to render the visualizations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/hover-text-and-formatting.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[2, 1, 6, 4, 4],\n    hovertext=[\"Text A\", \"Text B\", \"Text C\", \"Text D\", \"Text E\"],\n    hoverinfo=\"text\",\n    marker=dict(\n        color=\"green\"\n    ),\n    showlegend=False\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Indexing by GeoJSON Properties in Plotly Maps\nDESCRIPTION: This example shows how to match DataFrame rows with GeoJSON properties when the GeoJSON lacks an 'id' field or when a property key is preferred. The `featureidkey` parameter specifies the property that will match with DataFrame locations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/tile-county-choropleth.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.election()\ngeojson = px.data.election_geojson()\n\nprint(df[\"district\"][2])\nprint(geojson[\"features\"][0][\"properties\"])\n```\n\n----------------------------------------\n\nTITLE: Manual Black Code Formatting\nDESCRIPTION: This command manually runs the Black formatter on the entire project directory to format the code according to Black's style guidelines. It should be performed before a pull request if the pre-commit hook is not used.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n(plotly_dev) $ black .\n```\n\n----------------------------------------\n\nTITLE: Installing Orca with Conda for Static Image Export\nDESCRIPTION: Command to install Orca and its Python dependencies using the conda package manager. This installs plotly-orca version 1.2.1 along with psutil and requests packages.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/orca-management.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c plotly plotly-orca==1.2.1 psutil requests\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Python Library\nDESCRIPTION: Simple version check to ensure Plotly is at least version 1.9.2+ which is required for polynomial fits.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/polynomial-fits.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for Animation Support\nDESCRIPTION: Verifies the installed Plotly version. Animations are available in version 1.12.10 and above.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/heatmap-animation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Frequency Analysis in Python\nDESCRIPTION: Imports necessary libraries for data analysis and visualization, including Plotly for creating interactive plots, NumPy for numerical operations, Pandas for data manipulation, and SciPy for scientific computing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/frequency-counts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Display Settings\nDESCRIPTION: Sets up custom styling for the notebook and publishes it to the Plotly documentation site. Includes custom fonts, CSS styling, and metadata for proper display in the documentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/heatmap-animation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'heatmap.ipynb', 'python/heatmap-animation/', 'Heatmap Animation | plotly',\n    'How to make an animated heatmap in Python.',\n    title='Heatmap Animation | plotly',\n    name='Heatmap Animation',\n    language='python',\n    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/heatmap_animation.gif',\n    ipynb= '~notebook_demo/131',\n    display_as='animations', order=4)\n```\n\n----------------------------------------\n\nTITLE: Import Required Libraries\nDESCRIPTION: Importing necessary Python libraries for BigQuery analysis and Plotly visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nfrom pandas.io import gbq # to communicate with Google BigQuery\n```\n\n----------------------------------------\n\nTITLE: Importing Spark SQL and Visualization Libraries\nDESCRIPTION: Initializes the SQL context from an existing Spark context and imports required libraries for data visualization (Plotly) and analysis (pandas).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyspark.sql import SQLContext\nsqlContext = SQLContext(sc)\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport pandas as pd\nimport requests\nrequests.packages.urllib3.disable_warnings()\n```\n\n----------------------------------------\n\nTITLE: Controlling Binary String Compression Levels for Image Display in Plotly\nDESCRIPTION: Shows how to control the compression level of binary string representation using the binary_compression_level parameter. The example demonstrates the impact of different compression levels (0-9) on the length of the binary string.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/imshow.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom skimage import data\nimg = data.camera()\nfor compression_level in range(0, 9):\n    fig = px.imshow(img, binary_string=True, binary_compression_level=compression_level)\n    print(f\"compression level {compression_level}: length of {len(fig.data[0].source)}\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Automatic Margin Adjustment in Plotly\nDESCRIPTION: Demonstrates automatic margin adjustment using the automargin feature to prevent label overlap. Creates a bar chart with custom axis labels and tick text.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/setting-graph-size.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=[\"Apples\", \"Oranges\", \"Watermelon\", \"Pears\"],\n    y=[3, 2, 1, 4]\n))\n\nfig.update_layout(\n    autosize=False,\n    width=500,\n    height=500,\n    yaxis=dict(\n        title=dict(\n            text=\"Y-axis Title\",\n            font=dict(\n                size=30\n            )\n        ),\n        ticktext=[\"Very long label\", \"long label\", \"3\", \"label\"],\n        tickvals=[1, 2, 3, 4],\n        tickmode=\"array\",\n    )\n)\n\nfig.update_yaxes(automargin=True)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Histograms from Sampled Data\nDESCRIPTION: Creates two samples of different ride duration ranges and plots overlapping histograms for comparison.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ns1 = df2.sample(False, 0.05, 20)\ns2 = df3.sample(False, 0.05, 2500)\n\ndata = [\n        go.Histogram(x=s1.toPandas()['d1'], name=\"Large Sample\"),\n        go.Histogram(x=s2.toPandas()['d1'], name=\"Small Sample\")\n    ]\n\npy.iplot(data, filename=\"spark/sample_rides\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plotly Scatter Plot in Python\nDESCRIPTION: Example showing how to create a basic scatter plot using plotly.graph_objs with x and y coordinates in marker mode.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Scatter(\n    x = [1, 2, 3],\n    y = [4, 5, 6],\n    mode = 'markers',\n)\n\ndata = [trace]\n\npy.iplot(data, filename='new-scatter-plot')\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Visualization in Jupyter Notebook\nDESCRIPTION: Uses Plotly's tools module to embed an existing visualization from Plotly's web platform into the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\ntls.embed('https://plot.ly/~chris/7365')\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Verbose Output\nDESCRIPTION: Executes pytest with a verbose flag to provide detailed output during test execution, which is useful for debugging and understanding test results.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npytest -v tests/\n```\n\n----------------------------------------\n\nTITLE: Plotting Triangulated Sinusoidal Surface\nDESCRIPTION: Applies the triangulated surface plotting function to the sinusoidal surface data and adjusts the plot layout. This demonstrates how to customize the plot appearance and camera angle.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata2=plotly_trisurf(x,y,z, tri.simplices, colormap=cm.cubehelix, plot_edges=None)\nfig2 = go.Figure(data=data2, layout=layout)\nfig2['layout'].update(dict(title='Triangulated surface',\n                          scene=dict(camera=dict(eye=dict(x=1.75,\n                                                          y=-0.7,\n                                                          z= 0.75)\n                                                )\n                                    )))\n\npy.iplot(fig2, filename='trisurf-cubehx')\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Library\nDESCRIPTION: Imports and displays the current version of Plotly library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/graph-data-from-mysql-database-in-python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Bundled License Information for Plotly.js Dependencies\nDESCRIPTION: This code block contains license and copyright information for various libraries and components used in Plotly.js. It includes MIT, BSD-3-Clause, and other open-source licenses for different modules.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/labextension/static/340.2a23c8275d47a2531dae.js.LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*! Bundled license information:\n\nplotly.js/dist/plotly.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n  (*!\n   * Determine if an object is a Buffer\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n  (*!\n   * pad-left <https://github.com/jonschlinkert/pad-left>\n   *\n   * Copyright (c) 2014-2015, Jon Schlinkert.\n   * Licensed under the MIT license.\n   *)\n  (*!\n   * repeat-string <https://github.com/jonschlinkert/repeat-string>\n   *\n   * Copyright (c) 2014-2015, Jon Schlinkert.\n   * Licensed under the MIT License.\n   *)\n  (*! Bundled license information:\n  \n  native-promise-only/lib/npo.src.js:\n    (*! Native Promise Only\n        v0.8.1 (c) Kyle Simpson\n        MIT License: http://getify.mit-license.org\n    *)\n  \n  polybooljs/index.js:\n    (*\n     * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc\n     * @license MIT\n     * @preserve Project Home: https://github.com/voidqk/polybooljs\n     *)\n  \n  ieee754/index.js:\n    (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n  \n  buffer/index.js:\n    (*!\n     * The buffer module from node.js, for the browser.\n     *\n     * @author   Feross Aboukhadijeh <https://feross.org>\n     * @license  MIT\n     *)\n  \n  safe-buffer/index.js:\n    (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n  \n  assert/build/internal/util/comparisons.js:\n    (*!\n     * The buffer module from node.js, for the browser.\n     *\n     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n     * @license  MIT\n     *)\n  \n  object-assign/index.js:\n    (*\n    object-assign\n    (c) Sindre Sorhus\n    @license MIT\n    *)\n  \n  maplibre-gl/dist/maplibre-gl.js:\n    (**\n     * MapLibre GL JS\n     * @license 3-Clause BSD. Full text of license: https://github.com/maplibre/maplibre-gl-js/blob/v4.7.1/LICENSE.txt\n     *)\n  *)\n*/\n```\n\n----------------------------------------\n\nTITLE: Publishing the Baseline Detection Notebook with Custom Styling\nDESCRIPTION: Sets up custom styling for the notebook display and publishes the notebook using the publisher module. This includes styling with custom fonts and CSS, as well as configuring metadata for the published content.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-detection.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Baseline-Detection.ipynb', 'python/baseline-detection/', 'Baseline Detection | plotly',\n    'Learn how to detect baselines on data in Python.',\n    title='Baseline Detection in Python | plotly',\n    name='Baseline Detection',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=1,\n    ipynb= '~notebook_demo/117')\n```\n\n----------------------------------------\n\nTITLE: Generating Random Data for T-Test Analysis in Python\nDESCRIPTION: Generate random data from normal distributions with different means for use in t-test analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/t-test.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata1 = np.random.normal(0, 1, size=50)\ndata2 = np.random.normal(2, 1, size=50)\n```\n\n----------------------------------------\n\nTITLE: Using Figure Batch Animation in Python\nDESCRIPTION: Reference to the batch_animate method of Plotly's Figure class, which provides a context manager API for animation in Plotly figures.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.Figure().batch_animate)\n```\n\n----------------------------------------\n\nTITLE: Initializing Offline Plotting in Python with Plotly\nDESCRIPTION: Demonstrates how to create an offline plot using Plotly's Python library. This functionality allows for local HTML file generation with the necessary plotly.js code to render the graph, without requiring an internet connection.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import plot\nfrom plotly.graph_objs import Scatter\n\nplot([Scatter(x=[1, 2, 3], y=[3, 1, 6])])\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Display and Publishing\nDESCRIPTION: Sets up custom styling for the Jupyter notebook, installs the Plotly publisher package, and publishes the notebook as a Plotly tutorial. This step configures fonts and CSS for proper display in the Plotly documentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/baseline-subtraction.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Baseline-Subtraction.ipynb', 'python/baseline-subtraction/', 'Baseline Subtraction | plotly',\n    'Learn how to subtract baseline estimates from data in Python.',\n    title='Baseline Subtraction in Python | plotly',\n    name='Baseline Subtraction',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=2,\n    ipynb= '~notebook_demo/118')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing the Notebook\nDESCRIPTION: Configure custom styling for the notebook display and use Plotly's publisher tool to publish the notebook to the Plotly documentation site.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interact-decorator.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'Interact.ipynb', 'python/interact-decorator/', 'Use the Interact decorator with go.FigureWidget',\n    'Use the Interact decorator with go.FigureWidget',\n    title = 'Use Interact decorator with FigureWidget',\n    name = 'Use Interact decorator with FigureWidget',\n    has_thumbnail='true', thumbnail='thumbnail/zoom.jpg',\n    language='python', page_type='example_index',\n    display_as='chart_events', order=4,\n    ipynb= '~notebook_demo/254')\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Heatmaps with Plotly FigureFactory in Python\nDESCRIPTION: Demonstrates how to use the FigureFactory to create annotated heatmaps in Plotly. The code snippet shows how to access the help documentation for this feature.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\nhelp(tls.FigureFactory.create_annotated_heatmap)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Plotly\nDESCRIPTION: This snippet installs the necessary packages 'plotly_geo', 'geopandas', 'pyshp', and 'shapely' via pip for creating choropleth maps.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install plotly-geo==1.0.0\n!pip install geopandas==0.8.1\n!pip install pyshp==2.1.2\n!pip install shapely==1.7.1\n```\n\nLANGUAGE: python\nCODE:\n```\nconda install plotly\nconda install geopandas\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Sets up documentation styling and publishes the notebook as documentation using Plotly's publisher tool.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/polynomial-fits.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'Polynomial-fits.ipynb', 'python/polynomial-fits/', 'Polynomial Fit',\n    'Create a polynomial fit / regression in Python and add a line of best fit to your chart.',\n    title = 'Polynomial Fit',\n    name = 'Polynomial Fit',\n    has_thumbnail='true', thumbnail='thumbnail/polynomial_fit.jpg',\n    language='python', page_type='example_index',\n    display_as='statistics', order=12,\n    ipynb= '~notebook_demo/138')\n```\n\n----------------------------------------\n\nTITLE: Creating Trisurf Plots with FigureFactory in Python\nDESCRIPTION: Example of how to use the FigureFactory to create trisurf plots, which now support a visible colorbar. This snippet demonstrates how to access the help documentation for the create_trisurf function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.tools as tls\nhelp(tls.FigureFactory.create_trisurf)\n```\n\n----------------------------------------\n\nTITLE: Loading and Sampling Car Dataset with Pandas in Python\nDESCRIPTION: This snippet loads a CSV file containing car data into a Pandas DataFrame, selecting specific columns and displaying a sample of 5 rows.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objs as go\n\ncars_df = pd.read_csv('data/cars/cars.csv',\n                      usecols=['City mpg',\n                               'Fuel Type',\n                               'Horsepower',\n                               'Model Year',\n                               'Torque', 'Hybrid', 'ID'])\ncars_df.sample(5)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook to Plotly Documentation\nDESCRIPTION: Sets up custom styling for the notebook and publishes it to the Plotly documentation website. The code installs the publisher package, configures metadata, and publishes the notebook to the specified location.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/convolution.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Convolution.ipynb', 'python/convolution/', 'Convolution | plotly',\n    'Learn how to perform convolution between two signals in Python.',\n    title='Convolution in Python | plotly',\n    name='Convolution',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='signal-analysis', order=4)\n```\n\n----------------------------------------\n\nTITLE: Updating Map Style Parameter in Python\nDESCRIPTION: Change 'mapbox_style' to 'map_style' when specifying the map style.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/migrate-to-maplibre.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old style parameter\npx.scatter_mapbox(mapbox_style=\"light\")\n\n# New style parameter\npx.scatter_map(map_style=\"light\")\n```\n\n----------------------------------------\n\nTITLE: Extended Geo Support Installation\nDESCRIPTION: Commands for installing the plotly-geo package, which provides additional geographic shape files needed for certain plotly features like county choropleth maps.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install plotly-geo==1.0.0\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c plotly plotly-geo=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Theme - Python\nDESCRIPTION: This snippet shows how to restore the default Plotly theme after it has been disabled in version 4. The theme can be set back to the standard with a single line of code.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v4-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Restore default theme\npio.templates.default = \"plotly\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Alignment Chart using Dash Bio\nDESCRIPTION: Embeds an interactive alignment chart using Dash Bio components within an IPython notebook frame. This code demonstrates how to integrate the alignment viewer into a Jupyter environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/bio-alignment-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'bio-alignmentchart', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling for Jupyter Notebook\nDESCRIPTION: Add custom CSS and font styling to the Jupyter notebook for improved readability.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/t-test.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Graph URLs for Report\nDESCRIPTION: Defines a list of Plotly graph URLs that will be included in the report.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/pdf-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngraphs = ['https://plot.ly/~christopherp/308',\n          'https://plot.ly/~christopherp/306',\n          'https://plot.ly/~christopherp/300',\n          'https://plot.ly/~christopherp/296']\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Statistical Analysis in Python\nDESCRIPTION: This snippet imports necessary Python libraries for statistical analysis and data visualization, including Plotly, NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/basic-statistics.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Setting up Documentation Environment\nDESCRIPTION: Configuration for documentation styling and publishing setup, including font loading and documentation generation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'BigQuery-Plotly.ipynb', 'python/google_big_query/', 'Google Big-Query',\n    'How to make your-tutorial-chart plots in Python with Plotly.',\n    title = 'Google Big Query | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/bigquery2.jpg',\n    language='python', page_type='example_index',\n    display_as='databases', order=7)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for Dashboard API\nDESCRIPTION: Imports the Plotly library and displays the installed version to ensure compatibility with the dashboard API, which requires version 2.0.5 or higher.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Generating Control Points for Bézier Curves in Python\nDESCRIPTION: This function calculates the Cartesian coordinates of control points for Bézier curves used in ribbon sides. It takes angle and radius as inputs.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef control_pts(angle, radius):\n    #angle is a  3-list containing angular coordinates of the control points b0, b1, b2\n    #radius is the distance from b1 to the  origin O(0,0)\n\n    if len(angle)!=3:\n        raise InvalidInputError('angle must have len =3')\n    b_cplx=np.array([np.exp(1j*angle[k]) for k in range(3)])\n    b_cplx[1]=radius*b_cplx[1]\n    return zip(b_cplx.real, b_cplx.imag)\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Express and using long-form data\nDESCRIPTION: This snippet imports the Plotly Express library and loads a dataset in long-form format for visualization. No external dependencies are required beyond Plotly Express. The imported data is displayed subsequently.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/wide-form.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nlong_df = px.data.medals_long()\nlong_df\n```\n\n----------------------------------------\n\nTITLE: Adding Shapes to Legend in Plotly Python\nDESCRIPTION: This snippet demonstrates how to add shapes to the legend in Plotly by setting showlegend=True. It also shows how to customize the legend name for shapes using the 'name' or 'text' attributes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/shapes.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.stocks(indexed=True)\n\nfig = px.line(df)\n\nfig.add_shape(\n    type=\"rect\",\n    x0=\"2018-09-24\",\n    y0=0,\n    x1=\"2018-12-18\",\n    y1=3,\n    line_width=0,\n    label=dict(text=\"Decline\", textposition=\"top center\", font=dict(size=20)),\n    fillcolor=\"green\",\n    opacity=0.25,\n)\n\nfig.add_shape(\n    showlegend=True,\n    type=\"line\",\n    x0=min(df.index),\n    y0=1,\n    x1=max(df.index),\n    y1=1,\n    line_width=3,\n    line_dash=\"dot\",\n    label=dict(\n        text=\"Jan 1 2018 Baseline\",\n        textposition=\"end\",\n        font=dict(size=20, color=\"blue\"),\n        yanchor=\"top\",\n    ),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Templating Plotly Graph Objects Documentation with Jinja2\nDESCRIPTION: This template defines the structure for documenting Plotly graph objects classes. It creates sections for the class itself and its corresponding lowercase module, using Sphinx autodoc directives to include class documentation, methods, and module members.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/_templates/trace.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n:mod:`{{module}}`.{{objname}}\n{{ underline }}============================\n\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   .. automethod:: __init__\n   {% endblock %}\n\n:mod:`{{module}}`.{{objname.lower()}}\n{{ underline }}================================\n\n.. autosummary::\n   \n   plotly.graph_objs.{{ objname.lower() }}\n\n.. automodule:: plotly.graph_objs.{{ objname.lower() }}\n   :members:\n   :undoc-members:\n\n\n.. raw:: html\n\n    <div class=\"clearer\"></div>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This HTML snippet embeds a YouTube video introducing Plotly Express and Dash from the SciPy 2021 conference.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/plotly-express.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/FpCgG85g2Hw\"\ntitle=\"Data Visualization as The First and Last Mile of Data Science: Plotly Express and Dash | SciPy 2021\"\nframeborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Pytest Tests\nDESCRIPTION: Commands to run a specific set of tests or a single test file using pytest, aiding targeted testing when focusing on specific areas of the codebase.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_core/\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_plotly/test_plot.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_plotly/test_plot.py::test_function\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Display and Publishing Content with Plotly\nDESCRIPTION: This snippet sets up custom styling for Jupyter Notebook, installs a publisher package, and publishes the notebook content to Plotly's documentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/simple-mathematics-operations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Simple_Mathematics_Operations.ipynb', 'python/simple-mathematics-operations/', 'Simple Mathematics Operations | plotly',\n    'Learn how to perform simple mathematical operations on dataframes such as scaling, adding, and subtracting',\n    title='Simple Mathematics Operations in Python. | plotly',\n    name='Simple Mathematics Operations',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=1,\n    ipynb= '~notebook_demo/99')\n```\n\n----------------------------------------\n\nTITLE: Embedding Published Plotly Graph\nDESCRIPTION: Embeds a previously published Plotly graph that contains refined styling and annotations for presentation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\ntls.embed(\"https://plot.ly/~bill_chambers/101\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Validating Matrix Data for Chord Diagram\nDESCRIPTION: Prepares a NumPy array representation of the Facebook comments data and defines a function to validate that the data matrix is square, which is required for chord diagrams.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nmatrix=np.array([[16,  3, 28,  0, 18],\n                 [18,  0, 12,  5, 29],\n                 [ 9, 11, 17, 27,  0],\n                 [19,  0, 31, 11, 12],\n                 [23, 17, 10,  0, 34]], dtype=int)\n\ndef check_data(data_matrix):\n    L, M=data_matrix.shape\n    if L!=M:\n        raise ValueError('Data array must have (n,n) shape')\n    return L\n\nL=check_data(matrix)\n```\n\n----------------------------------------\n\nTITLE: Embedding a Dash App with a Plotly Figure\nDESCRIPTION: This code snippet embeds a Dash app, which presumably contains a Plotly figure, within the documentation. It uses `IPython.display.IFrame` to display a web page containing the Dash app. The Dash app's URL is defined, and the IFrame is configured to take up the full width of its container.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/figure-structure.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'figure-structure', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Loading County Unemployment Data\nDESCRIPTION: Loads unemployment data by county using pandas, with FIPS codes as identifiers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/choropleth-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Sets up documentation styling and publishes the notebook as documentation using the Plotly publisher library. Includes custom font loading and CSS styling for documentation pages.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/insets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'inset.ipynb', 'python/insets/', 'Inset Plots | plotly',\n    'How to make an inset graph in python.',\n    title = 'Inset Plots | plotly',\n    name = 'Inset Plots',\n    has_thumbnail='true', thumbnail='thumbnail/insets.jpg',\n    language='python', page_type='example_index',\n    display_as='multiple_axes', order=3)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up custom styling and publishes the notebook documentation using Plotly's publisher module.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/density-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'density-plots.ipynb', 'python/density-plots/', 'Python 2d Density Plots | plotly',\n    'How to make a 2d density plot in python. Examples of density plots with kernel density estimations, custom color-scales, and smoothing.',\n    title='Python 2d Density Plots | plotly',\n    name='2d Density Plots',\n    thumbnail='thumbnail/density.gif', language='python',\n    has_thumbnail='true', display_as='statistical', order=7,\n    ipynb= '~notebook_demo/25')\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Plotly Documentation\nDESCRIPTION: Sets up display configuration and publishes the notebook as documentation using Plotly's publisher tool. Includes font styling and custom CSS configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/numerical-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Numerical_Integration.ipynb', 'python/numerical-integration/', 'Numerical Integration | plotly',\n    'Learn how to integrate a sequence or list of values numerically',\n    title='Numerical Integration in Python. | plotly',\n    name='Numerical Integration',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=7,\n    ipynb= '~notebook_demo/101')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Sets up custom styling for documentation and publishes the notebook using the publisher module. Includes font loading and CSS customization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/population-pyramid-charts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'pyramid-charts.ipynb', 'python/population-pyramid-charts/', 'Python Population Pyramid Charts | Plotly',\n    'How to make Population Pyramid Charts in Python with Plotly.',\n    title = 'Population Pyramid Charts | Plotly',\n    name = 'Population Pyramid Charts',\n    thumbnail='thumbnail/pyramid.jpg', language='python',\n    has_thumbnail='true', display_as='basic', order=5.01,\n    ipynb= '~notebook_demo/221')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Wind Speed Data\nDESCRIPTION: Loads wind speed data from a CSV file and creates a table visualization of the first 10 rows using Plotly's Figure Factory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/statistics-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwind_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\ndf = wind_data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='wind-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing Jupyter Notebook in Python\nDESCRIPTION: This snippet sets up custom styling for the Jupyter notebook, installs a publisher package, and publishes the notebook with specified metadata.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/basic-statistics.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Basic-Statistics.ipynb', 'python/basic-statistics/', 'Basic Statistics | plotly',\n    'Learn how to perform basic statistical operations using Python.',\n    title='Basic Statistics in Python. | plotly',\n    name='Basic Statistics',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=1,\n    ipynb= '~notebook_demo/109')\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly using Pip or Conda\nDESCRIPTION: The command demonstrates how to install the plotly library using pip for Python packages or conda for package management. It's a prerequisite for using plotly in Python projects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install plotly\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c conda-forge plotly\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Plotly Ribbon Plot Documentation\nDESCRIPTION: Sets up the documentation environment and publishes the notebook as a Plotly example. Includes font styling, CSS configuration, and publisher settings for the documentation platform.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/ribbon-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'ribbon.ipynb', 'python/ribbon-plots/', 'Python Ribbon Plots | plotly',\n    'How to make ribbon plots in Python. ',\n    title = 'Python Ribbon Plots | plotly',\n    name = 'Ribbon Plots',\n    has_thumbnail='true', thumbnail='thumbnail/ribbon-plot.jpg',\n    language='python', page_type='example_index',\n    display_as='3d_charts', order=4,\n    ipynb= '~notebook_demo/64')\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Plotly FigureFactory in Python\nDESCRIPTION: Shows how to use the FigureFactory to create tables in Plotly. The code snippet demonstrates how to access the help documentation for this feature.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\nhelp(tls.FigureFactory.create_table)\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plots with Secret Sharing\nDESCRIPTION: Generates a series of box plots with different positions and custom colors, then uploads them to Plotly with secret sharing enabled. The plot URL is stored for later use in the dashboard.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.randn(50)\nx1 = np.random.randn(50) + 2\nx2 = np.random.randn(50) + 4\nx3 = np.random.randn(50) + 6\n\ncolors = ['#FAEE1C', '#F3558E', '#9C1DE7', '#581B98']\n\ntrace0 = go.Box(x=x0, marker={'color': colors[0]})\ntrace1 = go.Box(x=x1, marker={'color': colors[1]})\ntrace2 = go.Box(x=x2, marker={'color': colors[2]})\ntrace3 = go.Box(x=x3, marker={'color': colors[3]})\ndata = [trace0, trace1, trace2, trace3]\n\nurl_2 = py.plot(data, filename='box-plots-for-dashboard', sharing='secret', auto_open=False)\npy.iplot(data, filename='box-plots-for-dashboard')\n```\n\n----------------------------------------\n\nTITLE: Hide Plotly Legands in Python\nDESCRIPTION: Shows how to alter visibility of legends using the `showlegend` attribute in Plotly charts. It specifically hides legends in a histogram plot. The example uses Plotly Express for creating histograms.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.histogram(df, x=\"sex\", y=\"total_bill\", color=\"time\",\n                  title=\"Total Bill by Sex, Colored by Time\")\nfig.update_layout(showlegend=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Template Elements in a Plotly Figure\nDESCRIPTION: Demonstrates how to customize a template's tuple element by referencing it with a matching templateitemname. This example changes the watermark text from 'DRAFT' to 'CONFIDENTIAL'.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/templates.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\ndraft_template = go.layout.Template()\ndraft_template.layout.annotations = [\n    dict(\n        name=\"draft watermark\",\n        text=\"DRAFT\",\n        textangle=-30,\n        opacity=0.1,\n        font=dict(color=\"black\", size=100),\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.5,\n        showarrow=False,\n    )\n]\n\nfig = go.Figure()\nfig.update_layout(\n    template=draft_template,\n    annotations=[\n        dict(\n            templateitemname=\"draft watermark\",\n            text=\"CONFIDENTIAL\",\n        )\n    ]\n)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method for Specifying Data Array Properties\nDESCRIPTION: This example shows the now-invalid method of specifying a scalar value for a data array property in a Bar chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\ngo.Bar(x=1)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Bar Plot\nDESCRIPTION: Creates a horizontal bar plot using the barh method.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pandas-backend.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\n\ndf = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1]))\nfig = df.plot.barh()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Tri-Surface Plotting Function with Plotly Mesh3d\nDESCRIPTION: This function creates a triangulated surface plot using Plotly's Mesh3d. It takes vertex coordinates, simplices, and optional parameters like colormap and edge plotting. The function returns a list of Plotly graph objects for the surface and optionally the edges.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/surface-triangulation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef tri_indices(simplices):\n    #simplices is a numpy array defining the simplices of the triangularization\n    #returns the lists of indices i, j, k\n\n    return ([triplet[c] for triplet in simplices] for c in range(3))\n\ndef plotly_trisurf(x, y, z, simplices, colormap=cm.RdBu, plot_edges=None):\n    #x, y, z are lists of coordinates of the triangle vertices\n    #simplices are the simplices that define the triangularization;\n    #simplices  is a numpy array of shape (no_triangles, 3)\n    #insert here the  type check for input data\n\n    points3D=np.vstack((x,y,z)).T\n    tri_vertices=map(lambda index: points3D[index], simplices)# vertices of the surface triangles\n    zmean=[np.mean(tri[:,2]) for tri in tri_vertices ]# mean values of z-coordinates of\n                                                      #triangle vertices\n    min_zmean=np.min(zmean)\n    max_zmean=np.max(zmean)\n    facecolor=[map_z2color(zz,  colormap, min_zmean, max_zmean) for zz in zmean]\n    I,J,K=tri_indices(simplices)\n\n    triangles=go.Mesh3d(x=x,\n                     y=y,\n                     z=z,\n                     facecolor=facecolor,\n                     i=I,\n                     j=J,\n                     k=K,\n                     name=''\n                    )\n\n    if plot_edges is None:# the triangle sides are not plotted\n        return [triangles]\n    else:\n        #define the lists Xe, Ye, Ze, of x, y, resp z coordinates of edge end points for each triangle\n        #None separates data corresponding to two consecutive triangles\n        lists_coord=[[[T[k%3][c] for k in range(4)]+[ None]   for T in tri_vertices]  for c in range(3)]\n        Xe, Ye, Ze=[reduce(lambda x,y: x+y, lists_coord[k]) for k in range(3)]\n\n        #define the lines to be plotted\n        lines=go.Scatter3d(x=Xe,\n                        y=Ye,\n                        z=Ze,\n                        mode='lines',\n                        line=dict(color= 'rgb(50,50,50)', width=1.5)\n               )\n        return [triangles, lines]\n```\n\n----------------------------------------\n\nTITLE: Calculating and Visualizing Area of a Square with Plotly\nDESCRIPTION: Defines functions to sort polygon corners and calculate area, then applies them to a square. The result is visualized using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/polygon-area.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef PolygonSort(corners):\n    n = len(corners)\n    cx = float(sum(x for x, y in corners)) / n\n    cy = float(sum(y for x, y in corners)) / n\n    cornersWithAngles = []\n    for x, y in corners:\n        an = (np.arctan2(y - cy, x - cx) + 2.0 * np.pi) % (2.0 * np.pi)\n        cornersWithAngles.append((x, y, an))\n    cornersWithAngles.sort(key = lambda tup: tup[2])\n    return map(lambda (x, y, an): (x, y), cornersWithAngles)\n\ndef PolygonArea(corners):\n    n = len(corners)\n    area = 0.0\n    for i in range(n):\n        j = (i + 1) % n\n        area += corners[i][0] * corners[j][1]\n        area -= corners[j][0] * corners[i][1]\n    area = abs(area) / 2.0\n    return area\n\ncorners = [(0, 0), (1, 1), (0, 1), (1, 0)]\ncorners_sorted = PolygonSort(corners)\narea = PolygonArea(corners_sorted)\n\nx = [corner[0] for corner in corners_sorted]\ny = [corner[1] for corner in corners_sorted]\n\nannotation = go.Annotation(\n    x=1.5,\n    y=1.0,\n    text='The area of the polygon is approximately %s' % (area),\n    showarrow=False\n)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    fill='tonexty',\n)\n\nlayout = go.Layout(\n    annotations=[annotation],\n    xaxis=dict(\n        range=[-1, 2]\n    ),\n    yaxis=dict(\n        range=[-1, 2]\n    )\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\n\npy.iplot(fig, filename='square-area')\n```\n\n----------------------------------------\n\nTITLE: Counting Lines in CSV File using Bash Command\nDESCRIPTION: Uses a Bash command to count the total number of lines in the CSV file, providing insight into the dataset size.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n!wc -l < 311_100M.csv # Number of lines in dataset\n```\n\n----------------------------------------\n\nTITLE: Adding AccuWeather Logo to Existing Chart in Python\nDESCRIPTION: This snippet retrieves an existing figure from Plotly, modifies the y-axis tick angle, and adds the AccuWeather logo to the top left corner. It demonstrates how to update an existing chart with a logo.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/logos.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfig = py.get_figure('https://plot.ly/~Dreamshot/8152/', raw=True)\nfig['layout']['yaxis']['tickangle'] = 0\nfig = go.Figure(fig)\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/accuweather.jpeg\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.1, y=1.05,\n        sizex=0.4, sizey=0.4,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Florida_Rainfall_AccuWeather')\n```\n\n----------------------------------------\n\nTITLE: Configuring IPython Notebook for PySpark\nDESCRIPTION: Specifies the path to the IPython notebook configuration file that needs to be edited to avoid port conflicts with Spark/Hadoop services.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n~/.ipython/profile_pyspark/ipython_notebook_config.py\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Database Connection\nDESCRIPTION: Creates a connection to a SQLite database named '311_8M.db' in the current directory using SQLAlchemy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/big-data-analytics-with-pandas-and-sqlite.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisk_engine = create_engine('sqlite:///311_8M.db') # Initializes database with filename 311_8M.db in current directory\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Cloning Plotly Repository\nDESCRIPTION: Terminal commands for cloning the plotly.py repository and checking out the master branch.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:plotly/plotly.py.git\n$ git fetch origin\n$ git checkout master\n```\n\n----------------------------------------\n\nTITLE: Extracting Node Attributes for Visualization in Python\nDESCRIPTION: This snippet extracts node attributes such as 'group' and 'name' from the graph data for further visualization in the Plotly graph.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata['nodes'][0]\n\nlabels=[]\ngroup=[]\nfor node in data['nodes']:\n    labels.append(node['name'])\n    group.append(node['group'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Supercharger Locations\nDESCRIPTION: This snippet creates a table using Plotly's figure factory to display a sample of the supercharger locations data, including location ID, latitude, and longitude.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/tesla-supercharging-stations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Location ID', 'Latitude', 'Longitude']]\nfirst_ten_keys = supercharger_locations.keys()[0:10]\n\nfor key in first_ten_keys:\n    row = [key,\n           supercharger_locations[key]['latitude'],\n           supercharger_locations[key]['longitude']]\n    data_matrix.append(row)\n\ntable = ff.create_table(data_matrix)\npy.iplot(table, filename='supercharger-locations-sample')\n```\n\n----------------------------------------\n\nTITLE: Creating Stream ID Object\nDESCRIPTION: Creates a stream ID object with token and maxpoints parameters for controlling the streaming visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/streaming-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstream_id = stream_ids[0]\n\nstream_1 = go.Stream(\n    token=stream_id,  # link stream id to 'token' key\n    maxpoints=80      # keep a max of 80 pts on screen\n)\n```\n\n----------------------------------------\n\nTITLE: Empty code block\nDESCRIPTION: An empty code block. Does nothing.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/1d-correlation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a Second Box Above the First Box\nDESCRIPTION: Adds the scatter plot box above the first box in the dashboard layout, demonstrating the positional insertion capability.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.insert(box_a, 'above', 1)\n```\n\n----------------------------------------\n\nTITLE: Adding Shapes to Plotly Legends in Python\nDESCRIPTION: Implementation of adding shapes to legends in plotly.graph_objects. The snippet assigns legend ranks to both shapes and traces, adjusting their positions in the legend list. Requires comprehension of plotly.graph_objects.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(name=\"first\", x=[\"a\", \"b\"], y=[1, 2]))\nfig.add_trace(go.Bar(name=\"second\", x=[\"a\", \"b\"], y=[2, 1]))\nfig.add_shape(\n    name=\"first shape\",\n    showlegend=True,\n    type=\"rect\",\n    xref=\"paper\",\n    line=dict(dash=\"dash\"),\n    x0=0.85,\n    x1=0.95,\n    y0=0,\n    y1=1.5,\n)\nfig.add_trace(go.Bar(name=\"third\", x=[\"a\", \"b\"], y=[1, 2]))\nfig.add_trace(go.Bar(name=\"fourth\", x=[\"a\", \"b\"], y=[2, 1]))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Configuration in Python\nDESCRIPTION: Change 'layout.mapbox' to 'layout.map' in the layout configuration. Nested properties remain the same.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/migrate-to-maplibre.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old configuration\nfig.update_layout(mapbox=dict(center=dict(lat=0, lon=0), zoom=2))\n\n# New configuration\nfig.update_layout(map=dict(center=dict(lat=0, lon=0), zoom=2))\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Dashboard and Updating Size in Plotly Python\nDESCRIPTION: Demonstrates how to create a stacked dashboard with multiple text boxes and update its size to avoid resizing issues in the online creator.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nstacked_dboard = dashboard.Dashboard()\ntext_box = {\n    'type': 'box',\n    'boxType': 'text',\n    'text': 'empty space'\n}\nfor _ in range(5):\n    stacked_dboard.insert(text_box, 'below', 1)\n# stacked_dboard.get_preview()\n```\n\nLANGUAGE: python\nCODE:\n```\nstacked_dboard['layout']['size'] = 3000\n```\n\n----------------------------------------\n\nTITLE: Adding a Scatter Plot to FigureWidget\nDESCRIPTION: This snippet shows how to add a simple scatter plot to a FigureWidget with x and y data points.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf.add_scatter(x=[1,2,3], y=[3,4,2])\nf\n```\n\n----------------------------------------\n\nTITLE: Empty Code Cell\nDESCRIPTION: An empty code cell at the end of the notebook, likely for adding additional code or notes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Point Clustering with Alpha Shapes in Plotly\nDESCRIPTION: This code loads sample data from a CSV file and creates a 3D visualization showing both the original data points as scatter points and their clustering using alpha shapes with a mesh3d trace. The alpha hull parameter controls the tightness of the cluster boundary.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-point-clustering.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/alpha_shape.csv')\ndf.head()\n\nscatter = dict(\n    mode = \"markers\",\n    name = \"y\",\n    type = \"scatter3d\",\n    x = df['x'], y = df['y'], z = df['z'],\n    marker = dict( size=2, color=\"rgb(23, 190, 207)\" )\n)\nclusters = dict(\n    alphahull = 7,\n    name = \"y\",\n    opacity = 0.1,\n    type = \"mesh3d\",\n    x = df['x'], y = df['y'], z = df['z']\n)\nlayout = dict(\n    title = '3d point clustering',\n    scene = dict(\n        xaxis = dict( zeroline=False ),\n        yaxis = dict( zeroline=False ),\n        zaxis = dict( zeroline=False ),\n    )\n)\nfig = dict( data=[scatter, clusters], layout=layout )\n# Use py.iplot() for IPython notebook\npy.iplot(fig, filename='3d point clustering')\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Data Manipulation and Visualization in Python\nDESCRIPTION: This snippet imports necessary libraries including Plotly, NumPy, Pandas, and SciPy for data manipulation and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/simple-mathematics-operations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: New Features in Plotly Express\nDESCRIPTION: Introduces new parameters and options, such as making hover data customizable through a dictionary and accepting px.Constant or px.Range objects. These features provide more flexibility and control over data representation in plots.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Multi-Color Linked Brushing Setup\nDESCRIPTION: Sets up the framework for a multi-color linked brushing example using car dataset. Includes color scale and dimension setup for parallel categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/parallel-categories-diagram.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport ipywidgets as widgets\nimport pandas as pd\nimport numpy as np\n\ncars_df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv')\n\n# Build parcats dimensions\ncategorical_dimensions = ['body-style', 'drive-wheels', 'fuel-type']\n\ndimensions = [dict(values=cars_df[label], label=label) for label in categorical_dimensions]\n\n# Build colorscale\ncolor = np.zeros(len(cars_df), dtype='uint8')\ncolorscale = [[0, 'gray'], [0.33, 'gray'],\n              [0.33, 'firebrick'], [0.66, 'firebrick'],\n              [0.66, 'blue'], [1.0, 'blue']]\ncmin = -0.5\ncmax = 2.5\n```\n\n----------------------------------------\n\nTITLE: Empty Code Cell in Python\nDESCRIPTION: This is an empty Python code cell with no content. It may be used as a placeholder or for future code additions in the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Box with Custom Size\nDESCRIPTION: Inserts a text box to the left of box 1, controlling its width to be 30% of the available space using the fill_percent parameter.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.insert(box_b, 'left', 1, fill_percent=30)\n```\n\n----------------------------------------\n\nTITLE: Installing Anywidget for go.FigureWidget\nDESCRIPTION: Installs the anywidget package, which is now required for using go.FigureWidget.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v6-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install anywidget\n```\n\n----------------------------------------\n\nTITLE: Initializing a Dashboard with Preview Capability\nDESCRIPTION: Creates a new dashboard object and demonstrates how to preview its HTML representation using the get_preview() method, which shows the dashboard layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.dashboard_objs as dashboard\n\nimport IPython.display\nfrom IPython.display import Image\n\nmy_dboard = dashboard.Dashboard()\nmy_dboard.get_preview()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scatter Plots with Plotly in Python\nDESCRIPTION: This snippet creates two Scatter3D traces for the graph visualization using Plotly: one for edges and another for nodes, applying visual styling.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1=go.Scatter3d(x=Xe,\n               y=Ye,\n               z=Ze,\n               mode='lines',\n               line=dict(color='rgb(125,125,125)', width=1),\n               hoverinfo='none'\n               )\n\ntrace2=go.Scatter3d(x=Xn,\n               y=Yn,\n               z=Zn,\n               mode='markers',\n               name='actors',\n               marker=dict(symbol='circle',\n                             size=6,\n                             color=group,\n                             colorscale='Viridis',\n                             line=dict(color='rgb(50,50,50)', width=0.5)\n                             ),\n               text=labels,\n               hoverinfo='text'\n               )\n```\n\n----------------------------------------\n\nTITLE: Recommended Method for Specifying Data Array Properties\nDESCRIPTION: This example demonstrates the correct way to specify a single-element array for a data array property in a Bar chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\ngo.Bar(x=[1])\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot for the Dashboard\nDESCRIPTION: Generates a scatter plot with random data and a custom colorscale, then uploads it to Plotly to use in the dashboard. The plot URL is stored for later reference.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\nimport numpy as np\n\ncolorscale = [[0, '#FAEE1C'], [0.33, '#F3558E'], [0.66, '#9C1DE7'], [1, '#581B98']]\ntrace1 = go.Scatter(\n    y = np.random.randn(500),\n    mode='markers',\n    marker=dict(\n        size=16,\n        color = np.random.randn(500),\n        colorscale=colorscale,\n        showscale=True\n    )\n)\ndata = [trace1]\nurl_1 = py.plot(data, filename='scatter-for-dashboard', auto_open=False)\npy.iplot(data, filename='scatter-for-dashboard')\n```\n\n----------------------------------------\n\nTITLE: Creating Plots from Plotly Grids (Python)\nDESCRIPTION: This code snippet demonstrates how to create a plot based on data from a Plotly grid. It uploads a grid to Plotly and then creates a scatter plot using data referenced from that grid.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\n\nc1 = Column([6, 6, 6, 5], 'column 1')\nc2 = Column(['a', 'b', 'c', 'd'], 'column 2')\ng = Grid([c1, c2])\n\n# Upload the grid\npy.grid_ops.upload(g, 'my-grid', auto_open=False)\n\n# Make a graph that with data that is referenced from that grid\ntrace = Scatter(xsrc=g[0], ysrc=g[1])\nurl = py.plot([trace], filename='my-plot')\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset with Pandas - Python\nDESCRIPTION: This snippet loads a dataset from a URL using Pandas and modifies the column names to remove the prefix 'AAPL.'. It requires the Pandas library.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/custom-buttons.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\ndf.columns = [col.replace(\"AAPL.\", \"\") for col in df.columns]\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook Documentation\nDESCRIPTION: This code sets up custom styling for the notebook and publishes the notebook as documentation on the Plotly website. It installs the necessary publisher package and configures metadata like title, description, and category for the documentation page.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-point-clustering.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    '3d-clusters.ipynb', 'python/3d-point-clustering/', 'Python 3D Clustering | plotly',\n    'How to cluster points in 3d with alpha shapes in plotly and Python',\n    title= '3D Point Clustering in Python | plotly',\n    name = '3d Clustering',\n    has_thumbnail='true', thumbnail='thumbnail/3d-clusters.jpg',\n    language='python',\n    display_as='3d_charts', order=14,\n    ipynb= '~notebook_demo/74')\n```\n\n----------------------------------------\n\nTITLE: Counting Records in Redshift Tables\nDESCRIPTION: Python code that queries each table (including sales) to count the number of records, prints the results, and commits the transaction to ensure all data operations are finalized.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfor table in tables + [\"sales\"]:\n    cur.execute(\"select count(*) from %s;\" % (table,))\n    print(cur.fetchone())\nconn.commit() # make sure data went through and commit our statements permanently.\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot Matrices with FigureFactory in Python\nDESCRIPTION: Example of how to use the FigureFactory to create scatter plot matrices. This snippet demonstrates how to access the help documentation for the create_scatterplotmatrix function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nimport plotly.tools as tls\nhelp(tls.FigureFactory.create_scatterplotmatrix)\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Parametric Plot with Custom Colorscale in Plotly\nDESCRIPTION: This code generates a more complex 3D parametric surface with a Viridis colorscale. It uses trigonometric functions with multiple parameters to create an intricate shape, applying the parametric equations to convert from spherical to Cartesian coordinates.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-parametric-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ndphi, dtheta = np.pi / 250.0, np.pi / 250.0\n[phi, theta] = np.mgrid[0:np.pi + dphi * 1.5:dphi, 0:2 * np.pi +\n                        dtheta * 1.5:dtheta]\nm0 = 4; m1 = 3; m2 = 2; m3 = 3; m4 = 6; m5 = 2; m6 = 6; m7 = 4;\n\n# Applying the parametric equation..\nr = (np.sin(m0 * phi) ** m1 + np.cos(m2 * phi) ** m3 +\n     np.sin(m4 * theta) ** m5 + np.cos(m6 * theta) ** m7)\nx = r * np.sin(phi) * np.cos(theta)\ny = r * np.cos(phi)\nz = r * np.sin(phi) * np.sin(theta)\n\n\nsurface = go.Surface(x=x, y=y, z=z, colorscale='Viridis')\ndata = [surface]\nlayout = go.Layout(\n    title='Another Parametric Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='parametric-plot-viridis')\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Branch with Git\nDESCRIPTION: The command creates a new branch from the current branch, allowing for safe development practices without affecting the main branch. Replace 'my-dev-branch' with a descriptive branch name that reflects the work being done.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-dev-branch\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with conda\nDESCRIPTION: Command to install Kaleido package using conda package manager\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/static-image-export.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c conda-forge python-kaleido\n```\n\n----------------------------------------\n\nTITLE: Generating Plotly Shapes for Ideograms and Ribbons in Python\nDESCRIPTION: These functions create Plotly shapes for ideograms and ribbons in the chord diagram. They define the paths, colors, and other properties for each shape.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-chord-diagram.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef make_ideo_shape(path, line_color, fill_color):\n    #line_color is the color of the shape boundary\n    #fill_collor is the color assigned to an ideogram\n    return  dict(\n                  line=dict(\n                  color=line_color,\n                  width=0.45\n                 ),\n\n            path=  path,\n            type='path',\n            fillcolor=fill_color,\n            layer='below'\n        )\n\ndef make_ribbon(l, r, line_color, fill_color, radius=0.2):\n    #l=[l[0], l[1]], r=[r[0], r[1]]  represent the opposite arcs in the ribbon\n    #line_color is the color of the shape boundary\n    #fill_color is the fill color for the ribbon shape\n    poligon=ctrl_rib_chords(l,r, radius)\n    b,c =poligon\n\n    return  dict(\n                line=dict(\n                color=line_color, width=0.5\n            ),\n            path=  make_q_bezier(b)+make_ribbon_arc(r[0], r[1])+\n                   make_q_bezier(c[::-1])+make_ribbon_arc(l[1], l[0]),\n            type='path',\n            fillcolor=fill_color,\n            layer='below'\n        )\n\ndef make_self_rel(l, line_color, fill_color, radius):\n    #radius is the radius of Bezier control point b_1\n    b=control_pts([l[0], (l[0]+l[1])/2, l[1]], radius)\n    return  dict(\n                line=dict(\n                color=line_color, width=0.5\n            ),\n            path=  make_q_bezier(b)+make_ribbon_arc(l[1], l[0]),\n            type='path',\n            fillcolor=fill_color,\n            layer='below'\n        )\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Plotly Dashboard Operations in Python\nDESCRIPTION: Shows how to display help information for Plotly dashboard operations using the help() function.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nhelp(py.dashboard_ops)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing Plotly Notebook\nDESCRIPTION: This code configures custom styling for the notebook using Google Fonts and CSS, then installs and uses the Plotly publisher tool to publish the notebook. The publishing configuration includes metadata such as title, description, and categorization for the Plotly documentation system.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-wireframe-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    '3d-wireframe.ipynb', 'python/3d-wireframe-plots/', 'Python Wireframe Plots | plotly',\n    'How to make wireframe plots in Python',\n    title= '3D Wireframe Plots in Python | plotly',\n    name = '3D Wireframe Plots',\n    has_thumbnail='true', thumbnail='thumbnail/wireframe.jpg',\n    language='python',\n    display_as='3d_charts', order=8,\n    ipynb= '~notebook_demo/68')\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Display and Publishing Settings in Python\nDESCRIPTION: This code sets up custom styling for the Jupyter notebook and configures the publisher settings for the notebook. It installs the plotly publisher package, sets metadata like title and description, and specifies display parameters for the published content.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/matplotlib-colorscales.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'matplotlib-colorscales.ipynb', 'python/matplotlib-colorscales/', 'Matplotlib Colorscales',\n    'How to make Matplotlib Colorscales in Python with Plotly.',\n    title = 'Python Matplotlib Colorscales | plotly',\n    name = 'Matplotlib Colorscales',\n    has_thumbnail='true', thumbnail='thumbnail/colorbars.jpg',\n    language='python', page_type='example_index',\n    display_as='style_opt', order=8,\n    ipynb= '~notebook_demo/48')\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for Tests\nDESCRIPTION: The command runs all tests in the 'tests/' directory using pytest, a framework for easily writing simple and scalable test cases. Ensure 'requires-optional.txt' is installed to avoid dependency issues.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Updated Title Attributes\nDESCRIPTION: Demonstrates how to create a bar chart using updated layout attributes for titles in Plotly.py version 6.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v6-changes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[\n      go.Bar(\n        x=[\"A\", \"B\", \"C\", \"D\"],\n        y=[10, 15, 13, 17]\n        )\n    ],\n    layout=dict(\n      title=dict(\n        text=\"Chart Title\",\n        font=dict(\n          size=40\n          )\n        )\n      ),\n    # Previously the title font could be set like this:\n    # titlefont=dict(size=40)\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Country Name UTF-8 Encoding\nDESCRIPTION: Handles UTF-8 encoding for country names to prevent serialization errors in Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/graph-data-from-mysql-database-in-python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncountry_names = df['Name']\nfor i in range(len(country_names)):\n    try:\n        country_names[i] = str(country_names[i]).decode('utf-8')\n    except:\n        country_names[i] = 'Country name decode error'\n```\n\n----------------------------------------\n\nTITLE: Populating Initial Figure Data from Grid References\nDESCRIPTION: Sets up the initial figure data using grid column references. For each continent, it configures scatter plot markers with size based on population and color based on continent, using data for the initial year (1952).\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncol_name_template = '{year}_{continent}_{header}_gapminder_grid'\nyear = 1952\nfor continent in continents:\n    data_dict = {\n        'xsrc': grid.get_column_reference(col_name_template.format(\n            year=year, continent=continent, header='lifeExp'\n        )),\n        'ysrc': grid.get_column_reference(col_name_template.format(\n            year=year, continent=continent, header='gdpPercap'\n        )),\n        'mode': 'markers',\n        'textsrc': grid.get_column_reference(col_name_template.format(\n            year=year, continent=continent, header='country'\n        )),\n        'marker': {\n            'sizemode': 'area',\n            'sizeref': 200000,\n            'sizesrc': grid.get_column_reference(col_name_template.format(\n                 year=year, continent=continent, header='pop'\n            )),\n            'color': custom_colors[continent]\n        },\n        'name': continent\n    }\n    figure['data'].append(data_dict)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for Animation Support\nDESCRIPTION: Imports the Plotly library and checks its version to ensure animation support is available. Animations require Plotly version 1.12.10 or higher.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/gapminder-example.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Fonts and Styles for IPython Notebook\nDESCRIPTION: This snippet sets up custom fonts and styles for the IPython notebook environment, and installs and uses a custom publisher package for publishing the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/numerical-differentiation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Numerical_Differentiation.ipynb', 'python/numerical-differentiation/', 'Numerical Differentiation | plotly',\n    'Learn how to differentiate a sequence or list of values numerically',\n    title='Numerical Differentiation in Python. | plotly',\n    name='Numerical Differentiation',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=6,\n    ipynb= '~notebook_demo/102')\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements for Plotly Project\nDESCRIPTION: Specifies version constraints for various Python libraries used in data visualization, scientific computing, and documentation workflows\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nplotly==6.0.1\njupytext==1.16.4\njupyter-client<7\njupyter\nnotebook\npandas==1.4.0\nstatsmodels==0.14.2\nscipy==1.9.1\npatsy==0.5.6\nnumpy==1.22.4\nplotly-geo\nigraph\ngeopandas==0.8.1\npyshp==2.1.2\nshapely==2.0.5\npsutil\nrequests\nnetworkx==2.8.0\nsquarify\nscikit-image==0.20.0\nscikit-learn\nsphinx==3.5.4\nsphinxcontrib-applehelp==1.0.2\nsphinxcontrib-devhelp==1.0.2\nsphinxcontrib-htmlhelp==2.0.0\nsphinxcontrib-qthelp==1.0.3\nsphinxcontrib-serializinghtml==1.1.5\nsphinxcontrib-jsmath==1.0.1\nsphinx_bootstrap_theme\nrecommonmark\npathlib\npython-frontmatter\ndatashader==0.14.4\npyarrow\ncufflinks==0.17.3\nkaleido\numap-learn==0.5.1\npooch\nwget\nnbconvert==5.6.1\norjson\ndash-bio\njinja2<3.1\ndask==2022.2.0\npolars\ngeoparse<=2.0.3\nxarray==2022.9.0\nanywidget\n```\n\n----------------------------------------\n\nTITLE: Configuring IPython Display and Installing Plotly Publisher in Python\nDESCRIPTION: This snippet sets up custom styling for IPython notebooks, installs the Plotly publisher tool, and publishes a notebook about Salesforce data visualization. It configures fonts, applies custom CSS, and uses the publisher module to create an interactive graph.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/salesforce.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'salesforce.ipynb', 'python/salesforce/', 'Plot Data from Salesforce',\n    'Create interactive graphs with salesforce, IPython Notebooks and Plotly',\n    title='Interactive Salesforce Graphing | Plotly',\n    redirect_from='ipython-notebooks/salesforce/', has_thumbnail='false', language='python', page_type='example_index',\n    display_as='databases', order=4, ipynb= '~notebook_demo/1')\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook as Plotly Documentation\nDESCRIPTION: Use custom HTML styling and the Plotly publisher to convert the Jupyter notebook into a documentation page on the Plotly website.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/peak-fitting.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Peak-Fitting.ipynb', 'python/peak-fitting/', 'Peak Fitting | plotly',\n    'Learn how to fit to peaks in Python',\n    title='Peak Fitting in Python | plotly',\n    name='Peak Fitting',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=5,\n    ipynb= '~notebook_demo/119')\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration Setup\nDESCRIPTION: Sets up custom styling and publishes the notebook with specific metadata for documentation purposes. Includes font loading and custom CSS configuration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/interpolation-and-extrapolation-in-1d.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Interpolation_and_Extrapolation_in_1D.ipynb', 'python/interpolation-and-extrapolation-in-1d/', 'Interpolation and Extrapolation in 1D | plotly',\n    'Learn how to interpolation and extrapolate data in one dimension',\n    title='Interpolation and Extrapolation in 1D in Python. | plotly',\n    name='Interpolation and Extrapolation in 1D',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=3,\n    ipynb= '~notebook_demo/106')\n```\n\n----------------------------------------\n\nTITLE: Refined Behavior of Plotly Express Arguments\nDESCRIPTION: This section describes the refined behavior for several arguments in Plotly Express functions, allowing for defaults and adjustments when certain inputs are missing. This improves usability and ensures that the plots generated are more intuitive and user-friendly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Layout with ipywidgets in Python\nDESCRIPTION: This code combines all the created widgets and plots into a simple dashboard layout using ipywidgets HBox and VBox containers.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import HBox, VBox\nVBox([fig,\n      opacity_slider,\n      HBox([image_widget, details])])\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling in Python\nDESCRIPTION: This snippet sets up custom styling for the Jupyter notebook, installs the publisher package, and publishes the notebook with specific metadata. It's used for formatting and publishing the tutorial.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/logos.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'logos.ipynb', 'python/logos/', 'Add Logos to Charts',\n    'How to add images as logos to Plotly charts.',\n    title = 'Add Logos to Charts | plotly',\n    name = 'Logos',\n    has_thumbnail='false', thumbnail='thumbnail/your-tutorial-chart.jpg',\n    language='python', page_type='example_index',\n    display_as='style_opt', order=6,\n    ipynb= '~notebook_demo/92')\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Imports plotly and checks the installed version.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/salesforce.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Generating Large Dataset by Duplicating Iris Data\nDESCRIPTION: Creates a large dataset by duplicating the Iris dataset multiple times with random noise. The resulting dataset has over a million rows, making it suitable for demonstrating DataShader's capabilities with large datasets.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnum_copies = 7000 # 1,050,000 rows\n\niris_data = datasets.load_iris()\nfeature_names = [name.replace(' (cm)', '').replace(' ', '_') for name in iris_data.feature_names]\niris_df_orig = pd.DataFrame(iris_data.data, columns=feature_names)\ntarget_orig = iris_data.target + 1\n\n# frame of features\niris_df = pd.concat(\n    np.random.normal(scale=0.2, size=iris_df_orig.shape) + iris_df_orig for i in range(num_copies)\n).reset_index(drop=True)\n\n# array of targets\ntarget = [t for i in range(num_copies) for t in target_orig]\n\n# dataframe that includes target as categorical\niris_target_df = pd.concat([iris_df, pd.Series(target, name='target', dtype='category')], axis=1)\n\niris_df.describe()\n```\n\n----------------------------------------\n\nTITLE: Adding Density Contour to Scatter Plot with Plotly in Python\nDESCRIPTION: This snippet adds a smoothed density contour (histogram2dcontour) to the existing scatter plot to visualize data density.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncontour = fig.add_histogram2dcontour(\n    x=scatter.x, y=scatter.y)\ncontour.colorscale = 'Hot'\ncontour.reversescale = True\ncontour.hoverinfo = 'skip'\n```\n\n----------------------------------------\n\nTITLE: Accessing Plotly Presentations API Help in Python\nDESCRIPTION: Command to display help documentation for Plotly's Presentations API, which allows creating and managing presentations programmatically.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nhelp(plotly.presentation_objs.Presentations)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Figure Factory Directory\nDESCRIPTION: Terminal command to change directory to the figure_factory folder.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd plotly/figure_factory\n```\n\n----------------------------------------\n\nTITLE: Installing development requirements (Windows + Conda)\nDESCRIPTION: Commands to install development requirements for plotly.py on Windows systems using Conda and pip, including a step to avoid gdal-config errors.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(plotly_dev) $ conda install fiona\n(plotly_dev) $ pip install -r requires-optional.txt\n```\n\n----------------------------------------\n\nTITLE: Querying User Preferences by State with Pandas\nDESCRIPTION: Python code that uses pandas to query the Redshift database for user preferences (sports, theatre, concerts, etc.) grouped by state. The SQL query converts boolean values to integers for aggregation purposes.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(likesports::int) as sports, sum(liketheatre::int) as theatre,\nsum(likeconcerts::int) as concerts, sum(likejazz::int) as jazz,\nsum(likeclassical::int) as classical, sum(likeopera::int) as opera,\nsum(likerock::int) as rock, sum(likevegas::int) as vegas,\nsum(likebroadway::int) as broadway, sum(likemusicals::int) as musical,\nstate\nFROM users\nGROUP BY state\nORDER BY state asc;\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Defining DataShader Image Generation Function\nDESCRIPTION: Creates a function that generates a DataShader image based on specified x/y ranges and plot dimensions. The function uses DataShader to efficiently render points from the large dataset and returns a PIL image.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/change-callbacks-datashader.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef gen_ds_image(x_range, y_range, plot_width, plot_height):\n    if x_range is None or y_range is None or plot_width is None or plot_height is None:\n        return None\n\n    cvs = ds.Canvas(x_range=x_range, y_range=y_range, plot_height=plot_height, plot_width=plot_width)\n    agg_scatter = cvs.points(iris_target_df,\n                         'sepal_length', 'sepal_width',\n                          ds.count_cat('target'))\n    img = tf.shade(agg_scatter)\n    img = tf.dynspread(img, threshold=0.95, max_px=5, shape='circle')\n\n    return img.to_pil()\n```\n\n----------------------------------------\n\nTITLE: Loading Car Images from Files in Python\nDESCRIPTION: This code snippet reads image files from a directory, storing them in a dictionary with the model year as the key and the binary image data as the value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cars-exploration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimage_data = {}\nfor img_filename in os.listdir('data/cars/images'):\n    model_year = img_filename.split('.')[0]\n    with open(f\"data/cars/images/{img_filename}\", \"rb\") as f:\n        b = f.read()\n        image_data[model_year] = b\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plots of User Preferences with Plotly\nDESCRIPTION: Python code that generates box plots for each user preference type using Plotly. The visualization helps compare the distribution of preference values across different event categories.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(title=\"Declared User Preference Box Plots\",\n                yaxis=dict())\n\ndata = []\nfor pref in df.drop('state', axis=1).columns:\n    # for every preference type, make a box plot\n    data.append(go.Box(y=df[pref], name=pref))\n\npy.iplot(go.Figure(data=data, layout=layout), filename='redshift/user preference box plots')\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redshift Using SQLAlchemy in Python\nDESCRIPTION: Creates a SQLAlchemy engine to connect to Amazon Redshift. This approach facilitates easy conversion of query results to pandas DataFrames for analysis and visualization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nengine_string = \"postgresql+psycopg2://%s:%s@%s:%d/%s\" \\\n% (redshift_user, redshift_pass, redshift_endpoint, port, dbname)\nengine = create_engine(engine_string)\n```\n\n----------------------------------------\n\nTITLE: Incomplete Pie Chart Example in Python\nDESCRIPTION: This is an incomplete code snippet that only defines labels for a pie chart but doesn't complete the visualization. It creates a list of labels representing ordinal positions.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/pie-charts.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = ['1st', '2nd', '3rd', '4th', '5th']\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Make\nDESCRIPTION: Simple make command to generate HTML documentation output for the plotly.py project. This is likely part of a Makefile used in the build process.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Create Horizontal Legends in Plotly Express using Python\nDESCRIPTION: Script to configure a horizontal legend position above the plotting area in a Plotly Express chart. It involves updating the layout with orientation and anchor details for a scatter plot.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/legend.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"year==2007\")\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\",\n    size=\"pop\", size_max=45, log_x=True)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n))\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter Notebook\nDESCRIPTION: Installs the latest version of Jupyter Notebook, as earlier versions are not supported.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/v6-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install notebook --upgrade\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in Redshift for Sample Data Setup\nDESCRIPTION: Executes SQL to drop existing tables before loading sample data. This prevents conflicts when creating and populating the sample dataset tables.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\"\"\"drop table users;\n\ndrop table venue;\n\ndrop table category;\n\ndrop table date;\n\ndrop table event;\n\ndrop table listing;\n\ndrop table sales;\"\"\")\nconn.commit()\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dependencies for Plotly Python\nDESCRIPTION: Requirements file listing optional dependencies for Plotly.py, including packages for testing, development, visualization features, and specialized plotting capabilities. Installation can be performed using pip install -r requires-optional.txt.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/requires-optional.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy\n\ncoverage==4.3.1\nmock==2.0.0\npytest==8.1.1\nxarray\npytz\n\npre-commit\nblack==22.3.0\n\ninflect\n\ncolorcet\n\npandas\n\nscipy\n\njupyter\nanywidget\n\npyshp\ngeopandas\nshapely\n\npillow\n```\n\n----------------------------------------\n\nTITLE: Importing IPython Display Module\nDESCRIPTION: Python code that imports the Image class from IPython.display module to display images within the notebook environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/amazon-redshift.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\n```\n\n----------------------------------------\n\nTITLE: Plotting Ride Duration Histogram with Plotly\nDESCRIPTION: Generates and displays an interactive histogram of ride durations less than 2 hours using Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(data, filename=\"spark/less_2_hour_rides\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Shorter Ride Durations\nDESCRIPTION: Creates a new DataFrame containing only rides shorter than 2000 seconds based on the previous histogram analysis.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/apache-spark.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndf3 = sqlCtx.sql(\"SELECT Duration as d1 from bay_area_bike where Duration < 2000\")\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Functions - Python\nDESCRIPTION: List of available functions in plotly.io module for handling figures, including image conversion, JSON operations, HTML generation, and rendering.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/plotly.io.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.io import (\\n    to_image,\\n    write_image,\\n    to_json,\\n    from_json,\\n    read_json,\\n    write_json,\\n    templates,\\n    to_templated,\\n    to_html,\\n    write_html,\\n    renderers,\\n    show\\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code sets up custom styling for the notebook documentation and uses the Plotly publisher module to publish the tutorial. It configures fonts, CSS, and metadata for the documentation page including title, description, thumbnail, and categorization.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-parametric-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    '3d-parametric.ipynb', 'python/3d-parametric-plots/', '3D Parametric Plots | plotly',\n    'How to 3D Parameteric Plots in Python',\n    title= '3D Parametric Plots in Python | plotly',\n    name = 'Parametric Plots',\n    has_thumbnail='true', thumbnail='thumbnail/parametric.jpg',\n    language='python',\n    display_as='3d_charts', order=9,\n    ipynb= '~notebook_demo/69')\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Connection and Query\nDESCRIPTION: Establishes connection to MySQL database and executes query to fetch country data including name, continent, population, life expectancy, and GNP.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/graph-data-from-mysql-database-in-python.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconn = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"xxxx\", db=\"world\")\ncursor = conn.cursor()\ncursor.execute('select Name, Continent, Population, LifeExpectancy, GNP from Country');\n\nrows = cursor.fetchall()\nstr(rows)[0:300]\n```\n\n----------------------------------------\n\nTITLE: Customizing Bins in Plotly Express Histogram\nDESCRIPTION: This snippet demonstrates customizing the number of bins in a Plotly Express histogram. The `nbins` parameter controls the number of bins used to represent the data. This allows fine-tuning the granularity of the histogram.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/histograms.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", nbins=20)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Smoothing in Python\nDESCRIPTION: This snippet imports the necessary libraries for data manipulation, scientific computing, and visualization using Plotly, NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/smoothing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Version Number Reference\nDESCRIPTION: Semantic version numbers used throughout the changelog to track releases\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[6.0.1] - 2025-03-14\n[6.0.0] - 2025-01-28\n[5.24.1] - 2024-09-12\n[5.24.0] - 2024-08-29\n[5.23.0] - 2024-07-23\n[5.22.0] - 2024-05-01\n[5.21.0] - 2024-04-17\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Graph Objects - Python\nDESCRIPTION: This code snippet demonstrates how to import the plotly.graph_objects module, which provides the necessary functionality to create and manipulate figures and their components in Plotly.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/plotly.graph_objects.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> import plotly.graph_objects as go\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Graph Data in Python\nDESCRIPTION: This snippet demonstrates how to read graph data from a JSON file hosted online. It utilizes 'urllib2' for HTTP requests and 'json' for parsing the response.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-network-graph.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport urllib2\n\ndata = []\nreq = urllib2.Request(\"https://raw.githubusercontent.com/plotly/datasets/master/miserables.json\")\nopener = urllib2.build_opener()\nf = opener.open(req)\ndata = json.loads(f.read())\n\nprint data.keys()\n```\n\n----------------------------------------\n\nTITLE: Removing a Box from Plotly Dashboard in Python\nDESCRIPTION: Demonstrates how to remove a box from a Plotly dashboard by using its box id. The box id can be obtained from the dashboard preview.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.insert(box_a, 'below', 2)\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.remove(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Plotly Base Module\nDESCRIPTION: ReStructuredText directives for configuring Sphinx documentation, including module reference and autosummary for the BaseFigure class in plotly.basedatatypes\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/apidoc/basefigure.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _base:\n\n.. currentmodule:: plotly.basedatatypes\n\n.. autosummary::\n   :toctree: generated/\n\n   BaseFigure\n```\n\n----------------------------------------\n\nTITLE: Import Required Libraries\nDESCRIPTION: Imports necessary Python libraries including Plotly, MySQLdb for database connection, and pandas for data manipulation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/graph-data-from-mysql-database-in-python.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport MySQLdb\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Reading PLY File Header and Counting Elements in Python\nDESCRIPTION: This code reads the header of the PLY file, prints each element, and counts the number of points and faces in the 3D object.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/triangulation.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor element in plydata.elements:\n    print element\n\nnr_points=plydata.elements[0].count\nnr_faces=plydata.elements[1].count\n```\n\n----------------------------------------\n\nTITLE: Accelerating JSON Serialization in Plotly Figures\nDESCRIPTION: Improvements to the serialization process of Plotly figures to enhance performance when handling NaN and Inf values.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n- The JSON serialization of plotly figures had been accelerated by handling differently figures with and without NaN and Inf values.\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method for Creating Layout Annotations\nDESCRIPTION: This snippet demonstrates the deprecated approach of using go.Annotations array class for creating annotations in a layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/MIGRATION_GUIDE.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(\n    annotations=go.Annotations([\n        go.layout.Annotations(text='annotation')\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Previewing the Dashboard After First Box Insertion\nDESCRIPTION: Displays a preview of the dashboard after inserting the first box to visualize the current layout.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmy_dboard.get_preview()\n```\n\n----------------------------------------\n\nTITLE: Displaying the Secret Plot URL\nDESCRIPTION: Outputs the URL of the previously created secret box plot to verify its creation and accessibility.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/create-online-dashboard-legacy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nurl_2\n```\n\n----------------------------------------\n\nTITLE: Empty Code Block in Python\nDESCRIPTION: This is an empty code block, likely intended for future use or as a placeholder for additional Python code related to Plotly integration.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/salesforce.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter and AnyWidget for Plotly in Python\nDESCRIPTION: These commands install the Jupyter and AnyWidget packages, which are required for using Plotly as a Jupyter widget.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install jupyter anywidget\n```\n\nLANGUAGE: shell\nCODE:\n```\nconda install jupyter anywidget\n```\n\n----------------------------------------\n\nTITLE: Displaying IFrame in IPython\nDESCRIPTION: Creates an IFrame display for a Dash snippet URL in an IPython environment.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/renderers.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nsnippet_url = 'https://python-docs-dash-snippets.herokuapp.com/python-docs-dash-snippets/'\nIFrame(snippet_url + 'renderers', width='100%', height=1200)\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Animation Support\nDESCRIPTION: Checks the installed Plotly version to ensure animation support (requires v1.12.10+)\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/filled-area-animation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Parameter Documentation Format\nDESCRIPTION: Example showing the correct format for documenting parameters in function docstrings.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n:param (param_type) param_name: description.\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch for Figure Factory\nDESCRIPTION: Git command to create a new branch for developing a figure factory feature.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/plotly/figure_factory/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b \"add-ff-type\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Cmocean Colorscales in Python\nDESCRIPTION: This snippet imports necessary libraries for creating and visualizing Cmocean colorscales using Plotly. It includes Plotly, cmocean, numpy, and os modules.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/cmocean-colorscales.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n\nimport cmocean\n\nimport numpy as np\nimport os\n```\n\n----------------------------------------\n\nTITLE: Version Check with Plotly\nDESCRIPTION: Simple version check for the Plotly library installation.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/google_big_query.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Style, Variant, and Weight in Plotly Bar Charts\nDESCRIPTION: This example demonstrates how to configure font style, variant, and weight for text in bar charts using the textfont parameter. It shows italic style, bold weight, and small-caps variant applied to different bars in the chart.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.medals_wide()\n\nfig = go.Figure(\n    data=[\n        go.Bar(\n            x=df.nation,\n            y=df.gold,\n            name=\"Gold\",\n            marker=dict(color=\"Gold\"),\n            text=\"Gold\",\n            textfont=dict(style=\"italic\"),\n        ),\n        go.Bar(\n            x=df.nation,\n            y=df.silver,\n            name=\"Silver\",\n            marker=dict(color=\"MediumTurquoise\"),\n            text=\"Silver\",\n            textfont=dict(weight=\"bold\"),\n        ),\n        go.Bar(\n            x=df.nation,\n            y=df.bronze,\n            name=\"Bronze\",\n            marker=dict(color=\"LightGreen\"),\n            text=\"Bronze\",\n            textfont=dict(variant=\"small-caps\"),\n        ),\n    ],\n    layout=dict(barcornerradius=15, showlegend=False),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Empty Code Cell in Python\nDESCRIPTION: An empty code cell that contains no executable code, likely a placeholder for future content or a separator in the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/discrete-frequency.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Empty Python Code Snippet\nDESCRIPTION: This is an empty Python code snippet. It doesn't perform any action and serves as a placeholder.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/3d-filled-line-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\n\n```\n\n----------------------------------------\n\nTITLE: Applying Numeric Font Weight in Plotly Bar Charts\nDESCRIPTION: This example demonstrates how to use numeric values for font weight in Plotly bar charts. It shows how to set a heavy font weight (900) for one series while keeping the others at default weight, with a note about scattergl trace limitations.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/text-and-annotations.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom plotly import data\n\ndf = data.medals_wide()\n\nfig = go.Figure(\n    data=[\n        go.Bar(\n            x=df.nation,\n            y=df.gold,\n            name=\"Gold\",\n            marker=dict(color=\"Gold\"),\n            text=\"Gold\",\n            textfont=dict(weight=900, size=17),\n        ),\n        go.Bar(\n            x=df.nation,\n            y=df.silver,\n            name=\"Silver\",\n            marker=dict(color=\"MediumTurquoise\"),\n            text=\"Silver\",\n            textfont=dict(size=17),\n        ),\n            go.Bar(\n            x=df.nation,\n            y=df.bronze,\n            name=\"Bronze\",\n            marker=dict(color=\"LightGreen\"),\n            text=\"Bronze\",\n            textfont=dict(size=17),\n        ),\n    ],\n    layout=dict(barcornerradius=15, showlegend=False),\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Empty Python Code Block\nDESCRIPTION: An empty Python code block included in the documentation structure.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/userguide.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Data Preparation in Python\nDESCRIPTION: This snippet imports necessary libraries, loads a CSV file containing unemployment data, and preprocesses the data by formatting state and county FIPS codes for use in a choropleth map.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/county-choropleth.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv')\ndf_sample['State FIPS Code'] = df_sample['State FIPS Code'].apply(lambda x: str(x).zfill(2))\ndf_sample['County FIPS Code'] = df_sample['County FIPS Code'].apply(lambda x: str(x).zfill(3))\ndf_sample['FIPS'] = df_sample['State FIPS Code'] + df_sample['County FIPS Code']\n```\n\n----------------------------------------\n\nTITLE: Cloning the plotly.py repository\nDESCRIPTION: Commands to clone the forked plotly.py repository and navigate to the project directory.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_github_username/plotly.py.git\ncd plotly.py\n```\n\n----------------------------------------\n\nTITLE: HTML Template with JavaScript for Dropdown\nDESCRIPTION: This HTML template defines the structure for displaying Plotly figures with a dropdown menu. It includes placeholders (`{{ dropdown_entries }}` and `{{ divs }}`) where the Python code will insert dynamically generated HTML. The JavaScript code handles the dropdown selection change event, hiding all content divs and then displaying the div corresponding to the selected dropdown value.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/python/dropdowns.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Select an analysis&lt;/h1&gt;\n        &lt;select id=\"dropdown\" class=\"form-control\"&gt;\n    {{ dropdown_entries }}\n        &lt;/select&gt;\n\n\n        {{ divs }}\n\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        document.getElementById('dropdown').addEventListener('change', function() {\n            const divs = document.querySelectorAll('.content-div');\n            divs.forEach(div =&gt; div.style.display = 'none');\n\n            const selectedDiv = document.getElementById(this.value);\n            if (selectedDiv) {\n                selectedDiv.style.display = 'block';\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Animations in Plotly Offline Mode (Python)\nDESCRIPTION: This code snippet demonstrates how to create and display animations in Plotly's offline mode using a figure with frames. It sets up the plot configuration and cycles through defined frames in a browser or Jupyter notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport IPython.display\nfrom IPython.display import display, HTML\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nfigure_or_data = {'data': [{'x': [1, 2], 'y': [0, 1]}],\n                  'layout': {'xaxis': {'range': [0, 3], 'autorange': False},\n                             'yaxis': {'range': [0, 20], 'autorange': False},\n                  'title': 'First Title'},\n                  'frames': [{'data': [{'x': [1, 2], 'y': [5, 7]}]},\n                             {'data': [{'x': [-1, 3], 'y': [3, 9]}]},\n                             {'data': [{'x': [2, 2.6], 'y': [7, 5]}]},\n                             {'data': [{'x': [1.5, 3], 'y': [7.5, 4]}]},\n                             {'data': [{'x': [1, 2], 'y': [0, 1]}],\n                              'layout': {'title': 'End Title'}}]}\niplot(figure_or_data)\n```\n\n----------------------------------------\n\nTITLE: Empty Code Cell in Python Notebook\nDESCRIPTION: An empty code cell with no content, likely intended for additional code or notes that may be added later.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/anova.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Empty Code Block\nDESCRIPTION: An empty code block with no content, likely used as a placeholder or for separation in the notebook.\nSOURCE: https://github.com/plotly/plotly.py/blob/main/doc/unconverted/python/heatmap-animation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\n```"
  }
]