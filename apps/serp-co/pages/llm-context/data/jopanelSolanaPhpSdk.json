[
  {
    "owner": "jopanel",
    "repo": "solana-php-sdk",
    "content": "TITLE: Simulating Transactions Using simulateTransaction RPC Method in PHP\nDESCRIPTION: Demonstrates how to simulate a transaction's execution without broadcasting it to the network. This is useful for testing transaction logic before submission. The method accepts a signed transaction and optional parameters for signature verification and commitment level.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Transaction;\n\n$transaction = new Transaction($rpc);\n\n// Simulate a signed transaction\n$simulationResult = $transaction->simulateTransaction(\n    'SignedTransactionBase64Here',\n    ['sigVerify' => true, 'commitment' => 'processed']\n);\nprint_r($simulationResult);\n```\n\n----------------------------------------\n\nTITLE: Submitting Transactions Using sendTransaction RPC Method in PHP\nDESCRIPTION: Shows how to submit a signed transaction to the Solana network for processing. The method requires a base64-encoded signed transaction and offers optional parameters for skipping preflight checks and specifying commitment levels.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Transaction;\n\n$transaction = new Transaction($rpc);\n\n// Send a signed transaction to the network\n$transactionSignature = $transaction->sendTransaction(\n    'SignedTransactionBase64Here',\n    ['skipPreflight' => true, 'preflightCommitment' => 'confirmed']\n);\nprint_r($transactionSignature);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Blockhash with Solana PHP SDK\nDESCRIPTION: Demonstrates how to fetch the latest blockhash from the Solana cluster, which is required for transaction creation and submission. Includes optional commitment level parameter.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get the latest blockhash\n$latestBlockhash = $block->getLatestBlockhash('finalized');\nprint_r($latestBlockhash);\n```\n\n----------------------------------------\n\nTITLE: Installing Solana PHP SDK with Composer\nDESCRIPTION: Command to install the Solana PHP SDK via Composer package manager. This adds the SDK as a dependency to your PHP project, allowing you to interact with the Solana blockchain.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require josephopanel/solana-php-sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing Solana PHP SDK\nDESCRIPTION: Sets up the Solana PHP SDK by including the Composer autoloader and instantiating the SolanaRPC and various endpoint classes for interacting with the Solana blockchain.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once 'vendor/autoload.php';\n\nuse JosephOpanel\\SolanaSDK\\SolanaRPC;\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Transaction;\n\n$rpc = new SolanaRPC();\n$account = new Account($rpc);\n$block = new Block($rpc);\n$transaction = new Transaction($rpc);\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance with getBalance\nDESCRIPTION: Retrieves the balance of a Solana account in lamports, where 1 SOL equals 1 billion lamports. This provides the current balance of any account on the blockchain.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get the balance of an account\n$balance = $account->getBalance('4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg');\nprint_r($balance);\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Signatures for an Address with Solana PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve transaction signatures associated with a specific account address using the getSignaturesForAddress method. It includes optional parameters for limiting results and specifying the commitment level.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Transaction;\n\n$transaction = new Transaction($rpc);\n\n// Get transaction signatures for an address\n$signatures = $transaction->getSignaturesForAddress(\n    '4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg',\n    ['limit' => 10, 'commitment' => 'finalized']\n);\nprint_r($signatures);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information with getAccountInfo\nDESCRIPTION: Retrieves detailed information about a specific account on the Solana blockchain, including its data, owner, lamport balance, and other properties.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get information about an account with default options\n$accountInfo = $account->getAccountInfo('4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg');\nprint_r($accountInfo);\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Signature Statuses with Solana PHP SDK\nDESCRIPTION: This example shows how to retrieve the status of multiple transaction signatures using the getSignatureStatuses method. It creates a Transaction instance and passes an array of transaction signatures to check, with an option to search transaction history.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Transaction;\n\n$transaction = new Transaction($rpc);\n\n// Get statuses for specific transaction signatures\n$signatureStatuses = $transaction->getSignatureStatuses(\n    ['5g3QjG1gN6bRmFcyCn4ufFq3q7xZ5vn9YWfByx2bt2Hv', '2vQPjXQWYmLx24CeKsjoG8t23jWzHufhAf79KfqzH2n3'],\n    true\n);\nprint_r($signatureStatuses);\n```\n\n----------------------------------------\n\nTITLE: Calculating Transaction Fee with Solana PHP SDK\nDESCRIPTION: Illustrates how to use the getFeeForMessage method to calculate the fee required to process a specific transaction message. This is useful for determining the cost of submitting a transaction to the Solana network.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Calculate the fee for a given transaction message\n$fee = $system->getFeeForMessage('base64EncodedMessage', 'finalized');\nprint_r($fee);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Transaction Signature Status in Solana PHP SDK\nDESCRIPTION: Illustrates how to subscribe to the status of a specific transaction signature on the Solana blockchain using the SignatureSubscription class. The method takes a transaction signature, a callback function, and optional parameters like commitment level.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\SignatureSubscription;\n\n$subscription = new SignatureSubscription();\n\n// Subscribe to a transaction signature\n$subscription->subscribe(\n    '5yJg7hzSYfz6n9p8Nnh6PtqVjfzZKz8Xf7LvUgJb7Bm',\n    function ($update) {\n        print_r($update);\n    },\n    ['commitment' => 'finalized']\n);\n```\n\n----------------------------------------\n\nTITLE: Requesting SOL Airdrop Using requestAirdrop RPC Method in PHP\nDESCRIPTION: Demonstrates how to request an airdrop of SOL tokens to a specified account for testing purposes on devnet or testnet. The method requires a public key and the amount of lamports to airdrop, and returns the transaction signature.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Request an airdrop of 1 SOL (1 SOL = 1,000,000,000 lamports)\n$airdropSignature = $system->requestAirdrop(\n    '4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg',\n    1000000000\n);\nprint_r($airdropSignature);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Program Account Updates Using WebSocket in PHP\nDESCRIPTION: Shows how to subscribe to updates for accounts owned by a specific Solana program. This method monitors all accounts associated with the given program ID and provides a callback function to handle the updates.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\ProgramSubscription;\n\n$subscription = new ProgramSubscription();\n\n// Subscribe to updates for a specific program\n$subscription->subscribe(\n    '4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg',\n    function ($update) {\n        print_r($update);\n    },\n    ['commitment' => 'finalized']\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Details in PHP\nDESCRIPTION: Example of using the getTransaction RPC method to retrieve detailed information about a specific transaction in Solana using its signature.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Transaction;\n\n$transaction = new Transaction($rpc);\n\n// Get detailed information about a transaction\n$transactionDetails = $transaction->getTransaction(\n    'TransactionSignatureHere',\n    ['commitment' => 'finalized', 'encoding' => 'json']\n);\nprint_r($transactionDetails);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Program Logs Using WebSocket in PHP\nDESCRIPTION: Shows how to subscribe to logs emitted by Solana programs. This method can monitor either a specific program or all programs on the blockchain, and provides a callback function to handle the log updates.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\LogsSubscription;\n\n$subscription = new LogsSubscription();\n\n// Subscribe to logs for a specific program\n$subscription->subscribe(\n    '4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg',\n    function ($update) {\n        print_r($update);\n    },\n    ['commitment' => 'finalized']\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Details with getBlock\nDESCRIPTION: Retrieves detailed information about a specific block on the Solana blockchain, including transactions, signatures, and parent block information. Options allow specifying commitment level, encoding, and other parameters.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get details about a specific block\n$blockDetails = $block->getBlock(123456, [\n    'commitment' => 'finalized',\n    'encoding' => 'json',\n    'transactionDetails' => 'full',\n    'rewards' => true,\n]);\nprint_r($blockDetails);\n```\n\n----------------------------------------\n\nTITLE: Querying Program Accounts with Solana PHP SDK\nDESCRIPTION: Example of retrieving all accounts owned by a specific program. Supports filtering and different encoding options for the returned account data.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get all accounts owned by a specific program\n$programAccounts = $account->getProgramAccounts(\n    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    ['commitment' => 'finalized', 'encoding' => 'jsonParsed']\n);\nprint_r($programAccounts);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Accounts with Solana PHP SDK\nDESCRIPTION: Shows how to fetch information about multiple accounts in a single request, optimizing queries when working with several accounts simultaneously.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get information about multiple accounts\n$accountsInfo = $account->getMultipleAccounts([\n    '4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg',\n    '5nQyMBaFChGmzfhNZZm9oTNDgNr5LTCfjoJGRhcfAcGQ',\n], ['commitment' => 'finalized']);\nprint_r($accountsInfo);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Account Balance with Solana PHP SDK\nDESCRIPTION: This snippet shows how to retrieve the balance of a specific token account in the Solana blockchain. It initializes an Account instance and calls the getTokenAccountBalance method with the account's public key.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get the token account balance\n$tokenBalance = $account->getTokenAccountBalance('4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg');\nprint_r($tokenBalance);\n```\n\n----------------------------------------\n\nTITLE: Checking Node Health with Solana PHP SDK\nDESCRIPTION: Illustrates how to use the getHealth method to check the health of the Solana node. This can be used to determine whether the node is operational and in sync with the cluster.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Check the health of the node\n$healthStatus = $system->getHealth();\nprint_r($healthStatus);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Accounts by Owner in PHP\nDESCRIPTION: Demonstrates how to use the getTokenAccountsByOwner RPC method to fetch all token accounts owned by a specific account in Solana.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get all token accounts owned by a specific account\n$tokenAccounts = $account->getTokenAccountsByOwner(\n    '4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg',\n    ['commitment' => 'finalized', 'encoding' => 'jsonParsed']\n);\nprint_r($tokenAccounts);\n```\n\n----------------------------------------\n\nTITLE: Validating Blockhash Using isBlockhashValid RPC Method in PHP\nDESCRIPTION: Demonstrates how to check whether a given blockhash is still valid on the Solana blockchain using the isBlockhashValid RPC method. The method takes a blockhash string and optional commitment parameter, and returns whether the blockhash is valid.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Check if a blockhash is valid\n$isValid = $block->isBlockhashValid(\n    'BlockhashHere',\n    ['commitment' => 'finalized']\n);\nprint_r($isValid);\n```\n\n----------------------------------------\n\nTITLE: Fetching Largest Token Accounts in PHP\nDESCRIPTION: Shows how to use the getTokenLargestAccounts RPC method to retrieve the largest accounts holding a specific SPL token in Solana.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get the largest accounts holding a specific SPL token\n$largestTokenAccounts = $account->getTokenLargestAccounts(\n    'TokenMintPublicKeyHere',\n    ['commitment' => 'finalized']\n);\nprint_r($largestTokenAccounts);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Prioritization Fees with Solana PHP SDK\nDESCRIPTION: This code snippet demonstrates how to use the getRecentPrioritizationFees method to retrieve recent prioritization fees from the Solana blockchain. It initializes a System instance with an RPC connection and calls the method to fetch fee information.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get recent prioritization fees\n$prioritizationFees = $system->getRecentPrioritizationFees();\nprint_r($prioritizationFees);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Supply in PHP\nDESCRIPTION: Demonstrates the use of the getTokenSupply RPC method to fetch the total supply of a specific SPL token in Solana.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get the total supply of a specific SPL token\n$tokenSupply = $account->getTokenSupply(\n    'TokenMintPublicKeyHere',\n    ['commitment' => 'finalized']\n);\nprint_r($tokenSupply);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Account Updates Using WebSocket in PHP\nDESCRIPTION: Shows how to subscribe to real-time updates for a specific Solana account using WebSocket connections. This method monitors changes to the account and invokes a callback function whenever there's an update.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\AccountSubscription;\n\n$subscription = new AccountSubscription();\n\n// Subscribe to account updates\n$subscription->subscribe(\n    '2S3LbfvkbCqNBMqgdH27UJVykb6cdaQ93zWF78s3Xtmq',\n    function ($update) {\n        print_r($update);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Supply Information in Solana with PHP SDK\nDESCRIPTION: This code example demonstrates how to retrieve information about the total token supply in the Solana cluster using the getSupply method. It includes details on circulating and non-circulating supply with the 'finalized' commitment level.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the token supply information\n$supply = $system->getSupply('finalized');\nprint_r($supply);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Block Updates Using WebSocket in PHP\nDESCRIPTION: Shows how to subscribe to real-time updates about newly confirmed blocks on the Solana blockchain. This method can specify the commitment level for the updates and provides a callback function for handling the updates.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\BlockSubscription;\n\n$subscription = new BlockSubscription();\n\n// Subscribe to block updates\n$subscription->subscribe(\n    function ($update) {\n        print_r($update);\n    },\n    ['commitment' => 'finalized']\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Slot Updates in Solana PHP SDK\nDESCRIPTION: Demonstrates how to subscribe to updates about the current slot on the Solana blockchain using the SlotSubscription class. The subscribe method takes a callback function that will be called with each update.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\SlotSubscription;\n\n$subscription = new SlotSubscription();\n\n// Subscribe to slot updates\n$subscription->subscribe(function ($update) {\n    print_r($update);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Slots Updates in Solana PHP SDK\nDESCRIPTION: Illustrates how to subscribe to updates about slot activity on the Solana blockchain using the SlotsUpdatesSubscription class. The subscribe method takes a callback function that will be called with each update.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\SlotsUpdatesSubscription;\n\n$subscription = new SlotsUpdatesSubscription();\n\n// Subscribe to slots updates\n$subscription->subscribe(function ($update) {\n    print_r($update);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Vote Account Updates in Solana PHP SDK\nDESCRIPTION: Shows how to subscribe to updates about vote accounts on the Solana blockchain using the VoteSubscription class. The subscribe method takes a callback function that will be called with each update.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_69\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\VoteSubscription;\n\n$subscription = new VoteSubscription();\n\n// Subscribe to vote updates\n$subscription->subscribe(function ($update) {\n    print_r($update);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Leader Schedule with Solana PHP SDK\nDESCRIPTION: Shows how to retrieve the validator leader schedule for specific slots or epochs. Supports optional parameters for slot selection, commitment level, and validator identity filtering.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the leader schedule for the current slot\n$leaderSchedule = $system->getLeaderSchedule();\nprint_r($leaderSchedule);\n\n// Get the leader schedule for a specific slot range\n$leaderScheduleForSlot = $system->getLeaderSchedule(123400, ['commitment' => 'finalized']);\nprint_r($leaderScheduleForSlot);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Commitment Information\nDESCRIPTION: Fetches commitment information for a specific block, showing how many votes each commitment level has received for the block. This helps understand the consensus status of a block on the network.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get the commitment for a specific block\n$blockCommitment = $block->getBlockCommitment(123456);\nprint_r($blockCommitment);\n```\n\n----------------------------------------\n\nTITLE: Getting Slot Leaders for a Range of Slots with Solana PHP SDK\nDESCRIPTION: This code shows how to retrieve a list of slot leaders for a specific range of slots in the Solana blockchain. It specifies a starting slot and the number of slot leaders to retrieve.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the slot leaders for a range of slots\n$slotLeaders = $system->getSlotLeaders(123400, 10);\nprint_r($slotLeaders);\n```\n\n----------------------------------------\n\nTITLE: Listing Limited Blocks with getBlocksWithLimit\nDESCRIPTION: Fetches a limited number of confirmed blocks starting from a specific slot, useful for pagination and controlled iteration through blocks on the Solana blockchain.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get a limited number of confirmed blocks starting from a specific slot\n$blocksWithLimit = $block->getBlocksWithLimit(123400, 10);\nprint_r($blocksWithLimit);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Slot Leader in Solana with PHP SDK\nDESCRIPTION: This example demonstrates how to get the identity of the current slot leader in the Solana blockchain. It creates a System instance and calls the getSlotLeader method with the 'finalized' commitment level.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the current slot leader\n$slotLeader = $system->getSlotLeader('finalized');\nprint_r($slotLeader);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vote Accounts Information in PHP\nDESCRIPTION: Example of using the getVoteAccounts RPC method to fetch information about current vote accounts in the Solana cluster, including active and delinquent validators.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get information about vote accounts\n$voteAccounts = $system->getVoteAccounts('finalized');\nprint_r($voteAccounts);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Slot in Solana Blockchain with PHP SDK\nDESCRIPTION: This code example shows how to retrieve the current slot of the Solana blockchain using the getSlot method. It specifies the 'finalized' commitment level to get the latest finalized slot number.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the current slot\n$currentSlot = $system->getSlot('finalized');\nprint_r($currentSlot);\n```\n\n----------------------------------------\n\nTITLE: Fetching Performance Samples with Solana PHP SDK\nDESCRIPTION: Shows how to retrieve recent performance samples from the Solana cluster, providing insights into transaction processing and slot progression.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get recent performance samples\n$performanceSamples = $system->getRecentPerformanceSamples(5);\nprint_r($performanceSamples);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Block Height\nDESCRIPTION: Retrieves the current block height of the Solana blockchain, which indicates the number of blocks that have been added to the chain since the genesis block.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$blockHeight = $block->getBlockHeight();\nprint_r($blockHeight);\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Available Block with Solana PHP SDK\nDESCRIPTION: Demonstrates how to use the getFirstAvailableBlock method to retrieve the slot number of the first available block in the ledger. This is useful for determining the starting point of stored block data on the current node.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get the first available block in the ledger\n$firstAvailableBlock = $block->getFirstAvailableBlock();\nprint_r($firstAvailableBlock);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epoch Information with Solana PHP SDK\nDESCRIPTION: Demonstrates how to use the getEpochInfo method to retrieve information about the current epoch in the Solana blockchain. This includes details such as the current epoch number, slot index, and total slots in the epoch.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get information about the current epoch\n$epochInfo = $system->getEpochInfo('finalized');\nprint_r($epochInfo);\n```\n\n----------------------------------------\n\nTITLE: Fetching Epoch Schedule with Solana PHP SDK\nDESCRIPTION: Shows how to use the getEpochSchedule method to retrieve details about the epoch schedule of the Solana cluster. This includes information such as slots per epoch, leader schedule slot offset, and the first normal epoch.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get details about the epoch schedule\n$epochSchedule = $system->getEpochSchedule();\nprint_r($epochSchedule);\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Inflation Rate with Solana PHP SDK\nDESCRIPTION: Demonstrates how to use the getInflationRate method to retrieve the current inflation rate for the Solana cluster. This method provides insight into the rate of inflation for a given epoch, which impacts staking rewards and token supply.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the current inflation rate\n$inflationRate = $system->getInflationRate();\nprint_r($inflationRate);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inflation Rewards with Solana PHP SDK\nDESCRIPTION: Shows how to use the getInflationReward method to retrieve the inflation rewards earned by a list of accounts for a specified epoch. This is useful for understanding staking rewards distribution.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get inflation rewards for a list of accounts\n$rewards = $system->getInflationReward(['4izNYzN7uQac8jBDcD7NmuCpS8PqvYiHVSLXF5bY9Zrg'], ['epoch' => 200]);\nprint_r($rewards);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inflation Governor Settings with Solana PHP SDK\nDESCRIPTION: Illustrates how to use the getInflationGovernor method to retrieve the current inflation governor settings for the Solana cluster. These settings determine the cluster's inflation schedule, including base rates and terminal rates.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the inflation governor settings\n$inflationGovernor = $system->getInflationGovernor('finalized');\nprint_r($inflationGovernor);\n```\n\n----------------------------------------\n\nTITLE: Querying Largest Accounts with Solana PHP SDK\nDESCRIPTION: Example showing how to retrieve the largest accounts on Solana cluster by lamport balance. Allows filtering by circulating or non-circulating accounts with optional commitment level specification.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the largest accounts in the cluster\n$largestAccounts = $system->getLargestAccounts(['filter' => 'circulating']);\nprint_r($largestAccounts);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Stake Delegation in Solana with PHP SDK\nDESCRIPTION: This example demonstrates how to get the minimum stake delegation required in the Solana cluster. It initializes a System instance and calls the getStakeMinimumDelegation method to retrieve the minimum stake in lamports.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the minimum stake delegation\n$minimumStakeDelegation = $system->getStakeMinimumDelegation();\nprint_r($minimumStakeDelegation);\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Rent Balance with Solana PHP SDK\nDESCRIPTION: Demonstrates how to calculate the minimum balance required for rent exemption based on account data size. Essential for creating rent-exempt accounts.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the minimum balance for rent exemption for an account of size 128 bytes\n$minimumBalance = $system->getMinimumBalanceForRentExemption(128, 'finalized');\nprint_r($minimumBalance);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Program Updates in Solana PHP SDK\nDESCRIPTION: Demonstrates how to unsubscribe from an active program subscription using the ProgramSubscription class. The method takes a subscription ID as a parameter to identify which subscription to terminate.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\ProgramSubscription;\n\n$subscription = new ProgramSubscription();\n\n// Unsubscribe from program updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Production Information\nDESCRIPTION: Fetches block production information for a specific range of slots, providing insight into the leader schedule and the number of blocks produced by each validator on the network.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get block production information for a specific range\n$blockProduction = $block->getBlockProduction([\n    'commitment' => 'finalized',\n    'range' => ['firstSlot' => 123400, 'lastSlot' => 123500],\n]);\nprint_r($blockProduction);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Program Logs Using WebSocket in PHP\nDESCRIPTION: Demonstrates how to unsubscribe from an active logs subscription using WebSocket. This method requires the subscription ID that was returned when the subscription was created.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\LogsSubscription;\n\n$subscription = new LogsSubscription();\n\n// Unsubscribe from logs updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Listing Blocks in a Range with getBlocks\nDESCRIPTION: Retrieves a list of confirmed blocks between two slot numbers, allowing iteration over blocks within a specific range on the Solana blockchain.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get a list of confirmed blocks between two slots\n$blocks = $block->getBlocks(123400, 123500);\nprint_r($blocks);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Root Updates in Solana PHP SDK\nDESCRIPTION: Demonstrates how to unsubscribe from an active root subscription using the RootSubscription class. The method takes a subscription ID as a parameter to identify which subscription to terminate.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\RootSubscription;\n\n$subscription = new RootSubscription();\n\n// Unsubscribe from root updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Getting Block Timestamp with getBlockTime\nDESCRIPTION: Retrieves the estimated Unix timestamp at which a specific block was produced, useful for understanding the timing of specific blocks on the Solana blockchain.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get the estimated time for a specific block\n$blockTime = $block->getBlockTime(123456);\nprint_r($blockTime);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Slot Updates in Solana PHP SDK\nDESCRIPTION: Shows how to unsubscribe from an active slot subscription using the SlotSubscription class. The method takes a subscription ID as a parameter to identify which subscription to terminate.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\SlotSubscription;\n\n$subscription = new SlotSubscription();\n\n// Unsubscribe from slot updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Count in PHP\nDESCRIPTION: Shows how to use the getTransactionCount RPC method to fetch the total number of transactions processed by the Solana cluster.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the total transaction count\n$transactionCount = $system->getTransactionCount('finalized');\nprint_r($transactionCount);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Block Updates Using WebSocket in PHP\nDESCRIPTION: Demonstrates how to unsubscribe from an active block subscription using WebSocket. This method requires the subscription ID that was returned when the subscription was created.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\BlockSubscription;\n\n$subscription = new BlockSubscription();\n\n// Unsubscribe from block updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Node Information\nDESCRIPTION: Retrieves information about all nodes participating in the Solana cluster, including details about each node's public key, RPC address, gossip address, and software version.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get a list of all nodes in the Solana cluster\n$clusterNodes = $system->getClusterNodes();\nprint_r($clusterNodes);\n```\n\n----------------------------------------\n\nTITLE: Fetching Node Identity with Solana PHP SDK\nDESCRIPTION: Shows how to use the getIdentity method to retrieve the identity of the Solana node. The identity is represented by the node's public key and is useful for distinguishing between nodes in the cluster.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the identity of the node\n$nodeIdentity = $system->getIdentity();\nprint_r($nodeIdentity);\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Node Version in PHP\nDESCRIPTION: Demonstrates how to use the getVersion RPC method to retrieve the current software version of the Solana node.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the current software version of the node\n$version = $system->getVersion();\nprint_r($version);\n```\n\n----------------------------------------\n\nTITLE: Fetching Genesis Hash with Solana PHP SDK\nDESCRIPTION: Shows how to use the getGenesisHash method to retrieve the genesis hash of the Solana cluster. The genesis hash is a unique identifier for the genesis block and can be used to distinguish between different networks.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get the genesis hash of the cluster\n$genesisHash = $block->getGenesisHash();\nprint_r($genesisHash);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Highest Snapshot Slot with Solana PHP SDK\nDESCRIPTION: Demonstrates how to use the getHighestSnapshotSlot method to retrieve the highest slot for which a snapshot is available on the node. This is useful for understanding the state of snapshots used for validator restart or catching up with the cluster.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the highest snapshot slot available\n$highestSnapshotSlot = $system->getHighestSnapshotSlot();\nprint_r($highestSnapshotSlot);\n```\n\n----------------------------------------\n\nTITLE: Getting Max Retransmit Slot with Solana PHP SDK\nDESCRIPTION: Example of retrieving the highest slot that a node has retransmitted to its peers. Useful for monitoring data propagation across the network.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the maximum retransmit slot\n$maxRetransmitSlot = $system->getMaxRetransmitSlot();\nprint_r($maxRetransmitSlot);\n```\n\n----------------------------------------\n\nTITLE: Querying Max Shred Insert Slot with Solana PHP SDK\nDESCRIPTION: Shows how to get the highest slot for which the node has inserted shreds (data fragments), useful for monitoring node data processing progress.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\System;\n\n$system = new System($rpc);\n\n// Get the maximum shred insert slot\n$maxShredInsertSlot = $system->getMaxShredInsertSlot();\nprint_r($maxShredInsertSlot);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Ledger Slot Using minimumLedgerSlot RPC Method in PHP\nDESCRIPTION: Shows how to retrieve the lowest slot that a Solana node has information about in its ledger using the minimumLedgerSlot RPC method. This method takes no parameters and returns the minimum available slot as an integer.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Block;\n\n$block = new Block($rpc);\n\n// Get the minimum ledger slot available\n$minimumSlot = $block->minimumLedgerSlot();\nprint_r($minimumSlot);\n```\n\n----------------------------------------\n\nTITLE: Querying Token Accounts by Delegate in PHP\nDESCRIPTION: Example of using the getTokenAccountsByDelegate RPC method to retrieve all token accounts delegated to a specific delegate in Solana.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\Endpoints\\JsonRPC\\Account;\n\n$account = new Account($rpc);\n\n// Get all token accounts by a specific delegate\n$tokenAccounts = $account->getTokenAccountsByDelegate(\n    'DelegatePublicKeyHere',\n    ['commitment' => 'finalized', 'encoding' => 'jsonParsed']\n);\nprint_r($tokenAccounts);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Account Updates Using WebSocket in PHP\nDESCRIPTION: Demonstrates how to unsubscribe from an active account subscription using WebSocket. This method requires the subscription ID that was returned when the subscription was created.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\AccountSubscription;\n\n$subscription = new AccountSubscription();\n\n// Unsubscribe from account updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Root Updates in Solana PHP SDK\nDESCRIPTION: Shows how to subscribe to updates about the highest confirmed root of the Solana blockchain using the RootSubscription class. The subscribe method takes a callback function that will be called with each update.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\RootSubscription;\n\n$subscription = new RootSubscription();\n\n// Subscribe to root updates\n$subscription->subscribe(function ($update) {\n    print_r($update);\n});\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Vote Account Updates in Solana PHP SDK\nDESCRIPTION: Illustrates how to unsubscribe from an active vote account subscription using the VoteSubscription class. The method takes a subscription ID as a parameter to identify which subscription to terminate.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\VoteSubscription;\n\n$subscription = new VoteSubscription();\n\n// Unsubscribe from vote updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Slots Updates in Solana PHP SDK\nDESCRIPTION: Demonstrates how to unsubscribe from an active slots updates subscription using the SlotsUpdatesSubscription class. The method takes a subscription ID as a parameter to identify which subscription to terminate.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\SlotsUpdatesSubscription;\n\n$subscription = new SlotsUpdatesSubscription();\n\n// Unsubscribe from slots updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Signature Updates in Solana PHP SDK\nDESCRIPTION: Shows how to unsubscribe from an active signature subscription using the SignatureSubscription class. The method takes a subscription ID as a parameter to identify which subscription to terminate.\nSOURCE: https://github.com/jopanel/solana-php-sdk/blob/main/docs/API.md#2025-04-22_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nuse JosephOpanel\\SolanaSDK\\WebSocket\\SignatureSubscription;\n\n$subscription = new SignatureSubscription();\n\n// Unsubscribe from signature updates\n$subscription->unsubscribe(1); // Replace 1 with a valid subscription ID\n```"
  }
]