[
  {
    "owner": "layabox",
    "repo": "layaair-doc-zh",
    "content": "TITLE: WebView API Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for displaying a WebView in LayaNative. The setExternalLinkEx function takes parameters for URL, position, dimensions, and close behavior.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/webview/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 显示一个webview\n * @param url {string} 要显示的url地址。\n * @param posx {number} weview的左上角位置\n * @param posy {number} webivew的左上角位置\n * @param width {number} webview的宽度\n * @param height {number} webview的高度\n * @param canclose {boolean} webview是否可以被关掉。\n */ \nsetExternalLinkEx(url:string,posx:number,posy:number,width:number,height:number,canclose:boolean):void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Property Behavior with @property Decorator in LayaAir - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @property decorator in LayaAir TypeScript scripts to finely control the editor UI and runtime attributes of fields. Examples include controlling property visibility using 'hidden', enforcing read-only with 'readonly', providing input validation through 'validator', handling password input, managing submit semantics with 'submitOnTyping', defining prompt text, and presenting value as dropdowns with 'enumSource'. It also shows other settings such as 'reverseBool', 'nullable', input range and precision, percentage display, array and color editor behaviors, resource filtering, position customization, indentation, and triggering onChange callbacks. Dependencies: LayaAir TypeScript environment with proper decorator support. Key parameters are customized per field, affecting their rendering and interactivity in LayaAir's custom editor panels. Inputs/outputs are properties exposed on a component. Some constraints apply, e.g., some expressions are evaluated in an editor context, not at runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t//隐藏控制\n    @property({ type: Boolean })\n    a: boolean;\n    @property({ type: String, hidden: \"!data.a\" })//将条件表达式!data.a放在了字符串中，如果a为true（在IDE中为勾选状态），则!data.a返回false，此时hidden属性表示的是显示\n    hide: string = \"\";\n\n\t// 只读控制\n    @property({ type: Boolean })\n    b: boolean;\n    @property({ type: String, readonly: \"data.b\" })//将条件表达式data.b放在了字符串中，如果b为true（在IDE中为勾选状态），则data.b就返回true，此时readonly属性表示只读\n    read: string = \"\";\n\n\t//数据检查机制\n    @property(String)\n    text1: string;\n    @property({ type: String, validator: \"if (value == data.text1) return '不能与a值相同' \" })\n    text2: string = \"\";\n\n\t//密码输入\n    @property({ type: String, password: true })\n    password: string;\n\n\t//如果true或者缺省，文本输入每次输入都提交；否则只有在失焦时才提交\n    @property({ type: String, submitOnTyping: false })\n    submit: string;\n\n\t//输入文本的提示信息\n    @property({ type: \"text\", prompt: \"文本提示信息\" })\n    prompt: string;\n\n\t//显示为下拉框\n    @property({ type: Number, enumSource: [{name:\"Yes\", value:1}, {name:\"No\",value:0}] })\n    enumsource: number;\n\n\t//反转布尔值\n    @property({ type: \"boolean\", reverseBool: true })\n\treverseboolean : boolean;\n\t\n\t//允许null值\n    @property({ type: String, nullable: true })\n    nullable: string;\n\n\t//控制数字输入的精度和范围\n    @property({ type: Number, range:[0,5], step: 0.5, fractionDigits: 3 })\n    range : number;\n\n\t//显示为百分比\n    @property({ type: Number, range:[0,1], percentage: true })\n    percent : number;\n\n\t//固定数组长度\n    @property({ type: [\"number\"], fixedLength: true })\n    arr1: number[];\n\n\t//数组允许的操作\n    @property({ type: [\"number\"], arrayActions: [\"delete\", \"move\"] })\n    arr2: number[];\n\n    //使数组元素编辑时限制最大值和最小值\n    @property({ type: [Number], elementProps: { range: [0, 100] } })\n    array1: Array<Number>;\n    //如果是多维数组，则elementProps同样需要使用多层\n    @property({ type: [[Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    array2: Array<Array<Number>>;\n\n\t//不提供透明度a值的修改\n    @property({ type: Laya.Color, showAlpha: false })\n    color1: Laya.Color;\n\n\t//颜色类型时，defaultColor定义一个非null时的默认值\n    @property({ type: String, inspector: \"color\", defaultColor: \"rgba(217, 232, 0, 1)\" })\n    color2: string;\n\n\t//显示一个checkbox决定颜色是否为null\n    @property({ type: Laya.Color, colorNullable: true })\n    color3: Laya.Color;\n\n\t//加载Image资源类型，设置资源路径格式\n    @property({ type: String, isAsset: true, assetTypeFilter: \"Image\" })\n    resource: string;\n\n    //x属性出现在testposition属性之前\n    @property({ type: String })\n    x: string;\n    //可以用position人为将testposition属性安排在x属性之前显示\n    @property({ type: String, position: \"before x\" })\n    testposition: string;\n\n\t//增加缩进，单位是层级\n    @property({ type: String, addIndent:1 })\n    indent1: string;\n    @property({ type: String, addIndent:2 })\n    indent2: string;\n\n    //当属性改变时，调用名称为onChangeTest的函数\n    @property({ type: Boolean, onChange: \"onChangeTest\"})\n    change: boolean;\n    onChangeTest() {\n        console.log(\"onChangeTest\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Complete Laya.Byte WebSocket Example in TypeScript\nDESCRIPTION: Provides a full LayaAir script demonstrating the setup and use of Laya.Byte for WebSocket communication. It includes creating a Socket and Byte instance, setting little-endian byte order, handling socket events (open, message, close, error), writing various data types to the Byte object, sending the data (byte.buffer) upon connection, clearing the buffer, receiving an ArrayBuffer message, writing it to a new Byte instance for reading, resetting the position (pos = 0), reading back the different data types in the correct order, and clearing the socket input buffer.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class WebSocketDemo extends Laya.Script {\n    private socket: Laya.Socket;\n    private byte: Laya.Byte;\n\n    onEnable() {\n        // 创建 Socket 对象\n        this.socket = new Laya.Socket();\n        //  初始化用于二进制数据处理的 Laya.Byte\n        this.byte = new Laya.Byte();\n        // 设置字节序为小端模式\n        this.byte.endian = Laya.Byte.LITTLE_ENDIAN;\n\n        // 注册事件监听\n        this.socket.on(Laya.Event.OPEN, this, this.onSocketOpen);\n        this.socket.on(Laya.Event.MESSAGE, this, this.onMessageReceived);\n        this.socket.on(Laya.Event.CLOSE, this, this.onSocketClose);\n        this.socket.on(Laya.Event.ERROR, this, this.onConnectError);\n\n        // 建立连接（此处使用 connectByUrl 方式，实际可根据需要选择其他方式）\n        this.socket.connectByUrl(\"wss://echo.websocket.org:443\");\n    }\n\n    // 连接成功回调\n    private onSocketOpen(e: any): void {\n        console.log(\"WebSocket 已连接\");\n        // 按顺序写入数据：一个字节、一个 16 位整数、一个 32 位浮点数、一段字符串\n        this.byte.writeByte(99);\n        this.byte.writeInt16(2025);\n        this.byte.writeFloat32(0.12345672398805618);\n        this.byte.writeUTFString(\"二进制数据示例\");\n\n        // 发送时必须传入二进制数据byte.buffer（ArrayBuffer 对象），而非传入 byte 对象\n        this.socket.send(this.byte.buffer);\n        //清空缓冲区，避免数据残留影响后续操作。\n        this.byte.clear();\n    }\n\n    // 接收数据回调\n    private onMessageReceived(msg: any): void {\n        console.log(\"接收到消息：\", msg);\n\n        // 判断消息类型是否为 ArrayBuffer（二进制数据）\n        if (msg instanceof ArrayBuffer) {\n            // 创建 Laya.Byte 实例，用于操作二进制数据\n            let byte = new Laya.Byte();\n            // 设置字节序列的字节序\n            byte.endian = Laya.Byte.LITTLE_ENDIAN;\n            // 将 ArrayBuffer 中的二进制数据写入 Laya.Byte 对象中\n            byte.writeArrayBuffer(msg);\n\n            // 重置字节流的位置指针，从0开始读取数据\n            byte.pos = 0;\n\n            // 从字节流中读取一个字节（8位）\n            let a = byte.getByte();  // 获取一个字节（1个byte）\n            // 从字节流中读取一个16位整数（2个字节）\n            let b = byte.getInt16();  // 获取一个16位整数\n            // 从字节流中读取一个32位浮点数（4个字节）\n            let c = byte.getFloat32();  // 获取一个32位浮点数\n            // 从字节流中读取一个UTF-8编码的字符串\n            let d = byte.getUTFString();  // 获取一个UTF-8字符串\n\n            // 打印解析结果\n            console.log(\"解析结果：\", a, b, c, d);\n        }\n        // 清空 socket 输入流中的数据，确保下次读取是干净的\n        this.socket.input.clear();\n    }\n\n\n    // 连接关闭回调\n    private onSocketClose(e: any): void {\n        console.log(\"WebSocket 连接已关闭\");\n    }\n\n    // 连接错误回调\n    private onConnectError(e: any): void {\n        console.error(\"WebSocket 连接出错：\", e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling cacheAs Bitmap Caching on a Sprite Container in LayaAir with TypeScript\nDESCRIPTION: This TypeScript snippet shows the use of the cacheAs=\"bitmap\" property on a Sprite container containing multiple text children to enable bitmap caching. This reduces rendering overhead by caching static or rarely changing container contents as a bitmap, leading to a significant performance boost and higher frame rates. This example assumes the sprite and its children have already been created. Key considerations include avoiding this setting on containers with frequently changing content due to the overhead of recaching.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/rendering/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n   var textBox=new Laya.Sprite();\n   textBox.cacheAs=\"bitmap\";\n```\n\n----------------------------------------\n\nTITLE: Connecting by WebSocket URL Using connectByUrl in LayaAir TypeScript\nDESCRIPTION: Illustrates connecting to a WebSocket server by specifying the full URL (with ws:// or wss:// prefix) using Laya.Socket's connectByUrl method. The parameter is a complete WebSocket URL string. The method returns after attempting connection; suitable for situations where full endpoint control is required.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet socket = new Laya.Socket();\nsocket.connectByUrl(\"ws://localhost:8989\");\n```\n\n----------------------------------------\n\nTITLE: Setting List Data Source in LayaAir using TypeScript\nDESCRIPTION: This script assigns an array of data to a List component, connecting each item's data to a label subcomponent. It uses decorators for class registration and property exposure in LayaAir. The 'onEnable' lifecycle method initializes an array of objects whose 'm_label' property matches a Label component in the List's item template, thereby dynamically populating the List. Required dependencies are Laya and TypeScript decorators; ensure List's item template and label names correspond with object keys. The script expects the 'list' property to be set via the editor and outputs the List filled with sequentially labeled items. It must be attached to a scene containing a properly configured List.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/List/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n\n    @property({ type: Laya.List })\n    list: Laya.List\n\n    constructor() {\n        super();\n    }\n\n    // 组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        // 给List对象赋值\n        var data: Array<any> = [];\n        for (var m: number = 0; m < 20; m++) {\n            data.push({ m_label: \"No.\" + m });\n        }\n        this.list.array = data;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening a Scene with Parameters in LayaAir JavaScript\nDESCRIPTION: Demonstrates opening a LayaAir scene and passing custom parameters via the third argument. The receiving scene's onOpened method will access these parameters. Dependencies: LayaAir framework and both the source and destination .ls files. Inputs: the path to the scene, closeOther (optional), and a parameter object. Output: opens the scene, passing in specified parameters; receiver must handle param in its logic. Limitations: param keys must match what the receiving code expects; no error is thrown on unused keys.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/useScene/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nLaya.Scene.open(\"uiDemo/Msg.ls\", false, { \"text\": \"没有勾选项，请先勾选\" });\n```\n\n----------------------------------------\n\nTITLE: Parsing and Registering Resource Dependencies in Exporter (TypeScript)\nDESCRIPTION: Demonstrates using parseLinks to analyze dependencies and register them for an asset exporter. An array of dependency link info objects is constructed and assigned to this.exportInfo.deps, allowing the build system to automatically track and resolve relationships during output transformations. Requires IEditorEnv context and assumes exportInfo and parseLinks methods are available; inputs are arrays of link info, outputs are dependency registrations for the exporter.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst links = [ { obj: \"data\", prop: \"url\", url : \"b5b5975b-3d93-4ee5-83a3-68d25c2354bf\" } ];\nthis.exportInfo.deps = this.parseLinks(links);\n```\n\n----------------------------------------\n\nTITLE: Rendering 10000 Text Instances and Using cacheAs Bitmap for Performance in LayaAir TypeScript\nDESCRIPTION: This example initializes a LayaAir WebGL context, creates a Sprite container and adds 10,000 randomly positioned Text objects with random numeric content. It demonstrates a performance baseline without caching. An additional snippet suggests setting the container's cacheAs property to 'bitmap' to cache rendered output as a bitmap, significantly improving FPS. This technique reduces draw calls and processing overhead for static text content. Requires LayaAir engine, WebGL backend, and TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Test {\n     private text:Laya.Text;\n    constructor() {\n        Laya.init(550,400,Laya.WebGL);\n        Laya.Stat.show();\n        var textBox=new Laya.Sprite();\n        for(var i=0;i<10000;i++)\n        {\n            this.text=new Laya.Text();\n            this.text.text=(Math.random()*100).toFixed(0);\n            this.text.color=\"#CCCCCC\";\n            this.text.x=Math.random()*550;\n            this.text.y=Math.random()*400;\n            textBox.addChild(this.text);\n        }\n        Laya.stage.addChild(textBox);\n    }\n}\n\n// Performance improvement example:\n// textBox.cacheAs=\"bitmap\";\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests with LayaAir HttpRequest Class in TypeScript\nDESCRIPTION: This snippet shows the definition of the HttpRequest.send method in LayaAir, describing parameters including the request URL, optional data payload, HTTP method (GET, POST, HEAD), responseType (text, json, xml, arraybuffer), and optional headers array. It demonstrates how to send HTTP requests with different configurations, facilitating network communication in game development.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/HTTP/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 发送 HTTP 请求。\n * @param\\turl\\t\\t\\t\\t\\t\\t请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。\n * @param\\tdata\\t\\t\\t(default = null)发送的数据。\n * @param\\tmethod\\t\\t(default = \"get\")用于请求的 HTTP 方法。值包括 \"get\"、\"post\"、\"head\"。\n * @param\\tresponseType\\t(default = \"text\")Web 服务器的响应类型，可设置为 \"text\"、\"json\"、\"xml\"、\"arraybuffer\"。\n * @param\\theaders\\t\\t(default = null) HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如[\"Content-Type\", \"application/json\"]。\n */\nsend(url: string, data?: any, method?: \"get\" | \"post\" | \"head\", responseType?: \"text\" | \"json\" | \"xml\" | \"arraybuffer\", headers?: string[]): void;\n```\n\n----------------------------------------\n\nTITLE: Loading and Unloading Resources to Manage Memory in LayaAir using TypeScript\nDESCRIPTION: Illustrates loading multiple image resources asynchronously using Laya.loader.load and then unloading them with Laya.loader.clearRes to free memory. The example logs the resource's presence before and after clearing, showing that resources remain in memory until explicitly cleared. It is critical for reducing memory footprint in games by timely unloading unused assets. Requires LayaAir's loader module and handlers in a TypeScript setup.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar assets: Array<any> = []\nassets.push(\"resources/apes/monkey0.png\");\nassets.push(\"resources/apes/monkey1.png\");\nassets.push(\"resources/apes/monkey2.png\");\nassets.push(\"resources/apes/monkey3.png\");\nLaya.loader.load(assets).then(()=>{\n    for(var i:number = 0, len: number = assets.length; i<len; ++i)\n    {\n        var asset:string = assets[i];\n        //查看log，清理前资源一直在内存中\n        console.log(Laya.loader.getRes(asset));\n        //调用清理方法\n        Laya.loader.clearRes(asset);\n        //查看log，清理后，资源被卸载\n        console.log(Laya.loader.getRes(asset));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: 加载及卸载资源示例 - LayaAir - TypeScript\nDESCRIPTION: 演示了如何通过Laya.loader.load加载多个资源后，利用Laya.loader.clearRes卸载资源释放内存，避免资源长时间驻留在内存中。示例步骤包括定义资源路径数组，异步加载资源，加载完成后遍历资源列表打印资源状态，调用clearRes卸载再打印以验证资源已被清除。依赖LayaAir加载器模块，适合场景如切换场景后清理无用资源。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar assets: Array<any> = []\nassets.push(\"resources/apes/monkey0.png\");\nassets.push(\"resources/apes/monkey1.png\");\nassets.push(\"resources/apes/monkey2.png\");\nassets.push(\"resources/apes/monkey3.png\");\nLaya.loader.load(assets).then(()=>{\n    for(var i:number = 0, len: number = assets.length; i<len; ++i)\n    {\n        var asset:string = assets[i];\n        //查看log，清理前资源一直在内存中\n        console.log(Laya.loader.getRes(asset));\n        //调用清理方法\n        Laya.loader.clearRes(asset);\n        //查看log，清理后，资源被卸载\n        console.log(Laya.loader.getRes(asset));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Reducing Dynamic Property Lookups in JavaScript\nDESCRIPTION: This snippet demonstrates caching object properties into local variables for efficient repeated access. It is useful when a property, such as 'prop' in 'this.target', is accessed multiple times within a function, thus reducing lookup overhead.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/CPU/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfoo()\n{\n    var prop=this.target.prop;\n    // Using cached 'prop'\n    this.process1(prop);\n    this.process2(prop);\n    this.process3(prop);\n}\n```\n\n----------------------------------------\n\nTITLE: 设置可碰撞组\nDESCRIPTION: 使用代码指定某个碰撞器可以与哪些碰撞组发生碰撞。 通过配置可碰撞组，可以控制物体之间的碰撞关系，实现复杂的碰撞需求。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/Rigidbody3D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//指定xxx碰撞器 可以与  某个碰撞组 发生碰撞\nxxx.canCollideWith = 1 << 2;  //只与分组ID为2的（值为4）分成发生碰撞\n\n//指定xxx碰撞器 可以与 多个碰撞组 发生碰撞\nxxx.canCollideWith = (1 << 1) | (1 << 2) | (1 << 5); //只与分组ID为1、2、5的进行碰撞\n\n//指定xxx碰撞器  不可以  与哪些组 发生碰撞，其它组都可以碰撞\nxxx.canCollideWith = -1 ^ (1 << 3) ^ (1 << 6)  //不与分组3、6进行碰撞，除3与6组之外都可以发生碰撞)\n```\n\n----------------------------------------\n\nTITLE: Available Component Event Handler Methods in LayaAir Custom Scripts (TypeScript)\nDESCRIPTION: Defines the optional event handler method signatures that can be implemented within a LayaAir custom script (`Laya.Script` subclass). These methods are automatically called by the engine in response to physics collisions, mouse interactions, and keyboard events occurring on the associated node.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/Script/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 开始碰撞时执行\n     */\n    onTriggerEnter?(other: PhysicsComponent | ColliderBase, self?: ColliderBase, contact?: any): void;\n\n    /**\n     * 持续碰撞时执行\n     */\n    onTriggerStay?(other: PhysicsComponent | ColliderBase, self?: ColliderBase, contact?: any): void;\n\n    /**\n     * 结束碰撞时执行\n     */\n    onTriggerExit?(other: PhysicsComponent | ColliderBase, self?: ColliderBase, contact?: any): void;\n\n    /**\n     * 开始碰撞时执行\n     */\n    onCollisionEnter?(collision: Collision): void;\n\n    /**\n     * 持续碰撞时执行\n     */\n    onCollisionStay?(collision: Collision): void;\n\n    /**\n     * 结束碰撞时执行\n     */\n    onCollisionExit?(collision: Collision): void;\n\n    /**\n     * 关节破坏时执行此方法\n     */\n    onJointBreak?(): void;\n\n    /**\n     * 鼠标按下时执行\n     */\n    onMouseDown?(evt: Event): void;\n\n    /**\n     * 鼠标抬起时执行\n     */\n    onMouseUp?(evt: Event): void;\n\n    /**\n     * 鼠标右键或中键按下时执行\n     */\n    onRightMouseDown?(evt: Event): void;\n\n    /**\n     * 鼠标右键或中键抬起时执行\n     */\n    onRightMouseUp?(evt: Event): void;\n\n    /**\n     * 鼠标在节点上移动时执行\n     */\n    onMouseMove?(evt: Event): void;\n\n    /**\n     * 鼠标进入节点时执行\n     */\n    onMouseOver?(evt: Event): void;\n\n    /**\n     * 鼠标离开节点时执行\n     */\n    onMouseOut?(evt: Event): void;\n\n    /**\n     * 鼠标按住一个物体后，拖拽时执行\n     */\n    onMouseDrag?(evt: Event): void;\n\n    /**\n     * 鼠标按住一个物体，拖拽一定距离，释放鼠标按键后执行\n     */\n    onMouseDragEnd?(evt: Event): void;\n\n    /**\n     * 鼠标点击时执行\n     */\n    onMouseClick?(evt: Event): void;\n\n    /**\n     * 鼠标双击时执行\n     */\n    onMouseDoubleClick?(evt: Event): void;\n\n    /**\n     * 鼠标右键点击时执行\n     */\n    onMouseRightClick?(evt: Event): void;\n\n    /**\n     * 键盘按下时执行\n     */\n    onKeyDown?(evt: Event): void;\n\n    /**\n     * 键盘产生一个字符时执行\n     */\n    onKeyPress?(evt: Event): void;\n\n    /**\n     * 键盘抬起时执行\n     */\n    onKeyUp?(evt: Event): void;\n```\n\n----------------------------------------\n\nTITLE: Using AStarFinder for Pathfinding in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript class demonstrates importing the AStarFinder class from the astar-typescript package and using it in a LayaAir Script. The script initializes a 2D grid, constructs an AStarFinder instance, and searches for the shortest path between two points. Dependencies include LayaAir for the Script API and astar-typescript for pathfinding. The grid matrix uses 0 for walkable cells and 1 for obstacles, with start/goal positions and resulting path output to the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/importJsLibrary/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AStarFinder } from \"../node_modules/astar-typescript/dist/astar\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    private aStarInstance: AStarFinder;\n\n    onStart() {\n        console.log(\"Game start\");\n\n        // 0表示通路，1表示障碍\n        let myMatrix = [\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 1],\n            [0, 0, 1, 1, 0, 1, 1, 0],\n            [0, 0, 1, 0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 0, 0, 1, 0],\n            [1, 1, 1, 0, 1, 0, 1, 0],\n            [0, 0, 0, 0, 1, 0, 1, 0],\n            [0, 0, 1, 0, 0, 0, 0, 0]\n          ];\n          \n        this.aStarInstance = new AStarFinder({\n            grid: {\n              // 列主序矩阵\n              matrix: myMatrix\n            }\n          });\n\n        let startPos = { x: 0, y: 0 };\n        let goalPos = { x: 7, y: 7 };\n\n        let myPathway = this.aStarInstance.findPath(startPos, goalPos);\n        console.log(myPathway);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Audio Playback on Stage Focus and Blur in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates how to manage sound playback in LayaAir based on stage focus events. Sound is played in a loop, and event listeners pause playback on BLUR (loss of focus) and resume on FOCUS (regain focus). Dependencies: LayaAir's Event system and initialized sound object (_sound). Inputs: none directly; relies on Event triggers. Output: Responsive audio playback to stage focus state.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/media/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n//循环播放_sound\n_sound.play(0);\n\n//失去舞台焦点（切出游戏）的处理\nLaya.stage.on(Laya.Event.BLUR, this, () => {\n    _sound.stop();\n});\n//获得舞台焦点（切回游戏）的处理\nLaya.stage.on(Laya.Event.FOCUS, this, () => {\n    _sound.play(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Single Resource (No Type) in LayaAir with TypeScript\nDESCRIPTION: This code snippet demonstrates how to load a single resource without specifying its type using `Laya.loader.load()`. It includes a `.then()` callback function to handle the loaded resource. This approach is suitable for common resource types that can be inferred from the file extension.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(url).then((res)=> {/** 不带类型，用于常规的资源 */});\n```\n\n----------------------------------------\n\nTITLE: Receiving and Displaying Binary Image via WebSocket in LayaAir TypeScript\nDESCRIPTION: Provides an end-to-end solution for downloading a binary image file as ArrayBuffer, sending it via Laya.Socket to a WebSocket server, and reconstructing the received binary data into a viewable image using Laya.Image. The code demonstrates using Uint8Array for potential decryption, converting ArrayBuffer to Blob, and dynamic image loading. Requires a valid image file URL and LayaAir's loader, Image, Browser, and stage modules.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class ArrayBufferSocketDemo extends Laya.Script {\n    private socket: Laya.Socket;\n\n    onEnable(): void {\n        this.socket = new Laya.Socket();\n        this.socket.connectByUrl(\"wss://echo.websocket.org:443\");\n        this.socket.on(Laya.Event.OPEN, this, this.onSocketOpen);\n        this.socket.on(Laya.Event.MESSAGE, this, this.onMessageReceived);\n        this.socket.on(Laya.Event.ERROR, this, this.onConnectError);\n    }\n\n    private onSocketOpen(): void {\n        console.log(\"Socket 已连接\");\n        /** 一个二进制图片资源路径（本地或在线），请自行替换本地二进制图片路径，\n         * 或从官网下载示例图片(路径：https://layaair.com/3.x/demo/resources/res/test.bin)\n         */\n        const imageUrl = \"resources/res/test.bin\";\n        // 加载二进制图片文件\n        Laya.loader.fetch(imageUrl, \"arraybuffer\").then((arrayBuffer: ArrayBuffer) => {\n            // 直接发送加载后的 ArrayBuffer 数据\n            this.socket.send(arrayBuffer);\n            console.log(\"发送 ArrayBuffer 数据\", arrayBuffer);\n        });\n    }\n    private onMessageReceived(message: any): void {\n        if (message instanceof ArrayBuffer) {\n            console.log(\"收到 ArrayBuffer 数据\", message);\n\n            // 跳过用于加密的前4个字节，只处理有效数据，如果资源没有加密，第二个参数可以不写。\n            const uint8Array = new Uint8Array(message, 4);\n\n            // 将 ArrayBuffer 转换为图片数据并加载到 LayaAir 引擎中\n            const img = new Laya.Image();\n            img.size(110, 145); // 设置图片显示大小\n            img.skin = Laya.Browser.window.URL.createObjectURL(new Blob([uint8Array], { type: 'image/png' }));\n            img.centerX = 0; // 设置图片居中显示\n\n            // 将图片添加到舞台显示\n            Laya.stage.addChild(img);\n        } else {\n            console.log(\"收到数据:\", message);\n        }\n    }\n\n    private onConnectError(): void {\n        console.log(\"Connection Error\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling RadioGroup via Script - LayaAir - TypeScript\nDESCRIPTION: Demonstrates how to control a RadioGroup component instance that has been added in the LayaAir IDE by attaching a custom TypeScript script. The script accesses the RadioGroup via a public property and programmatically sets its position, labels, spacing, direction, and initial selected index.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/RadioGroup/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.RadioGroup })\n    public radiogroup: Laya.RadioGroup;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.radiogroup.pos(100, 100);\n        this.radiogroup.labels = \"label0,label1,label2\";\n        this.radiogroup.space = 20;\n        this.radiogroup.selectedIndex = 0;\n        this.radiogroup.direction = \"vertical\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Script Entry Point in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom script class as the project entry point in LayaAir 3.0 using TypeScript. The class extends Laya.Script and uses decorators to register the class and define properties linked to scene components. The onStart lifecycle method runs initialization code, such as logging and modifying component visibility. This pattern requires that the relevant components be assigned via the editor to the script's properties before runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/entrance/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property()\n    private img: Laya.Image;      \n\n    onStart() {\n        console.log(\"Game start\");\n        this.img.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Control Script in LayaAir Engine with TypeScript\nDESCRIPTION: This TypeScript script defines a CameraMoveScript class extending Laya.Script3D, enabling camera movement via mouse and keyboard input in a 3D scene using the LayaAir engine. It handles mouse events to update camera rotation and uses keyboard keys W, A, S, D, Q, E for directional movement (forward, backward, left, right, vertical up/down). Key dependencies include the LayaAir framework, and the script requires assignment to a Laya Camera object. Key parameters include 'speed' controlling movement velocity. The script outputs smooth 3D camera motion and rotation based on user input, suitable for first-person navigation scenarios. Limitations include reliance on mouse down state for rotation updates and a fixed rotation speed factor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class CameraMoveScript extends Laya.Script3D {\n\n\t/** @private */\n\tprotected _tempVector3: Laya.Vector3 = new Laya.Vector3();\n\tprotected lastMouseX: number = 0;\n\tprotected lastMouseY: number = 0;\n\tprotected yawPitchRoll: Laya.Vector3 = new Laya.Vector3();\n\tprotected resultRotation: Laya.Quaternion = new Laya.Quaternion();\n\tprotected tempRotationZ: Laya.Quaternion = new Laya.Quaternion();\n\tprotected tempRotationX: Laya.Quaternion = new Laya.Quaternion();\n\tprotected tempRotationY: Laya.Quaternion = new Laya.Quaternion();\n\tprotected isMouseDown: boolean = false;\n\tprotected rotaionSpeed: number = 0.00006;\n\tprotected camera: Laya.BaseCamera = new Laya.Camera;\n\tprotected scene: Laya.Scene3D = new Laya.Scene3D;\n\n\tspeed: number = 0.01;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprotected _updateRotation(): void {\n\t\tif (Math.abs(this.yawPitchRoll.y) < 1.50) {\n\t\t\tLaya.Quaternion.createFromYawPitchRoll(this.yawPitchRoll.x, this.yawPitchRoll.y, this.yawPitchRoll.z, this.tempRotationZ);\n\t\t\tthis.tempRotationZ.cloneTo(this.camera.transform.localRotation);\n\t\t\tthis.camera.transform.localRotation = this.camera.transform.localRotation;\n\t\t}\n\t}\n\n\t/**\n\t * 监听鼠标事件\n\t */\n\tonAwake(): void {\n\t\tLaya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);\n\t\tLaya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseUp);\n\t\tthis.camera = (<Laya.Camera>this.owner);\n\t}\n\n\t/**\n\t * 监听键盘事件\n\t */\n\tonUpdate(): void {\n\t\tvar elapsedTime: number = Laya.timer.delta;\n\t\tif (!isNaN(this.lastMouseX) && !isNaN(this.lastMouseY) && this.isMouseDown) {\n\t\t\tLaya.InputManager.hasKeyDown(87) && this.moveForward(-this.speed * elapsedTime);//W\n\t\t\tLaya.InputManager.hasKeyDown(83) && this.moveForward(this.speed * elapsedTime);//S\n\t\t\tLaya.InputManager.hasKeyDown(65) && this.moveRight(-this.speed * elapsedTime);//A\n\t\t\tLaya.InputManager.hasKeyDown(68) && this.moveRight(this.speed * elapsedTime);//D\n\t\t\tLaya.InputManager.hasKeyDown(81) && this.moveVertical(this.speed * elapsedTime);//Q\n\t\t\tLaya.InputManager.hasKeyDown(69) && this.moveVertical(-this.speed * elapsedTime);//E\n\n\t\t\tvar offsetX: number = Laya.stage.mouseX - this.lastMouseX;\n\t\t\tvar offsetY: number = Laya.stage.mouseY - this.lastMouseY;\n\n\t\t\tvar yprElem: Laya.Vector3 = this.yawPitchRoll;\n\t\t\typrElem.x -= offsetX * this.rotaionSpeed * elapsedTime;\n\t\t\typrElem.y -= offsetY * this.rotaionSpeed * elapsedTime;\n\t\t\tthis._updateRotation();\n\t\t}\n\t\tthis.lastMouseX = Laya.stage.mouseX;\n\t\tthis.lastMouseY = Laya.stage.mouseY;\n\t}\n\n\t/**\n\t * 释放监听\n\t */\n\tonDestroy(): void {\n\t\tLaya.stage.off(Laya.Event.MOUSE_DOWN, this, this.mouseDown);\n\t\tLaya.stage.off(Laya.Event.MOUSE_UP, this, this.mouseUp);\n\t}\n\n\tprotected mouseDown(e: Laya.Event): void {\n\t\tthis.camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);\n\t\tthis.lastMouseX = Laya.stage.mouseX;\n\t\tthis.lastMouseY = Laya.stage.mouseY;\n\t\tthis.isMouseDown = true;\n\t}\n\n\tprotected mouseUp(e: Laya.Event): void {\n\t\tthis.isMouseDown = false;\n\t}\n\n\tprotected mouseOut(e: Laya.Event): void {\n\t\tthis.isMouseDown = false;\n\t}\n\n\t/**\n\t * 向前移动。\n\t * @param distance 移动距离。\n\t */\n\tmoveForward(distance: number): void {\n\t\tthis._tempVector3.x = this._tempVector3.y = 0;\n\t\tthis._tempVector3.z = distance;\n\t\tthis.camera.transform.translate(this._tempVector3);\n\t}\n\n\t/**\n\t * 向右移动。\n\t * @param distance 移动距离。\n\t */\n\tmoveRight(distance: number): void {\n\t\tthis._tempVector3.y = this._tempVector3.z = 0;\n\t\tthis._tempVector3.x = distance;\n\t\tthis.camera.transform.translate(this._tempVector3);\n\t}\n\n\t/**\n\t * 向上移动。\n\t * @param distance 移动距离。\n\t */\n\tmoveVertical(distance: number): void {\n\t\tthis._tempVector3.x = this._tempVector3.z = 0;\n\t\tthis._tempVector3.y = distance;\n\t\tthis.camera.transform.translate(this._tempVector3, false);\n\t}\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: CharacterController Jump Implementation\nDESCRIPTION: This TypeScript code snippet shows how to implement character jumping using the `jump()` method of the CharacterController. The code initializes the CharacterController, defines a jump vector, and applies the jump on a key press (SPACE).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/physics3D/CharacterController/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n\t/** 跳跃的向量，Y轴正方向，高度5 */\n    private jumpVector: Laya.Vector3 = new Laya.Vector3(0, 5, 0);\n\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n        //设置出生点位置\n        this.characterController.position = new Laya.Vector3(0, 0, 0);\n    }\n    \n    onKeyDown(evt: Laya.Event): void {\n        switch (evt.keyCode) {\n            case Laya.Keyboard.SPACE: //按键盘空格时\n                this.characterController.jump(this.jumpVector); // 跳跃\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Handlers in LayaAir\nDESCRIPTION: Demonstrates how to handle keyboard events in LayaAir. Includes methods for keydown, keyup, and keypress events that can be used in custom components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//键盘按下时执行\nonKeyDown(evt: Laya.Event): void {\n}\n\n//键盘产生一个字符时执行\nonKeyPress(evt: Laya.Event): void {\n}\n\n//键盘抬起时执行\nonKeyUp(evt: Laya.Event): void {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Properties for Advanced Effects in LayaAir (TypeScript)\nDESCRIPTION: This script expands the List setup by enabling advanced features such as vertical scrolling, hiding the scrollbar skin, and adding elastic (rubber band) effects. In the 'onEnable' method, the List's scrollType, vScrollBarSkin, elasticEnabled, scrollBar.elasticBackTime, and scrollBar.elasticDistance are adjusted, providing a more interactive user experience. Dependencies include LayaAir's List component and decorator infrastructure. The script expects that the List property is set correctly and item templates adhere to the layout. This approach enhances scrolling and elasticity but requires that elastic options are supported and that the scrollbar exists on the List component.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/List/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n\n    @property({ type: Laya.List })\n    list: Laya.List\n\n    constructor() {\n        super();\n    }\n\n    // 组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        // 给List对象赋值\n        var data: Array<any> = [];\n        for (var m: number = 0; m < 20; m++) {\n            data.push({ m_label: \"No.\" + m });\n        }\n        this.list.array = data;\n\n        // 设置List属性效果\n        this.list.scrollType = Laya.ScrollType.Vertical;//设置列表使用垂直滚动\n        this.list.vScrollBarSkin = \"\";//隐藏列表的滚动条皮肤\n        this.list.elasticEnabled = true;//设置橡皮筋为ture\n        this.list.scrollBar.elasticBackTime = 200;//设置橡皮筋回弹时间。单位为毫秒\n        this.list.scrollBar.elasticDistance = 50;//设置橡皮筋极限距离\n        // this.list.scrollBar.autoHide = true;///不滚动时隐藏列表的滚动条皮肤（有滚动条皮肤时设置）\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading and Switching 3D Model Animations Programmatically in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to dynamically load a 3D model prefab with animations into a LayaAir Scene3D at runtime. It shows how to obtain the Animator component from the loaded model, listen for mouse click events to toggle between \"idle\" and \"run\" animation states, and play the corresponding animation. Dependencies include LayaAir engine, a prefab exported as girl.lh, and proper AnimatorController setup. The class expects an existing scene3D and assumes that both \"idle\" and \"run\" animations are available in the Animator. The primary input is mouse clicks, triggering the animation to switch; expected output is the model playing the selected animation. This snippet requires the LayaAir engine context and proper model/animation assets in the Assets folder.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/useModel/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MainBase } from \"./Main.generated\";\nimport KeyBoardManager = Laya.InputManager;\nimport Keyboard = Laya.Keyboard;\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends MainBase {\n\n    private _animator: Laya.Animator;\n    private _isRun: boolean;\n    onAwake() {\n        console.log(\"Game start\");\n        //加载指定的模型预制体，并添加到Scene3D场景内\n        Laya.loader.load(\"girl/girl.lh\").then(res => {\n            let girl : Laya.Sprite3D = res.create();\n            this.scene3D.addChild(girl); \n            //获得Animator \n            this._animator = girl.getComponent<Laya.Animator>(Laya.Animator);\n        });      \n        this.on( Laya.Event.MOUSE_DOWN, this, this.switchAni );\n    }\n\n    switchAni(): void {\n        if (this._isRun) {\n        \t//播放对应的动画\n            this._animator.play(\"idle\");                \n        } else {\n\t\t\tthis._animator.play(\"run\");\n        }  \n        this._isRun = !this._isRun;\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Loading SVG as Texture in LayaAir Sprite Using TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use a data URI representing an SVG image as a texture source in a LayaAir Sprite. The SVG content includes styled text with shadows defined via CSS inside a foreignObject. The data URI string is passed directly to the Laya.Sprite's loadImage method, which asynchronously loads and decodes the SVG to render as a sprite on the LayaAir stage. Dependencies include the LayaAir engine environment properly initialized elsewhere. Input is the SVG data encoded as a data URI string, and output is the visual representation within the LayaAir rendering canvas. This method leverages LayaAir's built-in support for loading SVG and base64 images as sprite textures, facilitating dynamic scalable vector graphics without network requests.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar data: string = \"data:image/svg+xml,\" + '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\">' +\n    '<foreignObject width=\"100%\" height=\"100%\">' +\n    '<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"font-size:40px\">' +\n    '<em>I</em> like ' +\n    '<span style=\"color:white; text-shadow: 0px 1px 0px #999, 0px 2px 0px #888, 0px 3px 0px #777, 0px 4px 0px #666, 0px 5px 0px #555, 0px 6px 0px #444, 0px 7px 0px #333, 0px 8px 7px #001135;\">' +\n    'cheese</span>' +\n    '</div>' +\n    '</foreignObject>' +\n    '</svg>';\nvar sp: Laya.Sprite = new Laya.Sprite();\nsp.loadImage(data, 0, 0, 200, 200);\nLaya.stage.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Setting Animator Bool Parameter in TypeScript\nDESCRIPTION: Sets the value of a boolean parameter named \"Bool\" on a Laya.Animator component to `true`. This is used to satisfy a condition within the Animator Controller for triggering a state transition. Assumes `this.animator` references a valid Laya.Animator instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//通过设置“Bool”参数的值，来满足切换状态的条件\nthis.animator.setParamsBool( \"Bool\" , true );\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Executed Scripts in LayaAirIDE CLI - Shell\nDESCRIPTION: This shell command shows how to execute a script method with arguments via the --script-args parameter. Double quotes and escaping are used to encapsulate argument strings containing spaces or special characters. This feature allows parameterized script execution, where the arguments will be passed to the script method. Ensure your script is implemented to accept and process these arguments appropriately.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/commandLine/readme.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n> LayaAirIDE --project=/path/to/project --script=Script.Speak --script-args=\"say \\\"hello world\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Object Pool Class in LayaAir\nDESCRIPTION: This code defines a custom Pool class for object pooling. It provides methods for getting an item by class, recovering an item, and clearing groups or the entire pool. This helps in reusing objects and avoiding frequent instantiation and garbage collection, improving overall performance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/particleEditor3D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Pool {\n    \n        private _poolDic:{[key: string]: any;} = {};\n\t    private InPoolSign: string = \"__InPool\";\n\n        constructor() \n        {\n        }\n\n        private static _instance: Pool = new Pool();\n        public static getInstance() {\n            return this._instance;\n        }\n\n\t\t//通过名字找到对应的对象池\n        getPoolBySign(sign:string): any\n        {\n            return this._poolDic[sign] || (this._poolDic[sign] = []);\n        };\n\n\t\t//回收\n        recover(sign:string, item:any): void\n        {\n            item[\"__InPool\"] = true;\n        };\n\n\t\t//通过名字获得一个对象，如果对象池内没有对象，则创建一个\n\t    getItemByClass(sign:string, cls:any): any\n        {\n            var ret = null;\n            var pool = this.getPoolBySign(sign);\n            for (var i = 0, len = pool.length; i < len; i++)\n            {\n                var item = pool[i];\n                if (item[\"__InPool\"] && item instanceof cls)\n                {\n                    ret = item;\n                    break;\n                }\n            } \n            if (!ret)\n            {\n                ret = new cls();\n                pool.push(ret);         \n            } \n            ret[\"__InPool\"] = false;\n            return ret;\n        };\n\n\t\t//通过名字，清理一组对象池\n        ClearGroup(head_sign:string, caller:any, func:Function): void\n        {\n            for (var key in this._poolDic)\n            {\n                if (key.indexOf(head_sign) == 0)\n                {\n                    var pool = this._poolDic[key];\n                    if (func)\n                    {\n                        for (var i = 0, len = pool.length; i < len; i++)\n                        {\n                            var item = pool[i];\n                            func.call(caller, item);\n                        }\n                    }\n                    pool.length = 0;\n                }\n            }\n        };\n\n\t\t//清理所有的对象池\n        ClearAll(caller:any, func:Function): void\n        {\n            for (var key in this._poolDic)\n            {\n                var pool = this._poolDic[key];\n                if (func)\n                {\n                    for (var i = 0, len = pool.length; i < len; i++)\n                    {\n                        var item = pool[i];\n                        func.call(caller, item);\n                    }\n                }\n                pool.length = 0;\n            }\n        };\n}\n\n```\n\n----------------------------------------\n\nTITLE: 利用crossFade实现动画平滑过渡\nDESCRIPTION: 调用crossFade()方法，在当前动画与目标动画之间实现平滑过渡，参数包括目标动画名和过渡持续时间，适合需要自然连接动画的场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.crossFade(\"Run\", 0.3);\n```\n\n----------------------------------------\n\nTITLE: Creating and Styling LayaAir Label Components Dynamically with TypeScript\nDESCRIPTION: This TypeScript snippet shows how to dynamically create multiple LayaAir Label instances at runtime within a custom script component attached to a Scene2D. It defines a reusable private method to create and style Label objects with configurable font color and stroke color. Each label is positioned on the stage and styled with font name, size, color, stroke width, and stroke color. The labels are added to the scene graph via the script's owner property. This example requires knowledge of LayaAir's Script and Label classes and assumes the script runs within the Laya game framework environment. It demonstrates flexible programmatic label creation for UI scenarios where labels are shown on demand.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Label/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\nconst Label = Laya.Label;\n@regClass()\nexport class UI_Label extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.setup();        \n\t}\n\n\tprivate setup(): void {\n\t\tthis.createLabel(\"#FFFFFF\", null).pos(30, 50);\n\t\tthis.createLabel(\"#00FFFF\", null).pos(290, 50);\n\t\tthis.createLabel(\"#FFFF00\", \"#FFFFFF\").pos(30, 100);\n\t\tthis.createLabel(\"#000000\", \"#FFFFFF\").pos(290, 100);\n\t\tthis.createLabel(\"#FFFFFF\", \"#00FFFF\").pos(30, 150);\n\t\tthis.createLabel(\"#0080FF\", \"#00FFFF\").pos(290, 150);\n\t}\n\n\tprivate createLabel(color: string, strokeColor: string): Laya.Label {\n\t\tconst STROKE_WIDTH: number = 4;\n\n\t\tvar label: Laya.Label = new Label();\n\t\tlabel.font = \"Microsoft YaHei\";\n\t\tlabel.text = \"SAMPLE DEMO\";\n\t\tlabel.fontSize = 30;\n\t\tlabel.color = color;\n\n\t\tif (strokeColor) {\n\t\t\tlabel.stroke = STROKE_WIDTH;\n\t\t\tlabel.strokeColor = strokeColor;\n\t\t}\n\n\t\tthis.owner.addChild(label);\n\n\t\treturn label;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: PBR Shader Attributes\nDESCRIPTION: This section lists the properties used within PBR shader, including NormalWS, alphaTest, AlbedoColor, Metallica, Smoothness, Occlusion, Emission, Anisotropy, and Alpha. These parameters control the visual properties of the material, such as surface color, metalness, and transparency.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Rotating a 3D Node Continuously in LayaAir Using TypeScript\nDESCRIPTION: Demonstrates accessing a 3D Sprite3D node as a property and applying a continuous incremental rotation each frame using Laya.timer.frameLoop. Defines a rotation vector and uses transform.rotate in the onStart method for animation. Requires that a 3D node be assigned in the editor to the 'cube' property. This snippet performs smooth rotation of the cube in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite3D})\n    public cube: Laya.Sprite3D;\n\n    private rotation: Laya.Vector3 = new Laya.Vector3(0, 0.01, 0);\n\n    onStart() {\n        Laya.timer.frameLoop(1, this, ()=> {\n            this.cube.transform.rotate(this.rotation, false);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reducing Redundant Updates with callLater in LayaAir - TypeScript\nDESCRIPTION: Refactors the property setters to call Laya.timer.callLater for the update, ensuring that update is only invoked once per run loop. Requires Laya.timer.callLater utility. Ideal for scenarios where multiple properties change consecutively and only a final update is needed for rendering/UI.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.timer.callLater(this, update);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This snippet shows the command to install a package using npm. It's a standard practice for including third-party libraries in a project.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/importJsLibrary/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install xxx --save\n```\n\n----------------------------------------\n\nTITLE: Loading a Single Resource in LayaAir Engine using TypeScript\nDESCRIPTION: Basic example of loading a single resource with the Laya.loader.load() method. This demonstrates how to load and display texture resources from both local and remote URLs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Loader/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        this.loadTexture(\"resources/image/monkey2.png\", 500);//需要在resources/image放入相应的资源\n        this.loadTexture(\"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\");\n    }\n\n    /**加载并显示图片 */\n    loadTexture(url: string, x: number = 0, y: number = 0): void {\n        Laya.loader.load(url).then((res: Laya.Texture) => {\n            let img = new Laya.Image();\n            img.texture = res;\n            // img.skin = url; //ui组件直接设置skin也可以\n            img.pos(x, y);\n            this.owner.addChild(img);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Script Class in LayaAir TypeScript\nDESCRIPTION: Demonstrates how to register a custom script class (`Main`) that extends `Laya.Script` using the `@regClass()` decorator. This registration allows the script to be recognized and used within the LayaAir editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/Script/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@regClass()\nexport class Main extends Laya.Script\n```\n\n----------------------------------------\n\nTITLE: Get/Set Active State - TypeScript\nDESCRIPTION: Gets or sets the active state of the node.  The `get active()` method returns whether the node is currently active.  The `set active(value: boolean)` method sets the active state of the node. Requires a node instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 获取自身是否激活。\n     *   @return\t自身是否激活。\n     */\n    get active(): boolean\n    \n    /**\n     * 设置是否激活。\n     * @param\tvalue 是否激活。\n     */\n    set active(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic and Complex TypeScript Types with @property Decorator in TypeScript\nDESCRIPTION: This comprehensive snippet demonstrates how to declare component properties of various TypeScript types with the @property decorator. Supported types include numeric, string, boolean, integer variants, multiline text, any type, typed arrays, arrays, enums, and dictionary-like records. It shows the usage of both shorthand and detailed type annotations, including how to expose enums as dropdowns for selection in the IDE. Dependencies include regClass and property imports from Laya. The example highlights the syntax and variety of type declarations supporting editor integration.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n//枚举\nenum TestEnum {\n    A,\n    B,\n    C\n};\n//字符串形式的枚举\nenum Direction {\n    Up = 'UP',\n    Down = 'DOWN',\n    Left = 'LEFT',\n    Right = 'RIGHT'\n};\n\n@regClass()\nexport class Script extends Laya.Script {\n\n    @property(Number)//数字类型，等价于{ type : \"number\" }\n    num : number;\n\n    @property(String)//单行字符串文本类型，等价于 { type: \"string\"}\n\tstr : string;\n\n    @property(Boolean)//布尔值类型，等价于 { type: \"boolean\"}\n\tbool : boolean;\n\n\t@property(\"int\")//整数类型，等价于 { type: Number, fractionDigits: 0 }\n\tint : number; \n\n    @property(\"uint\") //正整数类型，等价于 { type: Number, fractionDigits: 0 , min: 0 }\n    uint : number; \n\n    @property(\"text\")//多行字符串文本类型，等价于 { type: String, multiline: true }\n    text : string; \n\n    @property(\"any\")//any类型只会被序列化，不能显示和编辑。\n\ta : any; \n    \n    @property(Int8Array)//类型化数组类型,除了Int8Array，还支持Uint8Array、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array，使用方式都类似\n    i8a: Int8Array;\n        \n    @property({ type: [\"number\"] })//数组类型，用中括号包含数组元素类型\n    arr1: number[];\n\n    @property({ type: [\"string\"] })//数组类型，用中括号包含数组元素类型\n    arr2: string[];\n    \n    //普通的枚举类型（可以类型简写），会显示为下拉框供用户选择\n    @property(TestEnum)\n    enum: TestEnum;\n    \n\t//字符串形式的枚举，不能使用类型简写，如：@property(Direction)。必须下面带type参数指定的标准写法\n    @property({ type: Direction })\n    direc: Direction;\n    \n    //字典类型，需要用数组参数来设置类型，下面示例中的Record类型需要放到字符串内作为数组参数的第一个元素，数组参数的第二个元素是字典输入值的类型，用于决定属性面板的输入控件类型\n    @property({ type: [\"Record\", Number] })\n    dict: Record<string, number>; \n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining A* Pathfinding and Scene Logic with LayaAir 3D - TypeScript\nDESCRIPTION: Implements the AStarFindPath class for 3D pathfinding in the LayaAir framework. Demonstrates resource preloading, grid and world position mapping, scene and character setup, event handling for user interaction, and path recalculation using an imported A* algorithm. Dependencies: LayaAir 3.x, external 'astar' JavaScript implementation, image-based A* map. Inputs include texture assets and user mouse events, outputs are character movement along computed paths. Constraints: expects specific resource paths, assumes matching scene/model asset structure, and requires proper initial engine setup.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/Astar/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Based upon https://github.com/bgrins/javascript-astar\n */\nexport class AStarFindPath {\n\n    private terrainSprite: MeshTerrainSprite3D;\n    private layaMonkey: Sprite3D;\n    private path: Vector3[];\n    private _everyPath: any[];\n    private _position: Vector3 = new Vector3(0, 0, 0);\n    private _upVector3: Vector3 = new Vector3(0, 1, 0);\n    private _tarPosition: Vector3 = new Vector3(0, 0, 0);\n    private _finalPosition: Vector3 = new Vector3(0, 0, 0);\n    private _rotation: Vector3 = new Vector3(-45, 180, 0);\n    private _rotation2: Vector3 = new Vector3(0, 180, 0);\n    private index: number = 0;\n    private curPathIndex: number = 0;\n    private nextPathIndex: number = 1;\n    private moveSprite3D: Sprite3D;\n    private pointCount: number = 10;\n    private scene: Scene3D;\n\n    //寻路使用的变量\n    private aStarMap: any;\n    private graph: any;\n    private opts: any;\n    private resPath: Array<Vector2> = new Array<Vector2>();\n    private resPathLength: number;\n\n    private startPoint: Vector2;\n    private endPoint: Vector2;\n    constructor() {\n        //初始化引擎\n        Laya3D.init(0, 0);\n        Laya.stage.scaleMode = Stage.SCALE_FULL;\n        Laya.stage.screenMode = Stage.SCREEN_NONE;\n        //显示性能面板\n        Stat.show();\n\n        this.path = [];\n        this.startPoint = new Vector2();\n        this.endPoint = new Vector2();\n        for (var i: number = 0; i < 20; ++i) {\n            var newVec: Vector2 = new Vector2();\n            this.resPath.push(newVec);\n        }\n\n        //预加载所有资源\n        var resource: ILoadURL[] = [{ url: \"res/threeDimen/scene/TerrainScene/XunLongShi.ls\", priority: 1 },\n        { url: \"res/threeDimen/skinModel/LayaMonkey/LayaMonkey.lh\", priority: 1 },\n        { url: \"res/threeDimen/scene/TerrainScene/Assets/HeightMap.png\", priority: 1, constructParams: [1024, 1024, 1, false, true] },\n        { url: \"res/threeDimen/scene/TerrainScene/Assets/AStarMap.png\", priority: 1, constructParams: [64, 64, 1, false, true] }\n        ];\n\n        Laya.loader.load(resource, Handler.create(this, this.onLoadFinish));\n    }\n\n    private onLoadFinish(): void {\n        //初始化3D场景\n        this.scene = (<Scene3D>Laya.stage.addChild(Loader.createNodes(\"res/threeDimen/scene/TerrainScene/XunLongShi.ls\")));\n\n        //根据场景中方块生成路径点\n        this.initPath(this.scene);\n\n        //获取可行走区域模型\n        var meshSprite3D: MeshSprite3D = (<MeshSprite3D>this.scene.getChildByName('Scenes').getChildByName('HeightMap'));\n        //使可行走区域模型隐藏\n        meshSprite3D.active = false;\n        var heightMap = Loader.getTexture2D(\"res/threeDimen/scene/TerrainScene/Assets/HeightMap.png\");\n        //初始化MeshTerrainSprite3D\n        this.terrainSprite = MeshTerrainSprite3D.createFromMeshAndHeightMap((<Mesh>meshSprite3D.meshFilter.sharedMesh), heightMap, 6.574996471405029, 10.000000953674316);\n        //更新terrainSprite世界矩阵(为可行走区域世界矩阵)\n        this.terrainSprite.transform.worldMatrix = meshSprite3D.transform.worldMatrix;\n\n        //读取墙壁的数据\n        this.aStarMap = Loader.getTexture2D(\"res/threeDimen/scene/TerrainScene/Assets/AStarMap.png\");\n\n        //使用astar组织数据\n        var aStarArr = this.createGridFromAStarMap(this.aStarMap);\n        this.graph = new (window as any).Graph(aStarArr);\n        this.opts = [];\n        this.opts.closest = true;\n        this.opts.heuristic = (window as any).astar.heuristics.diagonal;\n\n        //初始化移动单元\n        this.moveSprite3D = (<Sprite3D>this.scene.addChild(new Sprite3D()));\n        this.moveSprite3D.transform.position = this.path[0];\n\n\n        //初始化小猴子\n        this.layaMonkey = (<Sprite3D>this.moveSprite3D.addChild(Loader.createNodes(\"res/threeDimen/skinModel/LayaMonkey/LayaMonkey.lh\")));\n\n        var tmpLocalScale: Vector3 = this.layaMonkey.transform.localScale;\n        tmpLocalScale.setValue(0.5, 0.5, 0.5);\n        var aniSprite3d: Sprite3D = (<Sprite3D>this.layaMonkey.getChildAt(0));\n\n        //获取动画组件\n        var animator: Animator = (<Animator>aniSprite3d.getComponent(Animator));\n        //创建动作状态\n        var state: AnimatorState = new AnimatorState();\n        //动作名称\n        state.name = \"run\";\n        //动作播放起始时间\n        state.clipStart = 40 / 150;\n        //动作播放结束时间\n        state.clipEnd = 70 / 150;\n        //设置动作\n        state.clip = animator.getDefaultState().clip;\n        //为动画组件添加一个动作状态\n        animator.getControllerLayer(0).addState(state);\n        //播放动画\n        animator.play(\"run\");\n\n        //创建BlinnPhong材质\n        var mat: BlinnPhongMaterial = (<BlinnPhongMaterial>((<SkinnedMeshSprite3D>this.layaMonkey.getChildAt(0).getChildAt(0))).skinnedMeshRenderer.sharedMaterial);\n        //设置反照率强度\n        mat.albedoIntensity = 8;\n        //设置猴子精灵的位置\n        this.layaMonkey.transform.position.cloneTo(this._finalPosition);\n\n        //初始化相机\n        var moveCamera: Camera = (<Camera>this.moveSprite3D.addChild(new Camera()));\n        var tmpLocalPosition: Vector3 = moveCamera.transform.localPosition;\n        tmpLocalPosition.setValue(-1.912066, 10.07926, -10.11014);\n        moveCamera.transform.localPosition = tmpLocalPosition;\n        moveCamera.transform.rotate(this._rotation, true, false);\n        moveCamera.addComponent(CameraMoveScript);\n\n        //设置鼠标弹起事件响应\n        Laya.stage.on(Event.MOUSE_UP, this, function (): void {\n            this.index = 0;\n            //获取每次生成路径\n            this.getGridIndex(this.path[this.curPathIndex % this.pointCount].x, this.path[this.curPathIndex++ % this.pointCount].z, this.startPoint);\n            this.getGridIndex(this.path[this.nextPathIndex % this.pointCount].x, this.path[this.nextPathIndex++ % this.pointCount].z, this.endPoint);\n            var start = this.graph.grid[this.startPoint.x][this.startPoint.y];\n            var end = this.graph.grid[this.endPoint.x][this.endPoint.y];\n\n            this._everyPath = (window as any).astar.search(this.graph, start, end, {\n                closest: this.opts.closest\n            });\n            if (this._everyPath && this._everyPath.length > 0) {\n                this.getRealPosition(start, this._everyPath);\n            }\n        });\n        //开启定时重复执行\n        Laya.timer.loop(40, this, this.loopfun);\n    }\n\n    private loopfun(): void {\n        if (this.resPath && this.index < this.resPathLength) {\n            //AStar寻路位置\n            this._position.x = this.resPath[this.index].x;\n            this._position.z = this.resPath[this.index++].y;\n            //HeightMap获取高度数据\n            this._position.y = this.terrainSprite.getHeight(this._position.x, this._position.z);\n            if (isNaN(this._position.y)) {\n                this._position.y = this.moveSprite3D.transform.position.y;\n            }\n\n            this._tarPosition.x = this._position.x;\n            this._tarPosition.z = this._position.z;\n            this._tarPosition.y = this.moveSprite3D.transform.position.y;\n\n            //调整方向\n            this.layaMonkey.transform.lookAt(this._tarPosition, this._upVector3, false);\n            //因为资源规格,这里需要旋转180度\n            this.layaMonkey.transform.rotate(this._rotation2, false, false);\n            //调整位置\n            Tween.to(this._finalPosition, { x: this._position.x, y: this._position.y, z: this._position.z }, 40);\n            this.moveSprite3D.transform.position = this._finalPosition;\n        }\n    }\n\n    private initPath(scene: Scene3D): void {\n        for (var i: number = 0; i < this.pointCount; i++) {\n            var str: string = \"path\" + i;\n            this.path.push(((<MeshSprite3D>scene.getChildByName('Scenes').getChildByName('Area').getChildByName(str))).transform.localPosition);\n        }\n    }\n\n    /**\n    * 得到整数的网格索引\n    */\n    private getGridIndex(x: number, z: number, out: Vector2) {\n        var minX = this.terrainSprite.minX;\n        var minZ = this.terrainSprite.minZ;\n        var cellX = this.terrainSprite.width / this.aStarMap.width;\n        var cellZ = this.terrainSprite.depth / this.aStarMap.height;\n        var gridX = Math.floor((x - minX) / cellX);\n        var gridZ = Math.floor((z - minZ) / cellZ);\n        var boundWidth = this.aStarMap.width - 1;\n        var boundHeight = this.aStarMap.height - 1;\n        (gridX > boundWidth) && (gridX = boundWidth);\n        (gridZ > boundHeight) && (gridZ = boundHeight);\n        (gridX < 0) && (gridX = 0);\n        (gridZ < 0) && (gridZ = 0);\n        out.x = gridX;\n        out.y = gridZ;\n    }\n\n    /**\n     * 得到世界坐标系下的真实坐标\n     */\n    private getRealPosition(start, path): any {\n        this.resPathLength = path.length;\n        var minX = this.terrainSprite.minX;\n        var minZ = this.terrainSprite.minZ;\n        var cellX = this.terrainSprite.width / this.aStarMap.width;\n        var cellZ = this.terrainSprite.depth / this.aStarMap.height;\n        var halfCellX = cellX / 2;\n        var halfCellZ = cellZ / 2;\n\n        this.resPath[0].x = start.x * cellX + halfCellX + minX;\n        this.resPath[0].y = start.y * cellZ + halfCellZ + minZ;\n\n        if (this.resPath.length < path.length) {\n            var diff: number = path.length - this.resPath.length;\n            for (var j: number = 0; j < diff; ++j) {\n                var newPoint: Vector2 = new Vector2();\n                this.resPath.push(newPoint);\n            }\n\n        }\n\n        for (var i = 1; i < path.length; i++) {\n            var gridPos = path[i];\n            this.resPath[i].x = gridPos.x * cellX + halfCellX + minX;\n            this.resPath[i].y = gridPos.y * cellZ + halfCellZ + minZ;\n        }\n        return 0;\n    }\n\n    /**\n     * 通过图片数据计算得到AStart网格\n     */\n    private createGridFromAStarMap(texture): any {\n        var textureWidth = texture.width;\n        var textureHeight = texture.height;\n        var pixelsInfo = texture.getPixels();\n        var aStarArr = [];\n        var index = 0;\n        for (var w = 0; w < textureWidth; w++) {\n            var colaStarArr = aStarArr[w] = [];\n            for (var h = 0; h < textureHeight; h++) {\n                var r = pixelsInfo[index++];\n                var g = pixelsInfo[index++];\n                var b = pixelsInfo[index++];\n\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image using Sprite.loadImage in TypeScript\nDESCRIPTION: Demonstrates creating a Sprite, loading an image using the `loadImage` method with a specified URL, positioning it in the center of the stage, and adding it to the stage for rendering.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\n// 加载并显示一个图片，居中显示\nsprite.loadImage(\"atlas/comp/image.png\", null);\nsprite.pos(Laya.stage.width >> 1, Laya.stage.height >> 1);\n// 添加到舞台\nLaya.stage.addChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Loading JSON with Laya.loader.fetch in LayaAir with TypeScript\nDESCRIPTION: This TypeScript code shows how to load a JSON file using `Laya.loader.fetch`. The loaded JSON data is directly available without needing to access the `data` property. However, resources loaded with `fetch` are not cached.  The code extracts data and assigns it to a `bagList` component, showing usage of fetched JSON data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nonEnable(): void {\n    const jsonPath: string = \"json/bagList.json\";\n    //fetch取到的是原始数据，但没有缓存，无法用getRes获取\n    Laya.loader.fetch(jsonPath, \"json\").then((_json) => {  \n        if (_json.bagList && _json.bagList.length > 0) {\n            //把json数据传递给list组件的数据源属性array\n            this.bagList.array = _json.bagList;\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating Object from Pool in LayaAir\nDESCRIPTION: Method to get an object from a pool, creating a new one if none exists. Provides a creation function that's called when the pool is empty, ensuring objects are always available.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * <p>根据传入的对象类型标识字符，获取对象池中此类型标识的一个对象实例。</p>\n     * <p>当对象池中无此类型标识的对象时，则使用传入的创建此类型对象的函数，新建一个对象返回。</p>\n     * @param sign 对象类型标识字符。\n     * @param createFun 用于创建该类型对象的方法。\n     * @param caller this对象\n     * @return 此类型标识的一个对象。\n     */\n    static getItemByCreateFun(sign: string, createFun: Function, caller: any = null): any {\n        var pool: any[] = Pool.getPoolBySign(sign);\n        var rst: any = pool.length ? pool.pop() : createFun.call(caller);\n        rst[Pool.POOLSIGN] = false;\n        return rst;\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Assets Function in TypeScript\nDESCRIPTION: This snippet shows how to load multiple assets asynchronously using the `loadAssetsAsync` function.  It accepts a key or an array of keys and loading options. The `options` object allows for controlling how the assets are loaded, such as using different merge modes (UseFirst, Union, Intersection). The function returns a Promise that resolves to a `LoadResult` object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 加载资源\n * @param key 用来筛选资源的关键字\n * @param options {LoadAssetsOptions} 加载资源的选项\n * @returns {Promise<LoadResult>}\n */\nstatic async loadAssetsAsync(key: string | string[], options?: LoadAssetsOptions): Promise<LoadResult> ;\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Example in TypeScript\nDESCRIPTION: This code shows how to use the `loadSceneAsync` method to load a scene named `SceneForLoad.ls`. The method takes the scene's key as a string.  The loaded scene's path is then used to open the scene via `Laya.Scene.open()`. This snippet depends on the Addressables plugin and the Laya framework. The output is the loaded scene visible in the application.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.loadSceneAsync(\"resources/scene/SceneForLoad.ls\").then((res) => {\n        console.log(res);\n        Laya.Scene.open(res.data);\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using lookAt() Method to Focus Camera on Scene Targets (TypeScript)\nDESCRIPTION: Provides a method to orient the camera towards specific scene objects based on user interaction. It employs the lookAt() function to smoothly change camera focus among multiple targets using mouse clicks, enhancing scene navigation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Camera/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate index: number = 0;\n// Mouse event handler to cycle camera focus among targets\nonMouseDown(e: Laya.Event) \n{\n     this.index++;\n     if (this.index % 3 === 1) {\n         this.camera.transform.lookAt(this.target1.transform.position, this._up);\n     } else if (this.index % 3 === 2) {\n         this.camera.transform.lookAt(this.target2.transform.position, this._up);\n     } else {\n         this.camera.transform.lookAt(this.target3.transform.position, this._up);\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Object by Class in LayaAir\nDESCRIPTION: Method to get or create an object based on its class. Creates a new instance if the pool is empty, providing type safety through generics.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * <p>根据传入的对象类型标识字符，获取对象池中此类型标识的一个对象实例。</p>\n     * <p>当对象池中无此类型标识的对象时，则根据传入的类型，创建一个新的对象返回。</p>\n     * @param sign 对象类型标识字符。\n     * @param cls 用于创建该类型对象的类。\n     * @return 此类型标识的一个对象。\n     */\n    static getItemByClass<T>(sign: string, cls: new () => T): T {\n        if (!Pool._poolDic[sign]) return new cls();\n\n        var pool = Pool.getPoolBySign(sign);\n        if (pool.length) {\n            var rst = pool.pop();\n            rst[Pool.POOLSIGN] = false;\n        } else {\n            rst = new cls();\n        }\n        return rst;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using @property() with Getter and Setter in TypeScript\nDESCRIPTION: This code shows how to use the `@property()` decorator with getter and setter methods for controlling property access in LayaAir TypeScript. When both a getter and setter are present, the property is read-write. If only a getter exists, the property becomes read-only within the IDE and can only be displayed but not edited.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nclass Animal {\n    private _weight: number = 0;\n    \n    @property( { type : Number } )\n    get weight() : number {\n        return this._weight;\n    }\n    \n    set weight(value: number) {\n        this._weight = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response Events in LayaAir HttpRequest with TypeScript\nDESCRIPTION: This comprehensive example defines a LayaAir Script component showing how to initialize UI elements, send an HTTP GET request, and handle key events including progress, completion, and error. It uses HttpRequest's event methods to track download progress, update UI logs, and manage error states. This snippet exemplifies best practices for asynchronous event-driven HTTP communication in a gaming context.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/HTTP/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Event = Laya.Event;\nimport HttpRequest = Laya.HttpRequest;\nconst { regClass } = Laya;\n@regClass()\nexport class Network_GET extends Laya.Script {\n\tprivate hr: HttpRequest;\n\tprivate logger: Laya.TextArea;\n\tprivate text: Laya.Label = new Laya.Label();\n\n\tonAwake(): void {\n\t\tthis.initUI();\n\t\tthis.connect();\n\t}\n\t/**\n\t * 初始化UI\n\t */\n\tprivate initUI(): void {\n\t\tthis.showLogger();\n\t\tthis.text.text = \"请查看源码和调试信息，了解如何使用\";\n\t\tthis.text.color = \"#FFFFFF\";\n\t\tthis.text.font = \"Impact\";\n\t\tthis.text.fontSize = 25;\n\t\tthis.text.width = 800;\n\t\tthis.text.anchorX = 0.5;\n\t\tthis.text.align = \"center\";\n\t\tthis.text.y = 20;\n\t\tthis.text.centerX = 0;\n\t\tthis.owner.addChild(this.text);\n\t}\n\n\t/**\n\t * 发起HTTP连接请求\n\t */\n\tprivate connect(): void {\n\t\t//创建HttpRequest对象\n\t\tthis.hr = new HttpRequest();\n\t\t//请求响应的进度改变时触发\n\t\tthis.hr.on(Event.PROGRESS, this, this.onHttpRequestProgress);\n        //请求完成后触发，表示响应数据已经完全接收。\n\t\tthis.hr.once(Event.COMPLETE, this, this.onHttpRequestComplete);\n        //请求出错时触发，常用于网络故障等异常情况。\n\t\tthis.hr.once(Event.ERROR, this, this.onHttpRequestError);\n\t\t//示例中的URL为临时测试的地址，不保障长期有效，请自行替换为实际有效的URL地址。\n\t\tthis.hr.send('https://ldc-1251285021.cos.ap-shanghai.myqcloud.com/engine/3.2/libs/laya.box2D.js', null, 'get', 'text');\n\t}\n\n\t/**\n\t * 显示HTTP响应日志\n\t */\n\tprivate showLogger(): void {\n\t\tthis.logger = new Laya.TextArea();\n\t\tthis.logger.scrollType = 2;\n\t\tthis.logger.vScrollBarSkin = \"resources/res/ui/vscroll.png\";\n\t\tthis.logger.fontSize = 18;\n\t\tthis.logger.color = \"#FFFFFF\";\n\t\tthis.logger.align = 'center';\n\t\tthis.logger.valign = 'middle';\n\t\tthis.logger.left = this.logger.right = this.logger.bottom = 10;\n\t\tthis.logger.top = 60;\n\t\tthis.logger.text = \"等待响应...\\n\";\n\t\tthis.owner.addChild(this.logger);\n\t}\n\n\t/**\n\t * 请求出错时触发的回调\n\t * @param e 事件对象\n\t */\n\tprivate onHttpRequestError(e: any = null): void {\n\t\tconsole.error(\"请求失败:\", e);\n\t\tthis.logger.text = \"请求失败，请重试。\\n\";\n\t}\n\n\t/**\n\t * 请求进度改变触发的回调\n\t * @param e 事件对象\n\t */\n\tprivate onHttpRequestProgress(e: any = null): void {\n\t\t//进度的百分比\n\t\tconst progress = e * 100;\n\t\tconsole.log(\"请求进度:\", progress.toFixed(2) + \"%\");\n\t\t// 更新日志显示\n\t\tthis.logger.text = `当前下载进度: ${progress.toFixed(2)}%\\n`;\n\t\t// 加载完成后清除进度事件帧监听\n\t\tif (progress == 100) {\n\t\t\tthis.logger.text = `当前下载进度: 100%\\n`;\n\t\t\tLaya.timer.clear(this, this.onHttpRequestProgress);\n\t\t\tconsole.log(\"加载进度完成，清除进度事件帧听\");\n\t\t}\n\t}\n\t/**\n\t * 请求完成时触发的响应回调\n\t * @param e 事件对象\n\t */\n\tprivate onHttpRequestComplete(e: any = null): void {\n\t\tthis.logger.text += \"收到数据：\" + this.hr.data;\n\t\tconsole.log(\"收到数据：\" + this.hr.data);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Example: Loading Assets Using loadAssetAsync\nDESCRIPTION: This example demonstrates the use of `Addressables.loadAssetAsync` to load a single asset named 'test1'. The `then` function is used to handle the successful loading of the asset, allowing access to the `result` which could be further used.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    onStart(): void {\n        Addressables.loadAssetAsync('test1').then((result: LoadResult) => {\n            console.log(result);\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Methods with Runtime in LayaAir 3.0\nDESCRIPTION: A TypeScript example showing how to create an entry point using Runtime in LayaAir 3.0. This approach uses the auto-generated class (Main_gen) as the base class, which provides direct access to the components declared in the scene editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/entrance/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MainBase } from \"./Main_gen\";\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends MainBase {\n\n    onStart() {\n        console.log(\"Game start\");\n        this.img.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous and Asynchronous Messages in HarmonyOS Using TypeScript\nDESCRIPTION: Implements synchronous and asynchronous message handlers in HarmonyOS in `HandleMessageUtils.ts`. The `handleSyncMessage` method returns a synchronous string response based on the event name. The asynchronous handler `handleAsyncMessage` accepts a callback which it invokes with a response string. The handlers differentiate between \"syncMessage\" and \"asyncMessage\" events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/platform_communication/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n    * 同步事件\n    * @param eventName 事件名称\n    * @param data 数据\n    */\n    static handleSyncMessage(eventName: string, data: string): string {\n        if (eventName == \"syncMessage\") {\n            return \"sync message from platform\";\n        }\n        return \"default sync result\";\n    }\n\n    /**\n    * 异步事件\n    * @param eventName 事件名称\n    * @param data 数据\n    * @param cb callback\n    */\n    static async handleAsyncMessage(eventName: string, data: string, cb: Function): Promise<void> {\n        if (eventName == \"asyncMessage\") {\n            cb(\"async message from platform\");\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring FontClip Instances via Code in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates programmatic creation and configuration of multiple FontClip instances within a LayaAir Scene2D script. It handles resource loading asynchronously before instantiating FontClips with different skins and sheets. The code sets positions, size, sheet content, displayed values, directional layout, and spacing for each FontClip and adds them as children to the scene owner. This approach allows dynamic and conditional usage of FontClip components rather than static scene placement. The snippet depends on LayaAir engine capabilities, including loader and UI modules, and predefined texture atlases.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/FontClip/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_FontClip extends Laya.Script {\n\n    private TestClipNum: string = \"atlas/comp/fontClip_num.png\";\n    private _ClipNum: string = \"atlas/comp/fontClip_num.png\";\n    private _ClipNum1: string = \"atlas/comp/fontClip_num.png\";\n    private TestFontClip: string = \"atlas/comp/fontClip.png\";\n    private _FontClip: string = \"atlas/comp/fontClip.png\";\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        Laya.loader.load([this.TestClipNum, this.TestFontClip, this._ClipNum, this._FontClip, this._ClipNum1]).then( ()=>{\n            this.ShowContent();\n        } );\n    }\n\n    private ShowContent(): void {\n        var clipnum: Laya.FontClip = new Laya.FontClip(this._ClipNum);\n        var fontClip: Laya.FontClip = new Laya.FontClip(this._FontClip);\n        var testFontClip: Laya.FontClip = new Laya.FontClip(this.TestFontClip);\n        var testClipNum: Laya.FontClip = new Laya.FontClip(this.TestClipNum);\n        var clipnum1: Laya.FontClip = new Laya.FontClip(this._ClipNum1);\n\n        clipnum.pos(240, 400);\n        clipnum.size(250, 50);\n        clipnum.sheet = \"0123456789\";\n        clipnum.value = \"114499\";\n        clipnum.spaceY = 10;\n\n        testClipNum.pos(200, 300);\n        testClipNum.sheet = \"0123456789\";\n        testClipNum.value = \"0123456789\";\n\n        clipnum1.pos(150, 100);\n        clipnum1.direction = \"vertical\";\n        clipnum1.sheet = \"0123456789\";\n        clipnum1.value = \"223388\";\n\n        fontClip.pos(240, 200);\n        fontClip.sheet = \"鼠牛虎兔龙蛇马羊 猴鸡狗猪年快乐\";\n        fontClip.value = \"猪年快乐\";\n        fontClip.spaceY = 10;\n\n        testFontClip.pos(200, 100);\n        testFontClip.sheet = \"鼠牛虎兔龙蛇马羊猴鸡狗猪年快乐\";\n        testFontClip.value = \"鼠牛虎兔龙蛇马羊猴鸡狗猪年快乐\";\n        testFontClip.spaceY = 10;\n\n        this.owner.addChild(clipnum);\n        this.owner.addChild(fontClip);\n        this.owner.addChild(testFontClip);\n        this.owner.addChild(testClipNum);\n        this.owner.addChild(clipnum1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ProgressBar via Code (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a ProgressBar component entirely through code in LayaAir using TypeScript. It loads the necessary resources, instantiates the ProgressBar, sets its properties (position, width, sizeGrid, changeHandler), and adds it to the scene. A timer is used to simulate progress updates.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/ProgressBar/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_ProgressBar extends Laya.Script {\n\n    private progressBar: Laya.ProgressBar;\n\n    constructor() {\n        super();\n    }\n\n    onAwake(): void {\n        // 加载进度条资源，图片资源来自“引擎API使用示例”\n        Laya.loader.load([\"resources/res/ui/progressBar.png\", \"resources/res/ui/progressBar$bar.png\"]).then(() => {\n            // 创建进度条\n            this.progressBar = new Laya.ProgressBar(\"resources/res/ui/progressBar.png\");\n            this.progressBar.pos(100, 500);\n            this.progressBar.width = 400;\n            this.progressBar.sizeGrid = \"5,5,5,5\";\n            this.progressBar.changeHandler = new Laya.Handler(this, this.onChange);\n            this.owner.addChild(this.progressBar);\n            Laya.timer.loop(100, this, this.changeValue);\n        });\n    }\n\n    // 模拟进度条加载\n    private changeValue(): void {\n        if (this.progressBar.value >= 1)\n            this.progressBar.value = 0;\n        this.progressBar.value += 0.05;\n    }\n\n    private onChange(value: number): void {\n        // 控制台打印输出进度\n        console.log(\"进度：\" + Math.floor(value * 100) + \"%\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Adding Sprite3D to Scene Using clone() (TypeScript)\nDESCRIPTION: Shows practical use of the clone method for duplicating a Sprite3D (e.g., a monkey model), resetting its position, and adding it to the scene. Relies on existence of layaMonkeyParent (Sprite3D), scene (Scene3D), and a Vector3 class. Ensures the cloned object is properly positioned before insertion.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n//克隆一个猴子\nlet sp = this.layaMonkeyParent.clone() as Laya.Sprite3D;\n//设置克隆猴子的坐标\nsp.transform.position = new Laya.Vector3(1,0,0);\n//添加到场景中\nthis.scene.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadows for 3D Objects in TypeScript\nDESCRIPTION: Enables shadow casting and receiving by setting MeshRenderer properties, enhancing scene realism by adding shadow effects, assuming the scene's directional light shadow mode is enabled.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/displayObject/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 立方体投射阴影\nboxRender.castShadow = true;\n// 平面接收阴影\nplaneRender.receiveShadow = true;\n```\n\n----------------------------------------\n\nTITLE: Exposing Engine Object Types in Component Properties\nDESCRIPTION: Shows how to expose various LayaAir engine object types as component properties using the @property decorator. Includes examples for 2D, 3D, UI, and primitive types.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property( { type:Laya.Camera } ) //摄像机类型\n    private camera: Laya.Camera;  \n\n    @property( { type:Laya.Scene3D } ) //3D场景根节点类型\n    private scene3D: Laya.Scene3D;\n\n    @property( { type:Laya.DirectionLightCom } ) //DirectionLight组件类型\n    private directionLight: Laya.DirectionLightCom;\n\n    @property( { type:Laya.Sprite3D } ) //Sprite3D节点类型\n    private cube: Laya.Sprite3D;  \n\n    @property( { type:Laya.Prefab } ) //加载 Prefab 拿到的对象\n    private prefabFromResource: Laya.Prefab;    \n\n    @property( { type:Laya.ShurikenParticleRenderer } ) //ShurikenParticleRenderer组件类型\n    private particle3D: Laya.ShurikenParticleRenderer;  \n\n    @property( { type:Laya.Node } ) //节点类型\n    private scnen2D: Laya.Node; \n\n    @property( { type:Laya.Box } ) //拿到 Box 组件\n    private box: Laya.Box; \n\n    @property( { type:Laya.List } ) //拿到 List 组件\n    private list: Laya.List; \n\n    @property( { type:Laya.Image } ) //拿到 Image 组件\n    private image: Laya.Image; \n\n    @property( { type:Laya.Label } ) //拿到 Label 组件\n    private label: Laya.Label; \n\n    @property( { type:Laya.Button } ) //拿到 Button 组件\n    private button: Laya.Button; \n\n    @property( { type:Laya.Sprite } ) //拿到 Sprite 组件\n    private sprite: Laya.Sprite; \n\n    @property( { type:Laya.Animation } ) //拿到 Animation 组件\n    private anmation: Laya.Animation; \n\n    @property( { type:Laya.Vector3 } ) //Laya.Vector3类型\n    private vector3 : Laya.Vector3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Testing Native Messaging Interface in JavaScript\nDESCRIPTION: Defines two JavaScript methods, postSyncMessage and postAsyncMessage, for communicating with the native layer, supporting both synchronous and Promise-based asynchronous calls. Demonstrates usage by posting messages and handling the results. Assumes existence of a global object (conch) exposing these methods; requires native-side integration for messaging to function. Arguments include eventName (string) and data (string), and responses are returned as strings or Promises resolving to strings. Used as the JS entry to invoke platform message handlers.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/platform_communication/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n//同步\npostSyncMessage(eventName: string, data: string): string;\n//异步\npostAsyncMessage(eventName: string, data: string): Promise<string>;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ret = conch.postSyncMessage(\"syncMessage\", \"syncMessage from js\");\nalert(ret);\nconch.postAsyncMessage(\"asyncMessage\", \"asyncMessage from js\").then(function (data) {\nalert(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Categorizing Component Properties in LayaAir Using TypeScript Decorators\nDESCRIPTION: This snippet demonstrates grouping component properties into categories in the LayaAir IDE using the 'catalog' attribute of the @property decorator. Properties with the same 'catalog' value are grouped under a shared category in the properties panel. The example uses properties of various types with some assigned to the \"adv\" category, indicated by the 'catalog' property. This allows developers to logically organize properties for better clarity within the editor. The snippet assumes familiarity with LayaAir's decorator syntax and property declaration conventions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property({ type : \"number\" })\n    a : number;\n\n    @property({ type: \"string\"})\n    b : string;\n\n    @property({ type: \"boolean\",catalog:\"adv\"})\n    c : boolean;\n\n    @property({ type: String, inspector: \"color\" ,catalog:\"adv\"})\n    d: string;\n```\n\n----------------------------------------\n\nTITLE: Using Laya.timer.once in a Component (TypeScript)\nDESCRIPTION: Example demonstrating how to use Laya.timer.once within a LayaAir component's onAwake method to change an Image's alpha property to 0.5 after a 1000 millisecond (1 second) delay.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //1秒后，图片的透明度变为0.5\n        Laya.timer.once(1000, this, () => {\n            this.Image.alpha = 0.5;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing 3D Node Component Properties via Node Property in LayaAir TypeScript\nDESCRIPTION: This snippet demonstrates exposing a `Laya.Sprite3D` node property `p3d`. In `onAwake`, it modifies the node's `localPosition`. It then retrieves a specific component (`Laya.ShurikenParticleRenderer`) attached to that node using `getComponent()` and modifies a property (`simulationSpeed`) of the particle system within that component. This requires linking a 3D node (e.g., one containing a particle system) to the `p3d` property in the editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/componentProperties/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    @property( { type :Laya.Sprite3D } ) //节点类型\n    public p3d: Laya.Sprite3D;\n\n    onAwake(): void {\n\n        this.p3d.transform.localPosition = new Laya.Vector3(0,5,5);\n        let p3dRenderer = this.p3d.getComponent(Laya.ShurikenParticleRenderer);\n        p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading and Instantiating a 2D Prefab in LayaAir via TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to load a 2D prefab file (Title.lh) and instantiate it as a Laya.Label component in a scene. It uses Laya's asynchronous loader to fetch the prefab asset, then calls the create method on the loaded resource to produce a new label instance. The label is then added to a designated box node in the scene using the addChild method. Prerequisites include the existence of a prefab file at \"resources/Title.lh\", TypeScript support, and a Laya.Box reference. Inputs are none (direct code execution), and outputs are the visual presence of the prefab label within the UI; this process is suitable for repeated runtime instantiation, but requires handling for asset loading errors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/prefab/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class ScriptA extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property( { type: Laya.Box } )\n    private box: Laya.Box;\n\n    constructor() {\n        super();\n    }\n\n    onStart(): void {\n\n        //加载预制体文件\n        Laya.loader.load(\"resources/Title.lh\").then( (res)=>{\n            //创建预制体\n            let label: Laya.Label = res.create();\n            //添加预制体Label字体到box节点下\n            this.box.addChild( label );\n        } );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Movement Script in LayaAir with TypeScript\nDESCRIPTION: This TypeScript script defines a CameraMoveScript class to control a 3D camera in the LayaAir engine. It listens to mouse events for rotation and keyboard inputs for movement in all three axes (forward, right, and vertical). The script depends on LayaAir's Laya namespace classes like Script3D, Camera, Vector3, Quaternion, and event systems. Key parameters include rotation speed, move speed, and tracking mouse coordinates. Inputs are mouse dragging and keyboard keys W, A, S, D, Q, and E for various directional movements. Outputs are real-time updates of the camera's position and orientation in the 3D scene. The script properly handles event registration and cleanup on awake and destroy lifecycle methods.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class CameraMoveScript extends Laya.Script3D {\n\n\t/** @private */\n\tprotected _tempVector3: Laya.Vector3 = new Laya.Vector3();\n\tprotected lastMouseX: number = 0;\n\tprotected lastMouseY: number = 0;\n\tprotected yawPitchRoll: Laya.Vector3 = new Laya.Vector3();\n\tprotected resultRotation: Laya.Quaternion = new Laya.Quaternion();\n\tprotected tempRotationZ: Laya.Quaternion = new Laya.Quaternion();\n\tprotected tempRotationX: Laya.Quaternion = new Laya.Quaternion();\n\tprotected tempRotationY: Laya.Quaternion = new Laya.Quaternion();\n\tprotected isMouseDown: boolean = false;\n\tprotected rotaionSpeed: number = 0.00006;\n\tprotected camera: Laya.BaseCamera = new Laya.Camera;\n\tprotected scene: Laya.Scene3D = new Laya.Scene3D;\n\n\tspeed: number = 0.01;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprotected _updateRotation(): void {\n\t\tif (Math.abs(this.yawPitchRoll.y) < 1.50) {\n\t\t\tLaya.Quaternion.createFromYawPitchRoll(this.yawPitchRoll.x, this.yawPitchRoll.y, this.yawPitchRoll.z, this.tempRotationZ);\n\t\t\tthis.tempRotationZ.cloneTo(this.camera.transform.localRotation);\n\t\t\tthis.camera.transform.localRotation = this.camera.transform.localRotation;\n\t\t}\n\t}\n\n\t/**\n\t * 监听鼠标事件\n\t */\n\tonAwake(): void {\n\t\tLaya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);\n\t\tLaya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseUp);\n\t\tthis.camera = (<Laya.Camera>this.owner);\n\t}\n\n\t/**\n\t * 监听键盘事件\n\t */\n\tonUpdate(): void {\n\t\tvar elapsedTime: number = Laya.timer.delta;\n\t\tif (!isNaN(this.lastMouseX) && !isNaN(this.lastMouseY) && this.isMouseDown) {\n\t\t\tLaya.InputManager.hasKeyDown(87) && this.moveForward(-this.speed * elapsedTime);//W\n\t\t\tLaya.InputManager.hasKeyDown(83) && this.moveForward(this.speed * elapsedTime);//S\n\t\t\tLaya.InputManager.hasKeyDown(65) && this.moveRight(-this.speed * elapsedTime);//A\n\t\t\tLaya.InputManager.hasKeyDown(68) && this.moveRight(this.speed * elapsedTime);//D\n\t\t\tLaya.InputManager.hasKeyDown(81) && this.moveVertical(this.speed * elapsedTime);//Q\n\t\t\tLaya.InputManager.hasKeyDown(69) && this.moveVertical(-this.speed * elapsedTime);//E\n\n\t\t\tvar offsetX: number = Laya.stage.mouseX - this.lastMouseX;\n\t\t\tvar offsetY: number = Laya.stage.mouseY - this.lastMouseY;\n\n\t\t\tvar yprElem: Laya.Vector3 = this.yawPitchRoll;\n\t\t\typrElem.x -= offsetX * this.rotaionSpeed * elapsedTime;\n\t\t\typrElem.y -= offsetY * this.rotaionSpeed * elapsedTime;\n\t\t\tthis._updateRotation();\n\t\t}\n\t\tthis.lastMouseX = Laya.stage.mouseX;\n\t\tthis.lastMouseY = Laya.stage.mouseY;\n\t}\n\n\t/**\n\t * 释放监听\n\t */\n\tonDestroy(): void {\n\t\tLaya.stage.off(Laya.Event.MOUSE_DOWN, this, this.mouseDown);\n\t\tLaya.stage.off(Laya.Event.MOUSE_UP, this, this.mouseUp);\n\t}\n\n\tprotected mouseDown(e: Laya.Event): void {\n\t\tthis.camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);\n\t\tthis.lastMouseX = Laya.stage.mouseX;\n\t\tthis.lastMouseY = Laya.stage.mouseY;\n\t\tthis.isMouseDown = true;\n\t}\n\n\tprotected mouseUp(e: Laya.Event): void {\n\t\tthis.isMouseDown = false;\n\t}\n\n\tprotected mouseOut(e: Laya.Event): void {\n\t\tthis.isMouseDown = false;\n\t}\n\n\t/**\n\t * 向前移动。\n\t * @param distance 移动距离。\n\t */\n\tmoveForward(distance: number): void {\n\t\tthis._tempVector3.x = this._tempVector3.y = 0;\n\t\tthis._tempVector3.z = distance;\n\t\tthis.camera.transform.translate(this._tempVector3);\n\t}\n\n\t/**\n\t * 向右移动。\n\t * @param distance 移动距离。\n\t */\n\tmoveRight(distance: number): void {\n\t\tthis._tempVector3.y = this._tempVector3.z = 0;\n\t\tthis._tempVector3.x = distance;\n\t\tthis.camera.transform.translate(this._tempVector3);\n\t}\n\n\t/**\n\t * 向上移动。\n\t * @param distance 移动距离。\n\t */\n\tmoveVertical(distance: number): void {\n\t\tthis._tempVector3.x = this._tempVector3.z = 0;\n\t\tthis._tempVector3.y = distance;\n\t\tthis.camera.transform.translate(this._tempVector3, false);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Component Properties with @property Decorator\nDESCRIPTION: Demonstrates how to expose component properties in the LayaAir IDE using the @property decorator. Shows both standard and simplified notation for property definition.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript1 extends Laya.Script {\n    //装饰器属性的标准写法，适用于IDE的需要显示Tips或属性的中文别名等完整功能需求\n    @property({ type: String, caption: \"IDE显示用的别名\", tips: \"这是一个文本对象，只能输入文本哦\" }) \n    public text1: string = \"\";\n\n    //装饰器属性类型的简写方式，适用于只定义类型的需求\n    @property(String)   \n    public text2: string = \"\";\n\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting an Object Pool by Sign in TypeScript\nDESCRIPTION: Retrieves an existing object pool associated with a specific string identifier. If the pool does not exist, creates a new one and returns it. Useful for managing multiple object types such as bullets or NPCs within the game.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Pool/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getPoolBySign(sign: string): any[] {\n    return Pool._poolDic[sign] || (Pool._poolDic[sign] = []);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Image in LayaAir with TypeScript\nDESCRIPTION: This TypeScript code defines a `LoaderDemo` class that extends `Laya.Script`. The `loadTexture` method loads an image from a URL using `Laya.loader.load()` and displays it on the screen. It demonstrates basic resource loading and manipulation within a LayaAir application.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        this.loadTexture(\"resources/image/monkey2.png\", 500);//需要在resources/image放入相应的资源\n        this.loadTexture(\"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\");\n    }\n\n    /**加载并显示图片 */\n    loadTexture(url: string, x: number = 0, y: number = 0): void {\n        Laya.loader.load(url).then((res: Laya.Texture) => {\n            let img = new Laya.Image();\n            img.texture = res;\n            // img.skin = url; //ui组件直接设置skin也可以\n            img.pos(x, y);\n            this.owner.addChild(img);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transform3D for Basic Object Transformations in TypeScript\nDESCRIPTION: Applies translation, rotation, and scaling transformations to 3D objects via the Transform3D class, allowing precise positioning and orientation adjustments in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/displayObject/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 改变位置\nbox.transform.position = new Laya.Vector3(0, 0, 0);\n// 平移\nbox.transform.translate(new Laya.Vector3(1, 1, 1));\n// 旋转\nbox.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);\n// 缩放\nbox.transform.setWorldLossyScale(new Laya.Vector3(2, 2, 2));\n```\n\n----------------------------------------\n\nTITLE: Initializing WebXR VR Session and Camera using LayaAir Engine (TypeScript)\nDESCRIPTION: This function demonstrates initializing a WebXR session in VR mode ('immersive-vr') using the LayaAir engine. It creates an XR-compatible camera, sets near and far clipping planes, obtains a session manager by calling WebXRExperienceHelper.enterXRAsync, and attaches the session to a camera via WebXRExperienceHelper.setWebXRCamera. Dependencies include TypeScript, the LayaAir engine, and WebXR polyfills if necessary. Key parameters: the camera instance, VR mode string, and the WebXRCameraInfo object controlling camera depth. The function expects initialized camera properties; output is a configured VR session allowing XR rendering.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/WebXR/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** 初始化XR */\nasync initXR(){\n  //创建一个webXR的摄像机\n  let caInfo : WebXRCameraInfo = new WebXRCameraInfo();\n  //设置远裁面\n  caInfo.depthFar = this.camera.farPlane;\n  //设置近裁面\n  caInfo.depthNear = this.camera.nearPlane;\n  //申请XR的交互，传入VR需要的信息\n  let webXRSessionManager = await WebXRExperienceHelper.enterXRAsync(\"imersive-vr\",\"local\",caInfo);\n  //设置WebXR摄像机\n  WebXRExperienceHelper.setWebXRCamera(this.camera, webXRSessionManager);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laya.timer.loop in a Component (TypeScript)\nDESCRIPTION: Example demonstrating how to use Laya.timer.loop within a LayaAir component's onAwake method to decrease an Image's alpha property by 0.1 every 1000 milliseconds (1 second).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //每1秒后，图片的透明度减少0.1\n        Laya.timer.loop(1000, this, () => {\n            this.Image.alpha -= 0.1;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Resetting Camera Aspect Ratio (TypeScript)\nDESCRIPTION: Allows manual adjustment of the camera's aspect ratio to handle special rendering cases. Setting aspectRatio to 0 enables automatic adjustment based on display, while setting it to a specific value maintains a fixed ratio.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Camera/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Manually set aspect ratio to 2\ncamera.aspectRatio = 2;\n\n// Reset to automatic aspect ratio\ncamera.aspectRatio = 0;\n```\n\n----------------------------------------\n\nTITLE: Adjusting LayaAir UI Relative Layout in TypeScript\nDESCRIPTION: This snippet demonstrates how to dynamically adjust the relative position of a UI element (`scaleGroup`) in a LayaAir game based on the screen aspect ratio. Placed in the `onAwake` lifecycle method, it checks if the aspect ratio indicates a potential notch screen device and, if so, sets the element's `top` and `bottom` properties to push it away from the screen edges, effectively handling safe areas. This requires the LayaAir framework and access to browser dimensions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/adaptScreen/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nonAwake():void{    \n    //宽高比大于2为刘海屏    \n    if((Browser.clientHeight/Browser.clientWidth)>2)\n    {        \n        this.scaleGroup.top = 25; //回避顶部刘海示例代码        \n        this.scaleGroup.bottom = 50;//回避底部线示例代码    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Camera\nDESCRIPTION: This code snippet demonstrates how to create a 2D camera dynamically in LayaAir using TypeScript. It creates a 2D area, sets its position and size, and then adds a 2D camera as a child of the area. The camera's properties such as `isMain`, `positionSmooth`, and `positionSpeed` are also set. The script requires the LayaAir library and is designed to be attached to a 2D scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Area2D/Camera2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\n/**\n * 创建2D相机的脚本，开发者可将脚本添加到2D场景中查看效果\n */\nexport class Script extends Laya.Script {\n\n    declare owner : Laya.Scene;\n\n    area2D: Laya.Area2D;\n    camera2D: Laya.Camera2D;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.createCamera2D();\n    }\n\n    createCamera2D() {\n        //2D相机必须添加在2D区域节点下，因此需要先创建一个2D区域节点\n        this.area2D = new Laya.Area2D();\n        //设置2D区域节点的位置和大小\n        this.area2D.pos(100, 100);\n        this.area2D.size(200, 200);\n        this.owner.addChild(this.area2D);\n\n        //创建2D相机\n        this.camera2D = this.area2D.addChild(new Laya.Camera2D);\n\n        //开发者可以根据需求自行设置相机的各项属性，例如：\n        //将相机设为主相机\n        this.camera2D.isMain = true;\n        //启用平滑位移\n        this.camera2D.positionSmooth = true;\n        //设置平滑移动的速度\n        this.camera2D.positionSpeed = 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting cache block size for TiledMap to optimize rendering\nDESCRIPTION: This snippet adds a gridSize parameter during createMap to specify the cache block dimensions, which should be an optimal size (e.g., 512x512) based on tile size and map size for better performance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar viewRect:Laya.Rectangle = new Laya.Rectangle(0, 0, Laya.Browser.width, Laya.Browser.height);\nvar gridSize:Laya.Point = new Laya.Point(512, 512);\nthis.tMap.createMap(\"res/TiledMap/orthogonal.json\",viewRect, Laya.Handler.create(this,this.onMapLoaded), null, gridSize);\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Scene - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to pass parameters to a scene when opening it using `Laya.Scene.open`. The parameters are passed as an object, which can then be accessed in the `onOpened` method of the scene's runtime script.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Button })\n    public uiBtn: Laya.Button;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n\n        this.uiBtn.on(Laya.Event.CLICK, this, () => {\n            //点击后，打开Msg场景\n            Laya.Scene.open(\"Msg.ls\", false, { \"text\": \"点击成功！\" });\n        });\n    }\n\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { MsgRTBase } from \"./MsgRT.generated\";\n\n@regClass()\nexport class MsgRT extends MsgRTBase {\n    \n    onOpened(param: any): void {\n        console.log(param.text);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Vector2/3/4 Parameter Definition\nDESCRIPTION: Describes the definition of a vector parameter within a Shader Blueprint. Vectors, like Vector2, Vector3, and Vector4 are available. These vectors are defined by the amount of components used and can be defined through the Inspector panel.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Animation Script - Model Translation on State Exit - Typescript\nDESCRIPTION: This code snippet defines a custom animation script that extends Laya.AnimatorStateScript. When the animation state exits, it logs a message to the console and translates the model's position by a specified vector. The script demonstrates how to access and manipulate the model associated with the animator component.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Vector3 = Laya.Vector3;\n...\n\nexport class AnimationScript extends Laya.AnimatorStateScript {\n    ...\n    private model: Laya.Sprite3D;\n    \n    /**@internal */\n    setPlayScriptInfo(animator: Laya.Animator | Laya.Animator2D, layerindex: number, playstate: Laya.AnimatorState | Laya.AnimatorState2D) {\n        ...\n        this.model = animator.owner as Laya.Sprite3D;//得到Cube节点\n    }\n\n    ...\n    \n\t/**\n    * 动画状态退出时执行。\n    */\n    onStateExit(): void {\n        console.log(\"动画退出了\");\n        //平移操作\n        let position = new Vector3(1, 1, 1);\n        this.model.transform.translate(position);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rigidbody Trigger Property in LayaAir 3D Using TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve Rigidbody3D components from 3D objects and set their 'isTrigger' property to enable or disable trigger behavior. Setting 'isTrigger' to true disables physical collision response and instead allows only collision lifecycle events to be detected. Dependencies include having existing 3D objects with Rigidbody3D components. Input involves obtaining references to rigidbodies; output is configuration that determines whether an object acts as a physical collider or just a trigger.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*……省略若干代码……*/\n\n//获取物理刚体组件\nthis.rigidbody1 = this.cube1.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\nthis.rigidbody2 = this.cube2.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n\n//设置rigidbody1为触发器,取消物理反馈\nthis.rigidbody1.isTrigger = true;\nthis.rigidbody2.isTrigger = false;\n\n/*……省略若干代码……*/\n```\n\n----------------------------------------\n\nTITLE: Performing HTTP GET Requests Using LayaAir HttpRequest in TypeScript\nDESCRIPTION: This example illustrates how to create a HttpRequest object and send an HTTP GET request to retrieve data from a specified URL. The GET method appends data as query parameters in the URL, suitable for fetching resources without changing server state. The snippet demonstrates simple usage without extra data payload, specifying 'text' as expected response type.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/HTTP/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建HttpRequest对象\nconst xhr = new Laya.HttpRequest();\n//发送HTTP的GET请求，数据会附加在URL中，适用于无需发送大量数据的情况。\nxhr.send('https://httpbin.org/get', null, 'get', 'text');\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters Between Scenes Example\nDESCRIPTION: Example showing how to pass parameters from one scene to another using Scene.open method and receive them in the onOpened lifecycle method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Button })\n    public uiBtn: Laya.Button;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n\n        this.uiBtn.on(Laya.Event.CLICK, this, () => {\n            //点击后，打开Msg场景\n            Laya.Scene.open(\"Msg.ls\", false, { \"text\": \"点击成功！\" });\n        });\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in LayaAir Text and Dynamic Update with setVar - TypeScript\nDESCRIPTION: This snippet shows how to activate template syntax in the Text component, set an initial variable value in the template, and use the setVar method to programmatically update template variables at runtime. It requires the LayaAir engine, template syntax enabled in the component, and access to the Text node via the script property. The 'n' variable in the Text is updated every 10 frames to increment its value displayed in the UI.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Text/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Text })\n    txt: Laya.Text;\n\n    constructor() {\n        super();\n    }\n\n    onAwake(): void {\n        this.txt.text = \"第{n=1}页\"; //显示文本的初始化内容\n    }\n\n    onStart(): void {\n        let page: number = 1;\n        Laya.timer.frameLoop(10, this, () => {\n            page += 1; //在定时器中让变量page每次自增1\n            this.txt.setVar(\"n\", page); //使用setVar方法，让text文本中变量n的值动态改变\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 绘制矩形的drawRect方法示例\nDESCRIPTION: 该代码示例演示如何利用LayaAir引擎中的Graphics类的drawRect方法绘制矩形。参数包括起点坐标、宽高、填充色、边框色和线宽，显示了向Sprite中添加矩形图形的基本流程。输入的参数决定矩形的位置、大小和样式，输出为对应的矢量矩形。适合作为基础绘图操作的参考。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//画矩形\nsp.graphics.drawRect(20, 20, 100, 50, \"#ffff00\", \"#00ff00\", 5, false);\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Target Texture in LayaAir TypeScript\nDESCRIPTION: This code configures a secondary camera to render to a texture that is then applied to a plane in the scene. It creates a render texture, sets the camera's rendering order and clear flags, creates an unlit material for the plane, and assigns the camera's render target as the albedo texture for the material.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n        //选择渲染目标为纹理\n        this.renderTargetCamera.renderTarget = Laya.RenderTexture.createFromPool(512, 512, Laya.RenderTargetFormat.R8G8B8A8, Laya.RenderTargetFormat.DEPTH_16, false, 1);\n        //渲染顺序\n        this.renderTargetCamera.renderingOrder = -1;\n        //清除标记\n        this.renderTargetCamera.clearFlag = Laya.CameraClearFlags.Sky;\n        //创建一个UnlitMaterial材质\n        var mat1: Laya.UnlitMaterial = new Laya.UnlitMaterial();\n\t\tmat1.albedoColor = new Laya.Color(1.0, 1.0, 1.0, 1.0);\n\t\tmat1.cull = Laya.RenderState.CULL_NONE;\n        //指定plane的材质为创建的材质\n\t\tthis.plane.getComponent(Laya.MeshRenderer).sharedMaterial = mat1;\n        //指定纹理为摄像机的渲染目标\n        mat1.albedoTexture = this.renderTargetCamera.renderTarget;\n```\n\n----------------------------------------\n\nTITLE: Clearing a Specific Object Pool in TypeScript\nDESCRIPTION: Clears all objects within a specified pool by setting its length to zero, effectively emptying the pool. Used to free memory when certain object types are no longer needed, such as at the end of a game level.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Pool/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic clearBySign(sign: string): void {\n    if (Pool._poolDic[sign]) Pool._poolDic[sign].length = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Light Scene with Point Lights and Spot Light in LayaAir\nDESCRIPTION: This code creates a 3D scene with 15 randomly positioned point lights and one spot light. Each point light has randomized range, color, and intensity values. The script also adds a movement component to the camera that controls the lights' positions through offset and range parameters.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Light/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MultiLight extends BaseScript {\n\n    constructor() {\n        super();\n    }\n\n\tonAwake(): void {\n\t\tvar moveScript: LightMoveScript = this.camera.addComponent(LightMoveScript);\n\t\tvar moverLights: Laya.Sprite3D[] = moveScript.lights;\n\t\tvar offsets: Vector3[] = moveScript.offsets;\n\t\tvar moveRanges: Vector3[] = moveScript.moveRanges;\n\t\tmoverLights.length = 15;\n\t\tfor (var i: number = 0; i < 15; i++) {\n\t\t\tvar pointLight: Laya.Sprite3D = (<Laya.Sprite3D>this.scene.addChild(new Laya.Sprite3D()));\n\t\t\tvar pointLightCom: Laya.PointLightCom = pointLight.addComponent(Laya.PointLightCom);\n\t\t\tpointLightCom.range = 2.0 + Math.random() * 8.0;\n\t\t\tpointLightCom.color.setValue(Math.random(), Math.random(), Math.random(), 1);\n\t\t\tpointLightCom.intensity = 6.0 + Math.random() * 8;\n\t\t\tmoverLights[i] = pointLight;\n\t\t\toffsets[i] = new Vector3((Math.random() - 0.5) * 10, pointLightCom.range * 0.75, (Math.random() - 0.5) * 10);\n\t\t\tmoveRanges[i] = new Vector3((Math.random() - 0.5) * 40, 0, (Math.random() - 0.5) * 40);\n\t\t}\n\n\t\tvar spotLight: Laya.Sprite3D = (<Laya.Sprite3D>this.scene.addChild(new Laya.Sprite3D()));\n\t\tvar spotLightCom: Laya.SpotLightCom = spotLight.addComponent(Laya.SpotLightCom);\n\t\tspotLight.transform.localPosition = new Vector3(0.0, 9.0, -35.0);\n\t\tspotLight.transform.localRotationEuler = new Vector3(-15.0, 180.0, 0.0);\n\t\tspotLightCom.color.setValue(Math.random(), Math.random(), Math.random(), 1);\n\t\tspotLightCom.range = 50;\n\t\tspotLightCom.intensity = 15;\n\t\tspotLightCom.spotAngle = 60;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Target Switching with lookAt in LayaAir TypeScript\nDESCRIPTION: This code implements mouse click handling to cycle through three different target positions for the camera using the lookAt method. Each click increments an index that determines which target the camera should face, creating a view cycling effect.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\tprivate index: number = 0;\n\t//同样，添加鼠标事件，来修改摄像机对3个建筑的朝向\n\tonMouseDown(e: Laya.Event) \n    {\n        this.index++;\n        if (this.index % 3 === 1 ){\n            //摄像机捕捉模型目标\n            this.camera.transform.lookAt(this.target1.transform.position, this._up);\n        }\n        else if (this.index % 3 === 2){\n            //摄像机捕捉模型目标\n            this.camera.transform.lookAt(this.target2.transform.position, this._up);\n        }\n        else{\n            //摄像机捕捉模型目标\n            this.camera.transform.lookAt(this.target3.transform.position,this._up);\n        }\n\t}\n```\n\n----------------------------------------\n\nTITLE: Assigning Shader Name within Shader3D Configuration - TypeScript\nDESCRIPTION: Illustrates setting the 'name' property inside a Shader3D configuration block to assign a unique name to the shader. This name differentiates it from other shaders and is the logical identifier rather than the filename. The snippet ensures the shader can be referenced by name within the engine's Shader3D object context.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n\t//此处ShaderName为Shader的名字，非.shader文件名字，实际为Shader3D对象的名称\n\tname: ShaderName \n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Programmatically\nDESCRIPTION: This code snippet shows how to create a Dialog component programmatically, including loading assets, creating the dialog, adding a background image and close button, setting the drag area, and displaying the dialog. The images for the dialog and close button are loaded as assets.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Dialog/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Dialog extends Laya.Script {\n\n    private DIALOG_WIDTH: number = 220;\n\tprivate DIALOG_HEIGHT: number = 275;\n\tprivate CLOSE_BTN_WIDTH: number = 43;\n\tprivate CLOSE_BTN_PADDING: number = 5;\n\n\tprivate assets: any[];\n    private dialog: Laya.Dialog;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 图片资源来自“引擎API使用示例”\n\t\tthis.assets = [\"resources/res/ui/dialog (1).png\", \"resources/res/ui/close.png\"];\n\t\tLaya.loader.load(this.assets).then( ()=>{\n            this.onSkinLoadComplete();\n        } );\n\t}\n\n\tprivate onSkinLoadComplete(e: any = null): void {\n\t\tthis.dialog = new Laya.Dialog();\n\n\t\tlet bg: Laya.Image = new Laya.Image(this.assets[0]);\n\t\tthis.dialog.addChild(bg);\n\n\t\tlet button: Laya.Button = new Laya.Button(this.assets[1]);\n\t\tbutton.name = Laya.Dialog.CLOSE;\n\t\tbutton.pos(this.DIALOG_WIDTH - this.CLOSE_BTN_WIDTH - this.CLOSE_BTN_PADDING, this.CLOSE_BTN_PADDING);\n\t\tthis.dialog.addChild(button);\n\n\t\tthis.dialog.dragArea = \"0,0,\" + this.DIALOG_WIDTH + \",\" + this.DIALOG_HEIGHT;\n\t\tthis.dialog.show();\n\t}\n\n\tonDestroy(): void {\n\t\tif (this.dialog) {\n\t\t\tthis.dialog.close();\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object Pools for Bullets in LayaAir\nDESCRIPTION: Example showing how to get a bullet object pool and check its status. Demonstrates retrieving the pool by sign and inspecting or adding objects to it.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet bulletPool = Laya.Pool.getPoolBySign(\"Bullet\");\n// 查看当前对象池内对象数量\nconsole.log( bulletPool.length );\n\nif( bulletPool.length == 0 )\n{\n\t// 把子弹放入对象池\n\tpool.push( new Bullet() );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating In-Code Internationalization Translations with Fallback - TypeScript\nDESCRIPTION: Expands on in-code internationalization by setting a fallback language ID (e.g., \"en\") in `gui.Translations.create`. It shows chaining `setContent` calls for multiple languages and demonstrates how the `t` method can then be used without providing a default value, relying on the fallback language.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n//The second parameter is the fallback language ID, default is en, so it can be omitted here.\nlet myI18n = gui.Translations.create(\"LodSimplify\", \"en\");\nmyI18n.setContent(\"zh-CN\", {\n    meshRate : \"模型压缩比例\",\n    meshRateTips : \"根据设置的比例对模型网格进行压缩2x\"\n}).setContent(\"en\", {\n    meshRate: \"Mesh Rate2\",\n    meshRateTips: \"Compress the model mesh based on the set ratio.\"\n});\n\nEditor.typeRegistry.addTypes([\n{\n    name: \"LodSimplifyData\",\n    properties: [\n        {\n            name: \"meshRate\",\n            type : \"number\",\n            caption: myI18n.t(\"meshRate\"),\n            tips: myI18n.t(\"meshRateTips\"),\n        }\n     ]\n }\n]);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Creating and Playing a VideoNode in LayaAir with TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a new VideoNode instance entirely via code, set its source, position it in the scene, and immediately play the video. It should be used when dynamic instantiation is required instead of pre-defining nodes in the IDE. Dependencies are the LayaAir Engine and a valid video resource path. No properties need to be bound in the editor; the snippet initializes the VideoNode and adds it to the stage during runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/VideoNode/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void { \n        let video = new Laya.VideoNode;\n        //添加到舞台\n        Laya.stage.addChild(video);\n        video.pos(200,200); //设置位置\n        video.source = \"resources/layaAir.mp4\"; //设置视频源文件\n        video.play(); //开始播放\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Animating FreeformLight2D in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to dynamically configure and animate a FreeformLight2D light component within a Laya.Sprite node in a LayaAir project. It retrieves the FreeformLight2D component, constructs a custom polygonal shape by defining multiple vertices, and sets light properties such as color, intensity, and falloff range. The onUpdate method animates both the rotation and scaling of the light over time, using engine timer deltas for smooth animation. Required: LayaAir engine APIs, appropriate FreeformLight2D component attached to the node.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/FreeformLight2D/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\n@regClass()\nexport class LightEffectDemo extends Laya.Script {\n    declare owner: Laya.Sprite;\n\n    private lightComp: Laya.FreeformLight2D;\n    private rotateSpeed: number = 2;  // 增加旋转速度\n    private scaleTime: number = 0;\n    private scaleSpeed: number = 3;   // 增加缩放速度\n    private intensity: number = 1.8;  // 定义灯光强度\n\n    onAwake(): void {\n        // 获取 FreeformLight2D 组件\n        this.lightComp = this.owner.getComponent(Laya.FreeformLight2D);\n\n        //灯光的顶点通常建议是在IDE中可视化配置，这里是为了演示如何通过代码动态设置顶点数据，方便动态调整灯光形状的需求。\n        /**设置自由光的顶点数据，形成美观的多边形形态**/\n        const polygon = new Laya.PolygonPoint2D();\n        polygon.addPoint(0, -150);    // 上\n        polygon.addPoint(20, -30);    // 上右内侧\n        polygon.addPoint(150, -30);   // 右上\n        polygon.addPoint(30, 10);     // 右上内侧\n        polygon.addPoint(100, 150);   // 右下\n        polygon.addPoint(10, 30);     // 下内侧\n        polygon.addPoint(-100, 150);  // 左下\n        polygon.addPoint(-30, 10);    // 左下内侧\n        polygon.addPoint(-150, -30);  // 左上\n        polygon.addPoint(-20, -30);   // 左上内侧\n        this.lightComp.polygonPoint = polygon;\n\n        // 增加灯光强度和设置灯光颜色\n        this.lightComp.falloffRange = 3;       // 增大衰减范围\n        this.lightComp.color = new Laya.Color(1.0, 0.9, 0.6, 1);  // 设置灯光颜色\n        this.lightComp.intensity = this.intensity; // 应用灯光强度\n    }\n\n    onUpdate(): void {\n        // 实现灯光旋转动画\n        this.lightComp.lightRotation += this.rotateSpeed * Laya.timer.delta / 1000;\n        // 实现灯光缩放动画\n        this.scaleTime += Laya.timer.delta / 1000 * this.scaleSpeed;\n        const scale = 1 + Math.sin(this.scaleTime) * 0.5;  // 增加缩放变化幅度\n        this.lightComp.lightScale.setValue(scale, scale);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Large File Download Function in TypeScript for LayaNative Resource Update\nDESCRIPTION: Defines a TypeScript declaration for the downloadBigFile function used to download large files with breakpoint resume support. It avoids the memory issues of XMLHttpRequest by streaming data directly to disk. Parameters include the remote URL, local save path, progress callback that returns a boolean to continue or abort, completion callback with curl and HTTP status, retry count (0 for infinite retries), and timeout. It does not return ArrayBuffer if successful due to possible large file size.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/zipUpdate/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @param url 远程地址\n * @param local 存到本地文件\n * @param onprog 进度回调\n * @param oncomp 完成回调\n * @param trynum 重试次数（0无限重试） \n * @param opttimeout 超时时间，\n * 注意如果成功了不会返回ArrayBuffer，不要使用这个参数。因为可能太大。\n */\ndeclare var downloadBigFile:(url:string,\n\tlocal:string,\n\tonprog:(total:number,now:number,speed:number)=>boolean,oncomp:(curlret:number, httpret:number)=>void,\n\ttrynum:number,\n\topttimeout:number)=>void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reflection Probe Support with supportReflectionProbe Flag - TypeScript\nDESCRIPTION: Illustrates toggling the support for reflection probes inside a Shader3D configuration by setting 'supportReflectionProbe' to true or false. Reflection probes enable realistic environment reflections via cube maps that dynamically capture surroundings. The flag allows shaders to conditionally include reflection rendering logic depending on scene presence of probes, improving performance and visual fidelity.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n\t....\n\t....\n    supportReflectionProbe:false,\n    ....\n\t....\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Controlling LayaAir Panel via Script (TypeScript)\nDESCRIPTION: This TypeScript script demonstrates how to access and modify properties of a Laya.Panel component instance that has been assigned via the LayaAir IDE's property inspector. Within the `onAwake` lifecycle method, it sets the panel's position, size, scroll type to both horizontal and vertical, assigns skins for both scrollbars, and enables the elastic bounce effect. It requires a `Laya.Panel` component to be linked to the `panel` property in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Panel/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Panel })\n    public panel: Laya.Panel;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.panel.pos(100, 100);\n        this.panel.size(200, 200);\n        this.panel.scrollType = Laya.ScrollType.Both; //滚动类型：水平与垂直都滚动\n        this.panel.vScrollBarSkin = \"atlas/comp/vscroll.png\";\n        this.panel.hScrollBarSkin = \"atlas/comp/hscroll.png\";\n        this.panel.elasticEnabled = true; //橡皮筋效果\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Static Property on Sprite3D (TypeScript)\nDESCRIPTION: Illustrates the use of getters and setters for the isStatic property, controlling whether the node is considered static or dynamic. This impacts performance optimizations such as batching and collision detection. Intended for nodes that do not move, scale, or rotate during runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 是否为静态。\n     */\n    get isStatic(): boolean \n\n    /**\n     * 是否设为静态。\n     */\n    set isStatic(value: boolean) \n```\n\n----------------------------------------\n\nTITLE: Clearing Object Pool in LayaAir\nDESCRIPTION: Method to clear all objects from a specific object pool identified by a sign. Useful when a pool is no longer needed, such as at the end of a battle.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 清除对象池的对象。\n     * @param sign 对象类型标识字符。\n     */\n    static clearBySign(sign: string): void {\n        if (Pool._poolDic[sign]) Pool._poolDic[sign].length = 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Text Node in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates the dynamic creation of a `Laya.Text` node, including positioning, sizing, pivot, text content, and word wrapping settings. It creates a new `Laya.Text` object, sets its properties (position using `pos()`, size using `size()`, pivot using `pivot()`, content using `text`, and word wrap with `wordWrap`), adds it to the stage using `Laya.stage.addChild()`, and then sets its initial visual properties. The code runs within the `onAwake()` method of a custom LayaAir script class, ensuring that the scene's components are fully initialized before the text object is created.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Text/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        let txt = new Laya.Text();\n        // 添加到舞台\n        Laya.stage.addChild(txt);\n        txt.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        txt.size(500, 30); //大小\n        txt.pivot(txt.width/2, txt.height/2); //轴心点\n        txt.text = \"大家好，欢迎各位开发者使用LayaAir IDE，这里是Text的文本内容，本方法是代码创建Text\"; //文本内容\n        txt.wordWrap = true; //自动换行\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Repeating Millisecond Timers with Laya.Timer in TypeScript\nDESCRIPTION: Details the loop method that repeatedly calls a given function at a set interval in milliseconds, with the option to specify jumpFrame for performance-sensitive looping. Input parameters include delay, context, callback, arguments, coverBefore, and jumpFrame. Intended for continuous timed effects or updates, it references the internal handler system.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 定时重复执行。\n * @param\tdelay\t间隔时间(单位毫秒)。\n * @param\tcaller\t执行域(this)。\n * @param\tmethod\t定时器回调函数。\n * @param\targs\t回调参数。\n * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n * @param\tjumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次\n */\nloop(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true, jumpFrame: boolean = false): void {\n    var handler: TimerHandler = this._create(false, true, delay, caller, method, args, coverBefore);\n    if (handler) handler.jumpFrame = jumpFrame;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Physics Script and Collision Components to a Box (TypeScript)\nDESCRIPTION: This code demonstrates the creation of a 3D box object in TypeScript using Laya.Sprite3D, building and assigning its mesh and material, and finally attaching a Rigidbody3D and BoxColliderShape components. The TSDemo custom 3D script is also added via addComponent, enabling physics lifecycle event handling. Dependencies: Laya.Sprite3D, MeshFilter, MeshRenderer, PrimitiveMesh, Rigidbody3D, BoxColliderShape, and a script export. Inputs include mesh dimensions and position vectors; outputs are a fully initialized, script-enabled physical box in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n//引入自定义脚本TSDemo\nimport TSDemo from \"./TSDemo\";\n/**\n * TypeScript语言示例\n */\nexport default class GameUI extends GameUIBase {\n    /*\n    ……省略若干代码\n    */\n    private addBox(): void {\n        //创建盒型体\n        let box = new Laya.Sprite3D;\n        let boxMesh = box.addComponent(Laya.MeshFilter);\n        let boxRender = box.addComponent(Laya.MeshRenderer);\n        // 创建网格\n        boxMesh.sharedMesh = Laya.PrimitiveMesh.createBox(0.75, 0.5, 0.5);\n        //设置材质\n        boxRender.sharedMaterial = this.mat1;\n        this.newScene.addChild(box);\n        //设置空间位置\n        let transform = box.transform;\n        let pos = transform.position;\n        pos.setValue(1, 6, 0);\n        transform.position = pos;\n        //创建刚体碰撞器\n        let _rigidBody = box.addComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n        //创建盒子形状碰撞器\n        let boxShape = new Laya.BoxColliderShape(0.75, 0.5, 0.5);\n        //设置盒子的碰撞形状\n        _rigidBody.colliderShape = boxShape;\n\n        //添加自定义脚本组件TSDemo\n        box.addComponent(TSDemo);\n    }\n    /*\n    ……省略若干代码\n    */\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse Wheel Zoom Implementation with LayaAir\nDESCRIPTION: A complete example of implementing mouse wheel zooming on an image in LayaAir, using the mouse position as the zoom center.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class XX extends Laya.Script {\n\tprivate _owner: Laya.Image;\n  \n  onEnable(): void {\n    this._owner = this.owner as Laya.Image;\n    this.onMouseWheel();\n  }\n  \n  /** 帧听滚轮事件，并处理滚动 */\n  onMouseWheel(): void {\n    //处理滚轮事件的帧听\n    this.owner.on(Laya.Event.MOUSE_WHEEL, this, (e: Laya.Event) => {\n      //转换舞台坐标为本地坐标\n      let point: Laya.Point = this._owner.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));\n\n      if (e.delta > 0) { //当滑轮向上滚动时，增加xy缩放值  \n        this._owner.scaleX += 0.1;\n        this._owner.scaleY += 0.1;\n      }\n      if (e.delta < 0) { //当滑轮向下滚动时，减少xy缩放值\n        this._owner.scaleX -= 0.1;\n        this._owner.scaleY -= 0.1;\n        //设置xy最小缩放值\n        (this._owner.scaleX < 0.8) && (this._owner.scaleX = 0.8);\n        (this._owner.scaleY < 0.8) && (this._owner.scaleY = 0.8);\n      }\n\n      //缩放后的鼠标位置\n      let point2: Laya.Point = this._owner.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));\n\n      //计算缩放引发的xy偏移值\n      let _offsetX = (point2.x - point.x) * this._owner.scaleX;\n      let _offsetY = (point2.y - point.y) * this._owner.scaleY;\n\n      //修正坐标位置\n      this._owner.x += _offsetX;\n      this._owner.y += _offsetY;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling VBox Container Using LayaAir IDE in TypeScript\nDESCRIPTION: This snippet demonstrates adding and controlling a VBox component within a LayaAir Scene2D using TypeScript. It relies on LayaAir's script registration and property decorators to expose the VBox component for editing in the IDE. The onAwake lifecycle method initializes position, background color, vertical spacing, and horizontal alignment of the VBox container. Required dependencies include LayaAir engine and VBox UI class. Inputs are exposed component references from the IDE, and outputs are visual layout adjustments of the VBox container in the scene. This approach facilitates IDE-driven UI development with scriptable runtime control.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/VBox/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.VBox })\n    public vbox: Laya.VBox;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.vbox.pos(100, 100);\n        this.vbox.bgColor = \"#ffffff\";\n        this.vbox.space = 30;\n        this.vbox.align = \"center\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Script Loading via src in LayaAir with TypeScript\nDESCRIPTION: Demonstrates how to dynamically load external JavaScript files using the src attribute of a script tag. Creates a script element, sets its source, handles load and error events, and then uses the loaded script functionality.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(500,500);\n        var script:any = Laya.Browser.document.createElement(\"script\");\n        script.src = \"demo1.js\";\n        script.onload = function():void{\n            //加载完成函数，开始调用模块的功能。\n            //new一个js中的对象\n            var client:any = new Laya.Browser.window.Demo1();\n            client.start();\n        }\n        script.onerror = function():void{\n            //加载错误函数\n        }\n        Laya.Browser.document.body.appendChild(script);\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Vertex/Fragment Shaders within LayaAir (GLSL)\nDESCRIPTION: Explains how to embed GLSL code for Vertex Shaders (VS) and Fragment Shaders (FS) within a LayaAir `.shader` file. This is done using `GLSL Start` and `GLSL End` markers to enclose the GLSL code section, and `#defineGLSL name` / `#endGLSL` directives to define named code blocks (e.g., `OutlineVS`, `OutlineFS`) corresponding to the VS/FS names specified in the `shaderPass` section.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_15\n\nLANGUAGE: GLSL\nCODE:\n```\nGLSL  Start\n#defineGLSL  OutlineVS\n    void main()\n    {\n        vec4 position = vec4(a_Position.xyz + a_Normal * u_OutlineWidth, 1.0);\n        gl_Position = u_MvpMatrix * position;\n    }\n#endGLSL \n\n#defineGLSL  OutlineFS\n\tvarying vec3 v_Normal; \n    varying vec2 v_Texcoord0; \n    void main() \n    { \n        gl_Position = u_MvpMatrix * a_Position; \n        mat3 worldMat=mat3(u_WorldMat); \n        v_Normal=worldMat*a_Normal; \n        v_Texcoord0 = a_Texcoord0; \n        gl_Position=remapGLPositionZ(gl_Position); \n    }\n#endGLSL \nGLSL  End\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Pooling for Sprites in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates using LayaAir's Pool class (`laya.utils.Pool`) to manage Image objects. It creates 100 images periodically, retrieves them from the pool using `Pool.getItemByClass`, animates them, and returns them to the pool using `Pool.recover` when they go off-screen or shrink, thus avoiding repeated instantiation and garbage collection overhead.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/memory/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PoolTest {\n    private createTime: number = 0;\n\n    constructor() {\n\n        //初始化引擎\n        Laya.init(1136, 640, Laya.WebGL);\n        //等比缩放\n        Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL;\n        //背景颜色\n        Laya.stage.bgColor = \"#232628\";\n        //帧循环\n        Laya.timer.frameLoop(1, this, this.onFrame);\n\n    }\n    onFrame(): void {\n        //如果创建对象时间为100帧间隔后\n        if (this.createTime >= 100) {\n            //每200帧间隔创建30个雪花\n            for (var i: number = 0; i < 100; i++) {\n\n                //img:Image=new Image(); //不使用对象池的写法\n                //通过对象池创建图片，如对象池中无相应的对象，则根据Image类型执行new Image()创建\n                var img: Laya.Image = Laya.Pool.getItemByClass(\"img\", Laya.Image);\n                //通过锚点设置轴心点\n                img.anchorX = img.anchorY = 0.5;\n                //图片的资源\n                img.skin = \"res/snow0.png\"\n                //在舞台上方随机位置创建\n                img.x = Math.random() * 1136;\n                img.y = Math.random() * -150;\n                //对象池中的图片被缩放了，需重新设置其缩放属性。\n                //如果对象中还有其他属性被改变了，\n                img.scaleX = img.scaleY = 1;\n                //加载到舞台\n                Laya.stage.addChild(img);\n                //到100帧后创建完对象后时间归0\n                this.createTime = 0;\n            }\n        } else {\n            //更新创建时间\n            this.createTime++;\n        }\n        //检测每个舞台中的图片对象，并进行位置更新。\n   for(var j:number=0;j<Laya.stage.numChildren;j++)\n            {\n                //获取舞台中的图片对象\n                var img1:Laya.Image=Laya.stage.getChildAt(j) as Laya.Image;\n                //位置更新\n                img1.y++;\n                //缩放更新\n                img1.scaleX-=0.001;\n                img1.scaleY-=0.001;\n                //图片旋转\n                img1.rotation++;\n                //超出边界或缩放小于0\n                if(img1.y>640+20||img1.scaleX<=0)\n                {\n                    //从舞台中移除\n                    Laya.stage.removeChild(img1);\n                    //img1.destroy(); //不使用对象池的编写方式,直接用destroy清空             \n                    //回收到对象池\n                   Laya.Pool.recover(\"img\",img1);\n                }\n            }\n        }\n    }\n\nnew PoolTest();\n```\n\n----------------------------------------\n\nTITLE: Using Script Lifecycle with 3D Mouse Events in LayaAir - TypeScript\nDESCRIPTION: Shows how to attach mouse event detection scripts to multiple 3D objects and use Script3D methods to handle mouse interactions. The SceneScript class sets text displays when objects are clicked, indicating which object was interacted with. LayaAir's physics module, 3D scene, and necessary node set up are required. Inputs are mouse events; outputs are dynamic text updates or callback side effects when clicking on different 3D nodes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码 */\n    \n \t//需要为每一个需要鼠标事件反馈的3D节点对象都添加检测脚本\n    staticLayaMonkey.addComponent(MouseEventScript);\n    layaMonkey_clone1.addComponent(MouseEventScript);\n    layaMonkey_clone2.addComponent(MouseEventScript);\n    layaMonkey_clone3.addComponent(MouseEventScript);\n  }\n}\n\n/** 鼠标事件检测脚本*/\nclass SceneScript extends Script3D {\n  onAwake() {\n    //获取文本对象\n    this.text = Laya.stage.getChildByName(\"text\");\n  }\n\n  /**鼠标在脚本所属的对象上按下时触发的事件生命周期方法*/\n  onMouseDown() {\n    //当鼠标在对象上按下时，显示文本\n    this.text.text = \"碰撞到了：\" + this.owner.name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dynamic Property Access in JavaScript Objects - TypeScript\nDESCRIPTION: Caches a frequently accessed property of a target object into a local variable to avoid repeated dynamic property lookups. Requires that the class or context has a 'target' object with a 'prop' property and methods process1, process2, and process3. This pattern improves performance, especially in hot paths where a property is accessed multiple times.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfoo()\n{\nvar prop=this.target.prop;\n//使用prop\nthis.process1(prop);\nthis.process2(prop);\nthis.process3(prop);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native XMLHttpRequest in LayaAir with TypeScript\nDESCRIPTION: This code snippet shows how to access and utilize the native XMLHttpRequest object via LayaAir's HttpRequest class. It demonstrates opening a GET request for a binary blob resource, monitoring download progress with progress events, and handling load and error events with appropriate callbacks, giving developers fine control beyond standard LayaAir HttpRequest capabilities.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/HTTP/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\n@regClass()\nexport class Network_GET extends Laya.Script {\n\tonAwake(): void {\n\t\tthis.useXhr();\n\t}\n    \n    /** 测试使用原生的XMLHttpRequest 对象 */\n\tuseXhr(): void {\n\t\t// 引用 XMLHttpRequest 对象\n\t\tvar xhr = new Laya.HttpRequest().http;\n\n\t\t// 设置请求的 URL 和方法\n\t\txhr.open('GET', 'https://ldc-1251285021.cos.ap-shanghai.myqcloud.com/layaair-3.2/win/LayaAirIDE-win-x64-3.2.1.exe', true);\n\n\t\t// 设置响应类型为 blob（可以是文件类型）\n\t\txhr.responseType = 'blob';\n\n\t\t// 监听下载过程中的 progress 事件\n\t\txhr.addEventListener('progress', function (event: any) {\n\t\t\tif (event.lengthComputable) {\n\t\t\t\t// 计算下载的百分比\n\t\t\t\tvar percent = (event.loaded / event.total) * 100;\n\t\t\t\tconsole.log('下载进度: ' + percent.toFixed(2) + '%');\n\t\t\t}\n\t\t});\n\n\t\t// 设置请求完成后的处理函数\n\t\txhr.onload = function () {\n\t\t\tif (xhr.status === 200) {\n\t\t\t\tconsole.log(\"文件下载完成！\");\n\t\t\t} else {\n\t\t\t\tconsole.error(\"请求失败: \" + xhr.status);\n\t\t\t}\n\t\t};\n\n\t\t// 设置请求失败的处理函数\n\t\txhr.onerror = function () {\n\t\t\tconsole.error(\"请求错误！\");\n\t\t};\n\n\t\t// 发送请求\n\t\txhr.send();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching CommandBuffer to Camera Event in LayaAir\nDESCRIPTION: Demonstrates the process of adding and removing a CommandBuffer to the camera events, allowing for customization of the rendering process at specific points, like rendering before/after transparent objects. This snippet allows control over when to render the command buffer.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/CommandBuffer/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.camera.addCommandBuffer(this.cameraEventFlag,this.commandBuffer);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.camera.removeCommandBuffer(this.cameraEventFlag,this.commandBuffer);\n```\n\n----------------------------------------\n\nTITLE: Custom Web Worker in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to create and use a custom Web Worker within a LayaAir project. It instantiates a worker, sets up a message handler, and sends a message.  The worker script performs a task (in this case, loading a file) and sends the result back to the main thread.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/useWorker/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar worker:any = new Laya.Browser.window.Worker(\"js/my_task.js\");\nworker.onmessage = function(oEvent):void{\n    console.log(\"Called back by the worker!\\n\");\n};\nworker.postMessage(\"start\"); // start the worker.\n```\n\n----------------------------------------\n\nTITLE: Basic A* Usage Example in TypeScript\nDESCRIPTION: Demonstrates the fundamental usage of the A* library. It initializes a graph with walkable (1) and unwalkable (0) nodes, defines start and end points, and uses the 'astar.search' function to find the shortest path.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar graph = new Graph([\n\t[1,1,1,1],\n\t[0,1,1,0],\n\t[0,0,1,1]\n]);\nvar start = graph.grid[0][0];\nvar end = graph.grid[1][2];\nvar result = astar.search(graph, start, end);\n// result is an array containing the shortest path\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of Custom File Upload in LayaAir with TypeScript\nDESCRIPTION: Complete implementation of a customized file upload system using LayaAir. Creates a custom button, overlays it with a transparent file input, handles file selection, reads the selected file, and displays the image on the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(100,100);\n        var skins:any = [\"res/a.png\"];\n        Laya.loader.load(skins,Laya.Handler.create(this,this.onUIAssetsLoaded));\n    }\n    private onUIAssetsLoaded():void{\n        var btn:Laya.Button = new Laya.Button(\"res/a.png\");\n        Laya.stage.addChild(btn);\n        //创建隐藏的file并且把它和按钮对齐。达到位置一致，这里我们默认在0点位置\n        var file:any = Laya.Browser.document.createElement(\"input\");\n        //设置file样式\n        file.style=\"filter:alpha(opacity=0);opacity:0;width: 150px;height:60px;\";\n        file.type =\"file\";//设置类型是file类型。\n        file.accept=\"image/png\";//设置文件的格式为png；\n        file.style.position =\"absolute\";\n        file.style.zIndex = 999;\n        Laya.Browser.document.body.appendChild(file);//添加到页面；\n        var fileReader:any = new  Laya.Browser.window.FileReader();\n        file.onchange = function(e:any):void\n        {\n            if(file.files.length>0)\n            {\n                fileReader.readAsDataURL(file.files[0]);\n            }\n        };\n        fileReader.onload = function(evt):void\n        {  \n            if(Laya.Browser.window.FileReader.DONE == fileReader.readyState)\n            {\n                var sp:Laya.Sprite = new Laya.Sprite();\n                sp.loadImage(fileReader.result,0,0,100,100);\n                Laya.stage.addChild(sp);\n            }\n        };\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Obtaining an Object with Create Function if Pool is Empty in TypeScript\nDESCRIPTION: Provides an object from the pool, or if none are available, creates a new one using a provided factory function. This ensures object availability while minimizing performance costs during creation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Pool/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getItemByCreateFun(sign: string, createFun: Function, caller: any = null): any {\n    var pool: any[] = Pool.getPoolBySign(sign);\n    var rst: any = pool.length ? pool.pop() : createFun.call(caller);\n    rst[Pool.POOLSIGN] = false;\n    return rst;\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing WebSocket Connection via Connect Method in LayaAir TypeScript\nDESCRIPTION: Shows how to instantiate a Laya.Socket object and call the connect method with host and port to establish a connection. Secure WebSocket (wss) support is enabled by passing true as the third argument in the connect method. Inputs are host (string) and port (number); requires the LayaAir engine for context.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet socket = new Laya.Socket();\nsocket.connect(\"192.168.1.2\", 8899);\n//如果需要wss安全协议，第3个参数需要为true。\n// let socket = new Laya.Socket(\"192.168.1.2\", 8899, true);\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation Node Playback Modes and Properties using LayaAir TypeScript Script\nDESCRIPTION: This TypeScript snippet defines a LayaAir Script component named Animation, allowing control over an Animation node's playback properties programmatically. It requires registering the class with the Laya framework, and the component must expose an Animation property reference from the IDE. Key features include setting the animation source to an atlas file, enabling auto play, selecting playback wrap mode, and configuring frame interval timing. The onAwake lifecycle method initializes these settings once all node components are initialized. Dependencies include LayaAir framework and the availability of the referenced atlas resource.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Animation/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Animation extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Animation }) //在IDE面板中显示属性\n    ani: Laya.Animation;\n\n    constructor() {\n        super();\n    }\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次 \n    onAwake(): void {\n        this.ani.source = \"resources/role.atlas\"; //接收动画数据源为图集\n        this.ani.autoPlay = true; //开启自动播放\n        this.ani.wrapMode = 0; //播放模式为正序播放模式（POSITIVE）\n        this.ani.interval = 50; //动画播放的帧间隔时间为50毫秒\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Sprite3D Using instantiate and Adding to Scene (TypeScript)\nDESCRIPTION: Illustrates usage of Sprite3D.instantiate to clone an object (such as a monkey), assign a parent (scene), set a new position and rotation, and add it to the scene. layaMonkeyParent is cloned with world transform disabled, position and rotation are specified. Suitable when multiple instances of a model are needed at different locations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n//sprite3d的instantiate克隆方法\nlet layaMonkey_clone1 = Laya.Sprite3D.instantiate(this.layaMonkeyParent, this.scene, false, new Laya.Vector3(-2, 0, 0), new Laya.Quaternion(0, -90, 0));\nthis.scene.addChild(layaMonkey_clone1);\n```\n\n----------------------------------------\n\nTITLE: Illuminating All Layers with Layer Mask in LayaAir (TypeScript)\nDESCRIPTION: Shows how to set the `layerMask` property of a LayaAir light component (e.g., FreeformLight2D) to `-1`. This configuration makes the light affect all rendering layers defined in the scene. Assumes `light1Render` is a valid light component instance obtained previously.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/BaseLight2D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//基于前文示例代码，仅修改layerMask即可  \n//-1可以让灯光照亮所有层\nthis.light1Render.layerMask = -1;\n```\n\n----------------------------------------\n\nTITLE: LayaAir CommandBuffer Command List - TypeScript\nDESCRIPTION: This section lists various types of rendering commands that can be added to a LayaAir CommandBuffer. These commands enable actions such as setting shader data, performing full-screen blits, managing render targets (setting and clearing), and drawing meshes or renderable objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/CommandBuffer/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetShaderData//设置shader数据，可以设置shader中的texture vector number等\nsetGlobalShaderData//设置全局数据，可以用于所有的shader\nblitScreenQuad//通过全屏四边形将源纹理渲染到目标渲染纹理指令。\nblitScreenQuadByMaterial//通过全屏四边形将源纹理渲染到目标渲染纹理指令\nsetRenderTarget//设置指令渲染目标，调用后，所有的渲染都会渲染到方法绑定的图片上\nclearRenderTarget//清理绑定的渲染纹理\ndrawMesh//渲染一个Mesh\ndrawRender//渲染一个Render\n```\n\n----------------------------------------\n\nTITLE: Creating a Sprite in LayaAir with TypeScript\nDESCRIPTION: Simple example showing how to create a Sprite instance and add it to the stage in LayaAir. This is the most basic way to initialize a sprite object in code.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonAwake(): void {\n        let sprite = new Laya.Sprite();\n        // 添加到舞台\n        Laya.stage.addChild(sprite);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Sprite Instance in TypeScript\nDESCRIPTION: Illustrates the fundamental process of instantiating a new `Laya.Sprite` object and adding it as a child to the main `Laya.stage` for display within the `onAwake` lifecycle method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonAwake(): void {\n        let sprite = new Laya.Sprite();\n        // 添加到舞台\n        Laya.stage.addChild(sprite);\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Component Registration with @regClass Decorator\nDESCRIPTION: Shows how to register a custom script component in LayaAir 3.0 using the @regClass() decorator. This registration is necessary for the IDE to recognize and expose the component.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Frame-Based Timers with Laya.Timer in TypeScript\nDESCRIPTION: This code defines the frameOnce method, which schedules a callback to execute once after a specific number of frames. The method requires specifying the frame delay, the execution context (caller), the callback function, optional arguments, and an option to cover previous timers. It internally uses the _create method and does not support manual instantiation of Laya.Timer, which is a singleton.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 定时执行一次(基于帧率)。\n * @param\tdelay\t延迟几帧(单位为帧)。\n * @param\tcaller\t执行域(this)。\n * @param\tmethod\t定时器回调函数。\n * @param\targs\t回调参数。\n * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n */\nframeOnce(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\n    this._create(true, false, delay, caller, method, args, coverBefore);\n}\n```\n\n----------------------------------------\n\nTITLE: Refitting Baidu Map Size in TypeScript\nDESCRIPTION: This TypeScript snippet resizes the Baidu Map's div container to fill the entire browser window. It's designed to be called when the window is resized to maintain the map's full-screen display.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprivate  refit(): void {\n  this.mapDiv.style.width  =  Laya.Browser.width  / Laya. Browser.pixelRatio  +  \"px\";\n  this.mapDiv.style.height  = Laya. Browser.height  / Laya. Browser.pixelRatio  +  \"px\";\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Objects into Pool in LayaAir\nDESCRIPTION: Example showing how to preload objects into a pool during scene initialization to avoid performance issues. Creates multiple bullet objects in advance for later use.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 第一次创建子弹的对象池\nlet bulletPool = Laya.Pool.getPoolBySign(\"Bullet\");\n// 创建10个子弹对象，并放入对象池中\nfor( var i = 0 ; i < 10 ; i++ )\n{\n    // 创建一个子弹\n    let bullet = new Bullet();\n    bulletPool.push( bullet );\n}\n// 当需要的时候，可以从对象池中拿子弹对象\nlet bullet = Pool.getItem(\"Bullet\");\n```\n\n----------------------------------------\n\nTITLE: Loading Subpackages Dynamically in LayaAir Engine for Douyin Mini Games using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates dynamic loading of subpackages in a Douyin mini game developed with the LayaAir engine. It defines a Laya.Script subclass that loads two sub-packages ('sub1' and 'sub2') asynchronously, then loads and instantiates 3D prefabs ('Cube.lh' and 'Sphere.lh') from those sub-packages, adding them to a Scene3D instance. The snippet implements a progress callback method to log loading status. Dependencies include the LayaAir TypeScript API with decorators and asynchronous loading methods via Laya.loader.loadPackage and Laya.loader.load. The scene3d property must be linked to a Laya.Scene3D instance. This approach helps manage large projects within Douyin's package size limits by splitting resources into smaller packages loaded on demand.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/byteDance/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        //小游戏加载分包\n        Laya.loader.loadPackage(\"sub1\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n                let sp3: Laya.Sprite3D = res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub2/Sphere.lh\").then((res: any) => {\n                let sp3 = res.create();\n                this.scene3d.addChild(sp3);\n            });\n        })\n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Blueprint Class using bpClass Decorator in TypeScript\nDESCRIPTION: Demonstrates how to expose a custom TypeScript class to the LayaAir blueprint editor using the @bpClass decorator. The snippet shows basic class registration with options such as class name, inheritance, and the ability to be inherited within blueprints. The class extends Laya.Script, a base script class in LayaAir. This registration is necessary to enable instance creation from the blueprint editor's createNew function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass } = BP;\n\n@bpClass({\n    name:\"TestBluePrint\",\n    canInherited: true,\n    extends:\"Script\"\n})\n\nexport class TestBluePrint extends Laya.Script {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Physics Events in Laya.Script (TypeScript)\nDESCRIPTION: Demonstrates implementing physics event handlers within a custom `Laya.Script` component in TypeScript. It covers 2D/3D trigger events (`onTriggerEnter`, `onTriggerStay`, `onTriggerExit`) and 3D collision events (`onCollisionEnter`, `onCollisionStay`, `onCollisionExit`), showing how to access collision information (like labels) and perform actions based on the collision state.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass DemoScript extends Laya.Script {\n    \n    /**\n     * 3D物理触发器事件与2D物理碰撞事件, 在每一次发生物理碰撞的开始时，引擎都会调用一次的事件方法。\n     * @param other 碰撞目标对象的碰撞体以及所属节点对象等信息\n     * @param self  自身的碰撞体以及所属节点对象等信息（该参数只有2D物理有，3D物理只有other）\n     * @param contact  物理引擎携带的碰撞信息b2Contact，开发者可以通过查询b2Contact对象来获取两个刚体碰撞有关的详细信息。但是通常用不上，other和self中已存在常规需要的信用，足够用了。（该参数只有2D物理有，3D物理只有other）\n     */\n     onTriggerEnter(other: Laya.PhysicsComponent | Laya.ColliderBase, self?: Laya.ColliderBase, contact?: any): void {\n        // 假如碰到了炸弹\n        if (other.label == \"bomb\") {\n            // 此处省略爆炸伤害的逻辑\n\n            console.log(\"碰到炸弹：\" + self.label + \"受到伤害，生命值减少xx\");\n\n        } else if (other.label == \"Medicine\") {  // 假如碰到了药箱\n            // 此处省略恢复生命值的逻辑\n\n            console.log(\"碰到药箱：\" + self.label + \"接受治疗，生命值恢复xx\");\n            \n        }\n        console.log(\"onTriggerEnter:\", other, self);\n    }\t\n\n    /**\n    * 3D物理触发器事件与2D物理碰撞事件(不支持传感器), 发生持续的物理碰撞时，也就是碰撞生命周期内的第二次碰撞到碰撞结束前，每帧都在触发调用的事件方法。\n    * 尽量不要在该事件方法中执行复杂的逻辑和函数调用，尤其是运算等消耗性能的代码，否则会对性能有明显的影响。\n    * @param other 碰撞目标对象的碰撞体以及所属节点对象等信息\n    * @param self  自身的碰撞体以及所属节点对象等信息（该参数只有2D物理有，3D物理只有other）\n    * @param contact  物理引擎携带的碰撞信息b2Contact，开发者可以通过查询b2Contact对象来获取两个刚体碰撞有关的详细信息。但是通常用不上，other和self中已存在常规需要的信用，足够用了（该参数只有2D物理有，3D物理只有other）\n    */\n    onTriggerStay(other: Laya.PhysicsComponent | Laya.ColliderBase, self?: Laya.ColliderBase, contact?: any): void {\n        //持续碰撞时，打印日志，尽量不使用该事件方法，如果使用不当对性能的消耗会影响较大。\n        console.log(\"onTriggerStay====\", other, self);\n    }\n\n    /**\n    * 在每一次的物理碰撞结束时，引擎都会调用一次的事件方法。\n    * @param other 碰撞目标对象的碰撞体以及所属节点对象等信息\n    * @param self  自身的碰撞体以及所属节点对象等信息（该参数只有2D物理有，3D物理只有other）\n    * @param contact  物理引擎携带的碰撞信息b2Contact，开发者可以通过查询b2Contact对象来获取两个刚体碰撞有关的详细信息。但是通常用不上，other和self中已存在常规需要的信用，足够用了（该参数只有2D物理有，3D物理只有other）\n    */\n    onTriggerExit(other: Laya.PhysicsComponent | Laya.ColliderBase, self?: Laya.ColliderBase, contact?: any): void {   \n        //模拟角色离开毒气区域，触发逃脱奖励\n        if (other.label == \"poison\") {\n            // 此处省略逃脱奖励的逻辑\n\n            console.log(\"离开毒气区域：\" + self.label + \"获得逃脱奖励，生命值+10\");\n        }\n\n        console.log(\"onTriggerExit========\", other, self);\n    }\n\n    /**\n     * 3D物理碰撞器事件（不适用2D），在每一次发生物理碰撞的开始时，引擎都会调用一次的事件方法。\n     * @param other 碰撞目标对象\n     */\n    onCollisionEnter(other:Laya.Collision): void {\n        //碰撞开始后，物体改变颜色\n        (this.owner.getComponent(Laya.MeshRenderer).material as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(0.0, 1.0, 0.0, 1.0);//绿色\n    }\n\n    /**\n    * 发生持续物理碰撞时的3D物理碰撞器事件（不适用2D），也就是碰撞生命周期内的第二次碰撞到碰撞结束前，每帧都在触发调用的事件方法。\n    * 尽量不要在该事件方法中执行复杂的逻辑和函数调用，尤其是运算等消耗性能的代码，否则会对性能有明显的影响。\n    * @param other 碰撞目标对象\n    */\n    onCollisionStay(other:Laya.Collision): void {\n    \t//持续碰撞时，打印日志，尽量不使用该事件方法，如果使用不当对性能的消耗会影响较大。\n        console.log(\"peng\");\n    }\n\n   /**\n    * 3D物理碰撞器事件（不适用2D），在每一次的物理碰撞结束时，引擎都会调用一次的事件方法。\n    * @param other 碰撞目标对象\n    */\n    onCollisionExit(other:Laya.Collision): void {\n        ////碰撞离开后，物体变回原本颜色\n\t\t(this.owner.getComponent(Laya.MeshRenderer).material as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 1.0, 1.0, 1.0);//白色\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 优化大量文本渲染的性能示例（开启cacheAs）\nDESCRIPTION: 示例中在Sprite容器上设置cacheAs=\"bitmap\"，实现缓存整个容器的绘图，从而极大降低渲染负担，提高FPS。此方法适用于内容静态或不频繁变化的场景，有助于提升整体性能。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/rendering/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//省略其他部分\nvar textBox=new Laya.Sprite();\ntextBox.cacheAs=\"bitmap\";\n//...后续渲染代码\n```\n\n----------------------------------------\n\nTITLE: Unloading Loaded Assets in LayaAir (TypeScript)\nDESCRIPTION: Shows how to unload specific assets previously loaded via `Laya.loader.load`. The code iterates through an array of asset paths, verifies their presence in memory using `Laya.loader.getRes`, unloads them using `Laya.loader.clearRes`, and confirms their removal by checking `getRes` again.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/memory/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvar assets: Array<any> = []\nassets.push(\"res/apes/monkey0.png\");\nassets.push(\"res/apes/monkey1.png\");\nassets.push(\"res/apes/monkey2.png\");\nassets.push(\"res/apes/monkey3.png\");\nLaya.loader.load(assets, Laya.Handler.create(this, onAssetsLoaded));\nfunction onAssetsLoaded():void\n{\n  for(var i:number = 0, len: number = assets.length; i<len; ++i)\n  {\n    var asset:string = assets[i];\n    //查看log，清理前资源一直在内存中\n    console.log(Laya.loader.getRes(asset));\n    //调用清理方法\n    Laya.loader.clearRes(asset);\n    //查看log，清理后，资源被卸载\n    console.log(Laya.loader.getRes(asset));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Character Position (CharacterController)\nDESCRIPTION: This code snippet demonstrates how to set the position of a CharacterController. It retrieves the CharacterController component from a Sprite3D and sets its position using a Vector3.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/CharacterController/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n        //设置出生点位置\n        this.characterController.position = new Laya.Vector3(0, 0, 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Parent and Child Nodes to Demonstrate Hierarchy (TypeScript)\nDESCRIPTION: Demonstrates translation of parent and child Sprite3D nodes using the transform translate method. When the parent moves, all child nodes move accordingly. Code assumes layaMonkeyParent and layaMonkeySon are Sprite3D instances with transform property.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.layaMonkeyParent.transform.translate(new Laya.Vector3(-0.2, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Loading a Prefab with Addressables in LayaAir (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to load a prefab in LayaAir using the Addressables system. It uses both `instantiateAsync` to directly create an instance and `loadAssetAsync` followed by `create()` to load the prefab and then instantiate it.  It requires the Addressables plugin to be installed and configured.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/apply/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@regClass()\nexport class LoadPrefab extends Laya.Script {\n\n    @property(Laya.Scene3D)\n    public scene: Laya.Scene3D;\n\n    key: string = \"prefabForLoad\"\n\n    onStart(): void {\n        Addressables.instantiateAsync(this.key).then((res) => {\n            res.data.transform.position = new Laya.Vector3(-3, 0, 0);\n            this.scene.addChild(res.data);\n        })\n\n        Addressables.loadAssetAsync(this.key).then((res) => {\n            let prefab = res.data.create();\n            prefab.transform.position = new Laya.Vector3(3, 0, 0);\n            this.scene.addChild(prefab);\n        })\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating HSlider Programmatically and Handling Value Changes in TypeScript\nDESCRIPTION: This example shows how to create an HSlider component dynamically via code, set its properties such as skin, size, min/max values, and attach a change handler to log its current value. It illustrates programmatic UI control in LayaAir.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/HSlider/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_HSlider extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    onAwake(): void {\n        let skins: any[] = [];\n        skins.push(\"hslider.png\", \"hslider$bar.png\"); //图片资源来自“引擎API使用示例”\n        Laya.loader.load(skins, Laya.Handler.create(this, this.placeHSlider));\n    }\n\n    private placeHSlider(): void {\n        let hs: Laya.HSlider = new Laya.HSlider();\n        hs.skin = \"hslider.png\";\n        hs.width = 300;\n        hs.pos(50, 500);\n        hs.min = 0;\n        hs.max = 100;\n        hs.value = 50;\n        hs.tick = 1;\n        hs.changeHandler = new Laya.Handler(this, this.onChange);\n        this.owner.addChild(hs);\n    }\n\n    private onChange(value: number): void {\n        console.log(\"滑块的位置：\" + value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing 9-Grid Texture with draw9Grid - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `draw9Grid()` method of the `laya.display.Graphics` class to draw a 9-grid texture on a Sprite.  It first loads a texture using `Laya.loader.load()`.  Once the texture is loaded, it initializes a Sprite and calls `draw9Grid()` with the loaded texture, coordinates, width, height, and sizeGrid (9-slice scaling parameters).  The Sprite is then added to the display list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"atlas/comp/image.png\").then((res: Laya.Texture) => {\n    let sp = new Laya.Sprite();\n    // 绘制九宫格纹理\n    sp.graphics.draw9Grid(res, 0, 0, 1024, 626, [0, 0, 0, 0, 1]);\n    this.owner.addChild(sp);\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning a Sprite3D Using the clone Method (TypeScript)\nDESCRIPTION: Implements the clone method for Node/Sprite3D, creating a deep copy by invoking internal _createSprite3DInstance and _parseSprite3DInstance routines. Returns the duplicated Node object; assumes Sprite3D is the context and that deep copy of properties and children is handled in private/internal methods.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): Node {\n        var dstSprite3D: Node = Sprite3D._createSprite3DInstance(this);\n        Sprite3D._parseSprite3DInstance(this, dstSprite3D, this, dstSprite3D);\n        return dstSprite3D;\n    }\n```\n\n----------------------------------------\n\nTITLE: Declaring Shader Passes Inside Shader3D Configuration - TypeScript\nDESCRIPTION: Demonstrates how to declare one or multiple 'pass' objects inside the 'shaderPass' array within a Shader3D configuration block. A Pass defines GPU state settings and shader programs (vertex and fragment shaders) executed on the GPU. Grouping passes under a SubShader enables supporting different rendering pipelines or hardware configurations. The snippet follows TypeScript-like syntax encapsulated between 'Shader3D Start' and 'Shader3D End'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n    .....\n    shaderPass:[\n        {\n            //Shader VS/FS Info here\n        }\n    ]\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Applying Zip Package Update with updateByZip Function (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates an asynchronous function for patching local resource caches using a pre-generated zip file, generally produced with DCC. Prerequisites include custom ZipFile/IZip compatible class constructors and methods for file read/write. The method processes the archive, extracts files in sequence, writes head.json metadata, and updates root data using internal helpers. Designed for patch updates, users must implement their own progress feedback and version management logic. This implementation assumes zip archives are already locally downloaded before invocation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/zipUpdate/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    /**\n     * \\u6839\\u636e\\u6307\\u5b9a\\u7684zip\\u6587\\u4ef6\\u66f4\\u65b0\\u672c\\u5730\\u7f13\\u5b58\\u3002\n     * \\u8fd9\\u4e2azip\\u6587\\u4ef6\\u53ef\\u4ee5\\u901a\\u8fc7DCC\\u63d2\\u4ef6\\u7684\\u8865\\u4e01\\u751f\\u6210\\u5de5\\u5177\\u6765\\u751f\\u6210\\u3002\n     * \n     * \\u8fd9\\u4e2a\\u4f1a\\u4fee\\u6539\\u672c\\u5730\\u4fdd\\u5b58\\u7684root\n     * @param zipfile \\u6253\\u8865\\u4e01\\u7684zip\\u6587\\u4ef6\\uff0c\\u6ce8\\u610f\\u8fd9\\u91cc\\u5fc5\\u987b\\u662f\\u672c\\u5730\\u76ee\\u5f55\\uff0c\\u6240\\u4ee5\\u9700\\u8981\\u81ea\\u5df1\\u5b9e\\u73b0\\u4e0b\\u8f7dzip\\u5230\\u672c\\u5730\\u4e4b\\u540e\\u624d\\u80fd\\u8c03\\u7528\\u8fd9\\u4e2a\\u51fd\\u6570\\u3002\n     * @param progress \\u8fdb\\u5ea6\\u63d0\\u793a\\uff0c\\u6682\\u65f6\\u6ca1\\u6709\\u5b9e\\u73b0\\u3002\n     */\n    async updateByZip(zipfile: string, zipClass: new () => IZip, progress: (p: number) => void) {\n        let zip = new zipClass();\n        zip.open(zipfile);\n        //TODO \\u6570\\u636e\\u592a\\u591a\\u7684\\u65f6\\u5019\\u8981\\u63a7\\u5236\\u5e76\\u53d1\n        zip.forEach(async entry => {\n            if (entry.entryName == 'head.json') {\n            } else {\n                await this.addObject(entry.entryName, entry.getData())\n            }\n        })\n        //\\u5199head\\u3002zip\\u4e2d\\u53ef\\u80fd\\u6ca1\\u6709head.json\\uff0c\\u4f8b\\u5982\\u53ea\\u662f\\u67d0\\u4e2a\\u76ee\\u5f55\\uff0c\\u8fd9\\u65f6\\u5019\\u5c31\\u4e0d\\u8981\\u66f4\\u65b0root\\u4e86\n        try {\n            let buf = zip.getEntry('head.json');\n            await this._frw.write('head.json', buf.getData().buffer, true);\n            //\\u66f4\\u65b0\\u81ea\\u5df1\\u7684root\n            let localHeadStr = await this._frw.read('head.json', 'utf8', true) as string;\n            let localHead = JSON.parse(localHeadStr) as RootDesc;\n            await this._gitfs.setRoot(localHead.root);\n        } catch (e) {\n\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Collision Groups with Bitwise OR (TypeScript)\nDESCRIPTION: This snippet demonstrates how to allow a collider to interact with several collision groups by combining group flags using bitwise OR '|'. It uses Laya.Physics3DUtils constants for clarity and supports scenarios needing fine-grained collision control. Requires a collider prepared for assignment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器可以与其发生碰撞的碰撞组(本例只与自定义组1、2、5进行碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1 | Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2 | Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;\n```\n\n----------------------------------------\n\nTITLE: Raycasting and Handling Results in LayaAir\nDESCRIPTION: This snippet shows how to perform raycasting against all objects in a scene using `rayCastAll`. It calculates the ray from a screen point and processes the intersection results to add a box at the hit location.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//创建一个屏幕点\nlet point = new Laya.Vector2();\n//创建一个射线 Laya.Ray(射线的起点，射线的方向)\nlet ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\n//以鼠标点击的点作为原点\npoint.x = Laya.stage.mouseX;\npoint.y = Laya.stage.mouseY;\n//计算一个从屏幕空间生成的射线\n_camera.viewportPointToRay(point, ray);\n//拿到3D场景中射线碰撞的物体\n_scene3D.physicsSimulation.rayCastAll(ray,this.outs);\n//如果射线碰撞到物体\nif (this.outs.length !== 0) {\n    for (let i = 0; i < this.outs.length; i++){\n        //在射线击中的位置添加一个立方体\n        this.addBoxXYZ(this.outs[i].point.x, this.outs[i].point.y, this.outs[i].point.z );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scene Destruction and Garbage Collection\nDESCRIPTION: Methods for destroying scenes and cleaning up unused resources to manage memory efficiently.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 根据地址，销毁场景（包括对话框）\n * @param\turl\t\t场景地址\n * @param\tname\t如果name不为空，name必须相同才能关闭\n * @return\t返回是否销毁成功，如果url找不到，则不成功\n*/\nstatic destroy(url: string, name?: string): boolean {\n\n/**\n * 销毁当前没有被使用的资源,该函数会忽略lock=true的资源。\n*/\nstatic gc(): void {\n    Resource.destroyUnusedResources();\n}\n\n// Example usage:\nLaya.Scene.destroy(\"scene.ls\");\nLaya.Scene.gc();\n```\n\n----------------------------------------\n\nTITLE: Controlling Visibility, Editability, and Input of LayaAir Decorated Properties in TypeScript\nDESCRIPTION: This snippet demonstrates advanced usage of the @property decorator in LayaAir to control UI property visibility (via 'hidden'), readonly states ('readonly'), value validation ('validator'), password input, input submission modes, prompt/hint display, enum dropdowns, boolean inversions, nullable types, numeric ranges/precision (including percentage), and custom order and indentation. It also showcases configuring color pickers, resource paths, fixed-length arrays, array actions, dynamic array element properties, and change-event binding. Dependencies: LayaAir engine, TypeScript. Each usage details constraints or UI control afforded via decorator options for robust editor experiences.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t//隐藏控制\n    @property({ type: Boolean })\n    a: boolean;\n    @property({ type: String, hidden: \"!data.a\" })//将条件表达式!data.a放在了字符串中，如果a为true（在IDE中为勾选状态），则!data.a返回false，此时hidden属性表示的是显示\n    hide: string = \"\";\n\n\t// 只读控制\n    @property({ type: Boolean })\n    b: boolean;\n    @property({ type: String, readonly: \"data.b\" })//将条件表达式data.b放在了字符串中，如果b为true（在IDE中为勾选状态），则data.b就返回true，此时readonly属性表示只读\n    read: string = \"\";\n\n\t//数据检查机制\n    @property(String)\n    text1: string;\n    @property({ type: String, validator: \"if (value == data.text1) return '不能与a值相同' \" })\n    text2: string = \"\";\n\n\t//密码输入\n    @property({ type: String, password: true })\n    password: string;\n\n\t//如果true或者缺省，文本输入每次输入都提交；否则只有在失焦时才提交\n    @property({ type: String, submitOnTyping: false })\n    submit: string;\n\n\t//输入文本的提示信息\n    @property({ type: \"text\", prompt: \"文本提示信息\" })\n    prompt: string;\n\n\t//显示为下拉框\n    @property({ type: Number, enumSource: [{name:\"Yes\", value:1}, {name:\"No\",value:0}] })\n    enumsource: number;\n\n\t//反转布尔值\n    @property({ type: \"boolean\", reverseBool: true })\n\treverseboolean : boolean;\n\t\n\t//允许null值\n    @property({ type: String, nullable: true })\n    nullable: string;\n\n\t//控制数字输入的精度和范围\n    @property({ type: Number, range:[0,5], step: 0.5, fractionDigits: 3 })\n    range : number;\n\n\t//显示为百分比\n    @property({ type: Number, range:[0,1], percentage: true })\n    percent : number;\n\n\t//固定数组长度\n    @property({ type: [\"number\"], fixedLength: true })\n    arr1: number[];\n\n\t//数组允许的操作\n    @property({ type: [\"number\"], arrayActions: [\"delete\", \"move\"] })\n    arr2: number[];\n\n    //使数组元素编辑时限制最大值和最小值\n    @property({ type: [Number], elementProps: { range: [0, 100] } })\n    array1: Array<Number>;\n    //如果是多维数组，则elementProps同样需要使用多层\n    @property({ type: [[Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    array2: Array<Array<Number>>;\n\n\t//不提供透明度a值的修改\n    @property({ type: Laya.Color, showAlpha: false })\n    color1: Laya.Color;\n\n\t//颜色类型时，defaultColor定义一个非null时的默认值\n    @property({ type: String, inspector: \"color\", defaultColor: \"rgba(217, 232, 0, 1)\" })\n    color2: string;\n\n\t//显示一个checkbox决定颜色是否为null\n    @property({ type: Laya.Color, colorNullable: true })\n    color3: Laya.Color;\n\n\t//加载Image资源类型，设置资源路径格式\n    @property({ type: String, isAsset: true, assetTypeFilter: \"Image\" })\n    resource: string;\n\n    //x属性出现在testposition属性之前\n    @property({ type: String })\n    x: string;\n    //可以用position人为将testposition属性安排在x属性之前显示\n    @property({ type: String, position: \"before x\" })\n    testposition: string;\n\n\t//增加缩进，单位是层级\n    @property({ type: String, addIndent:1 })\n    indent1: string;\n    @property({ type: String, addIndent:2 })\n    indent2: string;\n\n    //当属性改变时，调用名称为onChangeTest的函数\n    @property({ type: Boolean, onChange: \"onChangeTest\"})\n    change: boolean;\n    onChangeTest() {\n        console.log(\"onChangeTest\");\n    }\n```\n\n----------------------------------------\n\nTITLE: CommandBuffer Rendering Commands\nDESCRIPTION: This snippet provides a list of individual rendering commands used within a CommandBuffer. These commands include setting shader data, setting global shader data, blitting screen quads, setting render targets, clearing render targets, drawing meshes, and drawing renders. These commands can be composed to form a custom rendering pipeline.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/CommandBuffer/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetShaderData//设置shader数据，可以设置shader中的texture vector number等\nsetGlobalShaderData//设置全局数据，可以用于所有的shader\nblitScreenQuad//通过全屏四边形将源纹理渲染到目标渲染纹理指令。blitScreenQuadByMaterial//通过全屏四边形将源纹理渲染到目标渲染纹理指令\nsetRenderTarget//设置指令渲染目标，调用后，所有的渲染都会渲染到方法绑定的图片上\nclearRenderTarget//清理绑定的渲染纹理\ndrawMesh//渲染一个Mesh\ndrawRender//渲染一个Render\n```\n\n----------------------------------------\n\nTITLE: Providing Dynamic Dropdown Data for LayaAir Property Editor in TypeScript\nDESCRIPTION: This snippet shows how to dynamically provide an options list for a property in the LayaAir editor via a getter method, using a property with @property({serializable: false}) and then referencing this as an enumSource on another property. This approach enables editor dropdown lists that change based on runtime or component-specific state, not just static arrays. Dependencies: LayaAir engine, TypeScript. The getter returns an array of records with 'name' and 'value' fields, and the dropdown property binds to this source via enumSource.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n    //这个属性提供一个get方法，返回下拉选项，这个数据一般只用于编辑器，所以设置不保存\n    @property({ type: [[\"Record\", String]], serializable: false })\n    get itemsProvider(): Array<Record<string, string>> {\n        return [{ name: \"Item0\", value: \"0\" }, { name: \"Item1\", value: \"1\" }];\n    }\n    //将enumSource设置为一个字符串，表示使用该名字的属性作为下拉数据源\n    @property({ type: String, enumSource: \"itemsProvider\" })\n    enumItems: string;\n```\n\n----------------------------------------\n\nTITLE: Comprehensively Setting Text Properties via Script in LayaAir - TypeScript\nDESCRIPTION: This snippet configures all major properties of a Laya.Text instance through script, including position, size, styling (font, fontSize, bold, italic, underline), colors, stroke, word wrap, alignment, overflow, and others. It must be attached as a component to a node within a LayaAir 2D scene. The script demonstrates manipulating Text for rich formatting and layout using LayaAir API, with expected input as the property-injected Text instance (txt).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Text/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class TextControl extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property( { type : Laya.Text } )\n    public txt: Laya.Text;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.txt.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        this.txt.size(500, 30); //大小\n        this.txt.pivot(this.txt.width/2, this.txt.height/2); //轴心点\n        this.txt.text = \"大家好，欢迎各位开发者使用LayaAir IDE，这里是Text的文本内容，您可以基于此文本进行调试\"; //文本内容\n        this.txt.font = \"宋体\"; //字体\n        this.txt.fontSize = 50; //字体大小\n        this.txt.color = \"#ff0000\"; //字体颜色\n        this.txt.bold = true; //加粗\n        this.txt.italic = true; //斜体\n        this.txt.underline = true; //下划线\n        this.txt.underlineColor = \"#ff0000\"; //下划线颜色\n\n        this.txt.stroke = 5; //描边宽度\n        this.txt.strokeColor = \"#000000\" ; //描边颜色\n\n        this.txt.wordWrap = true; //自动换行\n        this.txt.leading = 20; //垂直行间距\n        // this.txt.padding = [10, 10, 10, 10]; //文本边距\n\n        this.txt.align = \"center\"; //水平对齐方式\n        this.txt.valign = \"top\"; //垂直对齐方式\n\n        this.txt.overflow = \"visible\"; //文本溢出\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Wheel Zoom in LayaAir\nDESCRIPTION: A complete example showing how to implement mouse wheel zooming functionality where the zoom centers on the mouse cursor position, including coordinate conversions and boundary checks.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class XX extends Laya.Script {\n\tprivate _owner: Laya.Image;\n  \n  onEnable(): void {\n    this._owner = this.owner as Laya.Image;\n    this.onMouseWheel();\n  }\n  \n  /** 帧听滚轮事件，并处理滚动 */\n  onMouseWheel(): void {\n    //处理滚轮事件的帧听\n    this.owner.on(Laya.Event.MOUSE_WHEEL, this, (e: Laya.Event) => {\n      //转换舞台坐标为本地坐标\n      let point: Laya.Point = this._owner.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));\n\n      if (e.delta > 0) { //当滑轮向上滚动时，增加xy缩放值  \n        this._owner.scaleX += 0.1;\n        this._owner.scaleY += 0.1;\n      }\n      if (e.delta < 0) { //当滑轮向下滚动时，减少xy缩放值\n        this._owner.scaleX -= 0.1;\n        this._owner.scaleY -= 0.1;\n        //设置xy最小缩放值\n        (this._owner.scaleX < 0.8) && (this._owner.scaleX = 0.8);\n        (this._owner.scaleY < 0.8) && (this._owner.scaleY = 0.8);\n      }\n\n      //缩放后的鼠标位置\n      let point2: Laya.Point = this._owner.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));\n\n      //计算缩放引发的xy偏移值\n      let _offsetX = (point2.x - point.x) * this._owner.scaleX;\n      let _offsetY = (point2.y - point.y) * this._owner.scaleY;\n\n      //修正坐标位置\n      this._owner.x += _offsetX;\n      this._owner.y += _offsetY;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Asset Async Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to asynchronously load a single asset using the `loadAssetAsync` function provided by the LayaAir Addressables system.  It takes a resource key (alias or ID) and optional loading options as input.  The output is a Promise that resolves to a `LoadResult` object containing the loaded asset.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 加载资源\n * @param key 用来筛选资源的关键字\n * @param options {LoadAssetOptions} 加载资源的选项\n * @returns {Promise<LoadResult>}\n */\nstatic async loadAssetAsync(key: string, options?: LoadAssetOptions): Promise<LoadResult> ;\n```\n\n----------------------------------------\n\nTITLE: Mouse Event Implementation in Laya Script - TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement `onMouseDown` and `onMouseUp` events in a LayaAir script using the `Laya.Script` class.  It includes the `regClass` decorator to register the script and prints to the console when the events are triggered.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    /**\n     * 鼠标按下时执行\n     */\n\tonMouseDown(evt: Laya.Event): void {\n        console.log(\"onMouseDown\");\n    }\n    /**\n     * 鼠标抬起时执行\n     */\n    onMouseUp(evt: Laya.Event): void {\n        console.log(\"onMouseUp\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 实现摄像机跟随目标的移动控制脚本（TypeScript）\nDESCRIPTION: 该脚本为LayaAir中的CameraControll组件，用于在3D场景中实现摄像机对目标物体的平滑跟踪，包括位置平滑变化和坐标更新。依赖Laya引擎核心类，需绑定在摄像机对象上并设置目标对象。主要参数有目标对象、偏移距离和移动平滑系数。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport default class CameraControll extends Laya.Script {\n    @property( { type: Laya.Sprite3D } )\n    public target: Laya.Sprite3D;\n    private camera: Laya.Camera;\n    public distanceUp: number = 0.5;\n    public distanceAway: number = 10;\n    public smooth: number = 2;\n    public camDepthSmooth: number = 20\n    public curpos: Laya.Vector3;\n    private delatpos: Laya.Vector3;\n    constructor() {\n        super();\n    }\n    onAwake(): void {\n        this.curpos = new Laya.Vector3();\n    }\n    onStart(): void {\n        this.camera = this.owner as Laya.Camera;\n        if (this.target) {\n            this.target.transform.position.cloneTo(this.curpos);\n            this.delatpos = new Laya.Vector3();\n        }\n    }\n    onUpdate(): void {\n        if (!this.target || !this.camera) return;\n        this.target.transform.position.vsub(this.curpos, this.delatpos);\n        this.camera.transform.position.vadd(this.delatpos, this.delatpos);\n        this.camera.transform.position = this.delatpos;\n        this.target.transform.position.cloneTo(this.curpos);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Single Resource (with Type) in LayaAir with TypeScript\nDESCRIPTION: This code snippet demonstrates how to load a single resource and explicitly specify its type using the second parameter of `Laya.loader.load()`.  This is useful for resources without file extensions or when a specific type is required. The `.then()` callback handles the loaded resource.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(url, type).then((res)=> {\n    //带类型，用于区别无后缀，或同一后缀不同作用的资源。\n    //例如，图片xxx.png被定义为TextureCube，使用load(\"xxx.png\", Laya.Loader.TEXTURECUBE)。得到的是TextureCube。\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling ProgressBar with Script (TypeScript)\nDESCRIPTION: This snippet demonstrates how to control a ProgressBar component using a custom TypeScript script in LayaAir. It initializes the progress bar, simulates loading, and updates the progress bar's value and text label.  It relies on Laya's timer for simulating the loading process.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/ProgressBar/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.ProgressBar })\n    public progressBar: Laya.ProgressBar;\n\n    @property({ type: Laya.Text })\n    public loadText: Laya.Text;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.progressBar.value = 0.01; //初始进度值\n        this.loadText.text = \"资源加载中……\";\n        // 测试加载效果\n        Laya.timer.loop(100, this, this.changeProgress);\n    }\n\n    //这里仅模拟加载演示效果\n    changeProgress(): void {\n        this.progressBar.value += 0.05; //每次进度条的改变量\n        if (this.progressBar.value == 1) {\n            this.loadText.text = \"资源加载完成\";\n            Laya.timer.clear(this, this.changeProgress);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scripting ComboBox Control with LayaAir\nDESCRIPTION: This code snippet demonstrates how to create a custom script to control a ComboBox component in LayaAir. It uses the `@regClass` and `@property` decorators to define a class that can be assigned to a scene node and linked to a ComboBox instance. It sets the position, labels, colors, item height, item colors, selected index and scroll bar skin of the ComboBox when the script is activated.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/ComboBox/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.ComboBox })\n    public combobox: Laya.ComboBox;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.combobox.pos(100, 100);\n        this.combobox.labels = \"item0,item1,item2,item3,item4,item5,item6,item7\";\n        this.combobox.labelColors = \"#32556b,#32cc6b,#ff0000\";\n        this.combobox.itemHeight = 60;\n        // itemColors格式：\"悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色\"\n        this.combobox.itemColors = \"#5e95b6,#ffffff,#000000,#ff0000,#ffffff\";\n        this.combobox.selectedIndex = 1;\n        this.combobox.scrollBarSkin = \"atlas/comp/vscroll.png\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Animator Component - Typescript\nDESCRIPTION: This code snippet demonstrates how to obtain the Animator component attached to a Sprite3D using the `getComponent()` method. It is essential for controlling and manipulating animations within the LayaAir 3D engine. It assumes that the target object (this.target) has an Animator component attached to it.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//获得状态机\nthis.animator = this.target.getComponent<Laya.Animator>(Laya.Animator);\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Loader\nDESCRIPTION: This snippet demonstrates how to create a custom asset loader using `@Laya.regLoader` for resources loaded at runtime and support hot-reloading. The `load` method is used to load the resource asynchronously, fetching data, and creating/updating the resource instance.  The third argument to `@Laya.regLoader` indicates that the loader supports hot reloading. Dependencies: LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n//因为这个类需要在实际游戏环境中使用，所有请勿和其他包含@IEditorEnv装饰器的脚本混杂在一起\n\n//第三个参数是true，表示资源支持热重载。如果资源需要支持热重载，需要在load方法里判断是否有task.obsuluteInst,\n//如果有，需要使用此实例去重载资源的实际内容并返回。如果不需要支持热重载，则忽略。\n@Laya.regLoader([\"abc\"], null, true)\nexport class DemoAssetLoader implements Laya.IResourceLoader {\n\n    async load(task: Laya.ILoadTask): Promise<any> {\n        let json = await task.loader.fetch(task.url, \"json\");\n        let res = task.obsoluteInst ? task.obsoluteInst : new ABCResource();\n        Object.assign(res, json);\n        return res;\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Android Back Button in LayaNative (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to override the default Android back button behavior in LayaNative. It uses the `conch.setOnBackPressedFunction()` to register a custom function that is executed when the back button is pressed. The function logs a message to the console and eventually exits the application using `conch.exit()` after a certain number of presses. This code is intended for LayaNative Android environments, and the `conch` object should be checked for existence before use. The variable 'n' controls how many back presses are needed to exit the app.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Android_BackPress/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar n=3;\nif(window.conch){\n    window.conch.setOnBackPressedFunction(()=>{\n        console.log('press back '+n);\n        if(n-- <=0){\n            window.conch.exit();\n        }\n        else{\n            //用户自己的代码，例如返回上层页面\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notch Screen Safe Area in LayaAirIDE UI Components using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to dynamically adjust a UI container's top and bottom layout properties in LayaAirIDE based on device aspect ratio, targeting notch screen support. The code checks if the screen height-to-width ratio exceeds 2, indicative of a notch screen, then sets specific safe area margins by updating the container's top and bottom. Requires LayaAir runtime environment with access to Browser and UI component references. Accepts no external parameters; modifies 'scaleGroup' layout fields in the scene. Outputs side effects on layout, limited to runtime lifecycle hooks.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/adaptScreen/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nonAwake():void{\n    //宽高比大于2为刘海屏    \n    if((Browser.clientHeight/Browser.clientWidth)>2)\n    {        \n        this.scaleGroup.top = 25; //回避顶部刘海示例代码        \n        this.scaleGroup.bottom = 50;//回避底部线示例代码    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Property Visibility with private Parameter\nDESCRIPTION: Shows how to control the visibility of properties in the IDE using the private parameter. This allows exposing underscore-prefixed properties or hiding regular properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@property({ type: \"number\", private: false })\n_velocity: number = 0;\n```\n\n----------------------------------------\n\nTITLE: Accessing 3D Node Properties via Component Property in LayaAir TypeScript\nDESCRIPTION: This example shows exposing a component property `p3dRenderer` directly, typed as `Laya.ShurikenParticleRenderer`, using `@property`. In `onAwake`, it accesses the owner node of the component using `(this.p3dRenderer.owner as Laya.Sprite3D)` to modify its `localPosition`. It also directly modifies the component's `particleSystem.simulationSpeed`. This requires dragging a node containing the specified component onto the property in the editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/componentProperties/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    @property( { type : Laya.ShurikenParticleRenderer } ) //组件类型\n    public p3dRenderer: Laya.ShurikenParticleRenderer;\n\n    onAwake(): void {\n\n        (this.p3dRenderer.owner as Laya.Sprite3D).transform.localPosition = new Laya.Vector3(0,5,5);\n        this.p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: Bullet Component Implementation with Object Pooling in LayaAir\nDESCRIPTION: A practical example of a bullet script component that handles initialization, movement, collision detection, and recycling through object pooling. This demonstrates proper use of onEnable, onTriggerEnter, onUpdate, and onDisable lifecycle methods.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n/**\n * 子弹脚本，实现子弹飞行逻辑及对象池回收机制\n */\n @regClass()\nexport default class Bullet extends Laya.Script {\n    constructor() { super(); }\n\n    onEnable(): void {\n        //设置初始速度\n        let rig: Laya.RigidBody = this.owner.getComponent(Laya.RigidBody);\n        rig.setVelocity({ x: 0, y: -10 });\n    }\n\n    onTriggerEnter(other: any, self: any, contact: any): void {\n        //如果被碰到，则移除子弹\n        this.owner.removeSelf();\n    }\n\n    onUpdate(): void {\n        //如果子弹超出屏幕，则移除子弹\n        if ((this.owner as Laya.Sprite).y < -10) {\n            this.owner.removeSelf();\n        }\n    }\n\n    onDisable(): void {\n        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销\n        Laya.Pool.recover(\"bullet\", this.owner);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Laya.Byte and Setting Endianness in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new instance of the Laya.Byte class and set its byte order (endianness) to little-endian. Setting the endianness is crucial for ensuring consistent interpretation of multi-byte data types across different systems, especially in network communication.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n//  初始化用于二进制数据处理的 Laya.Byte\nlet byte = new Laya.Byte();\n// 设置字节序为小端模式\nbyte.endian = Laya.Byte.LITTLE_ENDIAN;\n```\n\n----------------------------------------\n\nTITLE: Loading Page Implementation for Scenes\nDESCRIPTION: Methods for setting up and managing loading pages that display while scenes are being loaded, including custom loading scenes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Prefab })\n    private loadingScenePrefab: Laya.Prefab;\n\n    private loadingScene: Laya.Node;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 第一次执行update之前执行，只会执行一次\n     */\n    onStart(): void {\n        //创建Loading场景\n        this.loadingScene = this.loadingScenePrefab.create();\n        //设置Loading场景\n        Laya.Scene.setLoadingPage(this.loadingScene as Laya.Sprite);\n        //手动调用显示Loading场景\n        Laya.Scene.showLoadingPage(this.loadingScene);\n        Laya.timer.once(3000,this,()=>{\n            //3秒后跳转到Game场景\n            Laya.Scene.open(\"Game.ls\");\n        })\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying a 2D Node (Laya.Sprite) in LayaAir TypeScript\nDESCRIPTION: This snippet demonstrates declaring a public property `spr` of type `Laya.Sprite` using the `@property` decorator. In the `onAwake` method, the script accesses this linked 2D node to set its size using `size()` and load an image texture using `loadImage()`. This requires dragging a Sprite node onto the exposed property in the LayaAir editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/componentProperties/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite})\n    public spr: Laya.Sprite;\n    \n    onAwake(): void {\n        this.spr.size(512, 313); //设置Sprite大小\n        this.spr.loadImage(\"atlas/comp/image.png\"); //添加纹理\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RadioGroup Programmatically - LayaAir - TypeScript\nDESCRIPTION: Provides an example of creating and configuring multiple instances of the RadioGroup component dynamically using TypeScript code. It shows how to load different skin resources, iterate through them to create individual RadioGroup instances, set various visual and layout properties like skin, space, direction, labels, label styles (colors, size, bold), attach an event handler for selection changes, and add the components to the display list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/RadioGroup/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_RadioGroup extends Laya.Script {\n\n    private SPACING: number = 150;\n    private X_OFFSET: number = 200;\n    private Y_OFFSET: number = 80;\n\n    private skins: any[];\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.skins = [\"resources/res/ui/radioButton (1).png\", \"resources/res/ui/radioButton (2).png\", \"resources/res/ui/radioButton (3).png\"];\n        Laya.loader.load(this.skins).then(() => {\n            this.onLoadComplete();\n        });\n    }\n\n    private onLoadComplete(e: any = null): void {\n        for (let i: number = 0; i < this.skins.length; ++i) {\n            let rg: Laya.RadioGroup = this.createRadioGroup(this.skins[i]);\n            rg.selectedIndex = i;\n            rg.x = i * this.SPACING + this.X_OFFSET;\n            rg.y = this.Y_OFFSET;\n        }\n    }\n\n    private createRadioGroup(skin: string): Laya.RadioGroup {\n        let rg: Laya.RadioGroup = new Laya.RadioGroup();\n        rg.skin = skin;\n        rg.space = 70;\n        rg.direction = \"vertical\";\n        rg.labels = \"Item1, Item2, Item3\";\n        rg.labelColors = \"#787878,#d3d3d3,#FFFFFF\";\n        rg.labelSize = 20;\n        rg.labelBold = true;\n        rg.selectHandler = new Laya.Handler(this, this.onSelectChange);\n        this.owner.addChild(rg);\n        return rg;\n    }\n\n    private onSelectChange(index: number): void {\n        console.log(\"你选择了第 \" + (index + 1) + \" 项\");\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Script Entry Point Generated by LayaAir IDE with TypeScript\nDESCRIPTION: This snippet illustrates extending a generated base class (MainBase) for a Runtime script entry point in LayaAir 3.0. The base class is generated by the IDE based on scene component declarations. The Main class overrides the onStart lifecycle method to implement initialization logic, such as logging and setting component visibility. This approach leverages code generation and supports reuse of Runtime classes across components, with the limitation that Runtime scripts cannot add new properties or be used in View/Dialog pages.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/entrance/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MainBase } from \"./Main_gen\";\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends MainBase {\n\n    onStart() {\n        console.log(\"Game start\");\n        this.img.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Component Class with @regClass Decorator in TypeScript\nDESCRIPTION: This snippet demonstrates how to register a component script class with the LayaAir IDE using the @regClass() decorator. Only classes decorated with @regClass() are recognized by the IDE as components and can be added to nodes via the property panel. Prerequisites include importing regClass from Laya. Only one class per TypeScript file should use @regClass(). Classes not referenced or added to published scenes/prefabs may be trimmed in the final build.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Event Listeners for Sprites in LayaAir\nDESCRIPTION: This code demonstrates how to set up mouse event listeners for Sprite objects and explains how mouseEnabled property is automatically set to true when event listeners are added. It also shows how to access and manipulate sprite properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Sprite })\n    public sprite1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    public sprite2: Laya.Sprite;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.sprite2.on(Laya.Event.MOUSE_DOWN, this, this.test2);//设置监听，sprite1或sprite2均可\n        console.log(this.sprite1.mouseEnabled);//打印父节点sprite1的MouseEnabled的值：true\n        console.log(this.sprite2.mouseEnabled);//打印子节点sprite2的MouseEnabled的值：true\n    }\n    test2(e: Laya.Event) {\n        console.log('mouseSprite2')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse Event Lifecycle Methods in LayaAir Script Components\nDESCRIPTION: Demonstrates all available mouse event lifecycle methods in a LayaAir Script component, including click, double-click, mouse down/up, and stage-related events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class Script2DTest extends Laya.Script {\n    constructor() { super(); }\n\n    onClick(e: Laya.Event): void {\n        console.log(\"点击脚本所属的节点对象时触发\");\n    }\n\n    onDoubleClick(e: Laya.Event): void {\n        console.log(\"双击脚本所属的节点对象时触发\");\n    }\n\n    onMouseDown(e: Laya.Event): void {\n        console.log(\"鼠标在脚本所属的节点对象上按下时触发\");\n    }\n\n    onMouseUp(e: Laya.Event): void {\n        console.log(\"鼠标在脚本所属的节点对象上抬起时触发\");\n    }\n\n    onMouseMove(e: Laya.Event): void {\n        console.log(\"鼠标在脚本所属的节点对象上移动时触发\");\n    }\n\n    onMouseOver(e: Laya.Event): void {\n        console.log(\"鼠标进入脚本所属的节点对象时触发\");\n    }\n\n    onMouseOut(e: Laya.Event): void {\n        console.log(\"鼠标离开脚本所属的节点对象时触发\");\n    }\n\n    onStageMouseDown(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上按下时触发\");\n    }\n\n    onStageMouseUp(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上抬起时触发\");\n    }\n\n    onStageClick(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上点击时触发\");\n    }\n\n    onStageMouseMove(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上移动时触发\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources with Uniform Type Specification in LayaAir Engine\nDESCRIPTION: Example of loading multiple resources that all require the same type specification. This approach is useful when handling resources that all need the same processing, such as URLs without extensions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Loader/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        let resArr: Array<any> = [\n            \"image/bird.jpg\",\n            \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\",\n            \"image/cloud.png\",\n            \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\",\n        ];\n        this.loadTextures(resArr);\n    }\n\n    /** 加载多个资源 \n     * @param url 资源数组\n    */\n    loadTextures(url: Array<string>): void {\n        //加载回调返回的类型，如果不确定就any\n        Laya.loader.load(url, Laya.Loader.IMAGE).then((res: Array<Laya.Texture>) => {\n            let sp: Laya.Sprite = new Laya.Sprite();\n            this.owner.addChild(sp);\n            let i: number = 0;\n            //每秒重画一次\n            Laya.timer.loop(1000, this, () => {\n                i == res.length && (i = 0);\n                //清除sp节点的所有绘图（不含子节点）\n                sp.graphics.clear();\n                //在sp节点上重绘纹理\n                sp.graphics.drawTexture(res[i]);\n                i++;\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Textures and Materials to 3D Objects in TypeScript\nDESCRIPTION: Creates materials, loads external textures asynchronously, and assigns them to the object's MeshRenderer to customize appearance with specific textures. Enhances visual realism of 3D objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/displayObject/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 创建材质\nlet boxMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\n// 异步加载纹理\nlet resource: string = \"resources/layabox.png\";\nLaya.loader.load(resource).then(() => {\n    let tex = Laya.Loader.getTexture2D(resource);\n    // 绑定纹理\n    boxMaterial.albedoTexture = tex;\n});\n// 赋值材质\nboxRender.sharedMaterial = boxMaterial;\n```\n\n----------------------------------------\n\nTITLE: Rotating a 3D Sprite3D Node in LayaAir Using TypeScript\nDESCRIPTION: This snippet shows the declaration of a 3D node property of type Laya.Sprite3D using the @property decorator, enabling runtime rotation of the node by updating its transform each frame. It requires the LayaAir engine and timer system. The input is a 3D node (e.g., Cube) dragged into the exposed property, and the output is a continuously rotating 3D object within the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/componentProperties/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite3D})\n    public cube: Laya.Sprite3D;\n\n    private rotation: Laya.Vector3 = new Laya.Vector3(0, 0.01, 0);\n\n    onStart() {\n        Laya.timer.frameLoop(1, this, ()=> {\n            this.cube.transform.rotate(this.rotation, false);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Jump Character (CharacterController)\nDESCRIPTION: This code snippet demonstrates how to make a CharacterController jump using the `jump()` method. It defines a jumpVector and calls the jump method when the spacebar is pressed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/CharacterController/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n\t/** 跳跃的向量，Y轴正方向，高度5 */\n    private jumpVector: Laya.Vector3 = new Laya.Vector3(0, 5, 0);\n\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n        //设置出生点位置\n        this.characterController.position = new Laya.Vector3(0, 0, 0);\n    }\n    \n    onKeyDown(evt: Laya.Event): void {\n        switch (evt.keyCode) {\n            case Laya.Keyboard.SPACE: //按键盘空格时\n                this.characterController.jump(this.jumpVector); // 跳跃\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting 2D Sprite Properties Using LayaAir and TypeScript\nDESCRIPTION: This snippet demonstrates how to expose a 2D Sprite node as a property using the @property decorator with type Laya.Sprite, allowing runtime manipulation of its size and texture. Dependencies include the LayaAir engine and usage of regClass and property decorators. The input is a Sprite node dragged into the property field in the editor, and outputs include size adjustment and image loading on the Sprite instance at runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/componentProperties/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite})\n    public spr: Laya.Sprite;\n    \n    onAwake(): void {\n        this.spr.size(512, 313); //设置Sprite大小\n        this.spr.loadImage(\"atlas/comp/image.png\"); //添加纹理\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LayaAir's Built-in Worker\nDESCRIPTION: This TypeScript snippet demonstrates how to enable LayaAir's built-in worker for image decoding. It sets the path to the worker.js file provided by LayaAir and enables the worker loader. This helps to reduce main thread load when decoding images.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/useWorker/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LayaUISample {\n    constructor() {\n        //初始化引擎\n        Laya.init(600,400,Laya.WebGL);\n        //设置Laya提供的worker.js路径\n        Laya.WorkerLoader.workerPath = \"libs/worker.js\";\n        //开启worker线程\n        Laya.WorkerLoader.enable = true;\n        //加载引擎需要的资源\n        Laya.loader.load(\"../atlas/comp.atlas\",Laya.Handler.create(this,this.onLoaded));\n    }\n    private onLoaded():void{\n        //实例UI界面\n        var testView:ui.test.TestPageUI = new ui.test.TestPageUI();\n        Laya.stage.addChild(testView);\n    }\n}\nnew LayaUISample;\n```\n\n----------------------------------------\n\nTITLE: Defining a Laya.Resource Subclass for Custom Material Loading (TypeScript)\nDESCRIPTION: Creates a resource subclass (ABCResource) with custom properties and registers it using @Laya.regClass. Suitable for resources like materials that must synchronize across all references, support hot reloading, and be available in game runtime. Inputs are property values and Laya.Resource inheritance; outputs are usable resource instances managed by the engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n//因为这个类需要在实际游戏环境中使用，所有请勿和其他包含@IEditorEnv装饰器的脚本混杂在一起\n\n@Laya.regClass()\nexport class ABCResource extends Laya.Resource {\n    @Laya.property(String)\n    name: string = \"\";\n\n    @Laya.property(Number)\n    age: number = 18;\n\n    @Laya.property(Number)\n    gender1: number = 100;\n\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Script to Import Protocol Buffer in LayaAir\nDESCRIPTION: A simple TypeScript script for LayaAir that imports the generated Protocol Buffer module, showing the basic setup for using Protobuf in a project.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/ProtobufDemo.ts\n// 引入生成的 protobuf 模块，路径相对于当前文件\nimport * as protobuf from \"./libs/protobuf/protobuf\";\nconst { regClass } = Laya;\n@regClass()\nexport class ProtobufDemo extends Laya.Script {\n    onEnable() {\n        console.log(\"Game start\");\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Global Coordinates to Local Coordinates in LayaAir\nDESCRIPTION: Demonstrates how to convert stage (global) mouse coordinates to local coordinates of a specific object using the globalToLocal method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n//转换舞台坐标为XXX对象的局部坐标\nlet point: Laya.Point = this.XXX.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));\nconsole.log(\"打印局部坐标x,y\", point.x, point.y);\n```\n\n----------------------------------------\n\nTITLE: Accessing UI Runtime from a LayaAir Custom Component Script (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how a custom LayaAir component script (`NewScript`) can interact with the scene's UI Runtime (`RuntimeScript`). It retrieves the UI Runtime instance using `this.owner.scene` within the `onStart` method and subsequently uses this instance (`this.ui`) to access and control UI elements like `Button` and `Image` managed by the Runtime. Requires LayaAir engine, the specific UI Runtime script, and the custom script being part of the same scene hierarchy.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeScript } from \"./RuntimeScript\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    private ui : RuntimeScript;\n    onStart() {\n\n        // 获得场景的Runtime对象\n        this.ui = this.owner.scene as RuntimeScript;\n\n        // Button添加鼠标事件，让Image不显示\n        this.ui.Button.on( Laya.Event.MOUSE_DOWN, null, ()=>{\n            this.ui.Image.visible = false;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Category Names to Component Properties\nDESCRIPTION: Shows how to set a custom display name for a property category using the catalogCaption parameter in the @property decorator, making the interface more user-friendly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@property({ type: String, inspector: \"color\" ,catalog:\"adv\", catalogCaption:\"高级组件\"})\nd: string;\n```\n\n----------------------------------------\n\nTITLE: Using Easing Functions with Tweens in TypeScript\nDESCRIPTION: Shows how to apply easing functions to tweens to control the rate of animation. Examples include using built-in easing functions and passing parameters to easing functions that support additional configuration.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Tween/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n//使用ease()方法时，可以传入缓动函数作为参数\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 600).ease(Laya.Ease.cubicOut);\n\n\n//也可以直接用函数名称\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 600).ease(\"cubicOut\");\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//为缓动函数传递参数\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 600).ease(\"elasticOut\", 5);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//调用开发者自定义的缓动函数\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 600).ease(myEase);\n\n//开发者自定义的缓动函数\nfunction myEase(t: number, b: number, c: number, d: number) : number {\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a List Component Programmatically in LayaAir (TypeScript)\nDESCRIPTION: This code defines a UI_List script which creates a List component entirely through TypeScript, defines item rendering, custom scrolling, selection, and elastic behaviors. It dynamically generates a List, sets up custom item classes, binds render and select handlers, and populates the List with an image array. It depends on LayaAir's List, Box, Image, and Handler classes, and assumes that UI_List is attached to a proper scene node. Input parameters include no explicit props, but the script internally assigns List properties and requires access to image resources for the item skins. The limitation is that 'Item' must be defined with appropriate size, and proper image resources must exist.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/List/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_List extends Laya.Script {\n\n    public _list: Laya.List;\n\n    constructor() { super(); }\n\n    onAwake(): void {\n        var list: Laya.List = new Laya.List();\n\n        list.itemRender = Item;\n        list.repeatX = 1;\n        list.repeatY = 4;\n\n        list.x = (Laya.stage.width - Item.WID) / 2;\n        list.y = (Laya.stage.height - Item.HEI * list.repeatY) / 2;\n\n        // 设置List的垂直滚动\n        list.scrollType = Laya.ScrollType.Vertical;\n        // 设置List的垂直滚动皮肤，不设置或者\"\"就没有滚动条皮肤\n        list.vScrollBarSkin = \"\";\n        // 开启橡皮筋效果\n        list.elasticEnabled = true;\n        // 设置橡皮筋回弹时间，单位为毫秒\n        list.scrollBar.elasticBackTime = 300;\n        // 设置橡皮筋极限距离\n        list.scrollBar.elasticDistance = 50;\n        // 设置是否可以选中\n        list.selectEnable = true;\n        list.selectHandler = new Laya.Handler(this, this.onSelect);\n        // 单元格渲染处理\n        list.renderHandler = new Laya.Handler(this, this.updateItem);\n        this.owner.addChild(list);\n\n        // 设置数据源为对应图片的路径\n        var data: any[] = [];\n        for (var i: number = 0; i < 10; ++i) {\n            data.push(\"resources/res/ui/listskins/1.jpg\");\n            data.push(\"resources/res/ui/listskins/2.jpg\");\n            data.push(\"resources/res/ui/listskins/3.jpg\");\n            data.push(\"resources/res/ui/listskins/4.jpg\");\n            data.push(\"resources/res/ui/listskins/5.jpg\");\n        }\n        list.array = data;\n        this._list = list;\n    }\n\n    private updateItem(cell: Item, index: number): void {\n        cell.setImg(cell.dataSource);\n    }\n\n    private onSelect(index: number): void {\n        console.log(\"当前选择的索引：\" + index);\n    }\n\n}\n\nclass Item extends Laya.Box {\n    static WID: number = 373;\n    static HEI: number = 85;\n\n    private img: Laya.Image;\n    constructor() {\n        super();\n        this.size(Item.WID, Item.HEI);\n        this.img = new Laya.Image();\n        this.addChild(this.img);\n    }\n\n    setImg(src: string): void {\n        this.img.skin = src;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preloading and Using 2D Compressed Texture Atlases in LayaAir TypeScript\nDESCRIPTION: This snippet shows how to load a 2D texture atlas in LayaAir, which transparently manages texture compression for different platforms. Loading the atlas file (.atlas) automatically triggers the engine to recognize and load appropriate compressed texture formats if available. The skin property of the UI element is then set to an image within the atlas. This usage abstracts platform differences and facilitates easy integration of compressed textures in 2D atlases.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/VIP_Texture/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.loader.load([\"res/atlas/comp.atlas\"], Laya.Handler.create(this, () => {\n\tthis.aaa.skin = \"comp/image.png\";\n}));\n```\n\n----------------------------------------\n\nTITLE: 扩展动画状态脚本功能：加入状态变化信息与界面更新（TypeScript）\nDESCRIPTION: 此示例在基础动画状态脚本基础上，添加了私有变量控制动画播放进度显示和状态更新逻辑。通过在setPlayScriptInfo中初始化标签控件，onStateEnter、onStateUpdate及onStateExit中动态修改标签内容，实现动画状态变化时对界面元素的实时反应。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\ninterface AnimatorPlayScriptInfo {\n    animator: Laya.Animator | Laya.Animator2D;\n    layerindex: number;\n    playState: Laya.AnimatorState | Laya.AnimatorState2D;\n}\n\n@regClass()\nexport class AnimationScript extends Laya.AnimatorStateScript {\n    playStateInfo: AnimatorPlayScriptInfo = { animator: null, layerindex: -1, playState: null };\n\n    private isShow: boolean = false;\n    private _label: Laya.Label;\n    setPlayScriptInfo(animator: Laya.Animator | Laya.Animator2D, layerindex: number, playstate: Laya.AnimatorState | Laya.AnimatorState2D) {\n        this.playStateInfo.animator = animator;\n        this.playStateInfo.layerindex = layerindex;\n        this.playStateInfo.playState = playstate;\n        this._label = animator.owner.scene.scene2D.getChildByName(\"Label\");\n    }\n    constructor() {\n        super();\n    }\n    onStateEnter(): void {\n        console.log(\"动画开始播放了\");\n        this._label.text = \"开始跑动画\";\n    }\n    onStateUpdate(normalizeTime: number): void {\n        console.log(\"动画状态更新了：\" + normalizeTime);\n        if (normalizeTime > 0.5 && !this.isShow) {\n            this.isShow = true;\n            this._label.text = \"跑动画一半\";\n        }\n    }\n    onStateExit(): void {\n        console.log(\"动画退出了\");\n        this._label.text = \"退出跑动画\";\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling LayaNative Initialization Errors\nDESCRIPTION: Default error handling function for LayaNative initialization errors. Called automatically when the engine fails to initialize or load startup scripts, commonly due to network issues.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Other_settings/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onLayaInitError=function(e)\n{\n\tconsole.log(\"onLayaInitError error=\" + e);\n\talert(\"加载游戏失败，可能由于您的网络不稳定，请退出重进\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Label Instances with Different Styles in LayaAir\nDESCRIPTION: This TypeScript script demonstrates how to programmatically create multiple Label instances with different text colors and stroke effects, positioning them in specific locations on the screen.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Label/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\nconst Label = Laya.Label;\n@regClass()\nexport class UI_Label extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.setup();        \n\t}\n\n\tprivate setup(): void {\n\t\tthis.createLabel(\"#FFFFFF\", null).pos(30, 50);\n\t\tthis.createLabel(\"#00FFFF\", null).pos(290, 50);\n\t\tthis.createLabel(\"#FFFF00\", \"#FFFFFF\").pos(30, 100);\n\t\tthis.createLabel(\"#000000\", \"#FFFFFF\").pos(290, 100);\n\t\tthis.createLabel(\"#FFFFFF\", \"#00FFFF\").pos(30, 150);\n\t\tthis.createLabel(\"#0080FF\", \"#00FFFF\").pos(290, 150);\n\t}\n\n\tprivate createLabel(color: string, strokeColor: string): Laya.Label {\n\t\tconst STROKE_WIDTH: number = 4;\n\n\t\tvar label: Laya.Label = new Label();\n\t\tlabel.font = \"Microsoft YaHei\";\n\t\tlabel.text = \"SAMPLE DEMO\";\n\t\tlabel.fontSize = 30;\n\t\tlabel.color = color;\n\n\t\tif (strokeColor) {\n\t\t\tlabel.stroke = STROKE_WIDTH;\n\t\t\tlabel.strokeColor = strokeColor;\n\t\t}\n\n\t\tthis.owner.addChild(label);\n\n\t\treturn label;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing Memory by Destroying Sprite Instances in LayaAir using TypeScript\nDESCRIPTION: Demonstrates how to properly release memory by destroying a Sprite instance in LayaAir, which helps break internal references so the JavaScript garbage collector can reclaim memory. The snippet shows creating a Sprite, then calling its destroy method to set internal references to null. This facilitates garbage collection without immediate memory removal, reducing CPU load during runtime. It requires the LayaAir engine and TypeScript environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建一个Sprite实例\nvar sp:Laya.Sprite = new Laya.Sprite();\n//将sp内部引用设置为null\nsp.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating Shader Blueprints\nDESCRIPTION: This section describes how to create a Shader Blueprint file within the asset window. It states that the corresponding shader file is only created when the blueprint file is opened, establishing a mapping between the blueprint and the shader.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Controlling Property Serialization with serializable Parameter\nDESCRIPTION: Demonstrates how to control whether a property is serialized and saved to scene files using the serializable parameter. Shows a practical example using degree-to-radian conversion.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number })\n    _radian: number = 0;  //带下划线的属性，默认不会出现在IDE的属性面板上，只是用来存储输入的弧度\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) //这里设置serializable为false，所以degree不会被保存到场景文件中\n     get degree() {\n        return this._radian * (180 / Math.PI);//由于自己没有序列化保存，需要把_radian存下来的弧度反算回角度，用于IDE属性面板显示\n    }\n    set degree(value: number) {\n        this._radian = value * (Math.PI / 180);//把输入的角度值，转成弧度给_radian存起来。\n    }\n    \n    onStart() {\n        console.log(this._radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Engine Object Property Types - TypeScript\nDESCRIPTION: This example shows how to define component properties with different LayaAir engine object types using the `@property()` decorator. This allows developers to drag and drop engine objects from the scene into the component properties in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property( { type:Laya.Camera } ) //摄像机类型\n    private camera: Laya.Camera;  \n\n    @property( { type:Laya.Scene3D } ) //3D场景根节点类型\n    private scene3D: Laya.Scene3D;\n\n    @property( { type:Laya.DirectionLightCom } ) //DirectionLight组件类型\n    private directionLight: Laya.DirectionLightCom;\n\n    @property( { type:Laya.Sprite3D } ) //Sprite3D节点类型\n    private cube: Laya.Sprite3D;  \n\n    @property( { type:Laya.Prefab } ) //加载 Prefab 拿到的对象\n    private prefabFromResource: Laya.Prefab;    \n\n    @property( { type:Laya.ShurikenParticleRenderer } ) //ShurikenParticleRenderer组件类型\n    private particle3D: Laya.ShurikenParticleRenderer;  \n\n    @property( { type:Laya.Node } ) //节点类型\n    private scnen2D: Laya.Node; \n\n    @property( { type:Laya.Box } ) //拿到 Box 组件\n    private box: Laya.Box; \n\n    @property( { type:Laya.List } ) //拿到 List 组件\n    private list: Laya.List; \n\n    @property( { type:Laya.Image } ) //拿到 Image 组件\n    private image: Laya.Image; \n\n    @property( { type:Laya.Label } ) //拿到 Label 组件\n    private label: Laya.Label; \n\n    @property( { type:Laya.Button } ) //拿到 Button 组件\n    private button: Laya.Button; \n\n    @property( { type:Laya.Sprite } ) //拿到 Sprite 组件\n    private sprite: Laya.Sprite; \n\n    @property( { type:Laya.Animation } ) //拿到 Animation 组件\n    private anmation: Laya.Animation; \n\n    @property( { type:Laya.Vector3 } ) //Laya.Vector3类型\n    private vector3 : Laya.Vector3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LayaAir UI Runtime Lifecycle Methods (TypeScript)\nDESCRIPTION: This TypeScript code outlines the lifecycle methods available within a LayaAir UI Runtime script. These methods (`onAwake`, `onEnable`, `onDisable`, `onDestroy`, `onClosed`, `onOpened`) provide hooks into different stages of the UI component's existence and are intended to be overridden by the developer. Note that `onOpened` and `onClosed` are specific to Runtimes attached to Scene2D nodes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\n    /**\n    * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    * 此方法为虚方法，使用时重写覆盖即可\n    */\n    onAwake(): void {\n    }\n\n    /**\n     * 组件被启用后执行，比如节点被添加到舞台后\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onEnable(): void {\n    }\n\n    /**\n     * 组件被禁用时执行，比如从节点从舞台移除后\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onDisable(): void {\n    }\n        \n    /**\n     * 销毁时执行\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onDestroy(): void {\n    }\n    \n    /**\n     * 关闭完成后，调用此方法（如果有关闭动画，则在动画完成后执行）\n     * @param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。\n     */\n    onClosed(type: string = null): void {\n    }\n\n    /**场景打开完成后，调用此方法（如果有弹出动画，则在动画完成后执行）*/\n    onOpened(param: any): void{\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-Touch Input for Zooming in LayaAir 3D\nDESCRIPTION: This code snippet demonstrates how to handle multi-touch input in a LayaAir 3D scene to implement zooming functionality. It retrieves touch points, calculates the distance between them, and adjusts the camera's z-position based on the change in distance. The initial touch distance is stored when two fingers first touch the screen. Subsequent touch events calculate the change in distance and adjust the camera's Z position accordingly, creating a zoom effect. A constraint ensures that the camera stays within defined Z value limits.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/** 省略若干代码，可参照官网示例 */\nonUpdate(): void {\n  //获取触摸点数量\n  var touchCount: number = this._scene.input.touchCount();\n  if (touchCount>1) {\n    //获取前两个触摸点数据\n    var touch: Touch = this._scene.input.getTouch(0);\n    var touch2: Touch = this._scene.input.getTouch(1);\n    //是否为刚按下时的第一次触摸\n    if (this.twoFirst) {\n      //获取触碰点的位置\n      this.disVector1.x = touch.position.x - touch2.position.x;\n      this.disVector1.y = touch.position.y - touch2.position.y;\n      this.distance = Vector2.scalarLength(this.disVector1);\n      this.twoFirst = false;\n    } else {\n      this.disVector2.x = touch.position.x - touch2.position.x;\n      this.disVector2.y = touch.position.y - touch2.position.y;\n      var distance2: number = Vector2.scalarLength(this.disVector2);\n      //根据手势扩张移动的距离,设置z轴的变换，造成近大远小的透视效果。\n      let zValue = -0.01 * (distance2 - this.distance);\n      if ((zValue < 0 && this._camera.transform.position.z > 0.6) || (zValue > 0 && this._camera.transform.position.z < 6)) {\n        this.tmpVector.setValue(0, 0, -0.01 * (distance2 - this.distance));\n        this._camera.transform.translate(this.tmpVector);\n      }\n      this.distance = distance2;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Compressed Atlased Texture for Image Component in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet details loading an atlas containing compressed textures in LayaAir 3.x. The loader preloads the .atlas mapping file before assigning a region from the atlas to an Image component's skin property. All format/platform resolution is handled by the engine, assuming the project build process followed the earlier configuration. The example requires LayaAir runtime, proper assets (atlas metadata, png, ktx, or other compressed variants) in place. Input: resource paths for the atlas and sprite. Output: correct appearance of atlas-sourced image with optimal compression for platform.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/textureCompress/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    onAwake(): void {\n        Laya.loader.load([\"resource/AtlasConfig.atlas\"], Laya.Handler.create(this, () => {\n            let img = new Laya.Image;\n            Laya.stage.addChild(img);\n            img.pos(500, 100);\n            img.skin = \"resources/img_bg.png\"; //图集中的图片\n        }));\n    }\n\n    onStart() {\n        Laya.Stat.show(0, 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TextInput Components Dynamically with TypeScript in LayaAir\nDESCRIPTION: This code demonstrates how to dynamically create TextInput components at runtime rather than adding them through the IDE. It loads skin resources and creates multiple input fields with different appearances and positions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/TextInput/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Input extends Laya.Script {\n\n    private SPACING: number = 100;\n\tprivate Y_OFFSET: number = 50;\n\n\tprivate skins: any[];\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n\n\n\t\tthis.skins = [\"resources/res/ui/input (1).png\", \"resources/res/ui/input (2).png\", \"resources/res/ui/input (3).png\", \"resources/res/ui/input (4).png\"];\n\t\tLaya.loader.load(this.skins).then( ()=>{\n            this.onLoadComplete();\n        } );\n\t}\n\n\tprivate onLoadComplete(): void {\n\t\tfor (var i: number = 0; i < this.skins.length; ++i) {\n\t\t\tvar input: Laya.TextInput = this.createInput(this.skins[i]);\n\t\t\tinput.prompt = 'Type:';\n\t\t\tinput.x = (Laya.stage.width - input.width) / 2;\n\t\t\tinput.y = i * this.SPACING + this.Y_OFFSET;\n\t\t}\n\t}\n\n\tprivate createInput(skin: string): Laya.TextInput {\n\t\tvar ti: Laya.TextInput = new Laya.TextInput();\n\n\t\tti.skin = skin;\n\t\tti.size(300, 50);\n\t\tti.sizeGrid = \"0,40,0,40\";\n\t\tti.font = \"Arial\";\n\t\tti.fontSize = 30;\n\t\tti.bold = true;\n\t\tti.color = \"#606368\";\n\n\t\tthis.owner.addChild(ti);\n\n\t\treturn ti;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example package.json file\nDESCRIPTION: This JSON snippet shows the structure of a package.json file generated by npm init. It includes basic project metadata, dependencies, and scripts.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/importJsLibrary/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"test\": \"bin/bundle.js\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"astar-typescript\": \"^1.2.5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Shader Configuration in MetarialPropData.json - JSON\nDESCRIPTION: This JSON snippet shows the required format for adding custom shader configurations to the `MetarialPropData.json` file.  This configuration maps Unity shader properties to LayaAir shader properties, enabling the plugin to export custom Unity shaders for use in LayaAir. It includes configurations for textures, tiling offsets, colors, floats, and defines.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Unity/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"GAPH Custom Shader/Shader_IntegradedEffect\": {\n        \"targeName\": \"Shader_IntegradedEffect\",\n        \"textures\": [\n            {\n                \"uName\": \"_MainTex\",\n                \"layaName\": \"u_AlbedoTexture\",\n                \"defind\": \"ALBEDOTEXTURE\"\n            },\n            ......\n        ],\n        \"tillOffset\": [\n            {\n                \"uName\": \"_MainTex_ST\",\n                \"layaName\": \"u_TilingOffset\"\n            },\n            ......\n        ],\n        \"colors\": [\n            {\n                \"uName\": \"_TintColor\",\n                \"layaName\": \"u_TintColor\",\n                \"hdrName\": \"u_TintColorIntensity\"\n            },\n            ......\n        ],\n        \"floats\": [\n            {\n                \"uName\": \"_MaskOffsetFactor\",\n                \"layaName\": \"u_MaskOffsetFactor\"\n            },\n            ......\n        ],\n        \"defineds\": [\n            {\n                \"uName\": \"_SecondColor\",\n                \"layaName\": \"IS_USE_SECOND_COLOR\",\n                \"from\": 0,\n                \"deflat\": 1.0\n            },\n            ......\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Lifecycle Methods in LayaAir IDE with @runInEditor Decorator in TypeScript\nDESCRIPTION: Demonstrates using the @runInEditor decorator to enable lifecycle methods (like onEnable and onStart) to trigger within the LayaAir IDE environment. This allows component scripts to execute when loaded inside the editor, facilitating testing or editing workflows. Dependencies include LayaAir engine and proper decorator import. The snippet requires placing @runInEditor before or after @regClass on the class. It shows defining a Sprite3D property and printing its name on enabling. Use is discouraged by default due to performance and rendering differences inside the editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property, runInEditor } = Laya;\n\n@regClass() @runInEditor     //重点看这里，要放到类之前，@regClass()与@runInEditor谁先谁后都可以。\nexport class NewScript extends Laya.Script {\n    @property({ type: Laya.Sprite3D })\n    sp3: Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    onEnable() {\n        console.log(\"Game onStart\", this.sp3.name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage for Platform Builds via LayaAirIDE Scripts - Shell\nDESCRIPTION: This collection of commands demonstrates how to invoke different static methods in the custom MyScript TypeScript class to build for various platforms directly from the terminal. Each command uses --project to specify the target project and --script to specify the build method. Ensure MyScript is fully implemented and registered, and the relevant platform build configuration is set up before use.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/commandLine/readme.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n// 构建web\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildWeb\n// 构建微信小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildWxgame\n// 构建抖音小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildBytedancegame\n// 构建oppo小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildOppogame\n// 构建vivo小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildVivogame\n// 构建小米快游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildXmgame\n// 构建支付宝小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildAlipaygame\n// 构建淘宝小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.tbgame\n```\n\n----------------------------------------\n\nTITLE: Simple Blinnphong Material Ball Example\nDESCRIPTION: This shows an example of a simple Blinnphong material ball in Shader Blueprint. It describes the inputs such as the world normal and surface color parameters, and show the output.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Loading, Playing, and Visualizing Audio Spectrum in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates loading an external MP3 file using `Laya.HttpRequest`, decoding it with the Web Audio API's `decodeAudioData`, playing the audio, analyzing its frequency data using `createAnalyser`, and drawing a visual representation of the spectrum on the LayaAir stage using `Laya.stage.graphics` within a `Laya.timer.loop`. Requires an audio file at 'res/3.mp3'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Main {\n    private AudioContext:any;\n    private audioContext:any;\n    private analyser:any;\n    private audioBufferSourceNode:any;\n    constructor() {\n        //初始化引擎\n        Laya.init(500, 500);\n        AudioContext = Laya.Browser.window.AudioContext || Laya.Browser.window.webkitAudioContext;\n        this.audioContext = new AudioContext();\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 256;\n        Laya.stage.once(Laya.Event.CLICK,this,this.clickHandler);\n    }\n    private clickHandler(e:any):void\n    {\n        var http:Laya.HttpRequest = new Laya.HttpRequest();\n        http.on(Laya.Event.COMPLETE,this,this.completeHandler);\n        http.send(\"res/3.mp3\",\"\",\"get\",Laya.Loader.BUFFER);\n    }\n    private completeHandler(e:any):void\n    {\n        this.audioContext.decodeAudioData(e,this.decodeAudioData.bind(this));\n    }\n    private decodeAudioData(buffer:any):void\n    {\n        this.audioBufferSourceNode = this.audioContext.createBufferSource();\n        this.audioBufferSourceNode.connect(this.analyser);\n        this.analyser.connect(this.audioContext.destination);\n        this.audioBufferSourceNode.buffer = buffer;\n        this.audioBufferSourceNode.start(0);\n        Laya.timer.loop(1,this,this.drawHandler);\n    }\n    private drawHandler():void\n    {\n        Laya.stage.graphics.clear();\n        var dataArray:Uint8Array = new Uint8Array(this.analyser.frequencyBinCount);\n        this.analyser.getByteFrequencyData(dataArray);\n        var step:number = Math.round(dataArray.length / 60);\n        for (var i:number = 0; i < 40; i++) {\n            var energy:number = (dataArray[step * i] / 256.0) * 50;\n            for (var j:number = 0; j < energy; j++) {\n                Laya.stage.graphics.drawLine(20 * i + 2, 200 + 4 * j,20 * (i + 1) - 2, 200 + 4 * j,\"#ff0000\",1);\n                Laya.stage.graphics.drawLine(20 * i + 2, 200 - 4 * j,20 * (i + 1) - 2, 200 - 4 * j,\"#ffff00\",1);\n            }\n            Laya.stage.graphics.drawLine(20 * i + 2, 200,20 * (i + 1) - 2, 200,\"#ff0000\",1);\n        }\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Implementing Physics Event Methods in LayaAir Components\nDESCRIPTION: Example of implementing physics event methods in a LayaAir Script component. Shows how to handle collision events (trigger and collider) for both 2D and 3D physics, including proper parameter handling and recommended usage patterns.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DemoScript extends Laya.Script {\n    \n    /**\n     * 3D物理触发器事件与2D物理碰撞事件, 在每一次发生物理碰撞的开始时，引擎都会调用一次的事件方法。\n     * @param other 碰撞目标对象的碰撞体以及所属节点对象等信息\n     * @param self  自身的碰撞体以及所属节点对象等信息（该参数只有2D物理有，3D物理只有other）\n     * @param contact  物理引擎携带的碰撞信息b2Contact，开发者可以通过查询b2Contact对象来获取两个刚体碰撞有关的详细信息。但是通常用不上，other和self中已存在常规需要的信用，足够用了。（该参数只有2D物理有，3D物理只有other）\n     */\n     onTriggerEnter(other: Laya.PhysicsComponent | Laya.ColliderBase, self?: Laya.ColliderBase, contact?: any): void {\n        // 假如碰到了炸弹\n        if (other.label == \"bomb\") {\n            // 此处省略爆炸伤害的逻辑\n\n            console.log(\"碰到炸弹：\" + self.label + \"受到伤害，生命值减少xx\");\n\n        } else if (other.label == \"Medicine\") {  // 假如碰到了药箱\n            // 此处省略恢复生命值的逻辑\n\n            console.log(\"碰到药箱：\" + self.label + \"接受治疗，生命值恢复xx\");\n            \n        }\n        console.log(\"onTriggerEnter:\", other, self);\n    }\t\n\n    /**\n    * 3D物理触发器事件与2D物理碰撞事件(不支持传感器), 发生持续的物理碰撞时，也就是碰撞生命周期内的第二次碰撞到碰撞结束前，每帧都在触发调用的事件方法。\n    * 尽量不要在该事件方法中执行复杂的逻辑和函数调用，尤其是运算等消耗性能的代码，否则会对性能有明显的影响。\n    * @param other 碰撞目标对象的碰撞体以及所属节点对象等信息\n    * @param self  自身的碰撞体以及所属节点对象等信息（该参数只有2D物理有，3D物理只有other）\n    * @param contact  物理引擎携带的碰撞信息b2Contact，开发者可以通过查询b2Contact对象来获取两个刚体碰撞有关的详细信息。但是通常用不上，other和self中已存在常规需要的信用，足够用了（该参数只有2D物理有，3D物理只有other）\n    */\n    onTriggerStay(other: Laya.PhysicsComponent | Laya.ColliderBase, self?: Laya.ColliderBase, contact?: any): void {\n        //持续碰撞时，打印日志，尽量不使用该事件方法，如果使用不当对性能的消耗会影响较大。\n        console.log(\"onTriggerStay====\", other, self);\n    }\n\n    /**\n    * 在每一次的物理碰撞结束时，引擎都会调用一次的事件方法。\n    * @param other 碰撞目标对象的碰撞体以及所属节点对象等信息\n    * @param self  自身的碰撞体以及所属节点对象等信息（该参数只有2D物理有，3D物理只有other）\n    * @param contact  物理引擎携带的碰撞信息b2Contact，开发者可以通过查询b2Contact对象来获取两个刚体碰撞有关的详细信息。但是通常用不上，other和self中已存在常规需要的信用，足够用了（该参数只有2D物理有，3D物理只有other）\n    */\n    onTriggerExit(other: Laya.PhysicsComponent | Laya.ColliderBase, self?: Laya.ColliderBase, contact?: any): void {   \n        //模拟角色离开毒气区域，触发逃脱奖励\n        if (other.label == \"poison\") {\n            // 此处省略逃脱奖励的逻辑\n\n            console.log(\"离开毒气区域：\" + self.label + \"获得逃脱奖励，生命值+10\");\n        }\n\n        console.log(\"onTriggerExit========\", other, self);\n    }\n\n    /**\n     * 3D物理碰撞器事件（不适用2D），在每一次发生物理碰撞的开始时，引擎都会调用一次的事件方法。\n     * @param other 碰撞目标对象\n     */\n    onCollisionEnter(other:Laya.Collision): void {\n        //碰撞开始后，物体改变颜色\n        (this.owner.getComponent(Laya.MeshRenderer).material as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(0.0, 1.0, 0.0, 1.0);//绿色\n    }\n\n    /**\n    * 发生持续物理碰撞时的3D物理碰撞器事件（不适用2D），也就是碰撞生命周期内的第二次碰撞到碰撞结束前，每帧都在触发调用的事件方法。\n    * 尽量不要在该事件方法中执行复杂的逻辑和函数调用，尤其是运算等消耗性能的代码，否则会对性能有明显的影响。\n    * @param other 碰撞目标对象\n    */\n    onCollisionStay(other:Laya.Collision): void {\n    \t//持续碰撞时，打印日志，尽量不使用该事件方法，如果使用不当对性能的消耗会影响较大。\n        console.log(\"peng\");\n    }\n\n   /**\n    * 3D物理碰撞器事件（不适用2D），在每一次的物理碰撞结束时，引擎都会调用一次的事件方法。\n    * @param other 碰撞目标对象\n    */\n    onCollisionExit(other:Laya.Collision): void {\n        ////碰撞离开后，物体变回原本颜色\n\t\t(this.owner.getComponent(Laya.MeshRenderer).material as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 1.0, 1.0, 1.0);//白色\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Uniform UI Details into Styles (LayaAir GLSL)\nDESCRIPTION: Demonstrates the recommended method for defining uniforms by separating UI presentation details. The `uniformMap` defines the core uniform (`u_Number` with type and default), while a separate `styles` block defines its IDE appearance (caption, range, fractionDigits). This keeps the `uniformMap` cleaner.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_9\n\nLANGUAGE: GLSL\nCODE:\n```\nuniformMap:{\n    u_Number: { type: Float, default:0 }\n},\nstyles: {\n    u_Number: { caption:\"数字\", range:[0,100], fractionDigits: 2 }\n},\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Event in LayaAir UI Runtime (TypeScript)\nDESCRIPTION: This TypeScript snippet, part of a LayaAir UI Runtime class, demonstrates handling a button click event within the `onAwake` lifecycle method. It accesses UI elements (`this.Button`, `this.Image`), assumed to be declared via the IDE by checking 'Define Variable', and adds a `MOUSE_DOWN` listener to the button to set the `visible` property of the image to `false`. Requires LayaAir engine and associated UI components defined in the scene/prefab and linked via the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    onAwake(): void {\n        \n        // Button添加鼠标事件，让Image不显示\n        this.Button.on( Laya.Event.MOUSE_DOWN, this, ()=>{\n            this.Image.visible = false;\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Laya.timer.frameLoop in a Component (TypeScript)\nDESCRIPTION: Example demonstrating how to use Laya.timer.frameLoop within a LayaAir component's onAwake method to decrease an Image's alpha property by 0.1 every 60 frames.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //每60帧后，图片的透明度减少0.1\n        Laya.timer.frameLoop(60, this, () => {\n            this.Image.alpha -= 0.1;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Application Class Initializing UI Pages with Runtime Components in TypeScript\nDESCRIPTION: This code initializes the LayaAir engine according to configuration settings, loads resources, and creates two UI pages (BGPageUI and MonkeyPageUI) with custom background colors. Each page has an Image component with the runtime class configured in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/ScriptUse/runtime/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport GameConfig from \"./GameConfig\";\nimport { ui } from \"./ui/layaMaxUI\";\nclass Main {\n\tconstructor() {\n\t\t//根据IDE设置初始化引擎\t\t\n\t\tif (window[\"Laya3D\"]) Laya3D.init(GameConfig.width, GameConfig.height);\n\t\telse Laya.init(GameConfig.width, GameConfig.height, Laya[\"WebGL\"]);\n\t\tLaya[\"Physics\"] && Laya[\"Physics\"].enable();\n\t\tLaya[\"DebugPanel\"] && Laya[\"DebugPanel\"].enable();\n\t\tLaya.stage.scaleMode = GameConfig.scaleMode;\n\t\tLaya.stage.screenMode = GameConfig.screenMode;\n\n\t\t//打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）\n\t\tif (GameConfig.debug || Laya.Utils.getQueryString(\"debug\") == \"true\") Laya.enableDebugPanel();\n\t\tif (GameConfig.stat) Laya.Stat.show();\n\t\tLaya.alertGlobalError = true;\n\n\t\t//激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程\n\t\tLaya.ResourceVersion.enable(\"version.json\", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);\n\t}\n\n\tonVersionLoaded(): void {\n\t\t//激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图\n\t\tLaya.AtlasInfoManager.enable(\"fileconfig.json\", Laya.Handler.create(this, this.onConfigLoaded));\n\t}\n\n\tonConfigLoaded(): void {\n\t\t//加载IDE指定的场景, 如果在编辑器中制作场景就打开下面一行注释，把实例页面的代码注掉\n\t\t//GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);\n\n\t\t //实例化BGPageUI页面\n\t\t var bgPage: ui.BGPageUI = new ui.BGPageUI();\n\t\t //为了能够清楚的看到这个页面所在的位置，在此设置设置一个背景色\n\t\t bgPage.graphics.drawRect(0, 0, 300, 300, \"#ffcccc\");\n\t\t //添加到stage\n\t\t Laya.stage.addChild(bgPage);\n\t\t //实例化MonkeyPageUI页面\n\t\t var monkeyPage: ui.MonkeyPageUI = new ui.MonkeyPageUI();\n\t\t //为了能够清楚的看到这个页面所在的位置，在此设置设置一个背景色\n\t\t monkeyPage.graphics.drawRect(0, 0, 300, 300, \"#ffcccc\");\n\t\t //添加到stage\n\t\t Laya.stage.addChild(monkeyPage);\n\t\t //设置第二个页面的坐标\n\t\t monkeyPage.x = 350;\n\n\t}\n}\n//激活启动类\nnew Main();\n```\n\n----------------------------------------\n\nTITLE: Recovering Object to Pool in LayaAir\nDESCRIPTION: Method to return an object to its corresponding pool. Checks if the object is already in the pool to prevent duplicates, and marks the object as pooled.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 将对象放到对应类型标识的对象池中。\n     * @param sign 对象类型标识字符。\n     * @param item 对象。\n     */\n    static recover(sign: string, item: any): void {\n        if (item[Pool.POOLSIGN]) return;\n        item[Pool.POOLSIGN] = true;\n        Pool.getPoolBySign(sign).push(item);\n    }\n```\n\n----------------------------------------\n\nTITLE: Controlling Label Properties via Script in LayaAir\nDESCRIPTION: This TypeScript script demonstrates how to programmatically control a Label component's properties including position, size, text content, font, color, style, and other visual attributes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Label/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LabelControl extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property( { type : Laya.Label } )\n    public lab: Laya.Label;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.lab.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        this.lab.size(500, 30); //大小\n        this.lab.pivot(this.lab.width/2, this.lab.height/2); //轴心点\n        this.lab.text = \"大家好，欢迎大家来到LayaAir IDE\"; //文本内容\n        this.lab.font = \"宋体\"; //字体\n        this.lab.fontSize = 50; //字体大小\n        this.lab.color = \"#ff0000\"; //字体颜色\n        this.lab.bold = true; //加粗\n        this.lab.italic = true; //斜体\n        this.lab.underline = true; //下划线\n        this.lab.underlineColor = \"#ff0000\"; //下划线颜色\n        this.lab.stroke = 5; //描边宽度\n        this.lab.strokeColor = \"#000000\" ; //描边颜色\n        this.lab.wordWrap = true; //自动换行\n        this.lab.leading = 10; //垂直行间距\n        this.lab.align = \"left\"; //水平对齐方式\n        this.lab.valign = \"top\"; //垂直对齐方式\n        this.lab.overflow = \"visible\"; //文本溢出\n        // this.lab.fitContent = \"yes\"; //自适应大小\n\n        this.lab.bgColor = \"#19a4f1\"; //背景颜色\n        this.lab.borderColor = \"#f6ff03\" //边框颜色\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Cache Files in LayaNative DCC via AppCache (TypeScript)\nDESCRIPTION: This TypeScript interface snippet, representing AppCache, exposes the updateFile method for granularly updating cache files managed by LayaNative’s DCC (Dynamic Content Cache). Inputs include numeric file identity, checksum, file data in ArrayBuffer, and an external versioning flag. The function returns a boolean indicating update validity (e.g., checksum match required for success). This method is intended for internal use, dependent on correct hash handling and verification, and should be used when updating or patching downloaded resources programmatically.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/zipUpdate/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppCache{\n    ...\n    \n    delAllCache():void;\n    /**\n     * \\u66f4\\u65b0dcc\\u4e2d\\u7684\\u4e00\\u4e2a\\u6587\\u4ef6\n     * @param nameid \\u66f4\\u65b0\\u7684\\u6587\\u4ef6\\uff0c\\u81ea\\u5df1\\u8ba1\\u7b97\\u3002\n     *   \\u8def\\u5f84\\u89c4\\u5219\\uff1a/\\uff0c\\u8868\\u793aapp\\u6839\\u76ee\\u5f55\\u3002\\u4f8b\\u5982\\uff1ahashstr('/index.html')\\uff0c \\u4e0d\\u8981\\u5e26\\u53c2\\u6570\\uff0c\\u5982\\u679c\\u5e26\\u53c2\\u6570\\u7684\\u8bdd-- hashstr('/aa/bb.html?ff=2') \\u4f1a\\u5bfc\\u81f4\\u8c01\\u4e5f\\u627e\\u4e0d\\u5230\\u8fd9\\u4e2a\\u6587\\u4ef6\n     * @param chksum \\u6821\\u9a8c\\u7801\\uff0c\\u59820\\u5219\\u6b64\\u51fd\\u6570\\u81ea\\u5df1\\u8ba1\\u7b97\\u3002\\u5982\\u679c\\u662f\\u5916\\u90e8\\u7248\\u672c\\u63a7\\u5236\\uff0c\\u5219\\u8fd9\\u4e2a\\u662fhashstr\\u540e\\u7684\\u7248\\u672c\\u53f7\\u3002\n     * @param buf ArrayBuffer \\u6587\\u4ef6\\u5185\\u5bb9\\u3002\n     * @param extversion \\u662f\\u5426\\u4f7f\\u7528\\u5916\\u90e8\\u7248\\u672c\\u53f7\n     * @return boolean \\u5982\\u679c\\u8fd4\\u56detrue\\u5219\\u8868\\u793a\\u66f4\\u65b0\\u6210\\u529f\\uff0c\\u5426\\u5219\\u7684\\u8bdd\\uff0c\\u8868\\u793a\\u6821\\u9a8c\\u7801\\u4e0d\\u4e00\\u81f4\\uff0c\\u5373\\n     *      \\u5148\\u8981\\u66f4\\u65b0dcc\\u624d\\u80fd\\u5de5\\u4f5c\\u3002\n     */\n    updateFile(nameid:number,chksum:number,buf:ArrayBuffer,extversion:boolean):boolean;\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Double-Finger Zoom in LayaAir\nDESCRIPTION: This code snippet implements a double-finger zoom gesture on an image. It calculates the distance between two touch points to determine the scale factor, adjusting both scaleX and scaleY.  The snippet uses LayaAir's scripting system, listening for mouse events (touch events). Prerequisites include a LayaAir project and an Image component.  It calculates the distance between two touch points and adjusts scaleX and scaleY accordingly, with limits to the scaling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class XX extends Laya.Script {\n\tprivate _owner: Laya.Image;\n    /** 缩放前的中心点坐标信息 */\n    private lastPivot: Laya.Point;\n  \t/** 上次的距离值 */\n    private lastDistance: number = 0;\n  \n   onEnable(): void {\n  \t  this._owner = this.owner as Laya.Image;\n  }\n  \n  //鼠标在对象上按下时自动触发执行的脚本生命周期方法\n  onMouseDown(e: Laya.Event): void {\n    //当触摸操作的touch对象数组存在，并且大于1个触摸点，就认定为缩放操作\n    if (e.touches && e.touches.length > 1) {\n      //把初始的touch坐标位置通过开平方运算，记录为初始双指距离\n      this.lastDistance = this.getDistance(e.touches);\n      //纪录缩放前的手指中心点坐标\n      this.lastPivot = this.setPivot(e.touches);\n      //多指按下的情况下，再去侦听手势移动事件并处理逻辑\n      this._owner.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);\n    }\n  }\n  \n  onMouseUp(e: Laya.Event): void {\n    //鼠标或手势抬起后，移除侦听\n    this._owner.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove);\n  }\n  \n  /** 鼠标（或手势）在对象上移动时触发的事件侦听方法 */\n  mouseMove(e: Laya.Event): void {\n    /**当前的双指距离*/\n    let distance: number = this.getDistance(e.touches);\n\n    //设置缩放\n    this._owner.scaleX += (distance - this.lastDistance) * 0.01;\n    this._owner.scaleY += (distance - this.lastDistance) * 0.01;\n    //设置缩放值限制条件\n    (this._owner.scaleX < 0.8) && (this._owner.scaleX = 0.8);\n    (this._owner.scaleY < 0.8) && (this._owner.scaleY = 0.8);\n    (this._owner.scaleX > 5) && (this._owner.scaleX = 5);\n    (this._owner.scaleY > 5) && (this._owner.scaleY = 5);\n\n    //缩放后的手势中心点位置(局部位置)\n    let nowPivot = this.setPivot(e.touches);\n\n    //计算缩放引发的xy偏移值\n    let _offsetX = (nowPivot.x - this.lastPivot.x) * this._owner.scaleX;\n    let _offsetY = (nowPivot.y - this.lastPivot.y) * this._owner.scaleY;\n\t\n    //修正坐标位置\n    this._owner.x += _offsetX;\n    this._owner.y += _offsetY;\n\n    //保存当前值，用于下次计算\n    this.lastDistance = distance;\n  }\n  \n  /**\n     * 计算并设置多指的中心点坐标\n     * @param touches 手势信息数组\n     */\n  setPivot(touches: Array<any>): Laya.Point {\n    let Point0: Laya.Point = this._owner.globalToLocal(new Laya.Point(touches[0].stageX, touches[0].stageY));\n    let Point1: Laya.Point = this._owner.globalToLocal(new Laya.Point(touches[1].stageX, touches[1].stageY));\n    return new Laya.Point((Point0.x + Point1.x) / 2, (Point0.y + Point1.y) / 2);\n  }\n  \n  /** 计算两个触摸点坐标之间的距离 */\n  getDistance(touches: Array<any>): number {\n    //初始值为0\n    var distance: number = 0;\n    if (touches && touches.length > 1) {\n      //计算距离\n      let dx: number = touches[0].stageX - touches[1].stageX;\n      let dy: number = touches[0].stageY - touches[1].stageY;\n      distance = Math.sqrt(dx * dx + dy * dy);\n    }\n    return distance;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 2D Node Properties in LayaAir Scripts with TypeScript\nDESCRIPTION: Illustrates how to expose a 2D Laya.Sprite node as a property in a script using @property for assignment via editor drag-and-drop. The example manipulates the node size and sets a texture image during the onAwake lifecycle method. Prerequisite is having a 2D Sprite node in the scene and attaching the script to access it. Input is a sprite node assigned in the editor; output is a resized and textured sprite at runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite})\n    public spr: Laya.Sprite;\n    \n    onAwake(): void {\n        this.spr.size(512, 313); //设置Sprite大小\n        this.spr.loadImage(\"atlas/comp/image.png\"); //添加纹理\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: 加载远程分包资源示例 - LayaAir TypeScript\nDESCRIPTION: 该TypeScript示例代码展示如何在LayaAir项目中通过代码手动加载远程资源分包方式。组件在onAwake生命周期方法中，使用Laya.loader.loadPackage异步加载资源包sub1和sub2，加载成功后异步加载具体预制物资源cube.lh和sphere.lh，并将其实例添加到三维场景中。该方案支持远程CDN或本地服务器加载资源，需保证资源包已部署，且LayaAir引擎环境准备就绪。应用场景为动态按需加载分包资源，优化初始加载性能。也包含加载进度打印回调。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/generalSetting/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        //Web平台使用远程包\n        Laya.loader.loadPackage(\"sub1\",\"http://192.168.56.1:2840/\",this.printProgress).then(()=>{\n            Laya.loader.load(\"sub1/cube.lh\").then((res:Laya.PrefabImpl) =>{\n                let sp3:Laya.Sprite3D =res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\",\"http://192.168.56.1:2840/\",this.printProgress).then(()=>{\n            Laya.loader.load(\"sub2/sphere.lh\").then((res:Laya.PrefabImpl) =>{\n                let sp3:Laya.Sprite3D =res.create() as Laya.Sprite3D;\n                sp3.transform.localPositionX += 1.0; //防止球体和立方体都在初始位置发生重叠\n                this.scene3d.addChild(sp3);\n            });\n        })\n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res)); //将res对象转换成JSON格式的字符串，此处打印的值为1。本句代码主要应用于小游戏发布后打印loadTask反应下载进度\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Execution with callLater in LayaAir\nDESCRIPTION: This code illustrates how to debounce multiple property updates on an object, such as rotation, scale, and position, by batching 'update' calls with 'Laya.timer.callLater' to execute once per frame. This technique reduces redundant calculations and improves performance during rapid property changes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/CPU/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar rotation=0,\n    scale=1,\n    position=0;\n\nprivate function setRotation(value):void\n{\n    this.rotation=value;\n    update();\n}\n\nprivate function setScale(value):void\n{\n    this.scale = value;\n    update();\n}\nprivate function setPosition(value):void\n{\n    this.position = value;\n    update();\n}\n\npublic function update()\n{\n    console.log('rotation: ' + this.rotation + '\\t\tscale: ' + this.scale + '\\t\tscale: ' + this.scale + '\\t\tscale: ' + this.scale);\n}\n\n// When changing properties:\nsetRotation(90);\nsetScale(2);\nsetPosition(30);\n\n// To batch updates:\nLaya.timer.callLater(this, update);\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-touch Input in LayaAir 3D (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to handle multi-touch input in LayaAir 3D to implement a zoom effect. It retrieves touch positions from the input, calculates the distance between two touch points, and adjusts the camera's Z position based on the change in distance. This creates a zoom effect based on the pinch gesture.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/** 省略若干代码，可参照官网示例 */\nonUpdate(): void {\n  //获取触摸点数量\n  var touchCount: number = this._scene.input.touchCount();\n  if (touchCount>1) {\n    //获取前两个触摸点数据\n    var touch: Touch = this._scene.input.getTouch(0);\n    var touch2: Touch = this._scene.input.getTouch(1);\n    //是否为刚按下时的第一次触摸\n    if (this.twoFirst) {\n      //获取触碰点的位置\n      this.disVector1.x = touch.position.x - touch2.position.x;\n      this.disVector1.y = touch.position.y - touch2.position.y;\n      this.distance = Vector2.scalarLength(this.disVector1);\n      this.twoFirst = false;\n    } else {\n      this.disVector2.x = touch.position.x - touch2.position.x;\n      this.disVector2.y = touch.position.y - touch2.position.y;\n      var distance2: number = Vector2.scalarLength(this.disVector2);\n      //根据手势扩张移动的距离,设置z轴的变换，造成近大远小的透视效果。\n      let zValue = -0.01 * (distance2 - this.distance);\n      if ((zValue < 0 && this._camera.transform.position.z > 0.6) || (zValue > 0 && this._camera.transform.position.z < 6)) {\n        this.tmpVector.setValue(0, 0, -0.01 * (distance2 - this.distance));\n        this._camera.transform.translate(this.tmpVector);\n      }\n      this.distance = distance2;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewStack and Tab interaction control in TypeScript\nDESCRIPTION: This code snippet shows how to synchronize a Tab component with a ViewStack component using a custom script in TypeScript. It assigns a handler to the Tab's select event, which updates the ViewStack's displayed page based on user interaction, enabling seamless page switching.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/ViewStack/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.ViewStack })\n    public viewstack: Laya.ViewStack;\n\n    @property({ type: Laya.Tab })\n    public tab: Laya.Tab;\n\n    // 组件激活时执行，所有节点和组件已创建\n    onAwake(): void {\n        // 设置Tab的选择处理器\n        this.tab.selectHandler = new Laya.Handler(this, this.onSelecte);\n    }\n\n    // 根据Tab索引切换视图\n    private onSelecte(index: number): void {\n        this.viewstack.selectedIndex = index;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uniforms for Shader\nDESCRIPTION: This code presents the structure for defining uniform variables within a shader. Uniforms are data sent from the CPU to the GPU.  The code demonstrates the common uniform types (Texture2D, Color, Vector2, Vector3, Vector4, Bool, Float, Matrix4x4, TextureCube), with examples of their usage and the format in the uniformMap section. It includes descriptions of each type.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nShader3D Start\n{\n\t//联动上面2.2节提到的属性(name, type)\n\ttype: Shader3D\n\tname: ExampleShader\n\tuniformMap : {\n\t\tu_Color : {type: Color, default:[1,1,1,1]},\n\t\tu_MainTex : {type: Texture, default: \"white\"},\n\t\tu_SampleTexcoord : {type: Vector2, default:[1,1]},\n\t\tu_LightDir : {type: Vector3, default:[1,1,1]},\n\t\tu_vecPos : {type:Vector4, default:[1,1,1,1]},\n\t\tu_isWebGL2 : {type: bool, default: true},\n\t\tu_spend : {type:float, default:1.0},\n\t\tu_SkyMap : {type:TextureCube, defalue: \"black\"}\n\t\tu_defaultMat : {type:Matrix4x4, default:[\n\t\t1,0,0,0\n\t\t0,1,0,0,\n\t\t0,0,1,0,\n\t\t0.0,0,\n\t\t]}\n\t}\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Navigation with Nav2DAgent in LayaAir\nDESCRIPTION: This TypeScript class handles character navigation using LayaAir's 2D navigation system. It finds all Nav2DAgent components in the scene, sets their destination based on mouse clicks, and visualizes the calculated paths. The script supports multiple agents and draws the paths for debugging purposes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/navMesh/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Sprite = Laya.Sprite;\nimport Component = Laya.Component;\nimport Nav2DAgent = Laya.Nav2DAgent;\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class TestSprite extends Laya.Script {\n\n    // 用于显示鼠标点击的位置\n    @property({ type: Laya.Sprite })\n    public hit: Sprite;\n\n    private _temp: Sprite;\n    private _allAgent: Nav2DAgent[] = [];\n\n    private findCompents(lists: any[], sprite: Sprite, componentType: typeof Component) {\n        let comp = sprite.getComponent(componentType);\n        if (comp != null) {\n            lists.push(comp);\n        }\n        for (var i = 0; i < sprite.numChildren; i++) {\n            let child = sprite.getChildAt(i) as Sprite;\n            this.findCompents(lists, child, componentType);\n        }\n    }\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        let sprite = this.owner as Laya.Sprite;\n        //sprite.cache = true;\n        this._temp = new Laya.Sprite();\n        this.owner.scene.addChild(this._temp);\n        this.findCompents(this._allAgent, sprite.scene, Nav2DAgent);\n    }\n\n\n    onMouseClick(evt: Laya.Event): void {\n        let pos = new Laya.Vector2(evt.stageX, evt.stageY);\n        console.log(\"click\", pos);\n        this._temp.graphics.clear();\n        this._allAgent.forEach((agent) => {\n            agent.destination = pos;\n            let paths = agent.getCurrentPath();\n            if (paths.length >= 2) {\n                let points: any = []\n                paths.forEach((point) => {\n                    points.push(point.pos.x, point.pos.z);\n                });\n                this._temp.graphics.drawLines(0, 0, points, \"#00000030\", 5);\n            }\n\n\n        })\n        this.hit.pos(pos.x, pos.y);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Creating LayaAir Image Components in TypeScript\nDESCRIPTION: This snippet shows how to instantiate and configure a new Laya.Image at runtime inside a custom Laya.Script-derived class. The setup() method creates an Image with the specified skin, positions it, and adds it as a child to the script's owner. This requires the LayaAir 3.x engine, TypeScript, and that resources referenced (image skin paths) are available. The script expects to be attached to a node within a Scene2D. Outputs include a new Image node placed at fixed coordinates. There are no dynamic event listeners or interactions beyond basic instantiation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Image/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Image extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n\t\tthis.setup();\n\t}\n\n\tprivate setup(): void {\n\t\tlet img: Laya.Image = new Laya.Image(\"resources/layaAir.png\");\n\t\timg.pos(165, 62.5);\n\t\tthis.owner.addChild(img);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Collidable Groups on a Physics Collider in LayaAir Engine using TypeScript\nDESCRIPTION: This snippet shows the use of bitwise operations to set the canCollideWith property on a collider, controlling which other groups it will detect collisions with. The examples cover allowing collisions with a single group, multiple groups (using bitwise OR), or all except specified groups (using XOR and negation). Prerequisites: An initialized collider instance (xxx) in LayaAir3. Key parameters: The group IDs (as integers). Outputs: The collider's collision mask property is established for filtering contacts during simulation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/PhysicsCollider/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器 可以与  某个碰撞组 发生碰撞\nxxx.canCollideWith = 1 << 2;  //只与分组ID为2的（值为4）分成发生碰撞\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器 可以与 多个碰撞组 发生碰撞\nxxx.canCollideWith = (1 << 1) | (1 << 2) | (1 << 5); //只与分组ID为1、2、5的进行碰撞\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器  不可以  与哪些组 发生碰撞，其它组都可以碰撞\nxxx.canCollideWith = -1 ^ (1 << 3) ^ (1 << 6)  //不与分组3、6进行碰撞，除3与6组之外都可以发生碰撞)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code for Dynamic Creation of HBox and Buttons\nDESCRIPTION: This code illustrates how to load button textures, create multiple button instances, and dynamically assemble them within an HBox container, configuring layout properties like size, position, background color, spacing, and alignment during scene initialization. It depends on LayaAir's loader, Button, and HBox classes; inputs include skin resource URLs; outputs are a built HBox with buttons added to the scene hierarchy.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/HBox/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_HBox extends Laya.Script {\n\n    private hbox: Laya.HBox;\n    private btn1: Laya.Button;\n    private btn2: Laya.Button;\n    private btn3: Laya.Button;\n\n    // 按钮皮肤资源\n    private skins: string = \"atlas/comp/button.png\";\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        Laya.loader.load(this.skins).then(() => {\n            this.createBtn();\n            this.createHbox();\n            // 添加HBox组件\n            this.owner.addChild(this.hbox);\n        });\n    }\n\n    // 创建Button组件\n    private createBtn(): void {\n        this.btn1 = new Laya.Button(this.skins);\n        this.btn2 = new Laya.Button(this.skins);\n        this.btn3 = new Laya.Button(this.skins);\n    }\n\n    // 创建HBox组件\n    private createHbox(): void {\n        this.hbox = new Laya.HBox;\n        this.hbox.pos(100, 100);\n        this.hbox.size(600, 300);\n        this.hbox.bgColor = \"#ffffff\";\n        this.hbox.addChild(this.btn1);\n        this.hbox.addChild(this.btn2);\n        this.hbox.addChild(this.btn3);\n        this.hbox.space = 100;\n        this.hbox.align = \"middle\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Remote JavaScript Files Using Script Tag Src in LayaAir with TypeScript\nDESCRIPTION: This snippet dynamically creates a script DOM element in the document, sets its src attribute to an external JavaScript file URL ('demo1.js'), and appends it to the document body. It attaches event handlers for onload and onerror to handle success and failure of script loading. Upon successful load, it instantiates a class 'Demo1' declared inside the loaded script and calls its start method. The approach enables on-demand JavaScript loading, reducing initial load and improving user experience in large projects. Dependencies are LayaAir framework for DOM access and the existence of the external JS file.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(500,500);\n        var script:any = Laya.Browser.document.createElement(\"script\");\n        script.src = \"demo1.js\";\n        script.onload = function():void{\n            //加载完成函数，开始调用模块的功能。\n            //new一个js中的对象\n            var client:any = new Laya.Browser.window.Demo1();\n            client.start();\n        }\n        script.onerror = function():void{\n            //加载错误函数\n        }\n        Laya.Browser.document.body.appendChild(script);\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Defining Uniform Variables Map in Shader3D Configuration - TypeScript\nDESCRIPTION: Shows an example Shader3D configuration with a 'uniformMap' defining multiple uniform variables with their data types and default values. Uniforms include common types such as Color, Texture2D, Vector2/3/4, Bool, Float, TextureCube, and Matrix4x4. This map allows CPU to GPU data transfer where uniforms are global constants accessible in the shader program. The snippet uses TypeScript-like syntax to specify data binding and default states, facilitating flexible shader parameterization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n\t//联动上面2.2节提到的属性(name, type)\n\ttype: Shader3D\n\tname: ExampleShader\n\tuniformMap : {\n\t\tu_Color : {type: Color, default:[1,1,1,1]},\n\t\tu_MainTex : {type: Texture, default: \"white\"},\n\t\tu_SampleTexcoord : {type: Vector2, default:[1,1]},\n\t\tu_LightDir : {type: Vector3, default:[1,1,1]},\n\t\tu_vecPos : {type:Vector4, default:[1,1,1,1]},\n\t\tu_isWebGL2 : {type: bool, default: true},\n\t\tu_spend : {type:float, default:1.0},\n\t\tu_SkyMap : {type:TextureCube, defalue: \"black\"}\n\t\tu_defaultMat : {type:Matrix4x4, default:[\n\t\t1,0,0,0\n\t\t0,1,0,0,\n\t\t0,0,1,0,\n\t\t0.0,0,\n\t\t]}\n\t}\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: onClosed Lifecycle Method - TypeScript\nDESCRIPTION: This TypeScript code snippet defines the `onClosed` lifecycle method, which is called when a scene is closed. This method can be used to release resources or perform other cleanup tasks.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 关闭完成后，调用此方法（如果有关闭动画，则在动画完成后执行）\n * @param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。\n */\nonClosed(type: string = null): void {\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Unity Particle System to LayaAir JSON - Unity Export Plugin - C#\nDESCRIPTION: This C# method, found in ParticleSystemData.cs of the Unity export plugin, serializes a Unity ParticleSystem into a JSON object compatible with LayaAir-IDE. It invokes a set of helper methods to extract and map all relevant modules (emission, shape, velocity, size, color, etc.) from Unity to corresponding fields expected by LayaAir. Dependencies include a valid Unity ParticleSystem instance, utility classes (like JsonUtils), and various mapping objects (NodeMap, ResoureMap). Inputs are the particleSystem object and control parameters, with output as a fully populated JSONObject ready for the LayaAir-IDE import process. Limitations include possible incompatibility if custom shaders are not manually converted before export.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/cpuParticle/unityCPUPartical/readme.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static JSONObject GetParticleSystem(ParticleSystem particleSystem, bool isOverride, NodeMap map, ResoureMap resMap)\n{\n    JSONObject compData = JsonUtils.SetComponentsType(new JSONObject(JSONObject.Type.OBJECT), \"ParticleSystem\", isOverride);\n    writeBaseNode(particleSystem, compData);\n    writeEmission(particleSystem, compData);\n    writeShape(particleSystem, compData,map, resMap);\n    writeVelocityOverLifetime(particleSystem, compData);\n    writeSizeOverLifetime(particleSystem, compData);\n    writeForceOverLifetime(particleSystem, compData);\n    writeRotationOverLifetime(particleSystem, compData);\n\n    writeLimitVelocityOverLifetime(particleSystem, compData);\n    writeColorOverLifetime(particleSystem, compData);\n    writeColorBySpeed(particleSystem, compData);\n    writeSizeBySpeed(particleSystem, compData);\n    writeRotationBySpeed(particleSystem, compData);\n    writeInheritVelocity(particleSystem, compData);\n    writeNoise(particleSystem, compData);\n    writeTextureSheetAnimation(particleSystem, compData);\n    writeSubEmittersModule(particleSystem, compData, map);\n\n    return compData;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Component Programmatically in LayaAir\nDESCRIPTION: This code demonstrates how to create a Radio component purely through code in LayaAir. It shows initialization, positioning, sizing, appearance configuration, and label styling of a Radio component without using the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Radio/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Radio extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        let radio: Laya.Radio = new Laya.Radio();\n        radio.pos(200, 200);\n        radio.size(160, 64);\n        radio.stateNum = 3;\n        radio.selected = false;\n        radio.skin = \"atlas/comp/radio.png\";\n        radio.label = \"LayaAir\";\n        radio.labelSize = 20;\n        radio.labelBold = true;\n        radio.labelVAlign = \"top\";\n        this.owner.addChild(radio);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scene2D autoDestroyAtClosed Property - TypeScript\nDESCRIPTION: This TypeScript code snippet shows the `autoDestroyAtClosed` property of the `Scene2D` class.  When `autoDestroyAtClosed` is set to `true`, the scene and its resources are automatically destroyed when the scene is closed. This property helps manage memory efficiently. Defaults to `false`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**场景被关闭后，是否自动销毁（销毁节点和使用到的资源），默认为false*/\nautoDestroyAtClosed: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing 2D Sprite Light in LayaAir using TypeScript\nDESCRIPTION: A complete implementation of a 2D sprite light system using LayaAir. The code demonstrates loading a sprite texture, configuring both sprite light and directional light components, and setting up a background that can receive light. It includes utility methods for generating rectangular meshes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/SpriteLight2D/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class SpriteLight extends Laya.Script {\n\n    @property({type: Laya.Sprite})\n    private spriteLight: Laya.Sprite;\n\n    @property({type: Laya.Sprite})\n    private directLight: Laya.Sprite;\n\n    @property({type: Laya.Sprite})\n    private background: Laya.Sprite;\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        // 加载资源\n        Laya.loader.load(\"resources/spritelight.png\", Laya.Loader.IMAGE).then(() => {\n            this.setSpriteLight();\n            this.setDirectLight();\n            this.setBackground();\n        });\n    }\n\n    // 配置精灵灯光\n    setSpriteLight(): void {\n        this.spriteLight.pos(100,350);\n        let spritelightComponent = this.spriteLight.getComponent(Laya.SpriteLight2D);\n        spritelightComponent.color = new Laya.Color(1, 1, 1);\n        spritelightComponent.intensity = 0.5;\n        let tex = Laya.loader.getRes(\"resources/spritelight.png\");\n        spritelightComponent.spriteTexture = tex;\n    }\n\n    // 配置方向光\n    setDirectLight(): void {\n        let directlithtComponent = this.directLight.getComponent(Laya.DirectionLight2D);\n        directlithtComponent.color = new Laya.Color(1, 1, 1);\n        directlithtComponent.intensity = 0.2;\n    }\n\n    // 配置背景\n    setBackground(): void {\n        let mesh2Drender = this.background.getComponent(Laya.Mesh2DRender);\n        mesh2Drender.sharedMesh = this.generateRectVerticesAndUV(1000, 1000);\n        mesh2Drender.lightReceive = true;\n    }\n\n    // 生成一个矩形\n    private generateRectVerticesAndUV(width: number, height: number): Laya.Mesh2D {\n        const vertices = new Float32Array(4 * 5);\n        const indices = new Uint16Array(2 * 3);\n        let index = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 1;\n\n        vertices[index++] = 0;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n\n        index = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = 3;\n\n        indices[index++] = 1;\n        indices[index++] = 2;\n        indices[index++] = 3;\n\n        const declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n        const mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([vertices], [declaration], indices, Laya.IndexFormat.UInt16, [{ length: indices.length, start: 0 }]);\n        return mesh2D;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Color Input Control in LayaAir Component Properties Using TypeScript\nDESCRIPTION: This snippet shows how to enforce a color input control for a component property typed as a string in LayaAir IDE using the @property decorator. Normally, the IDE picks input controls corresponding to property types automatically, but here the 'inspector' parameter is set to \"color\" to override and display a color picker UI. It requires LayaAir's property decorator support and sets the property type to String. The property accepts color values as strings, e.g., rgba formats, but this approach is meant specifically for 2D component colors. Note that if the property type were Laya.Color, this override is unnecessary. Setting 'inspector' to null disables input control creation entirely.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n//显示为颜色输入（如果类型是Laya.Color，则不需要这样定义，如果是字符串类型，则需要）\n@property({ type: String, inspector: \"color\"})\ncolor: string;\n```\n\n----------------------------------------\n\nTITLE: 定义Animator状态脚本类（TypeScript）\nDESCRIPTION: 此代码实现一个继承自Laya.AnimatorStateScript的动画状态脚本，主要功能包括设置动画状态信息、在状态进入、更新和退出时执行自定义逻辑。通过重写onStateEnter、onStateUpdate及onStateExit方法，可实现动画状态变换时的特定操作。本脚本还定义了setPlayScriptInfo方法，用于获取当前动画组件、层级、状态的相关信息，便于状态机逻辑处理。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\ninterface AnimatorPlayScriptInfo {\n    animator: Laya.Animator | Laya.Animator2D;\n    layerindex: number;\n    playState: Laya.AnimatorState | Laya.AnimatorState2D;\n}\n\n/**\n * 继承自AnimatorStateScript(动画状态脚本)\n * @author ...\n */\n@regClass()\nexport class AnimationScript extends Laya.AnimatorStateScript {\n    /**动画的状态信息 */\n    playStateInfo: AnimatorPlayScriptInfo = { animator: null, layerindex: -1, playState: null };\n\n    private isShow: boolean = false;\n    private _label: Laya.Label;\n    /**@internal */\n    setPlayScriptInfo(animator: Laya.Animator | Laya.Animator2D, layerindex: number, playstate: Laya.AnimatorState | Laya.AnimatorState2D) {\n        this.playStateInfo.animator = animator;\n        this.playStateInfo.layerindex = layerindex;\n        this.playStateInfo.playState = playstate;\n        this._label = animator.owner.scene.scene2D.getChildByName(\"Label\");\n    }\n    constructor() {\n        super();\n    }\n\n    /**\n     * 动画状态开始时执行。\n     */\n    onStateEnter(): void {\n        console.log(\"动画开始播放了\");\n        this._label.text = \"开始跑动画\";\n    }\n\n    /**\n     * 动画状态运行中\n     * @param normalizeTime 0-1动画播放状态\n     */\n    onStateUpdate(normalizeTime: number): void {\n        console.log(\"动画状态更新了：\" + normalizeTime);\n        if (normalizeTime > 0.5 && !this.isShow) {\n            this.isShow = true;\n            this._label.text = \"跑动画一半\";\n        }\n    }\n\n    /**\n    * 动画状态退出时执行。\n    */\n    onStateExit(): void {\n        console.log(\"动画退出了\");\n        this._label.text = \"退出跑动画\";\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Icons in IDE - TypeScript\nDESCRIPTION: Shows how to associate specific SVG icon files with custom file extensions in the LayaAir IDE's resource library. The `Editor.extensionManager.setFileIcon` method is used within the plugin's load function (`@IEditor.onLoad`), mapping extensions (e.g., \"abc\") to an icon path.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AssetHelper {\n    @IEditor.onLoad\n    onLoad() {\n        //Set the icon for files with extension abc to abc.svg, editorResources refers to a directory under the assets directory\n        Editor.extensionManager.setFileIcon([\"abc\"], \"editorResources/abc.svg\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Sprite Properties via Script Component in TypeScript\nDESCRIPTION: Shows how to define a custom Laya.Script component with a public `sprite` property linked via the IDE. The `onAwake` method then modifies various properties of the linked Sprite instance, such as loading an image, setting position, size, pivot point, anchor, scale, skew, rotation, visibility, and alpha.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Sprite })\n    public sprite: Laya.Sprite;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.sprite.loadImage(\"atlas/comp/image.png\"); //纹理：图片路径\n\n        this.sprite.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置：屏幕中心\n        this.sprite.x = Laya.stage.width/2; //x、y分别设置位置\n        this.sprite.y = Laya.stage.height/2;\n\n        this.sprite.size(512, 313); //大小\n        this.sprite.width = 512; //宽、高分别设置大小\n        this.sprite.height = 313;\n\n        this.sprite.pivot(this.sprite.width/2, this.sprite.height/2); //轴心点：sprite的中心\n        this.sprite.pivotX = this.sprite.width/2; //x、y分别设置轴心点\n        this.sprite.pivotY = this.sprite.height/2;\n\n        this.sprite.anchorX = 0.5; //锚点:sprite的中心\n        this.sprite.anchorY = 0.5;\n\n        this.sprite.scale(0.5, 0.5); //缩放大小\n        this.sprite.scaleX = 2; //x、y分别设置缩放\n        this.sprite.scaleY = 2;\n\n        this.sprite.skew(5, 5); //倾斜度\n        this.sprite.skewX = 5; //x、y分别设置倾斜度\n        this.sprite.skewY = 5;\n\n        this.sprite.rotation = 45; //旋转角度\n\n        this.sprite.visible = true; //是否可见：可见\n\n        this.sprite.alpha = 0.5; //透明度\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Millisecond-Based One-Time Timer Callback in LayaAir Script (TypeScript)\nDESCRIPTION: Demonstrates scheduling a function to set an image's alpha to 0.5 one second after the onAwake call using Laya.timer.once within a class extending RuntimeScriptBase. Intended for animation or UI changes in LayaAir scenes, this approach leverages the timer's millisecond precision.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //1秒后，图片的透明度变为0.5\n        Laya.timer.once(1000, this, () => {\n            this.Image.alpha = 0.5;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TextureConstructParams Interface Definition in LayaAir (TypeScript)\nDESCRIPTION: This code defines the `TextureConstructParams` interface, specifying optional parameters used during the construction of a texture in LayaAir. These parameters control aspects such as width, height, format, mipmapping, read access, and sRGB color space.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nTextureConstructParams {\n    width?: number,\n    height?: number,\n    format?: TextureFormat,\n    mipmap?: boolean,\n    canRead?: boolean,\n    sRGB?: boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties with @property() in TypeScript\nDESCRIPTION: This snippet illustrates how to define component properties using the `@property()` decorator in LayaAir TypeScript. It showcases both the standard and shorthand methods for defining properties. The standard method allows specifying a caption for display in the IDE, as well as a tooltip. The shorthand method only defines the property's type.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript1 extends Laya.Script {\n    //装饰器属性的标准写法，适用于IDE的需要显示Tips或属性的中文别名等完整功能需求\n    @property({ type: String, caption: \"IDE显示用的别名\", tips: \"这是一个文本对象，只能输入文本哦\" }) \n    public text1: string = \"\";\n\n    //装饰器属性类型的简写方式，适用于只定义类型的需求\n    @property(String)   \n    public text2: string = \"\";\n\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific or All Timers with Laya.Timer in TypeScript\nDESCRIPTION: Introduces the clear and clearAll methods to remove either specific timer callbacks or all timers attached to a context (caller). Their use is essential for proper lifecycle management and avoiding memory leaks. These methods check for registered handlers and delete them safely.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 清理定时器。\n * @param\tcaller 执行域(this)。\n * @param\tmethod 定时器回调函数。\n */\nclear(caller: any, method: Function): void {\n    var handler: TimerHandler = this._getHandler(caller, method);\n    if (handler) {\n        handler.clear();\n    }\n}\n\n/**\n * 清理对象身上的所有定时器。\n * @param\tcaller 执行域(this)。\n */\nclearAll(caller: any): void {\n    if (!caller) return;\n    for (var i: number = 0, n: number = this._handlers.length; i < n; i++) {\n        var handler: TimerHandler = this._handlers[i];\n        if (handler.caller === caller) {\n            handler.clear();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HScrollBar via Code\nDESCRIPTION: This TypeScript code illustrates how to create an HScrollBar component programmatically in LayaAir.  It loads skin resources, instantiates the HScrollBar, sets its properties (skin, width, position, min, max), and defines a change handler to update a Text component with the scrollbar's value. The code depends on the LayaAir library.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/HScrollBar/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_HScrollBar extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    // 文本组件，用于显示滚动条的value值\n    public text: Laya.Text;\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 创建文本组件\n        this.text = new Laya.Text();\n        this.text.pos(300, 260);\n        this.owner.addChild(this.text);\n\n        // 滚动条皮肤资源\n        var skins: any[] = [];\n        skins.push(\"atlas/comp/hscroll.png\", \"atlas/comp/hscroll$bar.png\", \"atlas/comp/hscroll$down.png\", \"atlas/comp/hscroll$up.png\");\n\n        Laya.loader.load(skins).then(() => {\n            // 创建滚动条\n            var hs: Laya.HScrollBar = new Laya.HScrollBar();\n            hs.skin = \"atlas/comp/hscroll.png\";\n            hs.width = 300;\n            hs.pos(300, 300);\n            hs.min = 0;\n            hs.max = 100;\n            hs.changeHandler = new Laya.Handler(this, this.onChange);\n            this.owner.addChild(hs);\n        });\n    }\n\n    private onChange(value: number): void {\n        this.text.text = \"滚动条的位置： value=\" + value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting World Coordinates to Grid Index\nDESCRIPTION: This function converts world coordinates (x, z) to grid indices (x, y) based on the terrain's properties, and boundary conditions. It takes world coordinates and the AStarMap as input. The output is stored in the `out` parameter. The function calculates the grid index by referencing the terrain's height, width, depth properties and the dimension of the AStarMap.  It also clamps the resulting grid indices to ensure they fall within the map bounds.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nprivate getGridIndex(x: number, z: number, out: Vector2) {\n        var minX = this.terrainSprite.minX;\n        var minZ = this.terrainSprite.minZ;\n        var cellX = this.terrainSprite.width / this.aStarMap.width;\n        var cellZ = this.terrainSprite.depth / this.aStarMap.height;\n        var gridX = Math.floor((x - minX) / cellX);\n        var gridZ = Math.floor((z - minZ) / cellZ);\n        var boundWidth = this.aStarMap.width - 1;\n        var boundHeight = this.aStarMap.height - 1;\n        (gridX > boundWidth) && (gridX = boundWidth);\n        (gridZ > boundHeight) && (gridZ = boundHeight);\n        (gridX < 0) && (gridX = 0);\n        (gridZ < 0) && (gridZ = 0);\n        out.x = gridX;\n        out.y = gridZ;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Interface with Achievement Function - TypeScript\nDESCRIPTION: This TypeScript code defines an interface `IExtendLib` that declares the `setAchievement` and `steamCallback` functions in addition to the `initializeSteam` function. The `setAchievement` function takes an `achievementID` (string) as input and returns a number (1 for success, 0 for failure). The `steamCallback` has no arguments and also returns a number.  It imports the native \"steam_demo.dll\" library using `Laya.importNative` and assigns it to the `extendLib` constant.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IExtendLib {\n    // 初始化Steam\n    initializeSteam(): number;  // 返回1表示成功，0表示失败\n    \n    // 设置（解锁）某个成就\n    setAchievement(achievementID: string): number;  // 返回1表示成功，0表示失败\n\n    steamCallback(): number;  // Steam回调函数，返回1表示成功，0表示失败\n}\n\nexport const extendLib: IExtendLib = Laya.importNative(\"steam_demo.dll\");\n```\n\n----------------------------------------\n\nTITLE: 设置自定义菜单显示位置（LayaAir Editor TypeScript）\nDESCRIPTION: 为扩展菜单指定插入顺序，示例中 position: 'before openDevTools' 让新菜单显示在“开发者工具”菜单之前。依赖 @IEditor.menu 注解第二参数。适合复杂菜单层次管理和优化交互体验。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nclass AnyName {\n    @IEditor.menu(\"App/tool/test\", { position: \"before openDevTools\" } )\n    static test() {\n        console.log(\"click menu\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Images with Sprite.loadImage in LayaAir\nDESCRIPTION: This example demonstrates using the loadImage method to load and display an image with a Sprite. The sprite is positioned at the center of the stage after loading the image.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\n// 加载并显示一个图片，居中显示\nsprite.loadImage(\"atlas/comp/image.png\", null);\nsprite.pos(Laya.stage.width >> 1, Laya.stage.height >> 1);\n// 添加到舞台\nLaya.stage.addChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Drawing Nine-Grid Textures with draw9Grid() in LayaAir (TypeScript)\nDESCRIPTION: This example illustrates using draw9Grid() to render a texture with a 9-slice scaling technique, allowing flexible resizing with specified grid margins. It loads a texture, applies the nine-grid method with specified grid parameters, and adds the sprite to the scene. It enables scalable UI components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.loader.load(\"atlas/comp/image.png\").then((res: Laya.Texture) => {\n    let sp = new Laya.Sprite();\n    // Draw nine-grid texture\n    sp.graphics.draw9Grid(res, 0, 0, 1024, 626, [0, 0, 0, 0, 1]);\n    this.owner.addChild(sp);\n});\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Data Transfer Methods\nDESCRIPTION: This section details how data flows within a Shader Blueprint. Inputs on the left and outputs on the right. Inputs receive data from a source, Params variables, or outputs from other nodes. This forms the basis of constructing the shader.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Async JavaScript Method for Updating Local Cache by Zip File in LayaNative\nDESCRIPTION: An asynchronous JavaScript method updateByZip that updates local cache using a specified zip file, typically generated by DCC patch tools. It requires a local path zipfile and a Zip class constructor. The method opens the zip, iterates files (excluding 'head.json'), processes entries by adding them asynchronously, then attempts to update the local root descriptor by reading and parsing 'head.json'. It includes comments on concurrency control and notes that UI elements like progress tracking should be implemented externally. Exceptions during root update are silently caught.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/zipUpdate/readme.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n    /**\n     * 根据指定的zip文件更新本地缓存。\n     * 这个zip文件可以通过DCC插件的补丁生成工具来生成。\n     * \n     * 这个会修改本地保存的root\n     * @param zipfile 打补丁的zip文件，注意这里必须是本地目录，所以需要自己实现下载zip到本地之后才能调用这个函数。\n     * @param progress 进度提示，暂时没有实现。\n     */\n    async updateByZip(zipfile: string, zipClass: new () => IZip, progress: (p: number) => void) {\n        let zip = new zipClass();\n        zip.open(zipfile);\n        //TODO 数据太多的时候要控制并发\n        zip.forEach(async entry => {\n            if (entry.entryName == 'head.json') {\n            } else {\n                await this.addObject(entry.entryName, entry.getData())\n            }\n        })\n        //写head。zip中可能没有head.json，例如只是某个目录，这时候就不要更新root了\n        try {\n            let buf = zip.getEntry('head.json');\n            await this._frw.write('head.json', buf.getData().buffer, true);\n            //更新自己的root\n            let localHeadStr = await this._frw.read('head.json', 'utf8', true) as string;\n            let localHead = JSON.parse(localHeadStr) as RootDesc;\n            await this._gitfs.setRoot(localHead.root);\n        } catch (e) {\n\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Click-Scale Animation with ImageRunTime in TypeScript\nDESCRIPTION: This code defines an ImageRunTime class that extends Laya.Image to create a button-like behavior with mouse interaction. It implements scaling animation when clicking on image components, with the component shrinking on mouse down and returning to normal size on mouse up or out.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/ScriptUse/runtime/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\nImageRunTime逻辑类 \n*/\nexport default class ImageRunTime extends Laya.Image{\n    public scaleTime:number = 100;\n    constructor() {\n        super();\n        //设置组件的中心点\n        this.anchorX = this.anchorY = 0.5;\n        //添加鼠标按下事件侦听。按时时缩小按钮。\n        this.on(Laya.Event.MOUSE_DOWN,this,this.scaleSmall);\n        //添加鼠标抬起事件侦听。抬起时还原按钮。\n        this.on(Laya.Event.MOUSE_UP,this, this.scaleBig);\n        //添加鼠标离开事件侦听。离开时还原按钮。\n        this.on(Laya.Event.MOUSE_OUT,this, this.scaleBig);\n    }\n    private scaleBig():void\n    {\n        //变大还原的缓动效果\n        Laya.Tween.to(this, {scaleX:1,scaleY:1},this.scaleTime);\n    }\n    private scaleSmall():void\n    {\n        //缩小至0.8的缓动效果\n        Laya.Tween.to(this,{scaleX:0.8,scaleY:0.8},this.scaleTime);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading JSON with Laya.loader.load in LayaAir with TypeScript\nDESCRIPTION: This TypeScript code shows how to load a JSON file using `Laya.loader.load`. The loaded JSON data is accessed through the `data` property of the result. The code then extracts data from the JSON and assigns it to a `bagList` component, demonstrating how to use loaded JSON data within a LayaAir application.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nonEnable(): void {\n    const jsonPath: string = \"json/bagList.json\";\n    Laya.loader.load(jsonPath).then((json) => {\n        let _json = json.data;\n        if (_json.bagList && _json.bagList.length > 0) {\n            //把json数据传递给list组件的数据源属性array\n            this.bagList.array = _json.bagList;\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Object from Pool by Sign in TypeScript\nDESCRIPTION: Fetches an object from the pool associated with the given sign. If the pool is empty, returns null. This method is central to reusing objects like bullets or effects during gameplay for performance efficiency.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Pool/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getItem(sign: string): any {\n    var pool: any[] = Pool.getPoolBySign(sign);\n    var rst: any = pool.length ? pool.pop() : null;\n    if (rst) {\n        rst[Pool.POOLSIGN] = false;\n    }\n    return rst;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example Script for Protobuf WebSocket Communication in LayaAir\nDESCRIPTION: A full TypeScript LayaAir script demonstrating protobuf message usage over WebSocket. It imports the protobuf definitions, initializes the protobuf message type `ChatMessage`, connects a WebSocket to a local server, and handles sending and receiving protobuf-encoded binary messages. Methods include serializing an outgoing greeting message, decoding incoming messages, and handling typical WebSocket events including open, message, close, and error.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/ProtobufDemo.ts\n// 引入生成的 protobuf 模块，路径相对于当前文件\nimport * as protobuf from \"./libs/protobuf/protobuf\";\nconst { regClass } = Laya;\n\n@regClass()\nexport class ProtobufDemo extends Laya.Script {\n    private ChatMessage: any;\n    private socket: WebSocket | null = null;\n\n    onStart() {\n        console.log(\"Game start\");\n        // 初始化 protobuf\n        this.initializeProtobuf();\n\n        // 初始化 WebSocket 连接\n        this.initializeWebSocket();\n    }\n\n    // 初始化 protobuf 并加载消息定义\n    private initializeProtobuf() {\n        // ChatMessage 是 .proto 文件中定义的消息类型，包含了字段 user、message 和 timestamp，分别用于表示用户名、消息内容和时间戳。\n        this.ChatMessage = protobuf.ChatMessage;\n    }\n\n    // 初始化 WebSocket 并处理消息\n    private initializeWebSocket() {\n        this.socket = new WebSocket(\"ws://localhost:8080\");\n        this.socket.binaryType = \"arraybuffer\";\n        // 连接成功时发送测试消息\n        this.socket.onopen = () => {\n            console.log(\"WebSocket connected\");\n\n            // 发送 ChatMessage 类型的打招呼消息，user 字段表示消息发送者的用户名。message 字段包含消息内容。timestamp 是当前时间戳。\n            const greetingMessage = { user: \"LayaAir\", message: \"Hello, Server!\", timestamp: Date.now() };\n            //调用 encode 方法，将 greetingMessage 对象编码为二进制格式（即序列化），通过.finish()返回一个 Uint8Array类型的二进制缓冲区。\n            const greetingBuffer = this.ChatMessage.encode(greetingMessage).finish();\n            //socket不为 null 或 undefined时，将二进制数据 greetingBuffer 通过 WebSocket 发送到服务器。\n            this.socket?.send(greetingBuffer);\n        };\n\n        // 接收服务器返回的消息\n        this.socket.onmessage = (event) => {\n            //将 event.data 转换为 Uint8Array 类型，以便传递给解码函数 handleServerResponse 进行处理。\n            const buffer = new Uint8Array(event.data);\n            this.handleServerResponse(buffer);\n        };\n\n        // 连接关闭处理\n        this.socket.onclose = () => {\n            console.log(\"WebSocket closed\");\n        };\n\n        // 连接错误处理\n        this.socket.onerror = (error) => {\n            console.error(\"WebSocket error:\", error);\n        };\n    }\n    private handleServerResponse(buffer: Uint8Array) {\n        // 尝试解码为 ChatMessage，使用 decode 方法，将接收到的 Uint8Array 数据 buffer 反序列化为 ChatMessage 类型的 JavaScript 对象。\n        const chatMessage = this.ChatMessage.decode(buffer);\n        console.log(\"Received ChatMessage from server:\", chatMessage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 绘制圆形的 drawCircle() 方法及示例\nDESCRIPTION: 此代码示范了如何使用 drawCircle 方法绘制圆形。包含圆心位置、半径、填充和边框参数。示例中在(80,80)位置以半径50绘制红色填充的圆形，简单直观。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//画圆\nsp.graphics.drawCircle(80,80,50,\"#ff0000\");\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Main Runtime Singleton and 3D UI Billboard Control (TypeScript)\nDESCRIPTION: This code snippet provides the setup of a Main runtime class in TypeScript for a Scene2D in a LayaAir project. It creates a singleton for easy cross-component communication, exposes Sprite3D and UI3D properties for IDE binding, and assigns an Animator component from a 3D target node. In the onEnable lifecycle method, the snippet enables billboard mode for the UI3D and retrieves the character's Animator for later animation state changes. Dependencies are Laya's regClass and property decorators, as well as classes for Sprite3D, UI3D, and Animator. The snippet should be attached to the root node of the scene, and it requires correct assignment of target and ui3d references within the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/3DUI/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    // 设置单例\n    static instance: Main;\n\n    constructor() {\n        super();\n        Main.instance = this;\n    }\n\n    @property({type:Laya.Sprite3D})\n    private target: Laya.Sprite3D;\n\n    @property({type:Laya.UI3D})\n    private ui3d: Laya.UI3D;\n\n    public animator: Laya.Animator;\n\n    onEnable() {\n        // 广告牌模式\n        this.ui3d.billboard = true;\n        //获得状态机\n        this.animator = this.target.getComponent<Laya.Animator>(Laya.Animator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Resource Description and Log with TypeScript\nDESCRIPTION: This snippet demonstrates retrieving resource descriptions using `Addressables.getLocationAsync` and logs the result to the console. It uses an array of keys and `MergeMode.Union`. This provides a way to retrieve the metadata of a resource for further processing, which might include dependency analysis or asset management.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.getLocationAsync([\"test2\"], MergeMode.Union).then((res) => {\n        console.log(res);\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Single-Line Text Updates Using changeText in LayaAir with TypeScript\nDESCRIPTION: This snippet illustrates the use of the Text.changeText method in LayaAir to efficiently update the text content of a single-line Text object without triggering a full text layout recalculation. It requires the text to remain one line with unchanged style properties. This approach enhances performance in scenarios where text content frequently changes but style and line count are stable. The snippet includes creating a Text instance, adding it to stage, setting text normally, and then updating using changeText.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/rendering/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.text.text=\"text\";\nLaya.stage.addChild(this.text);\n//后面只是更新文字内容，使用changeText能提高性能\nthis.text.changeText(\"text changed.\");\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code Using qrcode.js in LayaAir with TypeScript\nDESCRIPTION: This TypeScript snippet exemplifies creating and displaying a QR code in a LayaAir project by integrating the third-party 'qrcode.js' library. It creates a DOM div element as the QR code container, instantiates a QRCode object with specified width and height, and generates QR code data for a given URL. The generated QR code (canvas element) is then positioned onto the Laya stage as a sprite container. Dependencies include the externally loaded 'qrcode.js' library and LayaAir's Browser and Sprite modules. Key parameters include the URL string to encode, and the output is the QR code visualization rendered on the stage. Note that the generated QR code uses a canvas element, which may not support native long-press recognition on some platforms.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvar div:any = Laya.Browser.document.createElement(\"div\");\nthis.qrcode = new Laya.Browser.window.QRCode(div,{\n    width:100,\n    height:100\n});\nvar url:string = \"http://layabox.com/\";\nthis.qrcode.makeCode(url);\nLaya.stage.once(\"click\",this,this.clickHandler);\nthis.qrcodeSp = new Laya.Sprite();\nLaya.stage.addChild(this.qrcodeSp);\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Mouse Event Lifecycle Methods with Script3D in LayaAir - TypeScript\nDESCRIPTION: This snippet defines a Script3DTest class extending Laya.Script3D to handle full mouse event lifecycle methods for a 3D object. Requires the object to have both Script3D and physics collider components. The handler methods (onMouseEnter, onMouseOver, onMouseDown, onMouseClick, onMouseUp, onMouseDrag, onMouseOut) respond to their respective mouse events on the attached 3D object. Event firing depends on proper scene and physics initialization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class Script3DTest extends Laya.Script3D {\n\n    onMouseEnter(): void {\n        console.log(\"onMouseEnter:鼠标移动时,鼠标进入脚本所属的3D对象时触发，只在刚进入的时候触发一次\");\n    }\n\n    onMouseOver(): void {\n        console.log(\"onMouseOver:鼠标在脚本所属的3D对象时触发,每帧都在触发\");\n    }\n\n    onMouseDown(): void {\n        console.log(\"onMouseDown:鼠标在脚本所属的3D对象上按下时触发\");\n    }\n\n    onMouseClick(): void {\n        console.log(\"onMouseClick:鼠标在脚本所属的3D对象上点击时触发\");\n    }\n\n    onMouseUp(): void {\n        console.log(\"onMouseUp:鼠标在脚本所属的3D对象上抬起时触发\");\n    }\n\n    onMouseDrag(): void {\n        console.log(\"onMouseDrag:鼠标拖拽对象时触发,鼠标在脚本所属的3D对象时,按住鼠标任意键,每帧都在触发\");\n    }\n\n    onMouseOut(): void {\n        console.log(\"onMouseOut:鼠标移动时,鼠标离开脚本所属的3D对象时触发\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image using Sprite.texture in TypeScript\nDESCRIPTION: Shows how to first load an image resource using `Laya.loader.load` and then, within the promise resolution, create a Sprite, retrieve the loaded resource using `Laya.loader.getRes`, assign it to the Sprite's `texture` property, position the Sprite, and add it to the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"atlas/comp/image.png\").then(() => {\n    let sprite = new Laya.Sprite();\n    //精灵设置纹理并居中显示\n    let res = Laya.loader.getRes(\"atlas/comp/image.png\");\n    sprite.pos(Laya.stage.width >> 1, Laya.stage.height >> 1);\n    sprite.texture = res;\n    // 添加到舞台\n    Laya.stage.addChild(sprite);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Movement and Adjusting Frame Rates with LayaAir Stage in TypeScript\nDESCRIPTION: Example initializes a LayaAir stage and sets its frameRate property to FRAME_SLOW mode. It draws a circle Sprite that follows mouse movements. Shows the difference between FRAME_SLOW (approx 30 FPS) and FRAME_MOUSE modes, where FRAME_MOUSE dynamically switches frame rates based on activity, providing smoother movement during interaction and saving resources during idle times. Requires LayaAir engine and TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.init(this.Browser.width,this.Browser.height);\nLaya.Stat.show();\nLaya.stage.frameRate=Laya.Stage.FRAME_SLOW;\nvar sp=new Laya.Sprite();\nsp.graphics.drawCircle(0,0,20,\"#990000\");\nLaya.stage.addChild(sp);\nLaya.stage.on(Laya.Event.MOUSE_MOVE,this,function()\n{\n\tsp.pos(Laya.stage.mouseX,Laya.stage.mouseY);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Aspect Ratio in LayaAir TypeScript\nDESCRIPTION: These snippets demonstrate how to manually set a camera's aspect ratio in LayaAir, as well as how to reset it to automatic calculation mode. Setting a specific value locks the ratio, while setting it to 0 returns to dynamic adjustment based on screen dimensions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//手动设置横纵比\ncamera.aspectRatio = 2;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//重置\ncamera.aspectRatio = 0;\n```\n\n----------------------------------------\n\nTITLE: Accessing Device Camera Using LayaAir Media API in TypeScript\nDESCRIPTION: This TypeScript class showcases the integration of the HTML5 video camera feed into a LayaAir application using LayaAir's Media API. It initializes the Laya engine with full screen dimensions, checks for media support, and upon success, requests camera video stream with specified constraints (rear camera, full stage dimensions). On success, the camera stream URL is loaded into a Laya.Video instance that is added to the stage. A text prompt is displayed instructing users to tap to toggle play/pause of the camera feed. Error handling displays alerts if media access fails. The input includes configuration options for audio and video constraints and user interaction events; the output is a live camera feed in the LayaAir stage UI. Important prerequisites include running on HTTPS for camera access permissions and compatible modern browsers or environments like WeChat that support getUserMedia.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(Laya.Browser.width,Laya.Browser.height);\n        if(Laya.Media.supported() === false){\n            alert(\"当前浏览器不支持\");\n        }\n        else{\n            this.showMessage();\n            var options:any = {\n                audio:true,\n                video:{\n                    facingMode: { exact: \"environment\" },    // 后置摄像头，默认值就是，不设至也可以。\n                    width: Laya.stage.width,\n                    height:Laya.stage.height\n                }\n            };\n            Laya.Media.getMedia(options,Laya.Handler.create(this,this.onSuccess),Laya.Handler.create(this,this.onError));\n        }\n    }\n    private showMessage():void{\n        var tex:Laya.Text = new Laya.Text();\n        Laya.stage.addChild(tex);\n        tex.text = \"单击舞台播放和暂停\";\n        tex.color = \"#ffffff\";\n        tex.fontSize = 100;\n        tex.valign = \"middle\";\n        tex.align = \"center\";\n        tex.size(Laya.stage.width,Laya.stage.height);\n    }\n    private onSuccess(url:string):void{\n        this.video = new Laya.Video(Laya.stage.width,Laya.stage.height);\n        this.video.load(url);\n        Laya.stage.addChild(this.video);\n        Laya.stage.on(\"click\",this,this.onStageClick);\n    }\n    private onerror(error:Error):void{\n        alert(error.message);\n    }\n    private onStageClick():void{\n        //切换播放和暂停\n        if(!this.video.paused){\n            this.video.pause();\n        }\n        else{\n            this.video.play();\n        }\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Querying Child Nodes by Name in LayaAir3D (TypeScript)\nDESCRIPTION: Implements the getChildByName method to retrieve a child node matching a given name from a node's children. Requires the node to have a _children property (array of child nodes) and each child to include a name attribute. Returns the first matching child Node object or null if not found.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 根据子节点的名字，获取子节点对象。\n     * @param\tname 子节点的名字。\n     * @return\t节点对象。\n     */\n    getChildByName(name: string): Node {\n        for (let child of this._children) {\n            if (child && child.name === name)\n                return child;\n        }\n        return null;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Mesh Primitives with Laya.PrimitiveMesh in TypeScript\nDESCRIPTION: Using the PrimitiveMesh class to generate basic 3D meshes such as box, sphere, cylinder, capsule, cone, and plane in TypeScript. These mesh objects are used as shapes for 3D models and require further component addition to be visible in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/displayObject/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n* 创建Box网格。\n* @param long 半径\n* @param height 垂直层数\n* @param width 水平层数\n* @return\n*/\nstatic createBox(long: number = 1, height: number = 1, width: number = 1): Mesh\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//正方体\nLaya.PrimitiveMesh.createBox(0.5, 0.5, 0.5);\n//球体\nLaya.PrimitiveMesh.createSphere(0.25, 20, 20);\n//圆柱体\nLaya.PrimitiveMesh.createCylinder(0.25, 1, 20);\n//胶囊体\nLaya.PrimitiveMesh.createCapsule(0.25, 1, 10, 20);\n//圆锥体\nLaya.PrimitiveMesh.createCone(0.25, 0.75);\n//平面\nLaya.PrimitiveMesh.createPlane(6, 6, 10, 1));\n```\n\n----------------------------------------\n\nTITLE: Cross-fading Between Animator States in TypeScript\nDESCRIPTION: Provides the method signature for `Animator.crossFade()` and shows how to use it for smooth transitions between animation states. It demonstrates blending from the current state into the \"Run\" state over a specified duration (0.3 normalized time units). Assumes `this.animator` is a valid Laya.Animator instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 在当前动画状态和目标动画状态之间进行融合过渡播放。\n * @param\tname 目标动画状态。\n * @param\ttransitionDuration 过渡时间,该值为当前动画状态的归一化时间，值在0.0~1.0之间。\n * @param\tlayerIndex 层索引。\n * @param\tnormalizedTime 归一化的播放起始时间。\n */\ncrossFade(name: string, transitionDuration: number, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//动画状态机，过渡融合到Run动画状态\nthis.animator.crossFade(\"Run\", 0.3);\n```\n\n----------------------------------------\n\nTITLE: Controlling Sprite Properties with TypeScript in LayaAir\nDESCRIPTION: This script demonstrates how to control various Sprite properties through a custom component script in LayaAir. It shows how to load images, position sprites, set size, pivot points, anchors, scale, skew, rotation, visibility, and transparency.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Sprite })\n    public sprite: Laya.Sprite;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.sprite.loadImage(\"atlas/comp/image.png\"); //纹理：图片路径\n\n        this.sprite.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置：屏幕中心\n        this.sprite.x = Laya.stage.width/2; //x、y分别设置位置\n        this.sprite.y = Laya.stage.height/2;\n\n        this.sprite.size(512, 313); //大小\n        this.sprite.width = 512; //宽、高分别设置大小\n        this.sprite.height = 313;\n\n        this.sprite.pivot(this.sprite.width/2, this.sprite.height/2); //轴心点：sprite的中心\n        this.sprite.pivotX = this.sprite.width/2; //x、y分别设置轴心点\n        this.sprite.pivotY = this.sprite.height/2;\n\n        this.sprite.anchorX = 0.5; //锚点:sprite的中心\n        this.sprite.anchorY = 0.5;\n\n        this.sprite.scale(0.5, 0.5); //缩放大小\n        this.sprite.scaleX = 2; //x、y分别设置缩放\n        this.sprite.scaleY = 2;\n\n        this.sprite.skew(5, 5); //倾斜度\n        this.sprite.skewX = 5; //x、y分别设置倾斜度\n        this.sprite.skewY = 5;\n\n        this.sprite.rotation = 45; //旋转角度\n\n        this.sprite.visible = true; //是否可见：可见\n\n        this.sprite.alpha = 0.5; //透明度\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Build Tasks for Multiple Platforms in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a class with static async methods to initiate build tasks for various target platforms such as web, WeChat, TikTok, Oppo, Vivo, Xiaomi, Alipay, and Taobao. Each method starts the corresponding build process and waits for its completion, leveraging the IEditorEnv.BuildTask API.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/commandLine/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regClass()\nclass MyScript {\n    // 构建web\n    static async buildWeb() {\n        return IEditorEnv.BuildTask.start(\"web\").waitForCompletion();\n    }\n\n    // 构建微信小游戏\n    static async buildWxgame() {\n        return IEditorEnv.BuildTask.start(\"wxgame\").waitForCompletion();\n    }\n\n    // 构建抖音小游戏\n    static async buildBytedancegame() {\n        return IEditorEnv.BuildTask.start(\"bytedancegame\").waitForCompletion();\n    }\n\n    // 构建oppo小游戏\n    static async buildOppogame() {\n        return IEditorEnv.BuildTask.start(\"oppogame\").waitForCompletion();\n    }\n\n    // 构建vivo小游戏\n    static async buildVivogame() {\n        return IEditorEnv.BuildTask.start(\"vivogame\").waitForCompletion();\n    }\n\n    // 构建小米快游戏\n    static async buildXmgame() {\n        return IEditorEnv.BuildTask.start(\"xmgame\").waitForCompletion();\n    }\n\n    // 构建支付宝小游戏\n    static async buildAlipaygame() {\n        return IEditorEnv.BuildTask.start(\"alipaygame\").waitForCompletion();\n    }\n\n    // 构建淘宝小游戏\n    static async tbgame() {\n        return IEditorEnv.BuildTask.start(\"tbgame\").waitForCompletion();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying ColorFilter to Laya.Image in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a ColorFilter object and apply it to a Laya.Image component, setting various parameters such as color, brightness, contrast, saturation, and hue to achieve specific visual effects in TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Filter/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Image })\n    public img: Laya.Image;\n\n    onAwake(): void {\n        let colorFilter: Laya.ColorFilter = new Laya.ColorFilter();\n        this.img.filters = [colorFilter];\n        colorFilter.color(0.5, 0.5, 0.5, 1);\n        colorFilter.adjustBrightness(-50);\n        colorFilter.adjustContrast(8);\n        colorFilter.adjustSaturation(30);\n        colorFilter.adjustHue(-15);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying ColorFilter in LayaAir with TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a ColorFilter instance and assign it to an Image component's filters array in LayaAir. The code sets filter properties such as color, brightness, contrast, saturation, and hue to customize the color appearance of the image. It requires the LayaAir engine and a Laya.Image component. Inputs include adjusting color parameters to achieve desired visual effects; output is the image rendered with applied color modifications. This method is commonly used to dynamically adjust UI visuals at runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Filter/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n\t// 获得Image组件\n\t@property({ type: Laya.Image })\n\tpublic img: Laya.Image;\n\n\t//组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n\tonAwake(): void {\n\t\t//创建一个颜色滤镜对象\n\t\tlet colorFilter: Laya.ColorFilter = new Laya.ColorFilter();\n\t\t//给Image组件添加颜色滤镜\n\t\tthis.img.filters = [colorFilter];\n\t\t//设置滤镜颜色\n\t\tcolorFilter.color(0.5, 0.5, 0.5, 1);\n\t\t//设置滤镜亮度\n\t\tcolorFilter.adjustBrightness(-50);\n\t\t//设置滤镜对比度\n\t\tcolorFilter.adjustContrast(8);\n\t\t//设置滤镜饱和度\n\t\tcolorFilter.adjustSaturation(30);\n\t\t//设置滤镜对比度\n\t\tcolorFilter.adjustHue(-15);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Component Programmatically in LayaAir\nDESCRIPTION: This code demonstrates how to create a Radio component entirely through code without using the LayaAir IDE. It shows instantiation of a Radio object and configuration of its essential properties including position, size, appearance, and text styling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Radio/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Radio extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        let radio: Laya.Radio = new Laya.Radio();\n        radio.pos(200, 200);\n        radio.size(160, 64);\n        radio.stateNum = 3;\n        radio.selected = false;\n        radio.skin = \"atlas/comp/radio.png\";\n        radio.label = \"LayaAir\";\n        radio.labelSize = 20;\n        radio.labelBold = true;\n        radio.labelVAlign = \"top\";\n        this.owner.addChild(radio);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket and Protobuf packages for Node.js server\nDESCRIPTION: npm command to install the necessary server-side packages: protobufjs for handling protocol buffers and ws for WebSocket communication.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install protobufjs ws\n```\n\n----------------------------------------\n\nTITLE: Binding Uniforms with Macro Defines to Control Shader Branches - GLSL/TypeScript Hybrid\nDESCRIPTION: Shows linking uniform variables to macro defines in a Shader3D configuration for conditional compilation and branching inside shaders. Uniforms 'u_AlbedoTexture1' and 'u_AlbedoTexture2' trigger defines 'A' and 'B' respectively, which are Boolean macros controlling shader features during compilation. This approach optimizes shader permutations by enabling/disabling features dynamically based on material properties, controlled via UI toggles in the editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n\tuniformMap:{\n        //修改u_AlbedoTexture1时同时define A\n        u_AlbedoTexture1: { type: Texture2D, define: A },\n        //修改u_AlbedoTexture2时同时define A和B\n        u_AlbedoTexture2: { type: Texture2D, define: [A,B] }\n    },\n        \n\tdefines: {\n        A : { type: Bool },\n        B : { type: Bool },\n        C : { type: Bool }\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Chrome Debugging with launch.json - JSON\nDESCRIPTION: This snippet provides a full example of a launch.json configuration file tailored for debugging web projects in VSCode using Chrome as the debug target. It includes two main configurations: 'Launch Chrome', which directly launches a Chrome browser instance controlled by VSCode for local debugging, and 'Attach to Chrome', which connects the VSCode debugger to a pre-existing Chrome instance. Key parameters include 'url' for the local development server address, 'port' for the debugger's listening port, and 'webRoot' for mapping source files. Dependencies include the Chrome browser, and the VSCode 'Debugger for Chrome' extension (or compatible built-in functionality). The snippet should be placed inside the .vscode directory at the project root. Users may need to adjust the port number based on their local server setup. Both configurations expect web applications running on localhost with source maps enabled for effective debugging.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/VsCode/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n    {\n        \"name\": \"Launch Chrome\",\n        \"request\": \"launch\",\n        \"type\": \"chrome\",\n        \"url\": \"http://localhost:18090\",\n        \"webRoot\": \"${workspaceFolder}/src\",\n        \"sourceMapPathOverrides\": {\n            \"webpack:///src/*\": \"${webRoot}/*\"\n        }\n    },\n    {\n        \"name\": \"Attach to Chrome\",\n        \"request\": \"attach\",\n        \"type\": \"chrome\",\n        \"port\": 18090,\n        \"webRoot\": \"${workspaceRoot}\",\n        \"urlFilter\":\"http://localhost:18090/*\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Remote Debugging for Alipay Mini Game using minidev\nDESCRIPTION: Initiates a remote debugging session for the Alipay Mini Game project in the current directory. Requires minidev version >= 1.3.0 and the LayaAir project must be built with the 'ES6 to ES5' option enabled. Replace '2021xxx' with the actual AppID. This command generates a QR code for the device and a URL for the PC-based debugger.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/alipaygame/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nminidev remote-debug -a 2021xxx --ignore-http-domain-check\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Collider Shape in LayaAir (TypeScript)\nDESCRIPTION: This snippet demonstrates how to instantiate a CompoundColliderShape, add several BoxColliderShape child shapes with configured local offsets, and assign the resulting compound shape to a Rigidbody3D colliderShape property. Dependencies include Laya.Mesh, Sprite3D, Rigidbody3D, CompoundColliderShape, BoxColliderShape, and Vector3. The mesh for the 3D model must be loaded with Laya.Mesh.load, and child collider shapes' sizes and offsets should be set to match the geometry. Output is a rigid body with a customized compound collider attached; each child shape increases collision accuracy for non-trivial models.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.Mesh.load(\"res/threeDimen/Physics/table.lm\", Laya.Handler.create(this, function(mesh:Laya.Mesh) {\n    //读取桌子模型节点对象，添加到3D场景节点下，\n    var table: Sprite3D = this.scene.addChild(new Laya.Sprite3D(res));\n    //给桌子节点对象添加刚体碰撞器\n    var rigidBody = table.addComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n    //实例化一个复合碰撞形状对象\n    var compoundShape:Laya.CompoundColliderShape = new Laya.CompoundColliderShape();\n    \n    //创建盒形碰撞形状\n    var boxShape:Laya.BoxColliderShape = new Laya.BoxColliderShape(0.5, 0.4, 0.045);\n    //获取本地偏移\n    var localOffset:Laya.Vector3 = boxShape.localOffset;\n    //修改偏移\n    localOffset.setValue(0, 0, 0.125);\n    boxShape.localOffset = localOffset;\n    //为复合碰撞形状对象添加子形状（刚刚创建的盒形碰撞形状）\n    compoundShape.addChildShape(boxShape);\n    \n    //后面的代码都是类似，把一个个的子形状都添加到复合碰撞形状对象上。子形状也可以是别的形状，例如球形、圆柱形等，根据模型节点的实际情况来。\n    var boxShape4:Laya.BoxColliderShape = new Laya.BoxColliderShape(0.1, 0.1, 0.3);\n    var localOffset4:Laya.Vector3 = boxShape4.localOffset;\n    localOffset4.setValue(0.2, 0.153, -0.048);\n    boxShape4.localOffset = localOffset3;\n    compoundShape.addChildShape(boxShape4);\n    \n    //把组合好的复合碰撞形状添加给刚体碰撞器的碰撞器形状属性\n    rigidBody.colliderShape = compoundShape;\n    \n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Initialization Callbacks and Defining Scene Script with LayaAir in TypeScript\nDESCRIPTION: Sets up before and after initialization callbacks to customize engine behavior by enabling WebGL2 and logging initialization stages. Defines a Main class extending Laya.Script implementing the onStart lifecycle method to run game start logic. This pattern is used when only a startup scene is specified and custom logic is required in the scene script rather than a startup script. Requires LayaAir engine and use of decorators and script lifecycle methods in TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/entry/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 在引擎初始化前执行自定义逻辑(此方法在Laya.init前调用)\nLaya.addBeforeInitCallback(() => {\n    // 默认启用WebGL2渲染模式\n    Laya.Config.useWebGL2 = true;\n    console.log(\"before init\");\n});\n// 在引擎初始化后执行自定义逻辑(此方法在Laya.init后调用)\nLaya.addAfterInitCallback(()=>{\n    console.log(\"after init\");\n});\n\n\nconst { regClass, property } = Laya;\n@regClass()\nexport class Main extends Laya.Script {\n\n    onStart() {\n        console.log(\"Game start\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing in 2D Scene View with IEditorEnv.Gizmos2D in TypeScript\nDESCRIPTION: Defines a custom 2D editor for a Script2 component, utilizing IEditorEnv.Gizmos2D to create and manipulate a circle gizmo inside the scene view, supporting selected state visualization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.customEditor(Script2)\nexport class TestCustomEditor extends IEditorEnv.CustomEditor {\n    private _c: IEditorEnv.IGizmoCircle;\n\n    onDrawGizmosSelected(): void {\n        if (!this._c) {\n            let manager = IEditorEnv.Gizmos2D.getManager(this.owner);\n            this._c = manager.createCircle(10);\n            this._c.fill(\"#ff0\");\n        }\n        this._c.setLocalPos(10, 10);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Panel Extension in TypeScript\nDESCRIPTION: Creates a new custom panel with @IEditor.panel, setting title and icon. Loads a specific widget to define its UI, resulting in a new panel accessible within the editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.panel(\"test\", {\n    title: \"Test\",\n    icon : \"editorResources/20230710-161955.png\"\n})\nexport class TestPanel extends IEditor.EditorPanel {\n\n    async create() {\n        this._panel = await gui.UIPackage.createWidget(\"MyPanel.widget\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Releasing Sprite Memory in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates preparing a Sprite object for garbage collection using its `destroy()` method. Calling `destroy()` sets the Sprite's internal references to null, signaling to the JavaScript runtime's garbage collector that the object can potentially be reclaimed. Actual memory release timing depends on the garbage collector.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/memory/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//创建一个Sprite实例\nvar sp:Laya.Sprite = new Laya.Sprite();\n//将sp内部引用设置为null\nsp.destroy();\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Asset Saver for Editor-Only Save (TypeScript)\nDESCRIPTION: Defines a saver implementation specific to the editor (not included in the final game build) using @IEditorEnv.regAssetSaver. The onSave method serializes an ABCResource to JSON and writes it using editor utilities. Requires IEditorEnv.SerializeUtil, editor context, and appropriate permissions. Inputs are asset meta and resource instance; outputs are written JSON files representing the resource.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n//AssetSaver只在IDE内使用，不会发布到最终的游戏中\n\n@IEditorEnv.regAssetSaver([\"abc\"])\nexport class DemoAssetSaver implements IEditorEnv.IAssetSaver {\n    async onSave(asset: IEditorEnv.IAssetInfo, res: ABCResource): Promise<any> {\n        //SerializeUtil是一个可以将组件序列化为json的工具类，直接使用最方便\n        let data = IEditorEnv.SerializeUtil.encodeObj(res, null, { writeType: false });\n        await IEditorEnv.utils.writeJsonAsync(EditorEnv.assetMgr.getFullPath(asset), data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic LayaAir UI Runtime Script (TypeScript)\nDESCRIPTION: This TypeScript snippet shows a complete LayaAir UI Runtime script class (`RuntimeScript`). It imports necessary LayaAir modules (`regClass`), inherits from the auto-generated base class (`RuntimeScriptBase`), and uses the `@regClass` decorator. The `onAwake` method demonstrates accessing declared UI components (`this.Button`, `this.Image`) and setting up event handling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n\n    onAwake(): void {\n         // Button添加鼠标事件，让Image不显示\n         this.Button.on( Laya.Event.MOUSE_DOWN, this, ()=>{\n             this.Image.visible = false;\n         });\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component Menu Entry using @classInfo in LayaAir Editor - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use @regClass and @classInfo decorators to add a custom component to a user-defined menu group within the LayaAir IDE component list. The @classInfo decorator specifies the menu group and caption. The class extends Laya.Script and implements an onStart method. The code requires importing regClass, property, and classInfo from Laya. Inputs include required decorator parameters like menu and caption; upon saving, the component appears in the specified IDE menu category. No special constraints beyond proper decorator usage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo( {\n    menu : \"MyScript\",\n    caption : \"Main\",\n})\nexport class Main extends Laya.Script {\n\n    onStart() {\n        console.log(\"Game start\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Physical to Display-Oriented Motion Data in TypeScript with Laya Engine\nDESCRIPTION: This snippet shows how to transform acceleration data from device's physical orientation to display orientation using Laya's Accelerator.getTransformedAcceleration() method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/motion/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate onMotoin(acceleration: Laya.AccelerationInfo, accelerationIncludingGravity: Laya.AccelerationInfo, rotationRate: Laya.RotationInfo, interval: number): void {\n        acceleration = Laya.Accelerator.getTransformedAcceleration(acceleration);\n        accelerationIncludingGravity = Laya.Accelerator.getTransformedAcceleration(accelerationIncludingGravity);\n        ......\n    }\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - OPAQUE Material\nDESCRIPTION: This snippet describes the OPAQUE blending mode for materials. The final color is set to the source color. The material will render in front of the background. Requires no specific dependencies.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Handling Geolocation Errors\nDESCRIPTION: Error handler for the Geolocation API that displays user-friendly messages for different error types including permission denied, position unavailable, and timeout.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate onError(e: any): void {\n        var errType: string;\n        if (e.code = Laya.Geolocation.PERMISSION_DENIED)\n            errType = \"Permission Denied\";\n        else if (e.code == Laya.Geolocation.POSITION_UNAVAILABLE)\n            errType = \"Position Unavailable\";\n        else if (e.code == Laya.Geolocation.TIMEOUT)\n            errType = \"Time Out\";\n        alert('ERROR(' + errType + '): ' + e.message);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Texture Compression Output Metadata in fileconfig.json (JSON)\nDESCRIPTION: This snippet illustrates the structure of the fileconfig.json file generated by LayaAir after exporting assets with texture compression enabled. It describes how image resources are mapped to specific compressed formats and platforms. The key fields include 'files' (resource references), 'config' (per-asset compression details), and 'platforms' (which format is used for each platform). The 'files' sub-array includes file extension and format codes. Use this as a reference for understanding how LayaAir manages compressed asset output and platform dispatch logic. Expected input: asset processing and export in LayaAir IDE. Output: correctly structured JSON defining the available asset variants per platform. Requires: LayaAir asset pipeline, knowledge of platform codes (0-PC, 1-Android, 2-iOS).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/textureCompress/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files\": {\n        \"resources\": [\n            \"layabox.png\"\n        ]\n    },\n    \"config\": [\n        {\n            \"sRGB\": true,\n            \"filterMode\": 1,\n            \"mipmap\": true,\n            \"pma\": false,\n            \"files\": [\n                {\n                    \"file\": \"0\",\n                    \"ext\": \"dds\",\n                    \"format\": 3\n                },\n                {\n                    \"file\": \"\",\n                    \"ext\": \"png\",\n                    \"format\": 1\n                }\n            ],\n            \"platforms\": {\n                \"0\": 0,\n                \"1\": 1,\n                \"2\": 1\n            },\n            \"t\": 0,\n            \"i\": 0\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: 绘制大量文本示例及cacheAs优化 - LayaAir - TypeScript\nDESCRIPTION: 该示例初始化LayaAir画布并创建一个Sprite容器textBox，在其中循环生成10000个文本对象，随机设置文本内容和位置，展示文本大量渲染性能消耗。源码未启用缓存时会较消耗性能。通过为textBox设置cacheAs=“bitmap”将整个容器缓存为静态位图，能显著提升渲染效率，减少drawCall，提升FPS。依赖LayaAir的Text和Sprite类，适合使用在含大量静态文本的场景中。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Test {\n     private text:Laya.Text;\n    constructor() {\n        Laya.init(550,400,Laya.WebGL);\n        Laya.Stat.show();\n        var textBox=new Laya.Sprite();\n        for(var i=0;i<10000;i++)\n        {\n            this.text=new Laya.Text();\n            this.text.text=(Math.random()*100).toFixed(0);\n            this.text.color=\"#CCCCCC\";\n            this.text.x=Math.random()*550;\n            this.text.y=Math.random()*400;\n            textBox.addChild(this.text);\n        }\n        Laya.stage.addChild(textBox);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scene Class Definition - TypeScript\nDESCRIPTION: This TypeScript code snippet defines the `Scene` class, which extends `Sprite` and manages scene creation, loading, and destruction. It includes a static `unDestroyedScenes` property for tracking undestroyed scenes and the `autoDestroyAtClosed` property for controlling automatic destruction upon closing. `_scene3D` manages the 3D scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 场景类，负责场景创建，加载，销毁等功能\n * 场景被从节点移除后，并不会被自动垃圾机制回收，如果想回收，请调用destroy接口，可以通过unDestroyedScenes属性查看还未被销毁的场景列表\n */\nexport class Scene extends Sprite {\n    /**创建后，还未被销毁的场景列表，方便查看还未被销毁的场景列表，方便内存管理，本属性只读，请不要直接修改*/\n    static readonly unDestroyedScenes: Set<Scene> = new Set();\n\n    /**场景被关闭后，是否自动销毁（销毁节点和使用到的资源），默认为false*/\n    autoDestroyAtClosed: boolean = false;\n    _scene3D: any;\n```\n\n----------------------------------------\n\nTITLE: 根据不同帧率模式调整渲染帧率示例 - LayaAir - TypeScript\nDESCRIPTION: 示例初始化LayaAir舞台，使用FRAME_SLOW模式将最大FPS限制在显示器一半，创建一个圆形并监听鼠标移动更新位置，展示低帧率下画面更新不连贯。文中推荐将frameRate切换至FRAME_MOUSE模式，实现鼠标交互时动态切换高帧率，静止时降帧的省电模式。代码依赖LayaAir Stage和Sprite类，适用于需要节能且保证鼠标响应流畅的交互场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.init(this.Browser.width,this.Browser.height);\nLaya.Stat.show();\nLaya.stage.frameRate=Laya.Stage.FRAME_SLOW;\nvar sp=new Laya.Sprite();\nsp.graphics.drawCircle(0,0,20,\"#990000\");\nLaya.stage.addChild(sp);\nLaya.stage.on(Laya.Event.MOUSE_MOVE,this,function()\n{\n\tsp.pos(Laya.stage.mouseX,Laya.stage.mouseY);\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.stage.frameRate = Laya.Stage.FRAME_MOUSE;\n```\n\n----------------------------------------\n\nTITLE: Initializing A* Graph and Options in TypeScript\nDESCRIPTION: Loads the A* map texture ('AStarMap.png'), calls 'createGridFromAStarMap' to get the grid data, initializes the A* Graph object using this data, and sets options like 'closest' (to find the nearest node if the end is unreachable) and the heuristic function (diagonal distance).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//读取地形图\nthis.aStarMap = Loader.getTexture2D(\"res/threeDimen/scene/TerrainScene/Assets/AStarMap.png\");\n//获得地图数据\nvar aStarArr = this.createGridFromAStarMap(this.aStarMap);\n//使用astar初始化地图数据\nthis.graph = new (window as any).Graph(aStarArr);\nthis.opts = [];\nthis.opts.closest = true;\nthis.opts.heuristic = (window as any).astar.heuristics.diagonal;\n```\n\n----------------------------------------\n\nTITLE: Downloading Large Files with Progress in LayaNative (TypeScript)\nDESCRIPTION: This TypeScript declaration defines a global function for downloading large files with breakpoint resume and progress monitoring, intended for LayaNative environments. Dependencies include the LayaNative runtime with access to the proper file system and network environment. Parameters specify the remote URL, local file path, progress callback, completion callback, retry count, and timeout. The function is designed for use cases where XMLHttpRequest would cause excessive memory use, as it saves data incrementally. The output does not return file data directly; all feedback and control must be handled via callbacks.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/zipUpdate/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param url \\u8fdc\\u7a0b\\u5730\\u5740\n * @param local \\u5b58\\u5230\\u672c\\u5730\\u6587\\u4ef6\n * @param onprog \\u8fdb\\u5ea6\\u56de\\u8c03\n * @param oncomp \\u5b8c\\u6210\\u56de\\u8c03\n * @param trynum \\u91cd\\u8bd5\\u6b21\\u6570\\uff080\\u65e0\\u9650\\u91cd\\u8bd5\\uff09 \n * @param opttimeout \\u8d85\\u65f6\\u65f6\\u95f4\\uff0c\n * \\u6ce8\\u610f\\u5982\\u679c\\u6210\\u529f\\u4e86\\u4e0d\\u4f1a\\u8fd4\\u56deArrayBuffer\\uff0c\\u4e0d\\u8981\\u4f7f\\u7528\\u8fd9\\u4e2a\\u53c2\\u6570\\u3002\\u56e0\\u4e3a\\u53ef\\u80fd\\u592a\\u5927\\u3002\n */\ndeclare var downloadBigFile:(url:string,\n\\tlocal:string,\n\\tonprog:(total:number,now:number,speed:number)=>boolean,oncomp:(curlret:number, httpret:number)=>void,\n\\ttrynum:number,\n\\topttimeout:number)=>void;\n```\n\n----------------------------------------\n\nTITLE: Automating Multi-Platform Builds with Custom LayaAirIDE Script - TypeScript\nDESCRIPTION: This TypeScript snippet defines a single class, 'MyScript', which includes static asynchronous methods for building projects targeting multiple platforms (web, wxgame, bytedancegame, oppogame, vivogame, xmgame, alipaygame, tbgame) using IEditorEnv.BuildTask. Each method initiates a build for a specific platform and waits for its completion. The script should be registered via '@IEditorEnv.regClass()', and used with LayaAirIDE command line by specifying the corresponding method via the --script flag. The script assumes LayaAirIDE's scripting API is available and build targets are properly configured.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/commandLine/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regClass()\nclass MyScript {\n    // 构建web\n    static async buildWeb() {\n        return IEditorEnv.BuildTask.start(\"web\").waitForCompletion();\n    }\n\n    // 构建微信小游戏\n    static async buildWxgame() {\n        return IEditorEnv.BuildTask.start(\"wxgame\").waitForCompletion();\n    }\n\n    // 构建抖音小游戏\n    static async buildBytedancegame() {\n        return IEditorEnv.BuildTask.start(\"bytedancegame\").waitForCompletion();\n    }\n\n    // 构建oppo小游戏\n    static async buildOppogame() {\n        return IEditorEnv.BuildTask.start(\"oppogame\").waitForCompletion();\n    }\n\n    // 构建vivo小游戏\n    static async buildVivogame() {\n        return IEditorEnv.BuildTask.start(\"vivogame\").waitForCompletion();\n    }\n\n    // 构建小米快游戏\n    static async buildXmgame() {\n        return IEditorEnv.BuildTask.start(\"xmgame\").waitForCompletion();\n    }\n\n    // 构建支付宝小游戏\n    static async buildAlipaygame() {\n        return IEditorEnv.BuildTask.start(\"alipaygame\").waitForCompletion();\n    }\n\n    // 构建淘宝小游戏\n    static async tbgame() {\n        return IEditorEnv.BuildTask.start(\"tbgame\").waitForCompletion();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Group on a Physics Collider in LayaAir Engine using TypeScript\nDESCRIPTION: This snippet demonstrates how to assign a collider to a specific collision group in the LayaAir3 physical system using TypeScript. The collisionGroup property is set by bit-shifting for a group of ID 3 (which corresponds to the value 8: 2 to the power of 3). Prerequisites: A collider component instance (xxx) created in the LayaAir engine. Input: The collider instance and desired group index. Output: The collider is now part of the specified collision group, affecting collision filtering with other objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/PhysicsCollider/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//用代码指定xxx碰撞器所属哪个碰撞组\nxxx.collisionGroup = 1 << 3  ;// 值为2 的 3 次幂（8），可以简单理解分组ID为3，这样就更容易与IDE中的概念统一\n```\n\n----------------------------------------\n\nTITLE: Node.js WebSocket Server Script Handling Protobuf Messages\nDESCRIPTION: A Node.js server-side script using the `ws` WebSocket library and `protobufjs` to load the shared `.proto` message definition. It listens on port 8080, decodes incoming binary messages into `ChatMessage` objects, logs received messages, and responds with a protobuf encoded greeting message. Proper event handlers for client connections, messages, closures, and errors are included to facilitate bi-directional protobuf communication.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//C:\\server\\node\\protobuf\\server.js\nconst WebSocket = require(\"ws\");\nconst protobuf = require(\"protobufjs\");\n\n// 加载 .proto 文件，与客户端一致\nprotobuf.load(\"./protobuf.proto\", (err, root) => {\n    if (err) throw err;\n\n    // 获取消息类型\n    const ChatMessage = root.lookupType(\"ChatMessage\");\n\n    // 创建 WebSocket 服务器，并定义了8080端口，需要与客户端请求的端口保持一致\n    const wss = new WebSocket.Server({ port: 8080 });\n\n    wss.on(\"connection\", (ws) => {\n        console.log(\"Client connected\");\n\n        // 监听消息\n        ws.on(\"message\", (data) => {\n\n            // 将接收到的二进制数据buffer解码(反序列化)为ChatMessage对象\n            const receivedMessage = ChatMessage.decode(new Uint8Array(data));\n            console.log(\"Received ChatMessage from client:\", receivedMessage);\n\n            // 回复一个打招呼消息\n            const responseMessage = { user: \"Server\", message: `Hello, ${receivedMessage.user}!`, timestamp: Date.now() };\n            const responseBuffer = ChatMessage.encode(responseMessage).finish();\n            ws.send(responseBuffer);\n        });\n\n        // 监听关闭事件\n        ws.on(\"close\", () => {\n            console.log(\"Client disconnected\");\n        });\n    });\n\n    console.log(\"WebSocket server is running on ws://localhost:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Collision Group in LayaAir\nDESCRIPTION: Sets a specific collision group for a physics collider. This example assigns the object to the second custom collision filter group (value 128).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器所属哪个碰撞组（COLLISIONFILTERGROUP_CUSTOMFILTER2对应的值为128）\nxxx.collisionGroup = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;\n```\n\n----------------------------------------\n\nTITLE: Calling Native Functions from JavaScript in LayaNative\nDESCRIPTION: TypeScript code example that demonstrates how to call platform-specific native functions from JavaScript using LayaNative's reflection mechanism. It handles both iOS and Android platforms, showing how to call functions with different parameter types and receive asynchronous callbacks.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Secondary_Development/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  var os = conchConfig.getOS();\n  var bridge;\n  var obj = {} as any;\n  if (os == \"Conch-ios\") {\n      bridge = PlatformClass.createClass(\"JSBridge\");//创建脚步代理\n  }\n  else if (os == \"Conch-android\") {\n    //需要完整的类路径，注意与iOS的不同\n    bridge = PlatformClass.createClass(\"demo.JSBridge\");//创建脚步代理\n  } \n\n  if (os == \"Conch-ios\") {\n    //iOS注意函数签名，注意与Android的不同\n    alert(bridge.call(\"testString:\",\"hello\"));\n    alert(bridge.call(\"testNumber:\",256.0));\n    alert(bridge.call(\"testBool:\",false));\n    obj.value = \"Hello OC!\";\n    bridge.callWithBack(function(value: any) {\n      var obj = JSON.parse(value)\n      alert(obj.value);\n      },\"testAsyncCallback:\", JSON.stringify(obj));\n  }\n  else if (os == \"Conch-android\") {\n    alert(bridge.call(\"testString\",\"hello\"));\n    alert(bridge.call(\"testNumber\",256.0));\n    alert(bridge.call(\"testBool\",false));\n    obj.value = \"Hello Java!\";\n    bridge.callWithBack(function(value: any) {\n      var obj = JSON.parse(value)\n      alert(obj.value);\n    },\"testAsyncCallback\",JSON.stringify(obj));\n  } \n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Dropdown Data Source Using @property Getter and enumSource - TypeScript\nDESCRIPTION: This snippet explains how to use a property getter to provide dynamic editor dropdown options by exposing a computed property as an array of records, and then linking another property to this data source using the 'enumSource' parameter in the @property decorator. The getter method (with serializable: false) returns the current dropdown list at edit time, while the enumSource property references it by name for the dropdown in the editor. Dependencies: The code requires LayaAir TypeScript environment with proper decorator/getter support. Inputs involve dynamic arrays generated by the getter; outputs are drop-down selections in the editor for 'enumItems'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n    //这个属性提供一个get方法，返回下拉选项，这个数据一般只用于编辑器，所以设置不保存\n    @property({ type: [[\"Record\", String]], serializable: false })\n    get itemsProvider(): Array<Record<string, string>> {\n        return [{ name: \"Item0\", value: \"0\" }, { name: \"Item1\", value: \"1\" }];\n    }\n    //将enumSource设置为一个字符串，表示使用该名字的属性作为下拉数据源\n    @property({ type: String, enumSource: \"itemsProvider\" })\n    enumItems: string;\n```\n\n----------------------------------------\n\nTITLE: Establishing WebSocket Connection with Host and Port in LayaAir TypeScript\nDESCRIPTION: Demonstrates creating a Laya.Socket instance by providing host and port directly to the constructor for immediate connection. Supports both standard (ws) and secure (wss) protocols by optionally passing a boolean as the fifth parameter. Inputs are host (string) and port (number); outputs a connected socket instance. Requires LayaAir engine environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 注意：host 参数不需要“ws://”前缀，默认就是ws\nlet socket = new Laya.Socket(\"192.168.1.2\", 8899);\n//如果需要wss安全协议，第5个参数需要为true。\n// let socket = new Laya.Socket(\"192.168.1.2\", 8899, null, null, true);\n```\n\n----------------------------------------\n\nTITLE: Setting up material, camera and event handling\nDESCRIPTION: This code segment sets up the material properties, a camera component with associated movements and the mouse up event. It sets the albedo intensity of the material and creates and adds a camera and associated cameraMoveScript to the scene.  It also registers the 'MOUSE_UP' event that is responsible for recalculating the path.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n//创建BlinnPhong材质\n        var mat: BlinnPhongMaterial = (<BlinnPhongMaterial>((<SkinnedMeshSprite3D>this.layaMonkey.getChildAt(0).getChildAt(0))).skinnedMeshRenderer.sharedMaterial);\n        //设置反照率强度\n        mat.albedoIntensity = 8;\n        //设置猴子精灵的位置\n        this.layaMonkey.transform.position.cloneTo(this._finalPosition);\n\n        //初始化相机\n        var moveCamera: Camera = (<Camera>this.moveSprite3D.addChild(new Camera()));\n        var tmpLocalPosition: Vector3 = moveCamera.transform.localPosition;\n        tmpLocalPosition.setValue(-1.912066, 10.07926, -10.11014);\n        moveCamera.transform.localPosition = tmpLocalPosition;\n        moveCamera.transform.rotate(this._rotation, true, false);\n        moveCamera.addComponent(CameraMoveScript);\n\n        //设置鼠标弹起事件响应\n        Laya.stage.on(Event.MOUSE_UP, this, function (): void {\n            this.index = 0;\n            //获取每次生成路径\n            this.getGridIndex(this.path[this.curPathIndex % this.pointCount].x, this.path[this.curPathIndex++ % this.pointCount].z, this.startPoint);\n            this.getGridIndex(this.path[this.nextPathIndex % this.pointCount].x, this.path[this.nextPathIndex++ % this.pointCount].z, this.endPoint);\n            var start = this.graph.grid[this.startPoint.x][this.startPoint.y];\n            var end = this.graph.grid[this.endPoint.x][this.endPoint.y];\n\n            this._everyPath = (window as any).astar.search(this.graph, start, end, {\n                closest: this.opts.closest\n            });\n            if (this._everyPath && this._everyPath.length > 0) {\n                this.getRealPosition(start, this._everyPath);\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Example Custom Script with Property Exposure and Event Handling (TypeScript)\nDESCRIPTION: Demonstrates a complete LayaAir custom script class (`Main`). It imports necessary modules, uses `@regClass` and `@property` to expose Button and Sprite3D references to the editor, initializes particle visibility and button click listeners in the `onStart` lifecycle method, and implements a helper function `hideAll` and an event handler `mouseDown`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/Script/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\nimport { Particle3D } from \"./Particle3D\";\nimport Sprite3D = Laya.Sprite3D;\nimport Button = Laya.Button;\nimport Event = Laya.Event;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property()\n    private btn_1: Button;  \n    @property()\n    private p_1 : Sprite3D;           \n    @property()\n    private btn_2: Button;    \n    @property()\n    private p_2 : Sprite3D;      \n    @property()\n    private btn_3: Button;  \n    @property()\n    private p_3 : Sprite3D;      \n    @property()\n    private btn_4: Button;    \n    @property()\n    private p_4 : Sprite3D;       \n    @property()\n    private btn_5: Button;    \n    @property()\n    private p_5 : Sprite3D;     \n    @property()\n    private btn_6: Button;    \n    @property()\n    private p_6 : Sprite3D;      \n\n    private particleList: Array<Sprite3D> = [];\n\n    onStart() {\n        console.log(\"Game start\");\n\n        this.particleList.push(this.p_1);\n        this.particleList.push(this.p_2);\n        this.particleList.push(this.p_3);\n        this.particleList.push(this.p_4);\n        this.particleList.push(this.p_5);\n        this.particleList.push(this.p_6);\n        \n        this.btn_1.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_1.active = true;\n        });\n        this.btn_2.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_2.active = true;\n        });\n        this.btn_3.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_3.active = true;\n        });\n        this.btn_4.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_4.active = true;\n        });\n        this.btn_5.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_5.active = true;\n        });    \n        this.btn_6.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_6.active = true;\n        });                                       \n    }\n\n    hideAll(): void {\n        this.particleList.forEach(element => {\n            (element as Sprite3D).active = false;\n        });\n    }\n\n    mouseDown(e: Event): void {\n        this.hideAll();           \n    }\n \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uniforms with Details in uniformMap (LayaAir GLSL)\nDESCRIPTION: Illustrates the older method for defining a uniform variable (`u_Number`) within the `uniformMap` block of a LayaAir shader. This approach includes UI-related metadata like type, default value, alias (display name in IDE), range constraints, and fractional digits directly in the uniform definition.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_8\n\nLANGUAGE: GLSL\nCODE:\n```\nuniformMap:{\n    u_Number: { type: Float, default:0, alias:\"数字\",  range:[0,100], fractionDigits: 2 }\n},\n```\n\n----------------------------------------\n\nTITLE: Registering WebSocket Event Listeners in LayaAir TypeScript\nDESCRIPTION: Shows how to attach event handlers for open, message, close, and error events on a Laya.Socket instance. This pattern ensures asynchronous communication is handled appropriately by calling designated callback methods on specific events. Dependencies include Laya.Socket and Laya.Event from the LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 注册事件监听示例\nthis.socket.on(Laya.Event.OPEN, this, this.onSocketOpen);\nthis.socket.on(Laya.Event.MESSAGE, this, this.onMessageReceived);\nthis.socket.on(Laya.Event.CLOSE, this, this.onSocketClose);\nthis.socket.on(Laya.Event.ERROR, this, this.onConnectError);\n```\n\n----------------------------------------\n\nTITLE: 使用callLater减少重复调用示例 - LayaAir - TypeScript\nDESCRIPTION: 示例代码演示对属性修改时多次调用update函数导致性能浪费的问题，通过Laya.timer.callLater方法推迟update执行，将多次调用合并为一次。代码中属性setter中原本同步调用update，改为调用callLater后极大减少无效重复计算。依赖LayaAir定时器模块。适用场景为多属性频繁修改但最终状态才需要一次性更新的对象，提高性能和响应效率。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvar rotation=0,\nscale=1,\nposition=0;\nprivate function setRotation(value):void\n{\n  this.rotation=value;\n  update();\n}\nprivate function setScale(value):void\n{\n  this.scale = value;\n    update();\n}\nprivate function setPosition(value):void\n{\n    this.position = value;\n    update();\n}\npublic function update()\n{\n    console.log('rotation: ' + this.rotation + '\\tscale: ' + this.scale + '\\tposition: ' + this.position);\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetRotation(90);\nsetScale(2);\nsetPosition(30);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.timer.callLater(this, update);\n```\n\n----------------------------------------\n\nTITLE: Incorrect LocalStorage Usage in LayaNative\nDESCRIPTION: This snippet demonstrates incorrect usage of LocalStorage in LayaNative. Directly assigning values to `localStorage` or accessing them directly may work in browsers but will not function as expected within the LayaNative environment. Avoid direct assignment and use `setItem()` and `getItem()`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LocalStrorage/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//存储，LayaNative下不支持\nlocalStorage.test = 100;\n//取值，LayaNative下不支持\nalert(localStorage.test);\n```\n\n----------------------------------------\n\nTITLE: Property Change and Batched Updates without callLater - TypeScript\nDESCRIPTION: Defines property setters for rotation, scale, and position that call an update method, which outputs current state to the console. Demonstrates inefficiency in updating the UI for each small property change (update is called multiple times). No special dependencies.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar rotation=0,\nscale=1,\nposition=0;\n\nprivate function setRotation(value):void\n{\n  this.rotation=value;\n  update();\n}\n\nprivate function setScale(value):void\n{\n  this.scale = value;\n    update();\n}\nprivate function setPosition(value):void\n{\n    this.position = value;\n    update();\n}\npublic function update()\n{\n    console.log('rotation: ' + this.rotation + '\\tscale: ' + this.scale + '\\tposition: ' + this.position);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Scenes with Parameters in LayaAir\nDESCRIPTION: The Scene.open static method for loading and opening scenes with parameters like closeOther to control whether to close existing scenes and param for passing data to the opened scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 加载并打开场景\n * @param\turl\t\t\t场景地址\n * @param\tcloseOther\t是否关闭其他场景，默认为true（可选），【注意】被关闭的场景，如果没有设置autoDestroyAtClosed=true，则资源可能不能被回收，需要自己手动回收\n * @param\tparam\t\t打开页面的参数，会传递给onOpened方法（可选）\n * @param\tcomplete\t打开完成回调，返回场景实例（可选）\n * @param\tprogress\t加载进度回调（可选）\n */\nstatic open(url: string, closeOther: boolean = true, param: any = null, complete: Handler = null, progress: Handler = null): Promise<Scene> {\n    Scene.showLoadingPage();\n    return Scene.load(url, Handler.create(null, this._onSceneLoaded, [closeOther, complete, param]), progress);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Circle Mesh Programmatically in LayaAir (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to generate a circular 2D mesh with vertices, UV mappings, and indices. The mesh is created using custom vertex and index arrays, which are then used to instantiate a Mesh2D object suitable for rendering a circle with specified radius and segment count. Dependencies include LayaAir's Mesh2D and VertexMesh2D classes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/2DRender/Mesh2DRender/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate generateCircleVerticesAndUV(radius: number, numSegments: number): Laya.Mesh2D {\n    // 2π\n    const twoPi = Math.PI * 2;\n    // 顶点数组\n    let vertexs = new Float32Array((numSegments + 1) * 5);\n    // 索引数组\n    let index = new Uint16Array((numSegments + 1) * 3);\n    var pos = 0;\n\n    // 生成圆周上的顶点\n    for (let i = 0; i < numSegments; i++, pos += 5) {\n        const angle = twoPi * i / numSegments;\n        // 计算顶点坐标\n        var x = vertexs[pos + 0] = radius * Math.cos(angle);\n        var y = vertexs[pos + 1] = radius * Math.sin(angle);\n        vertexs[pos + 2] = 0; // z坐标始终为0（2D）\n        // 计算UV坐标\n        vertexs[pos + 3] = 0.5 + x / (2 * radius); // 将x从[-radius, radius]映射到[0,1]\n        vertexs[pos + 4] = 0.5 + y / (2 * radius); // 将y从[-radius, radius]映射到[0,1]\n    }\n    //圆心\n    vertexs[pos] = 0;\n    vertexs[pos + 1] = 0;\n    vertexs[pos + 2] = 0;\n    vertexs[pos + 3] = 0.5;\n    vertexs[pos + 4] = 0.5;\n\n    // 生成三角形索引\n    for (var i = 1, ibIndex = 0; i < numSegments; i++, ibIndex += 3) {\n        index[ibIndex] = i;\n        index[ibIndex + 1] = i - 1;\n        index[ibIndex + 2] = numSegments;\n    }\n    // 连接最后一个顶点、第一个顶点和圆心\n    index[ibIndex] = numSegments - 1;\n    index[ibIndex + 1] = 0;\n    index[ibIndex + 2] = numSegments;\n    // 顶点声明\n    var declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n    let mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([vertexs], [declaration], index, Laya.IndexFormat.UInt16, [{ length: index.length, start: 0 }]);\n    return mesh2D;\n}\n```\n\n----------------------------------------\n\nTITLE: LayaDCCClient TypeScript Interface Definition\nDESCRIPTION: Defines the TypeScript interface for the `LayaDCCClient` class, outlining its properties and methods for programmatic control over DCC operations. Key methods include `init` for initialization, `readFile` for accessing cached files, `updateAll` for full updates, `updateByZip` and `updateByPack` for partial updates, `clean` for cache cleanup, and `injectToLaya`/`removeFromLaya` for integrating with the Laya engine's download manager.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class LayaDCCClient{\n    \n    onlyTransUrl:boolean;\n    //映射到dcc目录的地址头，如果没有，则按照http://*/算，所有的请求都裁掉主机地址\n    pathMapToDCC:string;\n    \n    /**\n     * \n     * @param frw 文件访问接口，不同的平台需要不同的实现。如果为null，则自动选择网页或者native两个平台\n     * @param dccurl dcc的服务器地址\n     */\n    constructor(dccurl:string, frw:new ()=>IGitFSFileIO|null, logger:ICheckLog=null)\n\n    enableLog(b:boolean)\n    \n    /**\n     * 初始化，下载必须信息 \n     * @param headfile dcc根文件，这个文件作为入口，用来同步本地缓存。如果为null则仅仅使用本地缓存\n     * @param cachePath 这个暂时设置为null即可 \n     * @returns \n     */\n    async init(headfile:string|null,cachePath:string):Promise<boolean>;\n    \n    /**\n     * 当前缓存中是否缓存了某个文件\n     *\n     */\n    async hasFile(url: string):Promise<boolean>;\n\n    /**\n     *  读取缓存中的一个文件，url是相对地址\n     * @param url 用户认识的地址。如果是绝对地址，并且设置是映射地址，则计算一个相对地址。如果是相对地址，则直接使用\n     * @returns \n     */\n    async readFile(url:string):Promise<ArrayBuffer|null>\n\n    /**\n     * 把一个原始地址转换成cache服务器对象地址\n     * @param url 原始资源地址\n     * @returns \n     */\n    async transUrl(url:string)\n\n    /**\n     * 与DCC服务器同步本版本的所有文件。\n     * 可以用这个函数来实现集中下载。\n     * \n     * @param progress 进度回调，从0到1\n     * 注意：在开始同步之前可能会有一定的延迟，这期间会进行目录节点的下载。不过目前的实现这一步在init的时候就完成了\n     * \n     */\n    async updateAll(progress:(p:number)=>void);\n        \n    /**\n     * 根据指定的zip文件更新本地缓存。\n     * 这个zip文件可以通过DCC插件的补丁生成工具来生成。\n     * \n     * 这个会修改本地保存的root\n     * @param zipfile 打补丁的zip文件，注意这里必须是本地目录，所以需要自己实现下载zip到本地之后才能调用这个函数。\n     * @param progress 进度提示，暂时没有实现。\n     */\n    async updateByZip(zipfile:string,zipClass:new()=>IZip, progress:(p:number)=>void);\n\n    /**\n     * 利用一个pack文件更新，这个pack包含idx,文件内容。\n     * @param pack :一个url或者buffer\n     * @param unpacker :解包类。把包文件内容解开成一个列表\n     */\n    async updateByPack(pack: string | ArrayBuffer, unpacker?: new () => IDCCPackR);\n\n    /**\n     * 遍历所有的节点。\n     * 包括没有下载的\n     */\n    async visitAll(treecb: (cnode: TreeNode,entry:TreeEntry) => Promise<void>, blobcb: (entry: TreeEntry) => Promise<void>)；\n\n    /**\n     * 清理缓存。\n     * 根据根文件遍历所有本版本依赖的文件，删除不属于本版本的缓存文件\n     */\n     async clean()\n     \n    //插入到laya引擎的下载流程，实现下载的接管\n    injectToLaya();\n    //取消对laya下载引擎的插入\n    removeFromLaya();\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Typed Arrays and Dictionaries with @property Decorator - TypeScript\nDESCRIPTION: This code demonstrates advanced usage of the @property decorator to declare properties with complex types, such as multi-dimensional arrays and typed dictionaries (records), in LayaAir's TypeScript workflow. Examples include defining two-dimensional string arrays, arrays of name-value records, and dictionaries mapping strings to arrays of numbers or Laya.Prefab instances. Some declarations also use 'elementProps' to control editor constraints recursively for nested structures. Dependencies: LayaAir TypeScript with @property support and Laya.Prefab asset type. Properties serve as data containers for editor manipulation, and constraints affect both input structure and editor UI generation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property([[\"string\"]])\n    test1: string[][] = [[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\"]];\n\n    @property([[\"Record\", \"string\"]])\n    test2: Array<Record<string, string>> = [{ name: \"A\", value: \"a\" }, { name: \"B\", value: \"b\" }];\n\n    @property({ type: [\"Record\", [Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    test3: Record<string, number[]> = { \"a\": [1, 2, 3], \"b\": [4, 5, 6] };\n\n    @property([\"Record\", [Laya.Prefab]])\n    test4: Record<string, Laya.Prefab[]>;\n```\n\n----------------------------------------\n\nTITLE: Loading and Playing Built-in Skeletal Animations with LayaAir in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to load a skeletal animation resource (.sk file) using Laya.loader and Laya.Templet, instantiate a Laya.Skeleton object, and play animations sequentially. It sets position and scaling on the skeleton, adds it to the scene, and uses event listeners to handle animation completion to cycle through animations continuously. The snippet depends on the LayaAir engine, specifically on the Laya.Skeleton and Laya.Templet classes, and assumes setup within a class decorated using Laya's regClass for script execution. Key inputs include the .sk resource path and animation indexes; outputs are visual skeletal animations rendered in the scene. Limitations include correct resource loading and ensuring the armature contains animations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/skeleton/sk/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n\tprivate mCurrIndex: number = 0;\n\tprivate mArmature: Laya.Skeleton;\n\n    onStart() {\n        console.log(\"Game start\");\n\t\t//加载内置骨骼动画资源\n\t\tLaya.loader.load(\"skeleton/Dragon/Dragon.sk\").then((templet: Laya.Templet) => {\n\t\t\t//创建模式为1，可以启用换装\n\t\t\tthis.mArmature = templet.buildArmature(0);\n\t\t\tthis.mArmature.x = 300;\n\t\t\tthis.mArmature.y = 350;\n\t\t\tthis.mArmature.scale(0.5, 0.5);\n\t\t\tthis.owner.addChild(this.mArmature);\n\t\t\t//设置动画播放完成后，调用completeHandler继续播放下一个动画\n\t\t\tthis.mArmature.on(Laya.Event.STOPPED, this, this.completeHandler);\n\t\t\tthis.play();\n\t\t});\n    }\n\n\t\n\tprivate completeHandler(): void {\n\t\tthis.play();\n\t}\n\n\t//播放骨骼动画\n\tprivate play(): void {\n\t\t//每次到下一个动画\n\t\tthis.mCurrIndex++;\n\t\tif (this.mCurrIndex >= this.mArmature.getAnimNum()) {\n\t\t\tthis.mCurrIndex = 0;\n\t\t}\n\t\tthis.mArmature.play(this.mCurrIndex, false);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Laya.Byte and Sending via WebSocket in TypeScript\nDESCRIPTION: Illustrates writing various data types (byte, int16, float32, UTF string) sequentially into a Laya.Byte instance using methods like writeByte, writeInt16, etc. It also shows how to send the resulting binary data over a WebSocket connection by passing the underlying ArrayBuffer (byte.buffer) to the socket's send method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// 按顺序写入数据\nbyte.writeByte(1);\nbyte.writeInt16(20);\nbyte.writeFloat32(20.5);\nbyte.writeUTFString(\"LayaAir WebSocket\");\n\n//发送时必须传入 byte.buffer（ArrayBuffer 对象），而非直接传入 byte 对象。\nsocket.send(byte.buffer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sprite zOrder in LayaAir\nDESCRIPTION: Example showing how to control the display order of sprites using the zOrder property. By setting different zOrder values, sprites added earlier can appear on top of those added later.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet sp1 = new Laya.Sprite();\nLaya.stage.addChild(sp1);\nsp1.pos(200, 190);\n// 加载并显示一个图片1\nsp1.loadImage(\"resources/layabox.png\", null); //需要在resources文件夹下放入layabox.png图片\n\nlet sp2 = new Laya.Sprite();\nLaya.stage.addChild(sp2);\n// 加载并显示一个图片2\nsp2.loadImage(\"atlas/comp/image.png\", null);\n\n// 设置zOrder\nsp1.zOrder = 1;\nsp2.zOrder = 0;\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Remote TTF Font in LayaAir (JavaScript)\nDESCRIPTION: This snippet illustrates how to load a remote TrueType font ('res/maobi.ttf') asynchronously using Laya's loader, then create a Label UI component that uses the downloaded font by setting its font property to the font's filename. This approach allows embedding custom fonts dynamically at runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/built_in_font/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nLaya.loader.load(\"res/maobi.ttf\", Loader.TTF).then(() => {\n    var label = new Label();\n    label.font = \"maobi\";\n    label.text = \"自定义嵌入字体\";\n    label.fontSize = 30;\n    label.color = '#FFFFFF';\n    this.Main.box2D.addChild(label);\n    label.pos(30, 50);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Motion Detection in TypeScript with Laya Engine\nDESCRIPTION: This code demonstrates how to use Laya's Accelerator class to monitor device movement. It displays acceleration, acceleration including gravity, rotation rate, and update interval information in real-time.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/motion/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Gyroscope_Sample {\n    private info: Laya.Text;\n    constructor() {\n        Laya.init(550, 400);\n        this.info = new Laya.Text();\n        this.info.fontSize = 50;\n        this.info.color = \"#FFFFFF\";\n        this.info.size(Laya.stage.width, Laya.stage.height);\n        Laya.stage.addChild(this.info);\n\n        Laya.Accelerator.instance.on(Laya.Event.CHANGE, this, this.onMotoin);\n    }\n    private onMotoin(acceleration: Laya.AccelerationInfo, accelerationIncludingGravity: Laya.AccelerationInfo, rotationRate: Laya.RotationInfo, interval: number): void {\n        this.info.text =\n            'acceleration:(' + acceleration.x.toFixed(3) + ', ' + acceleration.y.toFixed(3) + ', ' + acceleration.z.toFixed(3) + ')\\n' +\n            'accelerationIncludingGravity:(' + accelerationIncludingGravity.x.toFixed(3) + ', ' + accelerationIncludingGravity.y.toFixed(3) + ', ' + accelerationIncludingGravity.z.toFixed(3) + ')\\n' +\n            'rotationRate: alpha ' + Math.floor(rotationRate.alpha) + ', beta ' + Math.floor(rotationRate.beta) + ', gamma ' + Math.floor(rotationRate.gamma) + '\\n' +\n            'interval: ' + interval;\n    }\n}\nnew Gyroscope_Sample();\n```\n\n----------------------------------------\n\nTITLE: Creating Blurry Glass Effect CommandBuffer - LayaAir TypeScript\nDESCRIPTION: This function generates a CommandBuffer configured to produce a blurry glass effect. It captures the scene render, applies a blur effect using multiple blit passes with a custom shader and render textures, sets the blurred result as a global shader texture for transparent materials, and adds the buffer to the camera's BeforeTransparent event.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/CommandBuffer/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateCommandBuffer(camera:Camera){\n    //当需要在渲染透明物体之前拿到摄像机渲染结果，所以调用下面的属性true\n    camera.enableBuiltInRenderTexture = true;\n    //创建CommandBuffer\n    var buf:CommandBuffer = new CommandBuffer();\n    //创建需要模糊使用的屏幕RenderTexture\n    var viewPort:Viewport = camera.viewport;\n     //创建新的RenderTexture\n    var renderTexture = RenderTexture.createFromPool(viewPort.width,viewPort.height,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    this.texture = renderTexture; \n    //将当前渲染的结果拷贝到创建好的RenderTexture\nbuf.blitScreenTriangle(null,renderTexture);\n    //获得模糊shader\n    var shader:Shader3D = Shader3D.find(\"blurEffect\");\n    //设置模糊参数\nvar shaderValue:ShaderData = new ShaderData();\n    //down Sample level设置降采样等级\n    var downSampleFactor:number = 4;\n    var downSampleWidth:number = viewPort.width/downSampleFactor;\n    var downSampleheigh:number = viewPort.height/downSampleFactor;\n    //设置模糊材质参数\n    var texSize:Vector4 = new Vector4(1.0/viewPort.width,1.0/viewPort.height,viewPort.width,downSampleheigh);\n    shaderValue.setNumber(BlurEffect.SHADERVALUE_DOWNSAMPLEVALUE,1);\n    shaderValue.setVector(BlurEffect.SHADERVALUE_TEXELSIZE,texSize);\n    //创建降采样RenderTexture1\n    var downRenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //降采样命令流\n    buf.blitScreenTriangle(renderTexture,downRenderTexture,null,shader,shaderValue,0);\n    //创建降采样RenderTexture2\n    var blurTexture:RenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    blurTexture.filterMode = FilterMode.Bilinear;\n    //Horizontal blur\n    buf.blitScreenTriangle(downRenderTexture,blurTexture,null,shader,shaderValue,1);\n    //vertical blur\n    buf.blitScreenTriangle(blurTexture,downRenderTexture,null,shader,shaderValue,2);\n    //Horizontal blur\n    buf.blitScreenTriangle(downRenderTexture,blurTexture,null,shader,shaderValue,1);\n    //vertical blur\n    buf.blitScreenTriangle(blurTexture,downRenderTexture,null,shader,shaderValue,2);\n    //至此  模糊图片已经生成在downRenderTexture中\n    //设置全局uniform变量 \n    var globalUniformNameID:number = Shader3D.propertyNameToID(\"u_screenTexture\");\n    //将全局变量u_screenTexture赋值为模糊图片\n    buf.setGlobalTexture(globalUniformNameID,downRenderTexture);\n    //将commandBuffer加入渲染流程\n    camera.addCommandBuffer(CameraEventFlags.BeforeTransparent,buf);\n    //回收用过的RenderTexture\n    RenderTexture.recoverToPool(downRenderTexture);\n    RenderTexture.recoverToPool(blurTexture);\n    return;\n  }\n```\n\n----------------------------------------\n\nTITLE: Including GLSL files in LayaAir Shader files - GLSL\nDESCRIPTION: Explains the syntax and usage for including built-in engine GLSL files and custom shader GLSL files within .shader files using #include directive. Built-in files can be referenced by name directly, while custom files require relative paths prefixed with ./ or ../ to specify location, supporting organization of GLSL code modularly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_15\n\nLANGUAGE: glsl\nCODE:\n```\n#include \"Color.glsl\";\n```\n\nLANGUAGE: glsl\nCODE:\n```\n#include \"./abc.glsl\";\n#include \"./path/to/abc.glsl\";\n#include \"../path/abc.glsl\";\n```\n\n----------------------------------------\n\nTITLE: LayaAir PBR Color Batch Shader (GLSL)\nDESCRIPTION: This GLSL shader code defines a PBR (Physically Based Rendering) shader that supports color batching. It includes vertex and fragment shaders that handle vertex transformations, lighting calculations, and color assignment using a uniform color map and custom node data. The shader leverages instance rendering to efficiently draw multiple objects with different colors in a single draw call.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/performanceOptimization/readme.md#_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n    type:Shader3D\n    name:PBRColorBatchShader\n    enableInstancing:true,\n    supportReflectionProbe:true,\n    uniformMap:{\n        u_AlphaTestValue: { type: Float, default: 0.5, range: [0.0, 1.0] },\n\n        u_TilingOffset: { type: Vector4, default: [1, 1, 0, 0] },\n\n        u_AlbedoColor: { type: Color, default: [1, 1, 1, 1] },\n        u_AlbedoTexture: { type: Texture2D, options: { define: \"ALBEDOTEXTURE\" } },\n\n        u_NormalTexture: { type: Texture2D, options: { define: \"NORMALTEXTURE\" } },\n        u_NormalScale: { type: Float, default: 1.0, range: [0.0, 2.0] },\n\n        u_Metallic: { type: Float, default: 0.0, range: [0.0, 1.0] },\n        u_Smoothness: { type: Float, default: 0.0, range: [0.0, 1.0] },\n        u_MetallicGlossTexture: { type: Texture2D, options: { define: \"METALLICGLOSSTEXTURE\" } },\n\n        u_OcclusionTexture: { type: Texture2D, options: { define: \"OCCLUSIONTEXTURE\" } },\n        u_OcclusionStrength: { type: Float, default: 1.0 },\n\n        u_EmissionColor: { type: Color, default: [0, 0, 0, 0] },\n        u_EmissionIntensity: { type: Float, default: 1.0 },\n        u_EmissionTexture: { type: Texture2D, options: { define: \"EMISSIONTEXTURE\" } },\n    },\n    defines: {\n        EMISSION: { type: bool, default: false },\n        ENABLEVERTEXCOLOR: { type: bool, default: false }\n    }\n    shaderPass:[\n        {\n            pipeline:Forward,\n            VS:LitVS,\n            FS:LitFS\n        }\n    ]\n}\nShader3D End\n\nGLSL Start\n#defineGLSL LitVS\n    #define SHADER_NAME PBRColorBatchShader\n\n    #include \"Math.glsl\";\n\n    #include \"Scene.glsl\";\n    #include \"SceneFogInput.glsl\"\n\n    #include \"Camera.glsl\";\n    #include \"Sprite3DVertex.glsl\";\n\n    #include \"VertexCommon.glsl\";\n\n    #include \"PBRVertex.glsl\";\n\n    varying float spriteCustomData;\n\n    void main()\n    {\n        Vertex vertex;\n        getVertexParams(vertex);\n\n        PixelParams pixel;\n        initPixelParams(pixel, vertex);\n\n        gl_Position = getPositionCS(pixel.positionWS);\n\n        gl_Position = remapPositionZ(gl_Position);\n        \n        spriteCustomData = NodeCustomData0;\n\n    #ifdef FOG\n        FogHandle(gl_Position.z);\n    #endif // FOG \n    }\n#endGLSL\n\n#defineGLSL LitFS\n    #define SHADER_NAME PBRColorBatchShader\n\n    #include \"Color.glsl\";\n\n    #include \"Scene.glsl\";\n    #include \"SceneFog.glsl\";\n\n    #include \"Camera.glsl\";\n    #include \"Sprite3DFrag.glsl\";\n\n    #include \"PBRMetallicFrag.glsl\";\n\n    uniform vec4 colormap[20];\n    varying float spriteCustomData;\n\n    void initSurfaceInputs(inout SurfaceInputs inputs, inout PixelParams pixel)\n    {\n        inputs.alphaTest = u_AlphaTestValue;\n\n    #ifdef UV\n        vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\n    #else // UV\n        vec2 uv = vec2(0.0);\n    #endif // UV\n\n        inputs.diffuseColor = colormap[int(spriteCustomData)].rgb;\n        inputs.alpha = colormap[int(spriteCustomData)].a;\n\n    #ifdef COLOR\n        #ifdef ENABLEVERTEXCOLOR\n        inputs.diffuseColor *= pixel.vertexColor.xyz;\n        inputs.alpha *= pixel.vertexColor.a;\n        #endif // ENABLEVERTEXCOLOR\n    #endif // COLOR\n\n    #ifdef ALBEDOTEXTURE\n        vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\n        #ifdef Gamma_u_AlbedoTexture\n        albedoSampler = gammaToLinear(albedoSampler);\n        #endif // Gamma_u_AlbedoTexture\n        inputs.diffuseColor *= albedoSampler.rgb;\n        inputs.alpha *= albedoSampler.a;\n    #endif // ALBEDOTEXTURE\n\n        inputs.normalTS = vec3(0.0, 0.0, 1.0);\n    #ifdef NORMALTEXTURE\n         vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\n        normalSampler = normalize(normalSampler * 2.0 - 1.0);\n        normalSampler.y *= -1.0;\n        inputs.normalTS = normalScale(normalSampler, u_NormalScale);\n    #endif\n\n        inputs.metallic = u_Metallic;\n        inputs.smoothness = u_Smoothness;\n\n    #ifdef METALLICGLOSSTEXTURE\n        vec4 metallicSampler = texture2D(u_MetallicGlossTexture, uv);\n        inputs.metallic = metallicSampler.x;\n        inputs.smoothness = (metallicSampler.a * u_Smoothness);\n    #endif // METALLICGLOSSTEXTURE\n\n        inputs.occlusion = 1.0;\n    #ifdef OCCLUSIONTEXTURE\n        vec4 occlusionSampler = texture2D(u_OcclusionTexture, uv);\n        float occlusion = occlusionSampler.g;\n        inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\n    #endif // OCCLUSIONTEXTURE\n\n        inputs.emissionColor = vec3(0.0);\n    #ifdef EMISSION\n        inputs.emissionColor = u_EmissionColor.rgb * u_EmissionIntensity;\n        #ifdef EMISSIONTEXTURE\n        vec4 emissionSampler = texture2D(u_EmissionTexture, uv);\n        #ifdef Gamma_u_EmissionTexture\n        emissionSampler = gammaToLinear(emissionSampler);\n        #endif // Gamma_u_EmissionTexture\n        inputs.emissionColor *= emissionSampler.rgb;\n        #endif // EMISSIONTEXTURE\n    #endif // EMISSION\n    }\n\n    void main()\n    {\n        PixelParams pixel;\n        getPixelParams(pixel);\n\n        SurfaceInputs inputs;\n        initSurfaceInputs(inputs, pixel);\n\n        vec4 surfaceColor = PBR_Metallic_Flow(inputs, pixel);\n        \n    #ifdef FOG\n        surfaceColor.rgb = sceneLitFog(surfaceColor.rgb);\n    #endif // FOG\n\n        gl_FragColor = surfaceColor;\n\n        gl_FragColor = outputTransform(gl_FragColor);\n    }\n#endGLSL\n\nGLSL End\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with fillText - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `fillText()` method of the `laya.display.Graphics` class to draw text on a Sprite. It initializes a Sprite, then calls `fillText()` with specified text, coordinates, font, color, and alignment.  The Sprite is then added to the display list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet sp = new Laya.Sprite();\n// 绘制文本\nsp.graphics.fillText(\"LayaAir\", 100, 100, \"20px Arial\", \"#ff0000\", \"center\");\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying BlurFilter in LayaAir with TypeScript\nDESCRIPTION: This TypeScript example shows how to create a BlurFilter and apply it to an Image component in LayaAir. It sets the blur strength property to control the intensity of the blur effect. Required dependencies include the LayaAir engine and the Image component to which the filter is applied. The input is a numeric value controlling blur intensity, and the output is a visually blurred image. The snippet is useful for adding softening or focus effects in UI components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Filter/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n\t// 获得Image组件\n\t@property({ type: Laya.Image })\n\tpublic img: Laya.Image;\n\n\t//组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n\tonAwake(): void {\n\t\tlet blurFilter: Laya.BlurFilter = new Laya.BlurFilter();\n\t\t// 设置模糊强度\n\t\tblurFilter.strength = 5;\n\t\t// 给Image组件添加模糊滤镜\n\t\tthis.img.filters = [blurFilter];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Network Resources in LayaAir (TypeScript)\nDESCRIPTION: Illustrates setting a base URL for dynamic resource loading using `Laya.URL.basePath`. After assigning a valid network URL to `Laya.URL.basePath`, subsequent `Laya.loader.load` calls with relative paths (e.g., \"resources/layaair.png\") will automatically prepend this base path, fetching the resources from the specified remote server instead of the local package. This is a common technique to manage assets exceeding WeChat Mini Game package size limits.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/wechat/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonAwake(): void {\n        //网络动态加载\n        Laya.URL.basePath = \"https://XXXX\";//请把XXX换成自己的真实网址；\n        //在此之下，再使用load加载资源，都会自动加入URL网址。从网络上动态加载。\n        Laya.loader.load(\"resources/layaair.png\").then((res: Laya.Texture) => {\n            let sprite:Laya.Sprite = new Laya.Sprite();\n            sprite.texture = res;\n            this.owner.addChild(sprite);\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Scripts via Command Line in LayaAirIDE\nDESCRIPTION: Highlights how to pass parameters to scripts through command line using the --script-args option. This allows dynamic data, such as strings with quotes, to be passed into script methods during execution, enabling flexible automation and scripting.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/commandLine/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n> LayaAirIDE --project=/path/to/project --script=Script.Speak --script-args=\"say \\\"hello world\\\"\"\n// 脚本内容示例\n@IEditorEnv.regClass()\nclass Script {\n    \n    static speak(arg1: any, arg2: any) {\n        console.log(arg1); \n        console.log(arg2); \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Static Native Functions in Android Java for LayaNative Reflection\nDESCRIPTION: Provides example implementations of static native functions in the Android Java layer within the class `JSBridge`, which can be invoked from the JavaScript layer using reflection. Functions accept and return basic types including String, double, and boolean, and include an asynchronous callback function that processes JSON input and invokes a JavaScript callback on the UI thread. Proper logging and thread handling through Android handlers are demonstrated. These methods must be public static for reflective access.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/Secondary_Development/readme.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n    public static String testString(String value) {\n        Log.d(\"JSBridge\", \"java: \" + value);\n        return \"LayaBox\";\n    }\n    public static double testNumber(double value) {\n        Log.d(\"JSBridge\", \"java: \" + value);\n        return 512;\n    }\n    public static boolean testBool(boolean value) {\n        Log.d(\"JSBridge\", \"java: \" + value);\n        return value ? false : true;\n    }\n    public static void testAsyncCallback(String json) {\n        //js thread\n        try {\n            JSONObject root = new JSONObject(json);\n            Log.d(\"JSBridge\", \"java: \" + root.getString( \"value\" ));\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        m_Handler.post(\n                new Runnable() {\n                    public void run() {\n                        //ui thread update ui\n                        JSONObject obj = new JSONObject();\n                        try {\n                            obj.put(\"value\", \"Hello JS!\");\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        ExportJavaFunction.CallBackToJS(JSBridge.class,\"testAsyncCallback\", obj.toString());\n                    }\n                });\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Resource Files\nDESCRIPTION: This snippet defines an array of resource URLs and loads them using the Laya.loader.load function. The loaded resources are used to build the scene including the terrain, the 3D model and a star map used for pathfinding. The `ILoadURL` interface describes the resource to load. The `Handler.create` creates a handler to execute the `onLoadFinish` after the resources are loaded.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nvar resource: ILoadURL[] = [{ url: \"res/threeDimen/scene/TerrainScene/XunLongShi.ls\", priority: 1 },\n        { url: \"res/threeDimen/skinModel/LayaMonkey/LayaMonkey.lh\", priority: 1 },\n        { url: \"res/threeDimen/scene/TerrainScene/Assets/HeightMap.png\", priority: 1, constructParams: [1024, 1024, 1, false, true] },\n        { url: \"res/threeDimen/scene/TerrainScene/Assets/AStarMap.png\", priority: 1, constructParams: [64, 64, 1, false, true] }\n        ];\n\n        Laya.loader.load(resource, Handler.create(this, this.onLoadFinish));\n```\n\n----------------------------------------\n\nTITLE: 定义蓝图中的事件\nDESCRIPTION: 此示例使用@bpClass的events参数定义事件及其参数，便于在蓝图中绑定事件处理函数。触发事件的方法通过调用event()函数实现，事件列表会在蓝图实例中可见。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass, bpFunction } = BP;\n\n@bpClass({\n    name: \"TestEvents\",\n    extends: \"Sprite\",\n    construct: {\n        params: [\n            { \"name\": \"eee\", \"type\": \"string\" }\n        ]\n    },\n    events: [{\n        name: \"onTest\",\n        params: [{ \"name\": \"name\", \"type\": \"string\" }]\n    }, {\n        name: \"onEventTest\",\n        params: [{ \"name\": \"name\", \"type\": \"string\" }]\n    }]\n})\n\nexport class Main extends Laya.Sprite {\n    constructor(eee: string) {\n        super();\n    }\n\n    onTest(name: string, type: string) {\n        this.event('onTest', 'test');\n    }\n\n    @bpFunction({\n        params: [{ \"name\": \"name\", \"type\": \"string\" }],\n        type: \"event\",\n        returnType: \"void\"\n    })\n    onEventTest(name: string) {\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Chrome Debugging in VSCode (JSON)\nDESCRIPTION: This JSON snippet defines two debugger configurations for Visual Studio Code: \"Launch Chrome\" to start and control a new Chrome session for local debugging, and \"Attach to Chrome\" to connect to an existing Chrome instance on a specific port. Key parameters include \"url\" to specify the project URL, \"webRoot\" indicating the source code root directory, and \"sourceMapPathOverrides\" for proper source map resolution. The configuration targets debugging TypeScript sources of LayaAir projects running on localhost, typically on port 18090, which can be adjusted if needed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/VsCode/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n    {\n        \"name\": \"Launch Chrome\",\n        \"request\": \"launch\",\n        \"type\": \"chrome\",\n        \"url\": \"http://localhost:18090\",\n        \"webRoot\": \"${workspaceFolder}/src\",\n        \"sourceMapPathOverrides\": {\n            \"webpack:///src/*\": \"${webRoot}/*\"\n        }\n    },\n    {\n        \"name\": \"Attach to Chrome\",\n        \"request\": \"attach\",\n        \"type\": \"chrome\",\n        \"port\": 18090,\n        \"webRoot\": \"${workspaceRoot}\",\n        \"urlFilter\":\"http://localhost:18090/*\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Render Target and Drawing in CommandBuffer\nDESCRIPTION: This code shows how to set a render target and draw renders using the CommandBuffer. It sets the render target and draws a renderable object.  Dependencies: requires `renderTexture`, `renders` (array of renderable objects), and `materials` (array of materials). Output: Modifies the rendering output based on the provided parameters.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/CommandBuffer/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuf.setRenderTarget(renderTexture);\nbuf.drawRender(renders[i],materials[i],0);\n```\n\n----------------------------------------\n\nTITLE: Loading Local Resources in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates basic local resource loading using `Laya.loader.load` within a LayaAir project targeting WeChat Mini Games. This method attempts to load the specified asset ('resources/layaair.png') from the local package path. This approach is suitable when the total game size is within the initial package limits set by WeChat.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/wechat/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"resources/layaair.png\");\n```\n\n----------------------------------------\n\nTITLE: Low-Level File I/O using Global Functions in LayaNative (TypeScript)\nDESCRIPTION: The TypeScript declarations here expose global file I/O functions for synchronous reading and writing in a LayaNative context. fs_readFileSync reads a file and returns its ArrayBuffer, fs_writeFileSync writes either string or ArrayBuffer to a specified file, returning a boolean for success, while readFileSync provides direct string reading with encoding control. Usage scenarios include patch operations and direct resource updates where asynchronous or high-level APIs are inadequate. Proper error handling must be implemented externally for production use.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/zipUpdate/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var fs_readFileSync:(file:string)=>ArrayBuffer;\ndeclare var fs_writeFileSync:(file:string,data:string|ArrayBuffer)=>boolean;\ndeclare var readFileSync:(file:string,encode:string)=>string;//\\u8fd9\\u4e2a\\u76f4\\u63a5\\u8fd4\\u56de\\u5b57\\u7b26\\u4e32\\u3002\n```\n\n----------------------------------------\n\nTITLE: Defining Game Logic Script in Preview Process - TypeScript\nDESCRIPTION: An example of a standard game logic script class (`TestGameScript`) registered with `Laya.regClass`, which runs in the Preview process and potentially in the final published game.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是游戏的逻辑代码\n\n@Laya.regClass()\nexport class TestGameScript {\n    static test(msg: string) {\n        console.log(msg); //hello\n        \n        return \"ok\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Collision Groups in LayaAir\nDESCRIPTION: Uses bitwise XOR operations to exclude specific collision groups while enabling collision with all others. This example prevents collision with custom groups 2 and 5.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定不可以与其发生碰撞的碰撞组(本例将不与自定义组2、5进行碰撞，除自定义2与5组之外，都可以发生碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2 ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;\n```\n\n----------------------------------------\n\nTITLE: Exposing a Property to the LayaAir Editor (TypeScript)\nDESCRIPTION: Uses the `@property()` decorator above a class member variable declaration. This makes the property visible and editable within the LayaAir editor, allowing designers to assign scene nodes or set values directly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/Script/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@property()\nprivate btn_1: Laya.Button;\n```\n\n----------------------------------------\n\nTITLE: Adding Rigidbody3D and BoxColliderShape for Physics Simulation in TypeScript\nDESCRIPTION: Attaches Rigidbody3D component and collider shape to objects for physics simulation such as gravity and collision detection. Useful for creating realistic physical interactions like free-fall.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/displayObject/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 添加刚体\nlet boxRigidbody3D: Laya.Rigidbody3D = box.addComponent(Laya.Rigidbody3D);\n// 设置重力\nboxRigidbody3D.gravity = new Laya.Vector3(0, -9.8, 0);\n// 创建盒子形状\nlet boxShape: Laya.BoxColliderShape = new Laya.BoxColliderShape(1, 1, 1);\n// 绑定碰撞形状\nboxRigidbody3D.colliderShape = boxShape;\n```\n\n----------------------------------------\n\nTITLE: Watching Geolocation Changes on Key Down in LayaAir TypeScript\nDESCRIPTION: Demonstrates how to continuously monitor device location changes within a LayaAir Script component, initiated by a key down event. It uses `Laya.Geolocation.watchPosition` with success (`updatePosition`) and error (`onError`) handlers created via `Laya.Handler.create`. The success handler logs updated coordinates and accuracy, while the error handler logs specific errors. Requires user interaction (key down) and potentially HTTPS.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/geolocation/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n    \n    onKeyDown(): void {\n        // Geolocation.watchPosition函数签名\n        Laya.Geolocation.watchPosition(\n            Laya.Handler.create(this, this.updatePosition),\n            Laya.Handler.create(this, this.onError));\n        console.log(\"keydown\");\n    }\n    \n    updatePosition(info: Laya.GeolocationInfo): void {\n        console.log('经纬度: (' + info.longitude + '°, ' + info.latitude + '°)，精确度：' + info.accuracy + 'm');\n    }\n    \n    onError(err: any): void {\n        var errType: String;\n        if (err.code == Laya.Geolocation.PERMISSION_DENIED)\n            errType = \"Permission Denied\";\n        else if (err.code == Laya.Geolocation.POSITION_UNAVAILABLE)\n            errType = \"Position Unavailable\";\n        else if (err.code == Laya.Geolocation.TIMEOUT)\n            errType = \"Time Out\";\n        console.log('ERROR(' + errType + '): ' + err.message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Properties in LayaAir Editor Inspector using @classInfo - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to group multiple class properties in the LayaAir IDE inspector using the @classInfo decorator. The properties option within @classInfo defines groups, including group name, inspector type, member properties, and display position. The members array assigns specific properties to groups, and position can control layout. The code requires importing regClass, property, and classInfo from Laya. This enhances inspector readability for scripts with many properties. Inputs are the property definitions and grouping configuration; output is a reorganized display in the IDE. The method is meant for editor use and does not affect runtime logic.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo({\n    properties: [\n        {\n            name: \"Group1\",\n            inspector: \"Group\",\n            options: {\n                members: [\"b\", \"c\"]\n            },\n            position: \"after a\"\n        }\n    ]\n})\nexport class NewScript extends Laya.Script {\n\n    @property(String)\n    public a: string = \"\";\n\n    @property(String)\n    public b: string = \"\";\n\n    @property(String)\n    public c: string = \"\";\n\n    @property(String)\n    public d: string = \"\";\n\n    @property(String)\n    public e: string = \"\";\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking TypeScript Compiler Version via tsc Command\nDESCRIPTION: This command is used in the command line to display the installed version of the TypeScript compiler (tsc). Running `tsc -v` successfully confirms that TypeScript has been installed correctly and is available in the system's PATH.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/developmentEnvironment/download/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntsc -v\n```\n\n----------------------------------------\n\nTITLE: Custom Shader for Gradient Effect in 2D Mesh Renderer (GLSL)\nDESCRIPTION: This GLSL shader code defines a custom shader used to render a gradient effect on a 2D mesh. It supports setting gradient direction and colors via uniforms and applies these effects during the fragment shading stage. Dependencies include the shader pipeline and shader pass configurations, utilized within the LayaAir rendering framework.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/2DRender/Mesh2DRender/readme.md#_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\nShader3D Start\n{\n    type:Shader3D,\n    name:baseRender2D,\n    enableInstancing:true,\n    supportReflectionProbe:true,\n    shaderType:2,\n    uniformMap:{\n        u_gradientDirection: {type: Vector2, default:[1,1]},    // 渐变方向\n        u_gradientStartColor: {type:Vector4, default:[1,1,1,1]},       // 渐变起始颜色\n        u_gradientEndColor: {type:Vector4, default:[1,1,1,1]}        // 渐变结束颜色    \n    },\n    attributeMap: {\n        a_position: Vector4,\n        a_color: Vector4,\n        a_uv: Vector2,\n    },\n    defines: {\n        BASERENDER2D: { type: bool, default: true }\n    }\n    shaderPass:[\n        {\n            pipeline:Forward,\n            VS:baseRenderVS,\n            FS:baseRenderPS\n        }\n    ]\n}\nShader3D End\n\nGLSL Start\n#defineGLSL baseRenderVS\n\n    #define SHADER_NAME baseRender2D\n\n    #include \"Sprite2DVertex.glsl\";\n\n    void main() {\n        vec4 pos;\n        //先计算位置，再做裁剪\n        getPosition(pos);\n        vertexInfo info;\n        getVertexInfo(info);\n\n        v_texcoord = info.uv;\n        v_color = info.color;\n\n        #ifdef LIGHT_AND_SHADOW\n            lightAndShadow(info);\n        #endif\n\n        gl_Position = pos;\n    }\n\n#endGLSL\n\n#defineGLSL baseRenderPS\n    #define SHADER_NAME baseRender2D\n    #if defined(GL_FRAGMENT_PRECISION_HIGH) \n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    #include \"Sprite2DFrag.glsl\";\n\n    void main()\n    {\n        clip();\n        vec4 textureColor = texture2D(u_baseRender2DTexture, v_texcoord);\n\n        // 计算渐变因子\n        float gradientFactor = dot(v_texcoord, normalize(u_gradientDirection)) * 0.5 + 0.5;\n        \n        // 混合渐变颜色\n        vec4 gradientColor = mix(u_gradientStartColor, u_gradientEndColor, gradientFactor);\n        textureColor *= gradientColor;\n        \n        #ifdef LIGHT_AND_SHADOW\n            lightAndShadow(textureColor);\n        #endif\n\n        textureColor = transspaceColor(textureColor);\n        setglColor(textureColor);\n    }\n    \n#endGLSL\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Switching Framerate Mode to FRAME_MOUSE in LayaAir - TypeScript\nDESCRIPTION: Switches the stage framerate mode to FRAME_MOUSE, which alternates between fast and slow framerates depending on mouse activity. Useful for balancing UI responsiveness and CPU consumption. This is a simple parameter setting; ensure Stage.FRAME_MOUSE is available in your LayaAir version.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.stage.frameRate = Laya.Stage.FRAME_MOUSE;\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Sprite Properties in TypeScript\nDESCRIPTION: Illustrates setting common visual properties of a Sprite after loading an image. It includes setting the position (`pos`), anchor point (`anchorX`, `anchorY`), scale (`scale`), and rotation (`rotation`) before adding the Sprite to the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\n// 加载并显示一个图片\nsprite.loadImage(\"atlas/comp/image.png\", null);\n//设置图片的起始位置\nsprite.pos(20, 20);\n//设置锚点\nsprite.anchorX = 0.5;\nsprite.anchorY = 0.5;\n//设置缩放\nsprite.scale(2, 2);\n//旋转\nsprite.rotation = 30;\n// 添加到舞台\nLaya.stage.addChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Using Millisecond-Based Repeating Timer Callback in LayaAir Script (TypeScript)\nDESCRIPTION: Shows usage of Laya.timer.loop to repeatedly decrease an image's alpha by 0.1 every second within the onAwake method. This pattern is used for gradual property changes over time and relies on the callback, context, and delay parameters specified.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //每1秒后，图片的透明度减少0.1\n        Laya.timer.loop(1000, this, () => {\n            this.Image.alpha -= 0.1;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Images with Addressables in LayaAir (TypeScript)\nDESCRIPTION: This code snippet shows how to load multiple images in LayaAir using the Addressables system. It uses `loadAssetsAsync` to load the images and `getLocationAsync` to retrieve their paths. The loaded images are then added to the scene. It relies on the Addressables plugin.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/apply/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@regClass()\nexport class LoadImage extends Laya.Script {\n\n    key: string[] = [\"test1\"];\n    resourceLocation: ResourceLocation[] = [];\n\n    onStart(): void {\n        this.loadImage(this.key);\n    }\n\n    async loadImage(key: string[]){\n        //加载资源\n        await Addressables.loadAssetsAsync(this.key, { mode: MergeMode.Union });\n        //获取资源地址\n        this.resourceLocation = await Addressables.getLocationAsync(this.key, MergeMode.Union);\n        this.setImage();\n    }\n\n    //将图片添加到场景中\n    setImage(): void{\n        let imageJPG: Laya.Image = new Laya.Image(this.resourceLocation[0].path);\n        imageJPG.pos(165, 62.5);\n        imageJPG.size(300, 200);\n        this.owner.addChild(imageJPG);\n\n        let imagePNG: Laya.Image = new Laya.Image(this.resourceLocation[1].path);\n        imagePNG.pos(600, 62.5);\n        imagePNG.size(300, 200);\n        this.owner.addChild(imagePNG);\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using ShurikenParticleRenderer Component Property in LayaAir with TypeScript\nDESCRIPTION: This snippet declares a property of component type Laya.ShurikenParticleRenderer exposed via the @property decorator. It modifies the owner node's local position and changes the particle system's simulation speed directly from the component. Dependencies include LayaAir engine and correct component attachment. The input is the particle node's ShurikenParticleRenderer component dragged into the property, and output is the updated transform and particle behavior at runtime. Note the limitation that IDEs cannot recognize non-node component types if used improperly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/componentProperties/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property( { type : Laya.ShurikenParticleRenderer } ) //组件类型\n    public p3dRenderer: Laya.ShurikenParticleRenderer;\n\n    onAwake(): void {\n\n        (this.p3dRenderer.owner as Laya.Sprite3D).transform.localPosition = new Laya.Vector3(0,5,5);\n        this.p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions with Tweens in TypeScript\nDESCRIPTION: Demonstrates how to use the three types of callbacks in the tween system: onStart, onUpdate, and then (completion). The examples show how to modify animation properties during execution and respond to animation events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Tween/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 100)\n\t//2000毫秒后，onStart方法才会被调用\n\t.delay(2000)\n\t//启动回调\n    .onStart(tweener => {\n    \t//在启动回调中设置了x的终值为200\n        tweener.endValue.set(\"x\", 200);\n    });\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建纯计算的缓动\nLaya.Tween.create(null).duration(1000).go(null, 0, 1000)\n\t//更新回调\n    .onUpdate(tweener => {\n        let value = tweener.get(null);\n        //开发者可在此实现具体的效果\n    });\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建缓动\nlet tween = Laya.Tween.create(aSprite).duration(1000).to(\"x\", 0)\n\t//结束回调\n    .then(this.onComplete, this);\n\n//也会执行then()方法\nif (tween != null)\n    tween.kill(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring VBox Properties via Custom Script in LayaAir (TypeScript)\nDESCRIPTION: This snippet defines a TypeScript class that customizes a VBox container's position, background color, spacing, and alignment in LayaAir's Scene2D system. It requires the @regClass and @property decorators from Laya, assumes a VBox is set up via the LayaAir IDE, and exposes it as a property for manipulation. Important parameters include vbox, its position (pos), bgColor, space (child spacing in pixels), and align (horizontal alignment). The script executes once when the component is activated and expects the VBox instance to exist in the scene. No dynamic child creation occurs here; it merely sets VBox layout and appearance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/VBox/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.VBox })\n    public vbox: Laya.VBox;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.vbox.pos(100, 100);\n        this.vbox.bgColor = \"#ffffff\";\n        this.vbox.space = 30;\n        this.vbox.align = \"center\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LayaNative Screen Orientation and Loading Libraries in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the screen orientation setting for a LayaNative project by assigning a string value to the global window.screenOrientation property. It lists all supported orientation modes such as landscape, portrait, reverseLandscape, and sensor-based rotations. Additionally, it shows how to load necessary LayaAir libraries using loadLib calls. The snippet is intended to be placed in the entry JavaScript file (e.g., index.js) used by LayaNative during project startup. It explicitly warns against including any application logic in this file to avoid runtime errors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/native_index/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * 设置LayaNative屏幕方向，可设置以下值：\n * landscape：横屏\n * portrait：竖屏\n * reverseLandscape：反向横屏\n * reversePortrait：反向竖屏\n * sensorLandscape：传感器横屏旋转\n * sensorPortrait：传感器竖屏旋转\n * fullSensor：随传感器旋转\n */\nwindow.screenOrientation = \"reversePortrait\"; // 设置屏幕为竖屏\n\n//\nloadLib(\"libs/laya.core.js\"); \n......\n```\n\n----------------------------------------\n\nTITLE: Accessing Debug Information via Chrome\nDESCRIPTION: This snippet instructs the user to enter `localhost:5959/json` in Chrome's address bar to retrieve the port connection information.  This information contains URLs, including `devtoolsFrontendUrl`, which can be used to connect Chrome DevTools to the JavaScript code running on the HarmonyOS NEXT device.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Harmony/debug/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlocalhost:5959/json\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Custom Menus in TypeScript\nDESCRIPTION: Programmatically creates menus with options for nested submenus and tied event handlers. Also demonstrates how to show menus by ID or directly via menu object, supporting complex menu structures.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet menu = IEditor.Menu.create([ \n    { label: \"test\" , click : function() { console.log(\"clicked\"); } }\n ]);\n\n//弹出菜单\nmenu.show();\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nIEditor.Menu.create([ \n    { \n        label: \"test\" , \n        submenu: [ \n            { label : \"a\" },\n            { \n                label : \"b\",\n                submenu : [ \n                    { label : \"c\" }\n                ]\n            }\n        ]\n    }\n ]);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nIEditor.Menu.create(\"MyTestMenu\", [ \n    { label: \"test\" , click : function() { console.log(\"clicked\"); } }\n ]);\n//显示特定菜单\nIEditor.Menu.getById(\"MyTestMenu\").show();\n```\n\n----------------------------------------\n\nTITLE: Loading Texture Atlases via LayaAir Loader in TypeScript\nDESCRIPTION: This snippet demonstrates how to load a texture atlas resource using LayaAir's loader in TypeScript. The atlas resource, identified with an `.atlas` extension, is loaded asynchronously, allowing subsequent operations to proceed only once the resource is completely loaded. There are no additional dependencies besides the LayaAir framework. The input is the path to the atlas resource file, and the output is the completion of the loading process, enabling access to individual subtextures defined within the atlas. The code is designed to simplify loading and improve resource management.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/generalSetting/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//atlas方式图集使用示例\nLaya.loader.load(\"resources/atlas/Atlas_ui.atlas\").then( \n\t()=>{} \n);\n```\n\n----------------------------------------\n\nTITLE: Exposing Properties and Accessors to Blueprints with bpProperty and bpAccessor Decorators in TypeScript\nDESCRIPTION: Defines how to expose class properties, static properties, and getter/setter pairs to the blueprint system using @bpProperty and @bpAccessor decorators. Properties are typed (e.g., boolean, string) and can be marked static with modifiers. Accessors similarly support instance and static usage. This allows blueprint editors to interact with variables for get/set operations within the visual scripting environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass, bpAccessor, bpProperty } = BP;\n\n@bpClass({\n    name: \"TestBluePrint\",\n    extends: \"Script\",\n    construct: {\n        params: [\n            {\n                \"name\": \"testParams\",\n                \"type\": \"string\"\n            }\n        ]\n    }\n})\n\nexport class TestBluePrint extends Laya.Script {\n\n    constructor(testParams: string) {\n        super();\n    }\n\n    // 属性\n    @bpProperty({\n        \"type\": \"boolean\"\n    })\n    aaa: boolean = true;\n\n    // 静态属性\n    @bpProperty({\n        \"type\": \"boolean\",\n        \"modifiers\": {\n            \"isStatic\": true\n        }\n    })\n    static bbb: boolean = true;\n\n    // get & set\n    @bpAccessor({\n        \"type\":\"string\"\n    })\n    get testParams():string{\n        return \"test\";\n    }\n\n    set testParams(value:string){\n        console.log(value);\n    }\n\n    // 静态 get & set\n    @bpAccessor({\n        \"type\":\"string\",\n        \"modifiers\": {\n            \"isStatic\": true\n        }\n    })\n    static get testStaParams():string{\n        return \"test\";\n    }\n\n    static set testStaParams(value:string){\n        console.log(value);\n    }\n    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Uniform Map Definition\nDESCRIPTION: Shows how to define a uniform map with various variable types such as Texture2D, Vector2, Vector4, Float, and Matrix4x4. The default values for each uniform variable are also defined.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n    name:Sprite2DTextureShader,\n    shaderType:2,\n    uniformMap:{\n\t\tu_MainTex : {type: Texture2D, default: \"white\"},\n\t\tu_SampleTexcoord : {type: Vector2, default:[1,1]},\n\t\tu_Color : {type:Vector4, default:[1,1,1,1]},\n\t\tu_spend : {type:Float, default:1.0},\n\t\tu_defaultMat : {type:Matrix4x4, default:[\n\t\t1,0,0,0\n\t\t0,1,0,0,\n\t\t0,0,1,0,\n\t\t0.0,0,\n\t\t]}\n    }\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Controlling LayaAir ViewStack with Tab using TypeScript\nDESCRIPTION: This TypeScript script, intended as a custom component in LayaAir, demonstrates how to dynamically switch the visible page of a `ViewStack` container based on user interaction with a `Tab` component. It utilizes `@property` decorators to expose `viewstack` and `tab` variables in the IDE, allowing linking to the actual components. The `onAwake` method sets up an event handler (`onSelecte`) for the `Tab`'s `selectHandler`. When a tab is selected, the `onSelecte` method is called with the selected tab's index, which is then used to update the `ViewStack`'s `selectedIndex`, effectively changing the displayed child page. This requires the script to be attached to a node in the scene, and the `ViewStack` and `Tab` components to be assigned to the corresponding properties in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/ViewStack/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.ViewStack })\n    public viewstack: Laya.ViewStack;\n\n    @property({ type: Laya.Tab })\n    public tab: Laya.Tab;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        //点击Tab选择按钮的处理\n        this.tab.selectHandler = new Laya.Handler(this, this.onSelecte);\n    }\n\n    // 根据选择tab的索引切换页面\n    private onSelecte(index: number): void {\n        //切换ViewStack子页面\n        this.viewstack.selectedIndex = index;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Switching with TypeScript in LayaAir\nDESCRIPTION: This code demonstrates how to load a 3D model prefab, add it to the scene, and switch between different animations using mouse input. It uses Laya.Animator to control the animation state and toggles between 'idle' and 'run' animations when the user clicks the screen.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/useModel/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MainBase } from \"./Main.generated\";\nimport KeyBoardManager = Laya.InputManager;\nimport Keyboard = Laya.Keyboard;\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends MainBase {\n\n    private _animator: Laya.Animator;\n    private _isRun: boolean;\n    onAwake() {\n        console.log(\"Game start\");\n        //加载指定的模型预制体，并添加到Scene3D场景内\n        Laya.loader.load(\"girl/girl.lh\").then(res => {\n            let girl : Laya.Sprite3D = res.create();\n            this.scene3D.addChild(girl); \n            //获得Animator \n            this._animator = girl.getComponent<Laya.Animator>(Laya.Animator);\n        });      \n        this.on( Laya.Event.MOUSE_DOWN, this, this.switchAni );\n    }\n\n    switchAni(): void {\n        if (this._isRun) {\n        \t//播放对应的动画\n            this._animator.play(\"idle\");                \n        } else {\n\t\t\tthis._animator.play(\"run\");\n        }  \n        this._isRun = !this._isRun;\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Kinematic Rigidbody in LayaAir 3D Physics\nDESCRIPTION: Example code demonstrating how to obtain a rigidbody component and set it as a kinematic rigidbody, which doesn't respond to physics forces but can affect other dynamic bodies.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n……省略若干代码\n*/\n\n//获得刚体碰撞器\nthis.rigidbody = this.cube1.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n//开启运动类型刚体\nthis.rigidbody.isKinematic = true;\n\n/*\n……省略若干代码\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Properties for Lights in LayaAir with TypeScript\nDESCRIPTION: This snippet details how to configure shadow-related properties for a LayaAir light (e.g., DirectionLight) in TypeScript. It demonstrates setting the shadow mode (soft shadow), maximum shadow distance, shadow resolution, cascade mode, and normal bias. Dependencies: a valid light component (e.g., dircom as a DirectionLightCom instance), LayaAir ShadowMode, and ShadowCascadesMode enums. Inputs: no parameters; Output: the light's shadow properties configured for performance and quality trade-offs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Light/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Use soft shadow.\ndircom.shadowMode = Laya.ShadowMode.SoftLow;\n// Set shadow max distance from camera.\ndircom.shadowDistance = 50;\n// Set shadow resolution.\ndircom.shadowResolution = 1024;\n// Set shadow cascade mode.\ndircom.shadowCascadesMode = Laya.ShadowCascadesMode.NoCascades;\n// Set shadow normal bias.\ndircom.shadowNormalBias = 1;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Script for Blood Bar UI Behavior\nDESCRIPTION: Defines a class 'BloodBar' that controls the blood bar UI element for a game character, updating the bar value and playing animations on damage events. It shows how to manipulate 3D UI components via scripting for dynamic effects like health reduction and visual feedback.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/3DUI/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\nimport { BloodBarBase } from \"./BloodBar.generated\";\nimport { Main } from \"./Main\";\n\n@regClass()\nexport class BloodBar extends BloodBarBase {\n    onAwake(): void {\n        this.bar.value = 1;\n        this.value.visible = false;\n        Laya.stage.on(Laya.Event.CLICK, this, this.onHurt);\n    }\n\n    onHurt(): void {\n        this.bar.value = this.bar.value - 0.9;\n        this.value.y = 35;\n        this.value.visible = true;\n        Main.instance.animator.play(\"stun\");\n        Laya.Tween.create(this.value).to(\"y\", -30).duration(1000);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Programmatically Creating VBox with Buttons in LayaAir Using TypeScript\nDESCRIPTION: This snippet illustrates programmatic UI creation using TypeScript to instantiate a VBox container and three Button components as its children within the LayaAir framework. It handles asynchronous resource loading via Laya.loader.load, sets up button skins, and configures the VBox layout with position, size, background color, spacing, and horizontal alignment. Dependencies include LayaAir UI classes VBox, Button and the resource atlas for button skins. Key parameters include position, size, spacing, and align which affect layout rendering. The output is a VBox container displaying three vertically arranged, evenly spaced buttons. This approach is suited for dynamic UI generation where IDE editing is not preferred.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/VBox/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_VBox extends Laya.Script {\n\n    private vbox: Laya.VBox;\n    private btn1: Laya.Button;\n    private btn2: Laya.Button;\n    private btn3: Laya.Button;\n\n    // 按钮皮肤资源\n    private skins: string = \"atlas/comp/button.png\";\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        Laya.loader.load(this.skins).then(() => {\n            this.createBtn();\n            this.createvbox();\n            // 添加VBox组件\n            this.owner.addChild(this.vbox);\n        });\n    }\n\n    // 创建Button组件\n    private createBtn(): void {\n        this.btn1 = new Laya.Button(this.skins);\n        this.btn2 = new Laya.Button(this.skins);\n        this.btn3 = new Laya.Button(this.skins);\n    }\n\n    // 创建VBox组件\n    private createvbox(): void {\n        this.vbox = new Laya.VBox;\n        this.vbox.pos(100, 100);\n        this.vbox.size(600, 300);\n        this.vbox.bgColor = \"#ffffff\";\n        this.vbox.addChild(this.btn1);\n        this.vbox.addChild(this.btn2);\n        this.vbox.addChild(this.btn3);\n        this.vbox.space = 80;\n        this.vbox.align = \"center\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering 3D Mouse Collision Groups in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates penetration detection with collision group filtering. It assigns collision groups to object colliders and uses canCollideWith to exclude specific groups during rayCastAll, enabling selective collision handling. Dependencies include LayaAir's physics simulation and utility classes. Inputs are the mouse coordinates, with outputs being logged object names only for objects that pass group filtering. Proper collider and group setup is required.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;  \n  /** 输出射线检测碰到的全部目标对象 */\n  private _outs: Array<any> = [];\n  private _ray: Laya.Ray;\n  private point: Laya.Vector2 = new Laya.Vector2();\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码，详情参照官网3D鼠标交互示例 */\n    var meshCollider2 = layaMonkey_clone2.addComponent(PhysicsCollider);\n    var meshShape2 = new MeshColliderShape();\n    meshShape2.mesh = layaMonkey_clone2.meshFilter.sharedMesh;\n    meshCollider2.colliderShape = meshShape2;\n    //为不需要碰撞的物体的碰撞器设置碰撞组，为COLLISIONFILTERGROUP_CUSTOMFILTER2\n    meshCollider2.collisionGroup = Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;\n    \n    //射线初始化（必须初始化）\n    this._ray = new Ray(new Vecntetor3(0, 0, 0), new Vector3(0, 0, 0));\n    //侦听舞台上的鼠标事件\n    Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);    \n  }\n  \n  /** 鼠标按下时的逻辑处理 */\n  onMouseDown(): void {\n    this.point.x = Laya.stage.mouseX;\n    this.point.y = Laya.stage.mouseY;\n    //用舞台上的鼠标坐标，产生一条3D空间射线\n    this._camera.viewportPointToRay(this.point, this._ray);\n    \n    /** 过滤条件：不可碰撞的3D物体为，除了COLLISIONFILTERGROUP_CUSTOMFILTER2之外的，都可以碰撞 */\n    let canCollideWith = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER ^ Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;\n    //使用物理引擎的射线检测方法，穿透检测多个,但排除了COLLISIONFILTERGROUP_CUSTOMFILTER2\n    this._scene.physicsSimulation.rayCastAll(this._ray, this._outs, 2147483647, Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, canCollideWith);\n    if (this._outs.length > 0) {\n      for (let i = 0; i < this._outs.length; i++) {\n        console.log(\"碰撞到物体(\" + i + \"): \" + this._outs[i].collider.owner.name);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Blend Modes to Sprites in TypeScript\nDESCRIPTION: Creates two overlapping Sprites with images and applies the \"lighter\" blend mode to the top Sprite (`sp2.blendMode = \"lighter\"`), causing its colors to additively blend with the underlying Sprite (`sp1`). Requires image files at specified paths.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet sp1 = new Laya.Sprite();\nLaya.stage.addChild(sp1);\n// 加载并显示一个图片1\nsp1.loadImage(\"atlas/comp/image.png\", null);\nlet sp2 = new Laya.Sprite();\nLaya.stage.addChild(sp2);\n// 加载并显示一个图片2\nsp2.loadImage(\"resources/layabox.png\", null);\nsp2.pos(200, 190);\n// 设置blendMode\nsp2.blendMode = \"lighter\";\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating and Configuring Laya.Text in TypeScript\nDESCRIPTION: This TypeScript code defines a LayaAir Script component (`NewScript`) that creates a `Laya.Text` instance within its `onAwake` method. It adds the text object to the stage (`Laya.stage.addChild`), centers it using `pos` and `pivot`, sets its dimensions (`size`), assigns text content, and enables word wrapping (`wordWrap`). This demonstrates programmatic UI element creation in LayaAir when a Text node shouldn't exist initially on the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Text/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        let txt = new Laya.Text();\n        // 添加到舞台\n        Laya.stage.addChild(txt);\n        txt.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        txt.size(500, 30); //大小\n        txt.pivot(txt.width/2, txt.height/2); //轴心点\n        txt.text = \"大家好，欢迎各位开发者使用LayaAir IDE，这里是Text的文本内容，本方法是代码创建Text\"; //文本内容\n        txt.wordWrap = true; //自动换行\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Resource Descriptions Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `getLocationAsync` function. The code snippet passes a string array containing the key 'test2' and uses the `MergeMode.Union`.  The `.then()` method processes the result, logging the retrieved resource descriptions to the console. The snippet shows retrieval of resources' description information without loading them.  It relies on the Addressables plugin.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.getLocationAsync([\"test2\"], MergeMode.Union).then((res) => {\n        console.log(res);\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Including Custom GLSL Files in LayaAir Shaders (GLSL)\nDESCRIPTION: Demonstrates how to include custom `.glsl` files located within the project's assets folder into a LayaAir `.shader` file's GLSL block. Relative paths must be used, starting with `./` even for files in the same directory.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_18\n\nLANGUAGE: GLSL\nCODE:\n```\n#include \"./abc.glsl\";\n#include \"./path/to/abc.glsl\";\n#include \"../path/abc.glsl\";\n```\n\n----------------------------------------\n\nTITLE: 优化大量文本渲染的性能示例（TypeScript）\nDESCRIPTION: 该代码示例展示了在LayaAir引擎中，通过创建多个Text对象模拟大量字符渲染的场景，并用Sprite容器结合cacheAs优化性能。初始化WebGL环境，并用循环快速添加文本对象，最后将容器添加到舞台，演示了使用cacheAs提升FPS的效果。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/rendering/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Test {\n     private text:Laya.Text;\n    constructor() {\n        Laya.init(550,400,Laya.WebGL);\n        Laya.Stat.show();\n        var textBox=new Laya.Sprite();\n\n        for(var i=0;i<10000;i++)\n        {\n            this.text=new Laya.Text();\n            this.text.text=(Math.random()*100).toFixed(0);\n            this.text.color=\"#CCCCCC\";\n            this.text.x=Math.random()*550;\n            this.text.y=Math.random()*400;\n            textBox.addChild(this.text);\n        }\n        Laya.stage.addChild(textBox);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Textures in LayaAir with TypeScript\nDESCRIPTION: This TypeScript code defines a `LoaderDemo` class that loads multiple textures from an array of URLs using `Laya.loader.load()`. It then creates a sprite and cycles through the loaded textures, displaying them in the sprite using a timer. It illustrates loading multiple resources and dynamically updating the display.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        let resArr: Array<string> = [\n            \"image/bird.jpg\",\n            \"image/cloud.png\",\n            \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\"\n        ];\n        this.loadTextures(resArr);\n    }\n\n    /** 加载多个资源 \n     * @param url 资源数组\n    */\n    loadTextures(url: Array<string>): void {\n        Laya.loader.load(url).then((res: Array<Laya.Texture>) => {\n            let sp: Laya.Sprite = new Laya.Sprite();\n            this.owner.addChild(sp);\n            let i: number = 0;\n            //每秒重画一次\n            Laya.timer.loop(1000, this, () => {\n                i == res.length && (i = 0);\n                //清除sp节点的所有绘图（不含子节点）\n                sp.graphics.clear();\n                //在sp节点上重绘纹理\n                sp.graphics.drawTexture(res[i]);\n                i++;\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Ray for Physics Detection in TypeScript\nDESCRIPTION: Creates a ray from a screen point using the camera's viewportPointToRay method, then uses rayCastAll to detect all objects that intersect with the ray. Objects are detected and visualized by adding cubes at the hit points.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//创建一个屏幕点\nlet point = new Laya.Vector2();\n//创建一个射线 Laya.Ray(射线的起点，射线的方向)\nlet ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\n//以鼠标点击的点作为原点\npoint.x = Laya.stage.mouseX;\npoint.y = Laya.stage.mouseY;\n//计算一个从屏幕空间生成的射线\n_camera.viewportPointToRay(point, ray);\n//拿到3D场景中射线碰撞的物体\n_scene3D.physicsSimulation.rayCastAll(ray,this.outs);\n//如果射线碰撞到物体\nif (this.outs.length !== 0) {\n    for (let i = 0; i < this.outs.length; i++){\n        //在射线击中的位置添加一个立方体\n        this.addBoxXYZ(this.outs[i].point.x, this.outs[i].point.y, this.outs[i].point.z );\n    }        \n}\n```\n\n----------------------------------------\n\nTITLE: 使用Laya.Byte写入数据并发送\nDESCRIPTION: 演示如何按顺序写入不同类型的数据到Laya.Byte对象中，并通过WebSocket发送。注意发送时需要传入byte.buffer而非byte对象本身。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/WebSocket/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 按顺序写入数据\nbyte.writeByte(1);\nbyte.writeInt16(20);\nbyte.writeFloat32(20.5);\nbyte.writeUTFString(\"LayaAir WebSocket\");\n\n//发送时必须传入 byte.buffer（ArrayBuffer 对象），而非直接传入 byte 对象。\nsocket.send(byte.buffer);\n```\n\n----------------------------------------\n\nTITLE: Adding Material and Texture (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to apply a texture to a 3D object (cube) in LayaAir using TypeScript. It involves creating a new material, loading a texture resource, and assigning the texture to the material's `albedoTexture` property. Finally, it applies the material to the object's `MeshRenderer`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/displayObject/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 创建材质\nlet boxMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\n//预加载纹理资源\nlet resource: string = \"resources/layabox.png\";\nLaya.loader.load(resource).then(() => {\n    //为材质加载纹理\n    let tex = Laya.Loader.getTexture2D(resource);\n    //设置贴图\n    boxMaterial.albedoTexture = tex;\n});\nboxRender.sharedMaterial = boxMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Inspector Field in TypeScript\nDESCRIPTION: Defines a custom inspector property field by registering a class with @IEditor.inspectorField, implementing resource loading on load, creating UI sprite, and setting data. Used via inspector attribute referencing its name.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.inspectorField(\"MyTestField\")\nexport class TestField extends IEditor.PropertyField {\n    @IEditor.onLoad\n    static async onLoad() {\n        await gui.UIPackage.resourceMgr.load(\"MyField.widget\");\n    }\n    \n    create() {\n        let input = gui.UIPackage.createWidgetSync(\"MyField.widget\");\n        return { ui: input };\n    }\n    \n    refresh() {\n        //设置数据到界面\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Collision Group via Code (CharacterController)\nDESCRIPTION: This code snippet demonstrates how to set the collision group of a CharacterController via code. The collision group is set to a power of 2, which represents the group ID. This allows the developer to control which objects the character can collide with.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/CharacterController/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//用代码指定xxx碰撞器所属哪个碰撞组\nxxx.collisionGroup = 1 << 3  ;// 值为2 的 3 次幂（8），可以简单理解分组ID为3，这样就更容易与IDE中的概念统一\n```\n\n----------------------------------------\n\nTITLE: Loading Subpackages with LayaAir\nDESCRIPTION: This code demonstrates the usage of `Laya.loader.loadPackage` to load subpackages in a WeChat Mini-Game.  It utilizes two `loadPackage` calls to load two different subpackages ('sub1' and 'sub2'). After loading each subpackage, the code loads a prefab from each of them, creates an instance, and adds it to the 3D scene. It also includes a `printProgress` function to display the loading progress in the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/wechat/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        //小游戏加载分包\n        Laya.loader.loadPackage(\"sub1\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n                let sp3: Laya.Sprite3D = res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub2/Sphere.lh\").then((res: any) => {\n                let sp3 = res.create();\n                this.scene3d.addChild(sp3);\n            });\n        })\n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Single Resource with Addressables.loadAssetAsync in TypeScript\nDESCRIPTION: Demonstrates how to load a single resource asynchronously using Addressables.loadAssetAsync in TypeScript. Requires the LayaAir Addressables runtime to be present in the environment. The key parameter specifies a resource alias or tag, and returns a Promise resolving to a LoadResult containing the loaded asset or null if not found. Options can customize loading behavior. Output is typically used to access resource data after loading completes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 加载资源\n * @param key 用来筛选资源的关键字\n * @param options {LoadAssetOptions} 加载资源的选项\n * @returns {Promise<LoadResult>}\n */\nstatic async loadAssetAsync(key: string, options?: LoadAssetOptions): Promise<LoadResult> ;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nonStart(): void {\n    Addressables.loadAssetAsync('test1').then((result: LoadResult) => {\n        console.log(result);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laya.timer.frameOnce in a Component (TypeScript)\nDESCRIPTION: Example demonstrating how to use Laya.timer.frameOnce within a LayaAir component's onAwake method to change an Image's alpha property to 0.5 after 60 frames.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //60帧后，图片的透明度变为0.5\n        Laya.timer.frameOnce(60, this, () => {\n            this.Image.alpha = 0.5;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering 3D Collision Groups for Mouse Events in LayaAir - TypeScript\nDESCRIPTION: This example demonstrates advanced collision filtering for raycast penetration. It shows how to assign collision groups to specific objects and filter them out of mouse event detection using Physics3DUtils. The MouseInteraction class initializes the scene, sets up collision groups via collisionGroup, and uses rayCastAll with parameters to ignore designated groups. Requires LayaAir 3D physics modules and correct group/bitmask setup on objects and raycasts.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;  \n  /** 输出射线检测碰到的全部目标对象 */\n  private _outs: Array<any> = [];\n  private _ray: Laya.Ray;\n  private point: Laya.Vector2 = new Laya.Vector2();\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码，详情参照官网3D鼠标交互示例 */\n    var meshCollider2 = layaMonkey_clone2.addComponent(PhysicsCollider);\n    var meshShape2 = new MeshColliderShape();\n    meshShape2.mesh = layaMonkey_clone2.meshFilter.sharedMesh;\n    meshCollider2.colliderShape = meshShape2;\n    //为不需要碰撞的物体的碰撞器设置碰撞组，为COLLISIONFILTERGROUP_CUSTOMFILTER2\n    meshCollider2.collisionGroup = Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;\n    \n    //射线初始化（必须初始化）\n    this._ray = new Ray(new Vecntetor3(0, 0, 0), new Vector3(0, 0, 0));\n    //侦听舞台上的鼠标事件\n    Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);    \n  }\n  \n  /** 鼠标按下时的逻辑处理 */\n  onMouseDown(): void {\n    this.point.x = Laya.stage.mouseX;\n    this.point.y = Laya.stage.mouseY;\n    //用舞台上的鼠标坐标，产生一条3D空间射线\n    this._camera.viewportPointToRay(this.point, this._ray);\n    \n    /** 过滤条件：不可碰撞的3D物体为，除了COLLISIONFILTERGROUP_CUSTOMFILTER2之外的，都可以碰撞 */\n    let canCollideWith = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER ^ Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;\n    //使用物理引擎的射线检测方法，穿透检测多个,但排除了COLLISIONFILTERGROUP_CUSTOMFILTER2\n    this._scene.physicsSimulation.rayCastAll(this._ray, this._outs, 2147483647, Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, canCollideWith);\n    if (this._outs.length > 0) {\n      for (let i = 0; i < this._outs.length; i++) {\n        console.log(\"碰撞到物体(\" + i + \"): \" + this._outs[i].collider.owner.name);\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling JS Messages on Linux using C\nDESCRIPTION: Similar to the Windows example, this C implementation initializes callbacks for synchronous and asynchronous JS message handling using conchSetHandleMessageCallback and delivers responses via conchSendHandleMessageResult. Entry point is main(), with callback lambdas detecting event names and forwarding hardcoded responses. Requires appropriate runtime headers (Exports.h) and linking against the LayaAir Linux runtime. Message parameters are C-style strings.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/platform_communication/readme.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nCONCH_EXPORT void CONCH_CDECL conchSetHandleMessageCallback(handleSyncMessageCallback handleSyncMessageCb,\n                                                            handleAsyncMessageCallback handleAsyncMessageCb);\nCONCH_EXPORT void CONCH_CDECL conchSendHandleMessageResult(const char *eventName, const char *result);\n```\n\nLANGUAGE: C\nCODE:\n```\nint main(int argc, char *argv[])\n{\n    conchSetHandleMessageCallback(\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"syncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"sync message from platform\");\n            }\n        },\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"asyncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"async message from platform\");\n            }\n        });\n    return conchMain(argc, argv);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All Resources Through DCC\nDESCRIPTION: Code example showing how to update all resources at once through DCC to avoid downloading during runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet dcc = new DCCClient('http://localhost:7788/' );\ndcc.pathMapToDCC= 'http://localhost:8899/';\nlet initok = await dcc.init('http://localhost:7788/version.3.0.0.json',null);\nawait dcc.updateAll((p)=>{/*进度提示*/})\n```\n\n----------------------------------------\n\nTITLE: Building Linux Project - Bash\nDESCRIPTION: This snippet provides the command to compile the LayaAir Linux project.  It assumes that the project directory is the current working directory, and the `build.sh` script is present. Executing this script triggers the compilation process. The result is an executable file.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Linux/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Handling 3D Mouse Event Raycasting in LayaAir - TypeScript\nDESCRIPTION: This snippet shows how to set up and process 3D mouse events using raycasting in LayaAir. Dependencies include LayaAir's 3D engine and physics modules. The MouseInteraction class initializes a 3D scene, camera, a ray instance, and listens for mouse events on the stage. On mouse down, it calculates screen coordinates, creates a ray, performs single-object raycast via physicsSimulation.rayCast, and logs the first collided object's name if a hit occurs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;  \n  /** 输出射线检测碰到的目标对象 */\n  private _outHitResult: Laya.HitResult = new Laya.HitResult();\n  private _ray: Laya.Ray;\n  private point: Laya.Vector2 = new Laya.Vector2();\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码 */\n    \n    //射线初始化（必须初始化）\n    this._ray = new Ray(new Vecntetor3(0, 0, 0), new Vector3(0, 0, 0));\n    //侦听舞台上的鼠标事件\n    Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);    \n  }\n  \n  /** 鼠标按下时的逻辑处理 */\n  onMouseDown(): void {\n    this.point.x = Laya.stage.mouseX;\n    this.point.y = Laya.stage.mouseY;\n    //用舞台上的鼠标坐标，产生一条3D空间射线\n    this._camera.viewportPointToRay(this.point, this._ray);\n    //使用物理引擎的射线检测方法，检测是否发生了碰撞\n    this._scene.physicsSimulation.rayCast(this._ray, this._outHitResult);\n    //根据检测结果的状态进行判断，如果碰撞成功，处理碰撞后的逻辑。\n    if (this._outHitResult.succeeded) {\n      //输出碰倒的首个3D物体对象名字\n      console.log(\"碰撞到物体: \" + this._outHitResult.collider.owner.name);\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Showing a Dialog in TypeScript\nDESCRIPTION: Defines a dialog class extending IEditor.Dialog, setting its content via widget loading, and demonstrates how to instantiate and display it in the editor, supporting singleton pattern.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MyDialog extends IEditor.Dialog {\n    async create() {\n        this.contentPane = await gui.UIPackage.createWidget(\"MyDialog.widget\");\n    }\n    \n    onShown() {\n    }\n    \n    onHide() {\n    }\n}\n\nimport { MyDialog } from \"./MyDialog\";\n\nEditor.showDialog(MyDialog, null);\n```\n\n----------------------------------------\n\nTITLE: Raycasting from to and Handling Results in LayaAir\nDESCRIPTION: This code demonstrates raycasting from a start to an end point using `raycastFromTo` to detect the first collision. It also illustrates how to modify the material color of the collided object based on the collision result.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n……省略若干代码\n*/\n/*进行射线检测,检测所有碰撞的物体\n//_scene3D.physicsSimulation.raycastAllFromTo(this.from, this.to, this.outs);\n//检测所有物体的射线使用与上个示例类似\n*/\n\n//进行射线检测,检测第一个碰撞物体\n_scene3D.physicsSimulation.raycastFromTo(this.from, this.to, this.out);\n//将射线碰撞到的物体设置为红色\n((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(0.0, 1.0, 0.0, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Setting Float Parameter - Typescript\nDESCRIPTION: This code snippet shows how to set the value of a Float parameter in the Animator component. By setting the \"Float\" parameter to 2, it can trigger state transitions in the animation state machine that are based on the value of this parameter. The animator's `setParamsNumber` method is used to achieve this.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//通过设置“Float”参数的值，来满足切换状态的条件\nthis.animator.setParamsNumber( \"Float\" , 2 );\n```\n\n----------------------------------------\n\nTITLE: Initializing Geolocation and Baidu Map in TypeScript\nDESCRIPTION: This TypeScript snippet initializes the LayaAir engine, enables high accuracy for geolocation, and sets up a watcher to track the device's position. It also binds the scope of the `convertToBaiduCoord` function, ensuring it maintains the correct `this` context when called as a callback.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    constructor() {\n        Laya.init(1, 1);\n\n        this.init();\n\n        // 使用高精度位置\n        Laya.Geolocation.enableHighAccuracy = true;\n        Laya.Geolocation.watchPosition(Laya.Handler.create(this, this.updatePosition), Laya.Handler.create(this, this.onError));\n\n        // 绑定convertToBaiduCoord作用域\n        this.convertToBaiduCoord = this.convertToBaiduCoord.bind(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Custom LayaAir Script with Property Exposure and Event Handling (TypeScript)\nDESCRIPTION: Provides a full example of a `Main` script extending `Laya.Script`. It imports necessary LayaAir classes, uses `@regClass` for registration, exposes multiple `Button` and `Sprite3D` properties using `@property`, initializes particle objects and sets up `MOUSE_DOWN` event listeners for buttons within the `onStart` lifecycle method, and includes a helper `hideAll` function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/Script/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\nimport { Particle3D } from \"./Particle3D\";\nimport Sprite3D = Laya.Sprite3D;\nimport Button = Laya.Button;\nimport Event = Laya.Event;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property()\n    private btn_1: Button;  \n    @property()\n    private p_1 : Sprite3D;           \n    @property()\n    private btn_2: Button;    \n    @property()\n    private p_2 : Sprite3D;      \n    @property()\n    private btn_3: Button;  \n    @property()\n    private p_3 : Sprite3D;      \n    @property()\n    private btn_4: Button;    \n    @property()\n    private p_4 : Sprite3D;       \n    @property()\n    private btn_5: Button;    \n    @property()\n    private p_5 : Sprite3D;     \n    @property()\n    private btn_6: Button;    \n    @property()\n    private p_6 : Sprite3D;      \n\n    private particleList: Array<Sprite3D> = [];\n\n    onStart() {\n        console.log(\"Game start\");\n\n        this.particleList.push(this.p_1);\n        this.particleList.push(this.p_2);\n        this.particleList.push(this.p_3);\n        this.particleList.push(this.p_4);\n        this.particleList.push(this.p_5);\n        this.particleList.push(this.p_6);\n        \n        this.btn_1.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_1.active = true;\n        });\n        this.btn_2.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_2.active = true;\n        });\n        this.btn_3.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_3.active = true;\n        });\n        this.btn_4.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_4.active = true;\n        });\n        this.btn_5.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_5.active = true;\n        });    \n        this.btn_6.on(Event.MOUSE_DOWN, this, () => {\n            this.hideAll();\n            this.p_6.active = true;\n        });                                       \n    }\n\n    hideAll(): void {\n        this.particleList.forEach(element => {\n            (element as Sprite3D).active = false;\n        });\n    }\n\n    mouseDown(e: Event): void {\n        this.hideAll();           \n    }\n \n}\n```\n\n----------------------------------------\n\nTITLE: Checking Port Status on HarmonyOS NEXT via Shell\nDESCRIPTION: This snippet uses the `hdc shell` command to check if port 5959 is open and in the `LISTEN` state on the HarmonyOS NEXT device. This confirms that the WebSocket server for debugging is running and accepting connections.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Harmony/debug/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhdc shell \"netstat -anp | grep 5959\"\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding Properties in IDE - TypeScript\nDESCRIPTION: This code demonstrates how to control whether a component property is displayed in the LayaAir IDE using the `private` option in the `@property()` decorator.  It shows how to display properties with leading underscores and how to hide properties without underscores.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@property({ type: \"number\", private: false })\n_velocity: number = 0;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number , private: true })\n    radian: number = 0;  //private设置为true之后，radian不会出现在IDE的属性面板上，只是用来存储输入的弧度\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) //这里设置serializable为false，所以degree不会被保存到场景文件中\n     get degree() {\n        return this.radian * (180 / Math.PI);//由于自己没有序列化保存，需要把radian存下来的弧度反算回角度，用于IDE属性面板显示\n    }\n    set degree(value: number) {\n        this.radian = value * (Math.PI / 180);//把输入的角度值，转成弧度给radian存起来。\n    }\n    \n    onStart() {\n        console.log(this.radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Importing and Utilizing Native Library\nDESCRIPTION: This snippet demonstrates how to import and instantiate the native library (DLL) within a TypeScript file. It uses `Laya.importNative` to load the DLL and cast it to the defined interface, providing access to the native functions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const testLib: ITestLib = Laya.importNative(\"LayaExt.dll\");\n```\n\n----------------------------------------\n\nTITLE: Controlling Mouse Event Reception with mouseEnabled in LayaAir\nDESCRIPTION: Shows how to control whether an object can receive mouse events by setting the mouseEnabled property.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//true允许接收鼠标事件,false禁止接收鼠标事件\nthis.xxx.mouseEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Loading Compressed Texture for Image Component in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to dynamically load and apply a (potentially compressed) texture to a LayaAir UI Image component using code. Dependencies: requires LayaAir 3.x runtime and asset build pipeline as described in previous sections. No manual platform detection is needed, as the engine resolves the appropriate format based on exported metadata and runtime environment. The snippet sets image position and assigns a skin path to trigger asset loading, then displays a performance panel. Inputs: exported resource file path. Outputs: correct texture displayed at runtime, format auto-selected by platform.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/textureCompress/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    onAwake(): void {\n        let img = new Laya.Image;\n        Laya.stage.addChild(img);\n        img.pos(500,100);\n        img.skin = \"resources/layabox.png\"; //纹理压缩的图片的路径\n    }\n\n    onStart() {\n        Laya.Stat.show(0, 0); //性能面板\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Camera in LayaAir Using TypeScript\nDESCRIPTION: This TypeScript class demonstrates how to dynamically create and initialize a 2D camera within a LayaAir 2D scene at runtime. It creates a 2D area node, sets its position and size, then adds a Camera2D object as a child of that area. Key camera properties are set including designating it as the main camera, enabling smooth position movement, and adjusting the movement speed. The script assumes it is attached to a scene node and runs its initialization after all nodes and components have been created, during the onAwake lifecycle method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Area2D/Camera2D/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\n/**\n * 创建2D相机的脚本，开发者可将脚本添加到2D场景中查看效果\n */\nexport class Script extends Laya.Script {\n\n    declare owner : Laya.Scene;\n\n    area2D: Laya.Area2D;\n    camera2D: Laya.Camera2D;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.createCamera2D();\n    }\n\n    createCamera2D() {\n        //2D相机必须添加在2D区域节点下，因此需要先创建一个2D区域节点\n        this.area2D = new Laya.Area2D();\n        //设置2D区域节点的位置和大小\n        this.area2D.pos(100, 100);\n        this.area2D.size(200, 200);\n        this.owner.addChild(this.area2D);\n\n        //创建2D相机\n        this.camera2D = this.area2D.addChild(new Laya.Camera2D);\n\n        //开发者可以根据需求自行设置相机的各项属性，例如：\n        //将相机设为主相机\n        this.camera2D.isMain = true;\n        //启用平滑位移\n        this.camera2D.positionSmooth = true;\n        //设置平滑移动的速度\n        this.camera2D.positionSpeed = 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shortcut Operations\nDESCRIPTION: This section explains the available shortcut operations for generating nodes quickly, including float, Vector2, Vector3, Vector4, If, bool, and sampler2D nodes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Using Custom Interpolation Functions in TypeScript\nDESCRIPTION: Shows how to use built-in special interpolation functions to create effects like shaking, color channel separation, and path following. These functions extend the basic tween capabilities for more complex animations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Tween/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建缓动\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 0)\n    //通过插值函数实现震动效果\n    .interp(Laya.Tween.shake, 10);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建缓动\nLaya.Tween.create(aImage).duration(1000).go(\"color\", \"#000000\", \"#FF0000\")\n    //通过插值函数分离颜色通道\n    .interp(Laya.Tween.seperateChannel);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建一条路径\nlet path = new Laya.CurvePath();\npath.create(\n    //设置路径上的点\n    Laya.PathPoint.create(0, 0, 0),\n    Laya.PathPoint.create(-6, 1, 1),\n    Laya.PathPoint.create(3, 3, 3),\n);\n\n//创建缓动\nLaya.Tween.create(aCube.transform, aCube)\n    .duration(2000)\n    .to(\"localPosition\", Laya.Vector3.ZERO)\n    //设置插值函数，让物体沿曲线路径行动\n    .interp(Laya.Tween.useCurvePath, path)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Assets Async Function in TypeScript\nDESCRIPTION: This snippet showcases how to instantiate a resource (typically a prefab) asynchronously using the `instantiateAsync` function. This method returns a node for a prefab, which is the first resource with a matching key found. The `options` parameter allows for further control over the instantiation process. The output is a Promise that resolves to a `LoadResult` containing the instantiated object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 创建资源的实例\n * @description 在 {@link LoadResult.data} 中返回创建的实例，仅当加载的资源是一个Prefab时有效\n * @param key 用来筛选资源的关键字\n * @param options\n * @return {Promise<LoadResult>}\n */\nstatic async instantiateAsync(key: string, options?: InstantiateOptions): Promise<LoadResult> ;\n```\n\n----------------------------------------\n\nTITLE: Utility Tool Class for Converting 3D Models to Pixel Lines in LayaAir\nDESCRIPTION: A Tool class containing a linearModel method to convert mesh data from a Sprite3D object into pixel lines. It processes each triangle in the mesh and adds corresponding lines to a PixelLineSprite3D object with specified color.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/PixelLine/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//Tool工具类\nexport class Tool {\n    private static transVertex0: Laya.Vector3 = new Laya.Vector3();\n    private static transVertex1: Laya.Vector3 = new Laya.Vector3();\n    private static transVertex2: Laya.Vector3 = new Laya.Vector3();\n    private static corners: Laya.Vector3[] = [];\n    static linearModel(sprite3D: Laya.Sprite3D, lineSprite3D: Laya.PixelLineSprite3D, color: Laya.Color): void {\n        if (sprite3D.getComponent(Laya.MeshFilter)) {\n            var mesh: Laya.Mesh = sprite3D.getComponent(Laya.MeshFilter).sharedMesh;\n            var positions: Array<Laya.Vector3> = [];\n            mesh.getPositions(positions);\n            var indices = mesh.getSubMesh(0).getIndices();\n\n            for (var i: number = 0; i < indices.length; i += 3) {\n                var vertex0: Laya.Vector3 = positions[indices[i]];\n                var vertex1: Laya.Vector3 = positions[indices[i + 1]];\n                var vertex2: Laya.Vector3 = positions[indices[i + 2]];\n                Laya.Vector3.transformCoordinate(vertex0, sprite3D.transform.worldMatrix, this.transVertex0);\n                Laya.Vector3.transformCoordinate(vertex1, sprite3D.transform.worldMatrix, this.transVertex1);\n                Laya.Vector3.transformCoordinate(vertex2, sprite3D.transform.worldMatrix, this.transVertex2);\n                lineSprite3D.addLine(this.transVertex0, this.transVertex1, color, color);\n                lineSprite3D.addLine(this.transVertex1, this.transVertex2, color, color);\n                lineSprite3D.addLine(this.transVertex2, this.transVertex0, color, color);\n            }\n        }\n\n        for (var i: number = 0, n: number = sprite3D.numChildren; i < n; i++)\n            Tool.linearModel((<Laya.Sprite3D>sprite3D.getChildAt(i)), lineSprite3D, color);\n    }\n\n    constructor() {\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: 设置碰撞组\nDESCRIPTION: 使用代码设置碰撞器所属的碰撞组。 碰撞组用于定义碰撞检测的范围，可以指定刚体与其他组发生碰撞。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/Rigidbody3D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//用代码指定xxx碰撞器所属哪个碰撞组\nxxx.collisionGroup = 1 << 3  ;// 值为2 的 3 次幂（8），可以简单理解分组ID为3，这样就更容易与IDE中的概念统一\n```\n\n----------------------------------------\n\nTITLE: Dynamic Bullet Creation Example in LayaAir\nDESCRIPTION: Example of creating bullets on-demand using a creation function. Demonstrates how to retrieve an object from a pool with a fallback creation method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet bullet = Laya.Pool.getItemByCreateFun(\"Bullet\", function()\n{\n\t// 创建一个子弹\n    let bullet = new Bullet();\n    // 拿到子弹的对象池\n    var pool = Laya.Pool.getPoolBySign(\"Bullet\");\n    // 把子弹放入对象池，也可以不放入对象池，根据开发者需求\n    pool.push( bullet );\n    // 返回子弹对象\n    return bullet;\n});\n```\n\n----------------------------------------\n\nTITLE: Applying GlowFilter to Laya.Image in TypeScript\nDESCRIPTION: This snippet creates a GlowFilter with specific color, blur size, and offset values, then applies it to a Laya.Image component to generate an outer glow or shadow effect, commonly used for highlighting images in TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Filter/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Image })\n    public img: Laya.Image;\n\n    onAwake(): void {\n        let glowFilter: Laya.GlowFilter = new Laya.GlowFilter(\"#ffff00\", 10, 0, 0);\n        this.img.filters = [glowFilter];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 手动切换Android项目的单机版与网络版 (Java)\nDESCRIPTION: 在导出的Android Studio工程中，通过修改MainActivity.java文件中的`game_plugin_set_option`方法参数来切换应用的运行模式。将`localize`选项设置为`\"true\"`以启用单机版，设置为`\"false\"`启用网络版。启用网络版时，还需要设置`gameUrl`选项指向正确的资源服务器地址。修改后可能需要使用layadcc重新生成缓存资源。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Android/readme.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// 搜索 mPlugin.game_plugin_set_option(\"localize\",\"false\");\n\n// 单机版设置\nmPlugin.game_plugin_set_option(\"localize\",\"true\");\n\n// 网络版设置\nmPlugin.game_plugin_set_option(\"localize\",\"false\");\nmPlugin.game_plugin_set_option(\"gameUrl\", \"http://你的地址/index.js\");\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners of a Specific Event Type\nDESCRIPTION: Shows how to use the offAll method to remove all listeners of a specific event type from an object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n//删除xxx对象下click事件类型的全部侦听器\nthis.xxx.offAll(Laya.Event.CLICK);\n```\n\n----------------------------------------\n\nTITLE: Uploading Alipay Mini Game Build using minidev\nDESCRIPTION: Uploads the built Alipay Mini Game project from the current directory to the Alipay developer platform. Requires minidev version >= 1.4.2. Replace '2021xxx' with the AppID and '0.0.1' with the desired version number. The `--game` flag specifies it's a game project. After uploading, the version can be managed via the Alipay Open Platform.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/alipaygame/readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nminidev upload -a 2021xxx -v 0.0.1 --game\n```\n\n----------------------------------------\n\nTITLE: Creating CheckBox Programmatically (TypeScript)\nDESCRIPTION: This TypeScript script demonstrates creating multiple CheckBox components dynamically through code. It first loads the required image skins using `Laya.loader.load`. Once loaded, it iterates to create CheckBox instances, sets their properties (skin, position, label colors, size, font, padding), adds them to the owner node, and attaches a 'change' event listener to update the label based on the selection state.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/CheckBox/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_CheckBox extends Laya.Script {\n\n    private COL_AMOUNT: number = 2;\n    private ROW_AMOUNT: number = 3;\n    private HORIZONTAL_SPACING: number = 200;\n    private VERTICAL_SPACING: number = 100;\n    private X_OFFSET: number = 100;\n    private Y_OFFSET: number = 50;\n\n    // 图片资源来自“引擎API使用示例”\n    private skins: any[] = [\n        \"resources/res/ui/checkbox (1).png\",\n        \"resources/res/ui/checkbox (2).png\",\n        \"resources/res/ui/checkbox (3).png\",\n        \"resources/res/ui/checkbox (4).png\",\n        \"resources/res/ui/checkbox (5).png\",\n        \"resources/res/ui/checkbox (6).png\"\n    ];\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        Laya.loader.load(this.skins).then(() => {\n            this.onCheckBoxSkinLoaded();\n        });\n    }\n\n    private onCheckBoxSkinLoaded(e: any = null): void {\n        let cb: Laya.CheckBox;\n        for (let i: number = 0; i < this.COL_AMOUNT; ++i) {\n            for (let j: number = 0; j < this.ROW_AMOUNT; ++j) {\n                cb = this.createCheckBox(this.skins[i * this.ROW_AMOUNT + j]);\n                cb.selected = true;\n\n                cb.x = this.HORIZONTAL_SPACING * i + this.X_OFFSET;\n                cb.y += this.VERTICAL_SPACING * j + this.Y_OFFSET;\n\n                // 给左边的三个CheckBox添加事件使其能够切换标签\n                if (i == 0) {\n                    cb.y += 20;\n                    cb.on(\"change\", this, this.updateLabel, [cb]);\n                    this.updateLabel(cb);\n                }\n            }\n        }\n    }\n\n    private createCheckBox(skin: string): Laya.CheckBox {\n        let cb: Laya.CheckBox = new Laya.CheckBox(skin);\n        this.owner.addChild(cb);\n\n        cb.labelColors = \"white\";\n        cb.labelSize = 20;\n        cb.labelFont = \"Microsoft YaHei\";\n        cb.labelPadding = \"3,0,0,5\";\n\n        return cb;\n    }\n\n    private updateLabel(checkBox: Laya.CheckBox): void {\n        checkBox.label = checkBox.selected ? \"已选中\" : \"未选中\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DirectionLight in LayaAir with TypeScript\nDESCRIPTION: This snippet shows how to create and configure a DirectionLight (parallel light) using LayaAir's TypeScript API. Dependencies include the LayaAir 3D engine and an accessible scene (this.scene). It adds a Sprite3D, attaches a DirectionLightCom, sets the color, and adjusts the light's worldMatrix to control its forward direction. Inputs: none; Outputs: a DirectionLight added to the scene. Constraints: the direction vector values must be within -1 to 1 for each axis.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Light/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//创建方向光\nlet directlightSprite = new Laya.Sprite3D();\nlet dircom = directlightSprite.addComponent(Laya.DirectionLightCom);\nthis.scene.addChild(directlightSprite);\n//方向光的颜色\ndircom.color.setValue(1.0, 0.5, 0.0, 1);\n//设置平行光的方向\nvar mat: Laya.Matrix4x4 = directlightSprite.transform.worldMatrix;\nmat.setForward(new Laya.Vector3(-1.0, -1.0, -1.0));\ndirectlightSprite.transform.worldMatrix = mat;\n```\n\n----------------------------------------\n\nTITLE: Creating a Cone Shape Rigidbody Collider in LayaAir 3D Using TypeScript\nDESCRIPTION: This snippet illustrates how to programmatically create a 3D cone model, add a Rigidbody3D component, and assign a ConeColliderShape to it in LayaAir. It initializes mesh, material, position, and collision shape settings to construct a dynamic cone rigidbody collider with randomized dimensions. Dependencies include LayaAir engine, TypeScript environment, and 3D scene setup. Inputs are randomized radius and height values; output is a fully configured cone-shaped dynamic collider added to the scene graph.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n   /*……省略若干代码……*/\n\n    /**增加圆锥形刚体碰撞器 */\n    private addCone(): void {\n        //生成随机值半径和高\n        let raidius = Math.random() * 0.2 + 0.2;\n        let height = Math.random() * 0.5 + 0.8;\n        //创建圆锥形3D模型节点对象\n        let cone = new Laya.Sprite3D;\n        let coneMesh = cone.addComponent(Laya.MeshFilter);\n        let coneRender = cone.addComponent(Laya.MeshRenderer);\n        // 创建网格\n        coneMesh.sharedMesh = Laya.PrimitiveMesh.createCone(0.25, 0.75);\n        // 创建材质\n        let coneMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\n        coneRender.sharedMaterial = coneMaterial;\n        //把圆锥形3D节点对象添加到3D场景节点下\n        this.scene.addChild(cone);\n        //设置随机位置\n        this.tmpVector.setValue(Math.random() * 6 - 2, 6, Math.random() * 6 - 2);\n        cone.transform.position = this.tmpVector;\n        //为圆锥形3D节点对象创建刚体碰撞器\n        let _rigidBody = <Laya.Rigidbody3D>(cone.addComponent(Laya.Rigidbody3D));\n        //创建圆锥形碰撞器形状（使用节点对象的值，保持一致性）\n        let coneShape = new Laya.ConeColliderShape(raidius, height);\n        //为刚体碰撞器添加碰撞器形状\n        _rigidBody.colliderShape = coneShape;\n    }\n    \n    /*……省略若干代码……*/\n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.frameLoop Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.frameLoop method. This method schedules a function to execute repeatedly every specified number of frames.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 定时重复执行(基于帧率)。\n     * @param\tdelay\t间隔几帧(单位为帧)。\n     * @param\tcaller\t执行域(this)。\n     * @param\tmethod\t定时器回调函数。\n     * @param\targs\t回调参数。\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n     */\n    frameLoop(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\n        this._create(true, true, delay, caller, method, args, coverBefore);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Rigidbody3D Trigger Property in LayaAir 3D Physics with TypeScript\nDESCRIPTION: This snippet demonstrates how to enable and disable the trigger property on Rigidbody3D components for 3D objects in LayaAir using TypeScript. 'isTrigger' determines whether the Rigidbody3D acts as a trigger (no physical collision response but activates collision lifecycle events) or a physics collider (with physical feedback). Dependencies include LayaAir 3D engine and access to Rigidbody3D components from scene objects. Inputs are the game objects' Rigidbody3D components, and outputs are the updated trigger states. It is essential that one Rigidbody3D is set as a trigger (isTrigger = true) while another is non-trigger (isTrigger = false) to observe appropriate collision behaviors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*…≡省略若干代码…*/\n//获取物理刚体组件\nthis.rigidbody1 = this.cube1.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\nthis.rigidbody2 = this.cube2.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n\n//设置rigidbody1为触发器,取消物理反馈\nthis.rigidbody1.isTrigger = true;\nthis.rigidbody2.isTrigger = false;\n/*…≡省略若干代码…*/\n```\n\n----------------------------------------\n\nTITLE: Character Movement Loop in TypeScript\nDESCRIPTION: Sets up a timer loop ('loopfun') that executes every 40ms. Inside the loop, it checks if there are points left in the calculated path ('resPath'). If so, it takes the next world coordinate (x, z) from 'resPath', gets the corresponding terrain height using 'terrainSprite.getHeight', makes the character look towards the target position, and tweens the character's position smoothly to the new location.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n//开启定时重复执行\nLaya.timer.loop(40, this, this.loopfun);\n\nprivate loopfun(): void {\n\t//resPath，角色需要移动的每个世界坐标位置数组\n    if (this.resPath && this.index < this.resPathLength) {\n        //AStar寻路位置\n        this._position.x = this.resPath[this.index].x;\n        this._position.z = this.resPath[this.index++].y;\n        //HeightMap获取高度数据\n        this._position.y = this.terrainSprite.getHeight(this._position.x, this._position.z);\n        if (isNaN(this._position.y)) {\n            this._position.y = this.moveSprite3D.transform.position.y;\n        }\n\n        this._tarPosition.x = this._position.x;\n        this._tarPosition.z = this._position.z;\n        this._tarPosition.y = this.moveSprite3D.transform.position.y;\n\n        //调整方向\n        this.layaMonkey.transform.lookAt(this._tarPosition, this._upVector3, false);\n        //因为资源规格，这里需要旋转180度\n        this.layaMonkey.transform.rotate(this._rotation2, false, false);\n        //调整位置\n        Tween.to(this._finalPosition, { x: this._position.x, y: this._position.y, z: this._position.z }, 40);\n        this.moveSprite3D.transform.position = this._finalPosition;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Properties (TypeScript)\nDESCRIPTION: This code snippet shows how to enable shadow casting for a cube and shadow receiving for a plane in LayaAir using TypeScript.  It sets the `castShadow` property of the `MeshRenderer` for the cube and the `receiveShadow` property for the plane, enabling them to respectively cast and receive shadows in the scene.  Requires a directional light with shadows enabled.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/displayObject/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//立方体产生阴影\nboxRender.castShadow = true;\n//平面接收阴影\nplaneRender.receiveShadow = true;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Map Container Size on Window Resize\nDESCRIPTION: Resizes the map container to fill the window, accounting for device pixel ratio. This function is called on initialization and window resize events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprivate refit(): void {\n  this.mapDiv.style.width = Laya.Browser.width / Laya.Browser.pixelRatio + \"px\";\n  this.mapDiv.style.height = Laya.Browser.height / Laya.Browser.pixelRatio + \"px\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite3D with Mesh and Material (TypeScript)\nDESCRIPTION: This code creates various 3D shapes (cube, sphere, cylinder, capsule, cone, plane) as Sprite3D objects in a LayaAir scene. Each shape is constructed using `MeshFilter` and `MeshRenderer` components, along with a basic material. The objects are then positioned and added to the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/displayObject/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* 立方体 */\nlet box = new Laya.Sprite3D;\nlet boxMesh = box.addComponent(Laya.MeshFilter);\nlet boxRender = box.addComponent(Laya.MeshRenderer);\n// 创建网格\nboxMesh.sharedMesh = Laya.PrimitiveMesh.createBox(0.5, 0.5, 0.5);\n// 创建材质\nlet boxMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\nboxRender.sharedMaterial = boxMaterial;\n// 添加到场景\nthis.scene.addChild(box);\n// 设置位置\nbox.transform.position = new Laya.Vector3(2.0, 0.25, 0.6);\nbox.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);\n\n\n/* 球体 */\nlet sphere = new Laya.Sprite3D;\nlet sphereMesh = sphere.addComponent(Laya.MeshFilter);\nlet sphereRender = sphere.addComponent(Laya.MeshRenderer);\n// 创建网格\nsphereMesh.sharedMesh = Laya.PrimitiveMesh.createSphere(0.25, 20, 20);\n// 创建材质\nlet sphereMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\nsphereRender.sharedMaterial = sphereMaterial;\n// 添加到场景\nthis.scene.addChild(sphere);\n// 设置位置\nsphere.transform.position = new Laya.Vector3(1.0, 0.25, 0.6);\n\n\n/* 圆柱体 */\nlet cylinder = new Laya.Sprite3D;\nlet cylinderMesh = cylinder.addComponent(Laya.MeshFilter);\nlet cylinderRender = cylinder.addComponent(Laya.MeshRenderer);\n// 创建网格\ncylinderMesh.sharedMesh = Laya.PrimitiveMesh.createCylinder(0.25, 1, 20);\n// 创建材质\nlet cylinderMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\ncylinderRender.sharedMaterial = cylinderMaterial;\n// 添加到场景\nthis.scene.addChild(cylinder);\n// 设置位置\ncylinder.transform.position = new Laya.Vector3(0, 0.5, 0.6);\n\n\n/* 胶囊体 */\nlet capsule = new Laya.Sprite3D;\nlet capsuleMesh = capsule.addComponent(Laya.MeshFilter);\nlet capsuleRender = capsule.addComponent(Laya.MeshRenderer);\n// 创建网格\ncapsuleMesh.sharedMesh = Laya.PrimitiveMesh.createCapsule(0.25, 1, 10, 20);\n// 创建材质\nlet capsuleMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\ncapsuleRender.sharedMaterial = capsuleMaterial;\n// 添加到场景\nthis.scene.addChild(capsule);\n// 设置位置\ncapsule.transform.position = new Laya.Vector3(-1.0, 0.5, 0.6);\n\n\n/* 圆锥体 */\nlet cone = new Laya.Sprite3D;\nlet coneMesh = cone.addComponent(Laya.MeshFilter);\nlet coneRender = cone.addComponent(Laya.MeshRenderer);\n// 创建网格\nconeMesh.sharedMesh = Laya.PrimitiveMesh.createCone(0.25, 0.75);\n// 创建材质\nlet coneMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\nconeRender.sharedMaterial = coneMaterial;\n// 添加到场景\nthis.scene.addChild(cone);\n// 设置位置\ncone.transform.position = new Laya.Vector3(-2.0, 0.375, 0.6);\n\n\n/* 平面 */\nlet plane = new Laya.Sprite3D;\nlet planeMesh = plane.addComponent(Laya.MeshFilter);\nlet planeRender = plane.addComponent(Laya.MeshRenderer);\n// 创建网格\nplaneMesh.sharedMesh = Laya.PrimitiveMesh.createPlane(6, 6, 10, 10);\n// 创建材质\nlet planeMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\nplaneRender.sharedMaterial = planeMaterial;\n// 添加到场景\nthis.scene.addChild(plane);\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Code from Native Code in iOS Objective-C\nDESCRIPTION: Illustrates how to execute JavaScript code strings directly from native iOS Objective-C using the LayaNative runtime environment. It calls the `runJS:` method on the iOS Conch runtime singleton with a JavaScript alert command. This enables native iOS code to trigger JavaScript execution asynchronously within the embedded web context.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/Secondary_Development/readme.md#_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n  [[conchRuntime GetIOSConchRuntime] runJS:@\"alert('hello')\"];\n```\n\n----------------------------------------\n\nTITLE: Configuring npm scripts for Protobuf code generation\nDESCRIPTION: JSON configuration for npm scripts that generate JavaScript and TypeScript declaration files from .proto files using pbjs and pbts commands.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"scripts\": {\n    \"pbjs\": \"pbjs -t static-module -w commonjs -o ./src/libs/protobuf/protobuf.js ./src/libs/protobuf/protobuf.proto\",\n    \"pbts\": \"pbts -o ./src/libs/protobuf/protobuf.d.ts ./src/libs/protobuf/protobuf.js\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Playing HLS Streaming Video with Plyr and hls.js in LayaAir Using TypeScript\nDESCRIPTION: This TypeScript class initializes the LayaAir engine with zero canvas size and integrates the Plyr video player with hls.js to enable playing an HLS (.m3u8) streaming video inside a web page. The code obtains references to the Hls and plyr libraries from the browser window, selects a video element with id 'player', and if HLS is supported, loads the video source and attaches it to the video element. Upon manifest parsing, playback starts automatically. Finally, Plyr is configured on the video element to provide controls and styling. Inputs include the video URL string and the containing HTML video element. The output is a streamed video playback within the page. Dependencies include Plyr CSS/JS, hls.js scripts being preloaded in the HTML environment. This approach leverages HTML5 video capabilities combined with JavaScript libraries to achieve adaptive streaming in LayaAir projects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass LayaUISample {\n    constructor() {\n        //初始化引擎\n        Laya.init(0,0);\n        var Hls:any = Laya.Browser.window.Hls;//获取对Hls的引用。\n        var plyr:any = Laya.Browser.window.plyr;//获取对plyr的引用\n        //获取video对象，就是页面上命名为“player”的标签\n        var video:any = Laya.Browser.document.querySelector('#player');\n        if(Hls.isSupported()){\n            var hls:any = new Hls();\n            //加载m3u8源\n            hls.loadSource('http://content.jwplatform.com/manifests/vM7nH0Kl.m3u8');\n            hls.attachMedia(video);\n            hls.on(Hls.Events.MANIFEST_PARSED,function():void{\n                    video.play();\n            });\n        }\n        plyr.setup(video);\n    }\n}\nnew LayaUISample;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring PointLight in LayaAir with TypeScript\nDESCRIPTION: This code creates a point light in a 3D scene, sets its color to orange, configures its range, and positions it in the scene. Point lights emit light in all directions and are suitable for simulating light sources like bulbs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Light/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建点光源\nlet pointLight = new Laya.Sprite3D();\nlet pointCom = pointLight.addComponent(Laya.PointLightCom);\nthis.scene.addChild(pointLight);\n//点光源的颜色\npointCom.color = new Laya.Color(1.0, 0.5, 0.0, 1);\n//设置点光源的范围\npointCom.range = 3.0;\npointLight.transform.position = new Laya.Vector3(0.0, 1, 0.0);\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of a 3D Sprite3D Node with Particle System in LayaAir TypeScript\nDESCRIPTION: This snippet exposes a 3D node property as Laya.Sprite3D and modifies its local position and the speed of its particle system obtained via the ShurikenParticleRenderer component. It relies on the LayaAir engine's component system and assumes the node has the relevant particle renderer attached. Input is the 3D Particle node dragged into the property, and output includes position change and increased particle simulation speed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/componentProperties/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property( { type :Laya.Sprite3D } ) //节点类型\n    public p3d: Laya.Sprite3D;\n\n    onAwake(): void {\n\n        this.p3d.transform.localPosition = new Laya.Vector3(0,5,5);\n        let p3dRenderer = this.p3d.getComponent(Laya.ShurikenParticleRenderer);\n        p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: Add Component - TypeScript\nDESCRIPTION: Adds a Rigidbody3D component to a Sprite3D and configures its properties, including collider shape and gravity. Requires a Sprite3D instance, BoxColliderShape, and enabling physics modules in project settings.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n//添加Rigidbody3D组件\nlet rigidBody = this.layaMonkeyParent.addComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n//创建盒子形状碰撞器\nvar boxShape = new Laya.BoxColliderShape(1, 1, 1);\n//设置盒子的碰撞形状\nrigidBody.colliderShape = boxShape; \n//使用重力\nrigidBody.overrideGravity = true;\n//重力为向下-10\nrigidBody.gravity = new Laya.Vector3(0,-10,0);\n```\n\n----------------------------------------\n\nTITLE: Loading FBX Resource with Addressables in LayaAir (TypeScript)\nDESCRIPTION: Details loading an FBX model asset using Addressables.loadAssetAsync with explicit type information (Loader.HIERARCHY) in the context of a LayaAir project. The code expects the LayaAir engine, configured Addressables plugin, and a valid FBX path. On start, loadFBX() asynchronously loads the FBX, creates an instance of the resulting Sprite3D, and adds it to a referenced Scene3D. Inputs: FBX asset path and type; outputs: instantiated 3D model in scene. Limitation: resource path must match plugin-managed assets, and asset type is required for complex formats.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/apply/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n@regClass()\nexport class NewScript extends Laya.Script {\n    \n    @property(Laya.Scene3D)\n    public scene: Laya.Scene3D;\n\n    resource: any;\n\n    onStart(): void {\n        this.loadFBX();\n    }\n\n    async loadFBX() {\n        let loadResult = await Addressables.loadAssetAsync(\"resources/res/FBX/LayaMonkey.fbx\", { type: Laya.Loader.HIERARCHY});\n        let monkey: Laya.Sprite3D = loadResult.data.create();\n        this.scene.addChild(monkey);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources with Mixed Types (Detailed) in LayaAir with TypeScript\nDESCRIPTION: This code loads multiple resources, some with explicit types defined as strings and others using engine global variables. It iterates through the loaded resources, displaying them using a timer and sprite. The example showcases flexibility in specifying resource types and handles diverse resource types within a single load operation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        let resArr: Array<any> = [\n            \"image/bird.jpg\",\n            \"image/cloud.png\",\n            {\n                url: \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\",\n                type: \"image\"\n            },\n            {\n                url: \"https://layaair.com/3.x/demo/resources/res/apes/monkey1.png\",\n                type: Laya.Loader.IMAGE\n            }\n        ];\n        this.loadTextures(resArr);\n    }\n\n    /** 加载多个资源 \n     * @param url 资源数组\n    */\n    loadTextures(url: Array<string>): void {\n        //加载回调返回的类型，如果是多样的，最好是any\n        Laya.loader.load(url).then((res: Array<any>) => {\n            let sp: Laya.Sprite = new Laya.Sprite();\n            this.owner.addChild(sp);\n            let i: number = 0;\n            //每秒重画一次\n            Laya.timer.loop(1000, this, () => {\n                i == res.length && (i = 0);\n                //清除sp节点的所有绘图（不含子节点）\n                sp.graphics.clear();\n                //在sp节点上重绘纹理\n                sp.graphics.drawTexture(res[i]);\n                i++;\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Particle3D and Object Pool in a LayaAir Script\nDESCRIPTION: This code demonstrates how to use the custom Particle3D class and the object pool in a LayaAir script. It loads a particle effect, creates and adds it to the scene on mouse click, and clears the object pool when the mouse is released. This showcases the practical application of the object pool for particle effect management.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/particleEditor3D/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\nimport { Particle3D } from \"./Particle3D\";\n\n@regClass()\nexport class Main extends Laya.Script {\n\n\t//粒子特效的路径\n    private filePath = \"FireEffect\";\n    onStart() {\n        console.log(\"Game start\");  \n        //加载粒子特效资源\n        Laya.loader.load(this.filePath, Handler.create(this, () => {    \n        }));        \n    }\n\n\t//每次鼠标点下屏幕后，会创建一个特效\n    mouseDown(e: Event): void {\n        var particle = Particle3D.Create(this.filePath);\n        this.owner.addChild(particle);             \n    }\n\n\t//鼠标抬起后，会释放对象池\n    mouseUp(e: Event): void {\n        Particle3D.ClearPool(this.filePath);      \n    }    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing ColorFilter on Image Component in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates how to access and modify an existing ColorFilter already assigned to an Image component in LayaAir using TypeScript. The filter is retrieved from the component's filters array and updated with new color, brightness, contrast, saturation, and hue values. Prerequisite: the ColorFilter must have been previously added in the IDE or in code to the Image component. This approach allows dynamic adjustment of filter effects on UI elements without recreating filters.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Filter/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n\t// 获得Image组件\n\t@property({ type: Laya.Image })\n\tpublic img: Laya.Image;\n\n\t//组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n\tonAwake(): void {\n\t\t//获得Image的颜色滤镜对象（在IDE中已经给Image组件添加了颜色滤镜）\n\t\tlet colorFilter: Laya.ColorFilter = this.img.filters[0];\n\t\t//设置滤镜颜色\n\t\tcolorFilter.color( 0.5, 0.5, 0.5, 1 );\n\t\t//设置滤镜亮度\n\t\tcolorFilter.adjustBrightness(-50);\n\t\t//设置滤镜对比度\n\t\tcolorFilter.adjustContrast(8);        \n\t\t//设置滤镜饱和度\n\t\tcolorFilter.adjustSaturation(30);\n\t\t//设置滤镜对比度\n\t\tcolorFilter.adjustHue(-15);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Setting MouseEnabled and Event Handling in LayaAir\nDESCRIPTION: This code demonstrates how to manually set the mouseEnabled property on Sprite objects and how this affects event propagation. It illustrates that when mouseEnabled is explicitly set to false, even adding event listeners won't automatically change it.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Sprite })\n    public sprite1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    public sprite2: Laya.Sprite;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.sprite1.mouseEnabled = false;//父节点的MouseEnabled赋值为false\n        this.sprite1.on(Laya.Event.MOUSE_DOWN, this, this.test1);//设置监听,sprite1\n        this.sprite2.on(Laya.Event.MOUSE_DOWN, this, this.test2);//设置监听,sprite2\n        console.log(this.sprite1.mouseEnabled);//打印父节点sprite1的MouseEnabled的值：false\n        console.log(this.sprite2.mouseEnabled);//打印子节点sprite2的MouseEnabled的值：true\n    }\n    test1(e: Laya.Event) {\n        console.log('mouseSprite1')\n    }\n    test2(e: Laya.Event) {\n        console.log('mouseSprite2')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Trail2DRender Component in TypeScript with LayaAir Engine\nDESCRIPTION: A complete example showing how to dynamically create and configure a 2D trail renderer on a game object. The code demonstrates setting trail properties including fade time, width, color gradient, texture mode, and movement animation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Trail2DRender/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\n/**\n * 在节点上添加2D拖尾渲染器的示例代码\n */\nexport class NewScript extends Laya.Script {\n    declare owner: Laya.Sprite;\n\n    private _trail2D: Laya.Trail2DRender;\n\n    //从场景文件中获取到的宽度曲线数据\n    private _widthCurve: any[];\n    //从场景文件中获取到的颜色渐变数据\n    private _gradient: any;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        //在节点上添加2D拖尾渲染器\n        this._trail2D = this.owner.addComponent(Laya.Trail2DRender);\n        //设置淡出时间\n        this._trail2D.time = 1;\n        //设置最小距离\n        this._trail2D.minVertexDistance = 0.1;\n        //设置宽度倍数\n        this._trail2D.widthMultiplier = 50;\n        //设置宽度曲线\n        this.setWidthCurve(this._widthCurve);\n        //设置颜色梯度\n        this.setColorGradient(this._gradient);\n        //设置纹理模式\n        this._trail2D.textureMode = Laya.TrailTextureMode.Stretch;\n        //设置纹理\n        this._trail2D.texture = Laya.Texture2D.whiteTexture;\n        // Laya.loader.load(\"此处填写纹理的路径\").then((res) => {\n        //     this._trail2D.texture = res;\n        // });    \n        //设置线段颜色\n        this._trail2D.color = new Laya.Color(1, 1, 1, 1);\n    }\n\n    //控制物体向右移动\n    onUpdate(): void {\n        this.owner.x += 5;\n    }\n\n    //设置宽度曲线\n    setWidthCurve(value: any[]) {\n        //创建一个新的宽度曲线\n        const floatKeyframe: Laya.FloatKeyframe[] = [];\n\n        for (let i = 0; i < value.length; i++) {\n\n            //创建一个新的关键帧\n            let keyframe = new Laya.FloatKeyframe();\n            //设置关键帧的各项属性\n            keyframe.inTangent    =    value[i].inTangent;\n            keyframe.outTangent   =    value[i].outTangent;\n            keyframe.value        =    value[i].value;\n            keyframe.inWeight     =    value[i].inWeight;\n            keyframe.outWeight    =    value[i].outWeight;\n            keyframe.time         =    value[i].time;\n\n            //将关键帧添加到数组中\n            floatKeyframe.push(keyframe);\n        }\n\n        //将宽度曲线应用到拖尾上\n        this._trail2D.widthCurve = floatKeyframe;\n    }\n\n    //设置颜色梯度\n    setColorGradient(value: any) {\n        //创建一个新的颜色梯度\n        const gradient = new Laya.Gradient();\n\n        //设置颜色梯度的Alpha值\n        for (let i = 0; i < value._alphaElements.value.length;) {\n            gradient.addColorAlpha(value._alphaElements.value[i], value._alphaElements.value[i + 1]);\n            i += 2;\n        };\n\n        //设置颜色梯度的RGB值\n        for (let i = 0; i < value._rgbElements.value.length;) {\n            let color = new Laya.Color(value._rgbElements.value[i + 1], value._rgbElements.value[i + 2], \t\t\t                                                    value._rgbElements.value[i + 3]);\n            gradient.addColorRGB(value._rgbElements.value[i], color);\n            i += 4;\n        };\n\n        //将颜色梯度应用到拖尾上\n        this._trail2D.colorGradient = gradient;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Switching Skins in Spine Animation\nDESCRIPTION: This snippet demonstrates how to dynamically switch between different skins in a Spine animation using the `skinName` property. It retrieves the Spine component, records the current skin, switches the skin based on a condition, and replays the animation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Spine2DRenderNode/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    spine: Laya.Spine2DRenderNode;\n    onEnable(): void {\n        //拿到IDE节点上挂载的spine组件\n        this.spine = this.owner.getComponent(Laya.Spine2DRenderNode); \n        let currentSkin: string = this.spine.skinName; // 记录当前皮肤状态\n        //播放停止后执行逻辑\n        this.owner.on(Laya.Event.STOPPED, this, () => {\n            // 通过三元运算符切换皮肤名称\n            currentSkin = currentSkin === \"full-skins/girl\" ? \"full-skins/girl-blue-cape\" : \"full-skins/girl\"; \n            this.spine.skinName = currentSkin;\n            this.spine.play(\"idle\", false); //切换后重新播放一次\n            console.log(`当前皮肤切换至：${currentSkin}`); \n        });\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Grid Indices to World Coordinates\nDESCRIPTION: This function converts the grid indices returned from the A* algorithm back to world coordinates. It uses the AStarMap, terrain parameters, and input path data to convert the path from the grid to world coordinates. It calculates the position for each path node in the world coordinates, accounting for the terrain's dimensions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nprivate getRealPosition(start, path): any {\n        this.resPathLength = path.length;\n        var minX = this.terrainSprite.minX;\n        var minZ = this.terrainSprite.minZ;\n        var cellX = this.terrainSprite.width / this.aStarMap.width;\n        var cellZ = this.terrainSprite.depth / this.aStarMap.height;\n        var halfCellX = cellX / 2;\n        var halfCellZ = cellZ / 2;\n\n        this.resPath[0].x = start.x * cellX + halfCellX + minX;\n        this.resPath[0].y = start.y * cellZ + halfCellZ + minZ;\n\n        if (this.resPath.length < path.length) {\n            var diff: number = path.length - this.resPath.length;\n            for (var j: number = 0; j < diff; ++j) {\n                var newPoint: Vector2 = new Vector2();\n                this.resPath.push(newPoint);\n            }\n\n        }\n\n        for (var i = 1; i < path.length; i++) {\n            var gridPos = path[i];\n            this.resPath[i].x = gridPos.x * cellX + halfCellX + minX;\n            this.resPath[i].y = gridPos.y * cellZ + halfCellZ + minZ;\n        }\n        return 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using BlendMode with Sprites in LayaAir\nDESCRIPTION: This example demonstrates how to use blendMode to create visual effects when sprites overlap. The 'lighter' blend mode adds the color values of overlapping sprites.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet sp1 = new Laya.Sprite();\nLaya.stage.addChild(sp1);\n// 加载并显示一个图片1\nsp1.loadImage(\"atlas/comp/image.png\", null);\nlet sp2 = new Laya.Sprite();\nLaya.stage.addChild(sp2);\n// 加载并显示一个图片2\nsp2.loadImage(\"resources/layabox.png\", null);\nsp2.pos(200, 190);\n// 设置blendMode\nsp2.blendMode = \"lighter\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Circular Mask for a Sprite in LayaAir\nDESCRIPTION: This example demonstrates how to create and apply a circular mask to a sprite. It creates a mask sprite with a circle graphic and applies it to the main sprite after a delay.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\nLaya.stage.addChild(sprite);\nsprite.loadImage(\"atlas/comp/image.png\", null);\n        \n//创建遮罩\nlet mask = new Laya.Sprite();\nsprite.addChild(mask);\nmask.graphics.drawCircle(200, 200, 100, \"#FFFFFF\");\n\n//图片添加遮罩\nsetTimeout(() => { \n\tsprite.mask = mask;//等待1秒执行遮罩\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: C++: Modifying ArrayBuffer in jsBin Function\nDESCRIPTION: This C++ function, `jsBin`, takes an ArrayBuffer as input. It modifies the first byte of the ArrayBuffer and returns the byte length.  It uses LayaNative API to get and modify the buffer. Requires the LayaNative SDK.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsBin(jsvm_env env, jsvm_callback_info info) {\n    jsvm_status status;\n    size_t argc = 1;\n    jsvm_value args[1];\n    jsvm_value _this;\n    jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr);\n\n    char* buff = nullptr;\n    size_t byteLen = 0;\n    jsvm_get_arraybuffer_info(env, args[0], (void**) & buff, &byteLen);\n    buff[0] = 22;\n\n    jsvm_value retLen;\n    jsvm_create_int32(env, byteLen, &retLen);\n    return retLen;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 File Input for Image Upload in LayaAir with TypeScript\nDESCRIPTION: This snippet initializes a transparent HTML5 file input element positioned absolutely, allowing users to select an image file or take a photo. It reads the selected file as a data URL using FileReader and loads the image onto the LayaAir stage by creating a sprite and adding it to the stage. Dependencies include the global Laya framework and DOM HTML5 APIs. The file input’s onchange event triggers reading the file, and FileReader's onload event performs the image loading and display. The file input is appended to the DOM body and styled for visibility and positioning. This approach has cross-browser considerations and is suitable for simple image upload scenarios within LayaAir applications.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(100,100);\n        var file:any = Laya.Browser.document.createElement(\"input\");\n        file.type = \"file\";\n        file.style.position = \"absolute\";\n        file.style.zIndex = 999;\n        Laya.Browser.document.body.appendChild(file);//添加到舞台\n        var fileReader:any = new  Laya.Browser.window.FileReader();\n        file.onchange = function(e:any):void\n        {\n            if(file.files.length){\n                fileReader.readAsDataURL(file.files[0]);\n            }\n        };\n        fileReader.onload = function(evt):void\n        {  \n            if(Laya.Browser.window.FileReader.DONE == fileReader.readyState)\n            {\n                var sp:Laya.Sprite = new Laya.Sprite();\n                sp.loadImage(fileReader.result,0,0,300,300);\n                Laya.stage.addChild(sp);\n            }\n        }\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Using Engine Object Types with @property Decorator in TypeScript\nDESCRIPTION: This snippet shows how to expose various engine-specific object types as component properties using the @property() decorator. Supported types include Camera, Scene3D, Sprite3D, Prefab, Node, and UI components like Button, Image, and Label. Each property is marked with its corresponding Laya type to enforce type safety and provide drag-and-drop capability in the IDE. All properties are private and use regClass to register the component component script.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property( { type:Laya.Camera } ) //摄像机类型\n    private camera: Laya.Camera;  \n\n    @property( { type:Laya.Scene3D } ) //3D场景根节点类型\n    private scene3D: Laya.Scene3D;\n\n    @property( { type:Laya.DirectionLightCom } ) //DirectionLight组件类型\n    private directionLight: Laya.DirectionLightCom;\n\n    @property( { type:Laya.Sprite3D } ) //Sprite3D节点类型\n    private cube: Laya.Sprite3D;  \n\n    @property( { type:Laya.Prefab } ) //加载 Prefab 拿到的对象\n    private prefabFromResource: Laya.Prefab;    \n\n    @property( { type:Laya.ShurikenParticleRenderer } ) //ShurikenParticleRenderer组件类型\n    private particle3D: Laya.ShurikenParticleRenderer;  \n\n    @property( { type:Laya.Node } ) //节点类型\n    private scnen2D: Laya.Node; \n\n    @property( { type:Laya.Box } ) //拿到 Box 组件\n    private box: Laya.Box; \n\n    @property( { type:Laya.List } ) //拿到 List 组件\n    private list: Laya.List; \n\n    @property( { type:Laya.Image } ) //拿到 Image 组件\n    private image: Laya.Image; \n\n    @property( { type:Laya.Label } ) //拿到 Label 组件\n    private label: Laya.Label; \n\n    @property( { type:Laya.Button } ) //拿到 Button 组件\n    private button: Laya.Button; \n\n    @property( { type:Laya.Sprite } ) //拿到 Sprite 组件\n    private sprite: Laya.Sprite; \n\n    @property( { type:Laya.Animation } ) //拿到 Animation 组件\n    private anmation: Laya.Animation; \n\n    @property( { type:Laya.Vector3 } ) //Laya.Vector3类型\n    private vector3 : Laya.Vector3;\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Creating and Populating LayaAir Tree Component (TypeScript)\nDESCRIPTION: This code shows how to programmatically create a LayaAir Tree component, dynamically build its hierarchical data source, and define a custom item renderer class using TypeScript. It handles resource loading, sets tree properties such as the scroll bar skin, assigns a custom Box-based item renderer, and injects parsed XML data. The example also includes the 'Item' class with defined structure and style for each tree node. Prerequisites: LayaAir runtime, appropriate image resources in the specified locations, and a valid Laya stage. Inputs: None; Outputs: Renders a centered, fully-interactive tree with custom appearance. The code allows arbitrary label names in XML, but item renderer property names must match XML attributes for data binding.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Tree/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Tree extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n\n        var res: any[] = [\"atlas/comp/vscroll.png\",\n            \"atlas/comp/vscroll$bar.png\",\n            \"atlas/comp/vscroll$down.png\",\n            \"atlas/comp/vscroll$up.png\",\n            \"resources/tree/clip_selectBox.png\",\n            \"resources/tree/clip_tree_folder.png\",\n            \"resources/tree/clip_tree_arrow.png\"];\n\n        Laya.loader.load(res).then(() => {\n            this.onLoadComplete();\n        });\n    }\n\n    private onLoadComplete(e: any = null): void {\n        // 初始化树状列表的数据源\n        var treeData: string = \"<data>\";\n\n        //程序创建的模拟数据，模拟树状列表数据，拼接列表的数据源\n        for (let i: number = 0; i < 5; i++) {\n            //拼接目录数据结构（item标签这里可以自己定义标签名，用什么开头就用什么结束,但是title这里，一定要对应列表渲染单元的label文本节点name）\n            treeData += \"<item title='目录\" + (i + 1) + \"' isOpen='true'>\";\n            for (let j: number = 0; j < 5; j++) {\n                //拼接子项（即不会再有展开）的结构，(这里的subpage标签也是可以自己任意定义名称，title这里，一定要对应列表渲染单元的label文本节点name）\n                treeData += \"<subpage title='子项标题\" + (j + 1) + \"' />\";\n            }\n            //每一个子项的外层，要有一个完整的结束标签，目录开始用什么标签名就用什么标签名结束。\n            treeData += \"</item>\";\n        }\n\n        //数据源data标签，需要拼接一个结束标签\n        treeData += \"</data>\";\n        \n\n        var tree: Laya.Tree = new Laya.Tree();\n        tree.scrollBarSkin = \"atlas/comp/vscroll.png\";\n        // 添加列表渲染项\n        tree.itemRender = Item;\n        // 解析tree的数据\n        tree.xml = new Laya.XML(treeData);\n        tree.size(300, 300);\n        tree.x = (Laya.stage.width - tree.width) / 2;\n        tree.y = (Laya.stage.height - tree.height) / 2;\n        tree.bgColor = \"#d25454\";\n        this.owner.addChild(tree);\n    }\n}\n\n\nclass Item extends Laya.Box {\n    constructor() {\n        super();\n        this.right = 0;\n        this.left = 0;\n\n        var selectBox: Laya.Clip = new Laya.Clip(\"resources/tree/clip_selectBox.png\", 1, 2);\n        selectBox.name = \"selectBox\";//设置 selectBox 的name 为“selectBox”时，将被识别为树结构的项的背景。\n        selectBox.height = 32;\n        selectBox.x = 13;\n        selectBox.left = 12;\n        this.addChild(selectBox);\n\n        var folder: Laya.Clip = new Laya.Clip(\"resources/tree/clip_tree_folder.png\", 1, 3);\n        folder.name = \"folder\";//设置 folder 的name 为“folder”时，将被识别为树结构的文件夹开启状态图表。\n        folder.x = 14;\n        folder.y = 4;\n        this.addChild(folder);\n\n        var label: Laya.Label = new Laya.Label;\n        label.name = \"title\";//设置 label 的name 为“title”时，此值将用于树结构数据赋值。\n        label.fontSize = 20;\n        label.color = \"#FFFFFF\";\n        label.padding = \"6,0,0,13\";\n        label.width = 150;\n        label.height = 30;\n        label.x = 33;\n        label.y = 1;\n        label.left = 33;\n        label.right = 0;\n        this.addChild(label);\n\n        var arrow: Laya.Clip = new Laya.Clip(\"resources/tree/clip_tree_arrow.png\", 1, 2);\n        arrow.name = \"arrow\";//设置 arrow 的name 为“arrow”时，将被识别为树结构的文件夹开启状态图表。\n        arrow.x = 0;\n        arrow.y = 5;\n        this.addChild(arrow);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: 加载并应用压缩图集资源（TypeScript）\nDESCRIPTION: 该示例演示了在LayaAir中预加载图集atlas文件，识别包含压缩纹理信息后，自动加载对应平台支持的压缩格式纹理，适用于动态加载压缩图集，并将图像应用到场景中的Image组件中。无需手动判断平台，引擎自动处理。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/textureCompress/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    onAwake(): void {\n        Laya.loader.load([\"resource/AtlasConfig.atlas\"], Laya.Handler.create(this, () => {\n            let img = new Laya.Image;\n            Laya.stage.addChild(img);\n            img.pos(500, 100);\n            img.skin = \"resources/img_bg.png\"; //图集中的图片\n        }));\n    }\n\n    onStart() {\n        Laya.Stat.show(0, 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Available Component Lifecycle Methods in LayaAir TypeScript Scripts\nDESCRIPTION: Lists the optional lifecycle method signatures that can be implemented within a custom `Laya.Script`. LayaAir calls these methods automatically at different stages of the component's existence, such as when it's added (`onAdded`), activated (`onAwake`, `onEnable`), updated each frame (`onUpdate`, `onLateUpdate`), or destroyed (`onDisable`, `onDestroy`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/Script/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 被添加到节点后调用，和Awake不同的是即使节点未激活onAdded也会调用。\n     */\n    onAdded(): void {\n    }\n\n    /**\n     * 重置组件参数到默认值，如果实现了这个函数，则组件会被重置并且自动回收到对象池，方便下次复用\n     * 如果没有重置，则不进行回收复用\n\n     */\n    onReset?(): void;\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，次方法只执行一次\n     */\n    onAwake(): void {\n    }\n\n    /**\n     * 组件被启用后执行，比如节点被添加到舞台后\n     */\n    onEnable(): void {\n    }\n\n    /**\n     * 第一次执行update之前执行，只会执行一次\n     */\n    onStart?(): void;\n\n    /**\n     * 每帧更新时执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n     */\n    onUpdate?(): void;\n\n    /**\n     * 每帧更新时执行，在update之后执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n     */\n    onLateUpdate?(): void;\n\n    /**\n     * 渲染之前执行\n     */\n    onPreRender?(): void;\n\n    /**\n     * 渲染之后执行\n     */\n    onPostRender?(): void;\n\n    /**\n     * 组件被禁用时执行，比如从节点从舞台移除后\n     */\n    onDisable(): void {\n    }\n\n    /**\n     * 手动调用节点销毁时执行\n     */\n    onDestroy(): void {\n    }\n\n```\n\n----------------------------------------\n\nTITLE: LayaAir Material Batching Script (TypeScript)\nDESCRIPTION: This TypeScript script implements material batching by assigning shared materials and meshes to multiple 3D nodes. It utilizes a custom UniformBuffer to optimize rendering performance. The script generates a number of sprites with random colors, which are then rendered using the same material and mesh to enable batching.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/performanceOptimization/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //共享材质，用于合批\n    public batchMat: Laya.Material;\n    //颜色数目\n    private _colorNums = 20;\n    //精灵数目\n    private _spriteNums = 200;\n\n    private _createColorBufferData() {\n        //随机给20个颜色值\n        let colorBuffer = new Float32Array(20 * 4);\n        for (var i = 0; i < this._colorNums; i++) {\n            let offset = i * 4;\n            colorBuffer[offset] = Math.random();\n            colorBuffer[offset + 1] = Math.random();\n            colorBuffer[offset + 2] = Math.random();\n            colorBuffer[offset + 3] = 1;\n        }\n        //设置uniformbuffer\n        this.batchMat.setBuffer(\"colormap\", colorBuffer);\n    }\n\n    //随机生成_spriteNums数目个的小球，使用随机颜色\n    private _createMeshSpriteRender() {\n        let mesh = Laya.PrimitiveMesh.createSphere(0.5);\n        let ownerSprite = this.owner;\n        let positionRanvge = 30;\n        for (var i = 0; i < this._spriteNums; i++) {\n            let sprite = ownerSprite.addChild(new Laya.Sprite3D());\n            let filter = sprite.addComponent(Laya.MeshFilter);\n            let render = sprite.addComponent(Laya.MeshRenderer);\n            // 设置相同的材质与网格\n            filter.sharedMesh = mesh;\n            render.sharedMaterial = this.batchMat;\n            //随机位置\n            sprite.transform.localPosition = this._getRandomPosition(positionRanvge);\n            //随机一个颜色索引\n            let colorIndex = Math.floor(Math.random() * this._colorNums);\n            //设置节点的 Laya.ENodeCustomData.custom_0 为对应的颜色索引\n            render.setNodeCustomData(Laya.ENodeCustomData.custom_0, colorIndex);\n        }\n    }\n    \n    private _getRandomPosition(positionRanvge: number): Laya.Vector3 {\n        let getRangeRandom = () => {\n            return (Math.random() - 0.5) * positionRanvge;\n        }\n        return new Laya.Vector3(getRangeRandom(), 0.3, getRangeRandom());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete WebSocket String Communication Demo in LayaAir TypeScript\nDESCRIPTION: Provides a full example class for connecting to a WebSocket server, handling connection events, sending text, and processing received messages (distinguishing string data from binary if needed). Demonstrates setup for event-driven architecture, usage of private callback methods, and explicit clearing of input buffers. Input includes optional URL. Outputs include console logs on various states. Requires LayaAir engine and decorator support.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class WebSocketDemo extends Laya.Script {\n    private socket: Laya.Socket;\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        this.socket = new Laya.Socket();\n\n        // 注册事件监听\n        this.socket.on(Laya.Event.OPEN, this, this.onSocketOpen);\n        this.socket.on(Laya.Event.MESSAGE, this, this.onMessageReceived);\n        this.socket.on(Laya.Event.CLOSE, this, this.onSocketClose);\n        this.socket.on(Laya.Event.ERROR, this, this.onConnectError);\n\n        // 建立连接（此处使用 connectByUrl 方式，实际可根据需要选择其他方式）\n        this.socket.connectByUrl(\"wss://echo.websocket.org:443\");\n    }\n\n\n    /** 连接成功回调，发送字符串数据 */\n    private onSocketOpen(e: any): void {\n        console.log(\"WebSocket 已连接\");\n\n        // 发送字符串示例\n        this.socket.send(\"Hello, LayaAir WebSocket!\");\n    }\n\n    /**  接收数据回调 */\n    private onMessageReceived(msg: any): void {\n        console.log(\"接收到消息：\");\n        if (typeof msg === \"string\") {\n            console.log(\"文本数据：\", msg);\n        } else {\n            console.log(\"接收到非字符串数据\", msg);\n        }\n        // 清除输入缓存，避免残留数据\n        this.socket.input.clear();\n    }\n\n    /** 连接关闭回调 */\n    private onSocketClose(e: any): void {\n        console.log(\"WebSocket 连接已关闭\", e);\n    }\n\n    /** 连接错误回调 */\n    private onConnectError(e: any): void {\n        console.error(\"WebSocket 连接出错：\", e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 通过代码动态创建HBox及子Button的示例（TypeScript）\nDESCRIPTION: 此代码演示了如何在LayaAir中使用TypeScript通过加载资源、创建HBox和Button实例，设置布局参数后将Button加入HBox并添加到场景的方法。适合需要程序化生成UI布局的场景，依赖于Laya的资源加载和UI组件创建能力，核心步骤包括资源加载、节点创建和属性设置。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/HBox/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_HBox extends Laya.Script {\n\n    private hbox: Laya.HBox;\n    private btn1: Laya.Button;\n    private btn2: Laya.Button;\n    private btn3: Laya.Button;\n\n    private skins: string = \"atlas/comp/button.png\";\n\n    onAwake(): void {\n        Laya.loader.load(this.skins).then(() => {\n            this.createBtn();\n            this.createHbox();\n            this.owner.addChild(this.hbox);\n        });\n    }\n\n    private createBtn(): void {\n        this.btn1 = new Laya.Button(this.skins);\n        this.btn2 = new Laya.Button(this.skins);\n        this.btn3 = new Laya.Button(this.skins);\n    }\n\n    private createHbox(): void {\n        this.hbox = new Laya.HBox;\n        this.hbox.pos(100, 100);\n        this.hbox.size(600, 300);\n        this.hbox.bgColor = \"#ffffff\";\n        this.hbox.addChild(this.btn1);\n        this.hbox.addChild(this.btn2);\n        this.hbox.addChild(this.btn3);\n        this.hbox.space = 100;\n        this.hbox.align = \"middle\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Component Properties with @property Decorator in TypeScript\nDESCRIPTION: This snippet illustrates the standard and shorthand uses of the @property() decorator to expose component class properties in LayaAir IDE. The decorator accepts an options object with parameters such as type, caption, and tips to provide metadata for IDE display. The type parameter is required and defines the property's data type. The shorthand form uses just the type for simpler declarations. Dependencies include importing regClass and property from Laya. The snippet shows a class with two string properties exposed differently.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript1 extends Laya.Script {\n    // Standard decorator usage with type, caption, and tips for IDE display\n    @property({ type: String, caption: \"IDE显示用的别名\", tips: \"这是一个文本对象，只能输入文本哦\" }) \n    public text1: string = \"\";\n\n    // Shorthand decorator usage with just the type\n    @property(String)   \n    public text2: string = \"\";\n\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying GlowFilter in LayaAir with TypeScript\nDESCRIPTION: This snippet explains how to create a GlowFilter to add glow or shadow effects around an Image component in LayaAir using TypeScript. It initializes the glow filter with color, blur size, and offset parameters, then applies it to the image's filters array. The filter requires specifying color as a string and numerical values for blur radius and X/Y offsets. The output is a UI element with an added glowing or shadow effect. This method enhances visual emphasis or artistic effects on UI components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Filter/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n\t// 获得Image组件\n\t@property({ type: Laya.Image })\n\tpublic img: Laya.Image;\n\n\t//组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n\tonAwake(): void {\n\t\t// 创建发光滤镜，创建时初始化滤镜\n\t\tlet glowFilter: Laya.GlowFilter = new Laya.GlowFilter(\"#ffff00\", 10, 0, 0);\n\t\t// 给Image组件添加发光滤镜\n\t\tthis.img.filters = [glowFilter];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Scene Process Node/Component Method from UI Process - TypeScript\nDESCRIPTION: Demonstrates how the UI process can call a specific method on a component (`MyScript`) attached to a node in the Scene process using `Editor.scene.runNodeScript`, passing arguments and receiving a return value asynchronously.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是UI进程代码\n\n//获取选中的节点\nlet node = Editor.scene.getSelection()[0];\n\n//调用MyScript组件里的test方法，传入参数abc\nlet ret = await Editor.scene.runNodeScript(node.id, node.getComponent(\"MyScript\").id, \"test\", \"abc\");\nconsole.log(ret);\n```\n\n----------------------------------------\n\nTITLE: Modifying Debug Mode in config.ini for Android project\nDESCRIPTION: This snippet demonstrates how to modify the JSDebugMode in the `config.ini` file to set the desired debugging mode for a LayaAir project in Android Studio.  The `JSDebugMode` parameter controls whether debugging is enabled, and if so, whether the application starts in Normal or Wait mode.  A value of 0 disables debugging, 1 enables Debug/Normal mode, and 2 enables Debug/Wait mode. This is a necessary step to enable debugging.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Android/debug/readme.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nJSDebugMode=1\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Clone of Sprite3D with Custom Transform (TypeScript)\nDESCRIPTION: Defines a static instantiate method for Sprite3D, enabling cloning of an original Sprite3D with optional parent, position, and rotation; can preserve world transformation. Copies transform data if worldPositionStays is true, or assigns explicit position/rotation otherwise. Parent (Node), position (Vector3), and rotation (Quaternion) are optional parameters.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 创建精灵的克隆实例。\n     * @param\toriginal  原始精灵。\n     * @param   parent    父节点。\n     * @param   worldPositionStays 是否保持自身世界变换。\n     * @param\tposition  世界位置,worldPositionStays为false时生效。\n     * @param\trotation  世界旋转,worldPositionStays为false时生效。\n     * @return  克隆实例。\n     */\n    static instantiate(original: Sprite3D, parent: Node = null, worldPositionStays: boolean = true, position: Vector3 = null, rotation: Quaternion = null): Sprite3D {\n        var destSprite3D: Sprite3D = (<Sprite3D>original.clone());\n        (parent) && (parent.addChild(destSprite3D));\n        var transform: Transform3D = destSprite3D.transform;\n        if (worldPositionStays) {\n            var worldMatrix: Matrix4x4 = transform.worldMatrix;\n            original.transform.worldMatrix.cloneTo(worldMatrix);\n            transform.worldMatrix = worldMatrix;\n        } else {\n            (position) && (transform.position = position);\n            (rotation) && (transform.rotation = rotation);\n        }\n        return destSprite3D;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Texture with Resource Loading in LayaAir\nDESCRIPTION: This example shows how to load an image resource first, then create a sprite and assign the loaded texture to it. The sprite is positioned at the center of the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"atlas/comp/image.png\").then(() => {\n    let sprite = new Laya.Sprite();\n    //精灵设置纹理并居中显示\n    let res = Laya.loader.getRes(\"atlas/comp/image.png\");\n    sprite.pos(Laya.stage.width >> 1, Laya.stage.height >> 1);\n    sprite.texture = res;\n    // 添加到舞台\n    Laya.stage.addChild(sprite);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Installation via npm Command\nDESCRIPTION: This command is used in a command-line interface (like Windows cmd) to check if Node.js and npm (Node Package Manager) are already installed. Executing `npm -h` displays help information, including the npm version and installation path, confirming its presence.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/developmentEnvironment/download/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm -h\n```\n\n----------------------------------------\n\nTITLE: Loading and Using a Spine Prefab in LayaAir via Script (TypeScript)\nDESCRIPTION: This snippet demonstrates how to programmatically load a baked Spine animation prefab (.lh file) in LayaAir using TypeScript. It depends on the LayaAir framework, with the prefab generated by the Spine Animation Baking Plugin. On enabling the script, it loads the prefab, adds it to the scene, retrieves the Spine2DRenderNode component, sets an animation to play, and attaches the prefab to the owner node. Key parameters include the prefab file path and the animation name set on the render component. Expected input is the prefab path, while output is the instantiated animated Spine object added to the scene. Requires LayaAir runtime and compatible plugin output; does not expose baked component parameters directly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/spineBake/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class SpineTest extends Laya.Script {\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        //加载预制体文件\n        Laya.loader.load(\"resources/spine3.8/boy/spineboy-pma_bake.lh\").then((res) => {\n            // 创建预制体\n            let spineboy: Laya.Sprite = res.create();\n            // 获取Spine2DRenderNode组件 \n            let spine2dRender: Laya.Spine2DRenderNode = spineboy.getComponent(Laya.Spine2DRenderNode);\n            // 设置播放动画\n            spine2dRender.animationName = \"walk\";\n            // 添加预制体到场景\n            this.owner.addChild(spineboy);\n        });\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing layanative3 on Windows (npm)\nDESCRIPTION: Installs the `layanative3` command-line tool globally on a Windows system using the Node Package Manager (npm). Requires Node.js and npm to be installed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/build_Cmd/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install -g layanative3\n```\n\n----------------------------------------\n\nTITLE: Detecting 3D Mouse Click Collisions with LayaAir - TypeScript\nDESCRIPTION: This snippet initializes a 3D scene and camera and sets up ray-based collision detection responding to mouse down events. It checks if a 3D object is hit by a mouse click and logs the name of the first collided object. Requires the LayaAir engine with its physics module, and necessary camera and stage dependencies; expects a configured LayaAir environment. Inputs are mouse position on stage, output is console logging of the collision result. Only the first object hit by the ray is processed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;  \n  /** 输出射线检测碰到的目标对象 */\n  private _outHitResult: Laya.HitResult = new Laya.HitResult();\n  private _ray: Laya.Ray;\n  private point: Laya.Vector2 = new Laya.Vector2();\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码 */\n    \n    //射线初始化（必须初始化）\n    this._ray = new Ray(new Vecntetor3(0, 0, 0), new Vector3(0, 0, 0));\n    //侦听舞台上的鼠标事件\n    Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);    \n  }\n  \n  /** 鼠标按下时的逻辑处理 */\n  onMouseDown(): void {\n    this.point.x = Laya.stage.mouseX;\n    this.point.y = Laya.stage.mouseY;\n    //用舞台上的鼠标坐标，产生一条3D空间射线\n    this._camera.viewportPointToRay(this.point, this._ray);\n    //使用物理引擎的射线检测方法，检测是否发生了碰撞\n    this._scene.physicsSimulation.rayCast(this._ray, this._outHitResult);\n    //根据检测结果的状态进行判断，如果碰撞成功，处理碰撞后的逻辑。\n    if (this._outHitResult.succeeded) {\n      //输出碰倒的首个3D物体对象名字\n      console.log(\"碰撞到物体: \" + this._outHitResult.collider.owner.name);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Raycast From To - TypeScript\nDESCRIPTION: This code snippet shows how to use `raycastFromTo` to perform a raycast between two points. It sets the start and end points of the ray and checks if a collision occurs. If a collision is detected, it changes the albedo color of the colliding object to green.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n……省略若干代码\n*/\n/*进行射线检测,检测所有碰撞的物体\n//_scene3D.physicsSimulation.raycastAllFromTo(this.from, this.to, this.outs);\n//检测所有物体的射线使用与上个示例类似\n*/\n\n//进行射线检测,检测第一个碰撞物体\n_scene3D.physicsSimulation.raycastFromTo(this.from, this.to, this.out);\n//将射线碰撞到的物体设置为红色\n((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(0.0, 1.0, 0.0, 1.0);\n/*\n……省略若干代码\n*/\n```\n\n----------------------------------------\n\nTITLE: Overriding Collision and Trigger Lifecycle Methods in Script3D (TypeScript)\nDESCRIPTION: This class snippet demonstrates how to override the six main lifecycle methods for handling collision and trigger physics events in LayaAir's Script3D-derived scripts. Methods include onTriggerEnter, onTriggerStay, onTriggerExit (for triggers), and onCollisionEnter, onCollisionStay, onCollisionExit (for colliders). Each method logs a unique message to the console for demonstration, allowing you to respond to physical interactions in real time. No explicit parameters are required; each method is invoked automatically by the LayaAir engine as needed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * TypeScript语言的3D脚本示例\n */\nexport default class TSDemo extends Laya.Script3D {\n    constructor() { super(); }\n\n    onTriggerEnter(): void {\n        /*\n    \t……省略若干逻辑代码\n    \t*/\n        console.log(\"触发器物理事件onTriggerEnter\");\n    }\n    onTriggerStay(): void {\n        /*\n    \t……省略若干逻辑代码\n    \t*/\n        console.log(\"触发器物理事件onTriggerStay\");\n    }    \n    onTriggerExit(): void {\n        /*\n    \t……省略若干逻辑代码\n    \t*/\n        console.log(\"触发器物理事件onTriggerExit\");\n    }\n\n    \n    onCollisionEnter(): void {\n        /*\n    \t……省略若干逻辑代码\n    \t*/\n        console.log(\"碰撞器物理事件onCollisionEnter\");\n    }\n    onCollisionStay(): void {\n        /*\n    \t……省略若干逻辑代码\n    \t*/\n        console.log(\"碰撞器物理事件onCollisionStay\");\n    }\n    onCollisionExit(): void {\n        /*\n    \t……省略若干逻辑代码\n    \t*/\n        console.log(\"碰撞器物理事件onCollisionExit\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 为 2D 对象绘制定制 Gizmo（LayaAir Editor TypeScript）\nDESCRIPTION: 通过 IEditorEnv.Gizmos2D 接口和 onDrawGizmosSelected 实现 2D 组件的自定义可视化。须在事件中判断并延迟创建形状控件。依赖 IEditorEnv.Gizmos2D、IGizmoCircle。输入为 2D 组件，输出为场景内圆形形状。当前仅支持 onDrawGizmosSelected 事件。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditorEnv.customEditor(Script2)\nexport class TestCustomEditor extends IEditorEnv.CustomEditor {\n    private _c: IEditorEnv.IGizmoCircle;\n\n    onDrawGizmosSelected(): void {\n        if (!this._c) {\n            let manager = IEditorEnv.Gizmos2D.getManager(this.owner);\n            this._c = manager.createCircle(10);\n            this._c.fill(\"#ff0\");\n        }\n        this._c.setLocalPos(10, 10);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Notes on branding and licensing for startup screens\nDESCRIPTION: Mentions that the LayaAir engine branding must be retained on startup screens unless additional licensing is obtained. Details licensing costs and contact information for authorization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/loading_view_new/readme.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Closing All Scenes - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to close all scenes (excluding dialogs) using `Laya.Scene.closeAll()`. It's important to note that scenes closed this way may not have their resources automatically garbage collected unless `autoDestroyAtRemoved` is set to `true`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 关闭所有场景，不包括对话框，如果关闭对话框，请使用Dialog.closeAll()\n * 【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收\n*/\nstatic closeAll(): void {\n```\n\n----------------------------------------\n\nTITLE: Setting up Frame-Based and Interval Timers in LayaAir - TypeScript\nDESCRIPTION: Demonstrates using LayaAir's Laya.timer.frameLoop to execute code based on frame frequency, and clearing the timer when the object's lifecycle ends. Also attaches a click event to dispose resources. Dependencies: LayaAir engine context (Laya.stage, Laya.timer, Laya.Handler, etc.). Key parameters include the loop interval, callback context, and methods for resource cleanup.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.timer.frameLoop(1, this, this.animateFrameRateBased);\nLaya.stage.on(\"click\", this, this.dispose);\ndispose() \n{\n    Laya.timer.clear(this, this.animateFrameRateBased);\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse Event Listening with LayaAir Engine in TypeScript\nDESCRIPTION: Shows different methods of event listening in LayaAir, including persistent (on) and one-time (once) event listeners for mouse interactions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//持续侦听click点击事件\nthis.xxx.on(Laya.Event.CLICK, this, () => {\n\t//侦听到事件后的逻辑代码...\n});\n\n//侦听一次close关闭事件\nthis.xxx.once(Laya.Event.CLOSE, this, this.onClosed);\n\nonClosed(): void {\n\t//侦听到事件后的逻辑代码...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LayaAir Project Entry Using Startup Script in TypeScript\nDESCRIPTION: Defines an asynchronous main function as the project entry point in TypeScript, which logs a message and opens a specified scene using Laya.Scene.open. This startup script approach allows dynamic control over which scene to open at runtime instead of relying on a fixed startup scene setting in the build configuration. Requires LayaAir engine environment with scene files accessible by the given path.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/entry/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main() {\n    console.log(\"Hello LayaAir!\");\n\n    //加载场景并打开场景\n    Laya.Scene.open('Scene.ls');\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Bullet from Pool Example in LayaAir\nDESCRIPTION: Basic example of retrieving a bullet object from the bullet pool. Shows the simple usage pattern for object retrieval.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet bullet = Pool.getItem(\"Bullet\");\n```\n\n----------------------------------------\n\nTITLE: Creating LayaAir Panel Programmatically (TypeScript)\nDESCRIPTION: This TypeScript script shows how to create and configure a LayaAir Panel component entirely using code within the `onAwake` method. It instantiates a `Laya.Panel`, sets its horizontal scrollbar skin ('atlas/comp/hscroll.png'), size (600x275), and position (150, 150), and adds it as a child to the script's owner node. It then dynamically creates four `Laya.Image` components using a loop, assigns an image source ('atlas/comp/image.png') to each, positions them horizontally inside the panel based on the loop index, and adds them as children to the Panel. Requires the `Laya` module and assumes necessary image assets are available.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Panel/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Panel extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 创建Panel组件\n        let panel: Laya.Panel = new Laya.Panel();\n        panel.hScrollBarSkin = \"atlas/comp/hscroll.png\";\n        panel.size(600, 275);\n        panel.pos(150, 150);\n        this.owner.addChild(panel);\n\n        // 创建Image组件，作为Panel的子节点\n        let img: Laya.Image;\n        for (var i: number = 0; i < 4; i++) {\n            // 创建4个Image，水平排列\n            img = new Laya.Image(\"atlas/comp/image.png\");\n            img.x = i * 512;\n            panel.addChild(img);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getGridIndex for A* Start/End Points in TypeScript\nDESCRIPTION: Shows how to use the 'getGridIndex' function to convert world coordinates (from a predefined path array) into grid indices for the start and end points needed by the A* search algorithm.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n//调用getGridIndex方法，得到网格索引\nthis.getGridIndex(this.path[this.curPathIndex % this.pointCount].x, this.path[this.curPathIndex++ % this.pointCount].z, this.startPoint);\nthis.getGridIndex(this.path[this.nextPathIndex % this.pointCount].x, this.path[this.nextPathIndex++ % this.pointCount].z, this.endPoint);\n//初始化start,end坐标点\nvar start = this.graph.grid[this.startPoint.x][this.startPoint.y];\nvar end = this.graph.grid[this.endPoint.x][this.endPoint.y];\n```\n\n----------------------------------------\n\nTITLE: Using Component-Type Properties for Particle Renderers in LayaAir with TypeScript\nDESCRIPTION: Shows how to expose a component property of type Laya.ShurikenParticleRenderer via @property, and use it to manipulate the particle system and its owning node's transform. The owner is cast to Laya.Sprite3D to allow position changes, while simulationSpeed is set directly on the particleSystem object. This technique enables direct access to component-specific features and must be used since the IDE supports only node and component type recognition for properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property( { type : Laya.ShurikenParticleRenderer } ) //组件类型\n    public p3dRenderer: Laya.ShurikenParticleRenderer;\n\n    onAwake(): void {\n\n        (this.p3dRenderer.owner as Laya.Sprite3D).transform.localPosition = new Laya.Vector3(0,5,5);\n        this.p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: 从摄像机生成射线实现交互检测（TypeScript）\nDESCRIPTION: 通过调用摄像机的 viewportPointToRay 方法，将屏幕点转换为射线，进行碰撞检测，实现点击屏幕获取对应场景中的物体位置，适用于对象拾取或交互操作。需结合场景物理系统RayCastAll方法使用，需依赖Laya的Physics模拟模块。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//在CameraControll.ts的onStart()方法中添加鼠标事件监听\n//Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);\n\n//鼠标按下时射线投射检测\nonMouseDown(e: Laya.Event) {\n    let point = new Laya.Vector2();\n    point.x = Laya.stage.mouseX;\n    point.y = Laya.stage.mouseY;\n    let ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\n    this.camera.viewportPointToRay(point, ray);\n    let outs: any[] = [];\n    this.scene.physicsSimulation.rayCastAll(ray, outs);\n    if (outs.length !== 0) {\n        for (let i = 0; i < outs.length; i++) {\n            let box = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1));\n            box.transform.position = new Laya.Vector3(outs[i].point.x, outs[i].point.y, outs[i].point.z);\n            this.scene.addChild(box);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chrome Debug URL for VIVO Mini Game\nDESCRIPTION: This code snippet shows the URL format required to connect the Chrome DevTools to a VIVO mini game running on a physical device.  Replace {IP} with the device's IP address.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/vivo/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nchrome-devtools://devtools/bundled/inspector.html?v8only=true&ws={IP}:5086/00010002-0003-4004-8005-000600070008\n```\n\n----------------------------------------\n\nTITLE: Initializing LayaAir3D and Setting Stage Properties\nDESCRIPTION: This code snippet initializes the LayaAir3D engine and sets the stage's scale and screen mode. It is a prerequisite for using the 3D functionalities of the engine. The `Laya3D.init` function initializes the engine, and `Laya.stage.scaleMode` and `Laya.stage.screenMode` configure the scaling and screen behavior of the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nLaya3D.init(0, 0);\nLaya.stage.scaleMode = Stage.SCALE_FULL;\nLaya.stage.screenMode = Stage.SCREEN_NONE;\n```\n\n----------------------------------------\n\nTITLE: Loading Subpackages in LayaAir\nDESCRIPTION: This code snippet illustrates how to load subpackages in a LayaAir game for VIVO mini game platform using Laya.loader.loadPackage. It includes the loading of a 3D scene from the subpackage and adding it to the main scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/vivo/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        //小游戏加载分包\n        Laya.loader.loadPackage(\"sub1\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n                let sp3: Laya.Sprite3D = res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub2/Sphere.lh\").then((res: any) => {\n                let sp3 = res.create();\n                this.scene3d.addChild(sp3);\n            });\n        })\n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ray and Performing Raycast - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a ray using `Laya.Ray` and perform a raycast to detect collisions with objects in the 3D scene.  It gets the mouse position to create the initial ray, performs a raycast using `raycastAll`, and then adds a cube at the point of intersection if a collision is detected.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n……省略若干代码\n*/\n//创建一个屏幕点\nlet point = new Laya.Vector2();\n//创建一个射线 Laya.Ray(射线的起点，射线的方向)\nlet ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\n//以鼠标点击的点作为原点\npoint.x = Laya.stage.mouseX;\npoint.y = Laya.stage.mouseY;\n//计算一个从屏幕空间生成的射线\n_camera.viewportPointToRay(point, ray);\n//拿到3D场景中射线碰撞的物体\n_scene3D.physicsSimulation.rayCastAll(ray,this.outs);\n//如果射线碰撞到物体\nif (this.outs.length !== 0) {\n    for (let i = 0; i < this.outs.length; i++){\n        //在射线击中的位置添加一个立方体\n        this.addBoxXYZ(this.outs[i].point.x, this.outs[i].point.y, this.outs[i].point.z );\n    }\t\t\n}\n/*\n……省略若干代码\n*/\n```\n\n----------------------------------------\n\nTITLE: Removing All Event Listeners for a Specific Caller in LayaAir\nDESCRIPTION: Demonstrates how to remove all event listeners associated with a specific execution context using offAllCaller.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//删除xxx对象下this执行域的全部侦听器\nthis.xxx.offAllCaller(this);\n```\n\n----------------------------------------\n\nTITLE: Illuminating Specific Layers with Layer Mask in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates how to use bitwise operations (`|` and `<<`) in TypeScript to set the `layerMask` property of a `FreeformLight2D` component in LayaAir. This selectively illuminates `Mesh2DRender` components on specified layers (layer 0 and layer 1 in this example). Requires LayaAir engine components like `Script`, `Sprite`, `FreeformLight2D`, and `Mesh2DRender`, and assumes Sprites with these components are assigned in the editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/BaseLight2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class lightTest extends Laya.Script {\n    declare owner: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    light1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    mesh1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    mesh2: Laya.Sprite;\n\n    private light1Render: Laya.FreeformLight2D;\n    private mesh1Render: Laya.Mesh2DRender;\n    private mesh2Render: Laya.Mesh2DRender;\n\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.light1Render = this.light1.getComponent(Laya.FreeformLight2D);\n        this.mesh1Render = this.mesh1.getComponent(Laya.Mesh2DRender);\n        this.mesh2Render = this.mesh2.getComponent(Laya.Mesh2DRender);\n\n        //设置mesh1位于0层（Default层）\n        this.mesh1Render.layer = 0;\n        //设置mesh2位于1层（自定义的第一个层）\n        this.mesh2Render.layer = 1;\n        //让光的遮罩与指定的0和1层发生交互，只照亮0和1层\n        this.light1Render.layerMask = 1 << 0 | 1 << 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Device Mute Following for Audio Playback in LayaAir with TypeScript\nDESCRIPTION: This line of code sets the Laya.SoundManager.useAudioMusic property to false, ensuring that background music playback will not automatically follow the device's hardware mute state. Required dependency: LayaAir SoundManager. Input: none directly (property toggle). Output: Audio will continue playing regardless of the device's mute toggle.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/media/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.SoundManager.useAudioMusic = false;\n```\n\n----------------------------------------\n\nTITLE: Clone Node - TypeScript\nDESCRIPTION: Clones a Sprite3D instance using the `clone()` method. After cloning, the position of the cloned object is set. Requires an existing Sprite3D instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n//克隆一个猴子\nlet sp = this.layaMonkeyParent.clone() as Laya.Sprite3D;\n//设置克隆猴子的坐标\nsp.transform.position = new Laya.Vector3(1,0,0);\n//添加到场景中\nthis.scene.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Triggering Animator Parameter in TypeScript\nDESCRIPTION: Activates a trigger parameter named \"Trigger\" on a Laya.Animator component using the `setParamsTrigger` method. This typically causes a one-time transition if a corresponding condition using this trigger exists in the Animator Controller. Assumes `this.animator` references a valid Laya.Animator instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//通过触发“Trigger”，来满足切换状态的条件\nthis.animator.setParamsTrigger( \"Trigger\" );\n```\n\n----------------------------------------\n\nTITLE: Playing Animator State by Name in TypeScript\nDESCRIPTION: Provides the method signature for `Animator.play()` and demonstrates its basic usage to start playing a specific animation state (\"Run\") by its name. The method allows optional specification of the layer index and normalized start time. Assumes `this.animator` is a valid Laya.Animator instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 播放动画。\n* @param\tname 如果为null则播放默认动画，否则按名字播放动画片段。\n* @param\tlayerIndex 层索引。\n* @param\tnormalizedTime 归一化的播放起始时间。\n*/\nplay(name: string | null = null, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//动画状态机，直接播放Run动画状态\nthis.animator.play(\"Run\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring SpotLight in LayaAir with TypeScript\nDESCRIPTION: This code creates a spotlight, configures its color, position, direction, range, intensity, and cone angle. Spotlights emit light in a specific direction with a cone-shaped area that enlarges with distance, similar to flashlights.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Light/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//聚光灯\nlet spotlightSprite = new Laya.Sprite3D();\nlet spotcom = spotlightSprite.addComponent(Laya.SpotLightCom);\nthis.scene.addChild(spotlightSprite);\n//设置聚光灯颜色\nspotcom.color = new Laya.Color(1, 1, 0, 1);\nspotlightSprite.transform.position = new Laya.Vector3(0.0, 1.2, 0.0);\n//设置聚光灯的方向\nvar mat: Laya.Matrix4x4 = spotlightSprite.transform.worldMatrix;\nmat.setForward(new Laya.Vector3(0.15, -1.0, 0.0));\nspotlightSprite.transform.worldMatrix = mat;\n//设置聚光灯范围\nspotcom.range = 1.6;\nspotcom.intensity = 8.0;\n//设置聚光灯锥形角度\nspotcom.spotAngle = 32;\n```\n\n----------------------------------------\n\nTITLE: Creating Fill Texture Command in LayaAir Graphics (TypeScript)\nDESCRIPTION: This code utilizes fillTexture() to fill a sprite with a texture, supporting optional parameters like position, size, fill type, offset, and color. It loads the texture asynchronously and applies it with repeat mode, adding the sprite to the display list. This method permits textured fill effects on graphics.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.loader.load(\"resources/layaAir.png\").then((res: Laya.Texture) => {\n    let sp = new Laya.Sprite();\n    // Fill with texture\n    sp.graphics.fillTexture(res, 0, 0, 500, 500, \"repeat\");\n    this.owner.addChild(sp);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Click Area with Sprite.hitArea in TypeScript\nDESCRIPTION: Demonstrates creating a Sprite with an image and attaching a click event listener that scales the Sprite down using `Laya.Tween`. It then creates a `Laya.HitArea` object, draws a rectangular shape onto it, and assigns this `hitArea` to the Sprite's `hitArea` property, restricting click detection to the defined rectangle instead of the entire image bounds.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet sp = new Laya.Sprite();\nLaya.stage.addChild(sp);\n// 加载并显示一个图片\nsp.loadImage(\"atlas/comp/image.png\", null);\n//设置图片的点击事件\nsp.on(\"click\", this, () => {\n\tLaya.Tween.to(sp, { scaleX: 0.5, scaleY: 0.5 }, 100);\n});\n//设置鼠标点击区域\nlet hitArea: Laya.HitArea = new Laya.HitArea();\nhitArea.hit.drawRect(0, 0, 100, 100, \"#00ff00\");\nsp.hitArea = hitArea;\n```\n\n----------------------------------------\n\nTITLE: 通过代码设置Bool参数满足切换条件\nDESCRIPTION: 使用Animator的setParamsBool方法，根据布尔参数的值控制动画状态切换。示例中通过设置\"Bool\"参数为true，触发状态转移，适用于依赖布尔条件的动画逻辑。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.setParamsBool( \"Bool\" , true );\n```\n\n----------------------------------------\n\nTITLE: Initializing 2D SpotLight Component in LayaAir using TypeScript\nDESCRIPTION: This TypeScript snippet defines a LayaAir Script class that initializes a 2D SpotLight2D component attached to a sprite. The setSpotLight() method sets the position of the spotLight sprite and configures its spotlight properties such as color, intensity, innerRadius, outerRadius, innerAngle, and outerAngle, enabling precise control over the spotlight's illumination area and falloff. Dependencies include LayaAir's TypeScript framework, and the code expects the spotLight property to be assigned a Laya.Sprite instance with a SpotLight2D component attached. The script executes its configuration in the onEnable lifecycle callback, which runs after the script is added to the scene node.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/SpotLight2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class SpotLight extends Laya.Script {\n\n    @property({ type: Laya.Sprite })\n    private spotLight: Laya.Sprite;\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        this.setSpotLight();\n    }\n\n    // 创建聚光灯\n    setSpotLight(): void {\n        this.spotLight.pos(336, 280);\n        let spotLightComponent = this.spotLight.getComponent(Laya.SpotLight2D);\n        spotLightComponent.color = new Laya.Color(1, 0.812, 1);\n        spotLightComponent.intensity = 1.0;\n        spotLightComponent.innerRadius = 50;\n        spotLightComponent.outerRadius = 200;\n        spotLightComponent.innerAngle = 50;\n        spotLightComponent.outerAngle = 150;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Object Types with @property() in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use custom object types with the `@property()` decorator. The Animal class is referenced by the MyScript class, and both are decorated with `@regClass()`.  This allows the properties of the Animal class, defined with `@property()`, to be displayed and edited in the IDE when the Animal object is assigned to the MyScript component's animal property. The Animal class must be marked with `@regClass()` even if it doesn't directly inherit from Laya.Script.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//MyScript.ts\nconst { regClass, property } = Laya;\n\nimport Animal from \"./Animal\";\n\n@regClass()\nexport class MyScript extends Laya.Script  {\n    @property({ type : Animal })\n    animal : Animal;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Animal.ts\nconst { regClass, property } = Laya;\n\n@regClass()\nexport default class Animal {\n    @property({ type : Number })\n    weight : number;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Custom Collision Group to a Collider (TypeScript)\nDESCRIPTION: This short snippet assigns a built-in custom collision group to a specific collider via Laya.Physics3DUtils. Here, the COLLISIONFILTERGROUP_CUSTOMFILTER2 (128) is demonstrated. Enables group-specific collision filtering with an easy-to-remember naming pattern. Requires an initialized collider.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器所属哪个碰撞组（COLLISIONFILTERGROUP_CUSTOMFILTER2对应的值为128）\nxxx.collisionGroup = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;\n```\n\n----------------------------------------\n\nTITLE: Preloading and Using 2D Compressed Textures in LayaAir TypeScript\nDESCRIPTION: This snippet demonstrates how to preload 2D texture files in LayaAir with platform-specific compressed texture formats, selecting file extensions (.pvr for iOS, .ktx for Android, and .png for others). It uses Laya.loader.load to load the texture asynchronously, then applies it to a UI element's skin property on completion. This approach ensures proper texture loading before usage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/VIP_Texture/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet textureFile: string = \"\";\n\nif (Laya.Browser.onIOS) {\n\ttextureFile = \"res/layabox.pvr\";\n} else if (Laya.Browser.onAndroid) {\n\ttextureFile = \"res/layabox.ktx\";\n} else {\n\ttextureFile = \"res/layabox.png\";\n}\n//预加载纹理文件\nLaya.loader.load([textureFile], Laya.Handler.create(this, () => {\n\tthis.aaa.skin = textureFile;\n}));\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Binary Data (ArrayBuffer) via WebSocket in LayaAir TypeScript\nDESCRIPTION: Shows how to create an ArrayBuffer, write integers using DataView, send it to a WebSocket server, and parse binary responses. Includes event-driven connection and message handling. Inputs include numerical payloads packed as little-endian 32-bit integers. Outputs are integer values parsed and logged from received ArrayBuffer. Relies on Laya.Socket, DataView, and ArrayBuffer.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\nimport Socket = Laya.Socket;\nimport Event = Laya.Event;\n\n@regClass()\nexport class ArrayBufferSocketDemo extends Laya.Script {\n    private socket: Socket;\n\n    onEnable(): void {\n        this.socket = new Socket();\n        this.socket.connectByUrl(\"wss://echo.websocket.org:443\");\n\n        this.socket.on(Event.OPEN, this, this.onSocketOpen);\n        this.socket.on(Event.MESSAGE, this, this.onMessageReceived);\n        this.socket.on(Event.ERROR, this, this.onConnectError);\n    }\n\n    private onSocketOpen(): void {\n        console.log(\"Socket Connected\");\n\n        // 创建一个 ArrayBuffer，大小为 8 字节\n        let buffer = new ArrayBuffer(8);\n        let view = new DataView(buffer);\n\n        // 写入整数\n        view.setInt32(0, 123456, true);  // 小端字节序\n        view.setInt32(4, 654321, true);\n\n        // 发送数据\n        this.socket.send(buffer);\n    }\n\n    private onMessageReceived(message: any): void {\n        if (message instanceof ArrayBuffer) {\n            // 创建 DataView 来解析 ArrayBuffer\n            const view = new DataView(message);\n            try {\n                // 解析数据\n                const num1 = view.getInt32(0, true); // 小端字节序\n                const num2 = view.getInt32(4, true);\n\n                // 打印解析结果\n                console.log(\"Received binary data:\");\n                console.log(\"Number 1:\", num1);\n                console.log(\"Number 2:\", num2);\n            } catch (error) {\n                console.error(\"Error parsing binary data:\", error);\n            }\n        } else {\n            console.log(\"Received non-binary message:\", message);\n        }\n    }\n\n    private onConnectError(): void {\n        console.log(\"Connection Error\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Implementation in LayaAir\nDESCRIPTION: Shows how to use both persistent (on) and one-time (once) event listeners in LayaAir. The example demonstrates listening for click events continuously and close events once.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//持续侦听click点击事件\nthis.xxx.on(Laya.Event.CLICK, this, () => {\n\t//侦听到事件后的逻辑代码...\n});\n\n//侦听一次close关闭事件\nthis.xxx.once(Laya.Event.CLOSE, this, this.onClosed);\n\nonClosed(): void {\n\t//侦听到事件后的逻辑代码...\n}\n```\n\n----------------------------------------\n\nTITLE: 使用 drawPath() 方法绘制矩形路径示例\nDESCRIPTION: 该代码演示了如何通过 drawPath 方法绘制矩形轮廓。定义路径数组包含“moveTo”和“lineTo”命令，描绘矩形轮廓线。参数中的路径点相对于起始位置，支持自定义路径。示例中填充颜色为红色，展示了路径绘图的应用方式。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//自定义路径\nlet path:Array<any> =  [\n[\"moveTo\", 0, 0], //画笔移到A点\n[\"lineTo\", 100, 0],//画到B点\n[\"lineTo\", 100, 50],//到C点\n[\"lineTo\", 0, 50], //到D点\n[\"closePath\"] //闭合路径\n];\n//绘制矩形\nsp.graphics.drawPath(20, 20, path, {fillStyle: \"#ff0000\"});\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Basic Types with @property()\nDESCRIPTION: This code shows how to use TypeScript basic types such as number, string, boolean, int, uint, text and any with the `@property` decorator.  For basic types the string name of the type can be used directly. Arrays are specified as `[\"type\"]`. Enums are also supported. Any type can be used as the type, but values of that type will be serialized, but not displayed or editable in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n//枚举\nenum TestEnum {\n    A,\n    B,\n    C\n};\n//字符串形式的枚举\nenum Direction {\n    Up = 'UP',\n    Down = 'DOWN',\n    Left = 'LEFT',\n    Right = 'RIGHT'\n};\n\n@regClass()\nexport class Script extends Laya.Script {\n\n    @property(Number)//数字类型，等价于{ type : \"number\" }\n    num : number;\n\n    @property(String)//单行字符串文本类型，等价于 { type: \"string\"}\n\tstr : string;\n\n    @property(Boolean)//布尔值类型，等价于 { type: \"boolean\"}\n\tbool : boolean;\n\n\t@property(\"int\")//整数类型，等价于 { type: Number, fractionDigits: 0 }\n\tint : number; \n\n    @property(\"uint\") //正整数类型，等价于 { type: Number, fractionDigits: 0 , min: 0 }\n    uint : number; \n\n    @property(\"text\")//多行字符串文本类型，等价于 { type: String, multiline: true }\n    text : string; \n\n    @property(\"any\")//any类型只会被序列化，不能显示和编辑。\n\ta : any; \n    \n    @property(Int8Array)//类型化数组类型,除了Int8Array，还支持Uint8Array、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array，使用方式都类似\n    i8a: Int8Array;\n        \n    @property({ type: [\"number\"] })//数组类型，用中括号包含数组元素类型\n    arr1: number[];\n\n    @property({ type: [\"string\"] })//数组类型，用中括号包含数组元素类型\n    arr2: string[];\n    \n    //普通的枚举类型（可以类型简写），会显示为下拉框供用户选择\n    @property(TestEnum)\n    enum: TestEnum;\n    \n\t//字符串形式的枚举，不能使用类型简写，如：@property(Direction)。必须下面带type参数指定的标准写法\n    @property({ type: Direction })\n    direc: Direction;\n    \n    //字典类型，需要用数组参数来设置类型，下面示例中的Record类型需要放到字符串内作为数组参数的第一个元素，数组参数的第二个元素是字典输入值的类型，用于决定属性面板的输入控件类型\n    @property({ type: [\"Record\", Number] })\n    dict: Record<string, number>; \n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Particle3D Class in TypeScript\nDESCRIPTION: This code snippet defines a custom Particle3D class that extends Laya.Sprite3D and manages the creation, playing, pausing, destroying, and object pooling of particle effects. It utilizes a custom Pool class for object pooling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/particleEditor3D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Node = Laya.Node;\nimport Sprite3D = Laya.Sprite3D;\nimport ShuriKenParticle3D = Laya.ShuriKenParticle3D;\nimport ShurikenParticleSystem = Laya.ShurikenParticleSystem;\nimport { Pool } from \"./Pool\";\n\n//粒子特效的基类，包括创建，播放，暂停，销毁，清理对象池\nexport class Particle3D extends Sprite3D  {\n\n    private _isInited: boolean = false;\n    private _filePath: string = null;\n    private _particle: Laya.Sprite = null;\n    private _shuriKenParticle3D: Array<ShuriKenParticle3D>= [];\n    private _shurikenParticleSystem: Array<ShurikenParticleSystem>= [];\n    constructor() \n    {\n        super();\n    }\n    \n\t//通过传入粒子特效的路径，创建一个粒子特效，从对象池里拿一个\n    static Create(path: string): Particle3D\n    {\n        var ret:Particle3D = Pool.getInstance().getItemByClass(\"Particle3D@\" + path, Particle3D);\n        ret.Init(path);\n        return ret;\n    }\n    \n\t//粒子特效初始化\n    private Init(file_path:string): void\n    {\n        if (this._isInited)\n        {\n            return;\n        }\n        this._filePath = file_path;\n\n        console.log(\"Particle3D\");\n        //从拿到的粒子系统克隆一个\n        var res = Laya.loader.getRes(file_path);\n        var particle = res.clone();\n\n        this._particle = particle;\n        //获取这个粒子特效的所有粒子系统，用于后面整体播放\n        for (var i = 0, len = this._particle.numChildren; i < len; i++)\n        {\n            var child:Node = this._particle.getChildAt(i);\n            if (child instanceof Laya.ShuriKenParticle3D)\n            {\n                this._shuriKenParticle3D.push(child);\n                this._shurikenParticleSystem.push(child.particleSystem);\n            }\n        }\n\n        this.addChild(this._particle);\n        this._isInited = true;\n    }\n\n\t//粒子特效播放，由于一个复杂的粒子特效由多个粒子系统组成，此时遍历粒子特效所有粒子系统对象调用play()\n    play(): void \n    {\n        for (var i = 0, len = this._shurikenParticleSystem.length; i < len; i++)\n        {\n            var particle_system = this._shurikenParticleSystem[i];\n            particle_system.simulate(0, true);\n            particle_system.play();\n        }\n    }\n\n\t//粒子特效暂停和恢复，由于一个复杂的粒子特效由多个粒子系统组成，此时遍历粒子特效所有粒子系统对象调用pause()和play()\n    pause(): void \n    {\n        for (var i = 0, len = this._shurikenParticleSystem.length; i < len; i++)\n        {\n            var particle_system:ShurikenParticleSystem = this._shurikenParticleSystem[i];\n            if (this._isPaused)\n            {\n                particle_system.play();\n                this._isPaused = false;\n            }\n            else\n            {\n                particle_system.pause();\n                this._isPaused = true;               \n            }\n        }\n    }\n\n\t//粒子系统对象池回收\n    Recover(): void\n    {\n        this.removeSelf();\n        Pool.getInstance().recover(this._filePath, this);\n    };\n\n\t//彻底销毁清理一个粒子特效对象\n    Clean(): void\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        this.Recover();\n\n        if (this._particle && !this._particle.destroyed)\n        {\n            this._particle.removeSelf();\n            this._particle.destroy(true);\n            this._particle = null;\n        }\n\n        this._shuriKenParticle3D = null;\n        this._shurikenParticleSystem = null;\n\n        this._isInited = false;\n\n        this.destroy(true);\n    };\n\n\t//通过传入粒子特效的路径，清除缓冲池\n    static ClearPool(root_path: string): void\n    {\n        if (root_path == null)\n        {\n            root_path = \"\";\n        }\n        Pool.getInstance().ClearGroup(\"Particle3D@\" + root_path, this, function(particle_3d:Particle3D)\n        {\n            particle_3d.Clean();\n        });\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Geolocation Retrieval on Mouse Click in LayaAir TypeScript\nDESCRIPTION: A LayaAir Script component demonstrating how to bind Geolocation.getCurrentPosition() to a mouse click event handler. Upon clicking, the script attempts to fetch the current device location, logging detailed location information (longitude, latitude, accuracy, altitude, heading, speed) on success and descriptive error messages on failure. This approach respects the requirement of user interaction before accessing geolocation data and includes permission error explanation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/geolocation/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tonMouseClick(evt: Laya.Event): void {\n\t\t// 尝试获取当前位置\n\t\tLaya.Geolocation.getCurrentPosition(\n\t\t\tLaya.Handler.create(this, this.onSuccess),\n\t\t\tLaya.Handler.create(this, this.onError)\n\t\t);\n\t\tconsole.log(\"click\");\n\t}\n\n\t// 成功获取位置后触发\n\tonSuccess(info: Laya.GeolocationInfo): void {\n\t\tconsole.log('经纬度: (' + info.longitude + '°\\u00B0, ' + info.latitude + '°\\u00B0)，精确度：' + info.accuracy + 'm');\n\n\t\tif (info.altitude != null)\n\t\t\tconsole.log('海拔：' + info.altitude + 'm' + (info.altitudeAccuracy != null ? ('，精确度：' + info.altitudeAccuracy + 'm') : ''));\n\n\t\tif (info.heading != null && !isNaN(info.heading))\n\t\t\tconsole.log('方向：' + info.heading + \"°\");\n\n\t\tif (info.speed != null && !isNaN(info.speed))\n\t\t\tconsole.log('速度：' + info.speed + \"m/s\");\n\t}\n\n\t// 获取位置失败后触发\n\tonError(err: any): void {\n\t\tvar errType: String;\n\t\tif (err.code == Laya.Geolocation.PERMISSION_DENIED)\n\t\t\terrType = \"Permission Denied\";\n\t\telse if (err.code == Laya.Geolocation.POSITION_UNAVAILABLE)\n\t\t\terrType = \"Position Unavailable\";\n\t\telse if (err.code == Laya.Geolocation.TIMEOUT)\n\t\t\terrType = \"Time Out\";\n\t\tconsole.log('ERROR(' + errType + '): ' + err.message);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a 3D Scene with Mouse Event Script and Collider in LayaAir - TypeScript\nDESCRIPTION: This snippet demonstrates creating a 3D scene and adding a camera, direction light, and a mesh (box) with a texture using LayaAir. It attaches a script for mouse event lifecycle and a physics collider enabling mouse-based physical interactions. Requires LayaAir with 3D and physics modules, and access to resources (e.g., textures). Inputs are implicit (scene setup); outputs are mouse event callbacks from the attached script for interactivity.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class GameUI extends ui.test.TestSceneUI {\n    constructor() {\n        super();\n\t\t\n        //添加3D场景\n        var scene: Laya.Scene3D = Laya.stage.addChild(new Laya.Scene3D()) as Laya.Scene3D;\n\n        //添加照相机\n        var camera: Laya.Camera = (scene.addChild(new Laya.Camera(0, 0.1, 100))) as Laya.Camera;\n        camera.transform.translate(new Laya.Vector3(0, 3, 3));\n        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);\n\n        //添加方向光\n        var directionLight: Laya.DirectionLight = scene.addChild(new Laya.DirectionLight()) as Laya.DirectionLight;\n        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);\n        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));\n\n        //添加自定义模型\n        var box: Laya.MeshSprite3D = scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1))) as Laya.MeshSprite3D;\n        box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);\n        var material: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\n\t\tLaya.Texture2D.load(\"res/layabox.png\", Laya.Handler.create(null, function(tex:Laya.Texture2D) {\n\t\t\t\tmaterial.albedoTexture = tex;\n\t\t}));\n        box.meshRenderer.material = material;\n\n        //为box模型节点添加3D脚本组件\n        box.addComponent(Script3DTest);\n        //为box模型节点添加物理组件\n        let _PhysicsCollider =  box.addComponent(Laya.PhysicsCollider);\n        //设置碰撞器\n        _PhysicsCollider.colliderShape = new Laya.BoxColliderShape();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Initialization Interface - TypeScript\nDESCRIPTION: This TypeScript code defines an interface `IExtendLib` which includes a function `initializeSteam`. It imports the native function `steam_demo.dll` using `Laya.importNative` and assigns it to the `extendLib` constant, thus setting up a bridge to call native Steam initialization functionalities.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IExtendLib {\n    // 初始化Steam\n    initializeSteam(): number;  // 返回1表示成功，0表示失败\n}\n\nexport const extendLib: IExtendLib = Laya.importNative(\"steam_demo.dll\");\n```\n\n----------------------------------------\n\nTITLE: Transformations - TypeScript\nDESCRIPTION: Demonstrates translation, rotation, and scaling of a Sprite3D. Requires a Sprite3D instance, Vector3 for translation, Vector3 for rotation, and setting localScale for scaling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//平移\nthis.position1.setValue(-1.5, 0, 0.0);\nthis.sprite3d.translate(this.position1);\n//旋转\nthis.rotate1.setValue(0, 60, 0);\nthis.sprite3d.rotate(this.rotate1, false, false);\n//缩放\nvar scale = this.sprite3d.localScale;\nscale.setValue(0.1, 0.1, 0.1);\nthis.sprite3d.localScale = scale;\n```\n\n----------------------------------------\n\nTITLE: Adding Sprite3D with MeshFilter and MeshRenderer Components in TypeScript\nDESCRIPTION: Constructs visible 3D objects by creating Sprite3D instances, attaching MeshFilter and MeshRenderer components, assigning created meshes and materials, and positioning within the scene. This process converts mesh data into renderable 3D models in the scene graph.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/displayObject/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet box = new Laya.Sprite3D;\nlet boxMesh = box.addComponent(Laya.MeshFilter);\nlet boxRender = box.addComponent(Laya.MeshRenderer);\n// 创建网格\nboxMesh.sharedMesh = Laya.PrimitiveMesh.createBox(0.5, 0.5, 0.5);\n// 创建材质\nlet boxMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\nboxRender.sharedMaterial = boxMaterial;\n// 添加到场景\nthis.scene.addChild(box);\n// 设置位置\nbox.transform.position = new Laya.Vector3(2.0, 0.25, 0.6);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 其他基本形状类似创建方法\n// 球体\nlet sphere = new Laya.Sprite3D;\nlet sphereMesh = sphere.addComponent(Laya.MeshFilter);\nlet sphereRender = sphere.addComponent(Laya.MeshRenderer);\n// 创建网格\nsphereMesh.sharedMesh = Laya.PrimitiveMesh.createSphere(0.25, 20, 20);\n// 材质赋值\nlet sphereMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\nsphereRender.sharedMaterial = sphereMaterial;\nthis.scene.addChild(sphere);\nsphere.transform.position = new Laya.Vector3(1.0, 0.25, 0.6);\n```\n\n----------------------------------------\n\nTITLE: Testing Mouse Through Property with Overlapping Sprites in LayaAir\nDESCRIPTION: This code snippet demonstrates how to test the Mouse Through property by registering mouse events on overlapping Sprite objects. It shows how event propagation changes based on the Mouse Through setting.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nonAwake(): void {\n        this.sprite1.on(Laya.Event.MOUSE_DOWN, this, this.test1);//设置监听,sprite1\n        this.sprite2.on(Laya.Event.MOUSE_DOWN, this, this.test2);//设置监听,sprite2\n    }\n    test1(e: Laya.Event) {\n        console.log('mouseSprite1')\n    }\n    test2(e: Laya.Event) {\n        console.log('mouseSprite2')\n    }\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Layers from Light Illumination (TypeScript)\nDESCRIPTION: This code shows how to exclude specific layers from being illuminated by a light in LayaAir. It uses the bitwise XOR operator to invert the bits representing the layers to be excluded, allowing other layers to be illuminated.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/BaseLight2D/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//基于前文示例代码，仅修改layerMask即可  \n//排除某些层之外(例如排除1层和2层)，可以照亮其它所有的层\nthis.light1Render.layerMask = -1 ^ (1 << 1) ^ (1 << 2);\n```\n\n----------------------------------------\n\nTITLE: Updating DCC via ZIP File (TypeScript)\nDESCRIPTION: Illustrates how to update the local DCC cache using a differential ZIP file generated by the DCC tools. It requires downloading the ZIP file to a local path first (shown with a helper function `downloadBigZip` using native capabilities like `conch.getCachePath` and `downloadBigFile`), then initializing the `LayaDCCClient`, and finally calling `updateByZip` with the local ZIP file path and a ZIP handling class (e.g., `Zip_Native`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n    async function downloadBigZip(url:string):Promise<string|null>{\n        let cachePath = conch.getCachePath();\n        let localfile =  cachePath+url.substring(url.lastIndexOf('/'));\n    \n        return new Promise((resolve,reject)=>{\n                downloadBigFile(url, localfile, (total, now, speed) => {\n                    console.log(`downloading:${Math.floor((now / total) * 100)}`)\n                    return false;0\n                }, (curlret, httpret) => {\n                    if (curlret != 0 || httpret < 200 || httpret >= 300) {\n                        resolve(null);\n                    }\n                    else {\n                        resolve(localfile);\n                    }\n                }, 10, 100000000);        \n            }\n        );\n    }\n\n    let zipfile = await downloadBigZip('http://10.10.20.26:8899/update/dccout1.zip')\n    let client = new DCCClient('http://101.10.20.26:6677/dccout2');\n    let iniok = await client.init(dccurl+'/head.json', null);\n    \n    await client.updateByZip(zipfile, Zip_Native,null);\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Millisecond Timers with Laya.Timer in TypeScript\nDESCRIPTION: Describes the once method which executes a callback once after a specified delay in milliseconds. It requires the delay, execution context (caller), callback, optional arguments, and whether to cover pre-existing timers. Invokes an internal _create method and is accessible via the Laya.timer singleton instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 定时执行一次。\n * @param\tdelay\t延迟时间(单位为毫秒)。\n * @param\tcaller\t执行域(this)。\n * @param\tmethod\t定时器回调函数。\n * @param\targs\t回调参数。\n * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n */\nonce(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\n    this._create(false, false, delay, caller, method, args, coverBefore);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Single Collision Group Filtering (TypeScript)\nDESCRIPTION: Sets the canCollideWith property to restrict a collider's collisions to only occur with objects in a specified group (here, custom filter group 1). Useful for optimizing performance or enforcing exclusive interactions. The snippet operates on an existing collider using Laya.Physics3DUtils constants.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器可以与其发生碰撞的碰撞组(本例只与自定义组1碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1;\n```\n\n----------------------------------------\n\nTITLE: Initializing HSlider with Script Control in LayaAir TypeScript\nDESCRIPTION: This snippet defines a custom script class that initializes an existing HSlider component by setting its position, skin, value, and other properties during the onAwake lifecycle method. It demonstrates how to programmatically manipulate HSlider attributes in a LayaAir scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/HSlider/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.HSlider })\n    public hslider: Laya.HSlider;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.hslider.pos(300, 300);//滑动条位置\n        this.hslider.skin = \"resources/hslider.png\";//滑动条底图皮肤\n        this.hslider.value = 0.5;\n        this.hslider.max = 50;\n        this.hslider.min = 0;\n        this.hslider.tick = 1;\n        this.hslider.showProgress = true;//必须存在hslider$progress.png资源，否则会报错\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring DirectionLight in LayaAir with TypeScript\nDESCRIPTION: This code demonstrates how to create a directional light, set its color, and configure its direction using a transformation matrix. Directional lights simulate light sources with fixed direction like sunlight and affect all models in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Light/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建方向光\nlet directlightSprite = new Laya.Sprite3D();\nlet dircom = directlightSprite.addComponent(Laya.DirectionLightCom);\nthis.scene.addChild(directlightSprite);\n//方向光的颜色\ndircom.color.setValue(1.0, 0.5, 0.0, 1);\n//设置平行光的方向\nvar mat: Laya.Matrix4x4 = directlightSprite.transform.worldMatrix;\nmat.setForward(new Laya.Vector3(-1.0, -1.0, -1.0));\ndirectlightSprite.transform.worldMatrix = mat;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Frame Rate Based on Activity in LayaAir\nDESCRIPTION: This snippet showcases how to set different stage frame rate modes such as FAST, SLOW, and MOUSE to optimize performance based on user activity. It demonstrates moving a sprite following mouse movement under SLOW mode for reduced CPU load, and then switching to MOUSE mode for increased responsiveness.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/CPU/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.init(this.Browser.width,this.Browser.height);\nLaya.Stat.show();\nLaya.stage.frameRate=Laya.Stage.FRAME_SLOW;\n\nvar sp=new Laya.Sprite();\nsp.graphics.drawCircle(0,0,20,\"#990000\");\nLaya.stage.addChild(sp);\n\nLaya.stage.on(Laya.Event.MOUSE_MOVE,this,function()\n{\n  sp.pos(Laya.stage.mouseX,Laya.stage.mouseY);\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.stage.frameRate = Laya.Stage.FRAME_MOUSE;\n```\n\n----------------------------------------\n\nTITLE: Creating VScrollBar Programmatically with Value Display in TypeScript\nDESCRIPTION: This example demonstrates how to create a VScrollBar component entirely through code. It includes loading scrollbar skin resources, creating and configuring the scrollbar, and displaying its current value in a Text component using a change handler.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/VScrollBar/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_VScrollBar extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n    // 文本组件，用于显示滚动条的value值\n    public text: Laya.Text;\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 创建文本组件\n        this.text = new Laya.Text();\n        this.text.pos(300, 260);\n        this.owner.addChild(this.text);\n\n        // 滚动条皮肤资源\n        var skins: any[] = [];\n        skins.push(\"atlas/comp/vscroll.png\", \"atlas/comp/vscroll$bar.png\", \"atlas/comp/vscroll$down.png\", \"atlas/comp/vscroll$up.png\");\n\n        Laya.loader.load(skins).then(() => {\n            // 创建滚动条\n            var vs: Laya.VScrollBar = new Laya.VScrollBar();\n            vs.skin = \"atlas/comp/vscroll.png\";\n            vs.height = 300;\n            vs.pos(300, 300);\n            vs.min = 0;\n            vs.max = 100;\n            vs.changeHandler = new Laya.Handler(this, this.onChange);\n            this.owner.addChild(vs);\n        });\n    }\n\n    private onChange(value: number): void {\n        this.text.text = \"滚动条的位置： value=\" + value;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Script-Based Mouse Event Detection to Multiple 3D Nodes in LayaAir - TypeScript\nDESCRIPTION: This snippet demonstrates how to attach a custom script to multiple 3D objects for object-level mouse event feedback using LayaAir. The MouseInteraction class initializes the scene and camera, then adds MouseEventScript to several 3D nodes. The SceneScript (example) script listens for mouse down events and displays the affected object's name in a UI text field. Dependencies include LayaAir's Script3D infrastructure and text object in the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码 */\n    \n \t//需要为每一个需要鼠标事件反馈的3D节点对象都添加检测脚本\n    staticLayaMonkey.addComponent(MouseEventScript);\n    layaMonkey_clone1.addComponent(MouseEventScript);\n    layaMonkey_clone2.addComponent(MouseEventScript);\n    layaMonkey_clone3.addComponent(MouseEventScript);\n  }\n}\n\n/** 鼠标事件检测脚本*/\nclass SceneScript extends Script3D {\n  onAwake() {\n    //获取文本对象\n    this.text = Laya.stage.getChildByName(\"text\");\n  }\n\n  /**鼠标在脚本所属的对象上按下时触发的事件生命周期方法*/\n  onMouseDown() {\n    //当鼠标在对象上按下时，显示文本\n    this.text.text = \"碰撞到了：\" + this.owner.name;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Requesting User Statistics - C++\nDESCRIPTION: This code snippet retrieves user statistics via SteamUserStats()->RequestUserStats(userID) and can reset all statistics for testing purposes using SteamUserStats()->ResetAllStats(true).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nbool SteamManager::Initialize()\n{\n    // 初始化的代码\n    ......\n    \n    // 请求用户统计数据\n    CSteamID userID = SteamUser()->GetSteamID(); // 获取用户ID\n    SteamUserStats()->RequestUserStats(userID);\n\n    // 重置成就，可用于测试时使用\n    // SteamUserStats()->ResetAllStats(true);\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript AppCache Interface for Manual DCC Cache Updates in LayaNative\nDESCRIPTION: Partial declaration of the AppCache interface highlighting methods to manage update cache. Key method updateFile allows updating a specific DCC cached file by its hashed name ID, checksum (0 to auto compute), content as ArrayBuffer, and a flag indicating whether to use external versioning. Returns boolean to signal update success based on checksum consistency. delAllCache clears all cached data. This interface relies on consistent file naming conventions and checksum validations, crucial for stable incremental updates.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/zipUpdate/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AppCache{\n    ...\n    \n    delAllCache():void;\n    /**\n     * 更新dcc中的一个文件\n     * @param nameid 更新的文件，自己计算。\n     *   路径规则：/，表示app根目录。例如：hashstr('/index.html')， 不要带参数，如果带参数的话-- hashstr('/aa/bb.html?ff=2') 会导致谁也找不到这个文件\n     * @param chksum 校验码，如果0则此函数自己计算。如果是外部版本控制，则这个是hashstr后的版本号。\n     * @param buf ArrayBuffer 文件内容。\n     * @param extversion 是否使用外部版本号\n     * @return boolean 如果返回true则表示更新成功，否则的话，表示校验码不一致，即\n     *      先要更新dcc才能工作。\n     */\n    updateFile(nameid:number,chksum:number,buf:ArrayBuffer,extversion:boolean):boolean;\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Hooks\nDESCRIPTION: This snippet demonstrates creating a scene hook using `@IEditorEnv.regSceneHook`. Scene hooks enable custom logic to be executed during scene-related events like loading, saving, node creation, and component creation.  The code provides example methods for each hookable event, though they currently do nothing. Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regSceneHook()\nexport class TestSceneHook implements IEditorEnv.ISceneHook {\n    onLoadScene() {\n    }\n\n    onSaveScene(scene: IEditorEnv.IGameScene, data: any) {\n    }\n\n    onCreateNode(scene: IEditorEnv.IGameScene, node: Laya.Node) {\n    }\n\n    onCreateComponent(scene: IEditorEnv.IGameScene, comp: Laya.Component) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LayaAir Buttons Programmatically (TypeScript)\nDESCRIPTION: This TypeScript script (`UI_Button`) demonstrates creating multiple LayaAir Button components dynamically using code. It defines layout constants, preloads necessary skin assets, calculates positioning offsets to center the buttons on the stage, and then instantiates, positions, and adds Button components to the scene in a grid layout within the `onUIAssetsLoaded` callback after resources are loaded. Depends on LayaAir engine classes and specified image resources.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Button/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Button extends Laya.Script {\n\n    private COLUMNS: number = 2;\n    private BUTTON_WIDTH: number = 147;\n    private BUTTON_HEIGHT: number = 165 / 3;\n    private HORIZONTAL_SPACING: number = 200;\n    private VERTICAL_SPACING: number = 100;\n\n    private xOffset: number;\n    private yOffset: number;\n\n    private skins: any[];\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 以下图片资源来自“引擎API使用示例”项目\n        this.skins = [\"resources/res/ui/button-1.png\", \"resources/res/ui/button-2.png\", \"resources/res/ui/button-3.png\",\n            \"resources/res/ui/button-4.png\", \"resources/res/ui/button-5.png\", \"resources/res/ui/button-6.png\"];\n\n        // 计算将Button至于舞台中心的偏移量\n        this.xOffset = (Laya.stage.width - this.HORIZONTAL_SPACING * (this.COLUMNS - 1) - this.BUTTON_WIDTH) / 2;\n        this.yOffset = (Laya.stage.height - this.VERTICAL_SPACING * (this.skins.length / this.COLUMNS - 1) - this.BUTTON_HEIGHT) / 2;\n\n        Laya.loader.load(this.skins).then(() => {\n            this.onUIAssetsLoaded();\n        });\n    }\n\n    private onUIAssetsLoaded(e: any = null): void {\n        for (var i: number = 0, len: number = this.skins.length; i < len; ++i) {\n            var btn: Laya.Button = this.createButton(this.skins[i]);\n            var x: number = i % this.COLUMNS * this.HORIZONTAL_SPACING + this.xOffset;\n            var y: number = (i / this.COLUMNS | 0) * this.VERTICAL_SPACING + this.yOffset;\n            btn.pos(x, y);\n            console.log(x, y);\n        }\n    }\n\n    private createButton(skin: string): Laya.Button {\n        var btn: Laya.Button = new Laya.Button(skin);\n        this.owner.addChild(btn);\n        return btn;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scene Closing Lifecycle Method\nDESCRIPTION: The onClosed lifecycle method that gets called when a scene is closed, which can be used for resource cleanup.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 关闭完成后，调用此方法（如果有关闭动画，则在动画完成后执行）\n * @param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。\n */\nonClosed(type: string = null): void {\n}\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Code from Native Code in Android Java\nDESCRIPTION: Demonstrates invoking JavaScript code execution from Android native Java using LayaNative's JNI interface. The static method `ConchJNI.RunJS` is called with a JavaScript alert command string, enabling the native Android environment to interactively execute scripts within the JavaScript VM hosted by LayaNative.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/Secondary_Development/readme.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n  ConchJNI.RunJS(\"alert('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing TextArea Programmatically in LayaAir with TypeScript\nDESCRIPTION: This code snippet shows how to create, skin, and initialize a LayaAir TextArea component purely through TypeScript code, without relying on the IDE for component instantiation. It loads an external skin image, sets font properties (family, size, bold), text color, position, size, and padding before adding the TextArea to the owner container. Prerequisites include access to the specified image assets and an owner node to which the TextArea is attached. Input: external skin resource path and owner container; output: a programmatically constructed, styled TextArea. Resource files used must exist at the specified file paths.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/TextArea/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_TextArea extends Laya.Script {\n\t\n\tprivate skin: string = \"resources/res/ui/textarea.png\";\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n\n\t\tLaya.loader.load(this.skin).then( ()=>{\n            this.onLoadComplete();\n        } );\n\t}\n\n\tprivate onLoadComplete(e: any = null): void {\n\n\t\tlet ta: Laya.TextArea = new Laya.TextArea(\"\");\n\t\tta.skin = this.skin;\n\n\t\tta.font = \"Arial\";\n\t\tta.fontSize = 18;\n\t\tta.bold = true;\n\n\t\tta.color = \"#3d3d3d\";\n\n\t\tta.pos(100, 15);\n\t\tta.size(375, 355);\n\n\t\tta.padding = \"70,8,8,8\";\n\n\t\tthis.owner.addChild(ta);\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Converting Device Coordinates to Baidu Map Format\nDESCRIPTION: Callback function for Geolocation.watchPosition that takes GPS coordinates and converts them to Baidu Map coordinates using the translation service.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 更新设备位置\nprivate updatePosition(p: Laya.GeolocationInfo): void {\n  // 转换为百度地图坐标\n  var point:any = new this.BMap.Point(p.longitude, p.latitude);\n  // 把原始坐标转换为百度坐标，部分设备的浏览器可能获取到的是谷歌坐标，这时第三个参数改为3才是正确的。\n  this.convertor.translate([point], 1, 5, this.convertToBaiduCoord);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing VideoNode via Code in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to create a VideoNode programmatically in LayaAir. It involves instantiation, adding the node to the stage, setting its position (`pos()`), setting the video source (`source`), and initiating playback (`play()`). This approach provides more control over the VideoNode's lifecycle and initial state compared to adding it via the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/VideoNode/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void { \n        let video = new Laya.VideoNode;\n        //添加到舞台\n        Laya.stage.addChild(video);\n        video.pos(200,200); //设置位置\n        video.source = \"resources/layaAir.mp4\"; //设置视频源文件\n        video.play(); //开始播放\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.runTimer Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.runTimer method. This method immediately executes a function previously scheduled with once, loop, frameOnce, or frameLoop and removes it from the timer queue.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 立即提前执行定时器，执行之后从队列中删除\n     * @param\tcaller 执行域(this)。\n     * @param\tmethod 定时器回调函数。\n     */\n    runTimer(caller: any, method: Function): void {\n        var handler: TimerHandler = this._getHandler(caller, method);\n        if (handler && handler.method != null) {\n            this._map[handler.key] = null;\n            handler.run(true);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Float Parameter Values for Animator Transitions in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to programmatically set the value of a `Float` parameter within an `Animator` component using the `setParamsNumber` method. By changing parameter values like this (\"Float\" set to 2 in the example), developers can trigger state transitions defined in the Animator Controller based on the conditions associated with that parameter. This requires an existing `Animator` instance referenced by `this.animator`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//通过设置“Float”参数的值，来满足切换状态的条件\nthis.animator.setParamsNumber( \"Float\" , 2 );\n```\n\n----------------------------------------\n\nTITLE: Detecting Multiple 3D Object Collisions with rayCastAll in LayaAir - TypeScript\nDESCRIPTION: This snippet demonstrates using the rayCastAll method for penetration detection to handle situations where multiple 3D objects are stacked or overlapped. Dependencies include the LayaAir 3D engine and its physics simulation. The MouseInteraction class tracks all hit results on mouse down, storing them in an array, and logs the names of all collided objects. Ray and scene/camera initialization are required, as is listening for mouse events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;  \n  /** 输出射线检测碰到的全部目标对象 */\n  private _outs: Array<any> = [];\n  private _ray: Laya.Ray;\n  private point: Laya.Vector2 = new Laya.Vector2();\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码 */\n    \n    //射线初始化（必须初始化）\n    this._ray = new Ray(new Vecntetor3(0, 0, 0), new Vector3(0, 0, 0));\n    //侦听舞台上的鼠标事件\n    Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);    \n  }\n  \n  /** 鼠标按下时的逻辑处理 */\n  onMouseDown(): void {\n    this.point.x = Laya.stage.mouseX;\n    this.point.y = Laya.stage.mouseY;\n    //用舞台上的鼠标坐标，产生一条3D空间射线\n    this._camera.viewportPointToRay(this.point, this._ray);\n    \n    //使用物理引擎的射线检测方法，穿透检测多个\n    this._scene.physicsSimulation.rayCastAll(this._ray, this._outs);\n    if (this._outs.length > 0) {\n      for (let i = 0; i < this._outs.length; i++) {\n        console.log(\"碰撞到物体(\" + i + \"): \" + this._outs[i].collider.owner.name);\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Initialization Callback with LayaAir in JavaScript\nDESCRIPTION: This snippet demonstrates how to use LayaAir's API to register a callback function before the engine's initialization phase. This is particularly important for custom physics engines that require pre-initialization steps, such as loading external resources or initializing WebAssembly modules. The primary function used is Laya.addBeforeInitCallback(), which accepts a callback function to insert custom initialization logic before the scene starts.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customPhysicsEngine/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nLaya.addBeforeInitCallback(() =&gt; {\n    // Custom initialization logic here, e.g., loading wasm or other resources\n});\n```\n\n----------------------------------------\n\nTITLE: 控制Dialog关闭按钮事件的TypeScript脚本\nDESCRIPTION: 定义一个脚本类，绑定关闭按钮点击事件，在点击时关闭Dialog弹窗。依赖LayaAir引擎事件库，确保closeBtn节点已在场景中定义。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Dialog/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n\n    onAwake(): void {\n        this.closeBtn.on(Laya.Event.CLICK, this, () => {\n            this.close();\n        });\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Animation Node Programmatically in LayaAir with TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to create an Animation node dynamically in a LayaAir script component and add it to the scene during runtime. It defines a UI_Animation class extending Laya.Script, with a setup method instantiating an Animation object, setting its position, size, animation source atlas, playback interval, auto play enabling, and wrap mode to pingpong. Finally, it attaches the Animation node to the owner node, making it visible in the scene. This approach suits scenarios where the animation should be added conditionally or on demand. The script depends on the LayaAir framework and the pre-existence of the referenced atlas resource.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Animation/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Animation extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.setup();\n    }\n\n    private setup(): void {\n\n        var Animation: Laya.Animation = new Laya.Animation();\n        Animation.pos(200, 200); //设置节点位置\n        Animation.source = \"resources/role.atlas\"; //接收动画数据源为图集\n        Animation.size(600, 275); //设置节点大小\n        Animation.interval = 100; //动画播放的帧间隔时间为100毫秒\n        Animation.autoPlay = true; //开启自动播放\n        Animation.wrapMode = 2; //播放模式为pingpong播放模式（PINGPONG）\n        this.owner.addChild(Animation) //添加节点\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Network Loading of Resources\nDESCRIPTION: This snippet shows how to load resources from a network using `Laya.URL.basePath` and `Laya.loader.load`.  It demonstrates setting a base URL and then loading an image resource. All subsequent calls to `Laya.loader.load` will then prepend the `basePath` before loading the resource from the specified network location. The code then uses the loaded texture to create a Sprite and adds it to the display list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/wechat/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonAwake(): void {\n        //网络动态加载\n        Laya.URL.basePath = \"https://XXXX\";//请把XXX换成自己的真实网址；\n        //在此之下，再使用load加载资源，都会自动加入URL网址。从网络上动态加载。\n        Laya.loader.load(\"resources/layaair.png\").then((res: Laya.Texture) => {\n            let sprite:Laya.Sprite = new Laya.Sprite();\n            sprite.texture = res;\n            this.owner.addChild(sprite);\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a LayaNative Project with Latest SDK Version (Shell)\nDESCRIPTION: Creates a native project using `layanative3 createapp`. It specifies the resource folder (`-f SnowBallH5`), bundles resources (`-t 1`), names the native project (`-n SnowBallNative`), and provides the game URL (`-u`). Since no SDK version (`-v`) or path (`-s`) is specified, it defaults to using the latest available SDK.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/build_Cmd/readme.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ layanative3 createapp -f SnowBallH5 -t 1 -n SnowBallNative -u http://10.10.20.102:8899/index.js\n```\n\n----------------------------------------\n\nTITLE: Setting a Rigidbody as a Trigger in LayaAir 3D Physics\nDESCRIPTION: Code showing how to obtain physics rigidbody components from objects and configure one of them as a trigger to disable physical feedback while maintaining collision detection.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n……省略若干代码\n*/\n\n//获取物理刚体组件\nthis.rigidbody1 = this.cube1.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\nthis.rigidbody2 = this.cube2.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n\n//设置rigidbody1为触发器,取消物理反馈\nthis.rigidbody1.isTrigger = true;\nthis.rigidbody2.isTrigger = false;\n\n/*\n……省略若干代码\n*/\n```\n\n----------------------------------------\n\nTITLE: Calling Component Methods with Parameters and Awaiting Result from UI Process in LayaAir3-IDE Using TypeScript\nDESCRIPTION: Demonstrates executing a method on a script component attached to a scene node from the UI process asynchronously, passing parameters and receiving the return value. It uses Editor.scene.runNodeScript with node and component IDs along with the method name and arguments. This enables UI process scripts to interact with running scene logic seamlessly. Dependencies include the Editor namespace and an appropriate asynchronous environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是UI进程代码\n\n//获取选中的节点\nlet node = Editor.scene.getSelection()[0];\n\n//调用MyScript组件里的test方法，传入参数abc\nlet ret = await Editor.scene.runNodeScript(node.id, node.getComponent(\"MyScript\").id, \"test\", \"abc\");\nconsole.log(ret);\n```\n\n----------------------------------------\n\nTITLE: Vector type constructions in GLSL - GLSL\nDESCRIPTION: Illustrates common ways to create GLSL vector variables of types vec2, vec3, and vec4, including constructing vec3 from a single float to replicate components and mixing floats with existing vectors to form larger vectors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_9\n\nLANGUAGE: glsl\nCODE:\n```\nvec2 v1 = vec2(1.0, 0.0);\nvec3 v2 = vec3(1.0); // v2 = [1.0, 1.0, 1.0]\nvec4 v3 = vec4(1.0, 0.0, vec2Value); //v3 = [1.0, 1.0, vec2Value.x, vec2Value.y]\n```\n\n----------------------------------------\n\nTITLE: 利用play()方法播放指定动画\nDESCRIPTION: 调用Animator的play()方法播放特定动画，可指定动画名、起始时间和层索引，支持从播放器指定位置开始播放，适合需要精确控制动画起点的场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.play(\"Run\");\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.play(\"Stand\", 0 , 0.5);\n```\n\n----------------------------------------\n\nTITLE: Loading 3D Compressed Textures in LayaAir Using TypeScript\nDESCRIPTION: This snippet demonstrates how to load 3D textures with support for platform-specific compressed texture formats in LayaAir using TypeScript. On Android, it loads ETC1 compressed textures with a .ktx extension using Laya.loader.load; for other platforms, it loads regular jpg textures using Laya.Texture2D.load. It uses platform detection via Laya.Browser and callback handlers to assign the loaded texture to a material's albedoTexture property. This pattern reduces CPU decoding overhead by loading precompressed GPU-friendly texture formats.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/VIP_Texture/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//检测安卓平台\nif (Laya.Browser.onAndroid) {\n\t\t//注意这里的加载\n    Laya.loader.load(\"res/layabox.ktx\", Laya.Handler.create(null, function (tex: Laya.Texture2D) {\n            material.albedoTexture = tex;\n    }));\n\n} else {\n\t\t//注意这里的加载\n \t\tLaya.Texture2D.load(\"res/layabox.jpg\", Laya.Handler.create(null, function (tex: Laya.Texture2D) {\n            material.albedoTexture = tex;\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Chrome DevTools for OPPO Mini Game Debugging\nDESCRIPTION: Provides the URL format to input into the Chrome browser address bar to initiate a remote debugging session with an OPPO Mini Game running on a connected device. Requires replacing the placeholder IP address (e.g., '10.10.82.111') and port (e.g., '12345') with the device's actual network details. Both the PC and the device must be on the same local network segment for this connection to work.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/OPPO/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndevtools://devtools/bundled/inspector.html?v8only=true&ws=10.10.82.111:12345/00010002-0003-4004-8005-000600070008\n```\n\n----------------------------------------\n\nTITLE: Checking Animation Completion in a Laya.Script (TypeScript)\nDESCRIPTION: Presents a complete Laya.Script example (`Main`) demonstrating how to trigger an animation (\"Run\") using `crossFade` on a button click and then use `Laya.timer.frameLoop` to continuously check the `normalizedTime` of the current play state. When `normalizedTime` reaches or exceeds 1 (indicating one full loop/playthrough is complete), it transitions back to the \"Stand\" state using `crossFade` and clears the timer loop. Requires scene setup with a Label, a Sprite3D (`target`) with an Animator component, and this script attached.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property( { type: Laya.Label } )\n    private label: Laya.Label;  \n    @property( { type: Laya.Sprite3D } )\n    private target: Laya.Sprite3D; \n\n    private animator : Laya.Animator;\n\n    onStart() {\n        this.label.on( Laya.Event.CLICK, this, this.test );\n        //获得状态机\n        this.animator = this.target.getComponent<Laya.Animator>(Laya.Animator);\n    }\n\n    //运行状态机的跑动画，可使用动作融合方式\n    test(e: Laya.Event) \n    {\n        //动画状态机，过渡融合到Run动画状态\n        this.animator.crossFade(\"Run\", 0.1);\n        //等待动画播放完成\n        Laya.timer.frameLoop(1,this,()=>{\n            //如果当前播放state已经播放完了一次\n            if(this.animator.getControllerLayer(0).getCurrentPlayState().normalizedTime >= 1){\n                //回到站立状态\n                this.animator.crossFade(\"Stand\", 0.1);\n                Laya.timer.clearAll(this);\n            } \n        });        \n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting All 3D Mouse Click Penetration Collisions with LayaAir - TypeScript\nDESCRIPTION: This snippet extends the basic collision detection to handle ray penetration and detect all 3D objects along the mouse click ray. It accumulates all collisions into an array and logs the names of each object detected. Requires LayaAir with physics simulation, and uses the rayCastAll method. Inputs are stage mouse coordinates; outputs are the logged names of all objects hit by the ray. This allows for handling object overlap/penetration situations, returning multiple results.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MouseInteraction {\n  private _scene: Laya.Scene3D;\n  private _camera: Laya.Camera;  \n  /** 输出射线检测碰到的全部目标对象 */\n  private _outs: Array<any> = [];\n  private _ray: Laya.Ray;\n  private point: Laya.Vector2 = new Laya.Vector2();\n  onEnable(): void {\n    //创建3D场景\n    this._scene = (<Laya.Scene3D>Laya.stage.addChild(new Laya.Scene3D()));\n    //添加3D摄像机\n    this._camera = (<Laya.Camera>(this._scene.addChild(new Laya.Camera(0, 0.1, 100))));\n    \n    /** 省略若干代码 */\n    \n    //射线初始化（必须初始化）\n    this._ray = new Ray(new Vecntetor3(0, 0, 0), new Vector3(0, 0, 0));\n    //侦听舞台上的鼠标事件\n    Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);    \n  }\n  \n  /** 鼠标按下时的逻辑处理 */\n  onMouseDown(): void {\n    this.point.x = Laya.stage.mouseX;\n    this.point.y = Laya.stage.mouseY;\n    //用舞台上的鼠标坐标，产生一条3D空间射线\n    this._camera.viewportPointToRay(this.point, this._ray);\n    \n    //使用物理引擎的射线检测方法，穿透检测多个\n    this._scene.physicsSimulation.rayCastAll(this._ray, this._outs);\n    if (this._outs.length > 0) {\n      for (let i = 0; i < this._outs.length; i++) {\n        console.log(\"碰撞到物体(\" + i + \"): \" + this._outs[i].collider.owner.name);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Native img Element in LayaAir with TypeScript\nDESCRIPTION: This snippet showcases how to create and manipulate a native HTML img element within a LayaAir TypeScript project by accessing the browser's native DOM through Laya.Browser.document. It sets styles, assigns the source URL formatted with LayaAir URL utilities for compatibility during preview and deployment, adds an onclick event to hide the image, and appends the element to the document body. The snippet depends on correct LayaAir framework setup and proper resource placement under the 'resources' directory. The input is the image resource path; the output is a clickable native img element rendered on the page, allowing integration of native DOM manipulation alongside LayaAir rendering.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/generalSetting/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建原生img对象\nlet img:any = Laya.Browser.document.createElement(\"img\");\n//设置样式\nimg.style = \"position:absolute;left:10;top:10;cursor:pointer;\";\n//指定资源地址\nimg.src = Laya.URL.postFormatURL(Laya.URL.formatURL(\"resources/bg2.png\"));\n//设置img元素的属性\nimg.setAttribute(\"onclick\", \"this.style.display=\\'none\\'\");\n//添加到页面\nLaya.Browser.document.body.appendChild(img);\n```\n\n----------------------------------------\n\nTITLE: Including Built-in GLSL Files in LayaAir Shaders (GLSL)\nDESCRIPTION: Shows the syntax for including standard GLSL utility files provided by the LayaAir engine (typically registered via `Shader3D.addInclude`). These files can be included directly by name within a GLSL block inside a `.shader` file.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_17\n\nLANGUAGE: GLSL\nCODE:\n```\n#include \"Color.glsl\";\n```\n\n----------------------------------------\n\nTITLE: 绘制矩形的 drawRect() 方法及示例\nDESCRIPTION: 此代码定义了使用LayaAir引擎的 drawRect 方法绘制矩形的具体实现。函数参数包括位置、尺寸、填充与边框颜色、边框宽度以及是否使用百分比。示例中在Sprite的graphics对象中调用该方法，绘制一个黄色填充边框为绿色、宽度5的矩形。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//画矩形\nsp.graphics.drawRect(20, 20, 100, 50, \"#ffff00\", \"#00ff00\", 5, false);\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Controlling FontClip Component via Script in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates attaching a custom script component in LayaAir to manipulate a FontClip instance. It sets position, size, pivot, skin resource, sheet character mapping, displayed value, alignment direction, and horizontal spacing to customize how sliced font bitmaps display at runtime. The snippet requires the LayaAir engine's core and UI modules and proper resource paths for textures. Inputs include stage dimensions and FontClip properties; outputs are visual placements and sliced bitmap text rendering on the scene. It serves as an example of script-driven UI control inside a Scene2D.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/FontClip/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property( { type : Laya.FontClip } )\n    public fontclp: Laya.FontClip;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.fontclp.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        this.fontclp.size(500, 60); //大小\n        this.fontclp.pivot(this.fontclp.width/2, this.fontclp.height/2); //轴心点\n\n        this.fontclp.skin = \"atlas/comp/fontClip_num.png\";\n        this.fontclp.sheet = \"0123456789\"; \n        this.fontclp.value = \"5201314\"; \n\n        this.fontclp.direction = \"horizontal\"; //位图排列方向\n        this.fontclp.spaceX = 50; //水平间隔\n\n        // this.fontclp.direction = \"vertical\"; //位图排列方向\n        // this.fontclp.spaceY = 10; //垂直间隔\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Messages on Windows Platform in C\nDESCRIPTION: Demonstrates registering synchronous and asynchronous message handler callbacks on Windows using `conchSetHandleMessageCallback`. Handlers respond to specific event names by calling `conchSendHandleMessageResult` to send results back to JavaScript. The example uses lambda functions to check event names and send appropriate replies, within the WinMain entry point function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/platform_communication/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nCONCH_EXPORT void CONCH_CDECL conchSetHandleMessageCallback(handleSyncMessageCallback handleSyncMessageCb,\n                                                            handleAsyncMessageCallback handleAsyncMessageCb);\nCONCH_EXPORT void CONCH_CDECL conchSendHandleMessageResult(const char *eventName, const char *result);\n```\n\nLANGUAGE: c\nCODE:\n```\nint WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd)\n{\n    conchSetHandleMessageCallback(\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"syncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"sync message from platform\");\n            }\n        },\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"asyncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"async message from platform\");\n            }\n        });\n    return conchMain(hInstance, hPrevInstance, lpCmdLine, nShowCmd);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.runCallLater Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.runCallLater method. This method immediately executes a function previously scheduled with callLater and removes it from the queue.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 立即执行 callLater 。\n     * @param\tcaller 执行域(this)。\n     * @param\tmethod 定时器回调函数。\n     */\n    runCallLater(caller: any, method: Function): void {\n        CallLater.I.runCallLater(caller, method);\n    }\n```\n\n----------------------------------------\n\nTITLE: Effect Classes with Pool Integration in LayaAir\nDESCRIPTION: Example of integrating object pooling into effect classes. Shows how to create standardized create and recover methods across different effect types.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class EffectA {    \n    \n    constructor() {\n        super();\n    }\n    \n    static create(): EffectA {\n\t\tPool.getItemByClass(EffectA);\n\t}\n\n    recover(): void {\n    \tPool.recoverByClass(this);\n    }\n    \n}\n\nexport class EffectB {    \n    \n    constructor() {\n        super();\n    }\n    \n    static create(): EffectB {\n\t\tPool.getItemByClass(EffectB);\n\t}\n\n    recover(): void {\n    \tPool.recoverByClass(this);\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Translating Child Node Independently in Hierarchy (TypeScript)\nDESCRIPTION: Illustrates moving a child node to show that parent nodes remain unaffected, using the translate method on layaMonkeySon. Requires layaMonkeySon to be a Sprite3D instance with transform property.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.layaMonkeySon.transform.translate(new Laya.Vector3(-0.2, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating and positioning TiledMap instance in LayaAir using TypeScript\nDESCRIPTION: This snippet initializes a TiledMap object, defines a viewport rectangle, and creates a map from a JSON configuration file, with a callback for load completion. It appears in the context of setting up the map environment for rendering.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    private tMap:Laya.TiledMap;\n\n    onEnable() {\n\n\t\t//创建地图对象\n\t\tthis.tMap = new Laya.TiledMap();\n        //创建Rectangle实例，视口区域\n        var viewRect:Laya.Rectangle = new Laya.Rectangle(0, 0, Laya.stage.designWidth, Laya.stage.designHeight);\n        //创建TiledMap地图\n        this.tMap.createMap(\"resources/TiledMap/orthogonal.json\", viewRect, new Laya.Handler(this, this.completeHandler));\n    }\n\n    //添加地图到Scene2D下\n\tprivate onLoaded(): void {\n\t\tthis.tMap.mapSprite().removeSelf();\n\t\tthis.owner.addChild(this.tMap.mapSprite());\n\t}\n\n\t//地图加载完成的回调\n\tprivate completeHandler(e: any = null): void {\n\t\tthis.onLoaded();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ray in LayaAir\nDESCRIPTION: This snippet shows how to create a ray using the Laya.Ray class and how to calculate it from a screen point using viewportPointToRay(). It prepares for the raycasting process by initializing a ray object from a start point and direction.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//创建一个屏幕点\nlet point = new Laya.Vector2();\n//创建一个射线 Laya.Ray(射线的起点，射线的方向)\nlet ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\n//以鼠标点击的点作为原点\npoint.x = Laya.stage.mouseX;\npoint.y = Laya.stage.mouseY;\n//计算一个从屏幕空间生成的射线\n_camera.viewportPointToRay(point, ray);\n```\n\n----------------------------------------\n\nTITLE: Implementing Day-Night Cycle with Directional Light in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to create a dynamic day-night cycle effect by controlling the intensity of a Directional Light in a LayaAir 2D scene. The script updates the light's intensity based on the simulated time of day, creating a smooth transition between day and night.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/DirectionLight2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class DayNight extends Laya.Script {\n    declare owner: Laya.Sprite;\n\n    private lightComp: Laya.DirectionLight2D;\n    private dayTime: number = 0;\n    private dayDuration: number = 24; // 一个完整周期的秒数\n\n    private displayText: Laya.Text; // 文本显示当前时间\n\n    onAwake(): void {\n        this.lightComp = this.owner.getComponent(Laya.DirectionLight2D);\n\n        // 初始化文本组件\n        this.displayText = new Laya.Text();\n        this.displayText.color = \"#ffffff\";\n        this.displayText.font = \"Arial\";\n        this.displayText.fontSize = 24;\n        this.displayText.bold = true;\n        this.displayText.x = 10; // 例如，设置在屏幕左上角\n        this.displayText.y = 10;\n        this.owner.scene.addChild(this.displayText); // 在场景中添加文本显示\n    }\n\n    onUpdate(): void {\n        // 更新时间\n        this.dayTime = (this.dayTime + Laya.timer.delta / 1000) % this.dayDuration;\n        const totalMinutes = Math.floor((this.getAdjustedProgress()) * 24 * 60);\n        const hours = Math.floor(totalMinutes / 60);\n        const minutes = totalMinutes % 60;\n        const timeString = `${this.padNumber(hours)}:${this.padNumber(minutes)}`;\n        // 更新文本显示\n        this.displayText.text = `时间: ${timeString}`;\n\n        // 计算当前时间的光照强度\n        const timeProgress = this.dayTime / this.dayDuration;\n        this.updateLightByTime(timeProgress);\n    }\n    private padNumber(num: number): string {\n        return num < 10 ? `0${num}` : `${num}`;\n    }\n    private getAdjustedProgress(): number {\n        return (this.dayTime) % this.dayDuration / this.dayDuration;\n    }\n    private updateLightByTime(progress: number): void {\n        let intensity = 0;\n        if (progress < 0.125) {\n            intensity = 0.2;\n        } else if (progress < 0.375) {\n            const t = (progress - 0.125) / 0.25;\n            intensity = 0.2 + t * 0.8;\n        } else if (progress < 0.708) {\n            intensity = 1.0;\n        } else if (progress < 0.833) {\n            const t = (progress - 0.708) / 0.125;\n            intensity = 1.0 - t * 0.8;\n        } else {\n            intensity = 0.2;\n        }\n        this.lightComp.intensity = intensity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Asynchronously with TypeScript\nDESCRIPTION: This snippet demonstrates the asynchronous loading of a scene using the `loadSceneAsync` method.  It takes a key (string) to identify the scene resource and returns a Promise that resolves to a `LoadResult` containing the scene's path. The `Laya.Scene.open()` method is then used to open the loaded scene. Prerequisites include the Addressables plugin and the Laya framework.  The output is the loaded scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 加载场景\n * @description 在 {@link LoadResult.data} 中返回加载场景所需的路径\n * @param key 用来筛选资源的关键字\n * @param options\n * @returns {Promise<LoadResult>} 在 {@link LoadResult.data} 中返回加载的场景的路径\n */\nstatic async loadSceneAsync(key: string, options?: LoadSceneOptions): Promise<LoadResult> \n```\n\n----------------------------------------\n\nTITLE: Implementing Centralized Button Scaling Logic in LayaAir Base Class (TypeScript)\nDESCRIPTION: This TypeScript snippet presents the complete implementation of the `Main` base script class. The `baseUI` method triggers `searchButton`, which recursively traverses the node hierarchy passed to it (typically the scene's UI Runtime). It identifies all `Laya.Button` instances and attaches `MOUSE_DOWN` and `MOUSE_UP` event listeners (`onButtonScaleEvent`) to implement a simple scaling animation (`_onScaleBtnDown`, `_onScaleBtnOut`) on interaction. Requires the LayaAir engine and its UI components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    //用来统一处理ui的事情，比如自适应，缩放所有Button\n    public baseUI(ui: Laya.Scene) {\n        this.searchButton(ui);\n    }\n\n    //找出所有ui下的Button包括子节点下\n    searchButton(ui: Laya.Node) {\n        for (let i = 0; i < ui.numChildren; i++) {\n            let child = ui.getChildAt(i);\n            if (child instanceof Laya.Button) {\n                console.log(\"发现Button\");\n                this.onButtonScaleEvent(child);\n            }\n            else {\n                //查找子节点\n                this.searchButton(child);\n            }\n        }\n    }\n\n    //处理按钮缩放事件\n    onButtonScaleEvent(target: Laya.Button) {\n        target.on(Laya.Event.MOUSE_DOWN, this, this._onScaleBtnDown);\n        target.on(Laya.Event.MOUSE_UP, this, this._onScaleBtnOut);\n    }\n\n    //按钮放大\n    _onScaleBtnDown(e: Laya.Event) {\n        console.log(\"开始缩放\");\n        e.target.scale(1.1, 1.1);\n    }\n\n    //按钮还原\n    _onScaleBtnOut(e: Laya.Event) {\n        console.log(\"取消缩放\");\n        e.target.scale(1.0, 1.0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DebugPanel Initialization for Redraw Detection\nDESCRIPTION: This code snippet demonstrates how to initialize the DebugPanel in LayaAir to detect UI redraws. The DebugPanel allows developers to visualize which parts of the UI are being redrawn, aiding in the optimization of cacheAs usage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/cacheAs/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nDebugPanel.init();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Resource Preview Panel - TypeScript\nDESCRIPTION: Shows how to create a custom UI panel that appears in the IDE's preview area when a specific asset type is selected. The class is registered with `@IEditor.panel` with `usage: \"preview\"`. It includes methods like `create` for panel initialization, `accept` to filter applicable assets (e.g., extension \"abc\"), and `refresh` to update the panel's content or interact with a 3D rendering canvas.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n    Panel usage must be preview\n    When a resource is selected, the accept method of all panels with usage preview is called, the first one returning true will be displayed\n    Panel order is usually determined by registration order, but can also be specified by the order parameter, smaller order means judged earlier. For example\n    { usage : \"preview\", order: -1 }\n*/    \n@IEditor.panel(\"TestPreview\", { usage: \"preview\" })\nexport class TestPreview extends IEditor.EditorPanel implements IEditor.IPreviewPanel {\n\n    async create(): Promise<void> {\n        this._panel = new gui.Widget();\n        let btn = IEditor.GUIUtils.createButton();\n        btn.setPos(150, 180);\n        this._panel.addChild(btn);\n    }\n    \n    accept(asset: IEditor.IAssetInfo): boolean {\n        return asset.ext === \"abc\"; //Applies to resources with extension abc\n    }\n\n    async refresh(asset: IEditor.IAssetInfo, render3DCanvas: IEditor.IRender3DCanvas): Promise<void> {\n        //Specific rendering logic is executed here, such as updating the UI (this._panel)\n        \n        //If you need to draw 3D content from the engine, you can use the render3DCanvas interface. If not, you can ignore it.\n        //render3DCanvas generally uses the createObject interface, its first parameter is the scene script name, the second parameter is the function name of the script, the remaining parameters are the function parameters\n        return render3DCanvas.createObject(\"DemoPreviewPlugin\", \"setAssetById\", asset.id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring CommandBuffer for Outline Effect\nDESCRIPTION: This snippet demonstrates creating a CommandBuffer to implement an outline effect.  It sets render targets, clears the render target, draws the renderable objects, blurs the result, and then applies a calculation to create an outline. Dependencies: Requires `BaseRender`, `Material`, and a `BlurMaterial`.  Expected input: Camera object and arrays of BaseRender and Material. Expected output: Creates outlines around objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/CommandBuffer/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDrawMeshCommandBuffer(camera:Camera,renders:BaseRender[],materials:Material[]):CommandBuffer{\n    var buf:CommandBuffer = new CommandBuffer();\n    //当需要在流程中拿摄像机渲染效果的时候 设置true\n    camera.enableBuiltInRenderTexture = true;\n    //创建和屏幕一样大的Rendertexture\n    var viewPort:Viewport = camera.viewport;\n    var renderTexture = RenderTexture.createFromPool(viewPort.width,viewPort.height,RenderTextureFormat.R8G8B8A8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //将RenderTexture设置为渲染目标\n    buf.setRenderTarget(renderTexture);\n    //清楚渲染目标的颜色为黑色，不清理深度\n    buf.clearRenderTarget(true,false,new Vector4(0,0,0,0));\n    //将传入的Render渲染到纹理上\n    for(var i = 0,n = renders.length;i<n;i++){\n      buf.drawRender(renders[i],materials[i],0);\n    }\n    //创建新的RenderTexture\n     var subRendertexture = RenderTexture.createFromPool(viewPort.width,viewPort.height,RenderTextureFormat.R8G8B8A8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //将renderTexture的结果复制到subRenderTexture\n     buf.blitScreenQuad(renderTexture,subRendertexture);\n    //设置模糊的参数\n     var downSampleFactor:number = 2;\n     var downSampleWidth:number = viewPort.width/downSampleFactor;\n     var downSampleheigh:number = viewPort.height/downSampleFactor;\n    var texSize:Vector4 = new Vector4(1.0/viewPort.width,1.0/viewPort.height,viewPort.width,downSampleheigh);\n    //创建模糊材质\n    var blurMaterial:BlurMaterial = new BlurMaterial(texSize,1);\n    //创建降采样RenderTexture1\n     var downRenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //降采样 使用blurMaterial材质的0SubShader将Rendertexture渲染到DownRendertexture\n     buf.blitScreenQuadByMaterial(renderTexture,downRenderTexture,null,blurMaterial,0);\n     //创建降采样RenderTexture2\n    var blurTexture:RenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    blurTexture.filterMode = FilterMode.Bilinear;\n    //Horizontal blur 使用blurMaterial材质的1SubShader\n    buf.blitScreenQuadByMaterial(downRenderTexture,blurTexture,null,blurMaterial,1);\n    //vertical blur 使用blurMaterial材质的2SubShader\n    buf.blitScreenQuadByMaterial(blurTexture,downRenderTexture,null,blurMaterial,2);\n    //Horizontal blur 使用blurMaterial材质的1SubShader\n    buf.blitScreenQuadByMaterial(downRenderTexture,blurTexture,null,blurMaterial,1);\n    //vertical blur  使用blurMaterial材质的2SubShader\n    buf.blitScreenQuadByMaterial(blurTexture,downRenderTexture,null,blurMaterial,2);\n    //在命令流里面插入设置图片命令流，在调用的时候会设置blurMaterial的图片数据\n    buf.setShaderDataTexture(blurMaterial._shaderValues,BlurMaterial.SHADERVALUE_SOURCETEXTURE0,downRenderTexture);\n    buf.setShaderDataTexture(blurMaterial._shaderValues,BlurMaterial.ShADERVALUE_SOURCETEXTURE1,subRendertexture);\n    //caculate edge计算边缘图片\n    buf.blitScreenQuadByMaterial(blurTexture,renderTexture,null,blurMaterial,3);\n    //重新传入图片\n    buf.setShaderDataTexture(blurMaterial._shaderValues,BlurMaterial.SHADERVALUE_SOURCETEXTURE0,renderTexture);\n    //将camera渲染结果复制到subRendertexture，使用blurMaterial的4通道shader\n    buf.blitScreenQuadByMaterial(null,subRendertexture,null,blurMaterial,4);\n    //将subRenderTexture重新赋值到camera的渲染结果上面\n    buf.blitScreenQuadByMaterial(subRendertexture,null);\n    return buf;\n  }\n```\n\n----------------------------------------\n\nTITLE: Using LayaAir Timer FrameLoop with Proper Clearing in TypeScript\nDESCRIPTION: Shows how to use Laya.timer.frameLoop to execute a function every frame and how to properly clear it to avoid unnecessary CPU usage. The example sets a frame-based loop to call animateFrameRateBased, and upon a click event, disposes the loop by clearing the timer. Correct timer management is crucial to prevent memory leaks and performance drops. Requires LayaAir engine and TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.timer.frameLoop(1, this, this.animateFrameRateBased);\nLaya.stage.on(\"click\", this, this.dispose);\ndispose() \n{\n    Laya.timer.clear(this, this.animateFrameRateBased);\n}\n```\n\n----------------------------------------\n\nTITLE: Listening Animation Events in TypeScript\nDESCRIPTION: This code snippet demonstrates how to listen to animation events in a TypeScript script within the LayaAir engine. It defines a class that extends Laya.Script and includes a method that corresponds to the event name set in the animation event properties. The method receives parameters passed from the animation event and logs them to the console. This relies on the Laya namespace for engine functionality, the Laya.Script class for creating scripts for game objects, and the @regClass decorator for registering the script class with the LayaAir engine for usage within the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/timelineGUI/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    event1(p1:any, p2:any): void {\n        console.log(\"event1\",p1,p2);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding the Android Back Button in LayaNative with JavaScript\nDESCRIPTION: This JavaScript snippet sets a custom handler for the Android back button using window.conch.setOnBackPressedFunction in a LayaNative environment. The handler counts how many times the user presses the back button, printing a message to console each time, and exits the app via window.conch.exit() after a specified number of presses. It first checks for the existence of the conch object to ensure compatibility with LayaNative Android versions; required dependency: LayaNative with Android support. The input is user back button presses, and the output is either console messages or application exit. This approach disables the engine's default double-press-to-exit behavior, making explicit management necessary.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/Android_BackPress/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar n=3;\nif(window.conch){\n    window.conch.setOnBackPressedFunction(()=>{\n        console.log('press back '+n);\n        if(n-- <=0){\n            window.conch.exit();\n        }\n        else{\n            //用户自己的代码，例如返回上层页面\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Creating and Configuring Animation Node at Runtime in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code defines a LayaAir script (`UI_Animation`) that dynamically creates a new Animation node when the component awakens, configures it, and adds it to the scene. Dependencies are the LayaAir engine (Laya), Laya.Script class, and proper resource setup. The script's `onAwake` calls a private setup method, which instantiates a new Laya.Animation, positions it at (200, 200), sets the animation source atlas, sizes it, configures the playback interval to 100ms, sets pingpong wrap mode (2), enables autoplay, and appends it to the owner node. The input is the Laya owner node, with output being a configured Animation node added at runtime. Requires available animation atlas resource and a compatible LayaAir Scene2D context.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Animation/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Animation extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.setup();\n    }\n\n    private setup(): void {\n\n        var Animation: Laya.Animation = new Laya.Animation();\n        Animation.pos(200, 200); //设置节点位置\n        Animation.source = \"resources/role.atlas\"; //接收动画数据源为图集\n        Animation.size(600, 275); //设置节点大小\n        Animation.interval = 100; //动画播放的帧间隔时间为100毫秒\n        Animation.autoPlay = true; //开启自动播放\n        Animation.wrapMode = 2; //播放模式为pingpong播放模式（PINGPONG）\n        this.owner.addChild(Animation) //添加节点\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Geolocation on Mouse Click in LayaAir TypeScript\nDESCRIPTION: Demonstrates fetching the device's current geolocation within a LayaAir Script component triggered by a mouse click. It uses `Laya.Geolocation.getCurrentPosition` with success and error handlers (`onSuccess`, `onError`) created via `Laya.Handler.create`. The success handler logs detailed position information, while the error handler logs the specific error type and message. Requires user interaction (click) and potentially HTTPS for the browser API to function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/geolocation/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    onMouseClick(evt: Laya.Event): void {\n        // 尝试获取当前位置\n        Laya.Geolocation.getCurrentPosition(\n            Laya.Handler.create(this, this.onSuccess),\n            Laya.Handler.create(this, this.onError)\n        );\n        console.log(\"click\");\n    }\n\n    // 成功获取位置后触发\n    onSuccess(info: Laya.GeolocationInfo): void {\n        console.log('经纬度: (' + info.longitude + '°, ' + info.latitude + '°)，精确度：' + info.accuracy + 'm');\n\n        if (info.altitude != null)\n            console.log('海拔：' + info.altitude + 'm' + (info.altitudeAccuracy != null ? ('，精确度：' + info.altitudeAccuracy + 'm') : ''));\n\n        if (info.heading != null && !isNaN(info.heading))\n            console.log('方向：' + info.heading + \"°\");\n\n        if (info.speed != null && !isNaN(info.speed))\n            console.log('速度：' + info.speed + \"m/s\");\n    }\n\n    // 获取位置失败后触发\n    onError(err: any): void {\n        var errType: String;\n        if (err.code == Laya.Geolocation.PERMISSION_DENIED)\n            errType = \"Permission Denied\";\n        else if (err.code == Laya.Geolocation.POSITION_UNAVAILABLE)\n            errType = \"Position Unavailable\";\n        else if (err.code == Laya.Geolocation.TIMEOUT)\n            errType = \"Time Out\";\n        console.log('ERROR(' + errType + '): ' + err.message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Skins for Spine Animation\nDESCRIPTION: This code demonstrates the implementation of external skins for Spine animations, allowing for dynamic attachment changes. It loads Spine resources, sets up external skin properties, and provides a method to change the attachment dynamically.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Spine2DRenderNode/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Button, caption: \"切换按钮\" })\n    public btn: Laya.Button;\n\n    spine: Laya.Spine2DRenderNode;\n\n    //外部皮肤\n    weaponSkin: Laya.ExternalSkin = new Laya.ExternalSkin();\n    //外部皮肤列表项\n    weaponSkinItem: Laya.ExternalSkinItem = new Laya.ExternalSkinItem();\n\n\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 加载Spine动画资源\n        Laya.loader.load([\"spine4.1/boss.json\", \"spine4.1/role.json\"], Laya.Loader.SPINE).then(() => {\n            // 添加Spine渲染器组件到精灵节点上 并在添加后返回Spine渲染器组件\n            this.spine = this.owner.addComponent(Laya.Spine2DRenderNode);\n            this.spine.source = \"spine4.1/role.json\"; // 设置Spine动画数据源\n            this.spine.skinName = \"default\"; // 设置皮肤名称\n            this.spine.play(\"att\", true); // 播放名称为\"att\"的攻击动画，true表示循环播放\n\n            this.btn.on(Laya.Event.CLICK, this, this.changeAttachment); //监听点击事件，触发切换武器的方法\n\n            //以下基础设置可以在IDE里设置，这样代码就不用添加了，此处仅为演示代码使用方式\n            //设置外部皮肤对象\n            this.spine.externalSkins = [this.weaponSkin];\n            // 给外部皮肤对象设置数据\n            this.weaponSkin.source = \"spine4.1/boss.json\"; // 设置外部皮肤数据源\n            this.weaponSkin.items = [this.weaponSkinItem];// 设置外部皮肤列表项\n            // 给外部皮肤列表项设置数据\n            this.weaponSkinItem.slot = \"taidao\"; // 设置插槽名称\n            this.weaponSkinItem.skin = \"default\"; // 设置皮肤名称\n\n        });\n    }\n\n    //改变武器\n    changeAttachment(): void {\n        // 根据当前附件状态切换武器\n        const newAttachment = this.weaponSkinItem.attachment === \"weapon_1\" ? \"weapon_3\" : \"weapon_1\";\n        this.setAttachment(\"taidao\", \"default\", newAttachment);\n        console.log(`切换到 ${newAttachment}`);\n    }\n\n    //设置武器的附件\n    setAttachment(slot: string, skinName: string, attachmentName: string): void {\n        this.weaponSkinItem.slot = slot; // 设置插槽名称\n        this.weaponSkinItem.skin = skinName; // 设置皮肤名称\n        this.weaponSkinItem.attachment = attachmentName; // 设置附件名称\n        this.spine.resetExternalSkin(); // 重置加载的外部皮肤，使设置生效\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from Its Parent in LayaAir3D (TypeScript)\nDESCRIPTION: Defines the removeSelf method for a node, which safely detaches itself from its parent if currently attached. If already detached, no exception is thrown. Expects the presence of _parent and removeChild methods; returns the Node instance after removal.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 从父容器删除自己，如已经被删除不会抛出异常。\n     * @return 当前节点（ Node ）对象。\n     */\n    removeSelf(): Node {\n        this._parent && this._parent.removeChild(this);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Methods in iOS/Objective-C for LayaNative\nDESCRIPTION: Objective-C implementation of native methods that can be called from JavaScript through LayaNative's reflection mechanism. Includes example functions for handling NSString, NSNumber parameters, and asynchronous callbacks using JSON for data exchange.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Secondary_Development/readme.md#_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n    +(NSString*)testString:(NSString*)value\n    {\n      NSLog(@\"OC: %@\",value);\n      return @\"LayaBox\";\n    }\n    +(NSNumber*)testNumber:(NSNumber*)value\n    {\n      NSLog(@\"OC: %@\",value);\n      return @512;\n    }\n    +(NSNumber*)testBool:(NSNumber*)value\n    {\n      NSLog(@\"OC: %d\",value.boolValue);\n      return [NSNumber numberWithBool:value.boolValue ? NO : YES];\n    }\n    +(void)testAsyncCallback:(NSString*)json\n    {\n      //js thread\n      NSError* error = nil;\n      NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];\n      NSDictionary* dict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableContainers error:&error];\n      NSLog(@\"OC: %@\", [dict objectForKey:@\"value\"]);\n      dispatch_async(dispatch_get_main_queue(), ^{\n          //ui thread\n          NSError* error = nil;\n          NSDictionary* dic = [NSDictionary dictionaryWithObject:@\"Hello JS!\" forKey:@\"value\"];\n          NSData* jsonData = [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:&error];\n          NSString* jsonStr = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n          [[conchRuntime GetIOSConchRuntime] callbackToJSWithClass:self.class methodName:@\"testAsyncCallback:\" ret:jsonStr];\n      });\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Groups via XOR in LayaAir\nDESCRIPTION: This snippet demonstrates how to exclude specific collision groups from interacting using the XOR operator (`^`). It utilizes bitwise operations with a constant value (`COLLISIONFILTERGROUP_ALLFILTER`) to prevent collisions with specified groups.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//指定不可以与其发生碰撞的碰撞组(本例将不与自定义组2、5进行碰撞，除自定义2与5组之外，都可以发生碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2 ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Handler.create for Progress Events (TypeScript)\nDESCRIPTION: Shows an incorrect example of using `Laya.Handler.create` for a loading progress callback (`onLoading`). Because the handler is recovered after the first call by default (the `once` parameter defaults to true), the progress updates will only trigger once and stop prematurely.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/memory/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(urls, Laya.Handler.create(this, this.onAssetLoaded), Laya.Handler.create(this, this.onLoading));\n```\n\n----------------------------------------\n\nTITLE: Getting Controller Layer - Typescript\nDESCRIPTION: This code snippet shows how to retrieve a specific AnimatorControllerLayer from an Animator component using the `getControllerLayer()` method. It gets the BaseLayer (index 0) and then retrieves the default animation state of that layer. It illustrates the structure and retrieval process of animation layers within LayaAir's animation system.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//获得BaseLayer层AnimatorControllerLayer\nlet animatorControllerLayer : Laya.AnimatorControllerLayer = this.animator.getControllerLayer(0);\n//获得当前BaseLayer层的默认动画状态\nlet defaultState = animatorControllerLayer.defaultState;\n```\n\n----------------------------------------\n\nTITLE: 设置粒子材质和序列帧动画\nDESCRIPTION: 演示如何为粒子系统配置材质、纹理和动画序列帧，包括创建材质资源、更换着色器、添加纹理、开启动画并设置帧划分，从而实现动态火焰效果。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/particleEditor2D/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 创建材质并设置Shader为Particle2D\nlet material = new Material();\nmaterial.shaderType = Shader.ShaderType.Particle2D;\n\n// 添加纹理到材质\nmaterial.setTexture('Texture', fireTexture);\n\n// 应用到粒子渲染器\nparticleRenderer.material = material;\n\n// 配置序列帧动画参数\nparticleSystem.particleTextureAnimation = {\n  tilesX: 4,\n  tilesY: 2,\n  animationMode: 'Cycle',\n  frame: 'Constant',\n  startFrame: 0,\n  cycleCount: 1\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling Radio Component with Script in LayaAir\nDESCRIPTION: This script demonstrates how to control a Radio component by setting various properties like skin, stateNum, label attributes, and styling options. It shows how to customize the Radio's appearance and behavior after it's created in the LayaAir IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Radio/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Radio })\n    public radio: Laya.Radio;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.radio.skin = \"atlas/comp/radio.png\"; //皮肤\n        this.radio.stateNum = 3; //皮肤状态\n\n        this.radio.label = \"确定\"; //文本标签\n        this.radio.labelFont = \"宋体\"; //文本标签字体\n        this.radio.labelSize = 20; //文本标签字体大小\n        this.radio.labelBold = true; //文本标签加粗\n        this.radio.labelVAlign = \"middle\"; //文本标签垂直居中对齐\n\n        this.radio.labelStroke = 3; //文本标签字体描边宽度\n        this.radio.labelStrokeColor = \"#ffffff\"; //描边颜色\n        this.radio.strokeColors = \"#000000, #c6ff00, #001aff\"; //各状态下的描边颜色\n        this.radio.labelColors = \"#0100ff, #16fa0e, #ff0000\"; //各状态下的文本颜色\n\n        // this.radio.selected = true; //是否选中\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Light Occluder Component in LayaAir\nDESCRIPTION: This snippet demonstrates adding a LightOccluder2D component to a Sprite and configuring it for a shadow effect. It sets properties like canInLight and outside and defines a polygon shape for the occluder. It also demonstrates how to create a 2D light, which casts shadows and sets shadow enable to true.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/LightOccluder2D/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LightOccluder extends Laya.Script {\n\n    private spotLight: Laya.Sprite = new Laya.Sprite();\n    private background: Laya.Sprite = new Laya.Sprite();\n    private lightOccluder: Laya.Sprite = new Laya.Sprite();\n\n    private backgroundTexture: string = \"resources/bg2.png\";\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        Laya.loader.load(this.backgroundTexture).then(() => {\n            this.createLightOccluder();\n            this.createSpotLight();\n            this.createBackground();\n        });\n    }\n\n    // 创建2D光遮挡器\n    createLightOccluder(): void {\n        this.lightOccluder.pos(233, 265);\n        this.owner.addChild(this.lightOccluder);\n        let lightOccluderComponent = this.lightOccluder.addComponent(Laya.LightOccluder2D);\n        lightOccluderComponent.canInLight = true;\n        lightOccluderComponent.outside = true;\n        let poly: Laya.PolygonPoint2D = new Laya.PolygonPoint2D();\n        // 添加多个顶点创建不规则形状（顺时针）\n        poly.addPoint(-50, -100);\n        poly.addPoint(50, -100);\n        poly.addPoint(100, -50);\n        poly.addPoint(100, 50);\n        poly.addPoint(50, 100);\n        poly.addPoint(-50, 100);\n        poly.addPoint(-100, 50);\n        poly.addPoint(-100, -50);\n        lightOccluderComponent.polygonPoint = poly;\n    }\n\n    // 创建聚光灯\n    createSpotLight(): void {\n        this.spotLight.pos(50, 350);\n        this.spotLight.rotation = 70;\n        this.owner.addChild(this.spotLight);\n        let spotLightComponent = this.spotLight.addComponent(Laya.SpotLight2D);\n        spotLightComponent.color = new Laya.Color(0.937, 1, 0);\n        spotLightComponent.intensity = 1.25;\n        spotLightComponent.innerRadius = 100;\n        spotLightComponent.outerRadius = 500;\n        spotLightComponent.innerAngle = 90;\n        spotLightComponent.outerAngle = 120;\n        // 开启阴影\n        spotLightComponent.shadowEnable = true;\n    }\n\n    // 创建背景\n    createBackground(): void {\n        this.owner.addChild(this.background);\n        let tex = Laya.loader.getRes(\"resources/bg2.png\");\n        let mesh2Drender = this.background.addComponent(Laya.Mesh2DRender);\n        mesh2Drender.sharedMesh = this.generateRectVerticesAndUV(1000, 1000);\n        mesh2Drender.texture = tex;\n        mesh2Drender.lightReceive = true;\n    }\n\n    // 生成一个矩形\n    private generateRectVerticesAndUV(width: number, height: number): Laya.Mesh2D {\n        const vertices = new Float32Array(4 * 5);\n        const indices = new Uint16Array(2 * 3);\n        let index = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 1;\n\n        vertices[index++] = 0;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n\n        index = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = 3;\n\n        indices[index++] = 1;\n        indices[index++] = 2;\n        indices[index++] = 3;\n\n        const declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n        const mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([vertices], [declaration], indices, Laya.IndexFormat.UInt16, [{ length: indices.length, start: 0 }]);\n        return mesh2D;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Animator State Properties Programmatically in TypeScript\nDESCRIPTION: Demonstrates how to access a specific animation state (\"Stand\") within an Animator Controller Layer (index 0), modify its properties such as name, start/end clip times (`clipStart`, `clipEnd` as fractions of total duration), and looping behavior (`islooping`), and then play the modified state using its new name (\"Stand_new\"). Requires `this.animator` referencing a Laya.Animator instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n//获得动画状态机的BaseLayer层，也可以获得其它层\nlet acl: Laya.AnimatorControllerLayer = this.animator.getControllerLayer(0);\n//获得一个动画状态\nlet state = acl.getAnimatorState(\"Stand\");\n//设置动作状态的名称\nstate.name = \"Stand_new\";\n//设置动作状态播放的起始时间（起始时间与结束时间的设置为0-1的百分比数值）  要截取的时间点 / 动画的总时长\nstate.clipStart = 10/40;\n//设置动作状态播放的结束时间\nstate.clipEnd = 20/40;\n//动画播放是否循环\nstate.clip.islooping = true;\n//动画状态机，直接播放Stand_new动画状态\nthis.animator.play(\"Stand_new\");\n```\n\n----------------------------------------\n\nTITLE: Exposing a Script Property to the LayaAir Editor in TypeScript\nDESCRIPTION: Shows how to use the `@property()` decorator above a class property (`btn_1` of type `Laya.Button`). This makes the property appear in the LayaAir editor's inspector panel when the script is attached to a node, allowing developers to assign node references via drag-and-drop.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/Script/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@property()\nprivate btn_1: Laya.Button; \n```\n\n----------------------------------------\n\nTITLE: Conditional Sound Configuration Loading in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to conditionally load sound configuration files based on whether the LayaNative environment (conch) is available. It checks for the `window.conch` object and loads different JSON files accordingly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/sound/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif(window.conch)\n{\n    ...加载 \"soundConfig-LayaPlayer.json\"\n}\nelse\n{\n    ...加载 \"soundConfig-json\"\n}\nSoundManager.playSound(soundJson[0].url,1);\n....\nSoundManager.playSound(soundJson[1].url,1);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Thumbnail Generator - TypeScript\nDESCRIPTION: Explains how to associate a custom script class responsible for generating visual thumbnails with a specific file extension. The `Editor.extensionManager.setFileThumbnail` method links extensions like \"abc\" to the name of a scene script class (e.g., \"DemoThumbnailPlugin\") that implements the thumbnail generation logic.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AssetHelper {\n    @IEditor.onLoad\n    onLoad() {\n        //Set the thumbnail for files with extension abc to DemoThumbnailPlugin, DemoThumbnailPlugin is the name of a scene script\n        Editor.extensionManager.setFileThumbnail([\"abc\"], \"DemoThumbnailPlugin\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shape Casting with SphereColliderShape in LayaAir\nDESCRIPTION: This snippet demonstrates how to use shape casting with a `SphereColliderShape` to detect collisions in LayaAir. It distinguishes between detecting all collisions using `shapeCastAll` and detecting the first collision using `shapeCast` and modifies the color of the collided objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//创建球型碰撞器\nvar sphereCollider:Laya.SphereColliderShape = new Laya.SphereColliderShape(0.5);\n\n//通过按钮this.castAll状态切换是采用检测全部还是检测第一个\nif (this.castAll) {\n    //采用球形碰撞器进行形状检测,检测所有碰撞的物体\n    this.scene.physicsSimulation.shapeCastAll(sphereCollider, this.from, this.to, this.outs);\n    for (let i = 0; i < this.outs.length; i++){\n        ((this.outs[i].collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n} else {\n    //采用球形碰撞器进行形状检测,检测第一个碰撞物体\n    if (this.scene.physicsSimulation.shapeCast(sphereCollider, this.from, this.to, this.out))\n        ((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing `watchPosition` and `clearWatch` for Geolocation in LayaAir TypeScript\nDESCRIPTION: Internal implementation of the static `Laya.Geolocation.watchPosition` and `Laya.Geolocation.clearWatch` methods. `watchPosition` wraps the native browser `navigator.geolocation.watchPosition` API to continuously monitor location changes, invoking Laya.Handler callbacks on updates or errors, and returns a watch ID. `clearWatch` wraps `navigator.geolocation.clearWatch`, using the provided ID to stop the corresponding location monitoring.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/geolocation/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 监视设备当前位置。回调处理器在设备位置改变时被执行。\n     * @param\tonSuccess\t带有唯一<code>Position</code>参数的回调处理器。\n     * @param\tonError\t\t可选的。带有错误信息的回调处理器。错误代码为Geolocation.PERMISSION_DENIED、Geolocation.POSITION_UNAVAILABLE和Geolocation.TIMEOUT之一。\n     */\n    static watchPosition(onSuccess: Handler, onError: Handler): number {\n        return Geolocation.navigator.geolocation.watchPosition(function (pos: any): void {\n            Geolocation.position.setPosition(pos);\n            onSuccess.runWith(Geolocation.position);\n        },\n            function (error: any): void {\n                onError.runWith(error);\n            },\n            {\n                enableHighAccuracy: Geolocation.enableHighAccuracy,\n                timeout: Geolocation.timeout,\n                maximumAge: Geolocation.maximumAge\n            });\n    }\n\n    /**\n     * 移除<code>watchPosition</code>安装的指定处理器。\n     * @param\tid\n     */\n    static clearWatch(id: number): void {\n        Geolocation.navigator.geolocation.clearWatch(id);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting up a Loading Page - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to set up and display a loading page while a new scene is being loaded. It uses `Laya.Scene.setLoadingPage`, `Laya.Scene.showLoadingPage`, and `Laya.Scene.open` to manage the loading process.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Prefab })\n    private loadingScenePrefab: Laya.Prefab;\n\n    private loadingScene: Laya.Node;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 第一次执行update之前执行，只会执行一次\n     */\n    onStart(): void {\n        //创建Loading场景\n        this.loadingScene = this.loadingScenePrefab.create();\n        //设置Loading场景\n        Laya.Scene.setLoadingPage(this.loadingScene as Laya.Sprite);\n        //手动调用显示Loading场景\n        Laya.Scene.showLoadingPage(this.loadingScene);\n        Laya.timer.once(3000,this,()=>{\n            //3秒后跳转到Game场景\n            Laya.Scene.open(\"Game.ls\");\n        })\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: 动画优先级：solo与mute对动画切换的影响\nDESCRIPTION: 介绍在动画状态节点上设置solo和mute的作用，影响动画的优先级和播放顺序。如solo选中时优先播放对应动画，mute则暂时屏蔽其它动画，确保特定动画效果突出。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Performing Translation, Rotation, and Scaling on Sprite3D (TypeScript)\nDESCRIPTION: Shows how to use methods like setValue, translate, and rotate to perform transformations (move, rotate, scale) on Sprite3D instances. Requires initialized Vector3/Quaternion objects, and nodes (sprite3d) with transform and localScale attributes. The code sets positions, performs translations and rotations, and updates localScale for scaling operations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//平移\nthis.position1.setValue(-1.5, 0, 0.0);\nthis.sprite3d.translate(this.position1);\n//旋转\nthis.rotate1.setValue(0, 60, 0);\nthis.sprite3d.rotate(this.rotate1, false, false);\n//缩放\nvar scale = this.sprite3d.localScale;\nscale.setValue(0.1, 0.1, 0.1);\nthis.sprite3d.localScale = scale;\n```\n\n----------------------------------------\n\nTITLE: Initializing Target Waypoints in TypeScript\nDESCRIPTION: Defines the 'initPath' function, which iterates through predefined target objects in the scene (named 'path0', 'path1', etc.) and stores their local positions (Vector3) into the 'path' array. This array holds the sequence of target destinations for the character.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nprivate initPath(scene: Scene3D): void {\n    for (var i: number = 0; i < this.pointCount; i++) {\n    var str: string = \"path\" + i;\n   this.path.push(((<MeshSprite3D>scene.getChildByName('Scenes').getChildByName('Area').getChildByName(str))).transform.localPosition);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing 3D Scene with Lifecycle Mouse Events in LayaAir - TypeScript\nDESCRIPTION: This code sets up a complete 3D scene in LayaAir, including scene creation, camera positioning, lighting, custom model addition, and physical collider configuration. The class extends IDE-generated UI and demonstrates using addComponent to attach both custom logic and physical behavior. Dependencies include LayaAir's 3D, material, mesh, and script infrastructure. This prepares the stage for using mouse event lifecycle methods in scripts.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class GameUI extends ui.test.TestSceneUI {\n    constructor() {\n        super();\n\t\t\n        //添加3D场景\n        var scene: Laya.Scene3D = Laya.stage.addChild(new Laya.Scene3D()) as Laya.Scene3D;\n\n        //添加照相机\n        var camera: Laya.Camera = (scene.addChild(new Laya.Camera(0, 0.1, 100))) as Laya.Camera;\n        camera.transform.translate(new Laya.Vector3(0, 3, 3));\n        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);\n\n        //添加方向光\n        var directionLight: Laya.DirectionLight = scene.addChild(new Laya.DirectionLight()) as Laya.DirectionLight;\n        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);\n        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));\n\n        //添加自定义模型\n        var box: Laya.MeshSprite3D = scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1))) as Laya.MeshSprite3D;\n        box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);\n        var material: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\n\t\tLaya.Texture2D.load(\"res/layabox.png\", Laya.Handler.create(null, function(tex:Laya.Texture2D) {\n\t\t\t\tmaterial.albedoTexture = tex;\n\t\t}));\n        box.meshRenderer.material = material;\n\n        //为box模型节点添加3D脚本组件\n        box.addComponent(Script3DTest);\n        //为box模型节点添加物理组件\n        let _PhysicsCollider =  box.addComponent(Laya.PhysicsCollider);\n        //设置碰撞器\n        _PhysicsCollider.colliderShape = new Laya.BoxColliderShape();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling map dragging by using moveViewPort in LayaAir\nDESCRIPTION: This snippet implements map dragging functionality by tracking mouse events to update the viewport using moveViewPort and changeViewPort methods, allowing users to pan the map interactively when zoomed in.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    private tMap:Laya.TiledMap;\n    private MapX:number = 0;\n    private MapY:number = 0;\n    private mLastMouseX:number;\n    private mLastMouseY:number;\n\n    onEnable() {\n\n\t\t//创建地图对象\n\t\tthis.tMap = new Laya.TiledMap();\n        //创建Rectangle实例，视口区域\n        var viewRect:Laya.Rectangle = new Laya.Rectangle(0, 0, Laya.stage.designWidth, Laya.stage.designHeight);\n        //创建TiledMap地图\n        this.tMap.createMap(\"resources/TiledMap/orthogonal.json\", viewRect, new Laya.Handler(this, this.completeHandler));\n    }\n\n    private onLoaded(): void {\n        this.tMap.mapSprite().removeSelf();\n        this.owner.addChild(this.tMap.mapSprite());\n        //设置视口左上角缩放中心\n        this.tMap.setViewPortPivotByScale(0,0);\n        //放大3倍\n        this.tMap.scale = 3;\n        Laya.stage.on(Laya.Event.RESIZE,this,this.resize);\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);\n        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseUp);\n        this.resize();\n    }\n\n    private completeHandler(e: any = null): void {\n        this.onLoaded();\n    }\n\n    private mouseMove():void{\n        var moveX:number = this.MapX - (Laya.stage.mouseX - this.mLastMouseX);\n        var moveY:number = this.MapY - (Laya.stage.mouseY - this.mLastMouseY)\n        this.tMap.moveViewPort(moveX, moveY);\n    }\n    private mouseUp():void {\n        this.MapX = this.MapX - (Laya.stage.mouseX - this.mLastMouseX);\n        this.MapY = this.MapY - (Laya.stage.mouseY - this.mLastMouseY);\n        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove);\n    }\n    private mouseDown():void {\n        this.mLastMouseX = Laya.stage.mouseX;\n        this.mLastMouseY = Laya.stage.mouseY;\n        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);\n    }\n\n    private resize():void {\n        this.tMap.changeViewPort(this.MapX, this.MapY, Laya.stage.designWidth, Laya.stage.designHeight);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 创建动画事件流程示例\nDESCRIPTION: 在动画帧面板中通过双击或右键菜单添加动画事件，事件可以在动画播放中触发特定函数，此代码模拟事件绑定。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/timelineGUI/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addAnimationEvent(frameIndex: number, eventName: string): void {\n  animationFrames[frameIndex].addEvent(eventName);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic 3D Node Property Usage in LayaAir with TypeScript\nDESCRIPTION: This example shows exposing a 3D node property of type Laya.Sprite3D via the @property decorator and implementing a simple rotation inside the onStart lifecycle method using Laya's timer frameLoop. The rotation vector is stored as a private field. The example requires the cube node be dragged into the property slot within the IDE. The outcome is continuous rotation of the 3D cube in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite3D})\n    public cube: Laya.Sprite3D;\n\n    private rotation: Laya.Vector3 = new Laya.Vector3(0, 0.01, 0);\n\n    onStart() {\n        Laya.timer.frameLoop(1, this, ()=> {\n            this.cube.transform.rotate(this.rotation, false);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Preview Runtime Scripts from UI Process with runScriptMax in LayaAir3-IDE Using TypeScript\nDESCRIPTION: Illustrates calling a static method from a runtime script registered with @Laya.regClass in the preview environment from the UI process. The runScriptMax method is used instead of runScript to target the currently playing scene rather than the source scene, ensuring correct message routing during active playback. The example shows logging of a string parameter and returning a string result.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是游戏的逻辑代码\n\n@Laya.regClass()\nexport class TestGameScript {\n    static test(msg: string) {\n        console.log(msg); //hello\n        \n        return \"ok\";\n    }\n}\n\n//下面是UI进程的代码\n\n//这里用runScriptMax而不是runScript，因为在播放状态下，runScript依然会发送到源场景，而不是正在播放的场景\nlet ret = await Editor.scene.runScriptMax(\"TestGameScript.test\", \"hello\");\nconsole.log(ret); //ok\n```\n\n----------------------------------------\n\nTITLE: Defines and UniformMap Interaction\nDESCRIPTION: Illustrates how defines and uniform maps can be linked.  Modifying a uniform (e.g., u_mainTex) can automatically toggle a define (e.g., A).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n    ......\n    uniformMap:{\n        //修改u_mainTex同时define A\n        u_mainTex: { type: Texture2D, define: A },\n    \n        //修改u_noiseMap时同时define B和C\n        u_noiseMap: { type: Texture2D, define: [B,C] }\n    },\n    defines: {\n        A : { type: Bool },\n        B : { type: Bool },\n        C : { type: Bool }\n    }\n    ......\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Detecting Runtime Environment Using Laya.Browser Flags in TypeScript\nDESCRIPTION: This snippet declares a wide range of boolean flags within the Laya.Browser class to detect and distinguish the runtime environment and platform, such as mobile devices, specific operating systems (iOS, Android, Mac), browsers (Chrome, Safari, Firefox, IE, QQ Browser), and various mini-game platforms including WeChat, Xiaomi, OPPO, VIVO, and Douyin. These flags facilitate cross-platform compatibility handling within LayaAir projects by allowing developers to conditionally execute code based on the detected environment. Expected inputs are the runtime context; outputs are boolean values indicating environment status.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Browser/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** 表示是否在移动设备，包括IOS和安卓等设备内。*/\nstatic onMobile: boolean;\n/** 表示是否在 IOS 设备内。*/\nstatic onIOS: boolean;\n/** 表示是否在 Mac 设备。*/\nstatic onMac: boolean;\n/** 表示是否在 IPhone 设备内。*/\nstatic onIPhone: boolean;\n/** 表示是否在 IPad 设备内。*/\nstatic onIPad: boolean;\n/** 表示是否在 Android 设备内。*/\nstatic onAndroid: boolean;\n/** 表示是否在 QQ 浏览器内。*/\nstatic onQQBrowser: boolean;\n/** 表示是否在移动端 QQ 或 QQ 浏览器内。*/\nstatic onMQQBrowser: boolean;\n/** 表示是否在 Safari 内。*/\nstatic onSafari: boolean;\n/** 表示是否在 Chrome 内 */\nstatic onChrome: boolean;\n/** 表示是否在 IE 浏览器内*/\nstatic onIE: boolean;\n/** 表示是否在 微信 内*/\nstatic onWeiXin: boolean;\n/** 表示是否在 PC 端。*/\nstatic onPC: boolean;\n/** 微信小游戏 **/\nstatic onMiniGame: boolean;\n/** 小米小游戏 **/\nstatic onKGMiniGame: boolean;\n/** OPPO小游戏 **/\nstatic onQGMiniGame: boolean;\n/** VIVO小游戏 **/\nstatic onVVMiniGame: boolean;\n/** 抖音小游戏*/\nstatic onTTMiniGame: boolean;\n/** @private */\nstatic onFirefox: boolean;//TODO:求补充\n/** @private */\nstatic onEdge: boolean;//TODO:求补充\n/** @private */\nstatic onLayaRuntime: boolean;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//如果是Chrome浏览器\nif (Laya.Browser.onChrome) {\n\tconsole.log(\"Chrome\");\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling IDE-Placed CheckBox with Script (TypeScript)\nDESCRIPTION: This TypeScript script demonstrates how to control a CheckBox component that has been added via the LayaAir IDE and linked to the script's 'checkbox' property. The `onAwake` method modifies the CheckBox's position, label text, boldness, size, text colors for different states, and stroke properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/CheckBox/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.CheckBox })\n    public checkbox: Laya.CheckBox;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.checkbox.pos(300, 300);\n        // this.checkbox.selected = true;\n        this.checkbox.label = \"多选框\";\n        this.checkbox.labelBold = true;\n        this.checkbox.labelSize = 30;\n        this.checkbox.labelColors = \"#0100ff, #16fa0e, #ff0000\"; //各状态下的文本颜色\n        this.checkbox.labelStroke = 3;\n        this.checkbox.strokeColors = \"#000000, #c6ff00, #001aff\"; //各状态下的描边颜色\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dropdown Implementation in TypeScript\nDESCRIPTION: Implementation of a dynamic dropdown menu in LayaAir by using a getter method to provide dropdown options and linking it to a property using the enumSource parameter.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n    //这个属性提供一个get方法，返回下拉选项，这个数据一般只用于编辑器，所以设置不保存\n    @property({ type: [[\"Record\", String]], serializable: false })\n    get itemsProvider(): Array<Record<string, string>> {\n        return [{ name: \"Item0\", value: \"0\" }, { name: \"Item1\", value: \"1\" }];\n    }\n    //将enumSource设置为一个字符串，表示使用该名字的属性作为下拉数据源\n    @property({ type: String, enumSource: \"itemsProvider\" })\n    enumItems: string;\n```\n\n----------------------------------------\n\nTITLE: Controlling ComboBox via Script in LayaAir\nDESCRIPTION: This TypeScript snippet demonstrates how to control a ComboBox component using a custom script within the LayaAir engine.  It demonstrates setting properties like position, labels, colors, item height, and selected index. It requires a LayaAir project setup and a ComboBox component in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/ComboBox/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.ComboBox })\n    public combobox: Laya.ComboBox;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.combobox.pos(100, 100);\n        this.combobox.labels = \"item0,item1,item2,item3,item4,item5,item6,item7\";\n        this.combobox.labelColors = \"#32556b,#32cc6b,#ff0000\";\n        this.combobox.itemHeight = 60;\n        // itemColors格式：\"悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色\"\n        this.combobox.itemColors = \"#5e95b6,#ffffff,#000000,#ff0000,#ffffff\";\n        this.combobox.selectedIndex = 1;\n        this.combobox.scrollBarSkin = \"atlas/comp/vscroll.png\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LayaAir Panel Programmatically (TypeScript)\nDESCRIPTION: This TypeScript script illustrates how to create a Laya.Panel component entirely through code within the `onAwake` lifecycle method. It instantiates a Panel, sets its horizontal scrollbar skin, size, and position, and then adds it as a child to the node the script is attached to. It also demonstrates adding multiple child Image components to the Panel to populate it with content that can be scrolled. Requires scrollbar skin and image assets at the specified paths (`atlas/comp/hscroll.png`, `atlas/comp/image.png`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Panel/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Panel extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 创建Panel组件\n        let panel: Laya.Panel = new Laya.Panel();\n        panel.hScrollBarSkin = \"atlas/comp/hscroll.png\";\n        panel.size(600, 275);\n        panel.pos(150, 150);\n        this.owner.addChild(panel);\n\n        // 创建Image组件，作为Panel的子节点\n        let img: Laya.Image;\n        for (var i: number = 0; i < 4; i++) {\n            // 创建4个Image，水平排列\n            img = new Laya.Image(\"atlas/comp/image.png\");\n            img.x = i * 512;\n            panel.addChild(img);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JS Messages on HarmonyOS using TypeScript\nDESCRIPTION: Implements static methods to process synchronous and asynchronous messages from JS within HarmonyOS, featuring handleSyncMessage (returns result string) and handleAsyncMessage (invokes callback with result). Methods match event names and provide hardcoded responses if the events match predefined ('syncMessage', 'asyncMessage') values. Written in TypeScript and intended for use in libSysCapabilities/src/main/ets/event/HandleMessageUtils.ts. Expects eventName and data parameters for context; asynchronous handling uses callback functions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/platform_communication/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n* 同步事件\n* @param eventName 事件名称\n* @param data 数据\n*/\nstatic handleSyncMessage(eventName: string, data: string): string {\n    if (eventName == \"syncMessage\") {\n        return \"sync message from platform\";\n    }\n    return \"default sync result\";\n}\n\n/**\n* 异步事件\n* @param eventName 事件名称\n* @param data 数据\n* @param cb callback\n*/\nstatic async handleAsyncMessage(eventName: string, data: string, cb: Function): Promise<void> {\n    if (eventName == \"asyncMessage\") {\n        cb(\"async message from platform\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Tween Lifecycle in TypeScript\nDESCRIPTION: Shows how to retrieve and kill tweens associated with an object. The example demonstrates getting either the first tween or all tweens associated with a sprite, and terminating them.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Tween/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//获取对象上的第一个缓动\nlet tween = Tween.getTween(aSprite);\nif (tween != null)\n    tween.kill();\n\n//获取对象上的全部缓动\nlet tweens = Tween.getTweens(sSprite);\ntweens.forEach(tween => tween.kill());\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Particle3D Class in LayaAir\nDESCRIPTION: This code defines a custom Particle3D class that extends Laya.Sprite3D. It includes methods for creating, playing, pausing, recovering, and cleaning up particle effects, leveraging an object pool for performance optimization. The class manages ShuriKenParticle3D and ShurikenParticleSystem components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/particleEditor3D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Node = Laya.Node;\nimport Sprite3D = Laya.Sprite3D;\nimport ShuriKenParticle3D = Laya.ShuriKenParticle3D;\nimport ShurikenParticleSystem = Laya.ShurikenParticleSystem;\nimport { Pool } from \"./Pool\";\n\n//粒子特效的基类，包括创建，播放，暂停，销毁，清理对象池\nexport class Particle3D extends Sprite3D  {\n\n    private _isInited: boolean = false;\n    private _filePath: string = null;\n    private _particle: Laya.Sprite = null;\n    private _shuriKenParticle3D: Array<ShuriKenParticle3D>= [];\n    private _shurikenParticleSystem: Array<ShurikenParticleSystem>= [];\n    constructor() \n    {\n        super();\n    }\n    \n\t//通过传入粒子特效的路径，创建一个粒子特效，从对象池里拿一个\n    static Create(path: string): Particle3D\n    {\n        var ret:Particle3D = Pool.getInstance().getItemByClass(\"Particle3D@\" + path, Particle3D);\n        ret.Init(path);\n        return ret;\n    }\n    \n\t//粒子特效初始化\n    private Init(file_path:string): void\n    {\n        if (this._isInited)\n        {\n            return;\n        }\n        this._filePath = file_path;\n\n        console.log(\"Particle3D\");\n        //从拿到的粒子系统克隆一个\n        var res = Laya.loader.getRes(file_path);\n        var particle = res.clone();\n\n        this._particle = particle;\n        //获取这个粒子特效的所有粒子系统，用于后面整体播放\n        for (var i = 0, len = this._particle.numChildren; i < len; i++)\n        {\n            var child:Node = this._particle.getChildAt(i);\n            if (child instanceof Laya.ShuriKenParticle3D)\n            {\n                this._shuriKenParticle3D.push(child);\n                this._shurikenParticleSystem.push(child.particleSystem);\n            }\n        }\n\n        this.addChild(this._particle);\n        this._isInited = true;\n    }\n\n\t//粒子特效播放，由于一个复杂的粒子特效由多个粒子系统组成，此时遍历粒子特效所有粒子系统对象调用play()\n    play(): void \n    {\n        for (var i = 0, len = this._shurikenParticleSystem.length; i < len; i++)\n        {\n            var particle_system = this._shurikenParticleSystem[i];\n            particle_system.simulate(0, true);\n            particle_system.play();\n        }\n    }\n\n\t//粒子特效暂停和恢复，由于一个复杂的粒子特效由多个粒子系统组成，此时遍历粒子特效所有粒子系统对象调用pause()和play()\n    pause(): void \n    {\n        for (var i = 0, len = this._shurikenParticleSystem.length; i < len; i++)\n        {\n            var particle_system:ShurikenParticleSystem = this._shurikenParticleSystem[i];\n            if (this._isPaused)\n            {\n                particle_system.play();\n                this._isPaused = false;\n            }\n            else\n            {\n                particle_system.pause();\n                this._isPaused = true;               \n            }\n        }\n    }\n\n\t//粒子系统对象池回收\n    Recover(): void\n    {\n        this.removeSelf();\n        Pool.getInstance().recover(this._filePath, this);\n    };\n\n\t//彻底销毁清理一个粒子特效对象\n    Clean(): void\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        this.Recover();\n\n        if (this._particle && !this._particle.destroyed)\n        {\n            this._particle.removeSelf();\n            this._particle.destroy(true);\n            this._particle = null;\n        }\n\n        this._shuriKenParticle3D = null;\n        this._shurikenParticleSystem = null;\n\n        this._isInited = false;\n\n        this.destroy(true);\n    };\n\n\t//通过传入粒子特效的路径，清除缓冲池\n    static ClearPool(root_path: string): void\n    {\n        if (root_path == null)\n        {\n            root_path = \"\";\n        }\n        Pool.getInstance().ClearGroup(\"Particle3D@\" + root_path, this, function(particle_3d:Particle3D)\n        {\n            particle_3d.Clean();\n        });\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Instantiate Clone - TypeScript\nDESCRIPTION: Clones a Sprite3D using the `instantiate()` method, allowing control over parent, world position, and rotation. Requires an existing Sprite3D instance and a scene instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n//sprite3d的instantiate克隆方法\nlet layaMonkey_clone1 = Laya.Sprite3D.instantiate(this.layaMonkeyParent, this.scene, false, new Laya.Vector3(-2, 0, 0), new Laya.Quaternion(0, -90, 0));\nthis.scene.addChild(layaMonkey_clone1);\n```\n\n----------------------------------------\n\nTITLE: Initializing Path Nodes\nDESCRIPTION: This function initializes the path nodes based on the positions of child nodes in the scene. It retrieves the local positions of a set of 'path' nodes (path0, path1, ...) within the scene's 'Area' object. This seems to create the points for the user to click on in the scene and defines their starting and end positions. \nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nprivate initPath(scene: Scene3D): void {\n        for (var i: number = 0; i < this.pointCount; i++) {\n            var str: string = \"path\" + i;\n            this.path.push(((<MeshSprite3D>scene.getChildByName('Scenes').getChildByName('Area').getChildByName(str))).transform.localPosition);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: 获取显示对象边界示例 - LayaAir - TypeScript\nDESCRIPTION: 本节列举4种获取显示对象边界的方法。示例分别展示使用getGraphicBounds计算Sprite矢量边界，设置autoSize属性自动调整容器大小，loadImage异步加载图像后回调获取宽高，以及手动使用size结合drawTexture设定容器尺寸。代码依赖LayaAir Sprite和Loader模块。不同获取方式适用于不同场景：矢量绘图尺寸计算、动态尺寸自动调整、异步资源加载尺寸获取、高效静态纹理大小设置。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.graphics.drawRect(0,0,100,100,\"#FF0000\");\nvar bounds:Laya.Rectangle=sp.getGraphicBounds();\nLaya.stage.addChild(sp);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.autoSize=true;\nsp.graphics.drawRect(0,0,100,100,\"#FF0000\");\nLaya.stage.addChild(sp);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.loadImage(\"res/apes/monkey2.png\",0,0,0,0,Laya.Handler.create(this,function()\n{\n    console.log(sp.width,sp.height);  \n}));\nLaya.stage.addChild(sp);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"res/apes/monkey2.png\",Laya.Handler.create(this,function()\n{\n    var texture=Laya.loader.getRes(\"res/apes/monkey2.png\");\n    var sp=new Laya.Sprite();\n    sp.graphics.drawTexture(texture,0,0);\n    sp.size(texture.width,texture.height);\n    Laya.stage.addChild(sp);\n}));\n```\n\n----------------------------------------\n\nTITLE: Accessing Animator Playback State Information in TypeScript\nDESCRIPTION: Provides the method signatures and documentation comments for `Animator.getControllerLayer`, `AnimatorControllerLayer.getCurrentPlayState`, and key properties of `AnimatorPlayState` (`normalizedTime`, `duration`, `animatorState`). These are used together to retrieve detailed information about the currently playing animation state on a specific layer, such as its progress and duration.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取控制器层。\n */\ngetControllerLayer(layerInex: number = 0): AnimatorControllerLayer {\n    return this._controllerLayers[layerInex];\n}    \n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取当前的播放状态。\n * @return 动画播放状态。\n */\ngetCurrentPlayState(): AnimatorPlayState {\n    return this._playStateInfo!;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 播放状态的归一化时间,整数为循环次数，小数为单次播放时间。\n*/\nget normalizedTime(): number {\n\treturn this._normalizedTime;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 当前动画的持续时间，以秒为单位。\n*/\nget duration(): number {\n\treturn this._duration;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 动画状态机。\n*/\nget animatorState(): AnimatorState {\n\treturn this._currentState!;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete LayaAir Client Implementation with WebSocket and Protobuf\nDESCRIPTION: A comprehensive TypeScript script for LayaAir that initializes Protocol Buffers, establishes a WebSocket connection, and handles binary message encoding and decoding.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/ProtobufDemo.ts\n// 引入生成的 protobuf 模块，路径相对于当前文件\nimport * as protobuf from \"./libs/protobuf/protobuf\";\nconst { regClass } = Laya;\n\n@regClass()\nexport class ProtobufDemo extends Laya.Script {\n    private ChatMessage: any;\n    private socket: WebSocket | null = null;\n\n    onStart() {\n        console.log(\"Game start\");\n        // 初始化 protobuf\n        this.initializeProtobuf();\n\n        // 初始化 WebSocket 连接\n        this.initializeWebSocket();\n    }\n\n    // 初始化 protobuf 并加载消息定义\n    private initializeProtobuf() {\n        // ChatMessage 是 .proto 文件中定义的消息类型，包含了字段 user、message 和 timestamp，分别用于表示用户名、消息内容和时间戳。\n        this.ChatMessage = protobuf.ChatMessage;\n    }\n\n    // 初始化 WebSocket 并处理消息\n    private initializeWebSocket() {\n        this.socket = new WebSocket(\"ws://localhost:8080\");\n        this.socket.binaryType = \"arraybuffer\";\n        // 连接成功时发送测试消息\n        this.socket.onopen = () => {\n            console.log(\"WebSocket connected\");\n\n            // 发送 ChatMessage 类型的打招呼消息，user 字段表示消息发送者的用户名。message 字段包含消息内容。timestamp 是当前时间戳。\n            const greetingMessage = { user: \"LayaAir\", message: \"Hello, Server!\", timestamp: Date.now() };\n            //调用 encode 方法，将 greetingMessage 对象编码为二进制格式（即序列化），通过.finish()返回一个 Uint8Array类型的二进制缓冲区。\n            const greetingBuffer = this.ChatMessage.encode(greetingMessage).finish();\n            //socket不为 null 或 undefined时，将二进制数据 greetingBuffer 通过 WebSocket 发送到服务器。\n            this.socket?.send(greetingBuffer);\n        };\n\n        // 接收服务器返回的消息\n        this.socket.onmessage = (event) => {\n            //将 event.data 转换为 Uint8Array 类型，以便传递给解码函数 handleServerResponse 进行处理。\n            const buffer = new Uint8Array(event.data);\n            this.handleServerResponse(buffer);\n        };\n\n        // 连接关闭处理\n        this.socket.onclose = () => {\n            console.log(\"WebSocket closed\");\n        };\n\n        // 连接错误处理\n        this.socket.onerror = (error) => {\n            console.error(\"WebSocket error:\", error);\n        };\n    }\n    private handleServerResponse(buffer: Uint8Array) {\n        // 尝试解码为 ChatMessage，使用 decode 方法，将接收到的 Uint8Array 数据 buffer 反序列化为 ChatMessage 类型的 JavaScript 对象。\n        const chatMessage = this.ChatMessage.decode(buffer);\n        console.log(\"Received ChatMessage from server:\", chatMessage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring 2D Mesh Renderer with Circle Mesh in TypeScript\nDESCRIPTION: A TypeScript class 'Mesh2DRender' script for LayaAir that demonstrates how to load a texture, generate a circular 2D mesh, and assign it to a Mesh2DRender component attached to a sprite. The script asynchronously loads an image, then creates a circular mesh using customizable radius and segment count parameters defining the mesh's smoothness and shape. It sets generated vertices, UVs, and indices for the circle mesh, which is applied to the mesh renderer along with the texture. Dependencies include the LayaAir runtime, Sprite, Mesh2DRender, loader, and Mesh2D classes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Mesh2DRender/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Mesh2DRender extends Laya.Script {\n\n    @property({type: Laya.Sprite})\n    private layaMonkey: Laya.Sprite;\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        Laya.loader.load(\"resources/layabox.png\", Laya.Loader.IMAGE).then(() => {\n            this.setMesh2DRender();\n        });\n    }\n\n    // 配置2D网格渲染器\n    setMesh2DRender(): void {\n        let mesh2Drender = this.layaMonkey.getComponent(Laya.Mesh2DRender);\n        // 添加网格\n        mesh2Drender.sharedMesh = this.generateCircleVerticesAndUV(100, 100);\n        let tex = Laya.loader.getRes(\"resources/layabox.png\");\n        mesh2Drender.texture = tex;\n        // mesh2Drender.color = new Laya.Color(0.8, 0.15, 0.15, 1);\n        // mesh2Drender.lightReceive = true;\n    }\n\n    /**\n     * 生成一个圆形2D网格\n     * @param radius 圆的半径\n     * @param numSegments 圆被分割的段数，段数越多圆越平湾\n     */\n    private generateCircleVerticesAndUV(radius: number, numSegments: number): Laya.Mesh2D {\n        // 2π\n        const twoPi = Math.PI * 2;\n        // 顶点数组\n        let vertexs = new Float32Array((numSegments + 1) * 5);\n        // 索引数组\n        let index = new Uint16Array((numSegments + 1) * 3);\n        var pos = 0;\n\n        // 生成圆周上的顶点\n        for (let i = 0; i < numSegments; i++, pos += 5) {\n            const angle = twoPi * i / numSegments;\n            // 计算顶点坐标\n            var x = vertexs[pos + 0] = radius * Math.cos(angle);\n            var y = vertexs[pos + 1] = radius * Math.sin(angle);\n            vertexs[pos + 2] = 0; // z坐标始终为0（2D）\n            // 计算UV坐标\n            vertexs[pos + 3] = 0.5 + x / (2 * radius); // 将x从[-radius, radius]往[0,1]带到\n            vertexs[pos + 4] = 0.5 + y / (2 * radius); // 将y从[-radius, radius]往[0,1]带到\n        }\n        //圆心\n        vertexs[pos] = 0;\n        vertexs[pos + 1] = 0;\n        vertexs[pos + 2] = 0;\n        vertexs[pos + 3] = 0.5;\n        vertexs[pos + 4] = 0.5;\n\n        // 生成三角形索引\n        for (var i = 1, ibIndex = 0; i < numSegments; i++, ibIndex += 3) {\n            index[ibIndex] = i;\n            index[ibIndex + 1] = i - 1;\n            index[ibIndex + 2] = numSegments;\n        }\n        // 处理最后一个三角形：连接最后一个顶点、第一个顶点和圆心\n        index[ibIndex] = numSegments - 1;\n        index[ibIndex + 1] = 0;\n        index[ibIndex + 2] = numSegments;\n        // 顶点声明\n        var declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n        let mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([vertexs], [declaration], index, Laya.IndexFormat.UInt16, [{ length: index.length, start: 0 }]);\n        return mesh2D;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader Definition\nDESCRIPTION: Defines the fragment shader (PS) code, including the inclusion of Sprite2DFrag.glsl and the color calculation logic. This example also shows how to apply a grayscale effect based on a define.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_11\n\nLANGUAGE: glsl\nCODE:\n```\nGLSL Start\n    \n#defineGLSL texturePS\n    // PS\n#endGLSL\n```\n\nLANGUAGE: glsl\nCODE:\n```\n#defineGLSL texturePS\n    #define SHADER_NAME Sprite2DTextureShader\n    #if defined(GL_FRAGMENT_PRECISION_HIGH) \n        precision highp float;\n    #else\n        precision mediump float;\n    #endif\n\n    #include \"Sprite2DFrag.glsl\";\n\n    void main()\n    {\n        clip();\n        vec4 color = getSpriteTextureColor();\n\n        #ifdef GRAY\n            float gray = dot(color.rgb, vec3(0.299, 0.587, 0.114)); // 转换为灰度\n            color.rgb = vec3(gray);\n        #endif\n\n        setglColor(color);\n    }\n    \n#endGLSL\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Day-Night Cycle with Directional Light in LayaAir\nDESCRIPTION: This code snippet demonstrates how to create a dynamic day-night cycle effect by controlling the intensity of a 2D directional light in LayaAir. It involves updating the light intensity based on a time progression, simulating the changes in lighting conditions throughout a day. This script requires the LayaAir engine and assumes a DirectionLight2D component is already attached to the game object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/DirectionLight2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class DayNight extends Laya.Script {\n    declare owner: Laya.Sprite;\n\n    private lightComp: Laya.DirectionLight2D;\n    private dayTime: number = 0;\n    private dayDuration: number = 24; // 一个完整周期的秒数\n\n    private displayText: Laya.Text; // 文本显示当前时间\n\n    onAwake(): void {\n        this.lightComp = this.owner.getComponent(Laya.DirectionLight2D);\n\n        // 初始化文本组件\n        this.displayText = new Laya.Text();\n        this.displayText.color = \"#ffffff\";\n        this.displayText.font = \"Arial\";\n        this.displayText.fontSize = 24;\n        this.displayText.bold = true;\n        this.displayText.x = 10; // 例如，设置在屏幕左上角\n        this.displayText.y = 10;\n        this.owner.scene.addChild(this.displayText); // 在场景中添加文本显示\n    }\n\n    onUpdate(): void {\n        // 更新时间\n        this.dayTime = (this.dayTime + Laya.timer.delta / 1000) % this.dayDuration;\n        const totalMinutes = Math.floor((this.getAdjustedProgress()) * 24 * 60);\n        const hours = Math.floor(totalMinutes / 60);\n        const minutes = totalMinutes % 60;\n        const timeString = `${this.padNumber(hours)}:${this.padNumber(minutes)}`;\n        // 更新文本显示\n        this.displayText.text = `时间: ${timeString}`;\n\n        // 计算当前时间的光照强度\n        const timeProgress = this.dayTime / this.dayDuration;\n        this.updateLightByTime(timeProgress);\n    }\n    private padNumber(num: number): string {\n        return num < 10 ? `0${num}` : `${num}`;\n    }\n    private getAdjustedProgress(): number {\n        return (this.dayTime) % this.dayDuration / this.dayDuration;\n    }\n    private updateLightByTime(progress: number): void {\n        let intensity = 0;\n        if (progress < 0.125) {\n            intensity = 0.2;\n        } else if (progress < 0.375) {\n            const t = (progress - 0.125) / 0.25;\n            intensity = 0.2 + t * 0.8;\n        } else if (progress < 0.708) {\n            intensity = 1.0;\n        } else if (progress < 0.833) {\n            const t = (progress - 0.708) / 0.125;\n            intensity = 1.0 - t * 0.8;\n        } else {\n            intensity = 0.2;\n        }\n        this.lightComp.intensity = intensity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming a 3D Object (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to manipulate the transform properties (position, translation, rotation, and scale) of a 3D object using the `Transform3D` class in LayaAir. The example focuses on a cube (`box`) to illustrate how to change its world coordinates, move it, rotate it, and scale it.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/displayObject/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//改变立方体的世界坐标\nbox.transform.position = new Laya.Vector3(0, 0, 0);\n//立方体的平移\nbox.transform.translate(new Laya.Vector3(1, 1, 1));\n//立方体的旋转\nbox.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);\n//立方体的缩放\nbox.transform.setWorldLossyScale(new Laya.Vector3(2, 2, 2));\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Sprite Properties in LayaAir\nDESCRIPTION: This example shows how to manipulate basic sprite properties like position, anchor point, scale, and rotation after loading an image onto a sprite.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\n// 加载并显示一个图片\nsprite.loadImage(\"atlas/comp/image.png\", null);\n//设置图片的起始位置\nsprite.pos(20, 20);\n//设置锚点\nsprite.anchorX = 0.5;\nsprite.anchorY = 0.5;\n//设置缩放\nsprite.scale(2, 2);\n//旋转\nsprite.rotation = 30;\n// 添加到舞台\nLaya.stage.addChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Script Control of Tab Component in LayaAir\nDESCRIPTION: This TypeScript code demonstrates how to control a Tab component through a custom script in LayaAir. It shows how to set properties like position, font style, labels, colors, and the selected index. The script extends Laya.Script and is registered using @regClass.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Tab/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Tab })\n    public tab: Laya.Tab;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.tab.pos(200, 200);\n        this.tab.labelBold = true;\n        this.tab.labelSize = 20;\n        this.tab.labelStrokeColor = \"#000000\";\n        this.tab.labels = \"Tab 1,Tab 2,Tab 3\";\n        this.tab.labelColors = \"#32556b,#8FB299,#ff0000\";\n        this.tab.selectedIndex = -1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Instancing in Shader\nDESCRIPTION: This shows how to enable instancing for a shader, allowing for efficient rendering of multiple instances of the same object with different world positions. Setting `enableInstancing` to `true` activates the feature, while setting it to `false` disables it. This is optimized to draw multiple objects with a single draw call.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nShader3D Start\n{\n\t....\n    enableInstancing:true,\n    ....\n\t....\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Declaring Prefab-Type Properties for Dynamic Asset Loading in LayaAir with TypeScript\nDESCRIPTION: Shows exposing a property of type Laya.Prefab via @property to enable drag-and-drop assignment of prefab assets from the assets directory in the editor. Upon runtime, the prefab instance is loaded and can be instantiated or manipulated. This approach streamlines prefab usage inside scripts with preview in IDE support. Prerequisite is valid prefab asset setup in the project.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n@property( { type : Laya.Prefab } ) //加载 Prefab 的对象\nprivate prefabFromResource: Laya.Prefab;\n```\n\n----------------------------------------\n\nTITLE: Loading a Custom Resource in Game Code (TypeScript)\nDESCRIPTION: Shows the in-game usage of the registered loader by calling Laya.Loader.load to asynchronously load an 'abc' resource. The return value is a typed ABCResource instance with its fields populated from file data. Inputs are resource URL and expected type; outputs are resource instances accessible in game logic.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nlet res: ABCResource = await Laya.Loader.load(\"xx.abc\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Text Area via Overflow and Mouse Events in LayaAir - TypeScript\nDESCRIPTION: Shows how to configure a Laya.Text component for scrollable overflow and enable interactive scrolling by capturing mouse drag events. The script initializes a large block of text, sets font size, border and overflow to 'scroll', and implements event handlers for custom mouse-based scrolling. This demo requires the LayaAir engine, an exposed Text instance, and relies on event listeners for drag-based scrolling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Text/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\nlet prevX = 0;\nlet prevY = 0;\n\n@regClass()\nexport class UI_Text extends Laya.Script {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t@property({ type: Laya.Text })\n\ttxt: Laya.Text;\n\n\tonAwake(): void {\n\t\t\n\t\tthis.txt.text = \n\t\t\t\"Layabox是HTML5引擎技术提供商与优秀的游戏发行商，面向AS/JS/TS开发者提供HTML5开发技术方案！\\n\" +\n\t\t\t\"Layabox是HTML5引擎技术提供商与优秀的游戏发行商，面向AS/JS/TS开发者提供HTML5开发技术方案！\\n\" +\n\t\t\t\"Layabox是HTML5引擎技术提供商与优秀的游戏发行商，面向AS/JS/TS开发者提供HTML5开发技术方案！\\n\" +\n\t\t\t\"Layabox是HTML5引擎技术提供商与优秀的游戏发行商，面向AS/JS/TS开发者提供HTML5开发技术方案！\\n\" +\n\t\t\t\"Layabox是HTML5引擎技术提供商与优秀的游戏发行商，面向AS/JS/TS开发者提供HTML5开发技术方案！\\n\" +\n\t\t\t\"Layabox是HTML5引擎技术提供商与优秀的游戏发行商，面向AS/JS/TS开发者提供HTML5开发技术方案！\";\n\t\tthis.txt.fontSize = 35;\n\t\tthis.txt.size(400,150);\n\t\tthis.txt.borderColor = \"#fa1515\";\n\t\tthis.txt.overflow = \"scroll\";\n\t\tthis.txt.on(Laya.Event.MOUSE_DOWN, this, this.startScrollText);\n\t}\n\n\t/* 开始滚动文本 */\n\tstartScrollText() {\n\n\t\tprevX = this.txt.mouseX;\n\t\tprevY = this.txt.mouseY;\n\n\t\tLaya.stage.on(Laya.Event.MOUSE_MOVE, this, this.scrollText);\n\t\tLaya.stage.on(Laya.Event.MOUSE_UP, this, this.finishScrollText);\n\t}\n\n\t/* 停止滚动文本 */\n\tfinishScrollText() {\n\n\t\tLaya.stage.off(Laya.Event.MOUSE_MOVE, this, this.scrollText);\n\t\tLaya.stage.off(Laya.Event.MOUSE_UP, this, this.finishScrollText);\n\t}\n\n\t/* 鼠标滚动文本 */\n\tscrollText() {\n\n\t\tlet nowX = this.txt.mouseX;\n\t\tlet nowY = this.txt.mouseY;\n\n\t\tthis.txt.scrollX += prevX - nowX; //水平滚动距离 \n\t\tthis.txt.scrollY += prevY - nowY; //垂直平滚动距离 \n\n\t\tprevX = nowX;//鼠标移动后，归位\n\t\tprevY = nowY;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Categorizing Custom Components in LayaAir IDE with @classInfo (TypeScript)\nDESCRIPTION: Illustrates how to use the @classInfo decorator in a LayaAir TypeScript script to add a custom component to a specific category ('MyScript' with caption 'Main') in the IDE's component list. This improves organization by grouping related custom scripts under a custom menu in the 'Add Component' section. Requires importing classInfo from Laya.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo( {\n    menu : \"MyScript\",\n    caption : \"Main\",\n})\nexport class Main extends Laya.Script {\n\n    onStart() {\n        console.log(\"Game start\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Image with Explicit Type in LayaAir with TypeScript\nDESCRIPTION: This TypeScript code extends the `LoaderDemo` class to load an image using `Laya.loader.load()` with the `Laya.Loader.IMAGE` type specified.  It then creates a `Laya.Sprite` and assigns the loaded texture to it, adding the sprite to the display list. This showcases loading resources with explicit type definitions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        //下面的URL未来可能会失效，仅用于示例参考\n        this.loadHTMLImage(\"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\");\n    }\n\n    /** 加载URL无后缀资源 */\n    loadHTMLImage(url: string): void {\n        Laya.loader.load(url, Laya.Loader.IMAGE).then((res: Laya.Texture) => {\n            let sp = new Laya.Sprite();\n            sp.texture = res;\n            this.owner.addChild(sp);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Serialization with @property Decorator Options in TypeScript\nDESCRIPTION: The following snippet demonstrates how to control the serialization behavior of component properties in LayaAir using the serializable option of @property(). By setting serializable to false, the property won't be saved to scene or prefab files, but can still display and modify values in the IDE. The example exposes a private radian value and a non-serialized degree property that converts between radians and degrees for user-friendly editing. Dependencies include regClass and property from Laya. This pattern supports use cases where intermediate calculated properties should not be serialized.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number })\n    _radian: number = 0;  // Not exposed in IDE property panel because of leading underscore\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) // degree not serialized\n     get degree() {\n        return this._radian * (180 / Math.PI); // Convert radians to degrees for IDE display\n    }\n    set degree(value: number) {\n        this._radian = value * (Math.PI / 180); // Convert input degrees back to radians\n    }\n    \n    onStart() {\n        console.log(this._radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Following Logic in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript script defines a LayaAir component (`CameraControll`) that makes the camera smoothly follow a target `Sprite3D`. It uses the `onUpdate` method to continuously adjust the camera's position based on the target's movement. The script requires a `target` `Sprite3D` to be assigned through the LayaAir editor via the `@property` decorator.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Camera/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport default class CameraControll extends Laya.Script {\n    @property( { type: Laya.Sprite3D } )\n    public target: Laya.Sprite3D;\n    private camera: Laya.Camera;\n    public distanceUp: number = 0.5;//相机与目标的竖直高度参数\n    public distanceAway: number = 10;//相机与目标的水平距离参数\n    public smooth: number = 2;//位置平滑移动插值参数值\n    public camDepthSmooth: number = 20\n    public curpos: Laya.Vector3;\n    private delatpos: Laya.Vector3;\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onAwake(): void {\n        this.curpos = new Laya.Vector3();\n    }\n\n    /**\n     * 第一次执行update之前执行，只会执行一次\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onStart(): void {\n        this.camera = this.owner as Laya.Camera;\n        if (this.target) {\n            this.target.transform.position.cloneTo(this.curpos);\n            this.delatpos = new Laya.Vector3();\n        }\n    }\n\n    /**\n     * 每帧更新时执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onUpdate(): void {\n        if (!this.target || !this.camera) return;\n        this.target.transform.position.vsub(this.curpos, this.delatpos);\n        this.camera.transform.position.vadd(this.delatpos, this.delatpos);\n        this.camera.transform.position = this.delatpos;\n        this.target.transform.position.cloneTo(this.curpos);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Prefab with Addressables in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates how to use the Addressables API within the LayaAir intelligent resource management plugin to load a prefab into a Scene3D. Requires LayaAir engine, access to Addressables plugin, and a resource key (alias) for the prefab. The script, decorated with @regClass, supports two loading methods: Addressables.instantiateAsync to directly create the instance, and Addressables.loadAssetAsync followed by create(). The loaded GameObjects are placed at set positions within the scene. The input is the prefab resource alias, and the output is instantiated 3D object(s) added to the scene. Limitations: only resource aliases registered in the plugin can be used.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/apply/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@regClass()\nexport class LoadPrefab extends Laya.Script {\n\n    @property(Laya.Scene3D)\n    public scene: Laya.Scene3D;\n\n    key: string = \"prefabForLoad\"\n\n    onStart(): void {\n        Addressables.instantiateAsync(this.key).then((res) => {\n            res.data.transform.position = new Laya.Vector3(-3, 0, 0);\n            this.scene.addChild(res.data);\n        })\n\n        Addressables.loadAssetAsync(this.key).then((res) => {\n            let prefab = res.data.create();\n            prefab.transform.position = new Laya.Vector3(3, 0, 0);\n            this.scene.addChild(prefab);\n        })\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hit Areas for Sprites in LayaAir\nDESCRIPTION: Example showing how to define a custom hit area for sprite interaction. This creates a clickable region different from the sprite's visual boundaries, limiting where mouse events will be triggered.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet sp = new Laya.Sprite();\nLaya.stage.addChild(sp);\n// 加载并显示一个图片\nsp.loadImage(\"atlas/comp/image.png\", null);\n//设置图片的点击事件\nsp.on(\"click\", this, () => {\n\tLaya.Tween.to(sp, { scaleX: 0.5, scaleY: 0.5 }, 100);\n});\n//设置鼠标点击区域\nlet hitArea: Laya.HitArea = new Laya.HitArea();\nhitArea.hit.drawRect(0, 0, 100, 100, \"#00ff00\");\nsp.hitArea = hitArea;\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Node.js in Scene Process Script - TypeScript\nDESCRIPTION: Illustrates a script file (`TestSceneScript.ts`) intended to run only in the Scene process, registered with `IEditorEnv.regClass`, which safely imports and uses Node.js modules like `fs` without affecting scripts running in the Preview process.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//TestSceneScript.ts\nimport fs from \"fs\";\n\n//注意是IEditorEnv.regClass，不是Laya.regClass!!\n@IEditorEnv.regClass()\nclass TestSceneScript {\n\n    static visitNode() {\n        fs.readFileSync(....)        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Achievement Interface - TypeScript\nDESCRIPTION: This TypeScript interface extends the `IExtendLib` to include functions for setting achievements (`setAchievement`) and executing Steam callbacks (`steamCallback`). It uses `Laya.importNative` to import the native `steam_demo.dll` and assign it to the `extendLib` constant.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IExtendLib {\n    // 初始化Steam\n    initializeSteam(): number;  // 返回1表示成功，0表示失败\n    \n    // 设置（解锁）某个成就\n    setAchievement(achievementID: string): number;  // 返回1表示成功，0表示失败\n\n    steamCallback(): number;  // Steam回调函数，返回1表示成功，0表示失败\n}\n\nexport const extendLib: IExtendLib = Laya.importNative(\"steam_demo.dll\");\n```\n\n----------------------------------------\n\nTITLE: Scaling TiledMap in LayaAir and adjusting view port\nDESCRIPTION: This snippet demonstrates how to scale the TiledMap using the scale property and set the pivot for zooming around a specific center using setViewPortPivotByScale method. It ensures the map zooms centered around a desired point, with code handling view adjustments post-loading.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate onLoaded():void {\n    this.tMap.mapSprite().removeSelf();\n    this.owner.addChild(this.tMap.mapSprite());\n    //将原地图放大2倍\n    this.tMap.scale = 2;\n    //设置缩放中心点为(视口宽度的0.1，视口高度的0.5)\n    this.tMap.setViewPortPivotByScale(0.1, 0.5);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Scene with LayaAir JavaScript\nDESCRIPTION: Demonstrates the use of Laya.Scene.open to instantiate and display a scene by path without closing other scenes. Requires the LayaAir framework and the specified .ls scene file at the path. Expected input: path to the scene file; optional: whether to close other scenes. Displays the target scene in the application's current state. No output is returned; visual change is rendered. Limitations: the path must be valid and resolvable by LayaAir.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/useScene/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nLaya.Scene.open(\"uiDemo/page/OpenScene.ls\", false);\n```\n\n----------------------------------------\n\nTITLE: Preloading Prefabs using Laya.loader - TypeScript\nDESCRIPTION: This code preloads a set of resources including images and prefab files using Laya.loader.load().  The method takes an array of resource URLs and their types.  It also handles loading progress using the `onLoading` function and error scenarios through the `onError` function.  After loading all the resources, it navigates to the main scene using `Laya.Scene.open()`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/prefab/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LoadingRTBase } from \"./LoadingRT.generated\";\n\nconst { regClass, property } = Laya;\n@regClass()\nexport default class LoadingRT extends LoadingRTBase {\n    onAwake(): void {\n        Laya.loader.load(\n            //先加载本场景要用的\n            [\"resources/UI/image.png\", \"resources/UI/progress.png\", \"resources/UI/progress$bar.png\"]\n        ).then(() => {\n            let resArr: Array<any> = [\n\n                { url: \"resources/prefab/uiDemo/useUI/ChangeTexture.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/useUI/MouseThrough.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/useUI/PhysicalCollision.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/useUI/Progress.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/useUI/TextShow.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/page/IframeElement.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/page/UsePanel.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/list/BagList.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/list/ComboBox.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/list/LoopList.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/list/MailList.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/list/Refresh.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/list/TreeBox.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/list/TreeList.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/animation/AtlasAni.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/animation/FrameAni.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/animation/SkeletonAni.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/animation/TimelineAni.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/animation/TweenAni.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/interactive/Astar.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/interactive/Joystick.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/interactive/ShapeDetection.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/uiDemo/interactive/tiledMap.lh\", type: Laya.Loader.HIERARCHY },\n\n                { url: \"resources/prefab/Bullet.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/closeBtn.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/ComboList.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/defaultButton.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/defaultLabel.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/DropBox.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/LoopImg.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/role.lh\", type: Laya.Loader.HIERARCHY },\n\n                { url: \"resources/prefab/ani/cd.lh\", type: Laya.Loader.HIERARCHY },\n                { url: \"resources/prefab/ani/refresh.lh\", type: Laya.Loader.HIERARCHY },\n\n            ];\n\n\n            //3.0的load，同时可以加载2D,3D资源\n            Laya.loader.load(resArr, null, Laya.Handler.create(this, this.onLoading, null, false)).then(() => {\n                // 加载完成后，处理逻辑\n                this.progress.value = 0.98;\n                console.log(\"加载结束\", this.progress.value);\n                //预加载的东西太少，为了本地看效果延迟一秒，真实项目不需要延迟\n                Laya.timer.once(1000, this, () => {\n                    //跳转到入口场景\n                    Laya.Scene.open(\"Scenes/Index.ls\"); //不要使用Laya.Scene.open(\"./Scenes/Index.ls\");\n                });\n\n            });\n\n            // 侦听加载失败\n            Laya.loader.on(Laya.Event.ERROR, this, this.onError);\n        });\n    }\n\n    /**\n   * 当报错时打印错误\n   * @param err 报错信息\n   */\n    onError(err: string): void {\n        console.log(\"加载失败: \" + err);\n    }\n\n    /**\n     * 加载时侦听\n     */\n    onLoading(progress: number): void {\n        //接近完成加载时，让显示进度比实际进度慢一点，这是为打开场景时的自动加载预留，尤其是要打开的场景资源多，并没有完全放到预加载中，还需要再自动加载一部分时。\n        if (progress > 0.92) this.progress.value = 0.95;\n        else this.progress.value = progress;\n        console.log(\"加载进度: \" + progress, this.progress.value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Playing DragonBones Animation TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to load a DragonBones skeletal animation (.sk file), create an armature, add it to the display list, and play animations. It uses the `Laya.Skeleton` and `Laya.Templet` classes, which are essential for working with skeletal animations in LayaAir. The code also handles animation completion and cycles through different animations. Dependencies include the LayaAir engine and a properly converted DragonBones animation file.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/skeleton/sk/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n\tprivate mCurrIndex: number = 0;\n\tprivate mArmature: Laya.Skeleton;\n\n    onStart() {\n        console.log(\"Game start\");\n\t\t//加载内置骨骼动画资源\n\t\tLaya.loader.load(\"skeleton/Dragon/Dragon.sk\").then((templet: Laya.Templet) => {\n\t\t\t//创建模式为1，可以启用换装\n\t\t\tthis.mArmature = templet.buildArmature(0);\n\t\t\tthis.mArmature.x = 300;\n\t\t\tthis.mArmature.y = 350;\n\t\t\tthis.mArmature.scale(0.5, 0.5);\n\t\t\tthis.owner.addChild(this.mArmature);\n\t\t\t//设置动画播放完成后，调用completeHandler继续播放下一个动画\n\t\t\tthis.mArmature.on(Laya.Event.STOPPED, this, this.completeHandler);\n\t\t\tthis.play();\n\t\t});\n    }\n\n\t\n\tprivate completeHandler(): void {\n\t\tthis.play();\n\t}\n\n\t//播放骨骼动画\n\tprivate play(): void {\n\t\t//每次到下一个动画\n\t\tthis.mCurrIndex++;\n\t\tif (this.mCurrIndex >= this.mArmature.getAnimNum()) {\n\t\t\tthis.mCurrIndex = 0;\n\t\t}\n\t\tthis.mArmature.play(this.mCurrIndex, false);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Methods in LayaAir ECS Components\nDESCRIPTION: Example showing the implementation of all available lifecycle methods in a LayaAir Script component. These methods include onAdded, onReset, onAwake, onEnable, onStart, onUpdate, onLateUpdate, onPreRender, onPostRender, onDisable, and onDestroy, each triggered at specific points in the component's lifecycle.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t//被添加到节点后调用，和Awake不同的是即使节点未激活onAdded也会调用\n    onAdded(): void {\n        console.log(\"Game onAdded\");\n    }\n\n    //重置组件参数到默认值，如果实现了这个函数，则组件会被重置并且自动回收到对象池，方便下次复用。如果没有重置，则不进行回收复用\n    onReset(): void {\n        console.log(\"Game onReset\");\n    }\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        console.log(\"Game onAwake\");\n    }\n\n    //组件被启用后执行，比如节点被添加到舞台后\n    onEnable(): void {\n        console.log(\"Game onEnable\");\n    }\n\n    //第一次执行update之前执行，只会执行一次\n    onStart(): void {\n        console.log(\"Game onStart\");\n    }\n\n    //每帧更新时执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n    onUpdate(): void {\n        console.log(\"Game onUpdate\");\n    }\n\n    //每帧更新时执行，在update之后执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n    onLateUpdate(): void {\n        console.log(\"Game onLateUpdate\");\n    }\n\n    //渲染之前执行\n    onPreRender(): void {\n        console.log(\"Game onPreRender\");\n    }\n\n    //渲染之后执行\n    onPostRender(): void {\n        console.log(\"Game onPostRender\");\n    }\n\n    //组件被禁用时执行，比如从节点从舞台移除后\n    onDisable(): void {\n        console.log(\"Game onDisable\");\n    }\n\n    //手动调用节点销毁时执行\n    onDestroy(): void {\n        console.log(\"Game onDestroy\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Camera Target Capturing with lookAt Method in LayaAir TypeScript\nDESCRIPTION: This snippet demonstrates the lookAt() method signature in LayaAir 3D. It allows positioning a camera to face a specific target in 3D space by providing the target position, an up vector, and optional parameters for local space and camera-specific behavior.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\t/**\n\t * 观察目标位置。\n\t * @param\ttarget 观察目标。\n\t * @param\tup 向上向量。\n\t * @param\tisLocal 是否局部空间。\n\t */\n\tlookAt(target: Vector3, up: Vector3, isLocal: boolean = false, isCamera: boolean = true): void\n```\n\n----------------------------------------\n\nTITLE: ILoadOptions Interface Definition in LayaAir (TypeScript)\nDESCRIPTION: This code defines the `ILoadOptions` interface, which specifies the available options that can be used when loading resources in LayaAir. It includes parameters such as resource type, priority, group, cache, retry behavior, worker loader usage, texture parameters, blob data, and meta file handling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ILoadOptions {\n    type?: string; //资源类型。比如：Loader.IMAGE。\n    priority?: number; //(default = 0)加载的优先级，数字越大优先级越高，优先级高的优先加载。\n    group?: string; //分组，方便对资源进行管理。\n    cache?: boolean; //是否缓存\n    noRetry?: boolean; //是否重新尝试加载\n    silent?: boolean; //是否提示加载失败\n    useWorkerLoader?: boolean; //(default = false)是否使用worker加载（只针对IMAGE类型和ATLAS类型，并且浏览器支持的情况下生效）\n    constructParams?: TextureConstructParams; //图片属性，参考如下\n    propertyParams?: TexturePropertyParams; //纹理属性，参考如下\n    blob?: ArrayBuffer; //传递blob对象获得HTMLImageElement\n    noMetaFile?: boolean; //是否不去下载Meta(json)文件\n    [key: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating 3D Node Transform and Particle System via Sprite3D Property in TypeScript\nDESCRIPTION: Shows advanced usage of a property typed as Laya.Sprite3D to access and modify node transform properties and particle simulation speed. Uses @property decorator to expose the particle node. In onAwake, it sets a local position and acquires ShurikenParticleRenderer component to adjust particleSystem.simulationSpeed, demonstrating component retrieval and property updates from node references.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property( { type :Laya.Sprite3D } ) //节点类型\n    public p3d: Laya.Sprite3D;\n\n    onAwake(): void {\n\n        this.p3d.transform.localPosition = new Laya.Vector3(0,5,5);\n        let p3dRenderer = this.p3d.getComponent(Laya.ShurikenParticleRenderer);\n        p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: Recycling an Object into Pool in TypeScript\nDESCRIPTION: Returns an object to its respective pool for future reuse. Checks for a flag to prevent double recycling, promoting memory efficiency and avoiding errors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Pool/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic recover(sign: string, item: any): void {\n    if (item[Pool.POOLSIGN]) return;\n    item[Pool.POOLSIGN] = true;\n    Pool.getPoolBySign(sign).push(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kinematic Rigidbody in LayaAir 3D Using TypeScript\nDESCRIPTION: The snippet shows how to access a Rigidbody3D component attached to a 3D object and set its 'isKinematic' property to true, converting it from a dynamic rigidbody to a kinematic rigidbody. Kinematic rigidbodies are unaffected by physics forces but can affect other dynamic rigidbodies. Dependencies include having a 3D object with a Rigidbody3D component. Input is the targeted Rigidbody3D component; output is updated physics behavior controlling movement and collision response.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*……省略若干代码……*/\n\n//获得刚体碰撞器\nthis.rigidbody = this.cube1.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n//开启运动类型刚体\nthis.rigidbody.isKinematic = true;\n\n/*……省略若干代码……*/\n```\n\n----------------------------------------\n\nTITLE: Monitoring Network Changes with Event Listener in LayaNative (JavaScript)\nDESCRIPTION: This snippet demonstrates how to register a network event listener function in LayaNative to monitor network status changes. The function receives a type parameter indicating the network status and displays it in an alert.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/network/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif( conch )\n{\n    conch.setNetworkEvtFunction(function(type)\n    {\n\t    alert(type)\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Static Native Functions Using LayaNative Reflection - TypeScript\nDESCRIPTION: Demonstrates how to invoke static native functions implemented in Android (Java) and iOS (Objective-C) from the JavaScript layer using LayaNative's reflection mechanism. It detects the operating system at runtime and creates appropriate bridge objects for method calls. The snippet includes calling functions with string, number, and boolean parameters as well as invoking asynchronous callbacks with JSON arguments. This approach requires building with LayaAir-IDE to precompile TypeScript to JavaScript, enabling cross-language bridging.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/Secondary_Development/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n  var os = conchConfig.getOS();\n  var bridge;\n  var obj = {} as any;\n  if (os == \"Conch-ios\") {\n      bridge = PlatformClass.createClass(\"JSBridge\");//创建脚步代理\n  }\n  else if (os == \"Conch-android\") {\n    //需要完整的类路径，注意与iOS的不同\n    bridge = PlatformClass.createClass(\"demo.JSBridge\");//创建脚步代理\n  } \n\n  if (os == \"Conch-ios\") {\n    //iOS注意函数签名，注意与Android的不同\n    alert(bridge.call(\"testString:\",\"hello\"));\n    alert(bridge.call(\"testNumber:\",256.0));\n    alert(bridge.call(\"testBool:\",false));\n    obj.value = \"Hello OC!\";\n    bridge.callWithBack(function(value: any) {\n      var obj = JSON.parse(value)\n      alert(obj.value);\n      },\"testAsyncCallback:\", JSON.stringify(obj));\n  }\n  else if (os == \"Conch-android\") {\n    alert(bridge.call(\"testString\",\"hello\"));\n    alert(bridge.call(\"testNumber\",256.0));\n    alert(bridge.call(\"testBool\",false));\n    obj.value = \"Hello Java!\";\n    bridge.callWithBack(function(value: any) {\n      var obj = JSON.parse(value)\n      alert(obj.value);\n    },\"testAsyncCallback\",JSON.stringify(obj));\n  } \n```\n\n----------------------------------------\n\nTITLE: Using Engine Object Types with @property() in TypeScript\nDESCRIPTION: This code demonstrates using LayaAir engine object types with the `@property()` decorator, allowing you to directly assign specific engine objects like Camera, Scene3D, or Sprite3D to component properties in the IDE. This enforces type safety and simplifies object references within the LayaAir editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property( { type:Laya.Camera } ) //摄像机类型\n    private camera: Laya.Camera;  \n\n    @property( { type:Laya.Scene3D } ) //3D场景根节点类型\n    private scene3D: Laya.Scene3D;\n\n    @property( { type:Laya.DirectionLightCom } ) //DirectionLight组件类型\n    private directionLight: Laya.DirectionLightCom;\n\n    @property( { type:Laya.Sprite3D } ) //Sprite3D节点类型\n    private cube: Laya.Sprite3D;  \n\n    @property( { type:Laya.Prefab } ) //加载 Prefab 拿到的对象\n    private prefabFromResource: Laya.Prefab;    \n\n    @property( { type:Laya.ShurikenParticleRenderer } ) //ShurikenParticleRenderer组件类型\n    private particle3D: Laya.ShurikenParticleRenderer;  \n\n    @property( { type:Laya.Node } ) //节点类型\n    private scnen2D: Laya.Node; \n\n    @property( { type:Laya.Box } ) //拿到 Box 组件\n    private box: Laya.Box; \n\n    @property( { type:Laya.List } ) //拿到 List 组件\n    private list: Laya.List; \n\n    @property( { type:Laya.Image } ) //拿到 Image 组件\n    private image: Laya.Image; \n\n    @property( { type:Laya.Label } ) //拿到 Label 组件\n    private label: Laya.Label; \n\n    @property( { type:Laya.Button } ) //拿到 Button 组件\n    private button: Laya.Button; \n\n    @property( { type:Laya.Sprite } ) //拿到 Sprite 组件\n    private sprite: Laya.Sprite; \n\n    @property( { type:Laya.Animation } ) //拿到 Animation 组件\n    private anmation: Laya.Animation; \n\n    @property( { type:Laya.Vector3 } ) //Laya.Vector3类型\n    private vector3 : Laya.Vector3;\n}\n```\n\n----------------------------------------\n\nTITLE: Unlit Shader vertex shader implementation using includes and varying - GLSL\nDESCRIPTION: A vertex shader block for an unlit shader that processes vertex attributes. It uses GLSL includes for common utility functions, declares varyings conditionally based on macros for UV and color, and computes transformed positions by multiplying with world and projection matrices, applying remapping on z. UV coordinates undergo tiling and offset transformations in the vertex shader to prepare for fragment texture sampling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_14\n\nLANGUAGE: glsl\nCODE:\n```\n#defineGLSL unlitVS\n\n    #define SHADER_NAME UnlitShader\n\n    #include \"Math.glsl\";\n    #include \"Scene.glsl\";\n    #include \"SceneFogInput.glsl\";\n    #include \"Camera.glsl\";\n    #include \"Sprite3DVertex.glsl\";\n    #include \"VertexCommon.glsl\";\n\n    #ifdef UV\n    varying vec2 v_Texcoord0;\n    #endif // UV\n\n    #ifdef COLOR\n    varying vec4 v_VertexColor;\n    #endif // COLOR\n\n    void main()\n    {\n        Vertex vertex;\n        getVertexParams(vertex);\n\n    #ifdef UV\n        v_Texcoord0 = transformUV(vertex.texCoord0, u_TilingOffset);\n    #endif // UV\n\n    #ifdef COLOR\n        v_VertexColor = vertex.vertexColor;\n    #endif // COLOR\n\n        mat4 worldMat = getWorldMatrix();\n        vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\n        vec3 positionWS = pos.xyz / pos.w;\n        gl_Position = getPositionCS(positionWS);\n        gl_Position = remapPositionZ(gl_Position);\n\n    }\n#endGLSL\n```\n\n----------------------------------------\n\nTITLE: Child Node Translation - TypeScript\nDESCRIPTION: Translates a child node independently of its parent. Requires a child Sprite3D instance and a Vector3 for translation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.layaMonkeySon.transform.translate(new Laya.Vector3(-0.2, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating A* Grid from Image Texture in TypeScript\nDESCRIPTION: Defines a function 'createGridFromAStarMap' that reads pixel data from a Texture2D (representing the walkable map). It iterates through pixels, converting white pixels (walkable) to 1 and others (unwalkable) to 0, generating a 2D array suitable for the A* graph.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 通过图片数据计算得到AStart网格\n */\nprivate createGridFromAStarMap(texture): any {\n    var textureWidth = texture.width;\n    var textureHeight = texture.height;\n    var pixelsInfo = texture.getPixels();\n    var aStarArr = [];\n    var index = 0;\n    for (var w = 0; w < textureWidth; w++) {\n        var colaStarArr = aStarArr[w] = [];\n        for (var h = 0; h < textureHeight; h++) {\n            var r = pixelsInfo[index++];\n            var g = pixelsInfo[index++];\n            var b = pixelsInfo[index++];\n            var a = pixelsInfo[index++];\n            if (r == 255 && g == 255 && b == 255 && a == 255)\n                colaStarArr[h] = 1;\n            else {\n                colaStarArr[h] = 0;\n            }\n        }\n    };\n    return aStarArr;\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Map Definition\nDESCRIPTION: Demonstrates how to define an attribute map, including vertex position data (a_posuv), vertex color data (a_attribColor), and texture flag data (a_attribFlags).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n    ......\n    attributeMap: {\n        a_posuv: Vector4,\n        a_attribColor: Vector4,\n        a_attribFlags: Vector4,\n    },\n    ......\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Animator Component in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to obtain a reference to the `Animator` component attached to a game object (presumably a `Sprite3D` instance referenced by `this.target`). It utilizes the `getComponent<Laya.Animator>(Laya.Animator)` method provided by the LayaAir engine's node hierarchy. This is essential for controlling the animation state machine programmatically.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//获得状态机\nthis.animator = this.target.getComponent<Laya.Animator>(Laya.Animator);\n```\n\n----------------------------------------\n\nTITLE: Creating VScrollBar Component with Code in LayaAir\nDESCRIPTION: This TypeScript code illustrates how to create a VScrollBar component programmatically in LayaAir. It loads the necessary skin resources, instantiates the VScrollBar, sets its properties such as skin, height, position, min, max, and changeHandler. A Text component is also created to display the current value of the scrollbar, using the onChange function. It requires the Laya library and associated image resources.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/VScrollBar/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_VScrollBar extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n    // 文本组件，用于显示滚动条的value值\n    public text: Laya.Text;\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 创建文本组件\n        this.text = new Laya.Text();\n        this.text.pos(300, 260);\n        this.owner.addChild(this.text);\n\n        // 滚动条皮肤资源\n        var skins: any[] = [];\n        skins.push(\"atlas/comp/vscroll.png\", \"atlas/comp/vscroll$bar.png\", \"atlas/comp/vscroll$down.png\", \"atlas/comp/vscroll$up.png\");\n\n        Laya.loader.load(skins).then(() => {\n            // 创建滚动条\n            var vs: Laya.VScrollBar = new Laya.VScrollBar();\n            vs.skin = \"atlas/comp/vscroll.png\";\n            vs.height = 300;\n            vs.pos(300, 300);\n            vs.min = 0;\n            vs.max = 100;\n            vs.changeHandler = new Laya.Handler(this, this.onChange);\n            this.owner.addChild(vs);\n        });\n    }\n\n    private onChange(value: number): void {\n        this.text.text = \"滚动条的位置： value=\" + value;\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Batching with TypeScript in LayaAir\nDESCRIPTION: This TypeScript code creates a script component that generates multiple 3D sphere sprites, assigns them a shared material and mesh, and uses a UniformBuffer to store color data for optimized rendering. The script utilizes LayaAir's component system and custom data features.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/performanceOptimization/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //共享材质，用于合批\n    public batchMat: Laya.Material;\n    //颜色数目\n    private _colorNums = 20;\n    //精灵数目\n    private _spriteNums = 200;\n\n    private _createColorBufferData() {\n        //随机给20个颜色值\n        let colorBuffer = new Float32Array(20 * 4);\n        for (var i = 0; i < this._colorNums; i++) {\n            let offset = i * 4;\n            colorBuffer[offset] = Math.random();\n            colorBuffer[offset + 1] = Math.random();\n            colorBuffer[offset + 2] = Math.random();\n            colorBuffer[offset + 3] = 1;\n        }\n        //设置uniformbuffer\n        this.batchMat.setBuffer(\"colormap\", colorBuffer);\n    }\n\n    //随机生成_spriteNums数目个的小球，使用随机颜色\n    private _createMeshSpriteRender() {\n        let mesh = Laya.PrimitiveMesh.createSphere(0.5);\n        let ownerSprite = this.owner;\n        let positionRanvge = 30;\n        for (var i = 0; i < this._spriteNums; i++) {\n            let sprite = ownerSprite.addChild(new Laya.Sprite3D());\n            let filter = sprite.addComponent(Laya.MeshFilter);\n            let render = sprite.addComponent(Laya.MeshRenderer);\n            // 设置相同的材质与网格\n            filter.sharedMesh = mesh;\n            render.sharedMaterial = this.batchMat;\n            //随机位置\n            sprite.transform.localPosition = this._getRandomPosition(positionRanvge);\n            //随机一个颜色索引\n            let colorIndex = Math.floor(Math.random() * this._colorNums);\n            //设置节点的 Laya.ENodeCustomData.custom_0 为对应的颜色索引\n            render.setNodeCustomData(Laya.ENodeCustomData.custom_0, colorIndex);\n        }\n    }\n    \n    private _getRandomPosition(positionRanvge: number): Laya.Vector3 {\n        let getRangeRandom = () => {\n            return (Math.random() - 0.5) * positionRanvge;\n        }\n        return new Laya.Vector3(getRangeRandom(), 0.3, getRangeRandom());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Property Decorator Controls in TypeScript\nDESCRIPTION: A comprehensive example showing various property decorator controls including visibility, readonly, validation, password handling, and text input options in LayaAir components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t//隐藏控制\n    @property({ type: Boolean })\n    a: boolean;\n    @property({ type: String, hidden: \"!data.a\" })//将条件表达式!data.a放在了字符串中，如果a为true（在IDE中为勾选状态），则!data.a返回false，此时hidden属性表示的是显示\n    hide: string = \"\";\n\n\t// 只读控制\n    @property({ type: Boolean })\n    b: boolean;\n    @property({ type: String, readonly: \"data.b\" })//将条件表达式data.b放在了字符串中，如果b为true（在IDE中为勾选状态），则data.b就返回true，此时readonly属性表示只读\n    read: string = \"\";\n\n\t//数据检查机制\n    @property(String)\n    text1: string;\n    @property({ type: String, validator: \"if (value == data.text1) return '不能与a值相同' \" })\n    text2: string = \"\";\n\n\t//密码输入\n    @property({ type: String, password: true })\n    password: string;\n\n\t//如果true或者缺省，文本输入每次输入都提交；否则只有在失焦时才提交\n    @property({ type: String, submitOnTyping: false })\n    submit: string;\n\n\t//输入文本的提示信息\n    @property({ type: \"text\", prompt: \"文本提示信息\" })\n    prompt: string;\n\n\t//显示为下拉框\n    @property({ type: Number, enumSource: [{name:\"Yes\", value:1}, {name:\"No\",value:0}] })\n    enumsource: number;\n\n\t//反转布尔值\n    @property({ type: \"boolean\", reverseBool: true })\n\treverseboolean : boolean;\n\t\n\t//允许null值\n    @property({ type: String, nullable: true })\n    nullable: string;\n\n\t//控制数字输入的精度和范围\n    @property({ type: Number, range:[0,5], step: 0.5, fractionDigits: 3 })\n    range : number;\n\n\t//显示为百分比\n    @property({ type: Number, range:[0,1], percentage: true })\n    percent : number;\n\n\t//固定数组长度\n    @property({ type: [\"number\"], fixedLength: true })\n    arr1: number[];\n\n\t//数组允许的操作\n    @property({ type: [\"number\"], arrayActions: [\"delete\", \"move\"] })\n    arr2: number[];\n\n    //使数组元素编辑时限制最大值和最小值\n    @property({ type: [Number], elementProps: { range: [0, 100] } })\n    array1: Array<Number>;\n    //如果是多维数组，则elementProps同样需要使用多层\n    @property({ type: [[Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    array2: Array<Array<Number>>;\n\n\t//不提供透明度a值的修改\n    @property({ type: Laya.Color, showAlpha: false })\n    color1: Laya.Color;\n\n\t//颜色类型时，defaultColor定义一个非null时的默认值\n    @property({ type: String, inspector: \"color\", defaultColor: \"rgba(217, 232, 0, 1)\" })\n    color2: string;\n\n\t//显示一个checkbox决定颜色是否为null\n    @property({ type: Laya.Color, colorNullable: true })\n    color3: Laya.Color;\n\n\t//加载Image资源类型，设置资源路径格式\n    @property({ type: String, isAsset: true, assetTypeFilter: \"Image\" })\n    resource: string;\n\n    //x属性出现在testposition属性之前\n    @property({ type: String })\n    x: string;\n    //可以用position人为将testposition属性安排在x属性之前显示\n    @property({ type: String, position: \"before x\" })\n    testposition: string;\n\n\t//增加缩进，单位是层级\n    @property({ type: String, addIndent:1 })\n    indent1: string;\n    @property({ type: String, addIndent:2 })\n    indent2: string;\n\n    //当属性改变时，调用名称为onChangeTest的函数\n    @property({ type: Boolean, onChange: \"onChangeTest\"})\n    change: boolean;\n    onChangeTest() {\n        console.log(\"onChangeTest\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Advanced Example: Simple Grass\nDESCRIPTION: This part introduces a more complex example: simple grass. This section is broken into 2 sub-sections: vertex shader and fragment shader.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: 通过改变速度暂停与恢复动画\nDESCRIPTION: 调节Animator的speed属性实现动画暂停（speed=0）、正常（speed=1）或半速（speed=0.5），简便有效的控制动画的播放状态。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.speed = 0.0; //暂停\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.speed = 1.0; //正常播放\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.speed = 0.5; //半速播放\n```\n\n----------------------------------------\n\nTITLE: Getting Object Pool by Sign in LayaAir\nDESCRIPTION: Method to retrieve or create an object pool based on a string identifier. If the pool doesn't exist, a new one is created and returned.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 根据对象类型标识字符，获取对象池。\n     * @param sign 对象类型标识字符。\n     * @return 对象池。\n     */\n    static getPoolBySign(sign: string): any[] {\n        return Pool._poolDic[sign] || (Pool._poolDic[sign] = []);\n    }\n```\n\n----------------------------------------\n\nTITLE: Using runCallLater and callLater Together in LayaAir Script (TypeScript)\nDESCRIPTION: Demonstrates combining callLater and runCallLater such that runCallLater triggers the callback immediately and deletes it, so subsequent callLater in the same frame does not re-execute the method. Designed for UI and animation scenarios to guarantee just-in-time execution and cleanup.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //延迟一帧执行hideImage\n        Laya.timer.callLater(this, this.hideImage);\n        //当前帧立即执行hideImage，执行后删除定时器\n        Laya.timer.runCallLater(this, this.hideImage);\n    }\n\n    hideImage(): void {\n        console.log(\"hideImage\");\n        this.Image.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Repeating Frame-Based Timers with Laya.Timer in TypeScript\nDESCRIPTION: Provides the implementation for frameLoop, a method to repeatedly execute a callback every specified number of frames. Parameters include delay (frames), caller (context), method (callback), optional arguments, and whether to override previous scheduled callbacks. Utilizes the _create helper and is intended to be accessed via the Laya.timer singleton.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 定时重复执行(基于帧率)。\n * @param\tdelay\t间隔几帧(单位为帧)。\n * @param\tcaller\t执行域(this)。\n * @param\tmethod\t定时器回调函数。\n * @param\targs\t回调参数。\n * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n */\nframeLoop(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\n    this._create(true, true, delay, caller, method, args, coverBefore);\n}\n```\n\n----------------------------------------\n\nTITLE: 创建自定义对话框（LayaAir Editor TypeScript）\nDESCRIPTION: 定义一个继承自 IEditor.Dialog 的对话框类，通过 async create 方法动态设置 contentPane，展示及隐藏事件可重载。依赖 IEditor.Dialog、gui.UIPackage。输入为对话框预制体路径，输出为弹出式对话框控件，适合交互流程分支或临时提示。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n//MyDialog.ts\nexport class MyDialog extends IEditor.Dialog {\n    async create() {\n        this.contentPane = await gui.UIPackage.createWidget(\"MyDialog.widget\");\n    }\n    \n    onShown() {\n    }\n    \n    onHide() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Filled Texture with fillTexture - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `fillTexture()` method of the `laya.display.Graphics` class to draw a filled texture on a Sprite.  It first loads a texture using `Laya.loader.load()`.  Once the texture is loaded, it initializes a Sprite and calls `fillTexture()` with the loaded texture, coordinates, width, height, and repeat type.  The Sprite is then added to the display list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"resources/layaAir.png\").then((res: Laya.Texture) => {\n    let sp = new Laya.Sprite();\n    // 绘制填充纹理\n    sp.graphics.fillTexture(res, 0, 0, 500, 500, \"repeat\");\n    this.owner.addChild(sp);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending String Data Over WebSocket in LayaAir TypeScript\nDESCRIPTION: Demonstrates how to transmit a text string to the server via an established Laya.Socket connection using the send method. Suitable for sending simple commands or messages. The parameter is a string payload. No return value; results in data being sent to the server.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/network/WebSocket/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 发送字符串数据\nthis.socket.send(\"Hello, LayaAir!\");\n```\n\n----------------------------------------\n\nTITLE: Creating Tree Component Programmatically in TypeScript\nDESCRIPTION: This snippet shows how to create a Tree component entirely through code. It includes loading resources, creating a custom data model, defining a tree item renderer class, and configuring visual properties. The example demonstrates a complete implementation of a hierarchical tree view with custom styling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Tree/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Tree extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n\n        var res: any[] = [\"atlas/comp/vscroll.png\",\n            \"atlas/comp/vscroll$bar.png\",\n            \"atlas/comp/vscroll$down.png\",\n            \"atlas/comp/vscroll$up.png\",\n            \"resources/tree/clip_selectBox.png\",\n            \"resources/tree/clip_tree_folder.png\",\n            \"resources/tree/clip_tree_arrow.png\"];\n\n        Laya.loader.load(res).then(() => {\n            this.onLoadComplete();\n        });\n    }\n\n    private onLoadComplete(e: any = null): void {\n        // 初始化树状列表的数据源\n        var treeData: string = \"<data>\";\n\n        //程序创建的模拟数据，模拟树状列表数据，拼接列表的数据源\n        for (let i: number = 0; i < 5; i++) {\n            //拼接目录数据结构（item标签这里可以自己定义标签名，用什么开头就用什么结束,但是title这里，一定要对应列表渲染单元的label文本节点name）\n            treeData += \"<item title='目录\" + (i + 1) + \"' isOpen='true'>\";\n            for (let j: number = 0; j < 5; j++) {\n                //拼接子项（即不会再有展开）的结构，(这里的subpage标签也是可以自己任意定义名称，title这里，一定要对应列表渲染单元的label文本节点name）\n                treeData += \"<subpage title='子项标题\" + (j + 1) + \"' />\";\n            }\n            //每一个子项的外层，要有一个完整的结束标签，目录开始用什么标签名就用什么标签名结束。\n            treeData += \"</item>\";\n        }\n\n        //数据源data标签，需要拼接一个结束标签\n        treeData += \"</data>\";\n        \n\n        var tree: Laya.Tree = new Laya.Tree();\n        tree.scrollBarSkin = \"atlas/comp/vscroll.png\";\n        // 添加列表渲染项\n        tree.itemRender = Item;\n        // 解析tree的数据\n        tree.xml = new Laya.XML(treeData);\n        tree.size(300, 300);\n        tree.x = (Laya.stage.width - tree.width) / 2;\n        tree.y = (Laya.stage.height - tree.height) / 2;\n        tree.bgColor = \"#d25454\";\n        this.owner.addChild(tree);\n    }\n}\n\n\nclass Item extends Laya.Box {\n    constructor() {\n        super();\n        this.right = 0;\n        this.left = 0;\n\n        var selectBox: Laya.Clip = new Laya.Clip(\"resources/tree/clip_selectBox.png\", 1, 2);\n        selectBox.name = \"selectBox\";//设置 selectBox 的name 为\"selectBox\"时，将被识别为树结构的项的背景。\n        selectBox.height = 32;\n        selectBox.x = 13;\n        selectBox.left = 12;\n        this.addChild(selectBox);\n\n        var folder: Laya.Clip = new Laya.Clip(\"resources/tree/clip_tree_folder.png\", 1, 3);\n        folder.name = \"folder\";//设置 folder 的name 为\"folder\"时，将被识别为树结构的文件夹开启状态图表。\n        folder.x = 14;\n        folder.y = 4;\n        this.addChild(folder);\n\n        var label: Laya.Label = new Laya.Label;\n        label.name = \"title\";//设置 label 的name 为\"title\"时，此值将用于树结构数据赋值。\n        label.fontSize = 20;\n        label.color = \"#FFFFFF\";\n        label.padding = \"6,0,0,13\";\n        label.width = 150;\n        label.height = 30;\n        label.x = 33;\n        label.y = 1;\n        label.left = 33;\n        label.right = 0;\n        this.addChild(label);\n\n        var arrow: Laya.Clip = new Laya.Clip(\"resources/tree/clip_tree_arrow.png\", 1, 2);\n        arrow.name = \"arrow\";//设置 arrow 的name 为\"arrow\"时，将被识别为树结构的文件夹开启状态图表。\n        arrow.x = 0;\n        arrow.y = 5;\n        this.addChild(arrow);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-Finger Gesture Scaling in LayaAir with TypeScript\nDESCRIPTION: A complete script that implements pinch-to-zoom functionality with the gestures centered around the touch points. This script handles touch events, calculates distances between fingers, and applies scaling to an image while maintaining the correct position.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class XX extends Laya.Script {\n\tprivate _owner: Laya.Image;\n    /** 缩放前的中心点坐标信息 */\n    private lastPivot: Laya.Point;\n  \t/** 上次的距离值 */\n    private lastDistance: number = 0;\n  \n   onEnable(): void {\n  \t  this._owner = this.owner as Laya.Image;\n  }\n  \n  //鼠标在对象上按下时自动触发执行的脚本生命周期方法\n  onMouseDown(e: Laya.Event): void {\n    //当触摸操作的touch对象数组存在，并且大于1个触摸点，就认定为缩放操作\n    if (e.touches && e.touches.length > 1) {\n      //把初始的touch坐标位置通过开平方运算，记录为初始双指距离\n      this.lastDistance = this.getDistance(e.touches);\n      //纪录缩放前的手指中心点坐标\n      this.lastPivot = this.setPivot(e.touches);\n      //多指按下的情况下，再去侦听手势移动事件并处理逻辑\n      this._owner.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);\n    }\n  }\n  \n  onMouseUp(e: Laya.Event): void {\n    //鼠标或手势抬起后，移除侦听\n    this._owner.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove);\n  }\n  \n  /** 鼠标（或手势）在对象上移动时触发的事件侦听方法 */\n  mouseMove(e: Laya.Event): void {\n    /**当前的双指距离*/\n    let distance: number = this.getDistance(e.touches);\n\n    //设置缩放\n    this._owner.scaleX += (distance - this.lastDistance) * 0.01;\n    this._owner.scaleY += (distance - this.lastDistance) * 0.01;\n    //设置缩放值限制条件\n    (this._owner.scaleX < 0.8) && (this._owner.scaleX = 0.8);\n    (this._owner.scaleY < 0.8) && (this._owner.scaleY = 0.8);\n    (this._owner.scaleX > 5) && (this._owner.scaleX = 5);\n    (this._owner.scaleY > 5) && (this._owner.scaleY = 5);\n\n    //缩放后的手势中心点位置(局部位置)\n    let nowPivot = this.setPivot(e.touches);\n\n    //计算缩放引发的xy偏移值\n    let _offsetX = (nowPivot.x - this.lastPivot.x) * this._owner.scaleX;\n    let _offsetY = (nowPivot.y - this.lastPivot.y) * this._owner.scaleY;\n\t\n    //修正坐标位置\n    this._owner.x += _offsetX;\n    this._owner.y += _offsetY;\n\n    //保存当前值，用于下次计算\n    this.lastDistance = distance;\n  }\n  \n  /**\n     * 计算并设置多指的中心点坐标\n     * @param touches 手势信息数组\n     */\n  setPivot(touches: Array<any>): Laya.Point {\n    let Point0: Laya.Point = this._owner.globalToLocal(new Laya.Point(touches[0].stageX, touches[0].stageY));\n    let Point1: Laya.Point = this._owner.globalToLocal(new Laya.Point(touches[1].stageX, touches[1].stageY));\n    return new Laya.Point((Point0.x + Point1.x) / 2, (Point0.y + Point1.y) / 2);\n  }\n  \n  /** 计算两个触摸点坐标之间的距离 */\n  getDistance(touches: Array<any>): number {\n    //初始值为0\n    var distance: number = 0;\n    if (touches && touches.length > 1) {\n      //计算距离\n      let dx: number = touches[0].stageX - touches[1].stageX;\n      let dy: number = touches[0].stageY - touches[1].stageY;\n      distance = Math.sqrt(dx * dx + dy * dy);\n    }\n    return distance;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DirectMove Class: Moving Character\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `move()` method of the CharacterController to move the character. It includes initializing the CharacterController, defining a movement vector, and updating the character's position in the `onUpdate()` function when ismoveing is set to true. It also provides a moveStop() function to stop the movement.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/physics3D/CharacterController/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n    // 标记角色是否移动\n    private ismoveing: boolean = false;\n    //移动向量，速度与方向，向X轴正方向移动，速度为0.05\n    private moveVector: Laya.Vector3 = new Laya.Vector3(0.05, 0, 0);\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n    }\n    \n    /**\n     * 每帧更新时执行，尽量不要在这里写大循环逻辑或者使用 getComponent 方法\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onUpdate(): void {\n        // 如果角色可移动 (ismoveing为true时)\n        if (this.ismoveing) {\n            // 调用角色控制器的 move 方法，使角色按照 moveVector 向量移动\n            this.characterController.move(this.moveVector);\n        }\n    }\n\n    /**\n     * 停止角色移动\n     */\n    public moveStop(): void {\n        // 标记角色停止移动，不再每帧更新\n        this.ismoveing = false;\n        // 重置角色的移动向量置为零向量，使其停止移动\n        this.characterController.move(Laya.Vector3.ZERO.clone());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Animation Script with Label Control in TypeScript\nDESCRIPTION: This snippet demonstrates an enhanced animation script in TypeScript that interacts with a label in the scene. It uses the lifecycle methods `onStateEnter`, `onStateUpdate`, and `onStateExit` to update the label's text based on the animation's current state, showcasing how to control scene elements from within an animation script.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\ninterface AnimatorPlayScriptInfo {\n    animator: Laya.Animator | Laya.Animator2D;\n    layerindex: number;\n    playState: Laya.AnimatorState | Laya.AnimatorState2D;\n}\n\n/**\n * 继承自AnimatorStateScript(动画状态脚本)\n * @author ...\n */\n@regClass()\nexport class AnimationScript extends Laya.AnimatorStateScript {\n    /**动画的状态信息 */\n    playStateInfo: AnimatorPlayScriptInfo = { animator: null, layerindex: -1, playState: null };\n\n    private isShow: boolean = false;\n    private _label: Laya.Label;\n    /**@internal */\n    setPlayScriptInfo(animator: Laya.Animator | Laya.Animator2D, layerindex: number, playstate: Laya.AnimatorState | Laya.AnimatorState2D) {\n        this.playStateInfo.animator = animator;\n        this.playStateInfo.layerindex = layerindex;\n        this.playStateInfo.playState = playstate;\n        this._label = animator.owner.scene.scene2D.getChildByName(\"Label\");\n    }\n    constructor() {\n        super();\n    }\n\n    /**\n     * 动画状态开始时执行。\n     */\n    onStateEnter(): void {\n        console.log(\"动画开始播放了\");\n        this._label.text = \"开始跑动画\";\n    }\n\n    /**\n     * 动画状态运行中\n     * @param normalizeTime 0-1动画播放状态\n     */\n    onStateUpdate(normalizeTime: number): void {\n        console.log(\"动画状态更新了：\" + normalizeTime);\n        if (normalizeTime > 0.5 && !this.isShow) {\n            this.isShow = true;\n            this._label.text = \"跑动画一半\";\n        }\n    }\n\n    /**\n    * 动画状态退出时执行。\n    */\n    onStateExit(): void {\n        console.log(\"动画退出了\");\n        this._label.text = \"退出跑动画\";\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Resources with Addressables.loadSceneAsync in TypeScript\nDESCRIPTION: Defines how to load a scene resource asynchronously using Addressables.loadSceneAsync in TypeScript. Accepts a key for filtering and optional parameters for advanced scene-loading configurations. Returns a Promise of LoadResult with the loaded scene path. Only scene resources will work as input; output is typically used to launch or transition scenes within a LayaAir application.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 加载场景\n * @description 在 {@link LoadResult.data} 中返回加载场景所需的路径\n * @param key 用来筛选资源的关键字\n * @param options\n * @returns {Promise<LoadResult>} 在 {@link LoadResult.data} 中返回加载的场景的路径\n */\nstatic async loadSceneAsync(key: string, options?: LoadSceneOptions): Promise<LoadResult>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript ZipFile Interface Declaration for Zip File Handling in LayaNative\nDESCRIPTION: Defines a ZipFile TypeScript interface facilitating zip file manipulations within memory constraints. Key methods include setSrc to load zip from a source path, forEach to iterate files with file metadata callbacks, readFile to retrieve file contents returning ArrayBuffer, various name-based read methods returning text or ArrayBuffer, close for resource release, and a constructor method. It warns that zip files should not be too large to avoid crashes due to full in-memory extraction.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/zipUpdate/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ZipFile{\n    /**\n     * 注意这个文件不要太大，因为需要在内存中解开，太大了会直接导致崩溃。\n     */\n    setSrc(src:string):boolean;\n    /**\n     * 遍历zip中的文件。\n     * id:\n     * name:文件名，包含路径\n     * dir:是否是\n     * sz:文件大小\n     */\n    forEach(func:(id:number,name:string,dir:boolean,sz:number)=>void):void;\n    /**\n     * 不要用。\n     */\n    readFile1():void;\n    /**\n     * 读取zip中的文件的内容，返回一个ArrayBuffer\n     */\n    readFile(id:number):ArrayBuffer;\n    close():void;\n    readAsTextByName(name:string):string;\n    readAsArrayBufferByName(name:string):ArrayBuffer;\n    new ():ZipFile;\n}\n\ndeclare var ZipFile:ZipFile;\n```\n\n----------------------------------------\n\nTITLE: Creating SpotLight in LayaAir with TypeScript\nDESCRIPTION: This code demonstrates adding a SpotLight (spot lamp) in LayaAir via TypeScript. It requires a prepared 3D scene and the LayaAir engine. The snippet creates a Sprite3D, adds a SpotLightCom component, sets color, position, direction (via setForward), as well as light properties such as range, intensity, and cone angle (spotAngle). Input: parameterless; Output: a spot light attached to the scene. Ensure direction axis values are between -1 and 1 for meaningful orientation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Light/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//聚光灯\nlet spotlightSprite = new Laya.Sprite3D();\nlet spotcom = spotlightSprite.addComponent(Laya.SpotLightCom);\nthis.scene.addChild(spotlightSprite);\n//设置聚光灯颜色\nspotcom.color = new Laya.Color(1, 1, 0, 1);\nspotlightSprite.transform.position = new Laya.Vector3(0.0, 1.2, 0.0);\n//设置聚光灯的方向\nvar mat: Laya.Matrix4x4 = spotlightSprite.transform.worldMatrix;\nmat.setForward(new Laya.Vector3(0.15, -1.0, 0.0));\nspotlightSprite.transform.worldMatrix = mat;\n//设置聚光灯范围\nspotcom.range = 1.6;\nspotcom.intensity = 8.0;\n//设置聚光灯锥形角度\nspotcom.spotAngle = 32;\n```\n\n----------------------------------------\n\nTITLE: Importing Decorators for Property Exposure in LayaAir Scripts (TypeScript)\nDESCRIPTION: Imports the `regClass` and `property` decorators from the LayaAir engine namespace. These decorators are essential for registering a custom script class and exposing its properties to the LayaAir editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/Script/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n```\n\n----------------------------------------\n\nTITLE: Logging into Alipay Developer Account using minidev\nDESCRIPTION: Initiates the login process for the Alipay Mini Game developer tools. Executing this command displays a QR code in the terminal, which needs to be scanned using the Alipay app to authorize the developer account.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/alipaygame/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminidev login\n```\n\n----------------------------------------\n\nTITLE: Generating White Noise with Web Audio API in LayaAir (TypeScript)\nDESCRIPTION: Adapts the JavaScript white noise generation example for LayaAir using TypeScript. It utilizes `Laya.Browser.window` to access the AudioContext, creates a white noise buffer, and plays it when the LayaAir stage receives a click event (`Laya.Event.CLICK`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvar audioCtx: any = new (Laya.Browser.window.AudioContext || Laya.Browser.window.webkitAudioContext)();\n//Stereo\nvar channels: number = 2;\n// Create an empty two-second stereo buffer at the\n// sample rate of the AudioContext\nvar frameCount: number = audioCtx.sampleRate * 2.0;\nvar myArrayBuffer: any = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nLaya.stage.on(Laya.Event.CLICK, this, function (): void {\n    // Fill the buffer with white noise;\n    //just random values between -1.0 and 1.0\n    for (var channel: number = 0; channel < channels; channel++) {\n        // This gives us the actual ArrayBuffer that contains the data\n        var nowBuffering: Object = myArrayBuffer.getChannelData(channel);\n        for (var i: number = 0; i < frameCount; i++) {\n            // Math.random() is in [0; 1.0]\n            // audio needs to be in [-1.0; 1.0]\n            nowBuffering[i] = Math.random() * 2 - 1;\n        }\n    }\n    // Get an AudioBufferSourceNode.\n    // This is the AudioNode to use when we want to play an AudioBuffer\n    var source: any = audioCtx.createBufferSource();\n    // set the buffer in the AudioBufferSourceNode\n    source.buffer = myArrayBuffer;\n    // connect the AudioBufferSourceNode to the\n    // destination so we can hear the sound\n    source.connect(audioCtx.destination);\n    // start the source playing\n    source.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring ComboBox with Code in LayaAir\nDESCRIPTION: This TypeScript snippet showcases the creation and configuration of a ComboBox component programmatically in the LayaAir engine. It sets properties like skin, label size, item size, position, and auto size.  It relies on loading the ComboBox skin resource and adding the component to the scene. The skin image resources should be in the correct path.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/ComboBox/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_ComboBox extends Laya.Script {\n\n    private skin: string = \"resources/res/ui/combobox.png\";//资源来自“引擎API使用示例”\n    pageWidth: number;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        Laya.loader.load(this.skin).then(() => {\n            let ComboBox: Laya.ComboBox = new Laya.ComboBox(this.skin, \"item0,item1,item2,item3,item4,item5\");\n            ComboBox.labelSize = 30;\n            ComboBox.itemSize = 25\n            this.owner.addChild(ComboBox);\n            ComboBox.autoSize = true;\n            ComboBox.pos(200, 200);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using runTimer to Force Immediate Timer Callback Execution in LayaAir Script (TypeScript)\nDESCRIPTION: Shows how runTimer is used to trigger a registered loop callback instantly instead of waiting for its full delay (e.g., 5 seconds), followed by handler cleanup. The onAwake method sets up a loop and then immediately executes its callback using Laya.timer.runTimer, suitable for critical path updates or state synchronization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //如果没有Laya.timer.runTimer，则5秒后才执行hideImage\n        Laya.timer.loop(5000, this, this.hideImage);\n        //立即执行hideImage\n        Laya.timer.runTimer(this, this.hideImage);\n    }\n\n    hideImage(): void {\n        console.log(\"hideImage\");\n        this.Image.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Gravity in LayaAir3 Physics Engine - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the global gravity vector for 2D physics in the LayaAir3 engine by directly assigning a new Vector2 value to the Physics2D.I.gravity property. This is an alternative to using the project settings panel, allowing runtime adjustment. Dependencies include the LayaAir3 environment and the Vector2 class. The expected input is a Vector2 object defining gravity in the X and Y directions; the standard configuration sets Y to 9.8 for earth-like gravity. No explicit output is generated, but the physics simulation updates with the new gravity vector.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics2D/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPhysics2D.I.gravity= new Vector2(0,9.8)\n```\n\n----------------------------------------\n\nTITLE: Creating Background in LayaAir\nDESCRIPTION: This snippet demonstrates how to create a background using a Sprite and a Mesh2DRender component in LayaAir. It loads a texture, generates a mesh for a rectangle, and applies the texture to the background, enabling it to receive light.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/LightOccluder2D/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    // 创建背景\n    createBackground(): void {\n        this.owner.addChild(this.background);\n        let tex = Laya.loader.getRes(\"resources/bg2.png\");\n        let mesh2Drender = this.background.addComponent(Laya.Mesh2DRender);\n        mesh2Drender.sharedMesh = this.generateRectVerticesAndUV(1000, 1000);\n        mesh2Drender.texture = tex;\n        mesh2Drender.lightReceive = true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Achievements in Steam - C++\nDESCRIPTION: This C++ code snippet shows how to set an achievement in Steam. It checks if Steam is initialized, if the Steam user is logged in, and if the achievement has already been unlocked. If all checks pass, it calls `SteamUserStats()->SetAchievement(achievementID)` to set the achievement and `SteamUserStats()->StoreStats()` to immediately store the updated stats. It returns true if the achievement was successfully set and stored, false otherwise. It depends on the `SteamUser()`, and `SteamUserStats()` interfaces. The `achievementID` corresponds to the API name defined in the Steamworks admin panel.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nbool SteamManager::SetAchievement(const char* achievementID)\n{\n    if (!m_bInitialized || !SteamUserStats())\n    {\n        // Steam未初始化或统计接口不可用\n        return false;\n    }\n\n    if (!SteamUser()->BLoggedOn())\n    {\n        // Steam用户未登录\n        return false;\n    }\n\n    // 检查成就是否已解锁\n    bool alreadyAchieved = false;\n    if (SteamUserStats()->GetAchievement(achievementID, &alreadyAchieved))\n    {\n        if (alreadyAchieved)\n        {\n            printf(\"成就已经解锁\", achievementID);\n            return false;\n        }\n    }\n\n    bool result = SteamUserStats()->SetAchievement(achievementID);\n    if (result)\n    {\n        // 立即存储更新\n        return SteamUserStats()->StoreStats();\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Base UI Class in LayaAir Custom Component (TypeScript)\nDESCRIPTION: This TypeScript code shows the `NewScript` custom component inheriting from a shared `Main` base class. Within the `onStart` method, it obtains the scene's specific UI Runtime instance (`RuntimeScript`), then calls the `baseUI` method from the `Main` superclass, passing the runtime instance to enable centralized UI handling. Requires the `Main` base class, the specific UI Runtime class (`RuntimeScript`), and the LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Main } from \"./Main\";\nimport { RuntimeScript } from \"./RuntimeScript\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Main {\n    \n    private ui: RuntimeScript;\n    onStart() {\n        console.log(\"Game start\");\n        this.ui = this.owner.scene as RuntimeScript;\n        super.baseUI(this.ui);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Frame-Based One-Time Timer Callback in LayaAir Script (TypeScript)\nDESCRIPTION: Demonstrates creating a class extending a runtime base, and in the onAwake lifecycle method, schedules a function to set an image's alpha to 0.5 after 60 frames using Laya.timer.frameOnce. No external dependencies beyond the LayaAir framework are required. The input is the frame count and callback, and the method directly modifies UI state when invoked.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //60帧后，图片的透明度变为0.5\n        Laya.timer.frameOnce(60, this, () => {\n            this.Image.alpha = 0.5;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Environment Detection for Sound Format Compatibility\nDESCRIPTION: This code demonstrates how to detect whether the environment is LayaNative (conch) or web by checking the presence of the 'conch' object. Based on this detection, the appropriate sound configuration file is loaded to ensure format compatibility, especially when using different formats like mp3 and wav/ogg.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/sound/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nif(window.conch)\n{\n    ...加载 \"soundConfig-LayaPlayer.json\"\n}\nelse\n{\n    ...加载 \"soundConfig-json\"\n}\nSoundManager.playSound(soundJson[0].url,1);\n....\nSoundManager.playSound(soundJson[1].url,1);\n```\n\n----------------------------------------\n\nTITLE: Generating Rectangle 2D Mesh Vertices and UVs in TypeScript\nDESCRIPTION: A TypeScript method to create a rectangular 2D mesh for LayaAir by defining vertex positions and UV coordinates explicitly. The method initializes a Float32Array for vertex data including positions and texture coordinates, and a Uint16Array for triangle indices to form two triangles composing the rectangle. The mesh is constructed using LayaAir's VertexMesh2D declaration and Mesh2D creation utilities. This allows flexible rectangle mesh generation for use with the 2D mesh renderer.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Mesh2DRender/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n    /**\n     * 生成一个矩形2D网格\n     * @param width 矩形的宽度\n     * @param height 矩形的高度\n     */\n    private generateRectVerticesAndUV(width: number, height: number): Laya.Mesh2D {\n        const vertices = new Float32Array(4 * 5);\n        const indices = new Uint16Array(2 * 3);\n        let index = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 1;\n\n        vertices[index++] = 0;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n\n        index = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = 3;\n\n        indices[index++] = 1;\n        indices[index++] = 2;\n        indices[index++] = 3;\n\n        const declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n        const mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([vertices], [declaration], indices, Laya.IndexFormat.UInt16, [{ length: indices.length, start: 0 }]);\n        return mesh2D;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Geolocation Using LayaAir TypeScript\nDESCRIPTION: Implements a static method getCurrentPosition that retrieves the device's current geographic location once. It invokes the browser's native geolocation API with optional callbacks for success and error handling. Parameters enable control over accuracy, timeout, and cache age. The method is designed to be called from user gesture events due to browser security restrictions. Success callbacks receive a detailed Position object populated into LayaAir's GeolocationInfo, while error callbacks handle typical permission or timeout errors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/geolocation/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t/**\n\t * 获取设备当前位置。\n\t * @param\tonSuccess\t带有唯一<code>Position</code>参数的回调处理器。\n\t * @param\tonError\t\t可选的。带有错误信息的回调处理器。错误代码为Geolocation.PERMISSION_DENIED、Geolocation.POSITION_UNAVAILABLE和Geolocation.TIMEOUT之一。\n\t */\n\tstatic getCurrentPosition(onSuccess: Handler, onError: Handler = null): void {\n\t\tGeolocation.navigator.geolocation.getCurrentPosition(function (pos: any): void {\n\t\t\tGeolocation.position.setPosition(pos);\n\t\t\tonSuccess.runWith(Geolocation.position);\n\t\t},\n\t\t\tfunction (error: any): void {\n\t\t\tonError.runWith(error);\n\t\t\t},\n\t\t\t{\n\t\t\t\tenableHighAccuracy: Geolocation.enableHighAccuracy,\n\t\t\t\ttimeout: Geolocation.timeout,\n\t\t\t\tmaximumAge: Geolocation.maximumAge\n\t\t\t});\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring TextArea Properties and Scroll Behavior in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates how to control a LayaAir TextArea component from a custom script, using TypeScript decorators and LayaAir's component system. It sets up properties such as position, size, font, colors, bold/italic styles, underlining, stroke, skin, border color, overflow behavior, and scrolling configuration. Required dependencies include the LayaAir TypeScript SDK and appropriate asset files (Skin images and ScrollBar skins). Inputs: assigned TextArea instance in the IDE; outputs: visually customized, scrollable multi-line text area. Ensure that corresponding image resources are available for skinning and the class is registered via the decorator.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/TextArea/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class TextAreaControl extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property( { type : Laya.TextArea } )\n    public txtarea: Laya.TextArea;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.txtarea.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        this.txtarea.size(500, 200); //大小\n        this.txtarea.pivot(this.txtarea.width/2, this.txtarea.height/2); //轴心点\n        this.txtarea.text = \"大家好，欢迎各位开发者使用LayaAir IDE，这里是TextArea的文本内容，您可以基于此文本进行调试\";\n        this.txtarea.font = \"宋体\"; //字体\n        this.txtarea.fontSize = 50; //字体大小\n        this.txtarea.color = \"#ff0000\"; //字体颜色\n        this.txtarea.bold = true; //加粗\n        this.txtarea.italic = true; //斜体\n        this.txtarea.underline = true; //下划线\n        this.txtarea.underlineColor = \"#ff0000\"; //下划线颜色\n        this.txtarea.stroke = 5; //描边宽度\n        this.txtarea.strokeColor = \"#000000\" ; //描边颜色\n        this.txtarea.wordWrap = true; //自动换行\n        this.txtarea.overflow = \"scroll\"; //文本溢出\n        this.txtarea.skin = \"atlas/comp/textarea.png\"; //皮肤\n        this.txtarea.borderColor = \"#f6ff03\" //边框颜色\n\n        this.txtarea.scrollType = Laya.ScrollType.Vertical; //滚动方式\n        this.txtarea.vScrollBarSkin = \"atlas/comp/vscroll.png\"; //滚动条皮肤\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Image and Sprite Sheet Loading Strategies in LayaAir\nDESCRIPTION: This snippet discusses the resource loading process, highlighting the importance of categorized resource management and the impact of loading large images or sprite sheets. Proper loading and unloading improve responsiveness and memory efficiency in game development.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/CPU/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Load an image and its textures, then create sprite\nLaya.loader.load(\"res/apes/monkey2.png\", Laya.Handler.create(this, function() {\n    var texture = Laya.loader.getRes(\"res/apes/monkey2.png\");\n    var sp = new Laya.Sprite();\n    sp.graphics.drawTexture(texture, 0, 0);\n    sp.size(texture.width, texture.height);\n    Laya.stage.addChild(sp);\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Blueprint Events in TypeScript with bpClass Decorator and bpFunction for Event Handlers\nDESCRIPTION: Shows how to define events for blueprint-enabled classes by specifying event names and parameters inside the 'events' array of the @bpClass decorator. Functions corresponding to these events can be implemented and decorated with @bpFunction, with type 'event' and return type void. This setup allows the blueprint system to detect and bind to custom events dispatched by scripts extending Laya.Sprite.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass, bpFunction } = BP;\n\n@bpClass({\n    name: \"TestEvents\",\n    extends: \"Sprite\",\n    construct: {\n        params: [\n            {\n                \"name\": \"eee\",\n                \"type\": \"string\"\n            }\n        ]\n    },\n    events: [{\n        name: \"onTest\",\n        params: [{ name: \"name\", type: \"string\" }]\n    },\n    {\n        name: \"onEventTest\",\n        params: [{ name: \"name\", type: \"string\" }]\n    }]\n})\n\nexport class Main extends Laya.Sprite {\n    \n    constructor(eee: string) {\n        super();\n    }\n\n    onTest(name: string, type: string) {\n        this.event('onTest', 'test');\n    }\n\n    @bpFunction({\n        params: [{ name: \"name\", type: \"string\" }],\n        type: \"event\",\n        returnType: \"void\"\n    })\n    onEventTest(name: string) {\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Resource Load Options in LayaAir (TypeScript Interface Examples)\nDESCRIPTION: Defines the interfaces for customizing resource loading with LayaAir resources using TypeScript. These interfaces, ILoadOptions and LoadOptions, allow specification of resource type, priority, group, and advanced loader behaviors. Developers may set flags to control cache, retries, silent mode, worker loading, and resource property parameters, or override loader/fetch mechanisms as needed. Prerequisite: LayaAir API and Addressables plugin.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ILoadOptions {\n    type?: string; //资源类型。比如：Loader.IMAGE。\n    priority?: number; //(default = 0)加载的优先级，数字越大优先级越高，优先级高的优先加载。\n    group?: string; //分组，方便对资源进行管理。\n    cache?: boolean; //是否缓存\n    noRetry?: boolean; //是否重新尝试加载\n    silent?: boolean; //是否提示加载失败\n    useWorkerLoader?: boolean; //(default = false)是否使用worker加载（只针对IMAGE类型和ATLAS类型，并且浏览器支持的情况下生效）\n    constructParams?: TextureConstructParams; //图片属性，参考如下\n    propertyParams?: TexturePropertyParams; //纹理属性，参考如下\n    blob?: ArrayBuffer; //传递blob对象获得HTMLImageElement\n    noMetaFile?: boolean; //是否不去下载Meta(json)文件\n    [key: string]: any;\n}\n\nTextureConstructParams {\n    width?: number,\n    height?: number,\n    format?: TextureFormat,\n    mipmap?: boolean,\n    canRead?: boolean,\n    sRGB?: boolean,\n}\n\nTexturePropertyParams {\n    wrapModeU?: number,\n    wrapModeV?: number,\n    filterMode?: FilterMode,\n    anisoLevel?: number,\n    premultiplyAlpha?: boolean,\n    hdrEncodeFormat?: HDREncodeFormat,\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface LoadOptions extends Laya.ILoadOptions {\n    /** 资源加载进度回调 */\n    progress?: Laya.Handler | Laya.ProgressCallback;\n    /** 不使用 {@link Laya.IResourceLoader} 对下载的资源进行解析, 当该值为 true 时, {@link LoadResult.data} 返回通过 \n    {@link Laya.Loader.fetch} 接口获取的结果 */\n    noUseResourceLoader?: boolean;\n    /** 当且仅当 {@link noUseResourceLoader} 为 true 时有效, 该参数会作为 {@link Laya.Loader.fetch} 的参数传递 */\n    contentType?: keyof Laya.ContentTypeMap;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Customized File Input for Image Upload in LayaAir Using TypeScript\nDESCRIPTION: This comprehensive example initializes the LayaAir engine, loads a button image resource, and adds a custom Laya.Button to the stage. It creates a transparent, absolutely positioned file input aligned with the button, restricted to PNG files. When a user selects a file, the FileReader reads the file as a data URL, and the resulting image is loaded into a Laya.Sprite and displayed on the stage. The code demonstrates the integration of DOM elements with LayaAir components for improved UI appearance and user experience. Dependencies include LayaAir engine, image resources, and HTML5 FileReader API.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(100,100);\n        var skins:any = [\"res/a.png\"];\n        Laya.loader.load(skins,Laya.Handler.create(this,this.onUIAssetsLoaded));\n    }\n    private onUIAssetsLoaded():void{\n        var btn:Laya.Button = new Laya.Button(\"res/a.png\");\n        Laya.stage.addChild(btn);\n        //创建隐藏的file并且把它和按钮对齐。达到位置一致，这里我们默认在0点位置\n        var file:any = Laya.Browser.document.createElement(\"input\");\n        //设置file样式\n        file.style=\"filter:alpha(opacity=0);opacity:0;width: 150px;height:60px;\";\n        file.type =\"file\";//设置类型是file类型。\n        file.accept=\"image/png\";//设置文件的格式为png；\n        file.style.position =\"absolute\";\n        file.style.zIndex = 999;\n        Laya.Browser.document.body.appendChild(file);//添加到页面；\n        var fileReader:any = new  Laya.Browser.window.FileReader();\n        file.onchange = function(e:any):void\n        {\n            if(file.files.length>0)\n            {\n                fileReader.readAsDataURL(file.files[0]);\n            }\n        };\n        fileReader.onload = function(evt):void\n        {  \n            if(Laya.Browser.window.FileReader.DONE == fileReader.readyState)\n            {\n                var sp:Laya.Sprite = new Laya.Sprite();\n                sp.loadImage(fileReader.result,0,0,100,100);\n                Laya.stage.addChild(sp);\n            }\n        };\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Scene Class Definition with Static Members\nDESCRIPTION: Definition of the Scene class that inherits from Sprite, showing important static properties like unDestroyedScenes to track scenes that haven't been destroyed yet.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 场景类，负责场景创建，加载，销毁等功能\n * 场景被从节点移除后，并不会被自动垃圾机制回收，如果想回收，请调用destroy接口，可以通过unDestroyedScenes属性查看还未被销毁的场景列表\n */\nexport class Scene extends Sprite {\n    /**创建后，还未被销毁的场景列表，方便查看还未被销毁的场景列表，方便内存管理，本属性只读，请不要直接修改*/\n    static readonly unDestroyedScenes: Set<Scene> = new Set();\n\n    /**场景被关闭后，是否自动销毁（销毁节点和使用到的资源），默认为false*/\n    autoDestroyAtClosed: boolean = false;\n    _scene3D: any;\n```\n\n----------------------------------------\n\nTITLE: 通过脚本控制HBox属性的示例代码（TypeScript）\nDESCRIPTION: 该脚本演示如何在LayaAir中用TypeScript代码设置HBox组件的属性，包括位置、背景颜色、子元素间隔和垂直对齐方式。适用于动态控制UI布局的场景，需依赖Laya库的引入。该示例在onAwake()方法中执行，将参数应用于目标HBox实例。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/HBox/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.HBox })\n    public hbox: Laya.HBox;\n\n    onAwake(): void {\n        this.hbox.pos(100, 100);\n        this.hbox.bgColor = \"#ffffff\";\n        this.hbox.space = 100;\n        this.hbox.align = \"middle\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling removeCoveredTile for TiledMap - JavaScript\nDESCRIPTION: This snippet demonstrates how to enable the `removeCoveredTile` property in the LayaAir's TiledMap. This property, when set to true, removes covered tiles to improve performance, assuming the tiles are not transparent and the `type` property of the tile is set to 1 in the editor. This optimization is useful when tiles are hidden behind other non-transparent tiles.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//移除被非透明地块覆盖的部分\nthis.tMap.removeCoveredTile = true;\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources with Addressables.loadAssetsAsync in TypeScript\nDESCRIPTION: Illustrates how to asynchronously load one or multiple resources using Addressables.loadAssetsAsync in TypeScript. Accepts a key or a list of keys (aliases/tags) and an options object that defines merge mode: UseFirst, Union, or Intersection. Depends on the LayaAir Addressables package. Returns a Promise of LoadResult, which has a data array of resources. Supports advanced options such as prioritization and customized loaders.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 加载资源\n * @param key 用来筛选资源的关键字\n * @param options {LoadAssetsOptions} 加载资源的选项\n * @returns {Promise<LoadResult>}\n */\nstatic async loadAssetsAsync(key: string | string[], options?: LoadAssetsOptions): Promise<LoadResult> ;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nonStart(): void {\n    Addressables.loadAssetsAsync(['test2', 'test1'], { mode: MergeMode.UseFirst }).then((result: LoadResult) => {\n        console.log(result);\n        for(let i = 0; i < result.data.length; i++) {\n            console.log(result.data[i].url);\n        }\n    });\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nonStart(): void {\n    Addressables.loadAssetsAsync(['test1', 'test2'], { mode: MergeMode.Union }).then((result: LoadResult) => {\n        console.log(result);\n        for(let i = 0; i < result.data.length; i++) {\n            console.log(result.data[i].url);\n        }\n    });\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nonStart(): void {\n    Addressables.loadAssetsAsync(['test1', 'test2'], { mode: MergeMode.Intersection }).then((result: LoadResult) => {\n        console.log(result);\n        for(let i = 0; i < result.data.length; i++) {\n            console.log(result.data[i].url);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rectangle Mesh Programmatically in LayaAir (TypeScript)\nDESCRIPTION: This code illustrates how to generate a rectangular 2D mesh by defining vertices and indices for the corners of the rectangle. The arrays are used to create a Mesh2D object that can be rendered with a texture. Dependencies include LayaAir's Mesh2D and VertexMesh2D classes, and simply replacing the method call in the circle example generates a rectangle mesh.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/2DRender/Mesh2DRender/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate generateRectVerticesAndUV(width: number, height: number): Laya.Mesh2D {\n    const vertices = new Float32Array(4 * 5);\n    const indices = new Uint16Array(2 * 3);\n    let index = 0;\n    vertices[index++] = 0;\n    vertices[index++] = 0;\n    vertices[index++] = 0;\n    vertices[index++] = 0;\n    vertices[index++] = 0;\n\n    vertices[index++] = width;\n    vertices[index++] = 0;\n    vertices[index++] = 0;\n    vertices[index++] = 1;\n    vertices[index++] = 0;\n\n    vertices[index++] = width;\n    vertices[index++] = height;\n    vertices[index++] = 0;\n    vertices[index++] = 1;\n    vertices[index++] = 1;\n\n    vertices[index++] = 0;\n    vertices[index++] = height;\n    vertices[index++] = 0;\n    vertices[index++] = 0;\n    vertices[index++] = 1;\n\n    index = 0;\n    indices[index++] = 0;\n    indices[index++] = 1;\n    indices[index++] = 3;\n\n    indices[index++] = 1;\n    indices[index++] = 2;\n    indices[index++] = 3;\n\n    const declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n    const mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([vertices], [declaration], indices, Laya.IndexFormat.UInt16, [{ length: indices.length, start: 0 }]);\n    return mesh2D;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AStarFinder in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the AStarFinder class from a third-party module installed via npm. It shows initializing the AStarFinder and calling its findPath method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/importJsLibrary/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AStarFinder } from \"../node_modules/astar-typescript/dist/astar\";\n\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    private aStarInstance: AStarFinder;\n\n    onStart() {\n        console.log(\"Game start\");\n\n        // 0表示通路，1表示障碍\n        let myMatrix = [\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 1],\n            [0, 0, 1, 1, 0, 1, 1, 0],\n            [0, 0, 1, 0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 0, 0, 1, 0],\n            [1, 1, 1, 0, 1, 0, 1, 0],\n            [0, 0, 0, 0, 1, 0, 1, 0],\n            [0, 0, 1, 0, 0, 0, 0, 0]\n          ];\n          \n        this.aStarInstance = new AStarFinder({\n            grid: {\n              // 列主序矩阵\n              matrix: myMatrix\n            }\n          });\n\n        let startPos = { x: 0, y: 0 };\n        let goalPos = { x: 7, y: 7 };\n\n        let myPathway = this.aStarInstance.findPath(startPos, goalPos);\n        console.log(myPathway);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing HTTP POST Requests Using LayaAir HttpRequest in TypeScript\nDESCRIPTION: This snippet demonstrates sending an HTTP POST request using LayaAir's HttpRequest class. POST transmits data within the request body, allowing transmission of larger or sensitive information securely. The sample sends form data 'name=test&age=20' as the payload and specifies 'text' as the expected response format.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/HTTP/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建HttpRequest对象\nconst xhr = new Laya.HttpRequest();\n//发送HTTP的POST请求，数据包含在请求体内，适用于传输大量数据或敏感信息。\nxhr.send('https://httpbin.org/post', 'name=test&age=20', 'post', 'text');\n```\n\n----------------------------------------\n\nTITLE: LayaAir PBR Color Batch Shader\nDESCRIPTION: This GLSL shader defines a PBR (Physically Based Rendering) shader that supports color batching using a uniform array for color data. It includes vertex and fragment shaders that handle vertex transformations, lighting calculations, and custom color application.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/performanceOptimization/readme.md#_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n    type:Shader3D\n    name:PBRColorBatchShader\n    enableInstancing:true,\n    supportReflectionProbe:true,\n    uniformMap:{\n        u_AlphaTestValue: { type: Float, default: 0.5, range: [0.0, 1.0] },\n\n        u_TilingOffset: { type: Vector4, default: [1, 1, 0, 0] },\n\n        u_AlbedoColor: { type: Color, default: [1, 1, 1, 1] },\n        u_AlbedoTexture: { type: Texture2D, options: { define: \"ALBEDOTEXTURE\" } },\n\n        u_NormalTexture: { type: Texture2D, options: { define: \"NORMALTEXTURE\" } },\n        u_NormalScale: { type: Float, default: 1.0, range: [0.0, 2.0] },\n\n        u_Metallic: { type: Float, default: 0.0, range: [0.0, 1.0] },\n        u_Smoothness: { type: Float, default: 0.0, range: [0.0, 1.0] },\n        u_MetallicGlossTexture: { type: Texture2D, options: { define: \"METALLICGLOSSTEXTURE\" } },\n\n        u_OcclusionTexture: { type: Texture2D, options: { define: \"OCCLUSIONTEXTURE\" } },\n        u_OcclusionStrength: { type: Float, default: 1.0 },\n\n        u_EmissionColor: { type: Color, default: [0, 0, 0, 0] },\n        u_EmissionIntensity: { type: Float, default: 1.0 },\n        u_EmissionTexture: { type: Texture2D, options: { define: \"EMISSIONTEXTURE\" } },\n    },\n    defines: {\n        EMISSION: { type: bool, default: false },\n        ENABLEVERTEXCOLOR: { type: bool, default: false }\n    }\n    shaderPass:[\n        {\n            pipeline:Forward,\n            VS:LitVS,\n            FS:LitFS\n        }\n    ]\n}\nShader3D End\n\nGLSL Start\n#defineGLSL LitVS\n    #define SHADER_NAME PBRColorBatchShader\n\n    #include \"Math.glsl\";\n\n    #include \"Scene.glsl\";\n    #include \"SceneFogInput.glsl\"\n\n    #include \"Camera.glsl\";\n    #include \"Sprite3DVertex.glsl\";\n\n    #include \"VertexCommon.glsl\";\n\n    #include \"PBRVertex.glsl\";\n\n    varying float spriteCustomData;\n\n    void main()\n    {\n        Vertex vertex;\n        getVertexParams(vertex);\n\n        PixelParams pixel;\n        initPixelParams(pixel, vertex);\n\n        gl_Position = getPositionCS(pixel.positionWS);\n\n        gl_Position = remapPositionZ(gl_Position);\n        \n        spriteCustomData = NodeCustomData0;\n\n    #ifdef FOG\n        FogHandle(gl_Position.z);\n    #endif // FOG \n    }\n#endGLSL\n\n#defineGLSL LitFS\n    #define SHADER_NAME PBRColorBatchShader\n\n    #include \"Color.glsl\";\n\n    #include \"Scene.glsl\";\n    #include \"SceneFog.glsl\";\n\n    #include \"Camera.glsl\";\n    #include \"Sprite3DFrag.glsl\";\n\n    #include \"PBRMetallicFrag.glsl\";\n\n    uniform vec4 colormap[20];\n    varying float spriteCustomData;\n\n    void initSurfaceInputs(inout SurfaceInputs inputs, inout PixelParams pixel)\n    {\n        inputs.alphaTest = u_AlphaTestValue;\n\n    #ifdef UV\n        vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\n    #else // UV\n        vec2 uv = vec2(0.0);\n    #endif // UV\n\n        inputs.diffuseColor = colormap[int(spriteCustomData)].rgb;\n        inputs.alpha = colormap[int(spriteCustomData)].a;\n\n    #ifdef COLOR\n        #ifdef ENABLEVERTEXCOLOR\n        inputs.diffuseColor *= pixel.vertexColor.xyz;\n        inputs.alpha *= pixel.vertexColor.a;\n        #endif // ENABLEVERTEXCOLOR\n    #endif // COLOR\n\n    #ifdef ALBEDOTEXTURE\n        vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\n        #ifdef Gamma_u_AlbedoTexture\n        albedoSampler = gammaToLinear(albedoSampler);\n        #endif // Gamma_u_AlbedoTexture\n        inputs.diffuseColor *= albedoSampler.rgb;\n        inputs.alpha *= albedoSampler.a;\n    #endif // ALBEDOTEXTURE\n\n        inputs.normalTS = vec3(0.0, 0.0, 1.0);\n    #ifdef NORMALTEXTURE\n         vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\n        normalSampler = normalize(normalSampler * 2.0 - 1.0);\n        normalSampler.y *= -1.0;\n        inputs.normalTS = normalScale(normalSampler, u_NormalScale);\n    #endif\n\n        inputs.metallic = u_Metallic;\n        inputs.smoothness = u_Smoothness;\n\n    #ifdef METALLICGLOSSTEXTURE\n        vec4 metallicSampler = texture2D(u_MetallicGlossTexture, uv);\n        inputs.metallic = metallicSampler.x;\n        inputs.smoothness = (metallicSampler.a * u_Smoothness);\n    #endif // METALLICGLOSSTEXTURE\n\n        inputs.occlusion = 1.0;\n    #ifdef OCCLUSIONTEXTURE\n        vec4 occlusionSampler = texture2D(u_OcclusionTexture, uv);\n        float occlusion = occlusionSampler.g;\n        inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\n    #endif // OCCLUSIONTEXTURE\n\n        inputs.emissionColor = vec3(0.0);\n    #ifdef EMISSION\n        inputs.emissionColor = u_EmissionColor.rgb * u_EmissionIntensity;\n        #ifdef EMISSIONTEXTURE\n        vec4 emissionSampler = texture2D(u_EmissionTexture, uv);\n        #ifdef Gamma_u_EmissionTexture\n        emissionSampler = gammaToLinear(emissionSampler);\n        #endif // Gamma_u_EmissionTexture\n        inputs.emissionColor *= emissionSampler.rgb;\n        #endif // EMISSIONTEXTURE\n    #endif // EMISSION\n    }\n\n    void main()\n    {\n        PixelParams pixel;\n        getPixelParams(pixel);\n\n        SurfaceInputs inputs;\n        initSurfaceInputs(inputs, pixel);\n\n        vec4 surfaceColor = PBR_Metallic_Flow(inputs, pixel);\n        \n    #ifdef FOG\n        surfaceColor.rgb = sceneLitFog(surfaceColor.rgb);\n    #endif // FOG\n\n        gl_FragColor = surfaceColor;\n\n        gl_FragColor = outputTransform(gl_FragColor);\n    }\n#endGLSL\n\nGLSL End\n```\n\n----------------------------------------\n\nTITLE: Closing Scenes in LayaAir\nDESCRIPTION: Methods for closing scenes including closing by URL, closing the current scene, and closing all scenes except dialogs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 根据地址，关闭场景（包括对话框）\n * @param\turl\t\t场景地址\n * @param\tname\t如果name不为空，name必须相同才能关闭\n * @return\t返回是否关闭成功，如果url找不到，则不成功\n*/\nstatic close(url: string, name?: string): boolean {\n\n// Example usage:\nLaya.Scene.close(\"uiDemo/page/OpenScene.ls\");\n\n// Closing current scene\nthis.close();\n\n/**\n * 关闭所有场景，不包括对话框，如果关闭对话框，请使用Dialog.closeAll()\n * 【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收\n*/\nstatic closeAll(): void {\n```\n\n----------------------------------------\n\nTITLE: Constructing Matrices in GLSL\nDESCRIPTION: Shows how to initialize `mat4`, `mat2`, and `mat3` matrix types in GLSL. Examples cover initializing a `mat4` identity matrix using a single float, constructing a `mat2` from column vectors, and initializing a `mat3` with explicit component values in column-major order.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_12\n\nLANGUAGE: GLSL\nCODE:\n```\nmat4 marixt4x4 = mat4(1.0); // marixt4x4 = { 1.0, 0.0, 0.0, 0.0, \n                        //                0.0, 1.0, 0.0, 0.0 \n                        //                0.0, 0.0, 1.0, 0.0                    \n                        //                0.0, 0.0, 0.0, 1.0 }\n mat2 matrix2x2 = mat2(coll1, col2);     \n mat3 matrix3x3 = mat3(0.0, 0.0, 0.0,   // 第一列\n                      0.0, 0.0, 0.0,   // 第二列\n                      0.0, 0.0, 0.0);  // 第三列\n```\n\n----------------------------------------\n\nTITLE: Adjusting existing ColorFilter on Laya.Image in TypeScript\nDESCRIPTION: This snippet shows how to retrieve and modify an existing ColorFilter attached to a Laya.Image component, allowing dynamic changes to filter parameters at runtime in TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Filter/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Image })\n    public img: Laya.Image;\n\n    onAwake(): void {\n        let colorFilter: Laya.ColorFilter = this.img.filters[0];\n        colorFilter.color(0.5, 0.5, 0.5, 1);\n        colorFilter.adjustBrightness(-50);\n        colorFilter.adjustContrast(8);        \n        colorFilter.adjustSaturation(30);\n        colorFilter.adjustHue(-15);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Name Definition\nDESCRIPTION: Shows how to define the name of a shader within the Shader3D block.  This name is displayed in the material properties panel.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n\t//此处ShaderName为Shader的名字，非.shader文件名字\n\tname: ShaderName \n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Initializing Geolocation and Baidu Map in Constructor\nDESCRIPTION: Constructor function that initializes LayaAir with minimum dimensions, sets up the map, enables high accuracy geolocation tracking, and binds the coordinate conversion method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor() {\n    Laya.init(1, 1);\n\n    this.init();\n\n    // 使用高精度位置\n    Laya.Geolocation.enableHighAccuracy = true;\n    Laya.Geolocation.watchPosition(Laya.Handler.create(this, this.updatePosition), Laya.Handler.create(this, this.onError));\n\n    // 绑定convertToBaiduCoord作用域\n    this.convertToBaiduCoord = this.convertToBaiduCoord.bind(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Lines with Line2DRender in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript script, designed to be attached to a LayaAir Sprite node, demonstrates dynamic line drawing using the Line2DRender component. It initializes the renderer, sets the line width, and adds line segments between consecutive mouse positions during a drag operation (mouse down, move, up). It relies on the LayaAir engine's event system and component model (`Laya.Script`, `Laya.Line2DRender`, `Laya.Event`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Line2DRender/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass} = Laya;\n\n@regClass()\n/**\n * 基于2D线渲染器的画线示例脚本\n * 注意：脚本的事件是基于节点的宽高，所以绘制的图形也是在宽高范围内。\n */\nexport class DrawLine extends Laya.Script {\n\n    declare owner: Laya.Sprite;\n\n    line2DRender: Laya.Line2DRender;\n    lastMousePos: number[] = [];\n    isDrawing: boolean = false; // 标记是否正在绘制\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onEnable(): void {\n        // 添加2D线渲染器组件\n        this.line2DRender = this.owner.addComponent(Laya.Line2DRender);\n        // 设置线的宽度\n        this.line2DRender.lineWidth = 5;\n    }\n\n    // 鼠标按下时开始绘制\n    onMouseDown(evt: Laya.Event): void {\n        this.isDrawing = true;\n        // 记录起始点\n        this.lastMousePos[0] = evt.stageX - this.owner.x;\n        this.lastMousePos[1] = evt.stageY - this.owner.y;\n    }\n\n    // 鼠标松开时停止绘制\n    onMouseUp(): void {\n        this.isDrawing = false;\n        this.lastMousePos.length = 0; // 清空上一次的点\n    }\n\n    // 鼠标移动时绘制线段（仅在按下时）\n    onMouseMove(evt: Laya.Event): void {\n        if (!this.isDrawing || this.lastMousePos.length === 0) return;\n\n        const x = evt.stageX - this.owner.x;\n        const y = evt.stageY - this.owner.y;\n\n        // 添加线段\n        this.line2DRender.addPoint(this.lastMousePos[0], this.lastMousePos[1], x, y);\n\n        // 更新最后一个点的坐标\n        this.lastMousePos[0] = x;\n        this.lastMousePos[1] = y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Native Project with Local SDK Directory\nDESCRIPTION: This command creates a native project named 'SnowBallNative' using a locally specified SDK directory. It packages resources from the 'SnowBallH5' directory, sets the game URL and specifies the SDK path as 'D:/v2.0'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/build_Cmd/readme.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ layanative3 createapp -f SnowBallH5 -t 1 -n SnowBallNative -u http://10.10.20.102:8899/index.js -s D:/v2.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Masking Layers with Camera in LayaAir TypeScript\nDESCRIPTION: This code demonstrates how to implement a layer-based visibility toggle system in LayaAir 3D. It removes all layers from the camera and then adds only specific layers based on a cycling index, creating a toggling visibility effect when the mouse is clicked.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\tprivate layerIndex: number = 0;\n\tonMouseDown(e: Laya.Event) \n    {\n        //清除所有图层\n        this.camera.removeAllLayers();\n        this.layerIndex++;\n        //设置可视图层\n        this.camera.addLayer(this.layerIndex%2+ 1);\n\t}\n```\n\n----------------------------------------\n\nTITLE: 绘制圆角矩形的 drawRoundRect() 方法及示例\nDESCRIPTION: 此代码展示了利用 drawRoundRect 方法绘制带四个不同半径的圆角矩形。参数包括位置、尺寸、各个角的半径、填充与边框颜色、边框宽度。示例中采用像素尺寸，结果为填充黄色、边框绿色、每个角半径20的圆角矩形。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\nsp.graphics.drawRoundRect(200, 200, 300, 300, 20, 20, 20, 20, \"#ffff00\", \"#00ff00\", 5, false);\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Prefab Property in LayaAir Using TypeScript\nDESCRIPTION: This snippet shows how to declare a private property of type Laya.Prefab with the @property decorator, allowing prefab assets to be dragged from the assets directory into the property field in the editor. It requires the LayaAir engine and prefab resources correctly set up. The input is a Prefab resource dragged into the property, and the output is its instance ready for runtime usage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/componentProperties/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n@property( { type : Laya.Prefab } ) //加载 Prefab 的对象\nprivate prefabFromResource: Laya.Prefab;\n```\n\n----------------------------------------\n\nTITLE: Setting Game URL in MainActivity.java for Network Version\nDESCRIPTION: Code snippet demonstrating how to configure a LayaAir Android application as a network version by setting the localize option to \"false\" and specifying the game URL in the MainActivity.java file.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Android/readme.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nmPlugin.game_plugin_set_option(\"localize\",\"false\");\nmPlugin.game_plugin_set_option(\"gameUrl\", \"http://你的地址/index.js\");\n```\n\n----------------------------------------\n\nTITLE: Node Data Transfer\nDESCRIPTION: This details how data is transferred between nodes in Shader Blueprints. The inputs are on the left, outputs are on the right. Inputs can be a source, parameters, or an output from another node.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Creating a Base Class for Common UI Logic in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a base class `Main` inheriting from `Laya.Script`. It's designed as a parent class for custom component scripts to centralize common UI processing logic, demonstrated by the `baseUI` method stub which takes the scene's UI Runtime instance (`Laya.Scene`) as a parameter. Requires the LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n   //用来统一处理ui的事情，比如自适应，缩放所有Button\n   public baseUI(ui: Laya.Scene){\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources (No Type) in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates loading multiple resources simultaneously without specifying their types. The `Laya.loader.load()` method accepts an array of URLs. The `.then()` callback receives an array of loaded resources. This approach is suitable for preloading common resource types like images and sounds.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load([url1, url2]).then((res:Array<any>)=> {  /** 加载多个，不带类型，用于常规的资源 */   });     \n```\n\n----------------------------------------\n\nTITLE: Scheduling Immediate Deferred Execution with callLater in LayaAir (TypeScript)\nDESCRIPTION: Defines the callLater method, which schedules a callback to run after the current frame rendering but before the next frame, with higher priority than a single-frame delay. Takes the execution context, method, and optional arguments, and leverages the CallLater singleton. Allows batching and deduplication within a frame.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 延迟执行。\n * @param\tcaller 执行域(this)。\n * @param\tmethod 定时器回调函数。\n * @param\targs 回调参数。\n */\ncallLater(caller: any, method: Function, args: any[] = null): void {\n    CallLater.I.callLater(caller, method, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Shape-based Ray Casting in TypeScript\nDESCRIPTION: Uses a sphere collider shape instead of a linear ray for collision detection. This creates a \"thick ray\" or \"swept sphere\" effect, where objects are detected if they intersect with the sphere moving from the start to end position.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n//创建球型碰撞器\nvar sphereCollider:Laya.SphereColliderShape = new Laya.SphereColliderShape(0.5);\n\n//通过按钮this.castAll状态切换是采用检测全部还是检测第一个\nif (this.castAll) {\n    //采用球形碰撞器进行形状检测,检测所有碰撞的物体\n    this.scene.physicsSimulation.shapeCastAll(sphereCollider, this.from, this.to, this.outs);\n    for (let i = 0; i < this.outs.length; i++){\n        ((this.outs[i].collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n} else {\n    //采用球形碰撞器进行形状检测,检测第一个碰撞物体\n    if (this.scene.physicsSimulation.shapeCast(sphereCollider, this.from, this.to, this.out))\n        ((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Base UI Logic to Another Scene Component (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates another custom component (`ButtonScript`), associated with a different scene and UI Runtime (`ButtonRuntime`), inheriting from the common `Main` base class. Like `NewScript`, it gets its specific UI Runtime instance in `onStart` and invokes `super.baseUI` to apply shared UI logic defined in `Main`. Depends on `Main`, `ButtonRuntime`, and the LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/runtime/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Main } from \"./Main\";\nimport { ButtonRuntime } from \"./ButtonRuntime\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class ButtonScript extends Main {\n\n    private ui: ButtonRuntime;\n    onStart() {\n        console.log(\"Game start\");\n        this.ui = this.owner.scene as ButtonRuntime;\n        super.baseUI(this.ui);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 创建和配置2D聚光灯组件的TypeScript实现\nDESCRIPTION: 此代码示例展示了如何通过TypeScript脚本创建和配置2D聚光灯组件。代码中设置了光照位置、颜色、强度、内外半径和角度等属性，实现了一个紫色调的聚光灯效果。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/SpotLight2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class SpotLight extends Laya.Script {\n\n    @property({ type: Laya.Sprite })\n    private spotLight: Laya.Sprite;\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        this.setSpotLight();\n    }\n\n    // 创建聚光灯\n    setSpotLight(): void {\n        this.spotLight.pos(336, 280);\n        let spotLightComponent = this.spotLight.getComponent(Laya.SpotLight2D);\n        spotLightComponent.color = new Laya.Color(1, 0.812, 1);\n        spotLightComponent.intensity = 1.0;\n        spotLightComponent.innerRadius = 50;\n        spotLightComponent.outerRadius = 200;\n        spotLightComponent.innerAngle = 50;\n        spotLightComponent.outerAngle = 150;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom 2D Mesh Shader with Gradient Effect in GLSL\nDESCRIPTION: Defines a GLSL shader for the LayaAir 2D mesh renderer that supports instancing and lighting. It includes vertex and fragment shaders where the fragment shader computes a gradient color effect based on the UV coordinates and a customizable gradient direction uniform. This shader modulates texture color with a gradient blend from start to end colors, optionally applies lighting and shadow effects, and handles color space transformation before outputting the final color. Dependencies include LayaAir shader framework and built-in shader includes for sprite vertex and fragment components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Mesh2DRender/readme.md#_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\nShader3D Start\n{\n    type:Shader3D,\n    name:baseRender2D,\n    enableInstancing:true,\n    supportReflectionProbe:true,\n    shaderType:2,\n    uniformMap:{\n        u_gradientDirection: {type: Vector2, default:[1,1]},    // 滗变方向\n        u_gradientStartColor: {type:Vector4, default:[1,1,1,1]},       // 滗变起始颜色\n        u_gradientEndColor: {type:Vector4, default:[1,1,1,1]}        // 滗变终点颜色    \n    },\n    attributeMap: {\n        a_position: Vector4,\n        a_color: Vector4,\n        a_uv: Vector2,\n    },\n    defines: {\n        BASERENDER2D: { type: bool, default: true }\n    }\n    shaderPass:[\n        {\n            pipeline:Forward,\n            VS:baseRenderVS,\n            FS:baseRenderPS\n        }\n    ]\n}\nShader3D End\n\nGLSL Start\n#defineGLSL baseRenderVS\n\n    #define SHADER_NAME baseRender2D\n\n    #include \"Sprite2DVertex.glsl\";\n\n    void main() {\n        vec4 pos;\n        //先计算位置，再做裁削\n        getPosition(pos);\n        vertexInfo info;\n        getVertexInfo(info);\n\n        v_texcoord = info.uv;\n        v_color = info.color;\n\n        #ifdef LIGHT_AND_SHADOW\n            lightAndShadow(info);\n        #endif\n\n        gl_Position = pos;\n    }\n\n#endGLSL\n\n#defineGLSL baseRenderPS\n    #define SHADER_NAME baseRender2D\n    #if defined(GL_FRAGMENT_PRECISION_HIGH) \n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    #include \"Sprite2DFrag.glsl\";\n\n    void main()\n    {\n        clip();\n        vec4 textureColor = texture2D(u_baseRender2DTexture, v_texcoord);\n\n        // 计算滗变因子\n        float gradientFactor = dot(v_texcoord, normalize(u_gradientDirection)) * 0.5 + 0.5;\n        \n        // 混合滗变颜色\n        vec4 gradientColor = mix(u_gradientStartColor, u_gradientEndColor, gradientFactor);\n        textureColor *= gradientColor;\n        \n        #ifdef LIGHT_AND_SHADOW\n            lightAndShadow(textureColor);\n        #endif\n\n        textureColor = transspaceColor(textureColor);\n        setglColor(textureColor);\n    }\n    \n#endGLSL\nGLSL End\n```\n\n----------------------------------------\n\nTITLE: Normal vector normalization in GLSL fragment shader - GLSL\nDESCRIPTION: Shows how to manually normalize a varying normal vector passed from the vertex shader to the fragment shader to ensure correct lighting calculations since interpolated normals may not be normalized automatically.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_11\n\nLANGUAGE: glsl\nCODE:\n```\n// 归一化法线\nvec3 normal = normalize(v_normal);\n```\n\n----------------------------------------\n\nTITLE: Implementing a LayaAir Vertex Shader (GLSL)\nDESCRIPTION: Presents a complete example of a LayaAir vertex shader (`unlitVS`). It demonstrates using `#include` for engine modules (Math, Scene, Camera, etc.), declaring `varying` variables for passing data (UVs, vertex color) to the fragment shader conditionally using `#ifdef`, accessing input attributes (`a_Position`, `a_Normal`, etc.) via LayaAir helper functions (`getVertexParams`), transforming UVs (`transformUV`), calculating world position, transforming to clip space (`getPositionCS`), remapping Z depth (`remapPositionZ`), and finally assigning to `gl_Position`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_16\n\nLANGUAGE: GLSL\nCODE:\n```\n#defineGLSL unlitVS\n\n    #define SHADER_NAME UnlitShader\n\n    #include \"Math.glsl\";\n    #include \"Scene.glsl\";\n    #include \"SceneFogInput.glsl\";\n    #include \"Camera.glsl\";\n    #include \"Sprite3DVertex.glsl\";\n    #include \"VertexCommon.glsl\";\n\n    #ifdef UV\n    varying vec2 v_Texcoord0;\n    #endif // UV\n\n    #ifdef COLOR\n    varying vec4 v_VertexColor;\n    #endif // COLOR\n\n    void main()\n    {\n        Vertex vertex;\n        getVertexParams(vertex);\n\n    #ifdef UV\n        v_Texcoord0 = transformUV(vertex.texCoord0, u_TilingOffset);\n    #endif // UV\n\n    #ifdef COLOR\n        v_VertexColor = vertex.vertexColor;\n    #endif // COLOR\n\n        mat4 worldMat = getWorldMatrix();\n        vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\n        vec3 positionWS = pos.xyz / pos.w;\n        gl_Position = getPositionCS(positionWS);\n        gl_Position = remapPositionZ(gl_Position);\n\n    }\n#endGLSL\n```\n\n----------------------------------------\n\nTITLE: Controlling Auto-Stop Music on Browser Focus Loss in LayaAir with TypeScript\nDESCRIPTION: The code sets the SoundManager.autoStopMusic property in LayaAir to false to prevent background music from stopping when the browser loses focus (e.g., user switches tabs). This allows the music to keep playing in the background. Required dependency: LayaAir SoundManager. Input: none directly (property toggle). Output: Music continues uninterrupted unless explicitly paused or stopped.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/media/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//失去焦点后是否自动停止背景音乐。false不自动停止，一直播。true是自动停止\nLaya.SoundManager.autoStopMusic = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Laya.Script Lifecycle Methods in TypeScript\nDESCRIPTION: Demonstrates overriding the built-in lifecycle methods provided by the `Laya.Script` base class in TypeScript. Each method includes a `console.log` statement to illustrate when it's invoked during the component's lifecycle within the LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\t//被添加到节点后调用，和Awake不同的是即使节点未激活onAdded也会调用\n    onAdded(): void {\n        console.log(\"Game onAdded\");\n    }\n\n    //重置组件参数到默认值，如果实现了这个函数，则组件会被重置并且自动回收到对象池，方便下次复用。如果没有重置，则不进行回收复用\n    onReset(): void {\n        console.log(\"Game onReset\");\n    }\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        console.log(\"Game onAwake\");\n    }\n\n    //组件被启用后执行，比如节点被添加到舞台后\n    onEnable(): void {\n        console.log(\"Game onEnable\");\n    }\n\n    //第一次执行update之前执行，只会执行一次\n    onStart(): void {\n        console.log(\"Game onStart\");\n    }\n\n    //每帧更新时执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n    onUpdate(): void {\n        console.log(\"Game onUpdate\");\n    }\n\n    //每帧更新时执行，在update之后执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n    onLateUpdate(): void {\n        console.log(\"Game onLateUpdate\");\n    }\n\n    //渲染之前执行\n    onPreRender(): void {\n        console.log(\"Game onPreRender\");\n    }\n\n    //渲染之后执行\n    onPostRender(): void {\n        console.log(\"Game onPostRender\");\n    }\n\n    //组件被禁用时执行，比如从节点从舞台移除后\n    onDisable(): void {\n        console.log(\"Game onDisable\");\n    }\n\n    //手动调用节点销毁时执行\n    onDestroy(): void {\n        console.log(\"Game onDestroy\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Animation Data Compression Setting LayaAir3-IDE\nDESCRIPTION: Describes the 'Animation Data Compression' setting, explaining how it can reduce the volume of animation data. This includes the parameters 'Minimum Ignore Value' for the different dimensions of the animation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_15\n\nLANGUAGE: other\nCODE:\n```\n勾选 `动画数据压缩`后，如图5-1所示。可以根据配置对动画数据的体积进行压缩。\n```\n\n----------------------------------------\n\nTITLE: Watching Geolocation Changes Using LayaAir TypeScript\nDESCRIPTION: Provides static methods to continuously monitor device geographic position changes via watchPosition, and to unregister the watcher with clearWatch. The watchPosition method registers callback handlers triggered on location updates or errors and returns a watcher ID for later cancellation. Options for high accuracy, timeout, and caching are supported. These methods wrap the browser geolocation API to integrate with LayaAir's Handler system and Position abstraction.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/geolocation/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t/**\n\t * 监视设备当前位置。回调处理器在设备位置改变时被执行。\n\t * @param\tonSuccess\t带有唯一<code>Position</code>参数的回调处理器。\n\t * @param\tonError\t\t可选的。带有错误信息的回调处理器。错误代码为Geolocation.PERMISSION_DENIED、Geolocation.POSITION_UNAVAILABLE和Geolocation.TIMEOUT之一。\n\t */\n\tstatic watchPosition(onSuccess: Handler, onError: Handler): number {\n\t\treturn Geolocation.navigator.geolocation.watchPosition(function (pos: any): void {\n\t\t\tGeolocation.position.setPosition(pos);\n\t\t\tonSuccess.runWith(Geolocation.position);\n\t\t},\n\t\t\tfunction (error: any): void {\n\t\t\tonError.runWith(error);\n\t\t\t},\n\t\t\t{\n\t\t\t\tenableHighAccuracy: Geolocation.enableHighAccuracy,\n\t\t\t\ttimeout: Geolocation.timeout,\n\t\t\t\tmaximumAge: Geolocation.maximumAge\n\t\t\t});\n\t}\n\n\t/**\n\t * 移除<code>watchPosition</code>安装的指定处理器。\n\t * @param\tid\n\t */\n\tstatic clearWatch(id: number): void {\n\t\tGeolocation.navigator.geolocation.clearWatch(id);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Remove Self from Parent - TypeScript\nDESCRIPTION: Removes the current node from its parent.  Checks if the node has a parent before attempting to remove it.  Returns the current node object. No exceptions are thrown if the node is already removed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 从父容器删除自己，如已经被删除不会抛出异常。\n     * @return 当前节点（ Node ）对象。\n     */\n    removeSelf(): Node {\n        this._parent && this._parent.removeChild(this);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Screen Data Properties in LayaAir\nDESCRIPTION: TypeScript code showing the implementation of Laya.Browser properties for accessing screen data including clientWidth, clientHeight, width, height, and pixelRatio. These methods provide access to logical dimensions, physical dimensions, and device pixel ratio.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 浏览器窗口可视宽度。\n     * 通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度) > document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。\n     */\n    static get clientWidth(): number {\n        Browser.__init__();\n        return Browser._clientWidth || Browser._window.innerWidth || Browser._document.body.clientWidth;\n    }\n\n    static set clientWidth(value: number) {\n        Browser._clientWidth = value;\n    }\n\n    /**\n     * 浏览器窗口可视高度。\n     * 通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度) > document.body.clientHeight(不包含滚动条高度) > document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。\n     */\n    static get clientHeight(): number {\n        Browser.__init__();\n        return Browser._clientHeight || Browser._window.innerHeight || Browser._document.body.clientHeight || Browser._document.documentElement.clientHeight;\n    }\n\n    static set clientHeight(value: number) {\n        Browser._clientHeight = value;\n    }\n\n    /** 浏览器窗口物理宽度。考虑了设备像素比。*/\n    static get width(): number {\n        Browser.__init__();\n        return ((ILaya.stage && ILaya.stage.canvasRotation) ? Browser.clientHeight : Browser.clientWidth) * Browser.pixelRatio;\n    }\n\n    /** 浏览器窗口物理高度。考虑了设备像素比。*/\n    static get height(): number {\n        Browser.__init__();\n        return ((ILaya.stage && ILaya.stage.canvasRotation) ? Browser.clientWidth : Browser.clientHeight) * Browser.pixelRatio;\n    }\n\n    /** 获得设备像素比。*/\n    static get pixelRatio(): number {\n        if (Browser._pixelRatio < 0) {\n            Browser.__init__();\n            if (Browser.userAgent.indexOf(\"Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)\") > -1) Browser._pixelRatio = 2;\n            else {\n                Browser._pixelRatio = (Browser._window.devicePixelRatio || 1);\n                if (Browser._pixelRatio < 1) Browser._pixelRatio = 1;\n            }\n        }\n        return Browser._pixelRatio;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using new Laya.Handler for Persistent Callbacks (TypeScript)\nDESCRIPTION: Presents an alternative correct method for persistent callbacks (like loading progress) by instantiating `Laya.Handler` directly using `new`. This bypasses the object pooling mechanism of `Laya.Handler.create`, ensuring the handler remains active for multiple calls without being automatically recovered.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/memory/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(urls, Laya.Handler.create(this,this.onAssetLoaded), new Laya.Handler(this, this.onLoading));\n```\n\n----------------------------------------\n\nTITLE: Converting World Coordinates to Grid Index in TypeScript\nDESCRIPTION: Defines the 'getGridIndex' function, which converts world space x and z coordinates into integer grid indices (x, y) suitable for the A* map. It uses the terrain's dimensions and the A* map's dimensions to perform the mapping, clamping the results within the grid boundaries.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 得到整数的网格索引\n*/\nprivate getGridIndex(x: number, z: number, out: Vector2) {\n    var minX = this.terrainSprite.minX;\n    var minZ = this.terrainSprite.minZ;\n    var cellX = this.terrainSprite.width / this.aStarMap.width;\n    var cellZ = this.terrainSprite.depth / this.aStarMap.height;\n    var gridX = Math.floor((x - minX) / cellX);\n    var gridZ = Math.floor((z - minZ) / cellZ);\n    var boundWidth = this.aStarMap.width - 1;\n    var boundHeight = this.aStarMap.height - 1;\n    (gridX > boundWidth) && (gridX = boundWidth);\n    (gridZ > boundHeight) && (gridZ = boundHeight);\n    (gridX < 0) && (gridX = 0);\n    (gridZ < 0) && (gridZ = 0);\n    out.x = gridX;\n    out.y = gridZ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RenderTarget Camera Properties in LayaAir TypeScript\nDESCRIPTION: This code defines properties in a camera controller script to access a render target camera and a plane object. These properties will be used to implement a render-to-texture system where the render target camera's view is displayed on the plane as a texture.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n    @property({ type: Laya.Camera })\n    public renderTargetCamera: Laya.Camera;\n    @property({ type: Laya.Sprite3D })\n    public plane: Laya.Sprite3D;\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties with Basic Types in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define component properties with basic types such as Number, String, Boolean, int, uint, text, and any using the `@property` decorator in LayaAir. It includes examples of number, string, boolean, integer, unsigned integer, multiline text, and any types, and demonstrates type casting.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n//枚举\nenum TestEnum {\n    A,\n    B,\n    C\n};\n//字符串形式的枚举\nenum Direction {\n    Up = 'UP',\n    Down = 'DOWN',\n    Left = 'LEFT',\n    Right = 'RIGHT'\n};\n\n@regClass()\nexport class Script extends Laya.Script {\n\n    @property(Number)//数字类型，等价于{ type : \"number\" }\n    num : number;\n\n    @property(String)//单行字符串文本类型，等价于 { type: \"string\"}\n\tstr : string;\n\n    @property(Boolean)//布尔值类型，等价于 { type: \"boolean\"}\n\tbool : boolean;\n\n\t@property(\"int\")//整数类型，等价于 { type: Number, fractionDigits: 0 }\n\tint : number; \n\n    @property(\"uint\") //正整数类型，等价于 { type: Number, fractionDigits: 0 , min: 0 }\n    uint : number; \n\n    @property(\"text\")//多行字符串文本类型，等价于 { type: String, multiline: true }\n    text : string; \n\n    @property(\"any\")//any类型只会被序列化，不能显示和编辑。\n\ta : any; \n    \n    @property(Int8Array)//类型化数组类型,除了Int8Array，还支持Uint8Array、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array，使用方式都类似\n    i8a: Int8Array;\n        \n    @property({ type: [\"number\"] })//数组类型，用中括号包含数组元素类型\n    arr1: number[];\n\n    @property({ type: [\"string\"] })//数组类型，用中括号包含数组元素类型\n    arr2: string[];\n    \n    //普通的枚举类型（可以类型简写），会显示为下拉框供用户选择\n    @property(TestEnum)\n    enum: TestEnum;\n    \n\t//字符串形式的枚举，不能使用类型简写，如：@property(Direction)。必须下面带type参数指定的标准写法\n    @property({ type: Direction })\n    direc: Direction;\n    \n    //字典类型，需要用数组参数来设置类型，下面示例中的Record类型需要放到字符串内作为数组参数的第一个元素，数组参数的第二个元素是字典输入值的类型，用于决定属性面板的输入控件类型\n    @property({ type: [\"Record\", Number] })\n    dict: Record<string, number>; \n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atlas Sub-Images in LayaAir Project in TypeScript\nDESCRIPTION: This snippet loads multiple atlas resources asynchronously and then creates two image instances, each assigned a skin property corresponding to specific small images within the loaded atlases. The key point is the skin property format, which specifies sub-images using the original small image directory and filename within the atlas. The snippet requires the LayaAir framework and proper atlas resource files. Inputs are the atlas resource URLs; outputs are the created and displayed images on the LayaAir stage. This facilitates efficient rendering by leveraging texture atlases for reduced memory footprint and improved rendering performance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/generalSetting/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n        let resArr: Array<any> = [\n\n            { url: \"resources/atlas/Atlas.atlas\", type: Laya.Loader.ATLAS },\n            { url: \"resources/atlas/Atlas_ui.atlas\", type: Laya.Loader.ATLAS },\n            { url: \"resources/atlas/Atlas_comp.atlas\", type: Laya.Loader.ATLAS }];\n\n\n        Laya.loader.load(resArr).then( ()=>{\n                //创建Image1实例\n                var img1 = new Laya.Image();\n                //设置皮肤（取图集中小图的方式就是 原小图目录名/原小图资源名.png）\n                img1.skin = \"resources/atlas/img_head2.png\";\n                //添加到舞台上显示\n                Laya.stage.addChild(img1);\n\n                //创建Image2实例\n                var img2 = new Laya.Image();\n                //设置皮肤（取图集中小图的方式就是 原小图目录名/原小图资源名.png）\n                img2.skin = \"resources/atlas/comp/image.png\";\n                //添加到舞台上显示\n                Laya.stage.addChild(img2);\n            } \n        );\n```\n\n----------------------------------------\n\nTITLE: Loading AStarMap and Initializing AStar Data\nDESCRIPTION: This code snippet loads the AStarMap texture, prepares the grid for the A* algorithm, and sets up the graph using the A* library. It loads an image as texture that is used to identify walkable and unwalkable areas and uses the AStarMap to construct an A* grid using the `createGridFromAStarMap` function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n//读取墙壁的数据\n        this.aStarMap = Loader.getTexture2D(\"res/threeDimen/scene/TerrainScene/Assets/AStarMap.png\");\n\n        //使用astar组织数据\n        var aStarArr = this.createGridFromAStarMap(this.aStarMap);\n        this.graph = new (window as any).Graph(aStarArr);\n        this.opts = [];\n        this.opts.closest = true;\n        this.opts.heuristic = (window as any).astar.heuristics.diagonal;\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation Node via Custom Script in LayaAir IDE (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a custom script component for LayaAir ('Animation.ts') that receives an Animation node via a property exposed in the IDE and configures it at runtime. Dependencies include the LayaAir engine (Laya), Laya.Script class, and decorators for class and property registration. The script's `onAwake` lifecycle hook configures the Animation: assigns an atlas resource, enables autoplay, sets the playback mode to POSITIVE (0), and sets the frame interval to 50ms. Input is the Animation node reference from the scene, and the output is an initialized and playing Animation node on scene load. The snippet must run within the LayaAir 2D scene system with proper resource paths.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Animation/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Animation extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Animation }) //在IDE面板中显示属性\n    ani: Laya.Animation;\n\n    constructor() {\n        super();\n    }\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次 \n    onAwake(): void {\n        this.ani.source = \"resources/role.atlas\"; //接收动画数据源为图集\n        this.ani.autoPlay = true; //开启自动播放\n        this.ani.wrapMode = 0; //播放模式为正序播放模式（POSITIVE）\n        this.ani.interval = 50; //动画播放的帧间隔时间为50毫秒\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering webview display with close button - TypeScript\nDESCRIPTION: Creates a touchstart event listener that opens a webview with conch.setExternalLinkEx, providing arguments to specify the URL, placement, and making canclose true. This allows the user to close the webview via a UI button (iOS) or back button (Android). The snippet assumes the conch object is available in the runtime environment. Layout is computed using the browser window's dimensions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/webview/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('touchstart',()=>{\n    if(conch){\n        var l = 50;\n        var t = 50;\n        var w = window.innerWidth - l * 2;\n        var h = window.innerHeight - t * 2;\n        conch.setExternalLinkEx('http://www.layabox.com',l,t,w,h,true); // canclose设置为true\n        //conch.setExternalLink('http://www.baidu.com');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Ordering Component Property Categories in LayaAir Using catalogOrder in TypeScript\nDESCRIPTION: This code snippet shows how to set the display order of property categories in LayaAir's properties panel using the 'catalogOrder' parameter within the @property decorator. Categories with smaller 'catalogOrder' values are shown first. Properties 'a' and 'd' are assigned to categories \"bb\" and \"adv\" with respective ordering priorities. Properties without a 'catalogOrder' appear after ordered ones, following their declaration sequence. Category captions and order settings need only be declared once per category to be applied.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t@property({ type : \"number\", catalog:\"bb\", catalogOrder:1 })\n    a : number;\n\n    @property({ type: \"string\"})\n    b : string;\n\n    @property({ type: \"boolean\", catalog:\"adv\"})\n    c : boolean;\n\n    @property({ type: String, inspector: \"color\", catalog:\"adv\", catalogCaption:\"高级组件\", catalogOrder:0})\n    d: string;\n```\n\n----------------------------------------\n\nTITLE: LayaAir TypeScript Example for Monitoring Geolocation Changes on Key Down\nDESCRIPTION: Demonstrates binding Laya.Geolocation.watchPosition to a keyboard event, enabling continuous tracking of device position changes. It handles success updates by logging latitude and longitude with accuracy and reports errors based on permission or availability issues. The example advises testing under HTTPS due to browser restrictions on geolocation access.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/geolocation/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\t\n\tonKeyDown(): void {\n\t\t// Geolocation.watchPosition函数签名\n\t\tLaya.Geolocation.watchPosition(\n\t\t\tLaya.Handler.create(this, this.updatePosition),\n\t\t\tLaya.Handler.create(this, this.onError));\n\t\tconsole.log(\"keydown\");\n\t}\n\t\n\tupdatePosition(info: Laya.GeolocationInfo): void {\n\t\tconsole.log('经纬度: (' + info.longitude + '°\\u00B0, ' + info.latitude + '°\\u00B0)，精确度：' + info.accuracy + 'm');\n\t}\n\t\n\tonError(err: any): void {\n\t\tvar errType: String;\n\t\tif (err.code == Laya.Geolocation.PERMISSION_DENIED)\n\t\t\terrType = \"Permission Denied\";\n\t\telse if (err.code == Laya.Geolocation.POSITION_UNAVAILABLE)\n\t\t\terrType = \"Position Unavailable\";\n\t\telse if (err.code == Laya.Geolocation.TIMEOUT)\n\t\t\terrType = \"Time Out\";\n\t\tconsole.log('ERROR(' + errType + '): ' + err.message);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering webview display without close button - TypeScript\nDESCRIPTION: Sets up an event listener on the document that, upon touch, uses conch.setExternalLinkEx to display a webview at specified screen coordinates showing a target URL. The canclose parameter is set to false, so the webview cannot be closed within the UI. Requires the conch object to be defined (i.e., running under a LayaNative environment). Parameters l, t, w, and h control the position and size based on window dimensions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/webview/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('touchstart',()=>{\n    if(conch){\n        var l = 50;\n        var t = 50;\n        var w = window.innerWidth - l * 2;\n        var h = window.innerHeight - t * 2;\n        conch.setExternalLinkEx('http://www.layabox.com',l,t,w,h,false); // canclose设置为false\n        //conch.setExternalLink('http://www.baidu.com');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Enable/Disable Retinal Canvas\nDESCRIPTION: This TypeScript code snippet demonstrates how to dynamically control the `useRetinalCanvas` mode of the LayaAir stage. It allows enabling or disabling retinal canvas based on a condition. It's crucial to update a stage property (scaleMode, width, height, alignH, or alignV) for changes to take effect.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/adaptScreen/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif(条件){    \n    Laya.stage.useRetinalCanvas = false;\n}else{    \n    Laya.stage.useRetinalCanvas = true;\n}\nLaya.stage.alignH = \"left\";\n```\n\n----------------------------------------\n\nTITLE: Loading Subpackages Dynamically in LayaAir for Alipay Mini Games\nDESCRIPTION: Demonstrates how to load resource subpackages ('sub1', 'sub2') asynchronously in a LayaAir TypeScript script, specifically for the Alipay Mini Game platform. It uses `Laya.loader.loadPackage` to load the package manifest and `Laya.loader.load` to load specific assets (prefabs '.lh' in this case) from within the loaded package. A progress callback (`printProgress`) is provided to monitor loading status.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/alipaygame/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n\n        //支付宝小游戏\n        Laya.loader.loadPackage(\"sub1\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n                let sp3: Laya.Sprite3D = res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub2/Sphere.lh\").then((res: any) => {\n                let sp3 = res.create();\n                this.scene3d.addChild(sp3);\n            });\n        })\n        \n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Mouse Events in LayaAir\nDESCRIPTION: Shows how to control whether an object can receive mouse events by setting the mouseEnabled property through code.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n//true允许接收鼠标事件,false禁止接收鼠标事件\nthis.xxx.mouseEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Lifecycle Methods in LayaAir IDE with @runInEditor Decorator in TypeScript\nDESCRIPTION: This snippet shows how to use the @runInEditor decorator combined with @regClass() to allow lifecycle methods such as onEnable and onStart to be triggered inside the LayaAir IDE during editing, enabling component scripts to respond to IDE events. It requires importing regClass, property, and runInEditor from Laya, and decorating the class before declaration. Input includes a class extending Laya.Script with an exposed Sprite3D property; output is console logs during IDE load. Usage is not generally recommended due to performance and update rate differences inside the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property, runInEditor } = Laya;\n\n@regClass() @runInEditor     //Decorators must be placed before class declaration, order flexible.\nexport class NewScript extends Laya.Script {\n    @property({ type: Laya.Sprite3D })\n    sp3: Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    onEnable() {\n        console.log(\"Game onStart\", this.sp3.name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用TypeScript在LayaAir中实现2D与3D混合显示\nDESCRIPTION: 通过创建RenderTexture实例并设置为摄像机的渲染目标，然后将该渲染纹理应用到2D Sprite对象的texture属性，实现3D内容在2D界面的显示。代码创建了256x256分辨率的RGBA格式渲染纹理。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/use3D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 把3D摄像机视图画到256宽高的纹理上\n_camera.renderTarget = new Laya.RenderTexture(256, 256, Laya.RenderTargetFormat.R8G8B8A8, Laya.RenderTargetFormat.DEPTHSTENCIL_24_8);\n// 再将离屏3D画到2D节点上，至此，就完成把3D画到2D的基础渲染流程\nsp.texture = new Laya.Texture(_camera.renderTarget);\n```\n\n----------------------------------------\n\nTITLE: 直接渲染文本跳过排版的changeText方法 - LayaAir - TypeScript\nDESCRIPTION: 示例展示如何使用Text对象的changeText方法快速更新单行文本内容，跳过常规文本排版流程，从而提高性能。场景中先设置this.text.text属性添加文本，再调用changeText方法仅更新底层绘图指令，避免重复创建绘图指令。适用条件是文本样式不变且单行文本。依赖LayaAir Text组件，适合频繁更新文本内容而对性能要求较高的场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.text.text=\"text\";\nLaya.stage.addChild(this.text);\n//后面只是更新文字内容，使用changeText能提高性能\nthis.text.changeText(\"text changed.\");\n```\n\n----------------------------------------\n\nTITLE: Measuring Custom Time Interval Performance in LayaAir\nDESCRIPTION: This snippet demonstrates how to use perf_begin and perf_end APIs to measure the execution time of a code block. The example creates a simple CPU-intensive operation that runs for approximately 2ms and measures its duration.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    onUpdate(): void {\n        this.perfMain.perf_begin(\"time2\");\n        const targetDuration = 2; // 目标持续时间（毫秒）\n        const startTime = performance.now(); // 使用性能高精度时间标记\n\n        // 一个简单的计数循环，用于占用CPU时间\n        // 初始值和增量的大小可能需要调整以匹配大约2ms的执行时间\n        let count = 0;\n        while (performance.now() - startTime < targetDuration) {\n            count++;\n        }\n        this.perfMain.perf_end(\"time2\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.once Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.once method. This method schedules a function to execute once after a specified delay in milliseconds.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 定时执行一次。\n     * @param\tdelay\t延迟时间(单位为毫秒)。\n     * @param\tcaller\t执行域(this)。\n     * @param\tmethod\t定时器回调函数。\n     * @param\targs\t回调参数。\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n     */\n    once(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\n        this._create(false, false, delay, caller, method, args, coverBefore);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Static Native Functions in iOS Objective-C for LayaNative Reflection\nDESCRIPTION: Shows example implementations of static class methods in Objective-C within `JSBridge` for LayaNative reflection support, callable from JavaScript. Functions handle basic types such as NSString and NSNumber for string, number, and boolean values, logging inputs and returning fixed or manipulated values. The asynchronous callback method parses JSON on the JavaScript thread and dispatches updates to the main UI thread, sending JSON responses back to JavaScript. Method signatures and thread management details are highlighted, with the requirement to rename source files to `.mm` for Objective-C++ compatibility.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/Secondary_Development/readme.md#_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n    +(NSString*)testString:(NSString*)value\n    {\n      NSLog(@\"OC: %@\",value);\n      return @\"LayaBox\";\n    }\n    +(NSNumber*)testNumber:(NSNumber*)value\n    {\n      NSLog(@\"OC: %@\",value);\n      return @512;\n    }\n    +(NSNumber*)testBool:(NSNumber*)value\n    {\n      NSLog(@\"OC: %d\",value.boolValue);\n      return [NSNumber numberWithBool:value.boolValue ? NO : YES];\n    }\n    +(void)testAsyncCallback:(NSString*)json\n    {\n      //js thread\n      NSError* error = nil;\n      NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];\n      NSDictionary* dict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableContainers error:&error];\n      NSLog(@\"OC: %@\", [dict objectForKey:@\"value\"]);\n      dispatch_async(dispatch_get_main_queue(), ^{\n          //ui thread\n          NSError* error = nil;\n          NSDictionary* dic = [NSDictionary dictionaryWithObject:@\"Hello JS!\" forKey:@\"value\"];\n          NSData* jsonData = [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:&error];\n          NSString* jsonStr = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n          [[conchRuntime GetIOSConchRuntime] callbackToJSWithClass:self.class methodName:@\"testAsyncCallback:\" ret:jsonStr];\n      });\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Object Pool in TypeScript\nDESCRIPTION: This code snippet defines a custom Pool class for managing object pooling. It provides methods for retrieving objects from the pool, recovering objects back into the pool, and clearing the pool.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/particleEditor3D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Pool {\n    \n        private _poolDic:{[key: string]: any;} = {};\n\t    private InPoolSign: string = \"__InPool\";\n\n        constructor() \n        {\n        }\n\n        private static _instance: Pool = new Pool();\n        public static getInstance() {\n            return this._instance;\n        }\n\n\t\t//通过名字找到对应的对象池\n        getPoolBySign(sign:string): any\n        {\n            return this._poolDic[sign] || (this._poolDic[sign] = []);\n        };\n\n\t\t//回收\n        recover(sign:string, item:any): void\n        {\n            item[\"__InPool\"] = true;\n        };\n\n\t\t//通过名字获得一个对象，如果对象池内没有对象，则创建一个\n\t    getItemByClass(sign:string, cls:any): any\n        {\n            var ret = null;\n            var pool = this.getPoolBySign(sign);\n            for (var i = 0, len = pool.length; i < len; i++)\n            {\n                var item = pool[i];\n                if (item[\"__InPool\"] && item instanceof cls)\n                {\n                    ret = item;\n                    break;\n                }\n            } \n            if (!ret)\n            {\n                ret = new cls();\n                pool.push(ret);         \n            }\n            ret[\"__InPool\"] = false;\n            return ret;\n        };\n\n\t\t//通过名字，清理一组对象池\n        ClearGroup(head_sign:string, caller:any, func:Function): void\n        {\n            for (var key in this._poolDic)\n            {\n                if (key.indexOf(head_sign) == 0)\n                {\n                    var pool = this._poolDic[key];\n                    if (func)\n                    {\n                        for (var i = 0, len = pool.length; i < len; i++)\n                        {\n                            var item = pool[i];\n                            func.call(caller, item);\n                        }\n                    }\n                    pool.length = 0;\n                }\n            }\n        };\n\n\t\t//清理所有的对象池\n        ClearAll(caller:any, func:Function): void\n        {\n            for (var key in this._poolDic)\n            {\n                var pool = this._poolDic[key];\n                if (func)\n                {\n                    for (var i = 0, len = pool.length; i < len; i++)\n                    {\n                        var item = pool[i];\n                        func.call(caller, item);\n                    }\n                }\n                pool.length = 0;\n            }\n        };\n}\n\n```\n\n----------------------------------------\n\nTITLE: 通过代码创建自定义Dialog并加载图片资源\nDESCRIPTION: 示例演示了在代码中创建LayaDialog，添加背景图和关闭按钮，设置拖拽区域，并弹出显示弹窗。所有UI元素由代码动态生成，无需预制体。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Dialog/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Dialog extends Laya.Script {\n\n    private DIALOG_WIDTH: number = 220;\n    private DIALOG_HEIGHT: number = 275;\n    private CLOSE_BTN_WIDTH: number = 43;\n    private CLOSE_BTN_PADDING: number = 5;\n\n    private assets: any[];\n    private dialog: Laya.Dialog;\n\n    constructor() {\n        super();\n    }\n\n    onAwake(): void {\n        this.assets = [\"resources/res/ui/dialog (1).png\", \"resources/res/ui/close.png\"];\n        Laya.loader.load(this.assets).then( ()=>{\n            this.onSkinLoadComplete();\n        } );\n    }\n\n    private onSkinLoadComplete(e: any = null): void {\n        this.dialog = new Laya.Dialog();\n\n        let bg: Laya.Image = new Laya.Image(this.assets[0]);\n        this.dialog.addChild(bg);\n\n        let button: Laya.Button = new Laya.Button(this.assets[1]);\n        button.name = Laya.Dialog.CLOSE;\n        button.pos(this.DIALOG_WIDTH - this.CLOSE_BTN_WIDTH - this.CLOSE_BTN_PADDING, this.CLOSE_BTN_PADDING);\n        this.dialog.addChild(button);\n\n        this.dialog.dragArea = \"0,0,\" + this.DIALOG_WIDTH + \",\" + this.DIALOG_HEIGHT;\n        this.dialog.show();\n    }\n\n    onDestroy(): void {\n        if (this.dialog) {\n            this.dialog.close();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying a Scene and Garbage Collection - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to destroy a scene and perform garbage collection using `Laya.Scene.destroy` and `Laya.Scene.gc`. Destroying unused resources helps to release memory.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 根据地址，销毁场景（包括对话框）\n * @param\turl\t\t场景地址\n * @param\tname\t如果name不为空，name必须相同才能关闭\n * @return\t返回是否销毁成功，如果url找不到，则不成功\n*/\nstatic destroy(url: string, name?: string): boolean {\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 销毁当前没有被使用的资源,该函数会忽略lock=true的资源。\n*/\nstatic gc(): void {\n    Resource.destroyUnusedResources();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.Scene.destroy(\"scene.ls\");\nLaya.Scene.gc();\n```\n\n----------------------------------------\n\nTITLE: Clearing Bullet Pool Example in LayaAir\nDESCRIPTION: Example of how to clear a bullet object pool when it's no longer needed, typically at the end of a battle sequence.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.Pool.clearBySign(\"Bullet\");\n```\n\n----------------------------------------\n\nTITLE: Executing Component Lifecycle Methods in LayaAir IDE with @runInEditor (TypeScript)\nDESCRIPTION: Demonstrates using the @runInEditor decorator in a LayaAir TypeScript script. This decorator allows component lifecycle methods like onEnable() to execute within the LayaAir IDE editor environment, enabling runtime behavior simulation during editing. It requires importing runInEditor from Laya and placing the decorator before the class definition alongside @regClass.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property, runInEditor } = Laya;\n\n@regClass() @runInEditor     //重点看这里，要放到类之前，@regClass()与@runInEditor谁先谁后都可以。\nexport class NewScript extends Laya.Script {\n    @property({ type: Laya.Sprite3D })\n    sp3: Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    onEnable() {\n        console.log(\"Game onStart\", this.sp3.name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing ShapeCast - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use `shapeCast` or `shapeCastAll`  to perform a collision detection with a sphere. The sphere collider is created and then the shapeCast method is used. The code changes the color of the collided object based on whether all colliders are tested or just the first one.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n//创建球型碰撞器\nvar sphereCollider:Laya.SphereColliderShape = new Laya.SphereColliderShape(0.5);\n\n//通过按钮this.castAll状态切换是采用检测全部还是检测第一个\nif (this.castAll) {\n    //采用球形碰撞器进行形状检测,检测所有碰撞的物体\n    this.scene.physicsSimulation.shapeCastAll(sphereCollider, this.from, this.to, this.outs);\n    for (let i = 0; i < this.outs.length; i++){\n        ((this.outs[i].collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n} else {\n    //采用球形碰撞器进行形状检测,检测第一个碰撞物体\n    if (this.scene.physicsSimulation.shapeCast(sphereCollider, this.from, this.to, this.out))\n        ((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding an iframe Element in LayaAir (TypeScript)\nDESCRIPTION: Shows how to create an iframe element dynamically using Laya.Browser.document.createElement, set its style properties (position, z-index, left, top) for proper display within the LayaAir stage, assign a source URL (src), and append it to the document body. Emphasizes the importance of setting CSS position and z-index.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nvar iframe:any = Laya.Browser.document.createElement(\"iframe\");\niframe.style.position =\"absolute\";//设置布局定位。这个不能少。\niframe.style.zIndex = 100;//设置层级\niframe.style.left =\"100px\";\niframe.style.top =\"100px\";\niframe.src = \"http://ask.layaair.com/\";\nLaya.Browser.document.body.appendChild(iframe);\n```\n\n----------------------------------------\n\nTITLE: Overview of the Blueprint Interface\nDESCRIPTION: This segment provides a preview of the Shader Blueprint interface. It explains the different windows and their specific functions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Recovering Object by Class in LayaAir\nDESCRIPTION: Method to recover an object to the pool based on its class name. Only recovers objects with a valid class name, providing type-based pooling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 根据类名进行回收，如果类有类名才进行回收，没有则不回收\n     * @param\tinstance 类的具体实例\n     */\n    static recoverByClass(instance: any): void {\n        if (instance) {\n            var className: string = instance[\"__className\"] || instance.constructor._$gid;\n            if (className) Pool.recover(className, instance);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: LayaAir TypeScript: Loading Subpackages in Alipay Mini Game\nDESCRIPTION: This TypeScript code demonstrates how to load subpackages in an Alipay Mini Game using LayaAir Engine. It utilizes `Laya.loader.loadPackage` to load subpackages named 'sub1' and 'sub2', and then loads assets from those subpackages, adding them to a scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/alipaygame/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n\n        //支付宝小游戏\n        Laya.loader.loadPackage(\"sub1\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n                let sp3: Laya.Sprite3D = res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub2/Sphere.lh\").then((res: any) => {\n                let sp3 = res.create();\n                this.scene3d.addChild(sp3);\n            });\n        })\n        \n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners of a Specific Event Type in LayaAir\nDESCRIPTION: Shows how to remove all event listeners of a specific type using the offAll method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//删除xxx对象下click事件类型的全部侦听器\nthis.xxx.offAll(Laya.Event.CLICK);\n```\n\n----------------------------------------\n\nTITLE: Checking XR Mode Support using WebXRExperienceHelper (JavaScript)\nDESCRIPTION: This snippet asynchronously checks if the current browser environment supports a specified WebXR mode ('immersive-vr', 'immersive-ar', or 'inline') before enabling or displaying the related UI (e.g., a VR activation button). It uses the static method WebXRExperienceHelper.supportXR with the desired XR mode as a parameter, and sets the visibility of a UI element based on the result. Dependencies include a compatible browser with WebXR support, the LayaAir engine libraries, and the WebXRExperienceHelper class. The expected input is the type of XR mode as a string, and the output is a boolean controlling UI display.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/WebXR/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n//判断浏览器是否支持VR模式,有三种模式immersive-vr\\immersive-ar\\inline\nthis.changeActionButton.visible = await WebXRExperienceHelper.supportXR(\"immersive-vr\");\n```\n\n----------------------------------------\n\nTITLE: 微信小游戏Worker的消息处理与图片下载逻辑\nDESCRIPTION: 此代码定义了Worker线程内的消息监听器，通过worker.onMessage接收主线程发来的图片URL，并调用downloadFile方法将图片下载到本地。下载成功后，将本地缓存路径赋值给图片资源对象，回传主线程以便创建原生Image对象。此逻辑支持图片资源的异步加载和资源缓存管理，便于扩展其他文件类型。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/wechat/Worker/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nworker.onMessage(function (data) {\n    worker.downloadFile({\n        url: data.url,\n        success: function (res) {\n            res.type = \"Image\";\n            res.url = data.url;\n            res.imageBitmap = res.tempFilePath;\n            worker.postMessage({\n                errCode: 0,\n                data: res,\n                readyUrl: data.url\n            });\n        },\n        fail: function (res) {\n            res.type = \"Image\";\n            worker.postMessage({\n                errCode: 1,\n                data: res,\n                readyUrl: data.url\n            });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Supporting ReflectionProbe in Shader\nDESCRIPTION: This code enables or disables support for reflection probes in the shader. Reflection probes capture environmental reflections as CubeMaps, enhancing the realism of reflective materials. Setting `supportReflectionProbe` to `true` enables reflection probe functionality; `false` disables it.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nShader3D Start\n{\n\t....\n\t....\n    supportReflectionProbe:false,\n    ....\n\t....\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Array and Record Types with LayaAir Decorators in TypeScript\nDESCRIPTION: This snippet presents several ways to declare deeply nested arrays, array-of-records, and record-of-arrays using the @property decorator in LayaAir for complex data structures. It demonstrates the required type declarations to ensure the editor and runtime recognize multilevel collections and record patterns. Useful when authoring components that expect data in grids, maps, or advanced structured forms. Dependencies: LayaAir engine, TypeScript. Inputs are nested or mapping structures; all are statically typed for editor integration.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property([[\"string\"]])\n    test1: string[][] = [[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\"]];\n\n    @property([[\"Record\", \"string\"]])\n    test2: Array<Record<string, string>> = [{ name: \"A\", value: \"a\" }, { name: \"B\", value: \"b\" }];\n\n    @property({ type: [\"Record\", [Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    test3: Record<string, number[]> = { \"a\": [1, 2, 3], \"b\": [4, 5, 6] };\n\n    @property([\"Record\", [Laya.Prefab]])\n    test4: Record<string, Laya.Prefab[]>;\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Group\nDESCRIPTION: This TypeScript code shows how to set the collision group of a Collider using the `collisionGroup` property and set the canCollideWith properties. The collision group is used for grouping colliders. The example code provided, sets xxx.collisionGroup = 1 << 3 (which is 8) and xxx.canCollideWith = 1 << 2 (which is 4), indicates that this collider belongs to the group with an ID of 3, and can collide with a collider whose group ID is 2.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/physics3D/CharacterController/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//用代码指定xxx碰撞器所属哪个碰撞组\nxxx.collisionGroup = 1 << 3  ;// 值为2 的 3 次幂（8），可以简单理解分组ID为3，这样就更容易与IDE中的概念统一\n\n//指定xxx碰撞器 可以与  某个碰撞组 发生碰撞\nxxx.canCollideWith = 1 << 2;  //只与分组ID为2的（值为4）分成发生碰撞\n\n//指定xxx碰撞器 可以与 多个碰撞组 发生碰撞\nxxx.canCollideWith = (1 << 1) | (1 << 2) | (1 << 5); //只与分组ID为1、2、5的进行碰撞\n\n//指定xxx碰撞器  不可以  与哪些组 发生碰撞，其它组都可以碰撞\nxxx.canCollideWith = -1 ^ (1 << 3) ^ (1 << 6)  //不与分组3、6进行碰撞，除3与6组之外都可以发生碰撞)\n```\n\n----------------------------------------\n\nTITLE: Controlling TextInput Component with TypeScript in LayaAir\nDESCRIPTION: This code demonstrates how to programmatically control a TextInput component after adding it through the LayaAir IDE. It shows how to modify various properties like position, size, font, color, and behavior options.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/TextInput/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class TextInputControl extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property( { type : Laya.TextInput } )\n    public txtin: Laya.TextInput;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.txtin.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        this.txtin.size(500, 60); //大小\n        this.txtin.pivot(this.txtin.width/2, this.txtin.height/2); //轴心点\n        this.txtin.font = \"宋体\"; //字体\n        this.txtin.fontSize = 50; //字体大小\n        this.txtin.color = \"#ff0000\"; //字体颜色\n        this.txtin.bold = true; //加粗\n        this.txtin.italic = true; //斜体\n        this.txtin.underline = true; //下划线\n        this.txtin.underlineColor = \"#ff0000\"; //下划线颜色\n        this.txtin.stroke = 5; //描边宽度\n        this.txtin.strokeColor = \"#000000\" ; //描边颜色\n        this.txtin.wordWrap = true; //自动换行\n        this.txtin.overflow = \"scroll\"; //文本溢出\n        // this.txtin.skin = \"atlas/comp/textinput.png\"; //皮肤\n        this.txtin.bgColor = \"#19a4f1\"; //背景颜色\n        this.txtin.borderColor = \"#f6ff03\" //边框颜色\n\n        this.txtin.editable = true; //可编辑状态\n        // this.txtin.type = \"password\"; //输入框类型\n        // this.txtin.maxChars = 5; //最大字符数\n        // this.txtin.restrict = \"12345\"; //输入限制\n        // this.txtin.prompt = \"请输入\"; //输入提示\n        // this.txtin.promptColor = \"#a9a9a9\"; //提示词颜色\n        // this.txtin.multiline = true; //文本域\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Screen Dimensions and Device Pixel Ratio Using Laya.Browser in TypeScript\nDESCRIPTION: This snippet provides getter and setter methods to obtain the logical width and height of the browser viewport, the physical screen width and height considering device pixel ratio, and the device pixel ratio itself. Key functionality includes fallback mechanisms for different browsers by prioritizing window and document properties, and adjustments for canvas rotation states in the LayaAir stage. The code requires the Laya.Browser class initialization method __init__ to set up properties correctly. Expected outputs are numeric values representing viewport and screen measurements, which aid in screen adaptation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Browser/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 浏览器窗口可视宽度。\n * 通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度) > document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。\n */\nstatic get clientWidth(): number {\n    Browser.__init__();\n    return Browser._clientWidth || Browser._window.innerWidth || Browser._document.body.clientWidth;\n}\n\nstatic set clientWidth(value: number) {\n    Browser._clientWidth = value;\n}\n\n/**\n * 浏览器窗口可视高度。\n * 通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度) > document.body.clientHeight(不包含滚动条高度) > document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。\n */\nstatic get clientHeight(): number {\n    Browser.__init__();\n    return Browser._clientHeight || Browser._window.innerHeight || Browser._document.body.clientHeight || Browser._document.documentElement.clientHeight;\n}\n\nstatic set clientHeight(value: number) {\n    Browser._clientHeight = value;\n}\n\n/** 浏览器窗口物理宽度。考虑了设备像素比。*/\nstatic get width(): number {\n    Browser.__init__();\n    return ((ILaya.stage && ILaya.stage.canvasRotation) ? Browser.clientHeight : Browser.clientWidth) * Browser.pixelRatio;\n}\n\n/** 浏览器窗口物理高度。考虑了设备像素比。*/\nstatic get height(): number {\n    Browser.__init__();\n    return ((ILaya.stage && ILaya.stage.canvasRotation) ? Browser.clientWidth : Browser.clientHeight) * Browser.pixelRatio;\n}\n\n/** 获得设备像素比。*/\nstatic get pixelRatio(): number {\n    if (Browser._pixelRatio < 0) {\n        Browser.__init__();\n        if (Browser.userAgent.indexOf(\"Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)\") > -1) Browser._pixelRatio = 2;\n        else {\n            Browser._pixelRatio = (Browser._window.devicePixelRatio || 1);\n            if (Browser._pixelRatio < 1) Browser._pixelRatio = 1;\n        }\n    }\n    return Browser._pixelRatio;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Data in LocalStorage using Laya.LocalStorage\nDESCRIPTION: This snippet demonstrates how to store and retrieve data using Laya.LocalStorage in LayaNative. It uses the `setItem()` method to store a string value with a specified key and the `getItem()` method to retrieve the value associated with the key.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LocalStrorage/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//存储指定键名和键值，字符串类型。\nLaya.LocalStorage.setItem(\"LayaBox\",\"游戏引擎！\");\n//获取指定键名的值。\nLaya.LocalStorage.getItem(\"LayaBox\");\n```\n\n----------------------------------------\n\nTITLE: Caching Sprites as Static Bitmaps in LayaAir\nDESCRIPTION: This example shows how to cache a sprite as a static bitmap for performance optimization. The cacheAs property with 'bitmap' value converts the sprite to a static image.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\nLaya.stage.addChild(sprite);\n//缓存为静态图像\nsprite.cacheAs = \"bitmap\"\n```\n\n----------------------------------------\n\nTITLE: Recycling an Object by Class Name in TypeScript\nDESCRIPTION: Recycles an object instance based on its class name, facilitating automatic management of object pools tied to class types, which simplifies object lifecycle handling in complex systems.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Pool/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic recoverByClass(instance: any): void {\n    if (instance) {\n        var className: string = instance[\"__className\"] || instance.constructor._$gid;\n        if (className) Pool.recover(className, instance);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript from Native Platforms in LayaNative\nDESCRIPTION: Code examples showing how to execute JavaScript code from native platforms (iOS/OC and Android/Java) using LayaNative. These snippets demonstrate how platform code can trigger JavaScript execution from the native side.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Secondary_Development/readme.md#_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n  [[conchRuntime GetIOSConchRuntime] runJS:@\"alert('hello')\"];\n```\n\nLANGUAGE: java\nCODE:\n```\n  ConchJNI.RunJS(\"alert('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Blinnphong Material Ball Example\nDESCRIPTION: This snippet demonstrates displaying a simple Blinnphong material ball. It involves passing world normals and surface color through Params. It uses PBR function and needs world normals.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Sorting Component Property Categories with Catalog Order in TypeScript\nDESCRIPTION: This code snippet demonstrates how to control the display order of component property categories in the LayaAir IDE using the `catalogOrder` parameter within the `@property` decorator. Lower values appear earlier in the list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\t@property({ type : \"number\", catalog:\"bb\", catalogOrder:1 })\n    a : number;\n\n    @property({ type: \"string\"})\n    b : string;\n\n    @property({ type: \"boolean\", catalog:\"adv\"})\n    c : boolean;\n\n    @property({ type: String, inspector: \"color\", catalog:\"adv\", catalogCaption:\"高级组件\", catalogOrder:0})\n    d: string;\n```\n\n----------------------------------------\n\nTITLE: Drawing Line Segments with Mouse Input\nDESCRIPTION: This snippet handles mouse events to draw line segments on a Sprite node using the Line2DRender component. It tracks mouse movements when the mouse button is pressed, and adds points to render the line.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/2DRender/Line2DRender/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 鼠标按下时开始绘制\n    onMouseDown(evt: Laya.Event): void {\n        this.isDrawing = true;\n        // 记录起始点\n        this.lastMousePos[0] = evt.stageX - this.owner.x;\n        this.lastMousePos[1] = evt.stageY - this.owner.y;\n    }\n\n    // 鼠标松开时停止绘制\n    onMouseUp(): void {\n        this.isDrawing = false;\n        this.lastMousePos.length = 0; // 清空上一次的点\n    }\n\n    // 鼠标移动时绘制线段（仅在按下时）\n    onMouseMove(evt: Laya.Event): void {\n        if (!this.isDrawing || this.lastMousePos.length === 0) return;\n\n        const x = evt.stageX - this.owner.x;\n        const y = evt.stageY - this.owner.y;\n\n        // 添加线段\n        this.line2DRender.addPoint(this.lastMousePos[0], this.lastMousePos[1], x, y);\n\n        // 更新最后一个点的坐标\n        this.lastMousePos[0] = x;\n        this.lastMousePos[1] = y;\n    }\n```\n\n----------------------------------------\n\nTITLE: Event Listener Removal in LayaAir Engine (off method)\nDESCRIPTION: Example of how to remove a specific event listener from an object using the off method in LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//持续侦听xxx对象的click点击事件\nthis.xxx.on(Laya.Event.CLICK, this, this.xxxOnClicked);\n\nxxxOnClicked():void{\n  //侦听到事件后的逻辑代码...\n}\n\n//删除xxx对象的click点击事件侦听器\nthis.xxx.off(Laya.Event.CLICK, this, this.xxxOnClicked);\n```\n\n----------------------------------------\n\nTITLE: Wrapping Steam Callback and Achievement Setting - C++\nDESCRIPTION: These C++ code snippets wrap the `SteamCallback` and `SetAchievement` functions for use in JavaScript.  `jsSteamCallback` calls the `SteamManager::GetInstance()->SteamCallback()` method. `jsSetAchievement` retrieves the `achievementID` argument from JavaScript, then calls `SteamManager::GetInstance()->SetAchievement(achievementID)`. Both functions convert the boolean result to an integer (1 for success, 0 for failure) for compatibility with JavaScript. They depend on `jsvm_value` and `jsvm_env` types defined within the LayaNative environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsSteamCallback(jsvm_env env, jsvm_callback_info info) {\n    SteamManager::GetInstance()->SteamCallback();\n    jsvm_value result;\n    JSVM_CALL_CHECK(jsvm_create_int32(env, 1, &result));\n    return result;\n}\n\njsvm_value jsSetAchievement(jsvm_env env, jsvm_callback_info info) {\n    size_t argc = 1;\n    jsvm_value args[1];\n    jsvm_value _this;\n    JSVM_CALL_CHECK(jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr));\n\n    bool success = SteamManager::GetInstance()->SetAchievement(achievementID);\n    jsvm_value result;\n    JSVM_CALL_CHECK(jsvm_create_int32(env, success ? 1 : 0, &result));\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating White Noise with Web Audio API in LayaAir (TypeScript)\nDESCRIPTION: Adapts the pure JavaScript white noise generation example for LayaAir using TypeScript. It accesses AudioContext via Laya.Browser.window, creates a white noise buffer, and plays it when the LayaAir stage is clicked using Laya.stage.on(Laya.Event.CLICK).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nvar audioCtx: any = new (Laya.Browser.window.AudioContext || Laya.Browser.window.webkitAudioContext)();\n//Stereo\nvar channels: number = 2;\n// Create an empty two-second stereo buffer at the\n// sample rate of the AudioContext\nvar frameCount: number = audioCtx.sampleRate * 2.0;\nvar myArrayBuffer: any = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nLaya.stage.on(Laya.Event.CLICK, this, function (): void {\n    // Fill the buffer with white noise;\n    //just random values between -1.0 and 1.0\n    for (var channel: number = 0; channel < channels; channel++) {\n        // This gives us the actual ArrayBuffer that contains the data\n        var nowBuffering: Object = myArrayBuffer.getChannelData(channel);\n        for (var i: number = 0; i < frameCount; i++) {\n            // Math.random() is in [0; 1.0]\n            // audio needs to be in [-1.0; 1.0]\n            nowBuffering[i] = Math.random() * 2 - 1;\n        }\n    }\n    // Get an AudioBufferSourceNode.\n    // This is the AudioNode to use when we want to play an AudioBuffer\n    var source: any = audioCtx.createBufferSource();\n    // set the buffer in the AudioBufferSourceNode\n    source.buffer = myArrayBuffer;\n    // connect the AudioBufferSourceNode to the\n    // destination so we can hear the sound\n    source.connect(audioCtx.destination);\n    // start the source playing\n    source.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Loading 3D Compressed Textures with Transparency Handling in LayaAir TypeScript\nDESCRIPTION: This snippet extends the loading of 3D compressed textures with handling for transparent textures on iOS. It uses platform detection to load PVRTC (.pvr) textures on iOS and sets the material render mode to transparent to properly blend alpha channels. On Android, ETC1 (.ktx) textures are loaded; other platforms fall back to PNG textures. This approach ensures correct rendering of transparent textures on supported platforms and maintains compatibility.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/VIP_Texture/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//检测iOS平台\nif(Laya.Browser.onIOS){\n\tLaya.loader.load(\"res/layabox.pvr\", Laya.Handler.create(null, function(tex:Laya.Texture2D) {\n\t\tmaterial.albedoTexture = tex;\n        //设置透明混合\n        material.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;\n\t}));\n} else if (Laya.Browser.onAndroid) {//检测安卓平台    \t\n        Laya.loader.load(\"res/layabox.ktx\", Laya.Handler.create(null, function (tex: Laya.Texture2D) {\n                material.albedoTexture = tex;\n        }));\n}else{\n    Laya.Texture2D.load(\"res/layabox.png\", Laya.Handler.create(null, function(tex:Laya.Texture2D) {\n\t material.albedoTexture = tex;\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Node.js Capabilities Within LayaAir Scene Scripts in TypeScript\nDESCRIPTION: Illustrates a recommended approach for using Node.js modules, such as 'fs', within LayaAir Script components by segregating code that relies on Node.js to a separate script running in the Scene process. The example shows a main Laya.Script class that triggers execution of Node-dependent code remotely via EditorEnv.scene.runScript to maintain compatibility across different runtime environments (UI vs. Scene). The dependency is on the EditorEnv API, and the node script file will be excluded from the final release build if unreferenced directly by Laya.Script classes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//Script.ts\n@Laya.regClass()\nclass Script extends Laya.Script {\n\n    wantToUseNode() {\n        EditorEnv.scene.runScript(\"TestSceneScript.visitNode\");\n    }\n}\n\n//TestSceneScript.ts\nimport fs from \"fs\";\n\n//注意是IEditorEnv.regClass，不是Laya.regClass!!\n@IEditorEnv.regClass()\nclass TestSceneScript {\n\n    static visitNode() {\n        fs.readFileSync(....)        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PointLight in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates how to programmatically add a PointLight to a LayaAir 3D scene using TypeScript. It requires the LayaAir 3D engine and assumes an initialized scene object (this.scene). The code creates a Sprite3D object, attaches a PointLightCom component, sets its color and range, and positions the light in 3D space. Inputs: none; Output: a configured PointLight attached to the scene. Limitations: requires LayaAir's TypeScript API, and assumes proper scene lifecycle management.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Light/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//创建点光源\nlet pointLight = new Laya.Sprite3D();\nlet pointCom = pointLight.addComponent(Laya.PointLightCom);\nthis.scene.addChild(pointLight);\n//点光源的颜色\npointCom.color = new Laya.Color(1.0, 0.5, 0.0, 1);\n//设置点光源的范围\npointCom.range = 3.0;\npointLight.transform.position = new Laya.Vector3(0.0, 1, 0.0);\n```\n\n----------------------------------------\n\nTITLE: Closing the webview programmatically - JavaScript\nDESCRIPTION: Demonstrates how to close a webview overlay by invoking the conch.closeExternalLink method. This code requires the conch native API provided by LayaNative and will fail if run in standard web environments without conch. No arguments are needed; the webview UI is dismissed instantly upon execution.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/webview/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconch.closeExternalLink();\n```\n\n----------------------------------------\n\nTITLE: Web Worker Task (XMLHttpRequest) - TypeScript\nDESCRIPTION: This TypeScript snippet shows the code that runs inside the Web Worker. It listens for messages from the main thread, performs an XMLHttpRequest to load a file, and sends the loaded data back to the main thread. This example illustrates offloading file loading to a background thread.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/useWorker/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nself.addEventListener('message', function (e) {\n    var xmlreq = new XMLHttpRequest();\n    xmlreq.responseType = \"text\";\n    xmlreq.onload = function (e) {\n        var data = e.currentTarget.response;\n        self.postMessage(data);\n    }\n    xmlreq.open(\"get\",\"../atlas/comp.atlas\");\n    xmlreq.send()\n}, false);\n```\n\n----------------------------------------\n\nTITLE: Specifying Shader Type as Shader3D - TypeScript\nDESCRIPTION: Demonstrates specifying the shader type explicitly as 'Shader3D' within the Shader3D configuration. This property indicates the shader category and lays foundation for possible future support of other types such as Compute Shader. Currently, only 'Shader3D' type is supported by LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n\ttype:Shader3D\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Using Frame-Based Repeating Timer Callback in LayaAir Script (TypeScript)\nDESCRIPTION: Shows an implementation of a repeating timer in a class's onAwake method, decreasing an image's alpha by 0.1 every 60 frames with Laya.timer.frameLoop. Designed for use with the LayaAir framework, this approach enables smooth animation or property changes over time.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //每60帧后，图片的透明度减少0.1\n        Laya.timer.frameLoop(60, this, () => {\n            this.Image.alpha -= 0.1;\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Calling Functions in Functions\nDESCRIPTION: This explains how to call other functions from within a custom function in Shader Blueprints, by using the context menu to add a node that references a previously created function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Controlling Video Playback with LayaAir VideoNode in TypeScript\nDESCRIPTION: This script demonstrates how to programmatically control the playback of a VideoNode in a LayaAir scene. It defines a custom component that reacts to mouse clicks, loads the video file asynchronously, and initiates video playback. Dependencies include LayaAir Engine and a valid video file resource path. The main property, 'video', should be linked to a VideoNode in the scene; the input is a mouse interaction, and output is video playback. The video will not auto-play on browsers due to policy constraints, requiring user interaction.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/VideoNode/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.VideoNode })\n    public video: Laya.VideoNode;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 鼠标点击触发播放\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, () => {\n            Laya.loader.load(\"resources/layaAir.mp4\").then(() => {\n                this.video.play(); //播放视频\n            });\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling and Creating Hidden File Input Elements in LayaAir with TypeScript\nDESCRIPTION: This snippet creates a hidden file input element that accepts only PNG image files. It uses CSS opacity and filter styles to make the element transparent and positions it absolutely with a set width and height to align with a custom UI button. This technique enables the developer to replace the default file input appearance with a styled element while retaining the file input's functionality. The snippet requires basic DOM manipulation via Laya.Browser.document and familiarity with CSS positioning and transparency properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建隐藏的file并且把它和按钮对齐。达到位置一致，这里我们默认在0点位置\nvar file:any = Laya.Browser.document.createElement(\"input\");\n//设置file样式\nfile.style=\"filter:alpha(opacity=0);opacity:0;width: 150px;height:60px;\";\nfile.type =\"file\";//设置类型是file类型。\nfile.accept=\"image/png\";//设置文件的格式为png；\nfile.style.position =\"absolute\";\nfile.style.zIndex = 999;\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Grass Example - Vertex Shader\nDESCRIPTION: This is a description of a grass shader blueprint, that uses a vertex shader section to generate noise for the model. It uses Perlin noise, and transformation to alter the model's x and z coordinates. It requires a world matrix for the effect.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Specifying Inspector Control for String as Color in TypeScript\nDESCRIPTION: This code snippet demonstrates how to force a string property to be displayed as a color input in the LayaAir IDE using the `inspector: \"color\"` parameter within the `@property` decorator. This is useful when a string property represents a color value and you want to provide a color picker interface.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n//显示为颜色输入（如果类型是Laya.Color，则不需要这样定义，如果是字符串类型，则需要）\n@property({ type: String, inspector: \"color\"})\ncolor: string;\n```\n\n----------------------------------------\n\nTITLE: Defining uniformMap and styles in LayaAir Shader - GLSL\nDESCRIPTION: Demonstrates how to simplify uniformMap definitions by moving detailed UI-related attributes to a separate styles block, improving clarity. It provides examples of defining uniform variables with types and defaults, then associating captions, ranges, and UI properties separately in styles. This pattern separates shader data logic from UI configuration.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_7\n\nLANGUAGE: glsl\nCODE:\n```\n    uniformMap:{\n        u_Number: { type: Float, default:0, alias:\"数字\",  range:[0,100], fractionDigits: 2 }\n    },\n```\n\nLANGUAGE: glsl\nCODE:\n```\n    uniformMap:{\n        u_Number: { type: Float, default:0 }\n    },\n    styles: {\n        u_Number: { caption:\"数字\", range:[0,100], fractionDigits: 2 }\n    },\n```\n\n----------------------------------------\n\nTITLE: Playing Animator State from Specific Time in TypeScript\nDESCRIPTION: Illustrates how to use the `Animator.play()` method to start an animation state (\"Stand\") from a specific normalized time (0.5 or 50%). This is useful for beginning playback partway through the animation clip. Assumes `this.animator` references a Laya.Animator instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//动画状态机，直接播放Stand动画状态，从50%的位置开始\nthis.animator.play(\"Stand\", 0 , 0.5);\n```\n\n----------------------------------------\n\nTITLE: Loading Subpackage Resources (Root Directory) in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates loading assets (PrefabImpl) located within subpackages ('sub1', 'sub2') that are direct children of the assets root directory in a LayaAir project targeting Taobao Mini Games. Uses `Laya.loader.load` with the relative path from the root.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/tbgame/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n        Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n            // ......\n        });\n\n        Laya.loader.load(\"sub2/Sphere.lh\").then((res: Laya.PrefabImpl) => {\n            // ......\n        });\n```\n\n----------------------------------------\n\nTITLE: Using Command Line to Execute Build Scripts in LayaAirIDE\nDESCRIPTION: Demonstrates how to run specific platform build scripts via command line by specifying the project path and script method. This enables automated or batch building of projects for targeted platforms by invoking corresponding static methods in the script class.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/commandLine/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 构建web\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildWeb\n// 构建微信小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildWxgame\n// 构建抖音小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildBytedancegame\n// 构建oppo小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildOppogame\n// 构建vivo小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildVivogame\n// 构建小米快游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildXmgame\n// 构建支付宝小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.buildAlipaygame\n// 构建淘宝小游戏\n>LayaAirIDE --project=C:\\Users\\ASUS\\Desktop\\LayaProject --script=MyScript.tbgame\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Font from Local Assets in JavaScript (LayaAir 3.1+)\nDESCRIPTION: This snippet demonstrates how to register a local font file from the assets directory using conch.readFileFromAsset and conch.registerFont functions. It registers the font with the name 'layabox', enabling its use in subsequent UI elements. Dependencies include the conch API for file reading and font registration, and it assumes a proper font file exists at 'font/layabox.ttf'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/built_in_font/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction registerFont() {\n    var assetFontData = conch.readFileFromAsset('font/layabox.ttf', 'raw');\n    if (assetFontData) {\n        if (conch.registerFont(\"layabox\", assetFontData)) {\n            log('字体注册成功');\n        }\n        else {\n            log('字体注册失败');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix type declarations in GLSL - GLSL\nDESCRIPTION: Provides examples of declaring GLSL matrices including 4x4 identity matrix, and 2x2, 3x3 matrices initialized with columns or explicit float values. These declarations exemplify basic matrix initialization for transformation use.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_10\n\nLANGUAGE: glsl\nCODE:\n```\nmat4 marixt4x4 = mat4(1.0); // marixt4x4 = { 1.0, 0.0, 0.0, 0.0, \n                            //                0.0, 1.0, 0.0, 0.0 \n                            //                0.0, 0.0, 1.0, 0.0                    \n                            //                0.0, 0.0, 0.0, 1.0 }\n mat2 matrix2x2 = mat2(coll1, col2);     \n mat3 matrix3x3 = mat3(0.0, 0.0, 0.0,   // 第一列\n                      0.0, 0.0, 0.0,   // 第二列\n                      0.0, 0.0, 0.0);  // 第三列\n```\n\n----------------------------------------\n\nTITLE: Adding a Cone-Shaped Rigidbody Collider in LayaAir 3D with TypeScript\nDESCRIPTION: This code example illustrates how to programmatically create a cone-shaped rigidbody collider in LayaAir using TypeScript. The snippet details the creation of a 3D sprite node, adding mesh filter and renderer components with a cone primitive mesh, material setup, random positioning, and attaching a Rigidbody3D component with a ConeColliderShape. Dependencies include LayaAir 3D engine modules like Sprite3D, MeshFilter, MeshRenderer, Rigidbody3D, and PrimitiveMesh. Inputs include random radius and height values to define the cone collider shape, while outputs are scene-integrated 3D objects with physical rigidbody colliders. Note that this snippet is part of a larger scene setup and assumes 'this.scene' and 'this.tmpVector' are defined and available.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*…≡省略若干代码…*/\n\n/**增加圆锥形刚体碰撞器 */\nprivate addCone(): void {\n    //生成随机值半径和高\n    let raidius = Math.random() * 0.2 + 0.2;\n    let height = Math.random() * 0.5 + 0.8;\n    //创建圆锥形3D模型节点对象\n    let cone = new Laya.Sprite3D;\n    let coneMesh = cone.addComponent(Laya.MeshFilter);\n    let coneRender = cone.addComponent(Laya.MeshRenderer);\n    // 创建网格\n    coneMesh.sharedMesh = Laya.PrimitiveMesh.createCone(0.25, 0.75);\n    // 创建材质\n    let coneMaterial: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();\n    coneRender.sharedMaterial = coneMaterial;\n    //把圆锥形3D节点对象添加到3D场景节点下\n    this.scene.addChild(cone);\n    //设置随机位置\n    this.tmpVector.setValue(Math.random() * 6 - 2, 6, Math.random() * 6 - 2);\n    cone.transform.position = this.tmpVector;\n    //为圆锥形3D节点对象创建刚体碰撞器\n    let _rigidBody = <Laya.Rigidbody3D>(cone.addComponent(Laya.Rigidbody3D));\n    //创建圆锥形碰撞器形状（使用节点对象的值，保持一致性）\n    let coneShape = new Laya.ConeColliderShape(raidius, height);\n    //为刚体碰撞器添加碰撞器形状\n    _rigidBody.colliderShape = coneShape;\n}\n\n/*…≡省略若干代码…*/\n```\n\n----------------------------------------\n\nTITLE: Using defines and styles for UI-only properties in LayaAir Shader - GLSL\nDESCRIPTION: Shows how to define Boolean shader defines for conditional compilation and control their UI visibility via styles. Defines are declared with default values in defines block. The styles block assigns captions and inspector configurations, including null to hide some defines from the UI, and also defines properties solely for UI interaction that do not correspond to uniform or define variables.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_8\n\nLANGUAGE: glsl\nCODE:\n```\n    defines: {\n        RAIN : { type: Bool, default: true },\n        SNOWY : { type: Bool, default: false }\n    },\n\n    styles: {\n        RAIN : { caption: \"下雨\", inspector : null }, //inspector为null，不显示在属性面板\n        SNOWY : { caption: \"下雪\"},\n\n        // 定义不属于uniform和define的属性\n        weather : { caption:\"天气\", inspector: RadioGroup, options: { members: [RAIN, SNOWY] }}\n    },\n```\n\n----------------------------------------\n\nTITLE: Get Resource Description with TypeScript\nDESCRIPTION: This TypeScript snippet shows how to asynchronously retrieve resource description information using `Addressables.getLocationAsync`. It takes a key (string or string array) to filter the resources and an optional merge mode. It returns a promise of `ResourceLocation[]` which contains the description information.  This method does not load the resources themselves.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取资源的描述信息列表\n * @param keys 用来筛选资源的关键字列表\n * @param mode 合并模式\n * @returns {Promise<ResourceLocation[]>}\n */\nstatic async getLocationAsync(key: string | string[], mode?: MergeMode): Promise<ResourceLocation[]>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree Component with Custom Data Structure in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Tree component by creating a custom XML data structure. It shows creating folder nodes with children, setting open states, and assigning labels to tree items. The implementation uses a Script component with the Tree component referenced as a property.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Tree/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Tree })\n    public tree: Laya.Tree;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        //初始化树状列表的数据源\n        let treeData: string = \"<data>\";\n        //给Tree列表赋值\n        treeData +=\n            \"<dir label='box1' isOpen='true'>\" +\n            \"<file label='child1 ' />\" +\n            \"<file label='child2 ' />\" +\n            \"<file label='child3 ' />\" +\n            \"<file label='child4 ' />\" +\n            \"<file label='child5 ' />\" +\n            \"</dir>\" +\n            \"<dir label='box2' isOpen='false'>\" +\n            \"<file label='child1 ' />\" +\n            \"<file label='child2 ' />\" +\n            \"<file label='child3 ' />\" +\n            \"<file label='child4 ' />\" +\n            \"<file label='child5 ' />\" +\n            \"</dir>\" +\n            \"<dir label='box3' isOpen='true'>\" +\n            \"<file label='child1 ' />\" +\n            \"<file label='child2 ' />\" +\n            \"<file label='child3 ' />\" +\n            \"<file label='child4 ' />\" +\n            \"<file label='child5 ' />\" +\n            \"</dir>\" ;\n        //数据源data标签，需要拼接一个结束标签\n        treeData += \"</data>\";\n\n        //把字符串解析为xml对象并返回\n        this.tree.xml = new Laya.XML(treeData);\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the A* Grid from a Texture\nDESCRIPTION: This function generates a grid representation for the A* algorithm from a texture. The texture's pixel data is read, and a 2D array (`aStarArr`) is created where each element represents a grid cell. This grid is later used by the A* algorithm to find the path, with pixels determining whether a grid cell is walkable or not.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nprivate createGridFromAStarMap(texture): any {\n        var textureWidth = texture.width;\n        var textureHeight = texture.height;\n        var pixelsInfo = texture.getPixels();\n        var aStarArr = [];\n        var index = 0;\n        for (var w = 0; w < textureWidth; w++) {\n            var colaStarArr = aStarArr[w] = [];\n            for (var h = 0; h < textureHeight; h++) {\n                var r = pixelsInfo[index++];\n                var g = pixelsInfo[index++];\n                var b = pixelsInfo[index++];\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Loading Progress with loadingView.loading() in JavaScript\nDESCRIPTION: Allows developers to manually control the loading progress display by setting loadingAutoClose to false and updating progress percentage values via loadingView.loading(nPercent) where nPercent ranges from 0 to 100. LoadingView closes automatically when the value reaches 100. This snippet requires placing loadingAutoClose = false in config.js and removing the automatic hideLoadingView call in hideSplashScreen. The example demonstrates tracking image loading events and incrementing progress accordingly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/loading_view_new/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.loadingView = new loadingView();\nif(window.loadingView)\n{\n    window.loadingView.loadingAutoClose=false; // 设置值为false，开发者手动控制加载界面的关闭\n    ...\n}\n\n// Example pseudocode for updating loading progress on images\nvar nPercent=0;\nvar image1 = document.createElement('img');\nimage1.onload=function()\n{\n    if(window.loadingView){\n        nPercent+=33;\n        window.loadingView.loading(nPercent);\n    }\n}\nimage1.src = \"a.png\";\n\nvar image2 = document.createElement('img');\nimage2.onload=function()\n{\n    if(window.loadingView){\n        nPercent+=33;\n        window.loadingView.loading(nPercent);\n    }\n}\nimage2.src = \"b.png\";\n\nvar image3 = document.createElement('img');\nimage3.onload=function()\n{\n    if(window.loadingView){\n        nPercent+=33;\n        window.loadingView.loading(nPercent);\n    }\n}\nimage3.src = \"c.png\";\n```\n\n----------------------------------------\n\nTITLE: Creating HSlider with Code in LayaAir (TypeScript)\nDESCRIPTION: This code shows how to create an HSlider component programmatically in LayaAir using TypeScript. It loads required skin resources, instantiates the `Laya.HSlider` class, sets its properties (skin, width, position, min, max, value, tick), and adds an event handler to track value changes. This code requires the `hslider.png` and `hslider$bar.png` resources to be available in the project's assets.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/HSlider/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_HSlider extends Laya.Script {\n\n    constructor() {\n        super();\n    }\n\n    onAwake(): void {\n        let skins: any[] = [];\n        skins.push(\"hslider.png\", \"hslider$bar.png\");//图片资源来自“引擎API使用示例”\n        Laya.loader.load(skins, Laya.Handler.create(this, this.placeHSlider));\n    }\n\n    private placeHSlider(): void {\n        let hs: Laya.Slider = new Laya.HSlider();\n        hs.skin = \"hslider.png\";\n\n        hs.width = 300;\n        hs.pos(50, 500);\n        hs.min = 0;\n        hs.max = 100;\n        hs.value = 50;\n        hs.tick = 1;\n\n        hs.changeHandler = new Laya.Handler(this, this.onChange);\n        this.owner.addChild(hs);\n    }\n\n    private onChange(value: number): void {\n        console.log(\"滑块的位置：\" + value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating DCC via Pack File (TypeScript)\nDESCRIPTION: Shows how to apply updates using a pack file via the `updateByPack` method of `LayaDCCClient`. This method takes the pack file (as a URL or an ArrayBuffer) and an optional unpacker class (`DCCPackR`) that corresponds to the packer used during generation (e.g., `PackRaw`). Requires an initialized `LayaDCCClient` and the relevant unpacker implementation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n    dcc.updateByPack(buffer, DCCPackR);\n```\n\n----------------------------------------\n\nTITLE: Initializing DCC in LayaNative Environment (JavaScript)\nDESCRIPTION: JavaScript example for setting up LayaDCC within the LayaNative environment (typically in the project's `index.js`). It requires the `layadcc.js` module, creates a `LayaDCCClient`, sets the DCC server URL, root file URL, and mapped path, initializes the client, and then injects it into the native download flow using `injectToNative3`. The instances are often exposed globally for debugging or further use.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar appUrl = \"http://stand.alone.version/index.js\";\nvar dccHead = \"http://10.10.20.26:6666/head.json\";\nvar dccUrl = null;\nvar mapToDCC = null;\nlet layadcc = require('layadcc.js').layadcc;\nlet dcc = new layadcc.LayaDCCClient(dccUrl || getBaseUrl(dccHead));\ndcc.pathMapToDCC = mapToDCC || getBaseUrl(appUrl);\ndcc.init(dccHead, null).then((ok) => {\n    if (ok) {\n        //如果初始化成功，接管native的下载流程\n        dcc.injectToNative3();\n    }\n    window.layadcc = layadcc;\n    window.dcc = dcc;\n    loadApp(conch.presetUrl || appUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Orientation Programmatically - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to programmatically set the screen orientation in a LayaNative application. It takes a string representing the desired orientation as input, maps it to a numerical value based on predefined constants, and then applies the new orientation using the `conchConfig.setScreenOrientation()` function. If the input string does not match predefined orientations, the default portrait mode (0) is applied. This function relies on a global `conchConfig` object, which is assumed to be available in the LayaNative environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/screen_orientation/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setOrientation(s) {\n    var nameToVal = {\n        landscape: 0, portrait: 1, user: 2, behind: 3, sensor: 4, nosensor: 5, sensor_landscape: 6, sensorLandscape: 6,\n        sensor_portrait: 7, sensorPortrait: 7, reverse_landscape: 8, reverseLandscape: 8, reverse_portrait: 9, reversePortrait: 9, full_sensor: 10, fullSensor: 10,\n    };\n    var nOri = (function (name) {\n        try {\n            var n = nameToVal[name];\n            return n || 0;\n        }\n        catch (e) {\n            return 0;\n        }\n    })(s);\n    conchConfig.setScreenOrientation(nOri);\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Recovering Bullet Example in LayaAir\nDESCRIPTION: Example showing how to return a bullet to the object pool when it's no longer needed, typically after its lifecycle ends (like hitting a target or going off-screen).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.Pool.recover(\"Bullet\", bullet);\n```\n\n----------------------------------------\n\nTITLE: Converting A* Path Nodes to World Coordinates in TypeScript\nDESCRIPTION: Defines the 'getRealPosition' function, which takes the A* start node and the calculated path (an array of grid nodes) and converts them back into world space coordinates (x, z). It calculates the center of each grid cell in world space and stores the result in the 'resPath' array.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 得到世界坐标系下的真实坐标\n */\nprivate getRealPosition(start, path): any {\n    this.resPathLength = path.length;\n    var minX = this.terrainSprite.minX;\n    var minZ = this.terrainSprite.minZ;\n    var cellX = this.terrainSprite.width / this.aStarMap.width;\n    var cellZ = this.terrainSprite.depth / this.aStarMap.height;\n    var halfCellX = cellX / 2;\n    var halfCellZ = cellZ / 2;\n\n    this.resPath[0].x = start.x * cellX + halfCellX + minX;\n    this.resPath[0].y = start.y * cellZ + halfCellZ + minZ;\n\n    if (this.resPath.length < path.length) {\n        var diff: number = path.length - this.resPath.length;\n        for (var j: number = 0; j < diff; ++j) {\n            var newPoint: Vector2 = new Vector2();\n            this.resPath.push(newPoint);\n        }\n\n    }\n\n    for (var i = 1; i < path.length; i++) {\n        var gridPos = path[i];\n        this.resPath[i].x = gridPos.x * cellX + halfCellX + minX;\n        this.resPath[i].y = gridPos.y * cellZ + halfCellZ + minZ;\n    }\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse Event Handlers - TypeScript\nDESCRIPTION: These are empty handler functions for various mouse events in LayaAir. Each function takes a Laya.Event object as input and can be implemented to handle specific mouse interactions, like clicks, drags, or entering/leaving a node.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\t//鼠标按下时执行\n    onMouseDown(evt: Laya.Event): void {\n    }\n\n    //鼠标抬起时执行\n    onMouseUp(evt: Laya.Event): void {\n    }\n\n    //鼠标右键或中键按下时执行\n    onRightMouseDown(evt: Laya.Event): void {\n    }\n\n    //鼠标右键或中键抬起时执行\n    onRightMouseUp(evt: Laya.Event): void {\n    }\n\n    //鼠标在节点上移动时执行\n    onMouseMove(evt: Laya.Event): void {\n    }\n\n    //鼠标进入节点时执行\n    onMouseOver(evt: Laya.Event): void {\n    }\n\n    //鼠标离开节点时执行\n    onMouseOut(evt: Laya.Event): void {\n    }\n\n    //鼠标按住一个物体后，拖拽时执行\n    onMouseDrag(evt: Laya.Event): void {\n    }\n\n    //鼠标按住一个物体，拖拽一定距离，释放鼠标按键后执行\n    onMouseDragEnd(evt: Laya.Event): void {\n    }\n\n    //鼠标点击时执行\n    onMouseClick(evt: Laya.Event): void {\n    }\n\n    //鼠标双击时执行\n    onMouseDoubleClick(evt: Laya.Event): void {\n    }\n\n    //鼠标右键点击时执行\n    onMouseRightClick(evt: Laya.Event): void {\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Laya.timer.runCallLater in a Component (TypeScript)\nDESCRIPTION: Example showing Laya.timer.runCallLater. A function hideImage is scheduled with callLater, then immediately executed and removed using runCallLater. This results in the function running once in the current frame.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //延迟一帧执行hideImage\n        Laya.timer.callLater(this, this.hideImage);\n        //当前帧立即执行hideImage，执行后删除定时器\n        Laya.timer.runCallLater(this, this.hideImage);\n    }\n\n    hideImage(): void {\n        console.log(\"hideImage\");\n        this.Image.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Tab Component Programmatically\nDESCRIPTION: This TypeScript code demonstrates how to create a Tab component programmatically in LayaAir. It includes loading skins, setting properties such as position, colors, labels, and handling the select event. It also illustrates adding the created Tab instance to the display list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Tab/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Tab extends Laya.Script {\n\n\t// 图片资源来自“引擎API使用示例”\n    private skins: any[] = [\"resources/res/ui/tab1.png\", \"resources/res/ui/tab2.png\"];\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n\t\tLaya.loader.load(this.skins).then( ()=>{\n            this.onLoadComplete();\n        } );\n\t}\n\n\tprivate onLoadComplete(e: any = null): void {\n\t\tlet tabA: Laya.Tab = this.createTab(this.skins[0]);\n\t\ttabA.pos(40, 120);\n\t\ttabA.labelColors = \"#000000,#d3d3d3,#333333\";\n\n\t\tlet tabB: Laya.Tab = this.createTab(this.skins[1]);\n\t\ttabB.pos(40, 220);\n\t\ttabB.labelColors = \"#FFFFFF,#8FB299,#FFFFFF\";\n\t}\n\n\tprivate createTab(skin: string): Laya.Tab {\n\t\tlet tab: Laya.Tab = new Laya.Tab();\n\t\ttab.skin = skin;\n\t\ttab.labelBold = true;\n\t\ttab.labelSize = 20;\n\t\ttab.labelStrokeColor = \"#000000\";\n\t\ttab.labels = \"Tab Control 1,Tab Control 2,Tab Control 3\";\n\t\ttab.selectedIndex = 1;\n\t\tthis.onSelect(tab.selectedIndex);\n\t\ttab.selectHandler = new Laya.Handler(this, this.onSelect);\n\t\tthis.owner.addChild(tab);\n\t\treturn tab;\n\t}\n\n\tprivate onSelect(index: number): void {\n\t\tconsole.log(\"当前选择的标签页索引为 \" + index);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: 通过代码动态创建和控制LayaAir Clip组件（TypeScript）\nDESCRIPTION: 该示例展示如何用TypeScript在LayaAir中动态创建Clip组件，加载资源，设置其动画属性，通过计时器每秒更新时间数字，实现倒计时效果。示例还包括暂停与播放功能的实现，方便在游戏中实时控制动画播放。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Clip/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_Clip extends Laya.Script {\n\n    private buttonSkin: string = \"resources/res/ui/button-7.png\";\n    private clipSkin: string = \"resources/res/ui/num0-9.png\";\n    private bgSkin: string = \"resources/res/ui/coutDown.png\";\n\n    counter: any;\n    controller: any;\n    currFrame: any;\n\n    onAwake(): void {\n        Laya.loader.load([this.buttonSkin, this.clipSkin, this.bgSkin]).then( ()=>{\n            this.onSkinLoaded();\n        } );\n    }\n\n    private onSkinLoaded(e: any = null): void {\n        this.showBg();\n        this.createTimerAnimation();\n        this.showTotalSeconds();\n        this.createController();\n    }\n\n    private showBg(): void {\n        var bg: Laya.Image = new Laya.Image(this.bgSkin);\n        bg.size(224, 302);\n        bg.pos(Laya.stage.width - bg.width >> 1, Laya.stage.height - bg.height >> 1);\n        this.owner.addChild(bg);\n    }\n\n    private createTimerAnimation(): void {\n        this.counter = new Laya.Clip(this.clipSkin, 10, 1);\n        this.counter.autoPlay = true;\n        this.counter.interval = 1000;\n        this.counter.x = (Laya.stage.width - this.counter.width) / 2 - 35;\n        this.counter.y = (Laya.stage.height - this.counter.height) / 2 - 40;\n        this.owner.addChild(this.counter);\n    }\n\n    private showTotalSeconds(): void {\n        var clip: Laya.Clip = new Laya.Clip(this.clipSkin, 10, 1);\n        clip.index = clip.clipX - 1;\n        clip.pos(this.counter.x + 60, this.counter.y);\n        this.owner.addChild(clip);\n    }\n\n    private createController(): void {\n        this.controller = new Laya.Button(this.buttonSkin, \"暂停\");\n        this.controller.labelBold = true;\n        this.controller.labelColors = \"#FFFFFF,#FFFFFF,#FFFFFF,#FFFFFF\";\n        this.controller.size(84, 30);\n\n        this.controller.on('click', this, this.onClipSwitchState);\n\n        this.controller.x = (Laya.stage.width - this.controller.width) / 2;\n        this.controller.y = (Laya.stage.height - this.controller.height) / 2 + 110;\n        this.owner.addChild(this.controller);\n    }\n\n    private onClipSwitchState(e: any = null): void {\n        if (this.counter.isPlaying) {\n            this.counter.stop();\n            this.currFrame = this.counter.index;\n            this.controller.label = \"播放\";\n        }\n        else {\n            this.counter.play();\n            this.counter.index = this.currFrame;\n            this.controller.label = \"暂停\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Rays from Camera on Mouse Click in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to handle mouse clicks to cast a ray from the camera's viewpoint into the 3D scene. It uses `camera.viewportPointToRay` to generate the ray based on mouse coordinates and `scene.physicsSimulation.rayCastAll` to detect intersections. Upon detecting a hit, it creates a new box `MeshSprite3D` at the intersection point. This function is intended to be called from a mouse down event listener, likely within a script attached to the camera or a scene controller.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Camera/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\t//在CameraControll.ts类下的onStart()方法中，加入鼠标按下监听\n\t//Laya.stage.on(Laya.Event.MOUSE_DOWN,this, this.onMouseDown);\n\t\n\t\n\t//鼠标点下事件，处理发射射线，检测碰撞物体\n\tonMouseDown(e: Laya.Event) {\n\n        let point = new Laya.Vector2();\n\t\tpoint.x = Laya.stage.mouseX;\n        point.y = Laya.stage.mouseY;\n\t\t//产生射线\n        let ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\n\t\tthis.camera.viewportPointToRay(point,ray);\n\t\t//拿到射线碰撞的物体\n        let outs : any[] = [];\n\t\tthis.scene.physicsSimulation.rayCastAll(ray,outs);\n\t\t//如果碰撞到物体\n\t\tif (outs.length !== 0)\n\t\t{\n\t\t\tfor (let i = 0; i <  outs.length; i++){\n\t\t\t\t//在射线击中的位置添加一个立方体\n                let box = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1));\n                box.transform.position = new Laya.Vector3(outs[i].point.x, outs[i].point.y, outs[i].point.z);\n                this.scene.addChild(box);\n            }\n\t\t\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Drawing in Scene View with IEditorEnv in TypeScript\nDESCRIPTION: Defines a custom editor for a Script1 component, utilizing IEditorEnv.Gizmos and Handles to draw shapes and icons directly in the scene view, enabling interactive scene editing.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n@regClass()\nexport class Script1 extends Laya.Script {\n    declare owner : Laya.Sprite3D;\n}\n//TestCustomEditor.ts\n\n@IEditorEnv.customEditor(Script1)\nexport class TestCustomEditor extends IEditorEnv.CustomEditor {\n    declare owner: Laya.Sprite3D;\n\n    onSceneGUI(): void {\n        IEditorEnv.Handles.drawHemiSphere(this.owner.transform.position, 2);\n    }\n    \n    onDrawGizmos(): void {\n        IEditorEnv.Gizmos.drawIcon(this.owner.transform.position, \"editorResources/UI/ready1.png\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ASTC Texture Compression Metadata in fileconfig.json (JSON)\nDESCRIPTION: This snippet demonstrates a variant of the fileconfig.json produced after configuring Android and iOS output to use ASTC_6x6 texture compression in LayaAir. The JSON structure records per-platform selections, so Android and iOS will use the compressed ktx format, while PC defaults to the original PNG asset. Key elements include 'files' (resources), 'config' (per-asset compression and file associations), and 'platforms' mapping. Familiarity with the asset pipeline and target hardware support for ASTC is required. Input: export with ASTC_6x6 for Android/iOS in the IDE. Output: JSON linking .ktx and .png assets for proper platform dispatch at runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/textureCompress/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files\": {\n        \"resources\": [\n            \"layabox.png\"\n        ]\n    },\n    \"config\": [\n        {\n            \"sRGB\": true,\n            \"filterMode\": 1,\n            \"mipmap\": true,\n            \"pma\": false,\n            \"files\": [\n                {\n                    \"file\": \"\",\n                    \"ext\": \"png\",\n                    \"format\": 1\n                },\n                {\n                    \"file\": \"1\",\n                    \"ext\": \"ktx\",\n                    \"format\": 19\n                }\n            ],\n            \"platforms\": {\n                \"0\": 0,\n                \"1\": 1,\n                \"2\": 1\n            },\n            \"t\": 0,\n            \"i\": 0\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with fillText() Method in LayaAir Engine (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the fillText() method to draw styled text on a sprite's graphics context. It includes parameter explanations such as position, font, color, and alignment. The example shows creating a sprite, drawing centered red text, and adding it to the display list.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n// Drawing text\nsp.graphics.fillText(\"LayaAir\", 100, 100, \"20px Arial\", \"#ff0000\", \"center\");\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: 用 drawEllipse() 方法绘制椭圆形\nDESCRIPTION: 本文描述了如何调用 drawEllipse 方法实现椭圆图形绘制。参数包括偏移位置、宽高、颜色与线宽。通过设定不同宽高参数，轻松绘制出不同尺寸的椭圆。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Defining Shader Name\nDESCRIPTION: This code snippet shows how to define a name for the shader. This name is for organizational purposes within the engine to differentiate various shader functionalities and effects. It is crucial for referencing the shader in the engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nShader3D Start\n{\n\t//此处ShaderName为Shader的名字，非.shader文件名字，实际为Shader3D对象的名称\n\tname: ShaderName \n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Scene From Loaded Resources\nDESCRIPTION: This code loads and initializes the 3D scene from a LayaAir scene file. It also prepares the scene for pathfinding by hiding the walkable area model.  It loads the 'XunLongShi.ls' file and adds it as a child to the stage. Subsequently, it makes the height map invisible and initializes the `MeshTerrainSprite3D` using a height map. This requires that the scene file and heightmap be pre-loaded.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nthis.scene = (<Scene3D>Laya.stage.addChild(Loader.createNodes(\"res/threeDimen/scene/TerrainScene/XunLongShi.ls\")));\n\n        //根据场景中方块生成路径点\n        this.initPath(this.scene);\n\n        //获取可行走区域模型\n        var meshSprite3D: MeshSprite3D = (<MeshSprite3D>this.scene.getChildByName('Scenes').getChildByName('HeightMap'));\n        //使可行走区域模型隐藏\n        meshSprite3D.active = false;\n        var heightMap = Loader.getTexture2D(\"res/threeDimen/scene/TerrainScene/Assets/HeightMap.png\");\n        //初始化MeshTerrainSprite3D\n        this.terrainSprite = MeshTerrainSprite3D.createFromMeshAndHeightMap((<Mesh>meshSprite3D.meshFilter.sharedMesh), heightMap, 6.574996471405029, 10.000000953674316);\n        //更新terrainSprite世界矩阵(为可行走区域世界矩阵)\n        this.terrainSprite.transform.worldMatrix = meshSprite3D.transform.worldMatrix;\n```\n\n----------------------------------------\n\nTITLE: Loading Resources with Type Specification in LayaAir Engine using TypeScript\nDESCRIPTION: Example showing how to load resources with explicit type specification, useful for URLs without extensions or resources that need to be processed differently than their default type.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Loader/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        //下面的URL未来可能会失效，仅用于示例参考\n        this.loadHTMLImage(\"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\");\n    }\n\n    /** 加载URL无后缀资源 */\n    loadHTMLImage(url: string): void {\n        Laya.loader.load(url, Laya.Loader.IMAGE).then((res: Laya.Texture) => {\n            let sp = new Laya.Sprite();\n            sp.texture = res;\n            this.owner.addChild(sp);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Nodes Description\nDESCRIPTION: This segment defines camera-related nodes such as viewDirection, cameraPosition, cameraDirection, cameraUp, cameraNear, and cameraFar with explanations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Accessing Component-Type Properties and Modifying Particle System in LayaAir with TypeScript\nDESCRIPTION: Illustrates using @property with a component type (Laya.ShurikenParticleRenderer) to expose component references. Inside onAwake, transforms are modified via the component's owner Sprite3D node, and the particle system's simulationSpeed is adjusted. It highlights constraints where direct usage of some particle-related types is unsupported by the IDE, thus the component or node must be referenced for manipulation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property( { type : Laya.ShurikenParticleRenderer } ) //组件类型\n    public p3dRenderer: Laya.ShurikenParticleRenderer;\n\n    onAwake(): void {\n\n        (this.p3dRenderer.owner as Laya.Sprite3D).transform.localPosition = new Laya.Vector3(0,5,5);\n        this.p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Assets from Subpackages with Name Changes\nDESCRIPTION: This code snippet shows how to load assets when the subpackage names are changed in `game.json` file. It uses Laya.loader.load with the changed subpackage name instead of the path. It is crucial when dealing with multi-level directories within the subpackages.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/tbgame/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n        Laya.loader.load(\"subname1/Cube.lh\").then((res) => {\n            // ......\n        });\n\n        Laya.loader.load(\"subname2/Sphere.lh\").then((res) => {\n            // ......\n        });\n```\n\n----------------------------------------\n\nTITLE: Inspector Layout Using ResourceInspectorLayout for Real-Time Sync (TypeScript)\nDESCRIPTION: Defines a custom inspector UI layout for assets by extending IEditor.ResourceInspectorLayout and registering with @IEditor.inspectorLayout. All changes in the UI are instantly applied to the in-memory resource, affecting the current scene in real time. No parameters or dependencies beyond asset type matching; output is immediate feedback and change propagation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditor.inspectorLayout(\"asset\")\nexport class DemoInspectorLayout extends IEditor.ResourceInspectorLayout {\n    constructor() {\n        super();\n    }\n\n    accept(asset: IEditor.IAssetInfo): boolean {\n        return asset.ext === \"abc\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Native Web Worker\nDESCRIPTION: This JavaScript snippet demonstrates how to create a new Web Worker instance, attach a message handler, and send a message to start the worker. It requires a separate JavaScript file (e.g., my_task.js) to be specified as the worker's script. The worker communicates back to the main thread through the postMessage API.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/useWorker/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myWorker = new Worker(\"js/my_task.js\");\nmyWorker.onmessage = function (oEvent) {\n\tconsole.log(\"Called back by the worker!\\n\");\n};\nmyWorker.postMessage(\"start\"); // start the worker.\n```\n\n----------------------------------------\n\nTITLE: Updating All DCC Resources Centrally (TypeScript)\nDESCRIPTION: Demonstrates using the `updateAll` method of an initialized `LayaDCCClient` to download all resources associated with the current DCC version specified during `init`. This is useful for pre-loading all required assets. A progress callback function can be provided to monitor the download.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet dcc = new DCCClient('http://localhost:7788/' );\ndcc.pathMapToDCC= 'http://localhost:8899/';\nlet initok = await dcc.init('http://localhost:7788/version.3.0.0.json',null);\nawait dcc.updateAll((p)=>{/*进度提示*/})\n```\n\n----------------------------------------\n\nTITLE: Defining Defines in Shader\nDESCRIPTION: Demonstrates the use of defines to create conditional shader instructions, enabling different branches of code based on the state of boolean macros. This allows for runtime control of shader effects and supports interactive controls within the material's property panel.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nuniformMap:{\n        //修改u_AlbedoTexture1时同时define A\n        u_AlbedoTexture1: { type: Texture2D, define: A },\n        //修改u_AlbedoTexture2时同时define A和B\n        u_AlbedoTexture2: { type: Texture2D, define: [A,B] }\n    },\n        \n\tdefines: {\n        A : { type: Bool },\n        B : { type: Bool },\n        C : { type: Bool }\n    },\n```\n\n----------------------------------------\n\nTITLE: Material Mapping Setting LayaAir3-IDE\nDESCRIPTION: Details the function of 'material mapping table', which is generated automatically after extraction. Developers can modify material mapping relationships manually.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_17\n\nLANGUAGE: other\nCODE:\n```\n提取完成后，会自动把提取的材质关联到材质映射表，如图6-2所示。当然，开发者也可以手动选择更改材质映射关系。\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in LayaAir\nDESCRIPTION: Demonstrates how to remove event listeners using the off method, which requires specifying the event type, execution scope, and listener function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//持续侦听xxx对象的click点击事件\nthis.xxx.on(Laya.Event.CLICK, this, this.xxxOnClicked);\n\nxxxOnClicked():void{\n  //侦听到事件后的逻辑代码...\n}\n\n//删除xxx对象的click点击事件侦听器\nthis.xxx.off(Laya.Event.CLICK, this, this.xxxOnClicked);\n```\n\n----------------------------------------\n\nTITLE: Executing npm Scripts to Generate Protobuf Output Files in Shell\nDESCRIPTION: Runs the npm scripts sequentially: first the `pbjs` script compiles the `.proto` definitions into a static JavaScript module, then the `pbts` script generates the TypeScript declaration files from that module. Outputs are saved in the specified source directory, enabling immediate consumption in the TypeScript project.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run pbjs\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run pbts\n```\n\n----------------------------------------\n\nTITLE: 通过代码触发Trigger参数触发动画转变\nDESCRIPTION: 调用Animator的setParamsTrigger方法，激活Trigger参数以切换动画状态。示例中通过触发\"Trigger\"参数，执行绑定的状态转移操作，常用于事件驱动的动画控制。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.setParamsTrigger( \"Trigger\" );\n```\n\n----------------------------------------\n\nTITLE: Advanced Property Decorator Usage with Nested Arrays and Dictionaries in TypeScript\nDESCRIPTION: Examples demonstrating how to use complex data structures with property decorators in LayaAir, including nested arrays, dictionaries, and dynamic dropdown menus.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property([[\"string\"]])\n    test1: string[][] = [[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\"]];\n\n    @property([[\"Record\", \"string\"]])\n    test2: Array<Record<string, string>> = [{ name: \"A\", value: \"a\" }, { name: \"B\", value: \"b\" }];\n\n    @property({ type: [\"Record\", [Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    test3: Record<string, number[]> = { \"a\": [1, 2, 3], \"b\": [4, 5, 6] };\n\n    @property([\"Record\", [Laya.Prefab]])\n    test4: Record<string, Laya.Prefab[]>;\n```\n\n----------------------------------------\n\nTITLE: Implementing DebugPanel for UI Redraw Detection\nDESCRIPTION: Code snippet showing how to initialize the DebugPanel in LayaAir to detect and monitor UI redraws, which helps developers determine if a UI component is being frequently redrawn and whether caching is appropriate.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/cacheAs/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDebugPanel.init();\n```\n\n----------------------------------------\n\nTITLE: 资源发布配置文件示例 - JSON\nDESCRIPTION: 该JSON配置文件示例为LayaAir发布目录中的资源属性描述文件，包含资源的色彩空间设置（sRGB）、纹理封装模式（wrapMode）、过滤模式（filterMode）、各类资源级别参数及发布平台目标设置。文件用于指导IDE或运行时正确加载资源。无依赖，直接作为发布资源目录的元数据存在，输入为资源文件及平台标识，输出为可供引擎解析的资源配置信息。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/generalSetting/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sRGB\": true,\n  \"wrapMode\": 0,\n  \"filterMode\": 1,\n  \"anisoLevel\": 0,\n  \"readWrite\": false,\n  \"mipmap\": false,\n  \"pma\": true,\n  \"hdrEncodeFormat\": 0,\n  \"files\": [\n    {\n      \"file\": \"\",\n      \"ext\": \"png\",\n      \"format\": 1\n    }\n  ],\n  \"platforms\": {\n    \"0\": 0,\n    \"1\": 0,\n    \"2\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Canvas Container in LayaAir\nDESCRIPTION: TypeScript example showing how to hide the canvas container in a LayaAir project. This technique allows developers to hide the game canvas while showing only DOM elements.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.Browser.container.style.display = \"none\";\n```\n\n----------------------------------------\n\nTITLE: Creating In-Code Internationalization Translations - TypeScript\nDESCRIPTION: Illustrates how to create internationalization data directly within the code using `gui.Translations.create` with a unique ID. Translations for different languages are added using `setContent`, providing key-value pairs. The `t` method is shown with a default value for fallback.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n//The first parameter needs to be globally unique\nlet myI18n = gui.Translations.create(\"LodSimplify\");\nmyI18n.setContent(\"zh-CN\", {\n    meshRate : \"模型压缩比例\",\n    meshRateTips : \"根据设置的比例对模型网格进行压缩2x\"\n});\n\nEditor.typeRegistry.addTypes([\n{\n    name: \"LodSimplifyData\",\n    properties: [\n        {\n            name: \"meshRate\",\n            type : \"number\",\n            caption: myI18n.t(\"meshRate\", \"Mesh Rate\"),\n            tips: myI18n.t(\"meshRateTips\", \"Compress the model mesh based on the set ratio.\"),\n        }\n     ]\n }\n]);\n```\n\n----------------------------------------\n\nTITLE: Loading Internationalization Translations - TypeScript\nDESCRIPTION: Demonstrates how to load pre-configured internationalization data from a `.i18ns` file within the plugin's initialization (`@IEditor.onLoad`). The loaded translation object (`gui.Translations`) is stored in a variable for later use in accessing translated strings.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyI18n: gui.Translations;\n\n@IEditor.onLoad\nasync onLoad() {\n    myI18n = await gui.UIPackage.resourceMgr.load(\"editorResources/i18nSettings.i18ns\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Decorator Control Examples in TypeScript\nDESCRIPTION: Examples of various property decorator controls including hiding, readonly, validation, password fields, and dropdown controls in LayaAir.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n\t//隐藏控制\n    @property({ type: Boolean })\n    a: boolean;\n    @property({ type: String, hidden: \"!data.a\" })//将条件表达式!data.a放在了字符串中，如果a为true（在IDE中为勾选状态），则!data.a返回false，此时hidden属性表示的是显示\n    hide: string = \"\";\n\n\t// 只读控制\n    @property({ type: Boolean })\n    b: boolean;\n    @property({ type: String, readonly: \"data.b\" })//将条件表达式data.b放在了字符串中，如果b为true（在IDE中为勾选状态），则data.b就返回true，此时readonly属性表示只读\n    read: string = \"\";\n\n\t//数据检查机制\n    @property(String)\n    text1: string;\n    @property({ type: String, validator: \"if (value == data.text1) return '不能与a值相同' \" })\n    text2: string = \"\";\n\n\t//密码输入\n    @property({ type: String, password: true })\n    password: string;\n\n\t//如果true或者缺省，文本输入每次输入都提交；否则只有在失焦时才提交\n    @property({ type: String, submitOnTyping: false })\n    submit: string;\n\n\t//输入文本的提示信息\n    @property({ type: \"text\", prompt: \"文本提示信息\" })\n    prompt: string;\n\n\t//显示为下拉框\n    @property({ type: Number, enumSource: [{name:\"Yes\", value:1}, {name:\"No\",value:0}] })\n    enumsource: number;\n\n\t//反转布尔值\n    @property({ type: \"boolean\", reverseBool: true })\n\treverseboolean : boolean;\n\t\n\t//允许null值\n    @property({ type: String, nullable: true })\n    nullable: string;\n\n\t//控制数字输入的精度和范围\n    @property({ type: Number, range:[0,5], step: 0.5, fractionDigits: 3 })\n    range : number;\n\n\t//显示为百分比\n    @property({ type: Number, range:[0,1], percentage: true })\n    percent : number;\n\n\t//固定数组长度\n    @property({ type: [\"number\"], fixedLength: true })\n    arr1: number[];\n\n\t//数组允许的操作\n    @property({ type: [\"number\"], arrayActions: [\"delete\", \"move\"] })\n    arr2: number[];\n\n    //使数组元素编辑时限制最大值和最小值\n    @property({ type: [Number], elementProps: { range: [0, 100] } })\n    array1: Array<Number>;\n    //如果是多维数组，则elementProps同样需要使用多层\n    @property({ type: [[Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    array2: Array<Array<Number>>;\n\n\t//不提供透明度a值的修改\n    @property({ type: Laya.Color, showAlpha: false })\n    color1: Laya.Color;\n\n\t//颜色类型时，defaultColor定义一个非null时的默认值\n    @property({ type: String, inspector: \"color\", defaultColor: \"rgba(217, 232, 0, 1)\" })\n    color2: string;\n\n\t//显示一个checkbox决定颜色是否为null\n    @property({ type: Laya.Color, colorNullable: true })\n    color3: Laya.Color;\n\n\t//加载Image资源类型，设置资源路径格式\n    @property({ type: String, isAsset: true, assetTypeFilter: \"Image\" })\n    resource: string;\n\n    //x属性出现在testposition属性之前\n    @property({ type: String })\n    x: string;\n    //可以用position人为将testposition属性安排在x属性之前显示\n    @property({ type: String, position: \"before x\" })\n    testposition: string;\n\n\t//增加缩进，单位是层级\n    @property({ type: String, addIndent:1 })\n    indent1: string;\n    @property({ type: String, addIndent:2 })\n    indent2: string;\n\n    //当属性改变时，调用名称为onChangeTest的函数\n    @property({ type: Boolean, onChange: \"onChangeTest\"})\n    change: boolean;\n    onChangeTest() {\n        console.log(\"onChangeTest\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Defineds Configuration Example - JSON\nDESCRIPTION: This JSON snippet provides an example of how to configure defines properties for shader export. `uName` specifies the Unity property name, `layaName` specifies the corresponding LayaAir property name, `from` specifies where the defined value comes from, and `deflat` is the default value.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Unity/readme.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uName\": unity 属性名,\n    \"layaName\": layaair 属性名,\n    \"from\": 0:浮点数，1：keyWorld，2：材质是否有属性，3：是否有贴图,\n    \"deflat\": 对应属性检查\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Collision Category and Mask in LayaAir3 Physics - TypeScript\nDESCRIPTION: These snippets show how to assign collision categories and masks to a physics object (xxx) in LayaAir3 using TypeScript. Setting category determines which collision group the body belongs to using bitwise operations; mask configures which groups it can collide with. The mask can be set for individual or multiple collision groups using bitwise OR, or excluded via bitwise XOR with -1. No direct output is produced, but these affect runtime collision behavior. Prerequisites: A physics object instance and understanding of category/mask bitmask logic.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics2D/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//用代码指定xxx碰撞体所属哪个碰撞类别（组）\nxxx.category = 1 << 3  ;// 值为2 的 3 次幂（8），可以简单理解分组ID为3，这样就更容易与IDE中的概念统一\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//直接指定xxx碰撞体 可以与  某个碰撞类别（组） 发生碰撞\nxxx.mask = 1 << 2;  //只与分组ID为2的（值为4）分成发生碰撞\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//通过 按位或，指定xxx碰撞体 可以与 多个碰撞类别（组） 发生碰撞\nxxx.mask = (1 << 1) | (1 << 2) | (1 << 5); //只与分组ID为1、2、5的进行碰撞\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//通过异或运算指定xxx碰撞体  不可以  与哪些类别（组） 发生碰撞，其它 类别（组） 都可以碰撞\n//用-1去异或运算任何2的N次幂值，得到的结果再与该幂值进行按位与运算，一定是为0，也就是不可以碰撞的。\nxxx.mask = -1 ^ (1 << 3) ^ (1 << 6)  //不与分组3、6进行碰撞，除3与6组之外都可以发生碰撞)\n```\n\n----------------------------------------\n\nTITLE: Grouping Component Properties in LayaAir IDE Using @classInfo Decorator in TypeScript\nDESCRIPTION: This snippet illustrates how to group multiple properties inside the IDE's inspector panel by passing a properties array to the @classInfo decorator. Each group specifies a name, inspector type \"Group\", member properties included in the group, and optionally a position relative to other properties. This feature aids readability and organization for scripts with many exposed properties. Input consists of string properties a, b, c, d, e with b and c grouped under \"Group1\".\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo({\n    properties: [\n        {\n            name: \"Group1\",\n            inspector: \"Group\",\n            options: {\n                members: [\"b\", \"c\"]\n            },\n            position: \"after a\"\n        }\n    ]\n})\nexport class NewScript extends Laya.Script {\n\n    @property(String)\n    public a: string = \"\";\n\n    @property(String)\n    public b: string = \"\";\n\n    @property(String)\n    public c: string = \"\";\n\n    @property(String)\n    public d: string = \"\";\n\n    @property(String)\n    public e: string = \"\";\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JS Messages on Android using Java\nDESCRIPTION: Provides static methods handleSyncMessage and handleAsyncMessage in Java for processing messages originating from JS. Synchronous handler returns a string result, while the asynchronous handler triggers a callback with the result. Both log input parameters using Android's logging mechanism and produce hardcoded responses for recognized event names. To be implemented in app/src/main/java/demo/HandleMessageUtils.java; depends on a custom HandleMessageCallback interface/type for asynchronous completion. Requires eventName, data, and (for async) a callback object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/platform_communication/readme.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic static String handleSyncMessage(String eventName, String data) {\n    Log.d(LOG_TAG, eventName +\" \" + data);\n    if (eventName.equals(\"syncMessage\")) {\n        return \"sync message from platform\";\n    }\n    return \"default sync result\";\n}\npublic static void handleAsyncMessage(String eventName, String data, HandleMessageCallback cb) {\n    Log.d(LOG_TAG, eventName +\" \" + data);\n    if (eventName.equals(\"asyncMessage\")) {\n        cb.callback(\"async message from platform\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Display Names to Property Categories in LayaAir Component Using TypeScript\nDESCRIPTION: This snippet extends property categorization by assigning a localized display name to a property category using the 'catalogCaption' parameter in the @property decorator. It modifies the 'd' property to appear under the 'adv' category, but with a user-friendly caption called \"高级组件\" (Advanced Component). This improves the interface clarity by allowing category names to be more meaningful to the user. It relies on the same dependencies and assumptions as other LayaAir property decorators.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property({ type: String, inspector: \"color\" ,catalog:\"adv\", catalogCaption:\"高级组件\"})\n    d: string;\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - PBR Material Example\nDESCRIPTION: This snippet showcases a PBR material using a shader blueprint and describes common shader attributes like NormalWS, alphaTest, AlbedoColor, Metallica, Smoothness, Occlusion, Emission, Anisotropy, and Alpha. It's a fragment shader (fs) component. It involves calculating light reflections from world coordinates.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Loading Multiple Images Using Addressables in LayaAir (TypeScript)\nDESCRIPTION: Illustrates loading several image assets via the Addressables plugin, accessing their runtime paths, and adding them to the current scene. Dependencies include the LayaAir engine and corresponding image resource aliases set up in the plugin. The key parameter is an array of resource identifiers. The loadImage() method loads assets with a specified MergeMode, retrieves resource locations, and setImage() instantiates each image at defined positions and sizes. Input: array of image keys; output: images rendered in the Laya scene. Note: Addressables.getLocationAsync retrieves asset paths without loading data; actual images are loaded by Addressables.loadAssetsAsync.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/apply/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n@regClass()\nexport class LoadImage extends Laya.Script {\n\n    key: string[] = [\"test1\"];\n    resourceLocation: ResourceLocation[] = [];\n\n    onStart(): void {\n        this.loadImage(this.key);\n    }\n\n    async loadImage(key: string[]){\n        //加载资源\n        await Addressables.loadAssetsAsync(this.key, { mode: MergeMode.Union });\n        //获取资源地址\n        this.resourceLocation = await Addressables.getLocationAsync(this.key, MergeMode.Union);\n        this.setImage();\n    }\n\n    //将图片添加到场景中\n    setImage(): void{\n        let imageJPG: Laya.Image = new Laya.Image(this.resourceLocation[0].path);\n        imageJPG.pos(165, 62.5);\n        imageJPG.size(300, 200);\n        this.owner.addChild(imageJPG);\n\n        let imagePNG: Laya.Image = new Laya.Image(this.resourceLocation[1].path);\n        imagePNG.pos(600, 62.5);\n        imagePNG.size(300, 200);\n        this.owner.addChild(imagePNG);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding File Extension\nDESCRIPTION: This code defines a file extension override for resource exports, useful to support certain web servers and game environments that may not support specific file extensions.  This maps the original file extension to a new one.  It is important to note that developers must still reference the original extension in code when loading the resource. Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.fileExtensionOverrides[\"abc\"] = \"abc.json\";\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring ComboBox with Code in LayaAir\nDESCRIPTION: This code snippet shows how to create a ComboBox component programmatically and set its properties in LayaAir. It loads an image resource, creates a new ComboBox instance, sets the label size, item size, adds the ComboBox as a child to the owner, sets auto size, and the position of the component.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/ComboBox/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_ComboBox extends Laya.Script {\n\n    private skin: string = \"resources/res/ui/combobox.png\";//资源来自“引擎API使用示例”\n    pageWidth: number;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        Laya.loader.load(this.skin).then(() => {\n            let ComboBox: Laya.ComboBox = new Laya.ComboBox(this.skin, \"item0,item1,item2,item3,item4,item5\");\n            ComboBox.labelSize = 30;\n            ComboBox.itemSize = 25\n            this.owner.addChild(ComboBox);\n            ComboBox.autoSize = true;\n            ComboBox.pos(200, 200);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Performance Panel\nDESCRIPTION: This snippet displays the performance panel, which is useful for monitoring the application's performance and identifying potential bottlenecks. The `Stat.show()` function makes the performance statistics visible on the screen. This is usually used for debugging and performance tuning.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nStat.show();\n```\n\n----------------------------------------\n\nTITLE: Including A* Library in HTML\nDESCRIPTION: Shows how to include the downloaded 'astar.js' library file within the project's 'index.html' file using a script tag. This makes the A* library globally accessible.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"astar.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Material Extraction Setting LayaAir3-IDE\nDESCRIPTION: Provides an explanation of how to extract the materials inside models. If you don't need to change the model data frequently, you can only extract the materials and change the material map.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_16\n\nLANGUAGE: other\nCODE:\n```\n前文曾提到，模型内部的材质是无法修改的。我们给予了提取资源内部模型的建议。如果不经常对模型数据进行更改，我们也可以不提取模型，只提取材质，通过材质映射表来关联需要修改的材质。\n```\n\n----------------------------------------\n\nTITLE: Defining Camera Target Properties in LayaAir TypeScript\nDESCRIPTION: This code defines properties for a camera controller script in LayaAir, specifying three target Sprite3D objects that the camera can look at. It also defines an up vector that will be used for camera orientation when using the lookAt method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Camera/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    @property( { type: Laya.Sprite3D } )\n    public target1: Laya.Sprite3D;\n    @property({ type: Laya.Sprite3D })\n    public target2: Laya.Sprite3D;\n    @property({ type: Laya.Sprite3D })\n    public target3: Laya.Sprite3D;   \n    private _up = new Laya.Vector3(0, 1, 0);    \n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Interface and Importing Native DLL in LayaAir - TypeScript\nDESCRIPTION: Defines a TypeScript interface to describe the native DLL function 'nativeAdd', and imports it using Laya.importNative. This enables strong typing and IntelliSense for the extension functions. Requires LayaAir project with the DLL placed in the assets/src directory. Input to 'nativeAdd' is two numbers, output is their summed result from the native C++ code. This pattern ensures type-safe integration of native code with TypeScript scripts.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/extension/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ITestLib {\n    nativeAdd(a: number, b: number): number;\n}\n\nexport const testLib: ITestLib = Laya.importNative(\"LayaExt.dll\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declarations of Internal File System Functions for LayaNative\nDESCRIPTION: Declares three internal TypeScript functions to synchronously read and write files on the local filesystem. fs_readFileSync returns file contents as an ArrayBuffer, fs_writeFileSync writes string or ArrayBuffer data and returns a success boolean, and readFileSync reads files as strings with specified encoding. These low-level functions support resource update mechanisms requiring direct file access and modification. They are internal APIs subject to change and should be used carefully.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/zipUpdate/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare var fs_readFileSync:(file:string)=>ArrayBuffer;\ndeclare var fs_writeFileSync:(file:string,data:string|ArrayBuffer)=>boolean;\ndeclare var readFileSync:(file:string,encode:string)=>string;//这个直接返回字符串。\n```\n\n----------------------------------------\n\nTITLE: Measuring Time Intervals with LayaPerf in TypeScript\nDESCRIPTION: This code demonstrates how to use the `perf_begin` and `perf_end` methods to measure the execution time of a code block. It simulates CPU usage within the `onUpdate` method. The code starts the timer with `perf_begin`, executes a loop to simulate work, and ends the timer with `perf_end`. The tag 'time2' must be registered beforehand using `regTimeTag`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    onUpdate(): void {\n        this.perfMain.perf_begin(\"time2\");\n        const targetDuration = 2; // 目标持续时间（毫秒）\n        const startTime = performance.now(); // 使用性能高精度时间标记\n\n        // 一个简单的计数循环，用于占用CPU时间\n        // 初始值和增量的大小可能需要调整以匹配大约2ms的执行时间\n        let count = 0;\n        while (performance.now() - startTime < targetDuration) {\n            count++;\n        }\n        this.perfMain.perf_end(\"time2\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Resources\nDESCRIPTION: This code illustrates how to implement custom saving for resources within the LayaAir IDE, which is done with `@IEditorEnv.regAssetSaver` decorator.  The `onSave` method handles serializing the resource data and writing it to a file. Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n//AssetSaver只在IDE内使用，不会发布到最终的游戏中\n\n@IEditorEnv.regAssetSaver([\"abc\"])\nexport class DemoAssetSaver implements IEditorEnv.IAssetSaver {\n    async onSave(asset: IEditorEnv.IAssetInfo, res: ABCResource): Promise<any> {\n        //SerializeUtil是一个可以将组件序列化为json的工具类，直接使用最方便\n        let data = IEditorEnv.SerializeUtil.encodeObj(res, null, { writeType: false });\n        await IEditorEnv.utils.writeJsonAsync(EditorEnv.assetMgr.getFullPath(asset), data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bullet Component Script in TypeScript\nDESCRIPTION: Example of a `Bullet` component script in TypeScript, extending `Laya.Script`. It utilizes lifecycle methods (`onEnable`, `onUpdate`, `onDisable`) and a physics event method (`onTriggerEnter`) to manage bullet behavior, including setting initial velocity, handling collisions, checking boundaries, and implementing object pooling via `Laya.Pool`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n/**\n * 子弹脚本，实现子弹飞行逻辑及对象池回收机制\n */\n @regClass()\nexport default class Bullet extends Laya.Script {\n    constructor() { super(); }\n\n    onEnable(): void {\n        //设置初始速度\n        let rig: Laya.RigidBody = this.owner.getComponent(Laya.RigidBody);\n        rig.setVelocity({ x: 0, y: -10 });\n    }\n\n    onTriggerEnter(other: any, self: any, contact: any): void {\n        //如果被碰到，则移除子弹\n        this.owner.removeSelf();\n    }\n\n    onUpdate(): void {\n        //如果子弹超出屏幕，则移除子弹\n        if ((this.owner as Laya.Sprite).y < -10) {\n            this.owner.removeSelf();\n        }\n    }\n\n    onDisable(): void {\n        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销\n        Laya.Pool.recover(\"bullet\", this.owner);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LayaDCCClient Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for the LayaDCCClient class, showing available methods and properties for working with DCC resources programmatically.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class LayaDCCClient{\n    \n    onlyTransUrl:boolean;\n    //映射到dcc目录的地址头，如果没有，则按照http://*/算，所有的请求都裁掉主机地址\n    pathMapToDCC:string;\n    \n    /**\n     * \n     * @param frw 文件访问接口，不同的平台需要不同的实现。如果为null，则自动选择网页或者native两个平台\n     * @param dccurl dcc的服务器地址\n     */\n    constructor(dccurl:string, frw:new ()=>IGitFSFileIO|null, logger:ICheckLog=null)\n\n    enableLog(b:boolean)\n    \n    /**\n     * 初始化，下载必须信息 \n     * @param headfile dcc根文件，这个文件作为入口，用来同步本地缓存。如果为null则仅仅使用本地缓存\n     * @param cachePath 这个暂时设置为null即可 \n     * @returns \n     */\n    async init(headfile:string|null,cachePath:string):Promise<boolean>;\n    \n    /**\n     * 当前缓存中是否缓存了某个文件\n     *\n     */\n    async hasFile(url: string):Promise<boolean>;\n\n    /**\n     *  读取缓存中的一个文件，url是相对地址\n     * @param url 用户认识的地址。如果是绝对地址，并且设置是映射地址，则计算一个相对地址。如果是相对地址，则直接使用\n     * @returns \n     */\n    async readFile(url:string):Promise<ArrayBuffer|null>\n\n    /**\n     * 把一个原始地址转换成cache服务器对象地址\n     * @param url 原始资源地址\n     * @returns \n     */\n    async transUrl(url:string)\n\n    /**\n     * 与DCC服务器同步本版本的所有文件。\n     * 可以用这个函数来实现集中下载。\n     * \n     * @param progress 进度回调，从0到1\n     * 注意：在开始同步之前可能会有一定的延迟，这期间会进行目录节点的下载。不过目前的实现这一步在init的时候就完成了\n     * \n     */\n    async updateAll(progress:(p:number)=>void);\n        \n    /**\n     * 根据指定的zip文件更新本地缓存。\n     * 这个zip文件可以通过DCC插件的补丁生成工具来生成。\n     * \n     * 这个会修改本地保存的root\n     * @param zipfile 打补丁的zip文件，注意这里必须是本地目录，所以需要自己实现下载zip到本地之后才能调用这个函数。\n     * @param progress 进度提示，暂时没有实现。\n     */\n    async updateByZip(zipfile:string,zipClass:new()=>IZip, progress:(p:number)=>void);\n\n    /**\n     * 利用一个pack文件更新，这个pack包含idx,文件内容。\n     * @param pack :一个url或者buffer\n     * @param unpacker :解包类。把包文件内容解开成一个列表\n     */\n    async updateByPack(pack: string | ArrayBuffer, unpacker?: new () => IDCCPackR);\n\n    /**\n     * 遍历所有的节点。\n     * 包括没有下载的\n     */\n    async visitAll(treecb: (cnode: TreeNode,entry:TreeEntry) => Promise<void>, blobcb: (entry: TreeEntry) => Promise<void>)；\n\n    /**\n     * 清理缓存。\n     * 根据根文件遍历所有本版本依赖的文件，删除不属于本版本的缓存文件\n     */\n     async clean()\n     \n    //插入到laya引擎的下载流程，实现下载的接管\n    injectToLaya();\n    //取消对laya下载引擎的插入\n    removeFromLaya();\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Serialization with @property() in TypeScript\nDESCRIPTION: This example demonstrates controlling property serialization using the `serializable` option within the `@property()` decorator's configuration object. Setting `serializable` to `false` prevents the property from being saved to the scene or prefab file. The example illustrates converting angle values to radians, storing the radians, but only displaying angles in the IDE without serialization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number })\n    _radian: number = 0;  //带下划线的属性，默认不会出现在IDE的属性面板上，只是用来存储输入的弧度\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) //这里设置serializable为false，所以degree不会被保存到场景文件中\n     get degree() {\n        return this._radian * (180 / Math.PI);//由于自己没有序列化保存，需要把_radian存下来的弧度反算回角度，用于IDE属性面板显示\n    }\n    set degree(value: number) {\n        this._radian = value * (Math.PI / 180);//把输入的角度值，转成弧度给_radian存起来。\n    }\n    \n    onStart() {\n        console.log(this._radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Detection Properties in LayaAir\nDESCRIPTION: TypeScript code listing the environment detection properties available in the Laya.Browser class. These boolean properties allow developers to determine the current runtime environment including device type, browser, and platform.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** 表示是否在移动设备，包括IOS和安卓等设备内。*/\nstatic onMobile: boolean;\n/** 表示是否在 IOS 设备内。*/\nstatic onIOS: boolean;\n/** 表示是否在 Mac 设备。*/\nstatic onMac: boolean;\n/** 表示是否在 IPhone 设备内。*/\nstatic onIPhone: boolean;\n/** 表示是否在 IPad 设备内。*/\nstatic onIPad: boolean;\n/** 表示是否在 Android 设备内。*/\nstatic onAndroid: boolean;\n/** 表示是否在 QQ 浏览器内。*/\nstatic onQQBrowser: boolean;\n/** 表示是否在移动端 QQ 或 QQ 浏览器内。*/\nstatic onMQQBrowser: boolean;\n/** 表示是否在 Safari 内。*/\nstatic onSafari: boolean;\n/** 表示是否在 Chrome 内 */\nstatic onChrome: boolean;\n/** 表示是否在 IE 浏览器内*/\nstatic onIE: boolean;\n/** 表示是否在 微信 内*/\nstatic onWeiXin: boolean;\n/** 表示是否在 PC 端。*/\nstatic onPC: boolean;\n/** 微信小游戏 **/\nstatic onMiniGame: boolean;\n/** 小米小游戏 **/\nstatic onKGMiniGame: boolean;\n/** OPPO小游戏 **/\nstatic onQGMiniGame: boolean;\n/** VIVO小游戏 **/\nstatic onVVMiniGame: boolean;\n/** 抖音小游戏*/\nstatic onTTMiniGame: boolean;\n/** @private */\nstatic onFirefox: boolean;//TODO:求补充\n/** @private */\nstatic onEdge: boolean;//TODO:求补充\n/** @private */\nstatic onLayaRuntime: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Dependencies for ASTAR in Node.js (JSON)\nDESCRIPTION: This snippet shows a sample package.json file after initializing a project using npm and installing the astar-typescript package as a dependency. It is required for npm-based imports of astar modules in LayaAir projects. The dependencies section ensures that astar-typescript will be available in node_modules for TypeScript import. Only standard npm properties are included.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/importJsLibrary/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"test\": \"bin/bundle.js\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"astar-typescript\": \"^1.2.5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Instancing with enableInstancing Flag in Shader3D - TypeScript\nDESCRIPTION: Shows how to toggle GPU instancing support in a Shader3D configuration by setting 'enableInstancing' boolean flag. Instancing allows drawing multiple instances of the same geometry efficiently with a single draw call, significantly improving rendering of many repeated objects like grass blades. 'enableInstancing:true' enables this feature, whereas 'false' disables it. This switch modifies shader behavior and rendering pipeline usage accordingly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n\t....\n    enableInstancing:true,\n    ....\n\t....\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Color State Evaluation Using RGBA Values in JavaScript\nDESCRIPTION: This snippet retrieves the alpha component of a pixel from an array and uses its RGBA components to assign binary states to a separate array indicating whether the pixel is fully white and opaque. It requires an input array 'pixelsInfo' holding pixel data in sequential RGBA format and the variables 'r', 'g', 'b', and 'index' pre-defined. The snippet outputs updates to 'colaStarArr' based on the pixel's color, where 1 represents a fully white pixel with full opacity and 0 otherwise.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/Astar/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = pixelsInfo[index++];\nif (r == 255 && g == 255 && b == 255 && a == 255)\n    colaStarArr[h] = 1;\nelse {\n    colaStarArr[h] = 0;\n}\n}\n};\nreturn aStarArr;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Section Statistics with LayaPerf in TypeScript\nDESCRIPTION: This snippet demonstrates how to use `section_begin` and `section_end` methods of the LayaPerf class to mark sections for performance statistics. It initializes the LayaPerf plugin, waits for 8 and 9 seconds respectively, and then starts and ends a section with the tag \"MainSection1\". The statistics for this section will be displayed in the backend platform.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        this.perfMain.init(this.projectId).then(res =>{\n\n            Laya.timer.once(8000, this, () => {\n                this.perfMain.section_begin(\"MainSection1\");\n            });\n            Laya.timer.once(9000, this, () => {\n                this.perfMain.section_end(\"MainSection1\");\n            });\n            \n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File Upload in LayaAir with TypeScript\nDESCRIPTION: Creates a basic file input element for image uploading using HTML DOM manipulation within LayaAir. It demonstrates how to create an input element, read the selected file using FileReader, and display the uploaded image on the stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(100,100);\n        var file:any = Laya.Browser.document.createElement(\"input\");\n        file.type = \"file\";\n        file.style.position = \"absolute\";\n        file.style.zIndex = 999;\n        Laya.Browser.document.body.appendChild(file);//添加到舞台\n        var fileReader:any = new  Laya.Browser.window.FileReader();\n        file.onchange = function(e:any):void\n        {\n            if(file.files.length){\n                fileReader.readAsDataURL(file.files[0]);\n            }\n        };\n        fileReader.onload = function(evt):void\n        {  \n            if(Laya.Browser.window.FileReader.DONE == fileReader.readyState)\n            {\n                var sp:Laya.Sprite = new Laya.Sprite();\n                sp.loadImage(fileReader.result,0,0,300,300);\n                Laya.stage.addChild(sp);\n            }\n        }\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Handling JS Messages on iOS using Objective-C\nDESCRIPTION: Defines two class methods for handling message events from JS in Objective-C, providing both synchronous (returns NSString) and asynchronous (invokes completion block) implementations in HandleMessageUtils.mm. Logging is integrated via NSLog, and responses are matched by event name. Used to bridge native responses to JS, these handlers should be registered in the appropriate iOS runtime hooks. Async variant expects a completion block to deliver the result string.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/platform_communication/readme.md#_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n+(NSString*)handleSyncMessageWithEventName:(NSString*)eventName data:(NSString*)data {\n    NSLog(@\"%@ %@\", eventName, data);\n    if ([eventName isEqualToString:@\"syncMessage\"]) {\n        return @\"sync message from platform\";\n    }\n    return @\"default sync result\";\n}\n+(void)handleAsyncMessageWithEventName:(NSString*)eventName data:(NSString*)data callback:(void (^)(NSString *))cb {\n    NSLog(@\"%@ %@\", eventName, data);\n    if ([eventName isEqualToString:@\"asyncMessage\"]) {\n        cb(@\"async message from platform\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 场景脚本中的自定义组件添加流程（动态图示）\nDESCRIPTION: 说明如何通过场景编辑器添加自定义脚本组件。用户在属性面板选择新增组件，命名后生成脚本模版类。该过程适用于为场景节点绑定自定义行为脚本，便于场景逻辑扩展。附带示意图表现操作流程。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/entry/readme.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: 微信小游戏Worker初始化与WorkerLoader类的扩展\nDESCRIPTION: 此代码片段展示了如何在微信小游戏适配库中定义MiniWorkerLoader类，继承自Laya.WorkerLoader，并通过wx.createWorker方法创建Worker线程。注册workerMessage回调，处理网络图片的本地缓存地址，并派发事件。实现了微信平台下Worker的初始化、消息监听和图片缓存管理的核心逻辑。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/wechat/Worker/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MiniWorkerLoader extends Laya.WorkerLoader {\n    constructor() {\n        super();\n        this.enable = false;\n    }\n    init() {\n        this.enable = true;\n        this.worker = wx.createWorker({\n            name: 'mini-worker',\n            path: 'workers/index.js'\n        });\n        this.worker.onMessage = (res) => {\n            this.workerMessage(res);\n        };\n    }\n    workerMessage(res) {\n        // 处理Worker返回的消息\n        // 比如将图片缓存地址写入资源映射表\n        // 触发图片加载完成事件\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Model Internal Resources LayaAir3-IDE\nDESCRIPTION: Explains the 'Extract Model Internal Resources' function's utility, which allows developers to freely modify model data without triggering a re-import with every save. Also points out that this action includes automatic error correction for potential animation format issues.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_2\n\nLANGUAGE: other\nCODE:\n```\n所以，我们建议使用右键菜单中`提取模型内部资源`的功能，将模型提取出来，如图1-3所示。\n\n![](img/1-3.png)\n\n(图1-3)\n```\n\n----------------------------------------\n\nTITLE: Modifying Node Properties with Scene Hook\nDESCRIPTION: This code extends the example scene hook to modify a newly created UI node's anchor to (0.5, 0.5). The `onCreateNode` hook method is overridden to check if the created node is an instance of `Laya.Sprite` and updates the `anchorX` and `anchorY` properties. Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regSceneHook()\nexport class TestSceneHook implements IEditorEnv.ISceneHook {\n\n    onCreateNode(scene: IEditorEnv.IGameScene, node: Laya.Node) {\n        if (node instanceof Laya.Sprite)\n            node.anchorX = node.anchorY = 0.5;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating, Positioning and Animating a Sprite3D\nDESCRIPTION: This snippet creates a Sprite3D, loads a 3D model (LayaMonkey.lh) as its child, and sets up an animation. It also adjusts the model's scale and initializes animation states, setting the model's starting position based on calculated path data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n//初始化移动单元\n        this.moveSprite3D = (<Sprite3D>this.scene.addChild(new Sprite3D()));\n        this.moveSprite3D.transform.position = this.path[0];\n\n\n        //初始化小猴子\n        this.layaMonkey = (<Sprite3D>this.moveSprite3D.addChild(Loader.createNodes(\"res/threeDimen/skinModel/LayaMonkey/LayaMonkey.lh\")));\n\n        var tmpLocalScale: Vector3 = this.layaMonkey.transform.localScale;\n        tmpLocalScale.setValue(0.5, 0.5, 0.5);\n        var aniSprite3d: Sprite3D = (<Sprite3D>this.layaMonkey.getChildAt(0));\n\n        //获取动画组件\n        var animator: Animator = (<Animator>aniSprite3d.getComponent(Animator));\n        //创建动作状态\n        var state: AnimatorState = new AnimatorState();\n        //动作名称\n        state.name = \"run\";\n        //动作播放起始时间\n        state.clipStart = 40 / 150;\n        //动作播放结束时间\n        state.clipEnd = 70 / 150;\n        //设置动作\n        state.clip = animator.getDefaultState().clip;\n        //为动画组件添加一个动作状态\n        animator.getControllerLayer(0).addState(state);\n        //播放动画\n        animator.play(\"run\");\n```\n\n----------------------------------------\n\nTITLE: Get Network Type in LayaNative JavaScript\nDESCRIPTION: Retrieves the current network type in LayaNative. The `conch.config.getNetworkType()` function returns an integer representing the network type. The code checks if `conch` is defined before attempting to use it, ensuring compatibility with web versions where `conch` is not available.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/network/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif( conch )\n{\n    var nType = conch.config.getNetworkType();\n}\n```\n\n----------------------------------------\n\nTITLE: 扩展编辑器内置菜单（LayaAir Editor TypeScript）\nDESCRIPTION: 通过 @IEditor.menu 注解给现有编辑器菜单栏扩展功能，支持路径关联与显示控制。可设 position、enableTest 等选项实现自定义排序和激活逻辑。依赖 IEditor.menu、Editor.scene。输入为菜单路径及配置，输出为自定义菜单项，适合工具插件触发新功能。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass AnyName {\n    @IEditor.menu(\"App/tool/test\")\n    static test() {\n        console.log(\"click menu\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 通过 class 类型定义生成 Inspector 面板（LayaAir Editor TypeScript 3.2+）\nDESCRIPTION: 用 IEditor.regClass 注解和 @property 装饰器声明属性类型，结合 IEditor.DataComponent 双向绑定生成 Inspector 面板。依赖 IEditor.property、IEditor.DataComponent、IEditor.InspectorPanel。需输入属性装饰 class 和绑定类型。输出面板含按钮回调。适合新版 LayaAir 强类型数据流。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditor.regClass()\nexport class MyPanelType {\n    @property(String)\n    text: string;\n    \n    @property(Number)\n    count: number;\n    \n    @IEditor.property({ inspector: \"Buttons\", options: { buttons: [{ caption: \"点我\", event: \"my_click\" }] } })\n    actions: any;\n}\n\n@IEditor.panel(\"Test\")\nexport class MyPanel extends IEditor.EditorPanel {\n    delcare _panel : IEditor.InspectorPanel;\n    private _comp : IEditor.DataComponent;\n    \n    async create() {\n        this._panel = IEditor.GUIUtils.createInspectorPanel();\n        \n        this._panel.allowUndo = true; //根据需要设置\n        //DataComponent可以方便的将你的组件和数据绑定在一起\n        this._comp = new IEditor.DataComponent(MyPanelType); \n        \n        //inspect可以多次调用，将多个数据组合在一个面板编辑\n        this._panel.inspect(this._comp.props, MyPanelType);\n        \n        this._panel.on(\"my_click\", ()=> {\n            alert(\"hello\");\n        });\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Configuring auto caching and cache type in TiledMap for performance\nDESCRIPTION: This snippet configures the TiledMap to automatically cache static tiles for performance improvements and specifies the cache type as 'normal'. It also enables anti-crack to prevent visual artifacts caused by scaling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.tMap.autoCache = true;\nthis.tMap.autoCacheType = \"normal\";\nthis.tMap.antiCrack = true;\n```\n\n----------------------------------------\n\nTITLE: Using Steam Achievements from LayaAir - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to use the Steam achievement functionality in a LayaAir component script. It imports the `extendLib` object, attaches click event listeners to two buttons (`initBtn` and `setAchieve`), and overrides the `onUpdate` method to call the `extendLib.steamCallback()` function every frame. The `achievememtsettings` function initializes Steam, then sets an achievement with the ID \"NEW_ACHIEVEMENT_1_0\". This code depends on LayaAir's event system, UI components, and the native Steam extension.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extendLib } from \"./extlib\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({type: Laya.Button})\n    public initBtn: Laya.Button;\n\n    @property({type: Laya.Button})\n    public setAchieve: Laya.Button;\n\n    onEnable(): void {\n        this.initBtn.on(Laya.Event.CLICK, this.onInit);\n        this.setAchieve.on(Laya.Event.CLICK, this.achievememtsettings);\n    }\n\n    // 每帧执行\n    onUpdate(): void {\n        extendLib.steamCallback();\n    }\n\n    onInit() {\n        alert(extendLib.initializeSteam());\n    }\n\n    achievememtsettings(): void {\n        if (extendLib.initializeSteam()) {\n            // 解锁成就\n            extendLib.setAchievement(\"NEW_ACHIEVEMENT_1_0\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Exporter in TypeScript\nDESCRIPTION: This code defines a custom Asset Exporter. Exporters are used during the build and publish stages of the LayaAir engine. The `handleExport` method contains the logic to process resources, handle dependencies and modify the output. It utilizes `this.asset` to access the currently processed resource and `this.exportInfo` to output information. Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regAssetExporter([\"abc\"])\nexport class DemoAssetExporter extends IEditorEnv.AssetExporter {\n    async handleExport(): Promise<void> {\n        //导出处理\n        //当前正在处理的资源是this.asset\n        //输出信息在this.exportInfo\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 设置动画曲线的示例（贝塞尔曲线配置）\nDESCRIPTION: 定义关键帧之间的插值曲线，通过调整控制点p1、p2实现动画缓动效果，支持多种内置模板和自定义配置。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/timelineGUI/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"interpolation\": \"CubicBezier\",\n  \"controlPoints\": {\n    \"p1\": { \"x\": 0.3, \"y\": 0.0 },\n    \"p2\": { \"x\": 0.7, \"y\": 1.0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Toggle with Camera in TypeScript (LayaAir)\nDESCRIPTION: Defines a TypeScript class method to toggle visibility of scene layers via mouse down events, adjusting camera layer masks dynamically for visibility effects in a 3D scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Camera/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate layerIndex: number = 0;\n onMouseDown(e: Laya.Event) \n {\n     // Clear all layers\n     this.camera.removeAllLayers();\n     this.layerIndex++;\n     // Set visible layer, toggling between 1 and 2\n     this.camera.addLayer(this.layerIndex%2+ 1);\n }\n```\n\n----------------------------------------\n\nTITLE: Example: Loading Multiple Assets with UseFirst\nDESCRIPTION: This snippet illustrates how to load multiple assets using `Addressables.loadAssetsAsync` with the `MergeMode.UseFirst` option. It loads either of the assets identified in the key. The code iterates over the result data array, logging each asset's URL to the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.loadAssetsAsync(['test2', 'test1'], { mode: MergeMode.UseFirst }).then((result: LoadResult) => {\n\n        console.log(result);\n\n        for(let i = 0; i < result.data.length; i++) {\n            console.log(result.data[i].url);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Export Particle System Data\nDESCRIPTION: This method retrieves and serializes data from a Unity ParticleSystem component for export. It iterates through various modules of the particle system, such as Emission, Shape, Velocity over Lifetime, and others, and writes their data into a JSON object. This JSON object is then used by LayaAir to recreate the particle system.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/cpuParticle/unityCPUPartical/readme.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    public static JSONObject GetParticleSystem(ParticleSystem particleSystem, bool isOverride, NodeMap map, ResoureMap resMap)\n    {\n        JSONObject compData = JsonUtils.SetComponentsType(new JSONObject(JSONObject.Type.OBJECT), \"ParticleSystem\", isOverride);\n        writeBaseNode(particleSystem, compData);\n        writeEmission(particleSystem, compData);\n        writeShape(particleSystem, compData,map, resMap);\n        writeVelocityOverLifetime(particleSystem, compData);\n        writeSizeOverLifetime(particleSystem, compData);\n        writeForceOverLifetime(particleSystem, compData);\n        writeRotationOverLifetime(particleSystem, compData);\n\n        writeLimitVelocityOverLifetime(particleSystem, compData);\n        writeColorOverLifetime(particleSystem, compData);\n        writeColorBySpeed(particleSystem, compData);\n        writeSizeBySpeed(particleSystem, compData);\n        writeRotationBySpeed(particleSystem, compData);\n        writeInheritVelocity(particleSystem, compData);\n        writeNoise(particleSystem, compData);\n        writeTextureSheetAnimation(particleSystem, compData);\n        writeSubEmittersModule(particleSystem, compData, map);\n\n        return compData;\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Engine Initialization Callbacks with LayaAir in TypeScript\nDESCRIPTION: Demonstrates how to add custom logic to be executed before and after the LayaAir engine initialization by using Laya.addBeforeInitCallback and Laya.addAfterInitCallback respectively. This code configures the engine to enable WebGL2 rendering before initialization, and logs to the console after initialization. Includes a standard asynchronous main function for the project entry that opens a scene. Requires LayaAir engine, used to customize rendering configurations and hook initialization stages programmatically.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/entry/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 在引擎初始化前执行自定义逻辑(此方法在Laya.init前调用)\nLaya.addBeforeInitCallback(() => {\n    // 默认启用WebGL2渲染模式\n    Laya.Config.useWebGL2 = true;\n    console.log(\"before init\");\n});\n// 在引擎初始化后执行自定义逻辑(此方法在Laya.init后调用)\nLaya.addAfterInitCallback(() => {\n    console.log(\"after init\");\n});\n\nexport async function main() {\n    console.log(\"Hello LayaAir!\");\n    //加载场景并打开场景\n    Laya.Scene.open('Scene.ls');\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Images with Uniform Type in LayaAir with TypeScript\nDESCRIPTION: This TypeScript code loads multiple image resources with a uniform type specified as `Laya.Loader.IMAGE`. It dynamically displays these images in a sprite using a timer. This highlights the efficient loading of multiple assets when they are all of the same type, reducing boilerplate code.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        let resArr: Array<any> = [\n            \"image/bird.jpg\",\n            \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\",\n            \"image/cloud.png\",\n            \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\",\n        ];\n        this.loadTextures(resArr);\n    }\n\n    /** 加载多个资源 \n     * @param url 资源数组\n    */\n    loadTextures(url: Array<string>): void {\n        //加载回调返回的类型，如果不确定就any\n        Laya.loader.load(url, Laya.Loader.IMAGE).then((res: Array<Laya.Texture>) => {\n            let sp: Laya.Sprite = new Laya.Sprite();\n            this.owner.addChild(sp);\n            let i: number = 0;\n            //每秒重画一次\n            Laya.timer.loop(1000, this, () => {\n                i == res.length && (i = 0);\n                //清除sp节点的所有绘图（不含子节点）\n                sp.graphics.clear();\n                //在sp节点上重绘纹理\n                sp.graphics.drawTexture(res[i]);\n                i++;\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Gravity in LayaAir3-IDE Physics2D - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically set the global gravity vector for the 2D physics engine in LayaAir3. By assigning a new Vector2 object to Physics2D.I.gravity, developers can define gravity strength and direction, overriding the default Y-axis value of 9.8 m/s². Requires the physical engine and Vector2 class to be present in the environment. Inputs are the X and Y values for gravity; output is an updated gravity setting for all 2D dynamic rigid bodies. Only effective if invoked before the simulation starts or before objects are added.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics2D/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPhysics2D.I.gravity= new Vector2(0,9.8)\n```\n\n----------------------------------------\n\nTITLE: Controlling Radio Component with TypeScript Script in LayaAir\nDESCRIPTION: A TypeScript script that demonstrates how to control a Radio component's properties after it has been created in the LayaAir IDE. It shows how to set the skin, state number, label properties, text styling, and state colors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Radio/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Radio })\n    public radio: Laya.Radio;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.radio.skin = \"atlas/comp/radio.png\"; //皮肤\n        this.radio.stateNum = 3; //皮肤状态\n\n        this.radio.label = \"确定\"; //文本标签\n        this.radio.labelFont = \"宋体\"; //文本标签字体\n        this.radio.labelSize = 20; //文本标签字体大小\n        this.radio.labelBold = true; //文本标签加粗\n        this.radio.labelVAlign = \"middle\"; //文本标签垂直居中对齐\n\n        this.radio.labelStroke = 3; //文本标签字体描边宽度\n        this.radio.labelStrokeColor = \"#ffffff\"; //描边颜色\n        this.radio.strokeColors = \"#000000, #c6ff00, #001aff\"; //各状态下的描边颜色\n        this.radio.labelColors = \"#0100ff, #16fa0e, #ff0000\"; //各状态下的文本颜色\n\n        // this.radio.selected = true; //是否选中\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Visibility in IDE using private Option in @property Decorator in TypeScript\nDESCRIPTION: This snippet explains controlling whether underscore-prefixed properties are visible in the LayaAir IDE property panel using the private parameter in @property(). Setting private to false shows underscored properties in the IDE, while setting private to true hides normal properties from the IDE. The example modifies the previously shown radian/degree component to hide the radian field from the IDE and only show the degree property for editing. Dependencies include regClass and property from Laya.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number , private: true })\n    radian: number = 0;  // Hidden in IDE due to private: true\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) // degree not serialized\n     get degree() {\n        return this.radian * (180 / Math.PI); // Display degrees in IDE\n    }\n    set degree(value: number) {\n        this.radian = value * (Math.PI / 180); // Store radians internally\n    }\n    \n    onStart() {\n        console.log(this.radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring LoadingView in LayaNative Using JavaScript\nDESCRIPTION: Initializes the LoadingView object and sets key visual and behavioral properties including automatic closing, background color, and font color. This snippet needs to be placed in the config.js file located within the Android or iOS project resource directories. It uses window.loadingView to set loadingAutoClose (boolean to determine if loading closes automatically), bgColor (background color in hex), setFontColor (font color in hex), and starts the loading animation with loading(-1).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/loading_view_new/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.loadingView = new loadingView();\nif(window.loadingView)\n{\n    window.loadingView.loadingAutoClose=true;//true代表当动画播放完毕，自动进入游戏。false为开发者手动控制\n    window.loadingView.bgColor(\"#FFFFFF\");//设置背景颜色\n    window.loadingView.setFontColor(\"#000000\");//设置字体颜色\n    window.loadingView.loading(-1);\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Scenes Programmatically in LayaAir\nDESCRIPTION: This code snippet demonstrates how to switch between scenes in a LayaAir project using TypeScript. It uses the `Laya.Scene` class to open a new scene, close an existing scene, and destroy a scene to release resources. The `open` method takes the scene path, a boolean indicating whether to show Scene2D and Scene3D, null for extra parameters, a handler for loading completion, and a handler for loading progress.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/sceneEditor/environment/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//打开指定的场景，同时显示Scene2D和Scene3D\nLaya.Scene.open(\"scene/Game.ls\",true, null, Laya.Handler.create(this, this.onLoaded), Laya.Handler.create(this, this.onLoading));\n\n//关闭指定的场景\nLaya.Scene.close(\"scene/Login.ls\")\n\n//销毁指定的场景\nLaya.Scene.destroy(\"scene/Login.ls\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Native Project with Latest SDK Version\nDESCRIPTION: This command creates a native project named 'SnowBallNative' using the latest version of the LayaNative SDK. It packages resources from the 'SnowBallH5' directory and sets the game URL.  No SDK version is specified, so the latest available version is used.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/build_Cmd/readme.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ layanative3 createapp -f SnowBallH5 -t 1 -n SnowBallNative -u http://10.10.20.102:8899/index.js\n```\n\n----------------------------------------\n\nTITLE: Assigning XML Data to LayaAir Tree Component with a Custom Script (TypeScript)\nDESCRIPTION: This code demonstrates how to assign a hierarchical XML data structure to a Tree UI component in LayaAir using a custom TypeScript script. The script defines a property for the Tree instance, constructs XML-formatted string data containing directories and files, and parses it into a Laya.XML object for the Tree. Expected input is the reference to a Tree UI node, and the output is a populated tree UI. Prerequisites: LayaAir 2D scene with a Tree component, correct assignment of the template render item, and XML node names matching the render item properties. Limitation: Supports only up to two-level hierarchies.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Tree/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Tree })\n    public tree: Laya.Tree;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        //初始化树状列表的数据源\n        let treeData: string = \"<data>\";\n        //给Tree列表赋值\n        treeData +=\n            \"<dir label='box1' isOpen='true'>\" +\n            \"<file label='child1 ' />\" +\n            \"<file label='child2 ' />\" +\n            \"<file label='child3 ' />\" +\n            \"<file label='child4 ' />\" +\n            \"<file label='child5 ' />\" +\n            \"</dir>\" +\n            \"<dir label='box2' isOpen='false'>\" +\n            \"<file label='child1 ' />\" +\n            \"<file label='child2 ' />\" +\n            \"<file label='child3 ' />\" +\n            \"<file label='child4 ' />\" +\n            \"<file label='child5 ' />\" +\n            \"</dir>\" +\n            \"<dir label='box3' isOpen='true'>\" +\n            \"<file label='child1 ' />\" +\n            \"<file label='child2 ' />\" +\n            \"<file label='child3 ' />\" +\n            \"<file label='child4 ' />\" +\n            \"<file label='child5 ' />\" +\n            \"</dir>\" ;\n        //数据源data标签，需要拼接一个结束标签\n        treeData += \"</data>\";\n\n        //把字符串解析为xml对象并返回\n        this.tree.xml = new Laya.XML(treeData);\n\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example: Instantiate Assets with instantiateAsync\nDESCRIPTION: This example demonstrates using `Addressables.instantiateAsync` to load and instantiate a prefab asset named 'test1' and another named 'test3'. It logs the `LoadResult` to the console for each instantiation, allowing you to access the created instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.instantiateAsync('test1').then((result: LoadResult) => {\n        console.log(result);\n    });\n\n    Addressables.instantiateAsync('test3').then((result: LoadResult) => {\n        console.log(result);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Shader File Structure\nDESCRIPTION: Demonstrates the basic structure of a LayaAir shader file including the Shader3D Start/End markers.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n\t//此处填写Shader渲染pass、渲染状态、材质参数等属性\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Modifying Model Attributes LayaAir3-IDE\nDESCRIPTION: Describes how to modify model attributes within the LayaAir3-IDE, emphasizing that modifications require clicking the 'Apply' button, which triggers a re-import based on the new settings. This section highlights the importance of the 'Extract Internal Resources' feature for efficient model modification and animation/material modifications.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_1\n\nLANGUAGE: other\nCODE:\n```\n当选中某一模型后，可以在`属性设置面板`修改模型导入的设置，**每次修改后**点击`应用`，**会根据修改后的属性重新进行导入**。\n```\n\n----------------------------------------\n\nTITLE: Registering a Scene Hook for Custom Editor Logic (TypeScript)\nDESCRIPTION: Implements IEditorEnv.ISceneHook to intercept and extend scene operations like loading, saving, node creation, or component initialization, using @IEditorEnv.regSceneHook. Methods can be selectively implemented. Registration allows custom behaviors to run at critical scene events in the editor without affecting game builds. Inputs are scene and relevant objects; outputs are context-dependent and for editor automation only.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditorEnv.regSceneHook()\nexport class TestSceneHook implements IEditorEnv.ISceneHook {\n    onLoadScene() {\n    }\n\n    onSaveScene(scene: IEditorEnv.IGameScene, data: any) {\n    }\n\n    onCreateNode(scene: IEditorEnv.IGameScene, node: Laya.Node) {\n    }\n\n    onCreateComponent(scene: IEditorEnv.IGameScene, comp: Laya.Component) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GLSL vertex and fragment shader blocks for Outline effect - GLSL\nDESCRIPTION: Defines two GLSL blocks named OutlineVS and OutlineFS for vertex and fragment shaders respectively. The vertex shader offsets positions along normals scaled by outline width and transforms to clip space. The fragment shader declares varyings for interpolation and calculates position and normal values in world space, preparing data for shading. It illustrates GLSL block usage within LayaAir shader files.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_13\n\nLANGUAGE: glsl\nCODE:\n```\nGLSL  Start\n#defineGLSL  OutlineVS\n    void main()\n    {\n        vec4 position = vec4(a_Position.xyz + a_Normal * u_OutlineWidth, 1.0);\n        gl_Position = u_MvpMatrix * position;\n    }\n#endGLSL \n\n#defineGLSL  OutlineFS\n\tvarying vec3 v_Normal; \n    varying vec2 v_Texcoord0; \n    void main() \n    { \n        gl_Position = u_MvpMatrix * a_Position; \n        mat3 worldMat=mat3(u_WorldMat); \n        v_Normal=worldMat*a_Normal; \n        v_Texcoord0 = a_Texcoord0; \n        gl_Position=remapGLPositionZ(gl_Position); \n    }\n#endGLSL \nGLSL  End\n```\n\n----------------------------------------\n\nTITLE: Loading resources with local paths\nDESCRIPTION: This code snippet demonstrates how to load a resource using a local path in LayaAir. It highlights the basic method of loading resources when the project size is within the 4MB limit of WeChat Mini-Games.  The resource is loaded using `Laya.loader.load` and the loaded texture is then applied to a sprite added to the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/wechat/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"resources/layaair.png\");\n```\n\n----------------------------------------\n\nTITLE: Enabling layer merging in TiledMap for performance\nDESCRIPTION: This snippet activates the enableMergeLayer property, which merges multiple layers into one, potentially boosting rendering performance but limiting individual layer manipulation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.tMap.enableMergeLayer = true;\n```\n\n----------------------------------------\n\nTITLE: Exporting Steam Callback and Achievement Functions - C++\nDESCRIPTION: This C++ code snippet exports the `jsSetAchievement` and `jsSteamCallback` functions to JavaScript. It uses the `jsvm_create_function` and `jsvm_set_named_property` functions to register these functions with the names \"setAchievement\" and \"steamCallback\" in the LayaNative environment, making them callable from JavaScript. The `LayaExtInit` function is the entry point for exporting native functions to LayaAir. `SIZE_MAX` indicates the maximum size for the function name.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nextern \"C\" {\n    LAYAEXTAPI void LayaExtInit(jsvm_env env, jsvm_value exp) {\n        // 注册Steam相关函数\n        ......\n\n        // 注册成就相关函数\n        jsvm_value fnSetAchievement;\n        jsvm_create_function(env, \"setAchievement\", SIZE_MAX, jsSetAchievement, nullptr, &fnSetAchievement);\n        jsvm_set_named_property(env, exp, \"setAchievement\", fnSetAchievement);\n\n        jsvm_value fnSteamCallback;\n        jsvm_create_function(env, \"steamCallback\", SIZE_MAX, jsSteamCallback, nullptr, &fnSteamCallback);\n        jsvm_set_named_property(env, exp, \"steamCallback\", fnSteamCallback);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Export Particle System Renderer Data\nDESCRIPTION: This method retrieves and serializes data from a Unity ParticleSystemRenderer component.  It extracts properties such as renderMode, sortMode, alignment, material, velocity scales, length scale, mesh, and pivot and adds them to a JSON object for export. The `ResoureMap` object is used to map the material and mesh resources to their corresponding data representations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/cpuParticle/unityCPUPartical/readme.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n public static JSONObject GetParticleSystemRneder(ParticleSystemRenderer renderer, bool isOverride,ResoureMap map)\n    {\n        JSONObject compData = JsonUtils.SetComponentsType(new JSONObject(JSONObject.Type.OBJECT), \"ParticleSystemRenderer\", isOverride);\n        compData.AddField(\"renderMode\", (int)(object)renderer.renderMode);\n        compData.AddField(\"sortMode\", (int)(object)renderer.sortMode);\n        compData.AddField(\"alignment\", (int)(object)renderer.alignment);\n        compData.AddField(\"material\", map.GetMaterialData(renderer.sharedMaterial));\n        compData.AddField(\"cameraVelocityScale\", renderer.cameraVelocityScale);\n        compData.AddField(\"velocityScale\", renderer.velocityScale);\n        compData.AddField(\"lengthScale\", renderer.lengthScale);\n        if (renderer.mesh)\n        {\n            compData.AddField(\"sharedMesh\", map.GetMeshData(renderer.mesh, renderer));\n        }\n        compData.AddField(\"pivot\", JsonUtils.GetVector3Object(renderer.pivot));\n        return compData;\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Async Function in TypeScript\nDESCRIPTION: This snippet details the `loadSceneAsync` function for loading scenes asynchronously. This function is used to load a game scene by its designated key. The function provides a mechanism for loading scenes dynamically. This is important because scenes are integral components of the game and need to be loaded as the player progresses. The output is a Promise that resolves to the scene's path.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 加载场景\n * @description 在 {@link LoadResult.data} 中返回加载场景所需的路径\n * @param key 用来筛选资源的关键字\n * @param options\n * @returns {Promise<LoadResult>} 在 {@link LoadResult.data} 中返回加载的场景的路径\n */\nstatic async loadSceneAsync(key: string, options?: LoadSceneOptions): Promise<LoadResult>;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple UBB/HTML Features in LayaAir Text Component - HTML\nDESCRIPTION: Demonstrates how to use various HTML and UBB syntaxes in the LayaAir Text component to achieve effects like images, hyperlinks, font size, color, underline, and syntax nesting. Prerequisites include enabling HTML and UBB syntax support on the Text component. The snippet covers how to write these syntaxes in the IDE 'text' property to display different effects. No external dependencies, but the referenced picture path must exist and syntax/UBB features must be enabled in properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Text/readme.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src='atlas/comp/image.png' width = 200 height=100/>\n\n[url='www.layabox.com']蓝亚盒子[/url]\n\n[size=60]text[/size]\n\n[color=#FF0000]text[/color]\n\n[u]text[/u]\n\n[color=#FF0000][size=60]text[/size][/color]\n```\n\n----------------------------------------\n\nTITLE: Initializing Steam with SteamAPI_InitEx - C++\nDESCRIPTION: This C++ code snippet demonstrates how to initialize the Steam API using `SteamAPI_InitEx` within a SteamManager class. It checks if the Steam API has already been initialized and handles potential initialization errors, ensuring the Steam client is running before attempting initialization. The `SteamErrMsg` struct (not shown) is assumed to be part of the Steamworks SDK and provides error details. It returns true on successful initialization, false otherwise.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SteamManager::Initialize()\n{\n    // 是否进行过初始化\n    if (m_bInitialized)\n    {\n        return true;\n    }\n\n    SteamErrMsg msg;    \n\n    if (SteamAPI_InitEx(&msg) != ESteamAPIInitResult::k_ESteamAPIInitResult_OK)\n    {\n        // Steam初始化失败, 请确保Steam客户端正在运行\n        return false;\n    }\n\n    m_bInitialized = true;\n    \n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying BlurFilter in TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate a BlurFilter, set its strength, and apply it to a Laya.Image component to produce a blurring effect, useful for softening images in TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Filter/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Image })\n    public img: Laya.Image;\n\n    onAwake(): void {\n        let blurFilter: Laya.BlurFilter = new Laya.BlurFilter();\n        blurFilter.strength = 5;\n        this.img.filters = [blurFilter];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing LoadingView interface and functionality\nDESCRIPTION: Provides the ability for developers to modify all LoadingView code directly for advanced customization of UI and behavior, including layout, tips, or animations as needed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/loading_view_new/readme.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Script Component Mouse Event Lifecycle Methods in LayaAir\nDESCRIPTION: A comprehensive example of all mouse event lifecycle methods available in a Laya.Script component for 2D interaction.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Script2DTest extends Laya.Script {\n    constructor() { super(); }\n\n    onClick(e: Laya.Event): void {\n        console.log(\"点击脚本所属的节点对象时触发\");\n    }\n\n    onDoubleClick(e: Laya.Event): void {\n        console.log(\"双击脚本所属的节点对象时触发\");\n    }\n\n    onMouseDown(e: Laya.Event): void {\n        console.log(\"鼠标在脚本所属的节点对象上按下时触发\");\n    }\n\n    onMouseUp(e: Laya.Event): void {\n        console.log(\"鼠标在脚本所属的节点对象上抬起时触发\");\n    }\n\n    onMouseMove(e: Laya.Event): void {\n        console.log(\"鼠标在脚本所属的节点对象上移动时触发\");\n    }\n\n    onMouseOver(e: Laya.Event): void {\n        console.log(\"鼠标进入脚本所属的节点对象时触发\");\n    }\n\n    onMouseOut(e: Laya.Event): void {\n        console.log(\"鼠标离开脚本所属的节点对象时触发\");\n    }\n\n    onStageMouseDown(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上按下时触发\");\n    }\n\n    onStageMouseUp(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上抬起时触发\");\n    }\n\n    onStageClick(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上点击时触发\");\n    }\n\n    onStageMouseMove(e: Laya.Event): void {\n        console.log(\"鼠标在stage（舞台）上移动时触发\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting ArrayBuffer Manipulation Function Using LayaAir Native Extension C API - C\nDESCRIPTION: Implements a C++ function that retrieves an ArrayBuffer from JavaScript, modifies its first byte, and returns the buffer's length to JavaScript. Assumes the presence of LayaAir's native extension toolchain. Intended to demonstrate direct binary data manipulation between C++ and JS. Inputs consist of a single ArrayBuffer from JS; outputs the buffer's byte length. Input buffer must be at least one byte in length.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/extension/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsBin(jsvm_env env, jsvm_callback_info info) {\n    jsvm_status status;\n    size_t argc = 1;\n    jsvm_value args[1];\n    jsvm_value _this;\n    jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr);\n\n    char* buff = nullptr;\n    size_t byteLen = 0;\n    jsvm_get_arraybuffer_info(env, args[0], (void**) & buff, &byteLen);\n    buff[0] = 22;\n\n    jsvm_value retLen;\n    jsvm_create_int32(env, byteLen, &retLen);\n    return retLen;\n}\n```\n\n----------------------------------------\n\nTITLE: Sprite.loadImage Method Signature in TypeScript\nDESCRIPTION: Provides the TypeScript method signature for `Sprite.loadImage`, which loads and displays an image from a given URL. It optionally accepts a `Handler` for completion notification and returns the Sprite instance itself.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * <p>加载并显示一个图片。相当于加载图片后，设置texture属性</p>\n     * <p>注意：2.0改动：多次调用，只会显示一个图片（1.0会显示多个图片）,x,y,width,height参数取消。</p>\n     * @param url\t\t图片地址。\n     * @param complete\t（可选）加载完成回调。\n     * @return\t返回精灵对象本身。\n     */\n    loadImage(url: string, complete?: Handler): Sprite;\n```\n\n----------------------------------------\n\nTITLE: Controlling Blood Bar Logic in LayaAir UI Prefab (TypeScript)\nDESCRIPTION: This snippet defines a TypeScript Runtime class extending a generated prefab base for the blood bar UI. It initializes the bar and value elements when awakening, handles click events on the Laya stage to simulate taking damage, updates the blood bar visually, animates a damage value rising effect, and triggers a character's hurt animation by invoking Main.instance.animator. Dependencies include LayaAir's regClass decorator, Tween, Stage, and Event systems, as well as the BloodBarBase class and a Main singleton. The key parameters are the Progress bar's 'value' property, the 'value' Text node's visibility and position, and the Animator interface for character animation. Expects the prefab nodes to be named as 'bar' and 'value', and requires proper variable linkage in the prefab's IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/3DUI/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\nimport { BloodBarBase } from \"./BloodBar.generated\";\nimport { Main } from \"./Main\";\n\n@regClass()\nexport class BloodBar extends BloodBarBase {\n    onAwake(): void {\n        this.bar.value = 1;\n        this.value.visible = false;\n        Laya.stage.on(Laya.Event.CLICK, this, this.onHurt);\n    }\n\n    onHurt(): void {\n        this.bar.value = this.bar.value - 0.9;\n        this.value.y = 35;\n        this.value.visible = true;\n        Main.instance.animator.play(\"stun\");\n        Laya.Tween.create(this.value).to(\"y\", -30).duration(1000);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing Varying Variables in GLSL Fragment Shader\nDESCRIPTION: Provides a GLSL code example for normalizing a normal vector (`v_normal`) received via a `varying` variable within the fragment shader. This is often necessary because interpolation across the triangle by the rasterizer can change the vector's length, requiring explicit normalization using the `normalize()` function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_13\n\nLANGUAGE: GLSL\nCODE:\n```\n// 归一化法线\nvec3 normal = normalize(v_normal);\n```\n\n----------------------------------------\n\nTITLE: Example: Loading Multiple Assets with Union\nDESCRIPTION: This example uses the `Addressables.loadAssetsAsync` method along with the `MergeMode.Union` option to combine the results of assets associated with 'test1' and 'test2'. After the assets are loaded, the URL for each asset in the combined result is logged to the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.loadAssetsAsync(['test1', 'test2'], { mode: MergeMode.Union }).then((result: LoadResult) => {\n\n        console.log(result);\n\n        for(let i = 0; i < result.data.length; i++) {\n            console.log(result.data[i].url);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Numerical Data with LayaPerf in TypeScript\nDESCRIPTION: This code shows how to record numerical data using the `perf_value` method of the LayaPerf class. It simulates some computation to obtain a count, and then records this count as a value associated with the tag 'value1'. The tag 'value1' must be registered beforehand using the `regValueTag` method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    onUpdate(): void {\n        const targetDuration = 2; // 目标持续时间（毫秒）\n        const startTime = performance.now(); // 使用性能高精度时间标记\n        // 一个简单的计数循环，用于占用CPU时间\n        // 初始值和增量的大小可能需要调整以匹配大约2ms的执行时间\n        let count = 0;\n        while (performance.now() - startTime < targetDuration) {\n            count++;\n        }\n\n        this.perfMain.perf_value(\"value1\", count);\n    }\n```\n\n----------------------------------------\n\nTITLE: Exposing Functions and Static Functions to Blueprints using bpFunction Decorator in TypeScript\nDESCRIPTION: Illustrates how to expose instance and static class methods to the blueprint editor by applying the @bpFunction decorator. The decorator configures function parameters, modifiers (such as static), and return types. This enables blueprint scripts to invoke these custom functions with typed parameters and receive return values, integrating external logic seamlessly into the visual scripting workflow.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass, bpFunction } = BP;\n\n@bpClass({\n    name:\"TestBluePrint\",\n    extends:\"Script\",\n    construct: {\n        params: [\n            {\n                \"name\": \"testParams\",\n                \"type\": \"string\"\n            }\n        ]\n    }\n})\n\nexport class TestBluePrint extends Laya.Script {\n    \n    constructor(testParams: string) {\n        super();\n    }\n    \n    // 函数\n    @bpFunction({\n        params: [\n            {\n                name: \"PrimaryAssetId\",\n                type: \"string\"\n            }\n        ],\n        returnType: \"string\"\n    })\n    testFunction(PrimaryAssetId: string): string {\n        return \"\";\n    }\n\n    // 静态函数\n    @bpFunction({\n        params: [\n            {\n                name: \"PrimaryAssetId\",\n                type: \"string\"\n            }\n        ],\n        modifiers: {\n            isStatic: true\n        },\n        returnType: \"void\"\n    })\n    static testStaFunction(PrimaryAssetId: string) {\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: 定义蓝图中的属性和静态属性\nDESCRIPTION: 此示例展示了如何使用@bpProperty装饰器定义实例和静态属性，以及使用@bpAccessor装饰器定义属性的getter和setter，包括类型和静态修饰符。属性可在蓝图中被访问和设置。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass, bpAccessor, bpProperty } = BP;\n\n@bpClass({\n    name: \"TestBluePrint\",\n    extends: \"Script\",\n    construct: {\n        params: [\n            {\n                \"name\": \"testParams\",\n                \"type\": \"string\"\n            }\n        ]\n    }\n})\n\nexport class TestBluePrint extends Laya.Script {\n\n    constructor(testParams: string) {\n        super();\n    }\n\n    @bpProperty({ \"type\": \"boolean\" })\n    aaa: boolean = true;\n\n    @bpProperty({ \"type\": \"boolean\", \"modifiers\": { \"isStatic\": true } })\n    static bbb: boolean = true;\n\n    @bpAccessor({ \"type\": \"string\" })\n    get testParams(): string {\n        return \"test\";\n    }\n\n    set testParams(value: string) {\n        console.log(value);\n    }\n\n    @bpAccessor({ \"type\": \"string\", \"modifiers\": { \"isStatic\": true } })\n    static get testStaParams(): string {\n        return \"test\";\n    }\n\n    static set testStaParams(value: string) {\n        console.log(value);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Protobuf Module and Initializing Script in TypeScript for LayaAir\nDESCRIPTION: Demonstrates importing the generated static protobuf JavaScript module into a LayaAir TS script. The script class is registered with LayaAir's decorator and extends Laya.Script. The example shows the basic script lifecycle hook `onEnable` logging a start message, establishing initial usage context.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/ProtobufDemo.ts\n// 引入生成的 protobuf 模块，路径相对于当前文件\nimport * as protobuf from \"./libs/protobuf/protobuf\";\nconst { regClass } = Laya;\n@regClass()\nexport class ProtobufDemo extends Laya.Script {\n    onEnable() {\n        console.log(\"Game start\");\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Section Statistics in LayaAir Performance Plugin\nDESCRIPTION: This snippet demonstrates how to use section_begin and section_end APIs to measure performance during specific time intervals. The code creates a timed section that starts 8 seconds after enabling and ends 1 second later.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        this.perfMain.init(this.projectId).then(res =>{\n\n            Laya.timer.once(8000, this, () => {\n                this.perfMain.section_begin(\"MainSection1\");\n            });\n            Laya.timer.once(9000, this, () => {\n                this.perfMain.section_end(\"MainSection1\");\n            });\n            \n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding LOD Group Setting LayaAir3-IDE\nDESCRIPTION: Describes the 'add Lod Group' setting, which enables the export of LOD (Level of Detail) data when the model contains LOD data. It automatically creates a LOD Group component for setting up the LOD data when the model is used. Provides an example of the visual effect.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_6\n\nLANGUAGE: other\nCODE:\n```\n当模型中存在Lod数据时，勾选该选项，会导出Lod的数据，并在使用该模型的时候自动创建一个Lod Group组件来设置Lod数据。添加后的效果如动图2-4所示。\n```\n\n----------------------------------------\n\nTITLE: Defining Data Types with Decorators in LayaAir 3.2 TypeScript\nDESCRIPTION: Uses @property decorators to define data structures for inspector panels. Creates a DataComponent binding type and data, facilitating multi-instance editing with more type safety and clarity.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.regClass()\nexport class MyPanelType {\n    @property(String)\n    text: string;\n    \n    @property(Number)\n    count: number;\n    \n    @IEditor.property({ inspector: \"Buttons\", options: { buttons: [{ caption: \"点我\", event: \"my_click\" }] } })\n    actions: any;\n}\n\n@IEditor.panel(\"Test\")\nexport class MyPanel extends IEditor.EditorPanel {\n    delcare _panel : IEditor.InspectorPanel;\n    private _comp : IEditor.DataComponent;\n    \n    async create() {\n        this._panel = IEditor.GUIUtils.createInspectorPanel();\n        \n        this._panel.allowUndo = true;\n        this._comp = new IEditor.DataComponent(MyPanelType); \n        \n        this._panel.inspect(this._comp.props, MyPanelType);\n        \n        this._panel.on(\"my_click\", ()=> {\n            alert(\"hello\");\n        });\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: 创建与弹出新菜单（LayaAir Editor TypeScript）\nDESCRIPTION: 通过 IEditor.Menu.create 定义新菜单项并手动调用 show 弹出，不受内置菜单约束。支持两级及多级递归菜单。依赖 IEditor.Menu。输入为菜单结构数组（可含 click 回调），输出为独立弹出式菜单，适用于操作区浮动菜单等场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nlet menu = IEditor.Menu.create([ \n    { label: \"test\" , click : function() { console.log(\"clicked\"); } }\n ]);\n//当需要弹出时\nmenu.show();\n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.callLater Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.callLater method. This method schedules a function to execute once later in the current frame, after the current execution context finishes but before rendering.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 延迟执行。\n     * @param\tcaller 执行域(this)。\n     * @param\tmethod 定时器回调函数。\n     * @param\targs 回调参数。\n     */\n    callLater(caller: any, method: Function, args: any[] = null): void {\n        CallLater.I.callLater(caller, method, args);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Render Texture Target for Camera Output (TypeScript)\nDESCRIPTION: Sets up a secondary camera to render its view to a texture applied on a scene object, enabling effects like picture-in-picture or scene reflections. It configures render target properties, applies a material to a plane, and assigns the render texture as its albedo texture.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Camera/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.renderTargetCamera.renderTarget = Laya.RenderTexture.createFromPool(512, 512, Laya.RenderTargetFormat.R8G8B8A8, Laya.RenderTargetFormat.DEPTH_16, false, 1);\n// Set rendering order\nthis.renderTargetCamera.renderingOrder = -1;\n// Set clear flag\nthis.renderTargetCamera.clearFlag = Laya.CameraClearFlags.Sky;\n// Create and assign material\nvar mat1: Laya.UnlitMaterial = new Laya.UnlitMaterial();\nmat1.albedoColor = new Laya.Color(1.0, 1.0, 1.0, 1.0);\nmat1.cull = Laya.RenderState.CULL_NONE;\n// Apply material to plane\nthis.plane.getComponent(Laya.MeshRenderer).sharedMaterial = mat1;\n// Assign camera's render target to material's albedo texture\nmat1.albedoTexture = this.renderTargetCamera.renderTarget;\n```\n\n----------------------------------------\n\nTITLE: Defining webview display interface in LayaNative - TypeScript\nDESCRIPTION: Defines the setExternalLinkEx method, which displays an embedded webview overlay in a LayaNative application. This method takes the target URL, position (posx, posy), dimensions (width, height), and a canclose flag indicating whether users can close the webview. All parameters are required; the function does not return a value. This interface must be present in a LayaNative environment, and is not available in web builds.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/webview/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 显示一个webview\n * @param url {string} 要显示的url地址。\n * @param posx {number} weview的左上角位置\n * @param posy {number} webivew的左上角位置\n * @param width {number} webview的宽度\n * @param height {number} webview的高度\n * @param canclose {boolean} webview是否可以被关掉。\n */ \nsetExternalLinkEx(url:string,posx:number,posy:number,width:number,height:number,canclose:boolean):void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic on Animation State Exit in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates extending `Laya.AnimatorStateScript` to add custom behavior when an animation state finishes. It retrieves the associated `Sprite3D` model within `setPlayScriptInfo` and implements the `onStateExit` method to translate the model's position using `transform.translate`. This script requires the LayaAir engine classes like `AnimatorStateScript`, `Sprite3D`, and `Vector3`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport Vector3 = Laya.Vector3;\n...\n\nexport class AnimationScript extends Laya.AnimatorStateScript {\n    ...\n    private model: Laya.Sprite3D;\n    \n    /**@internal */\n    setPlayScriptInfo(animator: Laya.Animator | Laya.Animator2D, layerindex: number, playstate: Laya.AnimatorState | Laya.AnimatorState2D) {\n        ...\n        this.model = animator.owner as Laya.Sprite3D;//得到Cube节点\n    }\n\n    ...\n    \n\t/**\n    * 动画状态退出时执行。\n    */\n    onStateExit(): void {\n        console.log(\"动画退出了\");\n        //平移操作\n        let position = new Vector3(1, 1, 1);\n        this.model.transform.translate(position);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LayaAir Subpackage Loading Example\nDESCRIPTION: This TypeScript/JavaScript snippet demonstrates how to load sub-packages in a LayaAir game for the VIVO mini-game platform. It utilizes `Laya.loader.loadPackage` to load sub-packages named \"sub1\" and \"sub2\", then loads assets from within those packages.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/vivo/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        //小游戏加载分包\n        Laya.loader.loadPackage(\"sub1\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n                let sp3: Laya.Sprite3D = res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub2/Sphere.lh\").then((res: any) => {\n                let sp3 = res.create();\n                this.scene3d.addChild(sp3);\n            });\n        })\n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Inspector UI for Custom Import Settings (TypeScript)\nDESCRIPTION: Defines editor-side TypeScript classes that create inspector layouts for configuring import settings of asset types. DemoABCImportSettings is registered with custom properties via @IEditor.regClass, and DemoInspectorLayout connects these settings to assets with the 'abc' extension. Used only within the editor UI for meta-driven configuration; no engine dependencies required. Accepts asset meta references; outputs inspector panels reflecting and updating meta.importer fields.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditor.regClass()\nexport class DemoABCImportSettings {\n    @IEditor.property(String)\n    name: string = \"\";\n\n    @IEditor.property(Number)\n    age: number = 18;\n\n    @IEditor.property(Number)\n    gender: number =1;\n}\n\n@IEditor.inspectorLayout(\"asset\")\nexport class DemoInspectorLayout extends IEditor.MetaDataInspectorLayout {\n    constructor() {\n        super(DemoABCImportSettings);\n    }\n\n    accept(asset: IEditor.IAssetInfo): boolean {\n        return asset.ext === \"abc\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Single Collision Group Filter in LayaAir\nDESCRIPTION: Configures a collider to only interact with a specific collision group. This creates a filter that only allows collision with the specified group and prevents collision with all others.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器可以与其发生碰撞的碰撞组(本例只与自定义组1碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Editor Panel for Settings UI in LayaAir IDE\nDESCRIPTION: Constructs an inspector panel to display and allow modification of custom settings data within the IDE's project or user interface. The panel uses the 'usage' parameter to specify where it appears, such as project settings, build settings, or preferences.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.panel(\"TestSettings\", { usage: \"project-settings\", title: \"测试\" })\nexport class TestSettings extends IEditor.EditorPanel {\n    async create() {\n        let panel = IEditor.GUIUtils.createInspectorPanel();\n        panel.inspect(Editor.getSettings(\"MyTestSettings\").data, \"MyTestSettings\");\n        this._panel = panel;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Script Class in LayaAir (TypeScript)\nDESCRIPTION: Applies the `@regClass()` decorator to a custom script class that extends `Laya.Script`. This registration enables the LayaAir editor to recognize the script and allows its properties (marked with `@property`) to be exposed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/Script/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@regClass()\nexport class Main extends Laya.Script\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for PixelLineSprite3D in LayaAir\nDESCRIPTION: The constructor method for PixelLineSprite3D class automatically adds the PixelLineRenderer component and sets up an UnlitMaterial with vertex color enabled. It accepts parameters for maximum line count and object name.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/PixelLine/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 创建一个 <code>PixelLineSprite3D</code> 实例。\n * @param maxCount 最大线段数量。\n * @param name 名字。\n */\nconstructor(maxCount: number = 2, name: string = null) {\n    super(name);\n\n    this._render = this.addComponent(PixelLineRenderer);\n    this._geometryFilter = (this._render as PixelLineRenderer)._pixelLineFilter;\n    (this._render as PixelLineRenderer).maxLineCount = maxCount;\n    let material = this._render.material = new UnlitMaterial();\n    material.enableVertexColor = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Sprite Graphic Bounds using getGraphicBounds - TypeScript\nDESCRIPTION: Creates a spritesheet, draws a rectangle, and then retrieves its graphic bounds using getGraphicBounds. Adds the sprite to the stage. Requires Laya.Sprite and Laya.Rectangle types. Shows how to calculate display object boundaries for layout, but getBounds should not be called too frequently due to computational cost.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.graphics.drawRect(0,0,100,100,\"#FF0000\");\nvar bounds:Laya.Rectangle=sp.getGraphicBounds();\nLaya.stage.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Shader Pass Definition\nDESCRIPTION: Shows how to define a shader pass with vertex and fragment shaders, including rendering pipeline information. This example uses a forward rendering pipeline with textureVS as the vertex shader and texturePS as the fragment shader.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_9\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n    type:Shader3D,\n    name:Sprite2DTextureShader,\n    shaderType:2,\n    uniformMap:{\n    },\n    attributeMap: {\n        a_posuv: Vector4,\n        a_attribColor: Vector4,\n        a_attribFlags: Vector4,\n    },\n    defines: {\n        TEXTUREVS: { type: bool, default: true, private: false },\n        GRAY: { type: bool, default: false, private: false }\n    },\n    shaderPass:[\n        {\n            pipeline:Forward,\n            VS:textureVS,\n            FS:texturePS\n        }\n    ]\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Zip File Handling and Extraction via ZipFile Interface (TypeScript)\nDESCRIPTION: This TypeScript interface declares methods and structure of a ZipFile object for internal use in LayaNative resource updates. It includes methods for setting the source zip, iterating entries, reading contents as ArrayBuffer or text, and resource cleanup. All files are extracted in memory, so large archives can cause out-of-memory crashes; care should be taken with zip file size. Required prerequisites are access to the LayaNative runtime and appropriate zip files in local storage. Input parameters control the zip file path, entry enumeration, and extraction, returning buffers or strings as per method signature.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/zipUpdate/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ZipFile{\n    /**\n     * \\u6ce8\\u610f\\u8fd9\\u4e2a\\u6587\\u4ef6\\u4e0d\\u8981\\u592a\\u5927\\uff0c\\u56e0\\u4e3a\\u9700\\u8981\\u5728\\u5185\\u5b58\\u4e2d\\u89e3\\u5f00\\uff0c\\u592a\\u5927\\u4e86\\u4f1a\\u76f4\\u63a5\\u5bfc\\u81f4\\u5d29\\u6e83\\u3002\n     */\n    setSrc(src:string):boolean;\n    /**\n     * \\u904d\\u5386zip\\u4e2d\\u7684\\u6587\\u4ef6\\u3002\n     * id:\n     * name:\\u6587\\u4ef6\\u540d\\uff0c\\u5305\\u542b\\u8def\\u5f84\n     * dir:\\u662f\\u5426\\u662f\n     * sz:\\u6587\\u4ef6\\u5927\\u5c0f\n     */\n    forEach(func:(id:number,name:string,dir:boolean,sz:number)=>void):void;\n    /**\n     * \\u4e0d\\u8981\\u7528\\u3002\n     */\n    readFile1():void;\n    /**\n     * \\u8bfb\\u53d6zip\\u4e2d\\u7684\\u6587\\u4ef6\\u7684\\u5185\\u5bb9\\uff0c\\u8fd4\\u56de\\u4e00\\u4e2aArrayBuffer\n     */\n    readFile(id:number):ArrayBuffer;\n    close():void;\n    readAsTextByName(name:string):string;\n    readAsArrayBufferByName(name:string):ArrayBuffer;\n    new ():ZipFile;\n}\n\ndeclare var ZipFile:ZipFile;\n```\n\n----------------------------------------\n\nTITLE: Coordinate Nodes Description\nDESCRIPTION: This part defines the coordinate nodes like PositionWS, normalWS, tangentWS, biNormalWS, and worldMat, with their corresponding explanations and diagrams.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Restoring Original Resources via CLI (Bash)\nDESCRIPTION: Example command using `layadcc2 checkout` to extract the original resource structure from the specified DCC directory (`./dcc1`) based on its `head.json` file, outputting to a `checkout` directory.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlayadcc2 checkout ./dcc1\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Script Info in TypeScript\nDESCRIPTION: This snippet demonstrates the `setPlayScriptInfo` function, a lifecycle function called to provide the animation script with information about the animator component, layer index, and animation state. It's crucial for accessing and manipulating the animation state within the script.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n /**说明\n     * setPlayScriptInfo为生命周期函数，如果想获得动画状态机的信息，必须要调用。\n     * @param animator 当前脚本的动画组件\n     * @param layerindex 当前脚本所处的动画状态机层级\n     * @param playState  当前脚本的动画状态机\n     */\n     setPlayScriptInfo(animator: Laya.Animator | Laya.Animator2D, layerindex: number, playstate: Laya.AnimatorState | Laya.AnimatorState2D) {\n         this.playStateInfo.animator = animator;\n         this.playStateInfo.layerindex = layerindex;\n         this.playStateInfo.playState = playstate;\n     }\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources with Mixed Type Specifications in LayaAir Engine\nDESCRIPTION: Shows how to load multiple resources where some require type specification while others don't. This flexible approach allows handling different resource types in a single load operation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Loader/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        let resArr: Array<any> = [\n            \"image/bird.jpg\",\n            \"image/cloud.png\",\n            {\n                url: \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\",\n                type: \"image\"\n            },\n            {\n                url: \"https://layaair.com/3.x/demo/resources/res/apes/monkey1.png\",\n                type: Laya.Loader.IMAGE\n            }\n        ];\n        this.loadTextures(resArr);\n    }\n\n    /** 加载多个资源 \n     * @param url 资源数组\n    */\n    loadTextures(url: Array<string>): void {\n        //加载回调返回的类型，如果是多样的，最好是any\n        Laya.loader.load(url).then((res: Array<any>) => {\n            let sp: Laya.Sprite = new Laya.Sprite();\n            this.owner.addChild(sp);\n            let i: number = 0;\n            //每秒重画一次\n            Laya.timer.loop(1000, this, () => {\n                i == res.length && (i = 0);\n                //清除sp节点的所有绘图（不含子节点）\n                sp.graphics.clear();\n                //在sp节点上重绘纹理\n                sp.graphics.drawTexture(res[i]);\n                i++;\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying ADB Device Connection via Command Line\nDESCRIPTION: Shows the command-line instruction used with the Android Debug Bridge (ADB) utility to list all connected and authorized Android devices. This command helps verify that the development PC recognizes the connected OPPO phone, which is a prerequisite for pushing the game package (.rpk) and enabling debugging functionalities.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/OPPO/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nadb devices\n```\n\n----------------------------------------\n\nTITLE: Creating Spot Light Component in LayaAir\nDESCRIPTION: This snippet shows how to create a SpotLight2D component and set its properties, including color, intensity, innerRadius, outerRadius, innerAngle, and outerAngle, to create a spotlight effect. Shadow is also enabled for the spotlight.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/LightOccluder2D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    // 创建聚光灯\n    createSpotLight(): void {\n        this.spotLight.pos(50, 350);\n        this.spotLight.rotation = 70;\n        this.owner.addChild(this.spotLight);\n        let spotLightComponent = this.spotLight.addComponent(Laya.SpotLight2D);\n        spotLightComponent.color = new Laya.Color(0.937, 1, 0);\n        spotLightComponent.intensity = 1.25;\n        spotLightComponent.innerRadius = 100;\n        spotLightComponent.outerRadius = 500;\n        spotLightComponent.innerAngle = 90;\n        spotLightComponent.outerAngle = 120;\n        // 开启阴影\n        spotLightComponent.shadowEnable = true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebXR Controller Input Mapping for VR Interaction (TypeScript)\nDESCRIPTION: This comprehensive snippet extends XR initialization by setting up controller input mapping for interactive VR experiences in LayaAir. After initializing the XR session and camera, it loads controller models, creates visualization lines, binds these to XR controller hands, and sets up event listeners for both buttons (including triggers, joysticks, and main action keys) and axes. Events handled include pressing, touching, and axis changes, mapped for both left and right controllers. Dependencies: the LayaAir engine, compatible XR controller assets (GLTF), and WebXRInputManager. Input includes XR input references; outputs are interactive, event-driven controller behaviors such as object picking or transformation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/WebXR/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** 初始化XR */\nasync initXR(){\n  //创建一个webXR的摄像机\n  let caInfo : WebXRCameraInfo = new WebXRCameraInfo();\n  //设置远裁面\n  caInfo.depthFar = this.camera.farPlane;\n  //设置近裁面\n  caInfo.depthNear = this.camera.nearPlane;\n  //申请XR的交互，传入VR需要的信息\n  let webXRSessionManager = await WebXRExperienceHelper.enterXRAsync(\"imersive-vr\",\"local\",caInfo);\n  //设置WebXR摄像机\n  let webXRCameraManager = WebXRExperienceHelper.setWebXRCamera(this.camera, webXRSessionManager);\n  //注意，这里开始对VR进入手柄输入的控制交互\n  let webXRInput = WebXEExperienceHelper.setWebXRInput(webXRSessionManager, webXRCameraManager); \n  this.bindMeshRender(webXRInput);\n}\nbindMeshRender(webXRInput:WebXRInputManager){\n        let rightControl = Laya.loader.getRes(\"res/OculusController/controller.gltf\") as Sprite3D;\n        let leftControl = Laya.loader.getRes(\"res/OculusController/controller-left.gltf\") as Sprite3D;\n        let pixelright = new PixelLineSprite3D(20,\"right\");\n        let pixelleft = new PixelLineSprite3D(20,\"left\");\n        this.scene.addChild(rightControl);\n        this.scene.addChild(leftControl);\n        this.scene.addChild(pixelright);\n        this.scene.addChild(pixelleft);\n        webXRInput.bindMeshNode(leftControl,WebXRInput.HANDNESS_LEFT);\n        webXRInput.bindMeshNode(rightControl,WebXRInput.HANDNESS_RIGHT);\n        webXRInput.bindRayNode(pixelleft,WebXRInput.HANDNESS_LEFT);\n        webXRInput.bindRayNode(pixelright,WebXRInput.HANDNESS_RIGHT);\n        //获得xrInput的帧循环方案\n        webXRInput.getController(WebXRInput.HANDNESS_RIGHT).on(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT,this,this.getRightInput);\n        webXRInput.getController(WebXRInput.HANDNESS_LEFT).on(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT,this,this.getLeftInput);\n        /**\n         * 0    扳机\n         * 1    侧扳机\n         * 3     摇杆按下\n         * 4    X、A键\n         * 5    Y、B键\n         */\n        // 左控制器监听\n        let leftXRInput = webXRInput.getController(WebXRInput.HANDNESS_LEFT);\n        // 左控制器的按钮事件监听\n        leftXRInput.addButtonEvent(0,ButtonGamepad.EVENT_TOUCH_OUT,this,this.LeftbuttonEvent0);\n        // 注意同一按钮的不同触发\n        leftXRInput.addButtonEvent(1,ButtonGamepad.EVENT_TOUCH_STAY,this,this.LeftbuttonEvent1);\n        leftXRInput.addButtonEvent(1,ButtonGamepad.EVENT_TOUCH_OUT,this,this.LeftbuttonEvent1_1);\n        leftXRInput.addButtonEvent(3,ButtonGamepad.EVENT_TOUCH_OUT,this,this.LeftbuttonEvent3);\n        leftXRInput.addButtonEvent(4,ButtonGamepad.EVENT_TOUCH_ENTER,this,this.LeftbuttonEvent4);\n        leftXRInput.addButtonEvent(5,ButtonGamepad.EVENT_TOUCH_OUT,this,this.LeftbuttonEvent5);\n        // 左控制器的摇杆事件监听\n        leftXRInput.addAxisEvent(1,AxiGamepad.EVENT_OUTPUT,this,this.LeftAxisEvent);\n        // 右控制器监听\n        let rightXRInput = webXRInput.getController(WebXRInput.HANDNESS_RIGHT);\n        // 右控制器的按钮事件监听\n        rightXRInput.addButtonEvent(0,ButtonGamepad.EVENT_PRESS_ENTER,this,this.RightbuttonEvent0);\n        rightXRInput.addButtonEvent(0,ButtonGamepad.EVENT_PRESS_VALUE, this, this.rightTriggerOn);\n        // 注意同一按钮的不同触发\n        rightXRInput.addButtonEvent(1,ButtonGamepad.EVENT_PRESS_STAY,this,this.RightbuttonEvent1);\n        rightXRInput.addButtonEvent(1,ButtonGamepad.EVENT_PRESS_OUT,this,this.RightbuttonEvent1_1);\n        rightXRInput.addButtonEvent(3,ButtonGamepad.EVENT_PRESS_OUT,this,this.RightbuttonEvent3);\n        rightXRInput.addButtonEvent(4,ButtonGamepad.EVENT_PRESS_ENTER,this,this.RightbuttonEvent4);\n        rightXRInput.addButtonEvent(5,ButtonGamepad.EVENT_PRESS_OUT,this,this.RightbuttonEvent5);\n        // 右控制器的摇杆事件监听\n        rightXRInput.addAxisEvent(1,AxiGamepad.EVENT_OUTPUT,this,this.RightAxisEvent);\n    }\n/** 省略的代码请前往官网示例查看 **/\n```\n\n----------------------------------------\n\nTITLE: Configuring SpriteLight2D component via TypeScript script\nDESCRIPTION: This snippet demonstrates how to programmatically load a sprite texture and configure sprite-based lighting and related scene components in a LayaAir 3D scene. It includes setup for sprite light, directional light, and background mesh, highlighting how to dynamically assign textures, set properties, and generate mesh data for custom lighting effects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/SpriteLight2D/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class SpriteLight extends Laya.Script {\n\n    @property({type: Laya.Sprite})\n    private spriteLight: Laya.Sprite;\n\n    @property({type: Laya.Sprite})\n    private directLight: Laya.Sprite;\n\n    @property({type: Laya.Sprite})\n    private background: Laya.Sprite;\n\n    // 组件启用时调用，在节点添加到场景后执行\n    onEnable(): void {\n        // 加载精灵光图片资源\n        Laya.loader.load(\"resources/spritelight.png\", Laya.Loader.IMAGE).then(() => {\n            this.setSpriteLight();\n            this.setDirectLight();\n            this.setBackground();\n        });\n    }\n\n    // 设置精灵光属性\n    setSpriteLight(): void {\n        this.spriteLight.pos(100,350);\n        let spritelightComponent = this.spriteLight.getComponent(Laya.SpriteLight2D);\n        spritelightComponent.color = new Laya.Color(1, 1, 1);\n        spritelightComponent.intensity = 0.5;\n        let tex = Laya.loader.getRes(\"resources/spritelight.png\");\n        spritelightComponent.spriteTexture = tex;\n    }\n\n    // 设置方向光参数\n    setDirectLight(): void {\n        let directlithtComponent = this.directLight.getComponent(Laya.DirectionLight2D);\n        directlithtComponent.color = new Laya.Color(1, 1, 1);\n        directlithtComponent.intensity = 0.2;\n    }\n\n    // 设置背景Mesh，实现光照接收\n    setBackground(): void {\n        let mesh2Drender = this.background.getComponent(Laya.Mesh2DRender);\n        mesh2Drender.sharedMesh = this.generateRectVerticesAndUV(1000, 1000);\n        mesh2Drender.lightReceive = true;\n    }\n\n    // 生成矩形网格\n    private generateRectVerticesAndUV(width: number, height: number): Laya.Mesh2D {\n        const vertices = new Float32Array(4 * 5);\n        const indices = new Uint16Array(2 * 3);\n        let index = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 1;\n\n        vertices[index++] = 0;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n\n        index = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = 3;\n\n        indices[index++] = 1;\n        indices[index++] = 2;\n        indices[index++] = 3;\n\n        const declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n        const mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([\n            vertices\n        ], [declaration], indices, Laya.IndexFormat.UInt16, [{ length: indices.length, start: 0 }]);\n        return mesh2D;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript Code via eval in LayaAir with TypeScript\nDESCRIPTION: This small snippet demonstrates loading JavaScript source code as a string and executing it using the eval function on the browser window object. After evaluating the loaded code, it instantiates the Demo1 class from the evaluated script and calls its start method. This approach is functionally similar to assigning script.innerHTML but is discouraged due to security and performance considerations. It relies on a proper JavaScript string input and has the same-origin restrictions as innerHTML loading.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate completeHandler(e:any):void\n{\n  \tLaya.Browser.window.eval(e);\n  \tvar client:any = new Laya.Browser.window.Demo1();\n  \tclient.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Integer Addition Function Using LayaAir Native Extension C API - C\nDESCRIPTION: Defines a C++ function that reads two integer arguments from the JavaScript VM, sums them, and returns the result as a JavaScript integer value. Requires the LayaAir extension C API and proper environment setup; dependencies include headers and linking with the LayaNative-provided SDK. Function inputs are two integers from JS, output is their sum as a JS integer. Intended for exposure to JavaScript via registration in LayaExtInit.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/extension/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsAdd(jsvm_env env, jsvm_callback_info info) {\n    jsvm_status status;\n    size_t argc = 2;\n    jsvm_value args[2];\n    jsvm_value _this;\n    jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr);\n\n    int int1,int2;\n    jsvm_get_value_int32(env, args[0], &int1);\n    jsvm_get_value_int32(env, args[1], &int2);\n\n    jsvm_value result;\n    jsvm_create_int32(env, int1+int2, &result);\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Scene - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to open a scene using `Laya.Scene.open`. It loads the scene from the specified URL, optionally closing other scenes and passing parameters to the opened scene. It also supports complete and progress handlers. The function returns a Promise that resolves with the loaded scene instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 加载并打开场景\n     * @param\turl\t\t\t场景地址\n     * @param\tcloseOther\t是否关闭其他场景，默认为true（可选），【注意】被关闭的场景，如果没有设置autoDestroyAtClosed=true，则资源可能不能被回收，需要自己手动回收\n     * @param\tparam\t\t打开页面的参数，会传递给onOpened方法（可选）\n     * @param\tcomplete\t打开完成回调，返回场景实例（可选）\n     * @param\tprogress\t加载进度回调（可选）\n     */\n    static open(url: string, closeOther: boolean = true, param: any = null, complete: Handler = null, progress: Handler = null): Promise<Scene> {\n        Scene.showLoadingPage();\n        return Scene.load(url, Handler.create(null, this._onSceneLoaded, [closeOther, complete, param]), progress);\n    }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.Scene.open(\"uiDemo/page/OpenScene.ls\", false);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.Scene.open(\"dailog.lh\");\n```\n\n----------------------------------------\n\nTITLE: ShaderName Parameter\nDESCRIPTION: This describes the purpose of the ShaderName text box, which is used to input the ShaderName.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Programmatically Closing WebView in JavaScript\nDESCRIPTION: Code snippet demonstrating how to close a WebView programmatically using the closeExternalLink method available in the conch object in LayaNative environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/webview/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconch.closeExternalLink();\n```\n\n----------------------------------------\n\nTITLE: Network Status Query Implementation in LayaAir-IDE (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to implement network status querying in a LayaAir-IDE script. It uses the window type casting approach to access the conch API and logs the network type to the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/network/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    var nType = (window as any).conch.config.getNetworkType();\n    console.log(\"network type: \" + nType);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Animator Controller Layers by Index in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript example illustrates how to retrieve a specific `AnimatorControllerLayer` from an `Animator` instance using the `getControllerLayer` method. The method takes the layer index (e.g., 0 for the default 'BaseLayer') as an argument and returns the corresponding layer object. This allows for programmatic control and inspection of individual animation layers.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 获取控制器层。\n     */\n    getControllerLayer(layerInex: number = 0): AnimatorControllerLayer {\n        return this._controllerLayers[layerInex];\n    }    \n```\n\nLANGUAGE: typescript\nCODE:\n```\n//获得BaseLayer层AnimatorControllerLayer\nlet animatorControllerLayer : Laya.AnimatorControllerLayer = this.animator.getControllerLayer(0);\n```\n\n----------------------------------------\n\nTITLE: Using Option Parameter with fetch() in LayaAir (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `option` parameter when using the `fetch()` method in LayaAir to load resources. It specifically shows how to pass a blob object to obtain an HTMLImageElement. The option is configured with a `blob` property which holds the image data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n//创建Option\nlet option:any = {};\noption.blob = this.imgBlob;\n//通过传递blob对象获得HTMLImageElement\nLaya.loader.fetch(\"\" ,\"image\", null, option).then((res)=>{\n});\n```\n\n----------------------------------------\n\nTITLE: Material Blending Modes\nDESCRIPTION: This section details the material blending modes in Shader Blueprints, including OPAQUE, CUTOUT, TRANSPARENT, ADDTIVE, and ALPHABLENDED. Each mode defines how the material's color blends with the existing scene colors, impacting transparency and visual effects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Loading and Visualizing Audio Spectrum in LayaAir (TypeScript)\nDESCRIPTION: Demonstrates loading an external MP3 file using Laya.HttpRequest, decoding it with audioContext.decodeAudioData, playing it using AudioBufferSourceNode, and visualizing its frequency spectrum using an AnalyserNode. The visualization is drawn on the LayaAir stage graphics context within a Laya.timer.loop.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Main {\n    private AudioContext:any;\n    private audioContext:any;\n    private analyser:any;\n    private audioBufferSourceNode:any;\n    constructor() {\n        //初始化引擎\n        Laya.init(500, 500);\n        AudioContext = Laya.Browser.window.AudioContext || Laya.Browser.window.webkitAudioContext;\n        this.audioContext = new AudioContext();\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 256;\n        Laya.stage.once(Laya.Event.CLICK,this,this.clickHandler);\n    }\n    private clickHandler(e:any):void\n    {\n        var http:Laya.HttpRequest = new Laya.HttpRequest();\n        http.on(Laya.Event.COMPLETE,this,this.completeHandler);\n        http.send(\"res/3.mp3\",\"\",\"get\",Laya.Loader.BUFFER);\n    }\n    private completeHandler(e:any):void\n    {\n        this.audioContext.decodeAudioData(e,this.decodeAudioData.bind(this));\n    }\n    private decodeAudioData(buffer:any):void\n    {\n        this.audioBufferSourceNode = this.audioContext.createBufferSource();\n        this.audioBufferSourceNode.connect(this.analyser);\n        this.analyser.connect(this.audioContext.destination);\n        this.audioBufferSourceNode.buffer = buffer;\n        this.audioBufferSourceNode.start(0);\n        Laya.timer.loop(1,this,this.drawHandler);\n    }\n    private drawHandler():void\n    {\n        Laya.stage.graphics.clear();\n        var dataArray:Uint8Array = new Uint8Array(this.analyser.frequencyBinCount);\n        this.analyser.getByteFrequencyData(dataArray);\n        var step:number = Math.round(dataArray.length / 60);\n        for (var i:number = 0; i < 40; i++) {\n            var energy:number = (dataArray[step * i] / 256.0) * 50;\n            for (var j:number = 0; j < energy; j++) {\n                Laya.stage.graphics.drawLine(20 * i + 2, 200 + 4 * j,20 * (i + 1) - 2, 200 + 4 * j,\"#ff0000\",1);\n                Laya.stage.graphics.drawLine(20 * i + 2, 200 - 4 * j,20 * (i + 1) - 2, 200 - 4 * j,\"#ffff00\",1);\n            }\n            Laya.stage.graphics.drawLine(20 * i + 2, 200,20 * (i + 1) - 2, 200,\"#ff0000\",1);\n        }\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Post-Processing Effects in LayaAir\nDESCRIPTION: In LayaAir Engine 3.0, custom post-processing effects can be registered using the `@regClass()` keyword before the class definition. This makes the custom effect visible in the Camera's post-processing component's effects list, enabling its use in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/PostProcessing/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n@regClass()\n```\n\n----------------------------------------\n\nTITLE: 通过配置创建 Inspector 面板（LayaAir Editor TypeScript）\nDESCRIPTION: 演示如何利用 IEditor.GUIUtils 和 Editor.typeRegistry 按自定义类型元数据构建可编辑配置面板。依赖 IEditor.GUIUtils、IEditor.DataWatcher 及 Editor.typeRegistry。关键参数包括面板类型名（须全局唯一）、属性字段定义、按钮事件，允许撤销功能。输入为属性定义数组，输出为带有事件处理的 Inspector 面板，可多次调用 inspect。适用需要配置复杂对象或组合编辑的场合。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditor.panel(\"Test\")\nexport class MyPanel extends IEditor.EditorPanel {\n    private _data : any;\n    declare _panel : IEditor.InspectorPanel;\n    async create() {\n        this._panel = IEditor.GUIUtils.createInspectorPanel();\n        \n        Editor.typeRegistry.addTypes([\n            {\n                name : \"MyPanelType\", //请注意，名字是全局唯一的，一定要长\n                properties : [\n                    { name : \"text\", type : \"string\" },\n                    { name : \"count\" , type: \"number\" },\n                    { name : \"actions\", inspector: \"Buttons\",\n                        options : { buttons : [ { caption : \"点我\", event: \"my_click\" } ] }\n                    }\n                ]\n             }\n        ]);\n        \n        this._panel.allowUndo = true; //根据需要设置\n        //如果不需要undo功能，也可以直接this._data = {};\n        this._data = IEditor.DataWatcher.watch({}); \n        \n        //inspect可以多次调用，将多个数据组合在一个面板编辑\n        this._panel.inspect(this._data, \"MyPanelType\");\n        \n        this._panel.on(\"my_click\", ()=> {\n            alert(\"hello\");\n        });\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Setting MouseEnabled Property for Sprite Hierarchy\nDESCRIPTION: This code example shows how to manually control the mouseEnabled property for parent and child sprites, overriding the automatic behavior. It demonstrates setting up event listeners on both parent and child sprites while controlling event propagation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Sprite })\n    public sprite1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    public sprite2: Laya.Sprite;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.sprite1.mouseEnabled = false;//父节点的MouseEnabled赋值为false\n        this.sprite1.on(Laya.Event.MOUSE_DOWN, this, this.test1);//设置监听,sprite1\n        this.sprite2.on(Laya.Event.MOUSE_DOWN, this, this.test2);//设置监听,sprite2\n        console.log(this.sprite1.mouseEnabled);//打印父节点sprite1的MouseEnabled的值：false\n        console.log(this.sprite2.mouseEnabled);//打印子节点sprite2的MouseEnabled的值：true\n    }\n    test1(e: Laya.Event) {\n        console.log('mouseSprite1')\n    }\n    test2(e: Laya.Event) {\n        console.log('mouseSprite2')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Editor Panel UI Component with LayaAir3-IDE Using TypeScript\nDESCRIPTION: Describes how to build a custom editor panel by loading a pre-designed widget from 'editorResources' using the UI framework API. The panel class is decorated with @IEditor.panel to register it with the IDE. Within the create lifecycle method, the panel asynchronously loads a widget and sets up event listeners on UI controls (in this example, logging changes on a text input). Dependencies include the GUI package and the IEditor.EditorPanel base class.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.panel(\"Test\")\nexport class MyPanel extends IEditor.EditorPanel {\n    async create() {\n        this._panel = await gui.UIPackage.createWidget(\"editorResources/UI/MyWidget.widget\");\n        let input: gui.TextInput = this._panel.getChild(\"TextInput\").getChild(\"title\");\n        input.on(\"changed\", () => {\n            console.log(\"改变了！\");\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component Categories Using @classInfo Decorator in TypeScript\nDESCRIPTION: Demonstrates the @classInfo decorator to register a custom component category inside LayaAir's IDE component panel. This enables developers to organize scripts under a user-defined menu and caption, facilitating easier component selection during scene editing. Inputs include metadata properties 'menu' and 'caption' passed into @classInfo, with the class extending Laya.Script. The output is a categorized component list visible in the IDE for streamlined workflow.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo( {\n    menu : \"MyScript\",\n    caption : \"Main\",\n})\nexport class Main extends Laya.Script {\n\n    onStart() {\n        console.log(\"Game start\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Whitelist for LayaAir Mini Games (JavaScript/JSON)\nDESCRIPTION: Shows the configuration of the `MiniAdpter.nativefiles` array within the LayaAir WeChat Mini Game adapter library (`laya.wxmini.js`). This array acts as a whitelist, specifying files or directories (e.g., \"layaNativeDir\", \"wxlocal\", \"resources/layaair.png\") that should always be loaded from the local mini-game package, even if `Laya.URL.basePath` has been set for network loading. This allows developers to enforce local loading for specific critical assets while dynamically loading others from a remote server.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/wechat/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMiniAdpter.nativefiles=[\n    \"layaNativeDir\",\n    \"wxlocal\",\n    \"resources/layaair.png\"\n]\n```\n\n----------------------------------------\n\nTITLE: Tool Utility Class for Converting Mesh to Pixel Lines in TypeScript\nDESCRIPTION: A utility class with a linearModel method that converts a standard 3D mesh into pixel lines. It extracts the positions and indices from a mesh and creates lines for each triangle edge, recursively processing child objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/PixelLine/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//Tool工具类\nexport class Tool {\n    private static transVertex0: Laya.Vector3 = new Laya.Vector3();\n    private static transVertex1: Laya.Vector3 = new Laya.Vector3();\n    private static transVertex2: Laya.Vector3 = new Laya.Vector3();\n    private static corners: Laya.Vector3[] = [];\n    static linearModel(sprite3D: Laya.Sprite3D, lineSprite3D: Laya.PixelLineSprite3D, color: Laya.Color): void {\n        if (sprite3D.getComponent(Laya.MeshFilter)) {\n            var mesh: Laya.Mesh = sprite3D.getComponent(Laya.MeshFilter).sharedMesh;\n            var positions: Array<Laya.Vector3> = [];\n            mesh.getPositions(positions);\n            var indices = mesh.getSubMesh(0).getIndices();\n\n            for (var i: number = 0; i < indices.length; i += 3) {\n                var vertex0: Laya.Vector3 = positions[indices[i]];\n                var vertex1: Laya.Vector3 = positions[indices[i + 1]];\n                var vertex2: Laya.Vector3 = positions[indices[i + 2]];\n                Laya.Vector3.transformCoordinate(vertex0, sprite3D.transform.worldMatrix, this.transVertex0);\n                Laya.Vector3.transformCoordinate(vertex1, sprite3D.transform.worldMatrix, this.transVertex1);\n                Laya.Vector3.transformCoordinate(vertex2, sprite3D.transform.worldMatrix, this.transVertex2);\n                lineSprite3D.addLine(this.transVertex0, this.transVertex1, color, color);\n                lineSprite3D.addLine(this.transVertex1, this.transVertex2, color, color);\n                lineSprite3D.addLine(this.transVertex2, this.transVertex0, color, color);\n            }\n        }\n\n        for (var i: number = 0, n: number = sprite3D.numChildren; i < n; i++)\n            Tool.linearModel((<Laya.Sprite3D>sprite3D.getChildAt(i)), lineSprite3D, color);\n    }\n\n    constructor() {\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Environment Detection Example in LayaAir\nDESCRIPTION: TypeScript example showing how to check the runtime environment in a LayaAir project. This code demonstrates how to conditionally execute code based on the detected browser type.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n//如果是Chrome浏览器\nif (Laya.Browser.onChrome) {\n\tconsole.log(\"Chrome\");\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - TRANSPARENT Material\nDESCRIPTION: This snippet describes the TRANSPARENT blending mode. The final color is a function of the source color's opacity, the target color, and opacity. It requires the blending mode to be set to transparent to work correctly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Using Imported Native DLL Function in Component Class - TypeScript\nDESCRIPTION: Demonstrates usage of the imported native DLL function 'nativeAdd' in a LayaAir component class. The code alerts the result of the addition when the component starts. Requires a TypeScript-aware LayaAir project, the previously defined 'testLib', and correct DLL import. Inputs are static values (10 and 11), and output is the sum displayed via alert. Method can be extended for dynamic input.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/extension/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testLib } from \"./TestLib\";\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    onStart() {\n        alert(testLib.nativeAdd(10, 11));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Web Build Script for LayaAirIDE - TypeScript\nDESCRIPTION: This TypeScript code defines a 'MyScript' class with a static 'buildWeb' method to automate web platform builds in LayaAirIDE using the BuildTask API. The method is registered globally with '@IEditorEnv.regClass()', and the build process is asynchronous, waiting for completion before exiting. Requires the LayaAirIDE scripting API and proper project structure.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/commandLine/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regClass()\nclass MyScript {\n    static async buildWeb() {\n        return IEditorEnv.BuildTask.start(\"web\").waitForCompletion();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Calling Native Function in Main.ts\nDESCRIPTION: This code shows how to call a native function (nativeAdd) from within a LayaAir script. The `onStart` function gets called when the script starts and displays the result of the native function through an alert. Requires the LayaExt.dll to be properly imported and set up.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testLib } from \"./TestLib\";\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    onStart() {\n        alert(testLib.nativeAdd(10, 11));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Index Format Setting LayaAir3-IDE\nDESCRIPTION: Explains the 'index Format' setting, which controls the precision and range of the index data that determines the position of vertices, affecting rendering performance and quality. Includes the options 'Automatic', 'UInt16', and 'UInt32', and describes the considerations for choosing each.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_8\n\nLANGUAGE: other\nCODE:\n```\n自动：自动是默认选项，该模式下，LayaAir会根据顶点数来自动决定使用哪一种数据格式，默认会优先使用UInt16，当顶点数超过65535时，会自动切到UInt32数据格式。\n```\n\n----------------------------------------\n\nTITLE: Structuring a LayaAir Shader3D File (TypeScript)\nDESCRIPTION: Outlines the basic structure of a LayaAir `.shader` file using the `Shader3D Start/End` block. It defines metadata like `type`, `name`, flags for `enableInstancing` and `supportReflectionProbe`, a `uniformMap` for shader variable declarations, and a `shaderPass` array defining rendering passes with associated Vertex Shader (VS) and Fragment Shader (FS) names.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n\ttype:Shader3D\n\tname:exmpleShader\n    enableInstancing:true,\n    supportReflectionProbe:false,\n\tuniformMap: {\n\t\tu_MVPMatrix : {type: Matrix4x4},\n\t\tu_OutLineWidth : {type: float, default:0.0}\n\t}\n\tshaderPass:[\n\t\t{\n\t\t\tpipeline:Forward,\n\t\t\tVS:OutLineVS,\n\t\t\tFS:OutLineFS\n\t\t}\n\t\t{\n\t\t\tpipeline:Forward,\n\t\t\tVS:OutLine1VS,\n\t\t\tFS:OutLine1FS\n\t\t}\n\t]\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Instantiating Prefab Resources with Addressables.instantiateAsync in TypeScript\nDESCRIPTION: Shows how to create a runtime instance of the first matching prefab resource using Addressables.instantiateAsync in TypeScript. The key parameter is used for resource selection; options may further refine behavior. This function returns a Promise with a LoadResult, and if the loaded asset is a prefab, LoadResult.data contains the instantiated node. Other non-prefab resources are ignored. Requires LayaAir Addressables runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 创建资源的实例\n * @description 在 {@link LoadResult.data} 中返回创建的实例，仅当加载的资源是一个Prefab时有效\n * @param key 用来筛选资源的关键字\n * @param options\n * @return {Promise<LoadResult>}\n */\nstatic async instantiateAsync(key: string, options?: InstantiateOptions): Promise<LoadResult> ;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nonStart(): void {\n    Addressables.instantiateAsync('test1').then((result: LoadResult) => {\n        console.log(result);\n    });\n\n    Addressables.instantiateAsync('test3').then((result: LoadResult) => {\n        console.log(result);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Script for Configuring HBox Properties\nDESCRIPTION: This script demonstrates how to programmatically set properties of an HBox component, such as position, background color, spacing, and vertical alignment, upon scene initialization. Dependencies include LayaAir engine's script and HBox class; inputs are property values, and outputs are configured HBox UI elements.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/HBox/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.HBox })\n    public hbox: Laya.HBox;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.hbox.pos(100, 100);\n        this.hbox.bgColor = \"#ffffff\";\n        this.hbox.space = 100;\n        this.hbox.align = \"middle\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 2D Node Properties in LayaAir Component Scripts with TypeScript\nDESCRIPTION: This snippet demonstrates how to expose a 2D node of type Laya.Sprite as a script property using @property decorator for interactive manipulation. It shows setting size and loading an image texture in the onAwake lifecycle method. Dependencies include importing regClass and property from Laya. Input is a Sprite instance dragged from the scene, and output is visual modification of the Sprite in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite})\n    public spr: Laya.Sprite;\n    \n    onAwake(): void {\n        this.spr.size(512, 313); //设置Sprite大小\n        this.spr.loadImage(\"atlas/comp/image.png\"); //添加纹理\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Get/Set Layer Mask - TypeScript\nDESCRIPTION: Gets or sets the layer mask of the node. The `get layer()` method retrieves the current layer mask. `set layer(value: number)` sets the layer mask. The `addLayer()` method adds the layer to the camera's mask. Requires a Sprite3D instance and a Camera instance for `addLayer`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 蒙版层。\n     */\n    get layer(): number \n\n    set layer(value: number)\n    \n    //添加显示图层(为相机添加一个蒙版)\n\tthis.camera.addLayer(5);\n```\n\n----------------------------------------\n\nTITLE: Caching a Sprite as a Bitmap with cacheAs in TypeScript\nDESCRIPTION: Illustrates creating a Sprite, adding it to the stage, and setting its `cacheAs` property to `\"bitmap\"`. This optimizes rendering for static content by caching it as a bitmap image.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\nLaya.stage.addChild(sprite);\n//缓存为静态图像\nsprite.cacheAs = \"bitmap\"\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Particle3D and Pool Classes in LayaAir\nDESCRIPTION: This code snippet demonstrates how to use the custom Particle3D and Pool classes within a LayaAir script. It shows how to load particle effect resources, create particle effects on mouse clicks, and clear the object pool on mouse release.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/particleEditor3D/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\nimport { Particle3D } from \"./Particle3D\";\n\n@regClass()\nexport class Main extends Laya.Script {\n\n\t//粒子特效的路径\n    private filePath = \"FireEffect\";\n    onStart() {\n        console.log(\"Game start\");  \n        //加载粒子特效资源\n        Laya.loader.load(this.filePath, Handler.create(this, () => {    \n        }));        \n    }\n\n\t//每次鼠标点下屏幕后，会创建一个特效\n    mouseDown(e: Event): void {\n        var particle = Particle3D.Create(this.filePath);\n        this.owner.addChild(particle);             \n    }\n\n\t//鼠标抬起后，会释放对象池\n    mouseUp(e: Event): void {\n        Particle3D.ClearPool(this.filePath);      \n    }    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Executing Custom Functions in Scene Process with Async Calls from UI Process in TypeScript\nDESCRIPTION: Illustrates defining a static method decorated with @IEditorEnv.regClass in the Scene process, which is callable asynchronously from the UI process using Editor.scene.runScript. It highlights the this context as the IGameScene and shows example usage of logging and returning values. This enables bi-directional, script-based inter-process communication for enhancing plugin functionality.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是场景进程的代码\n\n//注意：IEditorEnv.regClass是必须的\n@IEditorEnv.regClass()\nexport class TestSceneScript {\n    //注意：this是当前的IEditorEnv.IGameScene对象，如果不需要，也可以省略这个声明\n    static test(this: IEditorEnv.IGameScene, msg: string) {\n        console.log(msg); //hello\n        \n        return \"ok\";\n    }\n}\n//下面是UI进程的代码\n\nlet ret = await Editor.scene.runScript(\"TestSceneScript.test\", \"hello\");\nconsole.log(ret); //ok\n```\n\n----------------------------------------\n\nTITLE: Defining Shader3D Shader Start/End with Basic Properties - TypeScript\nDESCRIPTION: Defines the skeleton structure of a Shader3D configuration file in LayaAir using a TypeScript-like syntax. It encloses shader passes, render states, and material parameters between 'Shader3D Start' and 'Shader3D End'. This block can include assignments like 'name' for shader identity and 'type' to specify Shader3D type (currently the only supported). It serves as a container for all properties that define behavior and appearance of a shader.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nShader3D Start\n{\n\t//此处填写Shader渲染pass、渲染状态、材质参数等属性\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Implementing a simple WebSocket server with Protobuf in Node.js\nDESCRIPTION: JavaScript code for a Node.js server that uses WebSocket to receive and send binary data encoded with Protocol Buffers, responding to client messages.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n//C:\\server\\node\\protobuf\\server.js\nconst WebSocket = require(\"ws\");\nconst protobuf = require(\"protobufjs\");\n\n// 加载 .proto 文件，与客户端一致\nprotobuf.load(\"./protobuf.proto\", (err, root) => {\n    if (err) throw err;\n\n    // 获取消息类型\n    const ChatMessage = root.lookupType(\"ChatMessage\");\n\n    // 创建 WebSocket 服务器，并定义了8080端口，需要与客户端请求的端口保持一致\n    const wss = new WebSocket.Server({ port: 8080 });\n\n    wss.on(\"connection\", (ws) => {\n        console.log(\"Client connected\");\n\n        // 监听消息\n        ws.on(\"message\", (data) => {\n\n            // 将接收到的二进制数据buffer解码(反序列化)为ChatMessage对象\n            const receivedMessage = ChatMessage.decode(new Uint8Array(data));\n            console.log(\"Received ChatMessage from client:\", receivedMessage);\n\n            // 回复一个打招呼消息\n            const responseMessage = { user: \"Server\", message: `Hello, ${receivedMessage.user}!`, timestamp: Date.now() };\n            const responseBuffer = ChatMessage.encode(responseMessage).finish();\n            ws.send(responseBuffer);\n        });\n\n        // 监听关闭事件\n        ws.on(\"close\", () => {\n            console.log(\"Client disconnected\");\n        });\n    });\n\n    console.log(\"WebSocket server is running on ws://localhost:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Asset Importer in LayaAir Editor (TypeScript)\nDESCRIPTION: Defines a TypeScript class extending IEditorEnv.AssetImporter and registers it for the 'abc' extension using the @IEditorEnv.regAssetImporter decorator. The handleImport method contains pre-import logic (like logging), which is called during the IDE import process when abc files are introduced or modified. Dependencies: IEditorEnv.AssetImporter, decorator registration system, and appropriate TypeScript support; accepts files with the specified extension and can pre-process resource data without altering source files.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditorEnv.regAssetImporter([\"abc\"])\nexport class DemoAssetImporter extends IEditorEnv.AssetImporter {\n    async handleImport(): Promise<any> {\n        console.log(\"importing abc file\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Achievement from LayaAir - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to set a Steam achievement within a LayaAir project. It initializes Steam upon button click and then sets a specific achievement (`NEW_ACHIEVEMENT_1_0`) by calling the `setAchievement` function from the `extendLib` object. Additionally, it continuously calls the `steamCallback` function within the `onUpdate` method to handle Steam events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extendLib } from \"./extlib\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({type: Laya.Button})\n    public initBtn: Laya.Button;\n\n    @property({type: Laya.Button})\n    public setAchieve: Laya.Button;\n\n    onEnable(): void {\n        this.initBtn.on(Laya.Event.CLICK, this.onInit);\n        this.setAchieve.on(Laya.Event.CLICK, this.achievememtsettings);\n    }\n\n    // 每帧执行\n    onUpdate(): void {\n        extendLib.steamCallback();\n    }\n\n    onInit() {\n        alert(extendLib.initializeSteam());\n    }\n\n    achievememtsettings(): void {\n        if (extendLib.initializeSteam()) {\n            // 解锁成就\n            extendLib.setAchievement(\"NEW_ACHIEVEMENT_1_0\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting iPhone X for UI Adaptation in LayaNative\nDESCRIPTION: JavaScript code to detect iPhone X models by retrieving and parsing device information. Used for adapting UI to accommodate the notch on iPhone X devices.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Other_settings/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif( window.conch )\n{\n    var devInfo = JSON.parse(window.conch.config.getDeviceInfo());\n\n    if (devInfo.devicename === 'iPhone10,3' || devInfo.devicename === 'iPhone10,6')\n    {\n        // iPhone X适配\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding File Extension for Exported Assets (TypeScript)\nDESCRIPTION: Enables output file extension conversion by setting a key-value pair in fileExtensionOverrides. When 'abc' files are exported, they become '.abc.json' in the output directory, allowing compatibility with servers or platforms expecting specific extensions. Input is a mapping; output is exported files with the correct extension mapping applied.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nthis.fileExtensionOverrides[\"abc\"] = \"abc.json\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Line2DRender Component\nDESCRIPTION: This code snippet demonstrates how to initialize a Line2DRender component on a Sprite node. It adds the component and sets its line width, which is essential for controlling the visual appearance of the line.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/2DRender/Line2DRender/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass} = Laya;\n\n@regClass()\n/**\n * 基于2D线渲染器的画线示例脚本\n * 注意：脚本的事件是基于节点的宽高，所以绘制的图形也是在宽高范围内。\n */\nexport class DrawLine extends Laya.Script {\n\n    declare owner: Laya.Sprite;\n\n    line2DRender: Laya.Line2DRender;\n    lastMousePos: number[] = [];\n    isDrawing: boolean = false; // 标记是否正在绘制\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onEnable(): void {\n        // 添加2D线渲染器组件\n        this.line2DRender = this.owner.addComponent(Laya.Line2DRender);\n        // 设置线的宽度\n        this.line2DRender.lineWidth = 5;\n    }\n\n    // 鼠标按下时开始绘制\n    onMouseDown(evt: Laya.Event): void {\n        this.isDrawing = true;\n        // 记录起始点\n        this.lastMousePos[0] = evt.stageX - this.owner.x;\n        this.lastMousePos[1] = evt.stageY - this.owner.y;\n    }\n\n    // 鼠标松开时停止绘制\n    onMouseUp(): void {\n        this.isDrawing = false;\n        this.lastMousePos.length = 0; // 清空上一次的点\n    }\n\n    // 鼠标移动时绘制线段（仅在按下时）\n    onMouseMove(evt: Laya.Event): void {\n        if (!this.isDrawing || this.lastMousePos.length === 0) return;\n\n        const x = evt.stageX - this.owner.x;\n        const y = evt.stageY - this.owner.y;\n\n        // 添加线段\n        this.line2DRender.addPoint(this.lastMousePos[0], this.lastMousePos[1], x, y);\n\n        // 更新最后一个点的坐标\n        this.lastMousePos[0] = x;\n        this.lastMousePos[1] = y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Native browser Objects: document, window, and canvas Container in Laya.Browser TypeScript API\nDESCRIPTION: This snippet defines getters and setters to access native browser global objects via the Laya.Browser class. It includes references to the document and window objects, as well as a custom container div element to hold the canvas for easier DOM control. It also provides utility methods to create, query, and remove DOM elements by interacting with the native document object. Developers can use these methods to integrate iframe elements or manipulate page elements within the LayaAir context. The dependencies include the Browser.__init__ method to ensure environment initialization and proper DOM references.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Browser/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**浏览器原生 document 对象的引用。*/\nstatic get document(): any {\n    Browser.__init__();\n    return Browser._document;\n}    \n\n/**浏览器原生 window 对象的引用。*/\nstatic get window(): any {\n    return Browser._window || Browser.__init__();\n}\n\n/**画布容器，用来盛放画布的容器。方便对画布进行控制*/\nstatic get container(): any {\n    if (!Browser._container) {\n        Browser.__init__();\n        Browser._container = Browser.createElement(\"div\");\n        Browser._container.id = \"layaContainer\";\n        Browser._document.body.appendChild(Browser._container);\n    }\n    return Browser._container;\n}\n\nstatic set container(value: any) {\n    Browser._container = value;\n}\n\n/**\n * 创建浏览器原生节点。\n * @param\ttype 节点类型。\n * @return\t创建的节点对象的引用。\n */\nstatic createElement(type: string): any {\n    Browser.__init__();\n    return Browser._document.createElement(type);\n}\n\n/**\n * 返回 Document 对象中拥有指定 id 的第一个对象的引用。\n * @param\ttype 节点id。\n * @return\t节点对象。\n */\nstatic getElementById(type: string): any {\n    Browser.__init__();\n    return Browser._document.getElementById(type);\n}\n\n/**\n * 移除指定的浏览器原生节点对象。\n * @param\ttype 节点对象。\n */\nstatic removeElement(ele: any): void {\n    if (ele && ele.parentNode) ele.parentNode.removeChild(ele);\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar iframe:any = Laya.Browser.document.createElement(\"iframe\");\niframe.style.position =\"absolute\";//设置布局定位。这个不能少。\niframe.style.zIndex = 100;//设置层级\niframe.style.left =\"100px\";\niframe.style.top =\"100px\";\niframe.src = \"http://ask.layaair.com/\";\nLaya.Browser.document.body.appendChild(iframe);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//Get发送数据\nLaya.Browser.window.open(\"https://layaair.com/\");\n\n//Post发送数据\n//url必须为真实的地址，content表示要发送的数据\nlet win2 = Laya.Browser.window.open(url);\nwin2.postMessage(content, url);// 此处最好加延迟\n\n//监听器注册\nLaya.Browser.window.addEventListener(\"click\", (event: any) => {\n\tconsole.log(event.type);\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.Browser.container.style.display = \"none\";\n```\n\n----------------------------------------\n\nTITLE: Creating MeshTerrainSprite3D from Mesh and Heightmap in TypeScript\nDESCRIPTION: Static factory method 'createFromMeshAndHeightMap' within the 'MeshTerrainSprite3D' class. It takes a Mesh, a heightmap Texture2D, minimum/maximum height values, and optionally a name to create and initialize a MeshTerrainSprite3D instance, which stores terrain height data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 从网格创建一个TerrainMeshSprite3D实例、图片读取高度图属性。\n * @param mesh 网格。\n * @param image 高度图。\n * @param name 名字。\n * @returns 地形渲染节点\n */\nstatic createFromMeshAndHeightMap(mesh: Mesh, texture: Texture2D, minHeight: number, maxHeight: number, name: string = null): MeshTerrainSprite3D {\n\tvar meshTerrainSprite3D: MeshTerrainSprite3D = new MeshTerrainSprite3D(mesh, null, name);\n\tmeshTerrainSprite3D._initCreateFromMeshHeightMap(texture, minHeight, maxHeight);\n\treturn meshTerrainSprite3D;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Switching with Mouse Click in LayaAir TypeScript\nDESCRIPTION: This code demonstrates how to load a 3D model prefab, add it to a Scene3D, and toggle between idle and run animations using mouse clicks. The example uses an Animator component to control animation states.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/importingAnimations/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MainBase } from \"./Main.generated\";\nimport KeyBoardManager = Laya.InputManager;\nimport Keyboard = Laya.Keyboard;\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends MainBase {\n\n    private _animator: Laya.Animator;\n    private _isRun: boolean;\n    onAwake() {\n        console.log(\"Game start\");\n        //加载指定的模型预制体，并添加到Scene3D场景内\n        Laya.loader.load(\"girl/girl.lh\").then(res => {\n            let girl : Laya.Sprite3D = res.create();\n            this.scene3D.addChild(girl); \n            //获得Animator \n            this._animator = girl.getComponent<Laya.Animator>(Laya.Animator);\n        });      \n        this.on( Laya.Event.MOUSE_DOWN, this, this.switchAni );\n    }\n\n    switchAni(): void {\n        if (this._isRun) {\n        \t//播放对应的动画\n            this._animator.play(\"idle\");                \n        } else {\n\t\t\tthis._animator.play(\"run\");\n        }  \n        this._isRun = !this._isRun;\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Shape-Based Ray Casting in LayaAir\nDESCRIPTION: Demonstrates using a custom collider shape (sphere) for ray casting instead of a standard ray. This allows for more complex collision detection patterns using different shaped 'rays'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建球型碰撞器\nvar sphereCollider:Laya.SphereColliderShape = new Laya.SphereColliderShape(0.5);\n\n//通过按钮this.castAll状态切换是采用检测全部还是检测第一个\nif (this.castAll) {\n    //采用球形碰撞器进行形状检测,检测所有碰撞的物体\n    this.scene.physicsSimulation.shapeCastAll(sphereCollider, this.from, this.to, this.outs);\n    for (let i = 0; i < this.outs.length; i++){\n        ((this.outs[i].collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n} else {\n    //采用球形碰撞器进行形状检测,检测第一个碰撞物体\n    if (this.scene.physicsSimulation.shapeCast(sphereCollider, this.from, this.to, this.out))\n        ((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(1.0, 0.0, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Initializing Spine Animation\nDESCRIPTION: This snippet demonstrates how to load and initialize a Spine animation using the LayaAir engine. It loads a Spine JSON file, adds a Spine2DRenderNode component to a node, sets the source, skin, and plays an animation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/2DRender/Spine2DRenderNode/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst { regClass, property } = Laya;\n@regClass()\nexport class Demo extends Laya.Script {\n    spine: Laya.Spine2DRenderNode;\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 加载Spine动画数据资源（json文件），注意一定要设置为Laya.Loader.SPINE类型，否则不会把json认为是SPINE资源\n        Laya.loader.load(\"girl2/mix-and-match-pro.json\", Laya.Loader.SPINE).then(() => {\n            // 添加Spine渲染器组件到精灵节点上\n            this.spine = this.owner.addComponent(Laya.Spine2DRenderNode);\n            this.spine.source = \"girl2/mix-and-match-pro.json\"; // 设置Spine动画数据源\n            this.spine.skinName = \"full-skins/girl\"; // 设置皮肤名称\n            this.spine.play(\"idle\", false); // 播放名称为\"idle\"的动画，false表示不循环播放\n        });\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Injecting DCC into Laya Engine (TypeScript)\nDESCRIPTION: Basic usage pattern for `LayaDCCClient` in a LayaAir web/runtime project. It shows creating a client instance with the DCC server URL, setting the URL prefix (`pathMapToDCC`) that should be handled by DCC, initializing the client with a specific root file URL, and finally injecting the DCC logic into the Laya engine's download manager.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//创建DCC客户端，参数是DCC服务器地址\nlet dcc = new DCCClient('http://localhost:7788/' );\n//设置这个地址下的资源加载走DCC模式\ndcc.pathMapToDCC= 'http://localhost:8899/';\n//通过DCC的根文件初始化dcc客户端\nlet initok = await dcc.init('http://localhost:7788/version.3.0.0.json',null);\n//把dcc功能插入laya引擎\ndcc.injectToLaya();\n```\n\n----------------------------------------\n\nTITLE: Controlling Property Serialization - TypeScript\nDESCRIPTION: This code shows how to control whether a component property is serialized (saved to the scene or prefab file) using the `serializable` option in the `@property()` decorator. Setting `serializable` to `false` prevents the property from being saved.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number })\n    _radian: number = 0;  //带下划线的属性，默认不会出现在IDE的属性面板上，只是用来存储输入的弧度\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) //这里设置serializable为false，所以degree不会被保存到场景文件中\n     get degree() {\n        return this._radian * (180 / Math.PI);//由于自己没有序列化保存，需要把_radian存下来的弧度反算回角度，用于IDE属性面板显示\n    }\n    set degree(value: number) {\n        this._radian = value * (Math.PI / 180);//把输入的角度值，转成弧度给_radian存起来。\n    }\n    \n    onStart() {\n        console.log(this._radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources (Mixed Types) in LayaAir with TypeScript\nDESCRIPTION: This snippet showcases how to load multiple resources with a mix of specified and unspecified types. Some resources in the array are simple URLs, while others are objects with `url` and `type` properties.  This allows for fine-grained control over resource loading. The `.then()` callback handles the array of loaded resources.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load([url1, { url:url2, type: type }]).then((res:Array<any>)=> {  /** 加载多个，按需设置类型，满足各种需要 */   });     \n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Resource Loader with Hot-Reload Support (TypeScript)\nDESCRIPTION: Implements Laya.IResourceLoader and registers a custom loader for 'abc' resources via @Laya.regLoader. The load method supports hot reloading by checking for task.obsoluteInst, reusing the instance if present, and populates its fields via fetched JSON data. Required: Laya.IResourceLoader, Laya.regLoader, TypeScript async/await. Inputs are Laya.ILoadTask; outputs are populated resource instances.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n//因为这个类需要在实际游戏环境中使用，所有请勿和其他包含@IEditorEnv装饰器的脚本混杂在一起\n\n//第三个参数是true，表示资源支持热重载。如果资源需要支持热重载，需要在load方法里判断是否有task.obsuluteInst,\n//如果有，需要使用此实例去重载资源的实际内容并返回。如果不需要支持热重载，则忽略。\n@Laya.regLoader([\"abc\"], null, true)\nexport class DemoAssetLoader implements Laya.IResourceLoader {\n\n    async load(task: Laya.ILoadTask): Promise<any> {\n        let json = await task.loader.fetch(task.url, \"json\");\n        let res = task.obsoluteInst ? task.obsoluteInst : new ABCResource();\n        Object.assign(res, json);\n        return res;\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Member Variables for Baidu Map Implementation\nDESCRIPTION: TypeScript class member variables for Baidu Map implementation. Includes references to the map, marker, namespace, coordinate converter, and container div.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 百度地图\nprivate map: any;// 地图引用\nprivate marker: any;// 地图标注物\nprivate BMap: any = Laya.Browser.window.BMap;// 百度地图命名空间\nprivate convertor: any;// 坐标转换接口\nprivate mapDiv: any;// 包含百度地图的div容器\n```\n\n----------------------------------------\n\nTITLE: Loading Subpackages with Progress Callback in LayaAir for WeChat Mini Games (TypeScript)\nDESCRIPTION: Shows how to load WeChat Mini Game subpackages asynchronously using `Laya.loader.loadPackage`. This two-argument overload takes the subpackage name (e.g., \"sub1\", \"sub2\") and an optional progress callback function (`this.printProgress`). It returns a Promise that resolves upon successful loading, allowing subsequent loading of assets within that package (e.g., `Laya.loader.load(\"sub1/Cube.lh\")`). The progress callback receives status updates from the underlying `wx.loadSubpackage` task, including progress percentage and bytes transferred.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/wechat/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Scene3D })\n    scene3d: Laya.Scene3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        //小游戏加载分包\n        Laya.loader.loadPackage(\"sub1\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n                let sp3: Laya.Sprite3D = res.create() as Laya.Sprite3D;\n                this.scene3d.addChild(sp3);\n            });\n        })\n\n        Laya.loader.loadPackage(\"sub2\", this.printProgress).then(() => {\n            Laya.loader.load(\"sub2/Sphere.lh\").then((res: any) => {\n                let sp3 = res.create();\n                this.scene3d.addChild(sp3);\n            });\n        })\n    }\n\n    printProgress(res: any) {\n        console.log(\"加载进度\" + JSON.stringify(res));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Mouse Event Implementation in Script Component\nDESCRIPTION: Shows how to implement basic mouse event handlers in a custom LayaAir script component. This example logs messages to console when mouse down and up events are triggered.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    /**\n     * 鼠标按下时执行\n     */\n\tonMouseDown(evt: Laya.Event): void {\n        console.log(\"onMouseDown\");\n    }\n    /**\n     * 鼠标抬起时执行\n     */\n    onMouseUp(evt: Laya.Event): void {\n        console.log(\"onMouseUp\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Communicating from Preview Runtime to UI Process in LayaAir3-IDE Using TypeScript\nDESCRIPTION: Demonstrates how code running in the preview process, which lacks Node.js capabilities, can send messages and invoke UI panel methods asynchronously using a global EditorClient object. This inter-process communication pattern enables seamless integration of runtime and editor UI components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet EditorClient = (<any>window).EditorClient;\nEditorClient.postMessageToPanel(\"ProjectPanel\", \"select\", assetId);\n\n//调用自定义的Panel的一个方法，并返回结果\nlet ret = await EditorClient.sendMessageToPanel(\"MyPanel\", \"getResult\");\n\n//使用eval执行一些简单的脚本\nlet ret = await EditorClient.runUIScript(\"window.eval\", `\n    (function() {\n        //do something\n        return \"hello\";\n    }())\n`);\n```\n\n----------------------------------------\n\nTITLE: Converting to Baidu Coordinates and Updating Marker in TypeScript\nDESCRIPTION: This TypeScript snippet converts geographical coordinates to Baidu coordinates, sets the marker's position on the map, and pans the map to center on the marker. It is a callback function triggered after the coordinate conversion is complete.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// 将原始坐标转换为百度坐标\nprivate  convertToBaiduCoord(data: any): void {\n  if  (data.status  ==  0) {\n    var  position: any  =  data.points[0];\n    // 设置标注物位置\n    this.marker.setPosition(position);\n\n    this.map.panTo(position);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Scene Node and Component Properties from UI Process in LayaAir3-IDE Using TypeScript\nDESCRIPTION: Shows how to access and modify scene graph node and component properties directly from the UI process using the Editor API. Property assignments to node or component 'props' are automatically synchronized with the scene without requiring explicit refresh calls. The snippet assumes an active selection of scene nodes and demonstrates toggling basic positional and component state properties on the selected node.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是UI进程代码\n\n//获取选中的节点\nlet node = Editor.scene.getSelection()[0];\n\n//修改节点属性，场景里的对象会自动同步，无需手动\nnode.props.x = 100;\n\n//修改组件属性，场景里的对象会自动同步，无需手动\nnode.getComponent(\"MeshRenderer\").props.enabled = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshTerrainSprite3D Instance in TypeScript\nDESCRIPTION: Demonstrates how to use the 'createFromMeshAndHeightMap' factory method. It loads the heightmap texture, retrieves the mesh from an existing MeshSprite3D, and then creates the 'terrainSprite' (MeshTerrainSprite3D) instance with the specified height range.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//读取高度图\nvar heightMap = Loader.getTexture2D(\"res/threeDimen/scene/TerrainScene/Assets/HeightMap.png\");\n//初始化MeshTerrainSprite3D\nthis.terrainSprite = MeshTerrainSprite3D.createFromMeshAndHeightMap((<Mesh>meshSprite3D.meshFilter.sharedMesh), heightMap, 6.574996471405029, 10.000000953674316);\n```\n\n----------------------------------------\n\nTITLE: Set Collidable Groups via Code (CharacterController)\nDESCRIPTION: This code snippet demonstrates how to set the collidable groups of a CharacterController via code.  It showcases how to set the `canCollideWith` property using bitwise operations to specify which collision groups the CharacterController can collide with, and how to exclude specific groups.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/CharacterController/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//指定xxx碰撞器 可以与  某个碰撞组 发生碰撞\nxxx.canCollideWith = 1 << 2;  //只与分组ID为2的（值为4）分成发生碰撞\n\n//指定xxx碰撞器 可以与 多个碰撞组 发生碰撞\nxxx.canCollideWith = (1 << 1) | (1 << 2) | (1 << 5); //只与分组ID为1、2、5的进行碰撞\n\n//指定xxx碰撞器  不可以  与哪些组 发生碰撞，其它组都可以碰撞\nxxx.canCollideWith = -1 ^ (1 << 3) ^ (1 << 6)  //不与分组3、6进行碰撞，除3与6组之外都可以发生碰撞)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Event Handling for Sprites in LayaAir\nDESCRIPTION: This code snippet demonstrates how to set up mouse events for Sprite objects in LayaAir. It shows how the mouseEnabled property automatically changes to true when mouse events are registered on a Sprite, and logs the mouse event status to the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.Sprite })\n    public sprite1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    public sprite2: Laya.Sprite;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.sprite2.on(Laya.Event.MOUSE_DOWN, this, this.test2);//设置监听，sprite1或sprite2均可\n        console.log(this.sprite1.mouseEnabled);//打印父节点sprite1的MouseEnabled的值：true\n        console.log(this.sprite2.mouseEnabled);//打印子节点sprite2的MouseEnabled的值：true\n    }\n    test2(e: Laya.Event) {\n        console.log('mouseSprite2')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding a Resource from Export\nDESCRIPTION: This snippet shows how to exclude a resource from being exported by setting the `exclude` flag to true in the `@IEditorEnv.regAssetExporter` decorator.  This is used for configuration files or other resources that are only used within the IDE. Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regAssetExporter([\"abc\"], { exclude: \"true\" } )\nexport class DemoAssetExporter extends IEditorEnv.AssetExporter {} //不需要任何实现代码\n```\n\n----------------------------------------\n\nTITLE: 注册和弹出带 ID 菜单（LayaAir Editor TypeScript）\nDESCRIPTION: 为菜单分配唯一 ID，方便全局引用和控制弹出。避免与内置/第三方菜单冲突。依赖 IEditor.Menu.create、IEditor.Menu.getById。输入为菜单结构和 ID，输出为可随时调用 show 的全局菜单对象。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nIEditor.Menu.create(\"MyTestMenu\", [ \n    { label: \"test\" , click : function() { console.log(\"clicked\"); } }\n ]);\n \n //当需要弹出时\n IEditor.Menu.getById(\"MyTestMenu\").show();\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Resources with Laya.Scene3D and Laya.loader in TypeScript\nDESCRIPTION: Illustrates two approaches for loading scene resources in TypeScript using LayaAir: direct loading with Laya.Scene3D.load, and asynchronous loading with Laya.loader.load. Both methods load a '.ls' scene file, accepting callback handlers for completion and progress. For Laya.Scene3D.load, the loaded resource is added to the stage as a child. For Laya.loader.load, the returned promise resolves with a resource that must be created; the resulting object contains both 2D and 3D root nodes. Prerequisites include prior initialization of Laya stage and resource paths. The main inputs are the scene path strings and handler callbacks; outputs are scene objects added to the display hierarchy. Limitations include differentiating between Scene2D and Scene3D roots.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/sceneEditor/environment/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//用Laya.Scene3D的方式加载\nLaya.Scene3D.load('scene/Game.ls', Laya.Handler.create(null, function (res:any){\n\tLaya.stage.addChild(res);\n}));\n\n//用Laya.loader的方式加载，加载后根节点是Scene2D\nLaya.loader.load('scene/Game.ls', Laya.Handler.create(this, this.onLoaded), Laya.Handler.create(this, this.onLoading)).then( (res)=>{\n    let scene = res.create();\n    //scene.scene3D 可以获得Scene3D资源\n    Laya.stage.addChild(scene.scene3D);\n    \n});\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming the Timer Clock in LayaAir (TypeScript)\nDESCRIPTION: Implements the pause and resume methods to stop and restart the main timer by setting the scale property to 0 or 1, respectively. This affects all time-based operations, freezing or resuming animations and scenes globally. Inputs require no arguments beyond the instance context.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 暂停时钟\n */\npause(): void {\n    this.scale = 0;\n}\n\n/**\n * 恢复时钟\n */\nresume(): void {\n    this.scale = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Way to Get Display Object Boundaries Using Graphics.drawTexture and Size Setting in LayaAir TypeScript\nDESCRIPTION: Demonstrates that Graphics.drawTexture does not automatically update container size, so size(width, height) must be set manually for correct bounds. This is the most efficient method to get accurate dimensions for objects loaded asynchronously when compared to getBounds or autoSize. Requires loading texture resource and TypeScript with LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.loader.load(\"res/apes/monkey2.png\",Laya.Handler.create(this,function()\n{\n    var texture=Laya.loader.getRes(\"res/apes/monkey2.png\");\n    var sp=new Laya.Sprite();\n    sp.graphics.drawTexture(texture,0,0);\n    sp.size(texture.width,texture.height);\n    Laya.stage.addChild(sp);\n}));\n```\n\n----------------------------------------\n\nTITLE: Controlling LayaAir Button via Script (TypeScript)\nDESCRIPTION: This TypeScript script (`NewScript`) demonstrates modifying properties of an existing LayaAir Button component, presumably created and linked via the IDE. It sets properties like scale, skin, stateNum, label text, font, size, boldness, alignment, stroke width/color, and state-specific label/stroke colors within the `onAwake` lifecycle method. Requires a Button component instance assigned to the `btn` property.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Button/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Button })\n    public btn: Laya.Button;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.btn.scale(5, 5); //放大五倍\n        this.btn.skin = \"atlas/comp/button.png\"; //皮肤\n        this.btn.stateNum = 3; //皮肤状态\n\n        this.btn.label = \"确定\"; //文本标签\n        this.btn.labelFont = \"宋体\"; //文本标签字体\n        this.btn.labelSize = 20; //文本标签字体大小\n        this.btn.labelBold = true; //文本标签加粗\n        this.btn.labelAlign = \"center\"; //文本标签水平居中对齐\n\n        this.btn.labelStroke = 3; //文本标签字体描边宽度\n        this.btn.labelStrokeColor = \"#ffffff\"; //描边颜色\n        this.btn.strokeColors = \"#000000, #c6ff00, #001aff\"; //各状态下的描边颜色\n        this.btn.labelColors = \"#0100ff, #16fa0e, #ff0000\"; //各状态下的文本颜色\n\n        // this.btn.toggle = true; //是否保持点击状态\n        // this.btn.selected = true; //是否选中\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @property Decorator with Accessors (getter/setter) in TypeScript\nDESCRIPTION: This snippet shows applying the @property() decorator to a getter and setter pair to control a component's property behavior. When both getter and setter exist, the property is read-write and fully editable in the IDE. Decorator is applied directly to the getter. Dependencies include regClass and property imports from Laya. The internal private field stores value, while the getter and setter expose the decorated property.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nclass Animal {\n    private _weight: number = 0;\n    \n    @property( { type : Number } )\n    get weight() : number {\n        return this._weight;\n    }\n    \n    set weight(value: number) {\n        this._weight = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced 3D Node Property Manipulation and Component Access in LayaAir TypeScript\nDESCRIPTION: Illustrates accessing and modifying properties on a 3D node dragged in as a Laya.Sprite3D property, including repositioning using localPosition and adjusting simulationSpeed of an attached particle system component obtained by getComponent. The snippet requires exposure of a Sprite3D property via @property and usage of Laya.Vector3 and particle renderer component APIs for detailed manipulation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property( { type :Laya.Sprite3D } ) //节点类型\n    public p3d: Laya.Sprite3D;\n\n    onAwake(): void {\n\n        this.p3d.transform.localPosition = new Laya.Vector3(0,5,5);\n        let p3dRenderer = this.p3d.getComponent(Laya.ShurikenParticleRenderer);\n        p3dRenderer.particleSystem.simulationSpeed = 10;\n    }\n```\n\n----------------------------------------\n\nTITLE: Clearing Exported Contents for Non-Output Resources (TypeScript)\nDESCRIPTION: Illustrates removal of all content output for an asset by setting exportInfo.contents.length to 0. This is relevant for resources intended solely for use within the IDE, not for deployment or runtime inclusion. No inputs beyond the exportInfo object, output is an empty list (resources are omitted from exported builds).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nthis.exportInfo.contents.length = 0;\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in LayaNative JavaScript\nDESCRIPTION: JavaScript code for setting the log level in LayaNative environment. Checks if running in LayaNative (window.conch exists) before setting the log level to control which types of logs are output.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Other_settings/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif( window.conch )\n{\n\t//值为0：表示关闭所有日志输出\n    //值为1：表示只有Fatal日志输出\n    //值为2：表示只有Fatal和Error日志输出\n    //值为n：表示只有LogLevel <= n的日志输出\n    window.conch.config.setLogLevel(2);\n}\n```\n\n----------------------------------------\n\nTITLE: Using FromTo Ray Casting in TypeScript\nDESCRIPTION: Performs ray casting using explicitly defined start and end points instead of a ray object with a direction. This example uses raycastFromTo to detect the first object hit by a ray between two specific points in 3D space.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//进行射线检测,检测第一个碰撞物体\n_scene3D.physicsSimulation.raycastFromTo(this.from, this.to, this.out);\n//将射线碰撞到的物体设置为红色\n((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(0.0, 1.0, 0.0, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Asset Preprocessing - TypeScript\nDESCRIPTION: Provides an example implementation of `IAssetProcessor` to automatically set the compression format for imported images that are not designated as sprite textures. The class is registered using the `@IEditorEnv.regAssetProcessor()` decorator and uses `assetImporter.config` to modify import settings.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regAssetProcessor()\nexport class TestAssetProcessor implements IEditorEnv.IAssetProcessor {\n    onPreprocessImage(assetImporter: IEditorEnv.IImageAssetImporter): void | Promise<void> {\n        if (assetImporter.config.textureType != 2) {\n            assetImporter.config.platformDefault = { format: 10 };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Show Simple Model Example\nDESCRIPTION: This is an example of displaying a simple model using a shader blueprint.  It passes a texture via Params, samples the texture with UV coordinates, and uses the sampled color as input to the Unlit Color. The world normal is also passed to Unlit's world normal input. Dependencies include a 2D texture.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Setting a Collider's Collision Group to All Groups (TypeScript)\nDESCRIPTION: This code sets the collisionGroup property of a collider so that it can collide with any built-in LayaAir collision group. It leverages Laya.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER (value -1), ensuring the collider is universally interactive. It's useful for debugging or scenarios requiring maximal interactivity. Assumes an accessible collider object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器所属哪个碰撞组（-1组与LayaAir任何内置组都可碰撞）\nxxx.collisionGroup = Laya.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;\n```\n\n----------------------------------------\n\nTITLE: Initializing Baidu Map Instance in TypeScript\nDESCRIPTION: This TypeScript snippet initializes a Baidu Map instance. It creates a div element to hold the map, adjusts the map size to fill the browser window, disables unnecessary interactions, centers the map on Beijing, and adds a marker to the map.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprivate  init(): void {\n  this.mapDiv = Laya.Browser.createElement(\"div\");\n  Laya.Browser.document.body.appendChild(this.mapDiv);\n\n  // 适应窗口尺寸\n  this.refit();\n  Laya.stage.on(Laya.Event.RESIZE, this, this.refit);\n\n  // 初始化地图\n  this.map = new this.BMap.Map(this.mapDiv);\n\n  // 禁用部分交互\n  //this.map.disableDragging();\n  this.map.disableKeyboard();\n  this.map.disableScrollWheelZoom();\n  this.map.disableDoubleClickZoom();\n  this.map.disablePinchToZoom();\n  // 初始地点北京，缩放系数15\n  this.map.centerAndZoom(new this.BMap.Point(116.32715863448607, 39.990912172420714), 15);\n\n  // 创建标注物\n  this.marker = new this.BMap.Marker(new this.BMap.Point(0, 0));\n  this.map.addOverlay(this.marker);\n}\n```\n\n----------------------------------------\n\nTITLE: Illuminating All Layers with a Light in LayaAir (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to make a light illuminate all layers in a LayaAir scene.  Setting the `layerMask` property of the light to -1 achieves this.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/BaseLight2D/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//基于前文示例代码，仅修改layerMask即可  \n//-1可以让灯光照亮所有层\nthis.light1Render.layerMask = -1;\n```\n\n----------------------------------------\n\nTITLE: Reducing Dynamic Property Lookup by Caching Property Value in Local Variable in TypeScript\nDESCRIPTION: Demonstrates a performance practice in JavaScript/TypeScript where frequently accessed properties of objects are cached into local variables to minimize costly property lookups. The method foo caches this.target.prop in a local variable prop used multiple times, improving execution speed in performance-critical contexts. No external dependencies.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfoo()\n{\n    var prop=this.target.prop;\n    //使用prop\n    this.process1(prop);\n    this.process2(prop);\n    this.process3(prop);\n}\n```\n\n----------------------------------------\n\nTITLE: Using callLater for Deferred Callback Execution in LayaAir Script (TypeScript)\nDESCRIPTION: Illustrates how repeated callLater registrations within a loop only invoke the callback once in the current frame, preventing redundant executions. The sample class uses callLater in a loop and a hideImage method that prints and hides an image; callLater ensures only a single execution occurs per frame.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //循环调用10次，但是定时器回调函数只执行一次，即\"hideImage\"日志只打印一次\n        for (let i = 0; i < 10; i++)\n            Laya.timer.callLater(this, this.hideImage);\n    }\n\n    hideImage(): void {\n        console.log(\"hideImage\");\n        this.Image.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom Object Types with @property Decorator in TypeScript\nDESCRIPTION: This snippet illustrates how to expose a custom object type as a component property by referencing another class decorated with @regClass(). The custom class 'Animal' is exported from a separate module and also uses @regClass() to be recognized by the IDE. In the main script 'MyScript', the animal property is typed as Animal and decorated to make its editable properties accessible. Dependencies include proper imports of the custom class and regClass/property from Laya.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//MyScript.ts\nconst { regClass, property } = Laya;\n\nimport Animal from \"./Animal\";\n\n@regClass()\nexport class MyScript extends Laya.Script  {\n    @property({ type : Animal })\n    animal : Animal;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Animal.ts\nconst { regClass, property } = Laya;\n\n@regClass()\nexport default class Animal {\n    @property({ type : Number })\n    weight : number;\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket二进制数据通信完整示例\nDESCRIPTION: 一个完整的WebSocket二进制数据通信示例，包括创建Socket和Byte对象、注册事件监听、连接WebSocket服务器、发送二进制数据、接收并解析二进制数据的完整流程。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/WebSocket/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class WebSocketDemo extends Laya.Script {\n    private socket: Laya.Socket;\n    private byte: Laya.Byte;\n\n    onEnable() {\n        // 创建 Socket 对象\n        this.socket = new Laya.Socket();\n        //  初始化用于二进制数据处理的 Laya.Byte\n        this.byte = new Laya.Byte();\n        // 设置字节序为小端模式\n        this.byte.endian = Laya.Byte.LITTLE_ENDIAN;\n\n        // 注册事件监听\n        this.socket.on(Laya.Event.OPEN, this, this.onSocketOpen);\n        this.socket.on(Laya.Event.MESSAGE, this, this.onMessageReceived);\n        this.socket.on(Laya.Event.CLOSE, this, this.onSocketClose);\n        this.socket.on(Laya.Event.ERROR, this, this.onConnectError);\n\n        // 建立连接（此处使用 connectByUrl 方式，实际可根据需要选择其他方式）\n        this.socket.connectByUrl(\"wss://echo.websocket.org:443\");\n    }\n\n    // 连接成功回调\n    private onSocketOpen(e: any): void {\n        console.log(\"WebSocket 已连接\");\n        // 按顺序写入数据：一个字节、一个 16 位整数、一个 32 位浮点数、一段字符串\n        this.byte.writeByte(99);\n        this.byte.writeInt16(2025);\n        this.byte.writeFloat32(0.12345672398805618);\n        this.byte.writeUTFString(\"二进制数据示例\");\n\n        // 发送时必须传入二进制数据byte.buffer（ArrayBuffer 对象），而非传入 byte 对象\n        this.socket.send(this.byte.buffer);\n        //清空缓冲区，避免数据残留影响后续操作。\n        this.byte.clear();\n    }\n\n    // 接收数据回调\n    private onMessageReceived(msg: any): void {\n        console.log(\"接收到消息：\", msg);\n\n        // 判断消息类型是否为 ArrayBuffer（二进制数据）\n        if (msg instanceof ArrayBuffer) {\n            // 创建 Laya.Byte 实例，用于操作二进制数据\n            let byte = new Laya.Byte();\n            // 设置字节序列的字节序\n            byte.endian = Laya.Byte.LITTLE_ENDIAN;\n            // 将 ArrayBuffer 中的二进制数据写入 Laya.Byte 对象中\n            byte.writeArrayBuffer(msg);\n\n            // 重置字节流的位置指针，从0开始读取数据\n            byte.pos = 0;\n\n            // 从字节流中读取一个字节（8位）\n            let a = byte.getByte();  // 获取一个字节（1个byte）\n            // 从字节流中读取一个16位整数（2个字节）\n            let b = byte.getInt16();  // 获取一个16位整数\n            // 从字节流中读取一个32位浮点数（4个字节）\n            let c = byte.getFloat32();  // 获取一个32位浮点数\n            // 从字节流中读取一个UTF-8编码的字符串\n            let d = byte.getUTFString();  // 获取一个UTF-8字符串\n\n            // 打印解析结果\n            console.log(\"解析结果：\", a, b, c, d);\n        }\n        // 清空 socket 输入流中的数据，确保下次读取是干净的\n        this.socket.input.clear();\n    }\n\n\n    // 连接关闭回调\n    private onSocketClose(e: any): void {\n        console.log(\"WebSocket 连接已关闭\");\n    }\n\n    // 连接错误回调\n    private onConnectError(e: any): void {\n        console.error(\"WebSocket 连接出错：\", e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Build Parameters UI Panel Under 'build-settings' Usage\nDESCRIPTION: Defines a custom settings class and creates an extended inspector panel for build parameters. Supports user-defined configuration options that are displayed in the build settings interface, enabling plugin developers to read customized build flags or options during the build process.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.panel(\"TestBuildSettings\", { usage: \"build-settings\", title: \"测试\" })\nexport class TestBuildSettings extends IEditor.EditorPanel {\n@IEditor.onLoad\n    static start() {\n        Editor.typeRegistry.addTypes([\n            {\n                name: \"MyBuildSettings\",\n                catalogBarStyle : \"hidden\",\n                properties: [\n                    {\n                        name: \"option1\",\n                        type: \"boolean\",\n                        default: true\n                    },\n                    {\n                        name: \"option2\",\n                        type: \"string\",\n                        default: \"2332\",\n                    }\n                ]\n            }\n        ]);\n        Editor.extensionManager.createSettings(\"MyBuildSettings\", \"project\");\n    }\n\n    async create() {\n        let panel = IEditor.GUIUtils.createInspectorPanel();\n        panel.allowUndo = true;\n        panel.inspect(Editor.getSettings(\"MyBuildSettings\").data, \"MyBuildSettings\");\n        this._panel = panel;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Script Control of VScrollBar in LayaAir\nDESCRIPTION: This TypeScript code demonstrates how to control a VScrollBar component through a custom script in LayaAir. It sets the skin, width, position, minimum and maximum values, and scroll size of the VScrollBar. The component is accessed via a property that is linked to a VScrollBar instance in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/VScrollBar/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.VScrollBar })\n    public vscroll: Laya.VScrollBar;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.vscroll.skin = \"atlas/comp/vscroll.png\";//滚动条皮肤\n        this.vscroll.width = 300;//滚动条的宽度\n        this.vscroll.pos(300, 300);//滚动条的位置\n        this.vscroll.min = 0;//滑块的最小滚动位置\n        this.vscroll.max = 10;//滑块的最大滚动位置\n        this.vscroll.scrollSize = 1;//点击按钮的滚动量\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Pause and Resume Methods (TypeScript)\nDESCRIPTION: TypeScript definitions for the Laya.timer.pause and Laya.timer.resume methods. Pause sets the timer scale to 0, effectively stopping time, while resume sets it back to 1.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 暂停时钟\n     */\n    pause(): void {\n        this.scale = 0;\n    }\n\n    /**\n     * 恢复时钟\n     */\n    resume(): void {\n        this.scale = 1;\n    }\n```\n\n----------------------------------------\n\nTITLE: 基于帧率和定时器的循环示例及计时器清除 - LayaAir - TypeScript\nDESCRIPTION: 示例展示LayaAir中两种定时器循环方式frameLoop和loop的使用。frameLoop基于渲染帧率执行，loop基于指定时间间隔执行。代码使用frameLoop每帧执行动画函数，并绑定舞台点击事件调用dispose方法，dispose中通过timer.clear清理循环定时器，防止内存泄漏或逻辑异常。依赖LayaAir定时器模块Timer，适合需要动态控制循环生命周期的场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.timer.frameLoop(1, this, this.animateFrameRateBased);\nLaya.stage.on(\"click\", this, this.dispose);\ndispose() \n{\n    Laya.timer.clear(this, this.animateFrameRateBased);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laya.timer.runTimer in a Component (TypeScript)\nDESCRIPTION: Example showing Laya.timer.runTimer. A function hideImage is scheduled to loop every 5 seconds, but runTimer is called immediately after, causing hideImage to execute once instantly and the loop timer to be removed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //如果没有Laya.timer.runTimer，则5秒后才执行hideImage\n        Laya.timer.loop(5000, this, this.hideImage);\n        //立即执行hideImage\n        Laya.timer.runTimer(this, this.hideImage);\n    }\n\n    hideImage(): void {\n        console.log(\"hideImage\");\n        this.Image.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets from Subpackages in LayaAir\nDESCRIPTION: This code snippet demonstrates how to load assets from subpackages within a LayaAir project targeting Taobao Mini Games. It uses the Laya.loader.load method to load Prefab assets located within subpackages. The specific loading path depends on how the subpackages are set up during build.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/tbgame/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n        Laya.loader.load(\"sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n            // ......\n        });\n\n        Laya.loader.load(\"sub2/Sphere.lh\").then((res: Laya.PrefabImpl) => {\n            // ......\n        });\n```\n\n----------------------------------------\n\nTITLE: Registering Font from Local Assets in LayaAir 3.1+ (JavaScript)\nDESCRIPTION: Reads a TTF font file named 'layabox.ttf' from the application's 'assets/font/' directory using the LayaNative `conch.readFileFromAsset` API. It then registers this font data under the name 'layabox' using `conch.registerFont`. Success or failure of the registration is logged to the console. This method allows the font named 'layabox' to be used subsequently in text components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/built_in_font/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction registerFont() {\n    var assetFontData = conch.readFileFromAsset('font/layabox.ttf', 'raw');\n    if (assetFontData) {\n        if (conch.registerFont(\"layabox\", assetFontData)) {\n            log('字体注册成功');\n        }\n        else {\n            log('字体注册失败');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom FileInspectorLayout\nDESCRIPTION: This code defines a custom configuration screen for off-line resources, which does not require a resource instance in the engine.  The code uses a custom class definition (`DemoABCType`) and binds it to a `FileInspectorLayout`.  The `accept` method defines the resources which are valid for the layout. Dependencies: Requires LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.regClass()\nexport class DemoABCType {\n    @IEditor.property(String)\n    name: string = \"\";\n\n    @IEditor.property(Number)\n    age: number = 18;\n\n    @IEditor.property(Number)\n    gender: number =1;\n}\n\n@IEditor.inspectorLayout(\"asset\")\nexport class DemoInspectorLayout extends IEditor.FileInspectorLayout {\n    constructor() {\n        super(DemoABCType);\n    }\n\n    accept(asset: IEditor.IAssetInfo): boolean {\n        return asset.ext === \"abc\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling LayaAir Panel via Script (TypeScript)\nDESCRIPTION: This TypeScript script demonstrates how to programmatically control a LayaAir Panel component created and linked via the IDE. Within the `onAwake` lifecycle method, it sets the panel's position (100, 100), size (200x200), enables both horizontal and vertical scrolling (`ScrollType.Both`), assigns skins for the vertical and horizontal scrollbars, and activates the elastic bounce effect. Requires the `Laya` module and assumes the panel instance is injected via the `@property` decorator and that the specified scrollbar skin assets exist at 'atlas/comp/'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Panel/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Panel })\n    public panel: Laya.Panel;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.panel.pos(100, 100);\n        this.panel.size(200, 200);\n        this.panel.scrollType = Laya.ScrollType.Both; //滚动类型：水平与垂直都滚动\n        this.panel.vScrollBarSkin = \"atlas/comp/vscroll.png\";\n        this.panel.hScrollBarSkin = \"atlas/comp/hscroll.png\";\n        this.panel.elasticEnabled = true; //橡皮筋效果\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Sprites in LayaAir with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the LayaAir engine with WebGL support, creating a Sprite container, and dynamically adding 10,000 randomly positioned and colored text children to this container. It highlights the potential rendering workload caused by many display objects and serves as a baseline scenario to evaluate rendering performance. Dependencies include LayaAir engine and an environment supporting WebGL. Inputs are the random numerical texts and positions; outputs are the visible sprites rendered on stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/rendering/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Test {\n     private text:Laya.Text;\n    constructor() {\n        Laya.init(550,400,Laya.WebGL);\n        Laya.Stat.show();\n        var textBox=new Laya.Sprite();\n\n        for(var i=0;i<10000;i++)\n        {\n            this.text=new Laya.Text();\n            this.text.text=(Math.random()*100).toFixed(0);\n            this.text.color=\"#CCCCCC\";\n            this.text.x=Math.random()*550;\n            this.text.y=Math.random()*400;\n            textBox.addChild(this.text);\n        }\n        Laya.stage.addChild(textBox);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Excluded Asset Exporter for Editor-Only Resources (TypeScript)\nDESCRIPTION: Registers an asset exporter (for the 'abc' type) that is marked as excluded from runtime build output using the exclude: true option. No implementation body is required. The resource is then ignored in builds and is editor-only; useful for configuration or internal resources that should not appear in game packages. Dependency: IEditorEnv.regAssetExporter with exclusion option.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditorEnv.regAssetExporter([\"abc\"], { exclude: \"true\" } )\nexport class DemoAssetExporter extends IEditorEnv.AssetExporter {} //不需要任何实现代码\n```\n\n----------------------------------------\n\nTITLE: Installing layanative on macOS\nDESCRIPTION: This command installs the layanative3 package globally using npm on a macOS system. The `sudo` command is required to grant administrator privileges necessary for global installation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/build_Cmd/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo npm install -g layanative3\n```\n\n----------------------------------------\n\nTITLE: Setting Video Texture Frame Rate in LayaAir using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to control the frame rate of the video texture in a LayaAir VideoNode. It includes setting `useFrame` to `true` and specifying an `updateFrame` value. It sets up a `MOUSE_DOWN` event listener. This is essential for ensuring smooth video playback, especially considering browser compatibility and limitations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/VideoNode/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({type: Laya.VideoNode})\n    public video: Laya.VideoNode;\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        // 鼠标点击触发播放\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, () => {\n            // 视频纹理更新帧率\n            this.video.videoTexture.useFrame = true;\n            this.video.videoTexture.updateFrame = 30;\n\n            this.video.play();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Light Occluder Component in LayaAir\nDESCRIPTION: This snippet demonstrates how to create and configure a 2D light occluder using the LayaAir engine. It initializes a LightOccluder2D component, sets its properties such as canInLight and outside, and defines its shape using a polygon.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/LightOccluder2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    // 创建2D光遮挡器\n    createLightOccluder(): void {\n        this.lightOccluder.pos(233, 265);\n        this.owner.addChild(this.lightOccluder);\n        let lightOccluderComponent = this.lightOccluder.addComponent(Laya.LightOccluder2D);\n        lightOccluderComponent.canInLight = true;\n        lightOccluderComponent.outside = true;\n        let poly: Laya.PolygonPoint2D = new Laya.PolygonPoint2D();\n        // 添加多个顶点创建不规则形状（顺时针）\n        poly.addPoint(-50, -100);\n        poly.addPoint(50, -100);\n        poly.addPoint(100, -50);\n        poly.addPoint(100, 50);\n        poly.addPoint(50, 100);\n        poly.addPoint(-50, 100);\n        poly.addPoint(-100, 50);\n        poly.addPoint(-100, -50);\n        lightOccluderComponent.polygonPoint = poly;\n    }\n```\n\n----------------------------------------\n\nTITLE: Script Control of HScrollBar\nDESCRIPTION: This TypeScript code demonstrates how to control a LayaAir HScrollBar component using a custom script.  It retrieves the HScrollBar instance, sets skin, width, position, min, max and scrollSize properties.  It relies on the LayaAir library and the component is expected to be placed in a Laya scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/HScrollBar/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.HScrollBar })\n    public hscroll: Laya.HScrollBar;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.hscroll.skin = \"atlas/comp/hscroll.png\";//滚动条皮肤\n        this.hscroll.width = 300;//滚动条的宽度\n        this.hscroll.pos(300, 300);//滚动条的位置\n        this.hscroll.min = 0;//滑块的最小滚动位置\n        this.hscroll.max = 10;//滑块的最大滚动位置\n        this.hscroll.scrollSize = 1;//点击按钮的滚动量\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Settings Type and Creating Settings in TypeScript for LayaAir IDE\nDESCRIPTION: Defines a custom configuration data type and creates a global settings instance associated with project storage. Includes hints for managing settings via the IDE's API, supporting different storage locations such as project files, local directory, system, or memory-only. The code also shows a modern class-based approach using decorators for type registration.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.regClass()\nexport class MyTestSettingsType {\n    @property({ type: Boolean, default: true })\n    option1: boolean = true;\n    \n    @property(string)\n    options2: string = \"\";\n}\n\n@IEditor.onLoad\nstatic onLoad() {\n    Editor.extensionManager.createSettings(\"MyTestSettings\", \"project\", MyTestSettingsType);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Class as a Component with @regClass() in TypeScript\nDESCRIPTION: This code snippet demonstrates how to register a class as a component using the `@regClass()` decorator in LayaAir. The `regClass` decorator makes the script recognizable as a component within the LayaAir IDE, allowing it to be added to nodes via the property panel. Only one class per TypeScript file should be decorated with `@regClass()`. Classes decorated with `@regClass()` are compiled within the IDE, but are only included in the final build if referenced or added to a node in a published scene or prefab.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n}\n```\n\n----------------------------------------\n\nTITLE: ShaderPass declaration in LayaAir Shader - TypeScript style configuration\nDESCRIPTION: Defines a Shader3D with type, name, instancing, and reflection probe support flags. Declares uniform variables with types and default values, and specifies multiple shader passes with their corresponding vertex shader (VS) and fragment shader (FS) GLSL blocks, targeting forward rendering pipeline.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nShader3D Start\n{\n\ttype:Shader3D\n\tname:exmpleShader\n    enableInstancing:true,\n    supportReflectionProbe:false,\n\tuniformMap: {\n\t\tu_MVPMatrix : {type: Matrix4x4},\n\t\tu_OutLineWidth : {type: float, default:0.0}\n\t}\n\tshaderPass:[\n\t\t{\n\t\t\tpipeline:Forward,\n\t\t\tVS:OutLineVS,\n\t\t\tFS:OutLineFS\n\t\t}\n\t\t{\n\t\t\tpipeline:Forward,\n\t\t\tVS:OutLine1VS,\n\t\t\tFS:OutLine1FS\n\t\t}\n\t]\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources without Type Specification in LayaAir Engine\nDESCRIPTION: Demonstrates how to load multiple resources at once, useful for preloading assets during loading screens. This example loads multiple textures and displays them in sequence.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Loader/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LoaderDemo extends Laya.Script {\n\n    onAwake(): void {\n        let resArr: Array<string> = [\n            \"image/bird.jpg\",\n            \"image/cloud.png\",\n            \"https://layaair.com/3.x/demo/resources/res/apes/monkey2.png\"\n        ];\n        this.loadTextures(resArr);\n    }\n\n    /** 加载多个资源 \n     * @param url 资源数组\n    */\n    loadTextures(url: Array<string>): void {\n        Laya.loader.load(url).then((res: Array<Laya.Texture>) => {\n            let sp: Laya.Sprite = new Laya.Sprite();\n            this.owner.addChild(sp);\n            let i: number = 0;\n            //每秒重画一次\n            Laya.timer.loop(1000, this, () => {\n                i == res.length && (i = 0);\n                //清除sp节点的所有绘图（不含子节点）\n                sp.graphics.clear();\n                //在sp节点上重绘纹理\n                sp.graphics.drawTexture(res[i]);\n                i++;\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Primitive Mesh Types in LayaAir (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create different types of primitive mesh objects (Box, Sphere, Cylinder, Capsule, Cone, and Plane) using the `Laya.PrimitiveMesh` class in TypeScript. These mesh objects are the underlying geometry but are not yet visible Sprite3D objects in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/displayObject/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//正方体\nLaya.PrimitiveMesh.createBox(0.5, 0.5, 0.5);\n//球体\nLaya.PrimitiveMesh.createSphere(0.25, 20, 20);\n//圆柱体\nLaya.PrimitiveMesh.createCylinder(0.25, 1, 20);\n//胶囊体\nLaya.PrimitiveMesh.createCapsule(0.25, 1, 10, 20);\n//圆锥体\nLaya.PrimitiveMesh.createCone(0.25, 0.75);\n//平面\nLaya.PrimitiveMesh.createPlane(6, 6, 10, 1));\n```\n\n----------------------------------------\n\nTITLE: Exporting Steam Callback and SetAchievement - C++\nDESCRIPTION: This C++ code snippet exports the `SteamCallback` and `SetAchievement` functions for use in JavaScript. `jsSteamCallback` wraps the C++ `SteamCallback` function, and `jsSetAchievement` wraps the `SetAchievement` function. The `LayaExtInit` function then registers these JavaScript functions with their corresponding C++ counterparts.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsSteamCallback(jsvm_env env, jsvm_callback_info info) {\n    SteamManager::GetInstance()->SteamCallback();\n    jsvm_value result;\n    JSVM_CALL_CHECK(jsvm_create_int32(env, 1, &result));\n    return result;\n}\n\njsvm_value jsSetAchievement(jsvm_env env, jsvm_callback_info info) {\n    size_t argc = 1;\n    jsvm_value args[1];\n    jsvm_value _this;\n    JSVM_CALL_CHECK(jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr));\n\n    bool success = SteamManager::GetInstance()->SetAchievement(achievementID);\n    jsvm_value result;\n    JSVM_CALL_CHECK(jsvm_create_int32(env, success ? 1 : 0, &result));\n    return result;\n}\n```\n\nLANGUAGE: c\nCODE:\n```\nextern \"C\" {\n    LAYAEXTAPI void LayaExtInit(jsvm_env env, jsvm_value exp) {\n        // 注册Steam相关函数\n        ......\n\n        // 注册成就相关函数\n        jsvm_value fnSetAchievement;\n        jsvm_create_function(env, \"setAchievement\", SIZE_MAX, jsSetAchievement, nullptr, &fnSetAchievement);\n        jsvm_set_named_property(env, exp, \"setAchievement\", fnSetAchievement);\n\n        jsvm_value fnSteamCallback;\n        jsvm_create_function(env, \"steamCallback\", SIZE_MAX, jsSteamCallback, nullptr, &fnSteamCallback);\n        jsvm_set_named_property(env, exp, \"steamCallback\", fnSteamCallback);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Ray Casting in LayaAir\nDESCRIPTION: Demonstrates how to create a ray from screen coordinates and perform ray casting to detect physics collisions. The example shows creating the ray, performing the cast, and handling collision results.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建一个屏幕点\nlet point = new Laya.Vector2();\n//创建一个射线 Laya.Ray(射线的起点，射线的方向)\nlet ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\n//以鼠标点击的点作为原点\npoint.x = Laya.stage.mouseX;\npoint.y = Laya.stage.mouseY;\n//计算一个从屏幕空间生成的射线\n_camera.viewportPointToRay(point, ray);\n//拿到3D场景中射线碰撞的物体\n_scene3D.physicsSimulation.rayCastAll(ray,this.outs);\n//如果射线碰撞到物体\nif (this.outs.length !== 0) {\n    for (let i = 0; i < this.outs.length; i++){\n        //在射线击中的位置添加一个立方体\n        this.addBoxXYZ(this.outs[i].point.x, this.outs[i].point.y, this.outs[i].point.z );\n    }        \n}\n```\n\n----------------------------------------\n\nTITLE: Adding Rigidbody3D and Configuring Physics on Sprite3D (TypeScript)\nDESCRIPTION: Shows how to add a Rigidbody3D component to a Sprite3D node via addComponent, set up a box-shaped collider, enable overrideGravity, and assign a custom gravity vector. Requires the LayaAir3D physics modules to be enabled; demonstrates component-based extension of objects for physics interactions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n//添加Rigidbody3D组件\nlet rigidBody = this.layaMonkeyParent.addComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n//创建盒子形状碰撞器\nvar boxShape = new Laya.BoxColliderShape(1, 1, 1);\n//设置盒子的碰撞形状\nrigidBody.colliderShape = boxShape; \n//使用重力\nrigidBody.overrideGravity = true;\n//重力为向下-10\nrigidBody.gravity = new Laya.Vector3(0,-10,0);\n```\n\n----------------------------------------\n\nTITLE: Embedding an iframe in LayaAir (TypeScript)\nDESCRIPTION: Shows how to dynamically create an HTML iframe element using `Laya.Browser.document.createElement`, set its source URL and necessary style properties (`position: absolute`, `zIndex`, `left`, `top`), and append it to the main document body (`Laya.Browser.document.body.appendChild`) for display within a LayaAir application.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvar iframe:any = Laya.Browser.document.createElement(\"iframe\");\niframe.style.position =\"absolute\";//设置布局定位。这个不能少。\niframe.style.zIndex = 100;//设置层级\niframe.style.left =\"100px\";\niframe.style.top =\"100px\";\niframe.src = \"http://ask.layaair.com/\";\nLaya.Browser.document.body.appendChild(iframe);\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - ADDTIVE Material\nDESCRIPTION: This snippet describes the ADDTIVE blending mode. The final color is the sum of the source color and the target color. This mode is commonly used for effects such as glows.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Excluding Specific Layers from Illumination in LayaAir (TypeScript)\nDESCRIPTION: Illustrates how to use bitwise XOR (`^`) and left shift (`<<`) operations in TypeScript to configure the `layerMask` property of a LayaAir light component. This example sets the mask to illuminate all layers *except* for layers 1 and 2 by starting with -1 (all layers) and XORing out the bitmasks for layers 1 and 2. Assumes `light1Render` is a valid light component instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/BaseLight2D/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//基于前文示例代码，仅修改layerMask即可  \n//排除某些层之外(例如排除1层和2层)，可以照亮其它所有的层\nthis.light1Render.layerMask = -1 ^ (1 << 1) ^ (1 << 2);\n```\n\n----------------------------------------\n\nTITLE: Main LightOccluder Script in LayaAir\nDESCRIPTION: This is the main script demonstrating how to use a 2D light occluder. It loads a background image, creates a light occluder, a spotlight, and the background itself, and sets their properties to achieve a light occlusion effect.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/LightOccluder2D/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LightOccluder extends Laya.Script {\n\n    private spotLight: Laya.Sprite = new Laya.Sprite();\n    private background: Laya.Sprite = new Laya.Sprite();\n    private lightOccluder: Laya.Sprite = new Laya.Sprite();\n\n    private backgroundTexture: string = \"resources/bg2.png\";\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        Laya.loader.load(this.backgroundTexture).then(() => {\n            this.createLightOccluder();\n            this.createSpotLight();\n            this.createBackground();\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.frameOnce Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.frameOnce method. This method schedules a function to execute once after a specified number of frames.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 定时执行一次(基于帧率)。\n     * @param\tdelay\t延迟几帧(单位为帧)。\n     * @param\tcaller\t执行域(this)。\n     * @param\tmethod\t定时器回调函数。\n     * @param\targs\t回调参数。\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n     */\n    frameOnce(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true): void {\n        this._create(true, false, delay, caller, method, args, coverBefore);\n    }\n```\n\n----------------------------------------\n\nTITLE: UV1 Related Settings LayaAir3-IDE\nDESCRIPTION: Provides an explanation of the sub-settings related to UV1, which includes max chart area, max boundary length, normal deviation weight, max iteration, texels per unit, and padding, describing their purposes, functionality and influence on the lightmapping process.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_11\n\nLANGUAGE: other\nCODE:\n```\n#### 3.4.1 最大图表区域大小max Chart Area\n\n最大图表区域大小是光照贴图生成过程中的一个参数，用于控制图表的最大面积。图表是在算法中用于组织面片的基本单元。该参数限制了单个图表所包含的面片的总面积，以控制图表的大小。\n```\n\n----------------------------------------\n\nTITLE: Closing the Current Scene - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to close the current scene using `this.close()`. This method is available within a scene's runtime script.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`this.close()`\n```\n\n----------------------------------------\n\nTITLE: Sample JavaScript Module for Dynamic Loading in LayaAir\nDESCRIPTION: A simple JavaScript module to be dynamically loaded by the main application. Defines a Client class with a start method and includes a console log statement to confirm successful loading.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Demo1 = (function () {\n    function Client() {\n    }\n    Client.prototype.start = function () {\n        // body...\n        console.log(\"调用方法\");\n    };\n    return Client;\n})();\nconsole.log(\"我被加载进来了\");\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Resources in LayaAir\nDESCRIPTION: This code snippet demonstrates how to load scene resources in a LayaAir project using TypeScript. It uses both `Laya.Scene3D.load` and `Laya.loader.load` methods to load a scene, attaching it to the stage. `Laya.Scene3D.load` loads directly as a Scene3D, while `Laya.loader.load` loads as a Scene2D, requiring extraction of the Scene3D resource.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/sceneEditor/environment/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//用Laya.Scene3D的方式加载\nLaya.Scene3D.load('scene/Game.ls', Laya.Handler.create(null, function (res:any){\n\tLaya.stage.addChild(res);\n}));\n\n//用Laya.loader的方式加载，加载后根节点是Scene2D\nLaya.loader.load('scene/Game.ls', Laya.Handler.create(this, this.onLoaded), Laya.Handler.create(this, this.onLoading)).then( (res)=>{\n    let scene = res.create();\n    //scene.scene3D 可以获得Scene3D资源\n    Laya.stage.addChild(scene.scene3D);\n    \n});\n```\n\n----------------------------------------\n\nTITLE: Requesting User Stats for Achievements - C++\nDESCRIPTION: This C++ code snippet demonstrates how to request user statistics from Steam, which is a necessary step before setting achievements. It retrieves the current user's Steam ID using `SteamUser()->GetSteamID()` and then requests the user's stats using `SteamUserStats()->RequestUserStats(userID)`. It also includes a commented-out line for resetting all stats, which is useful for testing purposes.  It assumes Steam initialization has already occurred. Relies on `SteamUser()` and `SteamUserStats()` interfaces.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool SteamManager::Initialize()\n{\n    // 初始化的代码\n    ......\n    \n    // 请求用户统计数据\n    CSteamID userID = SteamUser()->GetSteamID(); // 获取用户ID\n    SteamUserStats()->RequestUserStats(userID);\n\n    // 重置成就，可用于测试时使用\n    // SteamUserStats()->ResetAllStats(true);\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Grass: Vertex Shader\nDESCRIPTION: Describes the steps for creating the grass vertex shader: using Perlin noise, making noise transformation by multiplying different channels with color channels, adding them together, and then adding a disruption value. The last step is multiplying with the world matrix.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Defining Resource Import Processor Interface - TypeScript\nDESCRIPTION: Defines the `IAssetProcessor` interface, providing hooks that are called before and after resources (images or any type) are imported into the LayaAir IDE. Implementations of this interface can be used to perform automated processing tasks during import.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IAssetProcessor {\n    //Called before image resources are imported\n    onPreprocessImage?(assetImporter: IImageAssetImporter): void | Promise<void>;\n    //Called before any type of resource is imported\n    onPreprocessAsset?(assetImporter: IAssetImporter): void | Promise<void>;\n\n    //Called after image resources are imported\n    onPostprocessImage?(assetImporter: IImageAssetImporter): void | Promise<void>;\n    //Called after any type of resource is imported\n    onPostprocessAsset?(assetImporter: IAssetImporter): void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Timer Callback Execution and Removal Using runTimer in LayaAir (TypeScript)\nDESCRIPTION: Describes the runTimer method which finds and executes a pending timer callback instantly and then removes it from the handler map. Expects the caller and method function as inputs; mainly used for cases where scheduled events should be forcibly flushed before their delay expires.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 立即提前执行定时器，执行之后从队列中删除\n * @param\tcaller 执行域(this)。\n * @param\tmethod 定时器回调函数。\n */\nrunTimer(caller: any, method: Function): void {\n    var handler: TimerHandler = this._getHandler(caller, method);\n    if (handler && handler.method != null) {\n        this._map[handler.key] = null;\n        handler.run(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using InspectorPanel for Configurable UI in TypeScript\nDESCRIPTION: Defines a class MyPanel extending EditorPanel, which creates an InspectorPanel, registers a type with properties, and sets up event handling for UI interactions. Shows how to generate complex, configurable inspector panels via code.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.panel(\"Test\")\nexport class MyPanel extends IEditor.EditorPanel {\n    private _data : any;\n    declare _panel : IEditor.InspectorPanel;\n    async create() {\n        this._panel = IEditor.GUIUtils.createInspectorPanel();\n        \n        Editor.typeRegistry.addTypes([\n            {\n                name : \"MyPanelType\", //请注意，名字是全局唯一的，一定要长\n                properties : [\n                    { name : \"text\", type : \"string\" },\n                    { name : \"count\" , type: \"number\" },\n                    { name : \"actions\", inspector: \"Buttons\",\n                        options : { buttons : [ { caption : \"点我\", event: \"my_click\" } ] }\n                    }\n                ]\n             }\n        ]);\n        \n        this._panel.allowUndo = true; //根据需要设置\n        this._data = IEditor.DataWatcher.watch({}); \n        \n        this._panel.inspect(this._data, \"MyPanelType\");\n        \n        this._panel.on(\"my_click\", ()=> {\n            alert(\"hello\");\n        });\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Set Network Event Listener in LayaNative JavaScript\nDESCRIPTION: Registers a callback function to listen for network status changes in LayaNative. The callback function receives an integer representing the network type. The code checks if `conch` is defined before attempting to use it, ensuring compatibility with web versions where `conch` is not available. Use `conch.setNetworkEvtFunction` to set the listener.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/network/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif( conch )\n{\n    conch.setNetworkEvtFunction(function(type)\n    {\n\t    alert(type)\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Dependency Links\nDESCRIPTION: This snippet demonstrates how to define resource dependency links within an Asset Exporter using the `parseLinks` method. The links array is constructed with objects specifying the resource's properties, associated URLs, and UUIDs. This allows the builder to automatically convert UUID-based references to path-based references during the build process. Dependencies: Requires LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst links = [ { obj: \"data\", prop: \"url\", url : \"b5b5975b-3d93-4ee5-83a3-68d25c2354bf\" };\nthis.exportInfo.deps = this.parseLinks(links);\n```\n\n----------------------------------------\n\nTITLE: Controlling VScrollBar Properties with TypeScript Script\nDESCRIPTION: This snippet demonstrates how to control a VScrollBar component using a custom script in LayaAir. It shows how to set properties like skin, width, position, minimum and maximum values, and scroll size programmatically.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/VScrollBar/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.VScrollBar })\n    public vscroll: Laya.VScrollBar;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.vscroll.skin = \"atlas/comp/vscroll.png\";//滚动条皮肤\n        this.vscroll.width = 300;//滚动条的宽度\n        this.vscroll.pos(300, 300);//滚动条的位置\n        this.vscroll.min = 0;//滑块的最小滚动位置\n        this.vscroll.max = 10;//滑块的最大滚动位置\n        this.vscroll.scrollSize = 1;//点击按钮的滚动量\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Rotating a 3D Node (Laya.Sprite3D) in LayaAir TypeScript\nDESCRIPTION: This example shows how to declare a public property `cube` of type `Laya.Sprite3D` using `@property`. In the `onStart` method, it uses `Laya.timer.frameLoop` to continuously rotate the linked 3D node around its Y-axis by accessing its `transform.rotate` method. This requires linking a 3D node (like a Cube) to the `cube` property in the editor.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/componentProperties/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type : Laya.Sprite3D})\n    public cube: Laya.Sprite3D;\n\n    private rotation: Laya.Vector3 = new Laya.Vector3(0, 0.01, 0);\n\n    onStart() {\n        Laya.timer.frameLoop(1, this, ()=> {\n            this.cube.transform.rotate(this.rotation, false);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing `getCurrentPosition` for Geolocation in LayaAir TypeScript\nDESCRIPTION: Internal implementation of the static `Laya.Geolocation.getCurrentPosition` method. This function wraps the native browser `navigator.geolocation.getCurrentPosition` API, forwarding success and error events to Laya.Handler instances and applying configured accuracy, timeout, and cache age settings.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/geolocation/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 获取设备当前位置。\n     * @param\tonSuccess\t带有唯一<code>Position</code>参数的回调处理器。\n     * @param\tonError\t\t可选的。带有错误信息的回调处理器。错误代码为Geolocation.PERMISSION_DENIED、Geolocation.POSITION_UNAVAILABLE和Geolocation.TIMEOUT之一。\n     */\n    static getCurrentPosition(onSuccess: Handler, onError: Handler = null): void {\n        Geolocation.navigator.geolocation.getCurrentPosition(function (pos: any): void {\n            Geolocation.position.setPosition(pos);\n            onSuccess.runWith(Geolocation.position);\n        },\n            function (error: any): void {\n                onError.runWith(error);\n            },\n            {\n                enableHighAccuracy: Geolocation.enableHighAccuracy,\n                timeout: Geolocation.timeout,\n                maximumAge: Geolocation.maximumAge\n            });\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Available SDK Versions\nDESCRIPTION: This command lists all available SDK versions for LayaNative. It allows developers to see which SDK versions are available for creating native projects. The SDK versions are essentially templates for the native projects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/build_Cmd/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ layanative3 listversions\n```\n\n----------------------------------------\n\nTITLE: Adding Lines to PixelLineSprite3D in LayaAir\nDESCRIPTION: The addLine method allows adding individual lines to a PixelLineSprite3D object. It takes start and end positions as Vector3 objects, and start and end colors as Color objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/PixelLine/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n * 增加一条线。\n * @param\tstartPosition  初始点位置\n * @param\tendPosition\t   结束点位置\n * @param\tstartColor\t   初始点颜色\n * @param\tendColor\t   结束点颜色\n */\naddLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n    (this._render as PixelLineRenderer).addLine(startPosition, endPosition, startColor, endColor);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting autoSize for Sprites in LayaAir\nDESCRIPTION: Example showing how to enable automatic width and height calculation for sprites based on their content. When autoSize is true, the sprite's dimensions will update to match its content.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/Sprite/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\n// 添加到舞台\nLaya.stage.addChild(sprite);\nsprite.autoSize = true;\n```\n\n----------------------------------------\n\nTITLE: Search Directory Setting LayaAir3-IDE\nDESCRIPTION: Describes the ways to search directories when using name matching rules to find the material to remap, which are: 'search in the current materials directory' or 'search in the current and upper materials directories'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_20\n\nLANGUAGE: other\nCODE:\n```\n设置好名称匹配规则 naming ，IDE会根据naming结果作为搜索材质的 key（键值）对指定的目录进行查找。\n\n**限定查找目录**就是指定哪个目录中查找，也是有两种方式，如图6-4所示：\n```\n\n----------------------------------------\n\nTITLE: Available Component Lifecycle Methods in LayaAir Custom Scripts (TypeScript)\nDESCRIPTION: Defines the optional lifecycle method signatures that can be implemented within a LayaAir custom script (`Laya.Script` subclass). These methods are called by the engine at specific points during the component's existence, such as initialization, activation, updates, rendering, deactivation, and destruction.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/IDE/Script/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 被添加到节点后调用，和Awake不同的是即使节点未激活onAdded也会调用。\n     */\n    onAdded(): void {\n    }\n\n    /**\n     * 重置组件参数到默认值，如果实现了这个函数，则组件会被重置并且自动回收到对象池，方便下次复用\n     * 如果没有重置，则不进行回收复用\n\n     */\n    onReset?(): void;\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，次方法只执行一次\n     */\n    onAwake(): void {\n    }\n\n    /**\n     * 组件被启用后执行，比如节点被添加到舞台后\n     */\n    onEnable(): void {\n    }\n\n    /**\n     * 第一次执行update之前执行，只会执行一次\n     */\n    onStart?(): void;\n\n    /**\n     * 每帧更新时执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n     */\n    onUpdate?(): void;\n\n    /**\n     * 每帧更新时执行，在update之后执行，尽量不要在这里写大循环逻辑或者使用getComponent方法\n     */\n    onLateUpdate?(): void;\n\n    /**\n     * 渲染之前执行\n     */\n    onPreRender?(): void;\n\n    /**\n     * 渲染之后执行\n     */\n    onPostRender?(): void;\n\n    /**\n     * 组件被禁用时执行，比如从节点从舞台移除后\n     */\n    onDisable(): void {\n    }\n\n    /**\n     * 手动调用节点销毁时执行\n     */\n    onDestroy(): void {\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Remote TTF Font in LayaAir 3.1+ (TypeScript)\nDESCRIPTION: Demonstrates loading a remote TTF font file ('res/maobi.ttf') using `Laya.loader.load` with the `Loader.TTF` type. Once the font is loaded, it creates a `Label` component, sets its `font` property to the base name of the loaded file ('maobi'), assigns text, size, and color, and adds it to the display hierarchy. This method relies on the LayaAir loader to handle font downloading and makes it available for use via its filename.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/built_in_font/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(\"res/maobi.ttf\", Loader.TTF).then(() => {\n\tvar label: Label = new Label();\n\tlabel.font = \"maobi\";\n\tlabel.text = \"自定义嵌入字体\";\n\tlabel.fontSize = 30;\n\tlabel.color = '#FFFFFF';\n\t\t\n\tthis.Main.box2D.addChild(label);\n\tlabel.pos(30, 50)\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Subpackage Resources (Nested Directory - Initial Attempt) in LayaAir (TypeScript)\nDESCRIPTION: Shows an initial attempt to load assets from subpackages ('sub1', 'sub2') located within a nested directory ('sub') in a LayaAir project for Taobao Mini Games. This approach uses the full path but will cause errors on Taobao Mini Games due to platform restrictions and requires modifying game.json.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/tbgame/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n        Laya.loader.load(\"sub/sub1/Cube.lh\").then((res: Laya.PrefabImpl) => {\n            // ......\n        });\n\n        Laya.loader.load(\"sub/sub2/Sphere.lh\").then((res: Laya.PrefabImpl) => {\n            // ......\n        });\n```\n\n----------------------------------------\n\nTITLE: Including Baidu Map Script in HTML\nDESCRIPTION: This snippet demonstrates how to include the Baidu Maps API script in an HTML file. The script is included within the `<body>` tags and requires an API key (ak) which can be obtained from the Baidu Maps official website. The `callback` parameter specifies a function to be called when the script is loaded.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://api.map.baidu.com/api?v=2.0&ak=LIhOlvWfdiPYMCsK5wsqlFQD8wW4Bfy6&s=1&callback=appendCode\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Initialization Interface - TypeScript\nDESCRIPTION: This TypeScript code defines an interface `IExtendLib` that declares the `initializeSteam` function, which is expected to return a number (1 for success, 0 for failure). It then imports the native \"steam_demo.dll\" library using `Laya.importNative` and assigns it to the `extendLib` constant, making the native Steam initialization function accessible from TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IExtendLib {\n    // 初始化Steam\n    initializeSteam(): number;  // 返回1表示成功，0表示失败\n}\n\nexport const extendLib: IExtendLib = Laya.importNative(\"steam_demo.dll\");\n```\n\n----------------------------------------\n\nTITLE: Modified Degree-Radian Example with Visibility Control\nDESCRIPTION: An extended example showing how to hide a regular property while exposing it for serialization, and using a non-serialized property for UI display in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number , private: true })\n    radian: number = 0;  //private设置为true之后，radian不会出现在IDE的属性面板上，只是用来存储输入的弧度\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) //这里设置serializable为false，所以degree不会被保存到场景文件中\n     get degree() {\n        return this.radian * (180 / Math.PI);//由于自己没有序列化保存，需要把radian存下来的弧度反算回角度，用于IDE属性面板显示\n    }\n    set degree(value: number) {\n        this.radian = value * (Math.PI / 180);//把输入的角度值，转成弧度给radian存起来。\n    }\n    \n    onStart() {\n        console.log(this.radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Script for Scene Management and Animation Control\nDESCRIPTION: Implements a singleton 'Main' class to manage scene objects and UI interactions, including attaching a camera to the scene, controlling a 3D character, and playing animations such as 'stun'. This enables scripted dynamic behavior of 3D UI in response to game events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/3DUI/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    // 单例实例\n    static instance: Main;\n\n    constructor() {\n        super();\n        Main.instance = this;\n    }\n\n    @property({type:Laya.Sprite3D})\n    private target: Laya.Sprite3D;\n\n    @property({type:Laya.UI3D})\n    private ui3d: Laya.UI3D;\n\n    public animator: Laya.Animator;\n\n    onEnable() {\n        // 绑定摄像机\n        this.ui3d.billboard = true;\n        // 获取动画控制器\n        this.animator = this.target.getComponent<Laya.Animator>(Laya.Animator);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: 在3D场景中使用视频纹理实现视频播放（TypeScript）\nDESCRIPTION: 这段代码演示在LayaAir引擎中，使用VideoTexture在3D场景中的Sprite3D对象上应用视频纹理，实现动态视频播放效果。依赖LayaAir的Script及相关3D组件，适用于需要在3D环境中集成视频内容的场景。主要功能包括获取目标场景节点、创建视频纹理、设置视频源、控件循环以及将纹理应用到材质上。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/video/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n/**\n * 使用视频纹理\n */\n@regClass()\nexport class Script extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n\n    @property(Laya.Scene3D)\n    private scene: Laya.Scene3D;\n\n    private videoPlane: Laya.Sprite3D;\n    private videoTexture = new Laya.VideoTexture();\n\n    onAwake(): void {\n        //获取场景中要添加视频纹理的3D节点\n        this.videoPlane = this.scene.getChildByName(\"Plane\") as Laya.Sprite3D;\n        //使用指定路径的视频文件\n        this.createVideo(\"resources/mov_bbb.mp4\");\n    }\n\n    //创建视频纹理并将其应用到Sprite3D上\n    private createVideo(url: string): void {\n\n        //设置纹理的路径\n        this.videoTexture.source = url;\n        //开始播放视频\n        this.videoTexture.play();\n        //设置纹理的播放模式为循环播放\n        this.videoTexture.loop = true;\n\n        //创建一个不受光材质\n        let mat = new Laya.UnlitMaterial();\n        //将创建好的视频纹理设置为材质的贴图\n        mat.albedoTexture = this.videoTexture;\n        //将材质应用到Sprite3D上\n        this.videoPlane.getComponent(Laya.MeshRenderer).sharedMaterial = mat;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Laya.Resource Derived Class\nDESCRIPTION: This code demonstrates creating a custom class inheriting from `Laya.Resource` for resources that require runtime instantiation and modification (e.g., materials). The `@Laya.regClass()` decorator is required, and `@Laya.property` is used to define editable properties. Dependencies: Requires the LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n//因为这个类需要在实际游戏环境中使用，所有请勿和其他包含@IEditorEnv装饰器的脚本混杂在一起\n\n@Laya.regClass()\nexport class ABCResource extends Laya.Resource {\n    @Laya.property(String)\n    name: string = \"\";\n\n    @Laya.property(Number)\n    age: number = 18;\n\n    @Laya.property(Number)\n    gender1: number = 100;\n\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Asset Thumbnail Generation - TypeScript\nDESCRIPTION: Provides a practical implementation example for a custom thumbnail generator, similar to the built-in image thumbnailer. It uses the `sharp` library to read image metadata, returning the source file path if the image is small, or resizing and converting larger images to a PNG buffer.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sharp = IEditorEnv.require(\"sharp\");\n       \n@IEditorEnv.regClass()\nexport class DemoThumbnailPlugin extends IEditorEnv.AssetThumbnail {\n    async generate(asset: IEditorEnv.IAssetInfo): Promise<string | Buffer> {\n        let file = EditorEnv.assetMgr.getFullPath(asset);\n        let img = sharp(file);\n        let meta = await img.metadata();\n        if (meta.width < 200 && meta.height < 200)\n            return \"source\"; //source is a special string, meaning return the source file.\n        else\n            return await img.resize(AssetThumbnail.imageSize, AssetThumbnail.imageSize, \n                { fit: \"inside\" }).png().toBuffer();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Blueprint Class with Constructor Parameters in TypeScript\nDESCRIPTION: Shows the usage of the @bpClass decorator to define a blueprint class with constructor parameters. This enables instantiating classes via blueprints with specific arguments. The 'construct' option lists parameter names and types, allowing the blueprint editor to recognize and invoke the constructor correctly. The class extends Laya.Script and defines a constructor receiving a string parameter.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass } = BP;\n\n@bpClass({\n    name: \"TestBluePrint\",\n    canInherited: true,\n    extends: \"Script\",\n    construct: {\n        params: [\n            {\n                \"name\": \"testParams\",\n                \"type\": \"string\"\n            }\n        ]\n    }\n})\n\nexport class TestBluePrint extends Laya.Script {\n\n    constructor(testParams: string) {\n        super();\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preventing Event Propagation in LayaAir with TypeScript\nDESCRIPTION: Two approaches to stop event propagation in LayaAir. The first shows how to use stopPropagation in a manual event listener, while the second demonstrates using it within a component's lifecycle method. This prevents events from bubbling up to parent nodes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nonEnable(): void {\n  //在手动帧听的时候使用stopPropagation\n  this.XXX.on(Laya.Event.MOUSE_DOWN, this, (e: Laya.Event) => {\n    //使用stopPropagation会中断后续事件的冒泡循环，提高性能\n\t//该方法会阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。\n    //该方法不会影响当前节点 (currentTarget) 中的任何事件侦听器。\n    e.stopPropagation();\n  });\n}\n\n//在生命周期方法里使用stopPropagation\nonMouseDown(e: Laya.Event): void {\n  e.stopPropagation();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PNG Drag-to-Scene Node Creation Action - TypeScript\nDESCRIPTION: Provides an example of defining the `onCreateNode` action for PNG files using `Editor.extensionManager.addFileActions`. This function is triggered when a PNG asset is dragged into the scene. It uses the `sharp` library to get image dimensions and then creates a `Sprite` node with the correct size and texture.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sharp = IEditor.require(\"sharp\");\n\nclass AssetHelper {\n    @IEditor.onLoad\n    onLoad() {\n        console.log(\"AssetHelper onLoad\");\n        Editor.extensionManager.addFileActions([\"png\"], {\n            onCreateNode: async (asset) => {\n                let imageMeta = await sharp(Editor.assetDb.getFullPath(asset)).metadata();\n                return Editor.scene.createNode(\"Sprite\", { texture: { _$uuid: asset.id }, width: imageMeta.width, height: imageMeta.height });\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing load() and fetch() Methods for Resource Loading in LayaAir Engine\nDESCRIPTION: Shows the difference between load() and fetch() methods. The load() method includes parsing and caching while fetch() provides raw data without caching, useful for one-time use of resources.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Loader/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nonEnable(): void {\n    const jsonPath: string = \"json/bagList.json\";\n    Laya.loader.load(jsonPath).then((json) => {\n        let _json = json.data;\n        if (_json.bagList && _json.bagList.length > 0) {\n            //把json数据传递给list组件的数据源属性array\n            this.bagList.array = _json.bagList;\n        }\n    });\n}\n\nonEnable(): void {\n    const jsonPath: string = \"json/bagList.json\";\n    //fetch取到的是原始数据，但没有缓存，无法用getRes获取\n    Laya.loader.fetch(jsonPath, \"json\").then((_json) => {  \n        if (_json.bagList && _json.bagList.length > 0) {\n            //把json数据传递给list组件的数据源属性array\n            this.bagList.array = _json.bagList;\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: On Demand Remap Setting LayaAir3-IDE\nDESCRIPTION: Explains 'On Demand Remap', and describes the two conditional parameters: 'Naming' and 'Search', that are used for automatic material mapping based on search and match.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_18\n\nLANGUAGE: other\nCODE:\n```\n对于材质的映射，也可以通过搜索匹配的方式来映射。该种方式有两个条件参数，分别是**名称匹配方式naming**和**查找方式search**。\n```\n\n----------------------------------------\n\nTITLE: Setting Single Collision Filter in TypeScript\nDESCRIPTION: Configures a collider to interact only with a specific collision group (CUSTOMFILTER1) by setting the canCollideWith property. This filter prevents collisions with any other collision groups.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//指定xxx碰撞器可以与其发生碰撞的碰撞组(本例只与自定义组1碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1;\n```\n\n----------------------------------------\n\nTITLE: Using callLater to Batch State Updates in LayaAir TypeScript\nDESCRIPTION: Illustrates how to reduce redundant calls to an update function caused by multiple property setters that trigger expensive recalculations or redraws. By replacing direct calls to update() with Laya.timer.callLater(this, update), all property changes in the current frame trigger only a single update call before rendering. This improves performance in scenarios with multiple frequent state changes. Requires LayaAir engine and TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.timer.callLater(this, update);\n```\n\n----------------------------------------\n\nTITLE: Using iframes in LayaAir\nDESCRIPTION: TypeScript example demonstrating how to create and append an iframe element in a LayaAir project. This code shows how to properly position, set z-index, and configure an iframe to embed external content.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar iframe:any = Laya.Browser.document.createElement(\"iframe\");\niframe.style.position =\"absolute\";//设置布局定位。这个不能少。\niframe.style.zIndex = 100;//设置层级\niframe.style.left =\"100px\";\niframe.style.top =\"100px\";\niframe.src = \"http://ask.layaair.com/\";\nLaya.Browser.document.body.appendChild(iframe);\n```\n\n----------------------------------------\n\nTITLE: Receiving Parameters in Scene Runtime\nDESCRIPTION: Example of receiving parameters in a scene's Runtime class through the onOpened lifecycle method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\nimport { MsgRTBase } from \"./MsgRT.generated\";\n\n@regClass()\nexport class MsgRT extends MsgRTBase {\n    \n    onOpened(param: any): void {\n        console.log(param.text);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Steam Initialization Function - C++\nDESCRIPTION: This snippet exports the `Initialize` function of the `SteamManager` class to JavaScript. It uses `jsvm_create_function` to create a JavaScript function named `initializeSteam` that calls the C++ function `jsInitializeSteam`. The `LayaExtInit` function registers the Steam initialization function, allowing JavaScript code to call the native functionality.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsInitializeSteam(jsvm_env env, jsvm_callback_info info) {\n    bool success = SteamManager::GetInstance()->Initialize();\n    printf(\"init steam!!!\");\n    jsvm_value result;\n    JSVM_CALL_CHECK(jsvm_create_int32(env, success ? 1 : 0, &result));\n    return result;\n}\n```\n\nLANGUAGE: c\nCODE:\n```\nextern \"C\" {\n    LAYAEXTAPI void LayaExtInit(jsvm_env env, jsvm_value exp) {\n        ...\n        // 注册Steam初始化函数\n        jsvm_value fnInitSteam;\n        jsvm_create_function(env, \"initializeSteam\", SIZE_MAX, jsInitializeSteam, nullptr, &fnInitSteam);\n        jsvm_set_named_property(env, exp, \"initializeSteam\", fnInitSteam);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Differential ZIP Programmatically (TypeScript)\nDESCRIPTION: Example of using the `LayaDCCTools.genZipByComparePath` static method to create a differential update ZIP file. It compares an old DCC directory with a new DCC directory and outputs a ZIP file containing only the changed or added files and the new root file to the specified output directory. Requires the `layadcctools` module.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n    let zipfile = await LayaDCCTools.genZipByComparePath(老的dcc目录, 新的dcc目录, 输出目录);\n    //zipfile是返回的输出的zip文件路径\n```\n\n----------------------------------------\n\nTITLE: Modifying Debug Mode in config.ini (HarmonyOS)\nDESCRIPTION: This snippet demonstrates how to modify the `JSDebugMode` value in the `config.ini` file to set the desired debugging mode for a HarmonyOS project.  The `JSDebugMode` property controls whether debugging is enabled and the type of debugging (Normal or Wait). The value should be set to 0 (disabled), 1 (Debug/Normal), or 2 (Debug/Wait).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Harmony/debug/readme.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nohos/entry/src/main/resources/rawfile/config.ini\n```\n\n----------------------------------------\n\nTITLE: Setting Standalone Mode in MainActivity.java\nDESCRIPTION: Code snippet showing how to configure a LayaAir Android application as a standalone version by setting the localize option to \"true\" in the MainActivity.java file.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Android/readme.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nmPlugin.game_plugin_set_option(\"localize\",\"true\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Methods in Android/Java for LayaNative\nDESCRIPTION: Java implementation of native methods that can be called from JavaScript through LayaNative's reflection mechanism. Includes example functions for handling string, number, boolean parameters, and asynchronous callbacks using JSON for data exchange.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Secondary_Development/readme.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    public static String testString(String value) {\n        Log.d(\"JSBridge\", \"java: \" + value);\n        return \"LayaBox\";\n    }\n    public static double testNumber(double value) {\n        Log.d(\"JSBridge\", \"java: \" + value);\n        return 512;\n    }\n    public static boolean testBool(boolean value) {\n        Log.d(\"JSBridge\", \"java: \" + value);\n        return value ? false : true;\n    }\n    public static void testAsyncCallback(String json) {\n        //js thread\n        try {\n            JSONObject root = new JSONObject(json);\n            Log.d(\"JSBridge\", \"java: \" + root.getString( \"value\" ));\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        m_Handler.post(\n                new Runnable() {\n                    public void run() {\n                        //ui thread update ui\n                        JSONObject obj = new JSONObject();\n                        try {\n                            obj.put(\"value\", \"Hello JS!\");\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        ExportJavaFunction.CallBackToJS(JSBridge.class,\"testAsyncCallback\", obj.toString());\n                    }\n                });\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Rectangle Mesh in LayaAir\nDESCRIPTION: This snippet provides the code for generating a rectangular mesh for use in LayaAir. It creates a Float32Array for vertices and a Uint16Array for indices, then calculates and populates their values to define the shape of a rectangle with UV coordinates for texturing.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/2D/LightOccluder2D/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    // 生成一个矩形\n    private generateRectVerticesAndUV(width: number, height: number): Laya.Mesh2D {\n        const vertices = new Float32Array(4 * 5);\n        const indices = new Uint16Array(2 * 3);\n        let index = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 0;\n\n        vertices[index++] = width;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n        vertices[index++] = 1;\n\n        vertices[index++] = 0;\n        vertices[index++] = height;\n        vertices[index++] = 0;\n        vertices[index++] = 0;\n        vertices[index++] = 1;\n\n        index = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = 3;\n\n        indices[index++] = 1;\n        indices[index++] = 2;\n        indices[index++] = 3;\n\n        const declaration = Laya.VertexMesh2D.getVertexDeclaration([\"POSITION,UV\"], false)[0];\n        const mesh2D = Laya.Mesh2D.createMesh2DByPrimitive([vertices], [declaration], indices, Laya.IndexFormat.UInt16, [{ length: indices.length, start: 0 }]);\n        return mesh2D;\n    }\n```\n\n----------------------------------------\n\nTITLE: ShadowCaster and DepthNormal\nDESCRIPTION: This part covers the ShadowCaster and DepthNormal settings. It explains how to enable shadows and depth normal pass.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Defining Custom Asset Thumbnail Generator Class - TypeScript\nDESCRIPTION: Defines the base structure for a custom asset thumbnail generator plugin. This class extends `IEditorEnv.AssetThumbnail` and includes the asynchronous `generate` method, which receives asset information and is expected to return either an absolute file path string or a Buffer containing PNG/JPG/SVG image data for the thumbnail.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n//Scene script for generating thumbnails\n\n@IEditorEnv.regClass()\nexport class DemoThumbnailPlugin extends IEditorEnv.AssetThumbnail {\n    async generate(asset: IEditorEnv.IAssetInfo): Promise<string | Buffer> {\n        //Can return two types here\n        //1. String type. An absolute path to a png/jpg/svg file.\n        //2. Buffer type. Data in png/jpg/svg format.\n        //Recommended image size is AssetThumbmail.imageSize\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Tags for Performance Analysis in LayaAir\nDESCRIPTION: Code showing how to register time interval and value data tags for custom performance monitoring. The example registers two time tags and two value tags that will be used to track custom metrics.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    onEnable(): void {\n        this.perfMain.init(this.projectId).then(res =>{\n            this.perfMain.regTimeTag([\"time1\",\"time2\"]);\n            this.perfMain.regValueTag([\"value1\",\"value2\"]);\n        }); \n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Asset Preview Rendering Plugin - TypeScript\nDESCRIPTION: Defines a scene script class (`DemoPreviewPlugin`) that provides the rendering content for a custom preview panel. This class extends `IEditorEnv.AssetPreview`, providing access to 2D (`this.sprite`) or 3D (`this.scene`) rendering contexts. The `setAsset` method is called to update the preview based on the selected asset, setting `this.renderTarget` to the desired renderable object (e.g., `this.sprite` for 2D).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n//AssetPreview is a base class packaged by IDE with the functionality of an offline rendering engine object,\n//you can get a fully configured 3D scene through this.scene. Then set this.renderTarget to this.scene.scene3D, you can return the scene content to the UI interface.\n//You can also draw pure 2D content through this.sprite, then set this.renderTarget to this.sprite, you can return the 2D content to the interface.\n\n@IEditorEnv.regClass()\nexport class DemoPreviewPlugin extends IEditorEnv.AssetPreview {\n    constructor() {\n        super();\n\n        this.sprite.graphics.drawCircle(100, 100, 50, \"#ffff00\");\n        this.sprite.size(100, 100);\n    }\n\n    async setAsset(asset: IEditorEnv.IAssetInfo): Promise<any> {\n        this.renderTarget = this.sprite;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Script with Parameter Handling for LayaAirIDE - TypeScript\nDESCRIPTION: This TypeScript class 'Script' provides a static method, 'speak', which accepts two arguments and logs them to the console. The class is registered using '@IEditorEnv.regClass()' so it can be invoked from the LayaAirIDE CLI with parameters. Inputs are passed via the --script-args argument and are accessible as method parameters. Requires LayaAirIDE scripting environment with IEditorEnv available.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/commandLine/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regClass()\nclass Script {\n    \n    static speak(arg1: any, arg2: any) {\n        console.log(arg1); \n        console.log(arg2); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Execution and Deletion of callLater Timer in LayaAir (TypeScript)\nDESCRIPTION: Explains the runCallLater method that forces immediate execution of a scheduled callLater callback and removes it after invocation. Inputs are the context and the method reference; uses CallLater.I.runCallLater internally. Useful for ensuring timely invocation and cleanup in synchronous logic.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Timer/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 立即执行 callLater 。\n * @param\tcaller 执行域(this)。\n * @param\tmethod 定时器回调函数。\n */\nrunCallLater(caller: any, method: Function): void {\n    CallLater.I.runCallLater(caller, method);\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Video Texture Frame Rate of VideoNode in LayaAir with TypeScript\nDESCRIPTION: This script illustrates setting the video texture frame rate for a VideoNode in LayaAir using TypeScript. By listening for a user mouse click, it configures the video texture to manually update at a specified frame rate (30 FPS) before playing the video. Required dependencies include LayaAir Engine and the linked VideoNode. The script targets browser compatibility issues, as some environments require user interaction and frame-rate customization for proper video playback.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/VideoNode/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({type: Laya.VideoNode})\n    public video: Laya.VideoNode;\n\n    //组件被启用后执行，例如节点被添加到舞台后\n    onEnable(): void {\n        // 鼠标点击触发播放\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, () => {\n            // 视频纹理更新帧率\n            this.video.videoTexture.useFrame = true;\n            this.video.videoTexture.updateFrame = 30;\n\n            this.video.play();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Mask Layer for Sprite3D (TypeScript)\nDESCRIPTION: Demonstrates getter and setter for the layer property, used to assign and query the rendering mask layer of a Sprite3D. Also shows how to add a layer to a camera for selective rendering via addLayer. Requires both the node and camera to support these operations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 蒙版层。\n     */\n    get layer(): number \n\n    set layer(value: number)\n    \n    //添加显示图层(为相机添加一个蒙版)\n\tthis.camera.addLayer(5);\n```\n\n----------------------------------------\n\nTITLE: Incorrect LocalStorage Usage in LayaNative with TypeScript\nDESCRIPTION: Shows unsupported LocalStorage usage patterns that work in browsers but fail in LayaNative. Direct property assignment and access on the localStorage object are not supported in the LayaNative environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LocalStrorage/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//存储，LayaNative下不支持\nlocalStorage.test = 100;\n//取值，LayaNative下不支持\nalert(localStorage.test);\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG with Native DOM Image Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to render an SVG graphic as an image element using native DOM APIs in JavaScript. It creates an SVG string containing HTML-styled text with CSS text shadows, encodes it into a Blob of type 'image/svg+xml', then generates an object URL for the Blob. This URL is assigned to an Image object's source, which is positioned absolutely on the page and appended to the document body. Dependencies include standard browser DOM APIs such as Image, Blob, and URL. The SVG data string is the key input defining the vector graphic content, and the output is a visually styled text image rendered on the page. Limitations include browser compatibility primarily with modern browsers supporting foreignObject within SVG and object URLs. This approach does not rely on external files, enabling dynamic modification of SVG content at runtime.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\">' +\n           '<foreignObject width=\"100%\" height=\"100%\">' +\n           '<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"font-size:40px\">' +\n             '<em>I</em> like ' + \n             '<span style=\"color:white; text-shadow: 0px 1px 0px #999, 0px 2px 0px #888, 0px 3px 0px #777, 0px 4px 0px #666, 0px 5px 0px #555, 0px 6px 0px #444, 0px 7px 0px #333, 0px 8px 7px #001135;\">' +\n             'cheese</span>' +\n           '</div>' +\n           '</foreignObject>' +\n           '</svg>';\nvar DOMURL = window.URL || window.webkitURL || window;\nvar img = new Image();\nvar svg = new Blob([data], {type: 'image/svg+xml'});\nvar url = DOMURL.createObjectURL(svg);\nimg.src = url;\nimg.style.position =\"absolute\";\nimg.style.zIndex = 99999\ndocument.body.appendChild(img);\n```\n\n----------------------------------------\n\nTITLE: Controlling Sprite Rendering Order with zOrder in TypeScript\nDESCRIPTION: Demonstrates creating two Sprites, adding them to the stage, loading images into them, and then setting their `zOrder` properties to control which Sprite appears on top, overriding the default add order. Requires image files at specified paths.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet sp1 = new Laya.Sprite();\nLaya.stage.addChild(sp1);\nsp1.pos(200, 190);\n// 加载并显示一个图片1\nsp1.loadImage(\"resources/layabox.png\", null); //需要在resources文件夹下放入layabox.png图片\n\nlet sp2 = new Laya.Sprite();\nLaya.stage.addChild(sp2);\n// 加载并显示一个图片2\nsp2.loadImage(\"atlas/comp/image.png\", null);\n\n// 设置zOrder\nsp1.zOrder = 1;\nsp2.zOrder = 0;\n```\n\n----------------------------------------\n\nTITLE: Get Vertical Velocity (CharacterController)\nDESCRIPTION: This code snippet demonstrates how to get the vertical velocity of a CharacterController using the `getVerticalVel()` method.  The script retrieves the CharacterController component and outputs the character's vertical velocity to the console during each update. This value is useful for determining if the character is on the ground, jumping, or falling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/CharacterController/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n    }\n\n\tonUpdate(): void {\n        if (this.characterController.getVerticalVel() !== 0)\n            // 控制台输出角色的垂直速度\n            console.log(\"垂直速度\", this.characterController.getVerticalVel());\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gyroscope Rotation Detection in TypeScript with Laya Engine\nDESCRIPTION: This snippet demonstrates how to use Laya's Gyroscope class to monitor device orientation changes. It creates a text display that shows the alpha, beta, and gamma rotation values of the device in real-time.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/motion/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Gyroscope_Sample {\n    private info: Laya.Text;\n    constructor() {\n        Laya.init(550, 400);\n        this.info = new Laya.Text();\n        this.info.fontSize = 50;\n        this.info.color = \"#FFFFFF\";\n        this.info.size(Laya.stage.width, Laya.stage.height);\n        Laya.stage.addChild(this.info);\n\n        Laya.Gyroscope.instance.on(Laya.Event.CHANGE, this, this.onDeviceorientation);\n    }\n    private  onDeviceorientation(absolute: Boolean, rotationInfo: Laya.RotationInfo): void {\n        this.info.text =\n            \"alpha:\" + Math.floor(rotationInfo.alpha) + '\\n' +\n            \"beta :\" + Math.floor(rotationInfo.beta) + '\\n' +\n            \"gamma:\" + Math.floor(rotationInfo.gamma);\n    }\n}\nnew Gyroscope_Sample();\n```\n\n----------------------------------------\n\nTITLE: Executing Project Build Script in Bash Shell\nDESCRIPTION: This snippet shows the command to run the build script for compiling the Linux project generated by LayaAir's app builder. It requires navigating to the generated project directory and executing the provided shell script `build.sh`, which compiles the project and places the executable in the `install_cmake/bin` directory. This step is essential for producing a runnable Linux binary for the LayaBox project. No additional dependencies beyond a standard Linux shell and the build environment are needed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Linux/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Inspector Layout for Import Settings\nDESCRIPTION: This snippet shows how to create an inspector layout (`DemoInspectorLayout`) to display and edit import settings defined in `DemoABCImportSettings`. The `@IEditor.inspectorLayout` decorator specifies that the layout is for asset selection. The `accept` method filters which assets the layout applies to based on their extension. Dependencies: Requires the LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.inspectorLayout(\"asset\")\nexport class DemoInspectorLayout extends IEditor.MetaDataInspectorLayout {\n    constructor() {\n        super(DemoABCImportSettings);\n    }\n\n    accept(asset: IEditor.IAssetInfo): boolean {\n        return asset.ext === \"abc\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: C++: Manipulating String with jsStr Function\nDESCRIPTION: The `jsStr` function in C++ takes a string argument from JavaScript, appends the string \" C++ 增加\", and returns the modified string. It uses LayaNative API for string conversion and manipulation. Requires the LayaNative SDK.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsStr(jsvm_env env, jsvm_callback_info info) {\n    jsvm_status status;\n    size_t argc = 1;\n    jsvm_value args[1];\n    jsvm_value _this;\n    jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr);\n\n    char strBuff[1024];\n    size_t strLen = 0;\n    jsvm_get_value_string_utf8(env, args[0], strBuff, 1024, &strLen);\n    std::string cstr;\n    cstr.assign(strBuff, strLen);\n    cstr += \" C++ 增加\";\n\n    jsvm_value retstr;\n    jsvm_create_string_utf8(env, cstr.c_str(), cstr.length(), &retstr);\n    return retstr;\n}\n```\n\n----------------------------------------\n\nTITLE: Defines Usage\nDESCRIPTION: Explains how to use defines to create macro switches for different branches in the shader code.  It demonstrates how to set the type, default value, and privacy of a define.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n    ......\n    defines: {\n        TEXTUREVS: { type: bool, default: true, private: false },\n        GRAY: { type: bool, default: false, private: false }\n    }\n    ......\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Animation Script Base Class in TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a base animation script in TypeScript, extending Laya.AnimatorStateScript. It showcases the basic structure, including the `AnimatorPlayScriptInfo` interface for storing animation state information and lifecycle methods like `onStateEnter`, `onStateUpdate`, and `onStateExit`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\ninterface AnimatorPlayScriptInfo {\n    animator: Laya.Animator | Laya.Animator2D;\n    layerindex: number;\n    playState: Laya.AnimatorState | Laya.AnimatorState2D;\n}\n/**\n * 继承自AnimatorStateScript(动画状态脚本)\n * @author ...\n */\n @regClass()\nexport class AnimationScript extends Laya.AnimatorStateScript {\n    /**动画的状态信息 */\n    playStateInfo: AnimatorPlayScriptInfo = { animator: null, layerindex: -1, playState: null };\n\n    /**@internal */\n    setPlayScriptInfo(animator: Laya.Animator | Laya.Animator2D, layerindex: number, playstate: Laya.AnimatorState | Laya.AnimatorState2D) {\n        this.playStateInfo.animator = animator;\n        this.playStateInfo.layerindex = layerindex;\n        this.playStateInfo.playState = playstate;\n    }\n    constructor() {\n        super();\n\n    }\n\n\n    /**\n     * 动画状态开始时执行。\n     */\n    onStateEnter(): void {\n        console.log(\"动画开始播放了\");\n    }\n\n    /**\n     * 动画状态运行中\n     * @param normalizeTime 0-1动画播放状态\n     */\n    onStateUpdate(normalizeTime: number): void {\n        console.log(\"动画状态更新了\");\n    }\n\n    /**\n    * 动画状态退出时执行。\n    */\n    onStateExit(): void {\n        console.log(\"动画退出了\");\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Node Modules in LayaAir3-IDE Plugins Using TypeScript\nDESCRIPTION: Demonstrates two methods to import Node.js modules in LayaAir3-IDE plugin scripts: using ES6 module import syntax and the IDE's custom require mechanism. This snippet shows how developers can leverage built-in Node.js modules (like 'fs' and 'path') and additional npm packages (such as 'sharp' and 'glob') within their plugin code. Dependencies include having the IDE's environment setup that supports both import and IEditor.require calls for module loading.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//可以通过import导入node内置模块\nimport fs from \"fs\";\nimport path from \"path\";\n\n//也可以通过require\nconst fs = IEditor.require(\"fs\");\nconst sharp = IEditor.require(\"sharp\");\nconst glob = IEditor.require(\"glob\");\n```\n\n----------------------------------------\n\nTITLE: 绘制圆形的drawCircle方法示例\nDESCRIPTION: 该示例说明如何用drawCircle方法在Sprite中绘制圆形。参数包括圆心位置、半径、填充色、边框色和线宽。该方法简便适合快速生成圆形图形，可用于标记、按钮或装饰元素。正确设置颜色和线宽可以控制最终视觉效果。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//画圆\nsp.graphics.drawCircle(80,80,50,\"#ff0000\");\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 3D Script Class in LayaAir (TypeScript)\nDESCRIPTION: This snippet shows how to define a basic Script3D-derived TypeScript class suitable for use as a custom script component in LayaAir 3D scenes. No core logic is implemented; it simply extends Laya.Script3D and provides a constructor, forming the base for further event or lifecycle overrides. Useful as a template or starting point for script-driven components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * TypeScript语言的3D脚本示例\n */\nexport default class TSDemo extends Laya.Script3D {\n    constructor() { super(); }\n}\n```\n\n----------------------------------------\n\nTITLE: 通过代码动态加载并显示Dialog弹窗\nDESCRIPTION: 在场景脚本中通过代码加载预制体资源，转换为Dialog类型后调用show()方法弹出窗口，实现场景交互触发Dialog显示的功能。确保资源路径正确，且Prefab已转换为Dialog类型。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/Dialog/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    onMouseClick(): void {\n        Laya.loader.load(\"resources/Prefab2D.lh\").then(res => {\n            let dlg: Laya.Dialog = res.create();\n            dlg.show();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: UV1 Normal UV1 Setting LayaAir3-IDE\nDESCRIPTION: Describes the 'UV1' setting, which by default imports UV1 data, with an option to 'Normal UV1', so the imported UV1 data has the standards for lightmapping. If the UV1 is not intended for lightmap baking, this option is not required. The setting also provides for the generation of UV1 data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_10\n\nLANGUAGE: other\nCODE:\n```\n在模型导入时，默认可以将模型中自带的UV1导入进来。如图3-7所示，\n\n![](img/3-7.png)\n\n（图3-7）\n\n可以勾选`标准化UV1（Normal UV1）`，勾选后，模型在导入时，其自带的UV1才具备光照贴图烘焙的标准，否则默认导入的UV1不会启动光照贴图烘焙流程。\n```\n\n----------------------------------------\n\nTITLE: LayaDCC2 CLI Usage Help (Bash)\nDESCRIPTION: Displays the command-line help for the `layadcc2` tool, showing available options, arguments, and subcommands like `genpatch` (for generating patches) and `checkout` (for restoring original structure).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage:  [options] [command] <dir>\n\nlayadcc2命令工具\n\nArguments:\n  dir                                         输入目录\n\nOptions:\n  -V, --version                               output the version number\n  -o, --output <outDir>                       指定输出目录,如果是相对目录，则是相对于当前目录 (default: \"dccout\")\n  -m, --merge                                 是否合并小文件\n  -y, --overwrite                             是否覆盖输出目录（保留历史记录需要覆盖）\n  -h, --help                                  display help for command\n\nCommands:\n  genpatch [options] <inputDir1> <inputDir2>  生成补丁文件\n  checkout [options] <inputDir>               把dcc目录恢复成原始结构\n```\n\n----------------------------------------\n\nTITLE: Cleaning Local DCC Cache (TypeScript)\nDESCRIPTION: Shows how to invoke the `clean` method on a `LayaDCCClient` instance. This method inspects the local cache and removes files that are not referenced by the root file used during the client's initialization, effectively cleaning up outdated or unused assets.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet dcc = new DCCClient(null);\nawait dcc.clean();\n```\n\n----------------------------------------\n\nTITLE: 自定义 Inspector 字段编辑器（LayaAir Editor TypeScript）\nDESCRIPTION: 定义 Inspector 字段编辑器，通过 @IEditor.inspectorField 注册自定义编辑控件。需为每一字段设置唯一 inspector 名称，并确保 UI 预制体提前加载。依赖 gui.UIPackage、IEditor.PropertyField。输入为字段装饰器名，输出为自定义字段编辑组件，适合特殊输入需求。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditor.inspectorField(\"MyTestField\")\nexport class TestField extends IEditor.PropertyField {\n    @IEditor.onLoad\n    static async onLoad() {\n        await gui.UIPackage.resourceMgr.load(\"MyField.widget\");\n    }\n    \n    create() {\n        let input = gui.UIPackage.createWidgetSync(\"MyField.widget\");\n\n        return { ui: input };\n    }\n    \n    refresh() {\n        //这里负责将数据设置到界面上\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Scripts to Generate Protobuf JavaScript and TypeScript Files\nDESCRIPTION: Defines npm scripts `pbjs` and `pbts` leveraging protobufjs-cli tools to generate static JavaScript modules conforming to CommonJS, and corresponding TypeScript declaration files. This enables lightweight, type-safe usage of protobuf messages in the project without requiring the full protobufjs runtime library.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"pbjs\": \"pbjs -t static-module -w commonjs -o ./src/libs/protobuf/protobuf.js ./src/libs/protobuf/protobuf.proto\",\n    \"pbts\": \"pbts -o ./src/libs/protobuf/protobuf.d.ts ./src/libs/protobuf/protobuf.js\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Loading an FBX Model with Addressables in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to load an FBX model in LayaAir using the Addressables system. It utilizes `loadAssetAsync` with a specified resource type (`Laya.Loader.HIERARCHY`) to load the model. The loaded model is then added as a child to the scene.  The code assumes the Addressables plugin is properly set up.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/apply/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@regClass()\nexport class NewScript extends Laya.Script {\n    \n    @property(Laya.Scene3D)\n    public scene: Laya.Scene3D;\n\n    resource: any;\n\n    onStart(): void {\n        this.loadFBX();\n    }\n\n    async loadFBX() {\n        let loadResult = await Addressables.loadAssetAsync(\"resources/res/FBX/LayaMonkey.fbx\", { type: Laya.Loader.HIERARCHY});\n        let monkey: Laya.Sprite3D = loadResult.data.create();\n        this.scene.addChild(monkey);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Min Bone Weight Setting LayaAir3-IDE\nDESCRIPTION: Describes the 'Min Bone Weight' setting, which sets a minimum weight value for bone influence on each vertex. It explains how this setting is used to remove the influence of bones with insufficient impact, to optimize performance and streamline data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_14\n\nLANGUAGE: other\nCODE:\n```\n骨骼影响最小权重用于限定单个骨骼对每个顶点赋予的最大权重值。\n\n用于设定一个最小权重值。导入带有骨骼动画的模型时，如果某个顶点受某个骨骼的影响权重小于该阈值，则该影响将被忽略。该参数通常用于剔除几乎没有变形作用的骨骼影响，以优化性能和清理数据。\n```\n\n----------------------------------------\n\nTITLE: Opening Loaded Scene with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use `Addressables.loadSceneAsync` to load a scene and then open it. It takes the scene path from the load result and opens the scene using `Laya.Scene.open`.  It showcases the use of the `then` method to handle the asynchronous result of the load operation.  The `console.log(res)` part is for debugging, and to verify the returned object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.loadSceneAsync(\"resources/scene/SceneForLoad.ls\").then((res) => {\n        console.log(res);\n        Laya.Scene.open(res.data);\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Shortest Path on Mouse Event in TypeScript\nDESCRIPTION: Sets up a mouse up event listener on the stage. When triggered, it retrieves the start and end nodes from the A* graph based on predefined 'startPoint' and 'endPoint' grid coordinates and calls 'astar.search' to compute the shortest path, storing the result in '_everyPath'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//设置鼠标弹起事件响应\nLaya.stage.on(Event.MOUSE_UP, this, function (): void {\n    //起始和目标点\n    var start = this.graph.grid[this.startPoint.x][this.startPoint.y];\n    var end = this.graph.grid[this.endPoint.x][this.endPoint.y];\n    //调用A* serach方法获得最短路径\n    this._everyPath = (window as any).astar.search(this.graph, start, end, {\n        closest: this.opts.closest\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Collision Groups Using Bitwise XOR - TypeScript\nDESCRIPTION: This code snippet demonstrates how to exclude specific collision groups from colliding using the bitwise XOR operator in TypeScript. It utilizes the `^` operator with the `-1` and 2's power collision filter group values to disable collisions with selected groups.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n//指定不可以与其发生碰撞的碰撞组(本例将不与自定义组2、5进行碰撞，除自定义2与5组之外，都可以发生碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2 ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;\n```\n\n----------------------------------------\n\nTITLE: DOM Element Creation and Manipulation in LayaAir\nDESCRIPTION: TypeScript code showing utility methods for DOM manipulation in Laya.Browser, including creating elements, retrieving elements by ID, and removing elements. These methods facilitate interaction with the browser's DOM.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 创建浏览器原生节点。\n     * @param\ttype 节点类型。\n     * @return\t创建的节点对象的引用。\n     */\n    static createElement(type: string): any {\n        Browser.__init__();\n        return Browser._document.createElement(type);\n    }\n\n    /**\n     * 返回 Document 对象中拥有指定 id 的第一个对象的引用。\n     * @param\ttype 节点id。\n     * @return\t节点对象。\n     */\n    static getElementById(type: string): any {\n        Browser.__init__();\n        return Browser._document.getElementById(type);\n    }\n\n    /**\n     * 移除指定的浏览器原生节点对象。\n     * @param\ttype 节点对象。\n     */\n    static removeElement(ele: any): void {\n        if (ele && ele.parentNode) ele.parentNode.removeChild(ele);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Physics and Gravity (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to add a 3D physics component (Rigidbody3D) to a cube in LayaAir, enable gravity, and add a box collider shape. This setup simulates a free-falling effect on the cube. It requires enabling the physics engine module in the project settings.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/displayObject/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//添加Rigidbody3D组件\nlet boxRigidbody3D: Laya.Rigidbody3D = box.addComponent(Laya.Rigidbody3D);\n//设置重力\nboxRigidbody3D.gravity = new Laya.Vector3(0, -9.8, 0);\n//创建盒子形状碰撞器\nlet boxShape: Laya.BoxColliderShape = new Laya.BoxColliderShape(1, 1, 1);\n//设置盒子的碰撞形状\nboxRigidbody3D.colliderShape = boxShape;\n```\n\n----------------------------------------\n\nTITLE: Defining Prefab-Type Property for Resource Loading in LayaAir TypeScript\nDESCRIPTION: This snippet describes how to declare a prefab property typed as Laya.Prefab using the @property decorator, enabling the drag-and-drop of prefab assets from the IDE's assets folder. At runtime, the assigned prefab will be automatically loaded and instantiated. This is essential for resource-driven prefab management in scripts, greatly simplifying dynamic scene composition.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property( { type : Laya.Prefab } ) //加载 Prefab 的对象\n    private prefabFromResource: Laya.Prefab;    \n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.clear Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.clear method. This method removes a specific scheduled timer identified by its caller object and callback function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 清理定时器。\n     * @param\tcaller 执行域(this)。\n     * @param\tmethod 定时器回调函数。\n     */\n    clear(caller: any, method: Function): void {\n        var handler: TimerHandler = this._getHandler(caller, method);\n        if (handler) {\n            handler.clear();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Component Categories and Property Groups with @classInfo Decorator in TypeScript\nDESCRIPTION: Shows usage of the @classInfo decorator to categorize custom components in the LayaAir IDE component list and to group inspector properties visually. The decorator accepts configuration for menu classification and caption. It also allows defining property groups with members and optional positioning in the inspector UI. This enhances organizational clarity for complex components. Prerequisites include LayaAir decorators and component system setup. Expected inputs are JavaScript objects specifying metadata, affecting IDE component display without altering runtime behavior.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo( {\n    menu : \"MyScript\",\n    caption : \"Main\",\n})\nexport class Main extends Laya.Script {\n\n    onStart() {\n        console.log(\"Game start\");\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo({\n    properties: [\n        {\n            name: \"Group1\",\n            inspector: \"Group\",\n            options: {\n                members: [\"b\", \"c\"]\n            },\n            position: \"after a\"\n        }\n    ]\n})\nexport class NewScript extends Laya.Script {\n\n    @property(String)\n    public a: string = \"\";\n\n    @property(String)\n    public b: string = \"\";\n\n    @property(String)\n    public c: string = \"\";\n\n    @property(String)\n    public d: string = \"\";\n\n    @property(String)\n    public e: string = \"\";\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Masks for Lights in LayaAir (TypeScript)\nDESCRIPTION: This code demonstrates how to set the layer mask for a light in LayaAir to illuminate specific layers. It uses bitwise operations to combine layer values and assign the result to the `layerMask` property of the `FreeformLight2D` component.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/2D/BaseLight2D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class lightTest extends Laya.Script {\n    declare owner: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    light1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    mesh1: Laya.Sprite;\n\n    @property({ type: Laya.Sprite })\n    mesh2: Laya.Sprite;\n\n    private light1Render: Laya.FreeformLight2D;\n    private mesh1Render: Laya.Mesh2DRender;\n    private mesh2Render: Laya.Mesh2DRender;\n\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.light1Render = this.light1.getComponent(Laya.FreeformLight2D);\n        this.mesh1Render = this.mesh1.getComponent(Laya.Mesh2DRender);\n        this.mesh2Render = this.mesh2.getComponent(Laya.Mesh2DRender);\n\n        //设置mesh1位于0层（Default层）\n        this.mesh1Render.layer = 0;\n        //设置mesh2位于1层（自定义的第一个层）\n        this.mesh2Render.layer = 1;\n        //让光的遮罩与指定的0和1层发生交互，只照亮0和1层\n        this.light1Render.layerMask = 1 << 0 | 1 << 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Effect CommandBuffer - LayaAir TypeScript\nDESCRIPTION: This function creates a CommandBuffer to render outlines around specific objects. It renders the target objects with special outline materials onto a separate render texture, applies blurring to this texture using a custom material, and then uses subsequent blit operations to combine the blurred and original renders to isolate and composite the outline effect back onto the main scene render.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/CommandBuffer/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateDrawMeshCommandBuffer(camera:Camera,renders:BaseRender[],materials:Material[]):CommandBuffer{\n    var buf:CommandBuffer = new CommandBuffer();\n    //当需要在流程中拿摄像机渲染效果的时候 设置true\n    camera.enableBuiltInRenderTexture = true;\n    //创建和屏幕一样大的Rendertexture\n    var viewPort:Viewport = camera.viewport;\n    var renderTexture = RenderTexture.createFromPool(viewPort.width,viewPort.height,RenderTextureFormat.R8G8B8A8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //将RenderTexture设置为渲染目标\n    buf.setRenderTarget(renderTexture);\n    //清楚渲染目标的颜色为黑色，不清理深度\n    buf.clearRenderTarget(true,false,new Vector4(0,0,0,0));\n    //将传入的Render渲染到纹理上\n    for(var i = 0,n = renders.length;i<n;i++){\n      buf.drawRender(renders[i],materials[i],0);\n    }\n    //创建新的RenderTexture\n     var subRendertexture = RenderTexture.createFromPool(viewPort.width,viewPort.heigh,RenderTextureFormat.R8G8B8A8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //将renderTexture的结果复制到subRenderTexture\n     buf.blitScreenQuad(renderTexture,subRendertexture);\n    //设置模糊的参数\n     var downSampleFactor:number = 2;\n     var downSampleWidth:number = viewPort.width/downSampleFactor;\n     var downSampleheigh:number = viewPort.heigh/downSampleFactor;\n    var texSize:Vector4 = new Vector4(1.0/viewPort.width,1.0/viewPort.heigh,viewPort.width,downSampleheigh);\n    //创建模糊材质\n    var blurMaterial:BlurMaterial = new BlurMaterial(texSize,1);\n    //创建降采样RenderTexture1\n     var downRenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //降采样 使用blurMaterial材质的0SubShader将Rendertexture渲染到DownRendertexture\n     buf.blitScreenQuadByMaterial(renderTexture,downRenderTexture,null,blurMaterial,0);\n     //创建降采样RenderTexture2\n    var blurTexture:RenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    blurTexture.filterMode = FilterMode.Bilinear;\n    //Horizontal blur 使用blurMaterial材质的1SubShader\n    buf.blitScreenQuadByMaterial(downRenderTexture,blurTexture,null,blurMaterial,1);\n    //vertical blur 使用blurMaterial材质的2SubShader\n    buf.blitScreenQuadByMaterial(blurTexture,downRenderTexture,null,blurMaterial,2);\n    //Horizontal blur 使用blurMaterial材质的1SubShader\n    buf.blitScreenQuadByMaterial(downRenderTexture,blurTexture,null,blurMaterial,1);\n    //vertical blur  使用blurMaterial材质的2SubShader\n    buf.blitScreenQuadByMaterial(blurTexture,downRenderTexture,null,blurMaterial,2);\n    //在命令流里面插入设置图片命令流，在调用的时候会设置blurMaterial的图片数据\n    buf.setShaderDataTexture(blurMaterial._shaderValues,BlurMaterial.SHADERVALUE_SOURCETEXTURE0,downRenderTexture);\n    buf.setShaderDataTexture(blurMaterial._shaderValues,BlurMaterial.ShADERVALUE_SOURCETEXTURE1,subRendertexture);\n    //caculate edge计算边缘图片\n    buf.blitScreenQuadByMaterial(blurTexture,renderTexture,null,blurMaterial,3);\n    //重新传入图片\n    buf.setShaderDataTexture(blurMaterial._shaderValues,BlurMaterial.SHADERVALUE_SOURCETEXTURE0,renderTexture);\n    //将camera渲染结果复制到subRendertexture，使用blurMaterial的4通道shader\n    buf.blitScreenQuadByMaterial(null,subRendertexture,null,blurMaterial,4);\n    //将subRenderTexture重新赋值到camera的渲染结果上面\n    buf.blitScreenQuadByMaterial(subRendertexture,null);\n    return buf;\n  }\n```\n\n----------------------------------------\n\nTITLE: Modifying getExpansionMainPath in RuntimeProxy.java for ZIP resource path\nDESCRIPTION: This Java code snippet defines the method getExpansionMainPath to specify the path to the main expansion ZIP file on an Android device, enabling the app to locate resources stored in the ZIP archive. It is part of the RuntimeProxy class in LayaNative, with dependencies on the Android environment and project-specific paths.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/apk_expansion/readme.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic String getExpansionMainPath()\n{\n    return \"/storage/emulated/0/Android/test/com.layabox.game/test.zip\";\n}\npublic String getExpansionPatchPath()\n{\n    return \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Generating White Noise with Web Audio API in JavaScript\nDESCRIPTION: Creates an AudioContext, generates a 2-second stereo buffer filled with random values (white noise), and plays it through an AudioBufferSourceNode when the window is clicked. This example uses the standard browser Web Audio API.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n// Stereo\nvar channels = 2;\n// Create an empty two-second stereo buffer at the\n// sample rate of the AudioContext\nvar frameCount = audioCtx.sampleRate * 2.0;\nvar myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nwindow.onclick = function() {\n    // Fill the buffer with white noise;\n    //just random values between -1.0 and 1.0\n    for (var channel = 0; channel < channels; channel++) {\n        // This gives us the actual ArrayBuffer that contains the data\n        var nowBuffering = myArrayBuffer.getChannelData(channel);\n        for (var i = 0; i < frameCount; i++) {\n            // Math.random() is in [0; 1.0]\n            // audio needs to be in [-1.0; 1.0]\n            nowBuffering[i] = Math.random() * 2 - 1;\n        }\n    }\n    // Get an AudioBufferSourceNode.\n    // This is the AudioNode to use when we want to play an AudioBuffer\n    var source = audioCtx.createBufferSource();\n    // set the buffer in the AudioBufferSourceNode\n    source.buffer = myArrayBuffer;\n    // connect the AudioBufferSourceNode to the\n    // destination so we can hear the sound\n    source.connect(audioCtx.destination);\n    // start the source playing\n    source.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Params Type Definition\nDESCRIPTION: This section shows how to add a Params variable. Then it shows the different types of Params variables. It explains how to define float, texture2D, vector2/3/4, color, and define variables.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Applying Custom Inspector to a Component Field in TypeScript\nDESCRIPTION: Associates a custom inspector field with a component's property via inspector attribute, allowing specialized UI for editing specific fields within LayaAir.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Laya.regClass()\nexport class Script extends Laya.Script {\n     @property({ type : Laya.Node, inspector: \"MyTestField\" })\n     public node: Laya.Node;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of PixelLineSprite3D in TypeScript\nDESCRIPTION: Example code demonstrating how to create a sphere with a mesh filter and render it as pixel lines using the Tool.linearModel utility method. The code creates a sphere primitive and converts it to green pixel lines.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/PixelLine/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nonAwake(): void {\n    /* 创建球体 */\n    let sphere = new Laya.Sprite3D;\n    let sphereMesh = sphere.addComponent(Laya.MeshFilter);\n    sphereMesh.sharedMesh = Laya.PrimitiveMesh.createSphere(0.25, 20, 20);\n    let sphereRender = sphere.addComponent(Laya.MeshRenderer);\n    // 为球体添加像素线渲染精灵\n    let sphereLineSprite3D: Laya.PixelLineSprite3D = new Laya.PixelLineSprite3D(3500);\n    this.scene.addChild(sphereLineSprite3D);\n    //设置像素线渲染精灵线模式\n    Tool.linearModel(sphere, sphereLineSprite3D, Laya.Color.GREEN);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sphere with Pixel Lines in LayaAir\nDESCRIPTION: Sample code demonstrating how to create a sphere mesh and convert it to pixel lines using the Tool.linearModel utility method. The example creates a sphere primitive and visualizes it as green pixel lines.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/PixelLine/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nonAwake(): void {\n    /* 创建球体 */\n    let sphere = new Laya.Sprite3D;\n    let sphereMesh = sphere.addComponent(Laya.MeshFilter);\n    sphereMesh.sharedMesh = Laya.PrimitiveMesh.createSphere(0.25, 20, 20);\n    let sphereRender = sphere.addComponent(Laya.MeshRenderer);\n    // 为球体添加像素线渲染精灵\n    let sphereLineSprite3D: Laya.PixelLineSprite3D = new Laya.PixelLineSprite3D(3500);\n    this.scene.addChild(sphereLineSprite3D);\n    //设置像素线渲染精灵线模式\n    Tool.linearModel(sphere, sphereLineSprite3D, Laya.Color.GREEN);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous and Asynchronous Messages in iOS Using Objective-C\nDESCRIPTION: Provides Objective-C implementations for handling synchronous and asynchronous messages in `HandleMessageUtils.mm`. The synchronous method returns NSString responses based on event names, while the asynchronous method uses a Block callback to return the result. Both methods log the event name and data received using NSLog.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/platform_communication/readme.md#_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n+(NSString*)handleSyncMessageWithEventName:(NSString*)eventName data:(NSString*)data {\n    NSLog(@\"%@ %@\", eventName, data);\n    if ([eventName isEqualToString:@\"syncMessage\"]) {\n        return @\"sync message from platform\";\n    }\n    return @\"default sync result\";\n}\n+(void)handleAsyncMessageWithEventName:(NSString*)eventName data:(NSString*)data callback:(void (^)(NSString *))cb {\n    NSLog(@\"%@ %@\", eventName, data);\n    if ([eventName isEqualToString:@\"asyncMessage\"]) {\n        cb(@\"async message from platform\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Native Objects in LayaAir\nDESCRIPTION: TypeScript code showing the implementation of Laya.Browser properties for accessing native browser objects including document, window, and container. These provide access to DOM manipulation, window controls, and canvas container management.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**浏览器原生 document 对象的引用。*/\n    static get document(): any {\n        Browser.__init__();\n        return Browser._document;\n    }    \n\n\t/**浏览器原生 window 对象的引用。*/\n    static get window(): any {\n        return Browser._window || Browser.__init__();\n    }\n    \n   \t/**画布容器，用来盛放画布的容器。方便对画布进行控制*/\n    static get container(): any {\n        if (!Browser._container) {\n            Browser.__init__();\n            Browser._container = Browser.createElement(\"div\");\n            Browser._container.id = \"layaContainer\";\n            Browser._document.body.appendChild(Browser._container);\n        }\n        return Browser._container;\n    }\n\n    static set container(value: any) {\n        Browser._container = value;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Import Settings Class\nDESCRIPTION: This code defines a custom class (`DemoABCImportSettings`) and is used to create a user interface for editing custom import settings for a resource. This class is defined using `@IEditor.regClass()`. The `@IEditor.property` decorator is used to define editable properties. This is then used with an inspector layout to display import settings in the IDE. Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.regClass()\nexport class DemoABCImportSettings {\n    @IEditor.property(String)\n    name: string = \"\";\n\n    @IEditor.property(Number)\n    age: number = 18;\n\n    @IEditor.property(Number)\n    gender: number =1;\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Text Layout Using changeText Method for Single-Line Text Update in LayaAir TypeScript\nDESCRIPTION: Shows how to optimize text updates by skipping layout recalculations when modifying single-line, style-consistent Text objects. The changeText method replaces the last drawing instruction directly, improving performance especially when updating text frequently without style changes. Useful in scenarios with simple text rendering. Requires LayaAir engine and TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/performanceOptimization/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.text.text=\"text\";\nLaya.stage.addChild(this.text);\n//后面只是更新文字内容，使用changeText能提高性能\nthis.text.changeText(\"text changed.\");\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Activation State on Sprite3D (TypeScript)\nDESCRIPTION: Shows how to define and use getters and setters for the active property on a node. The getter returns whether the node is currently active, and the setter enables or disables activation. This property affects both the node and its children; expects internal state management.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/Sprite3D/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 获取自身是否激活。\n     *   @return\t自身是否激活。\n     */\n    get active(): boolean\n    \n    /**\n     * 设置是否激活。\n     * @param\tvalue 是否激活。\n     */\n    set active(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Show LayaAir performance statistics panel\nDESCRIPTION: This code snippet demonstrates how to display the LayaAir engine's performance statistics panel within a TypeScript project. The `Laya.Stat.show(0,0)` function call initializes the panel at the specified coordinates (0,0).  It requires the LayaAir engine to be initialized first using `Laya.init()`. This allows developers to monitor real-time performance metrics like FPS, DrawCall, and memory usage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Stat/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//初始化舞台\nLaya.init(1136, 640);\n//调用性能统计面板方法，(0,0)为面板位置坐标\nLaya.Stat.show(0,0);\n```\n\n----------------------------------------\n\nTITLE: Defining LogLevel Enum in LayaNative\nDESCRIPTION: Definition of the LogLevel enum in LayaNative that assigns numeric values to each log level, with Debug being the highest (5) and Close (0) being used to disable logging.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Other_settings/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nenum class LogLevel\n{\n    Debug = 5,\n    Info = 4,\n    Warn = 3,\n    Error = 2,\n    Fatal = 1,\n    Close = 0,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Steam with SteamAPI_InitEx - C++\nDESCRIPTION: This code snippet initializes the Steam API using SteamAPI_InitEx. It checks if Steam has already been initialized and returns true if so. It also checks the return value of SteamAPI_InitEx to ensure that Steam has been initialized successfully. If initialization fails, it returns false.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SteamManager::Initialize()\n{\n    // 是否进行过初始化\n    if (m_bInitialized)\n    {\n        return true;\n    }\n\n    SteamErrMsg msg;    \n\n    if (SteamAPI_InitEx(&msg) != ESteamAPIInitResult::k_ESteamAPIInitResult_OK)\n    {\n        // Steam初始化失败, 请确保Steam客户端正在运行\n        return false;\n    }\n\n    m_bInitialized = true;\n    \n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating VBox and Button Components in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates dynamic creation of a VBox component and three Button instances, arranging them within a vertical layout in LayaAir. Dependencies include Laya's loader, Button, and VBox classes, as well as the class decorators. The script preloads a button skin image, instantiates Button objects, styles the VBox (position, size, background color, spacing, alignment), adds the Buttons as children, and finally appends the VBox to the scene root (owner). The key parameters are skins (Button image resource), vbox, btn1, btn2, btn3, and their arrangement properties. The snippet executes onAwake after scene loading, with Button creation and VBox assembly abstracted into dedicated methods. Limitations: it is meant to be attached as a component script and expects the 'atlas/comp/button.png' resource to exist.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/VBox/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class UI_VBox extends Laya.Script {\n\n    private vbox: Laya.VBox;\n    private btn1: Laya.Button;\n    private btn2: Laya.Button;\n    private btn3: Laya.Button;\n\n    // 按钮皮肤资源\n    private skins: string = \"atlas/comp/button.png\";\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        Laya.loader.load(this.skins).then(() => {\n            this.createBtn();\n            this.createvbox();\n            // 添加VBox组件\n            this.owner.addChild(this.vbox);\n        });\n    }\n\n    // 创建Button组件\n    private createBtn(): void {\n        this.btn1 = new Laya.Button(this.skins);\n        this.btn2 = new Laya.Button(this.skins);\n        this.btn3 = new Laya.Button(this.skins);\n    }\n\n    // 创建VBox组件\n    private createvbox(): void {\n        this.vbox = new Laya.VBox;\n        this.vbox.pos(100, 100);\n        this.vbox.size(600, 300);\n        this.vbox.bgColor = \"#ffffff\";\n        this.vbox.addChild(this.btn1);\n        this.vbox.addChild(this.btn2);\n        this.vbox.addChild(this.btn3);\n        this.vbox.space = 80;\n        this.vbox.align = \"center\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling VideoNode Playback in LayaAir using TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to control the playback of a VideoNode in the LayaAir engine. It listens for a mouse click on the stage, loads a video file, and then plays it using the `play()` method.  It relies on the LayaAir engine, specifically the `Laya` namespace and its components like `VideoNode` and `stage`. It also showcases how to use `Laya.loader.load()` to load media assets.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/displayObject/VideoNode/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.VideoNode })\n    public video: Laya.VideoNode;\n\n    constructor() {\n        super();\n    }\n\n    // 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        // 鼠标点击触发播放\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, () => {\n            Laya.loader.load(\"resources/layaAir.mp4\").then(() => {\n                this.video.play(); //播放视频\n            });\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Component Properties in LayaAir IDE Inspector with @classInfo (TypeScript)\nDESCRIPTION: Shows how to utilize the @classInfo decorator in a LayaAir TypeScript script to group component properties (b and c into 'Group1') within the IDE's inspector panel. This enhances readability when dealing with numerous properties by visually organizing them. Requires importing classInfo from Laya and defining groups using the 'properties' array within the decorator, specifying group name, members, and optional position.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/customComponent/decorators/readme.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property, classInfo } = Laya;\n\n@regClass()\n@classInfo({\n    properties: [\n        {\n            name: \"Group1\",\n            inspector: \"Group\",\n            options: {\n                members: [\"b\", \"c\"]\n            },\n            position: \"after a\"\n        }\n    ]\n})\nexport class NewScript extends Laya.Script {\n\n    @property(String)\n    public a: string = \"\";\n\n    @property(String)\n    public b: string = \"\";\n\n    @property(String)\n    public c: string = \"\";\n\n    @property(String)\n    public d: string = \"\";\n\n    @property(String)\n    public e: string = \"\";\n\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling LayaAir Label Component Using TypeScript Script\nDESCRIPTION: This snippet demonstrates how to use a custom TypeScript component script in LayaAir to control a Label component's appearance and behavior. It uses the Laya framework decorators for class registration and property definition, linking a Label instance from the scene to the script. Within the onAwake lifecycle hook, multiple Label properties are set, including position, size, pivot, font style, color, text content, and text alignment. This example requires LayaAir's Script and Label classes and assumes the Label component is referenced via the 'lab' property. The script is intended for a 2D scene and modifies visual styles and layout properties to display a styled text label.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Label/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class LabelControl extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property( { type : Laya.Label } )\n    public lab: Laya.Label;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.lab.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); //位置\n        this.lab.size(500, 30); //大小\n        this.lab.pivot(this.lab.width/2, this.lab.height/2); //轴心点\n        this.lab.text = \"大家好，欢迎大家来到LayaAir IDE\"; //文本内容\n        this.lab.font = \"宋体\"; //字体\n        this.lab.fontSize = 50; //字体大小\n        this.lab.color = \"#ff0000\"; //字体颜色\n        this.lab.bold = true; //加粗\n        this.lab.italic = true; //斜体\n        this.lab.underline = true; //下划线\n        this.lab.underlineColor = \"#ff0000\"; //下划线颜色\n        this.lab.stroke = 5; //描边宽度\n        this.lab.strokeColor = \"#000000\" ; //描边颜色\n        this.lab.wordWrap = true; //自动换行\n        this.lab.leading = 10; //垂直行间距\n        this.lab.align = \"left\"; //水平对齐方式\n        this.lab.valign = \"top\"; //垂直对齐方式\n        this.lab.overflow = \"visible\"; //文本溢出\n        // this.lab.fitContent = \"yes\"; //自适应大小\n\n        this.lab.bgColor = \"#19a4f1\"; //背景颜色\n        this.lab.borderColor = \"#f6ff03\" //边框颜色\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Categorizing and Sorting Component Properties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to categorize and sort component properties in the LayaAir IDE using the `catalog` and `catalogOrder` parameters within the `@property` decorator. It includes examples of grouping properties under custom categories and specifying the display order of those categories.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n    @property({ type : \"number\" })\n    a : number;\n\n    @property({ type: \"string\"})\n    b : string;\n\n    @property({ type: \"boolean\",catalog:\"adv\"})\n    c : boolean;\n\n    @property({ type: String, inspector: \"color\" ,catalog:\"adv\"})\n    d: string;\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Asset Exporter in LayaAir Editor (TypeScript)\nDESCRIPTION: Defines and registers a custom asset exporter class by extending IEditorEnv.AssetExporter, using @IEditorEnv.regAssetExporter for the 'abc' file extension. The handleExport method executes during export/build, accessing this.asset and this.exportInfo for resource manipulation or dependency analysis. Ensures resource references are converted and dependencies registered. No specific input parameters; key output is correctly processed and exported asset data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditorEnv.regAssetExporter([\"abc\"])\nexport class DemoAssetExporter extends IEditorEnv.AssetExporter {\n    async handleExport(): Promise<void> {\n        //导出处理\n        //当前正在处理的资源是this.asset\n        //输出信息在this.exportInfo\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Sizing Sprite Containers to their Content - TypeScript\nDESCRIPTION: Shows how to enable automatic sizing of a sprite by setting its autoSize property to true, draw a rectangle, and add it to the stage. AutoSize recalculates size when the display list changes, but should be avoided for containers with many children. Setting 'size' explicitly will override autoSize.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.autoSize=true;\nsp.graphics.drawRect(0,0,100,100,\"#FF0000\");\nLaya.stage.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Directly Setting Sprite Size Using Texture Dimensions - TypeScript\nDESCRIPTION: Demonstrates how to load a texture, draw it to a sprite, and manually set the sprite's size to the texture dimensions for maximum efficiency. Utilizes Graphics.drawTexture and the Texture's width and height. Often used for precise display control when loading external images.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.loader.load(\"res/apes/monkey2.png\",Laya.Handler.create(this,function()\n{\n  var texture=Laya.loader.getRes(\"res/apes/monkey2.png\");\n  var sp=new Laya.Sprite();\n  sp.graphics.drawTexture(texture,0,0);\n  sp.size(texture.width,texture.height);\n  Laya.stage.addChild(sp);\n}));\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Asynchronously with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the asynchronous loading of a scene using `Addressables.loadSceneAsync`. It takes a key (string) to identify the scene resource and uses a promise to handle the asynchronous operation, returning the scene's path in the `LoadResult.data`. The scene is then opened using `Laya.Scene.open` after loading.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 加载场景\n * @description 在 {@link LoadResult.data} 中返回加载场景所需的路径\n * @param key 用来筛选资源的关键字\n * @param options\n * @returns {Promise<LoadResult>} 在 {@link LoadResult.data} 中返回加载的场景的路径\n */\nstatic async loadSceneAsync(key: string, options?: LoadSceneOptions): Promise<LoadResult> \n```\n\n----------------------------------------\n\nTITLE: Available Component Event Handler Methods in LayaAir TypeScript Scripts\nDESCRIPTION: Lists the optional event handler method signatures that can be implemented within a custom `Laya.Script` class. LayaAir automatically invokes these methods when the corresponding physics (e.g., `onTriggerEnter`), mouse (e.g., `onMouseDown`, `onMouseClick`), or keyboard (e.g., `onKeyDown`) events occur on the associated node.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/Script/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 开始碰撞时执行\n     */\n    onTriggerEnter?(other: PhysicsComponent | ColliderBase, self?: ColliderBase, contact?: any): void;\n\n    /**\n     * 持续碰撞时执行\n     */\n    onTriggerStay?(other: PhysicsComponent | ColliderBase, self?: ColliderBase, contact?: any): void;\n\n    /**\n     * 结束碰撞时执行\n     */\n    onTriggerExit?(other: PhysicsComponent | ColliderBase, self?: ColliderBase, contact?: any): void;\n\n    /**\n     * 开始碰撞时执行\n     */\n    onCollisionEnter?(collision: Collision): void;\n\n    /**\n     * 持续碰撞时执行\n     */\n    onCollisionStay?(collision: Collision): void;\n\n    /**\n     * 结束碰撞时执行\n     */\n    onCollisionExit?(collision: Collision): void;\n\n    /**\n     * 关节破坏时执行此方法\n     */\n    onJointBreak?(): void;\n\n    /**\n     * 鼠标按下时执行\n     */\n    onMouseDown?(evt: Event): void;\n\n    /**\n     * 鼠标抬起时执行\n     */\n    onMouseUp?(evt: Event): void;\n\n    /**\n     * 鼠标右键或中键按下时执行\n     */\n    onRightMouseDown?(evt: Event): void;\n\n    /**\n     * 鼠标右键或中键抬起时执行\n     */\n    onRightMouseUp?(evt: Event): void;\n\n    /**\n     * 鼠标在节点上移动时执行\n     */\n    onMouseMove?(evt: Event): void;\n\n    /**\n     * 鼠标进入节点时执行\n     */\n    onMouseOver?(evt: Event): void;\n\n    /**\n     * 鼠标离开节点时执行\n     */\n    onMouseOut?(evt: Event): void;\n\n    /**\n     * 鼠标按住一个物体后，拖拽时执行\n     */\n    onMouseDrag?(evt: Event): void;\n\n    /**\n     * 鼠标按住一个物体，拖拽一定距离，释放鼠标按键后执行\n     */\n    onMouseDragEnd?(evt: Event): void;\n\n    /**\n     * 鼠标点击时执行\n     */\n    onMouseClick?(evt: Event): void;\n\n    /**\n     * 鼠标双击时执行\n     */\n    onMouseDoubleClick?(evt: Event): void;\n\n    /**\n     * 鼠标右键点击时执行\n     */\n    onMouseRightClick?(evt: Event): void;\n\n    /**\n     * 键盘按下时执行\n     */\n    onKeyDown?(evt: Event): void;\n\n    /**\n     * 键盘产生一个字符时执行\n     */\n    onKeyPress?(evt: Event): void;\n\n    /**\n     * 键盘抬起时执行\n     */\n    onKeyUp?(evt: Event): void;\n```\n\n----------------------------------------\n\nTITLE: 动画文件保存名称与后缀规则说明\nDESCRIPTION: 描述3D和2D动画文件及状态机文件的命名规则与后缀，通过命名及后缀区分动画类型，便于版本和平台兼容。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/timelineGUI/readme.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n// 3D动画文件后缀为.lani，状态机文件为.controller\n// 2D动画文件后缀为.mc，状态机为.mcc\n// 文件名采用节点名_动画名命名规则\n```\n\n----------------------------------------\n\nTITLE: Displaying the Performance Statistics Panel in TypeScript\nDESCRIPTION: This code snippet demonstrates how to display the performance statistics panel in a LayaAir TypeScript project. The `Laya.Stat.show(0,0)` method is used to activate the panel, positioning it at coordinates (0, 0) on the stage. Proper capitalization is important when using the LayaAir API.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Stat/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//初始化舞台\nLaya.init(1136, 640);\n//调用性能统计面板方法，(0,0)为面板位置坐标\nLaya.Stat.show(0,0);\n```\n\n----------------------------------------\n\nTITLE: Closing a Specific Scene - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to close a specific scene using `Laya.Scene.close`. The scene is closed based on its URL and optionally its name. The function returns a boolean indicating whether the close operation was successful.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Scene/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 根据地址，关闭场景（包括对话框）\n * @param\turl\t\t场景地址\n * @param\tname\t如果name不为空，name必须相同才能关闭\n * @return\t返回是否关闭成功，如果url找不到，则不成功\n*/\nstatic close(url: string, name?: string): boolean {\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.Scene.close(\"uiDemo/page/OpenScene.ls\");\n```\n\n----------------------------------------\n\nTITLE: Controlling Framerate and Mouse Tracking in LayaAir Canvas - TypeScript\nDESCRIPTION: Initializes the LayaAir engine, sets the framerate to FRAME_SLOW, draws a movable circle, and updates its position based on mouse movement. Relies on Laya.init, Laya.Stat.show, Laya.stage.frameRate, and mouse event listening. Illustrates switching framerate dynamically for performance and interactivity.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.init(this.Browser.width,this.Browser.height);\nLaya.Stat.show();\nLaya.stage.frameRate=Laya.Stage.FRAME_SLOW;\n\nvar sp=new Laya.Sprite();\nsp.graphics.drawCircle(0,0,20,\"#990000\");\nLaya.stage.addChild(sp);\n\nLaya.stage.on(Laya.Event.MOUSE_MOVE,this,function()\n{\n  sp.pos(Laya.stage.mouseX,Laya.stage.mouseY);\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Script Loading via innerHTML in LayaAir with TypeScript\nDESCRIPTION: Demonstrates loading JavaScript by fetching the script content as text and assigning it to a script element's innerHTML. Uses HttpRequest to load the script file, then creates a script element and sets its content.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(500,500);\n        var httpreq:Laya.HttpRequest = new Laya.HttpRequest();\n        httpreq.on(Laya.Event.COMPLETE,this,this.completeHandler);\n        httpreq.on(Laya.Event.ERROR,this,this.errorHandler);\n        httpreq.send(\"demo1.js\");\n    }\n    private completeHandler(e:any):void{\n        var script:any = Laya.Browser.document.createElement(\"script\");\n        Laya.Browser.document.body.appendChild(script);\n        script.innerHTML = e;\n        var client:any = new Laya.Browser.window.Demo1();\n        client.start();\n    }\n    private errorHandler(e:any):void{\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Creating a Shader Blueprint File\nDESCRIPTION: This snippet explains how to create a shader blueprint file.  It describes the steps needed to create the file via the Assert window by right-clicking and selecting the 'Shader BluePrint' option from the Create menu.  The document explains that a Shader file is created when the blueprint file is opened.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Controlling LayaAir Image Properties via Script in TypeScript\nDESCRIPTION: This TypeScript snippet defines a custom Laya.Script class that exposes an Image instance as a property and sets its skin, size, and color in the onAwake() lifecycle method. Dependencies include LayaAir 3.x, TypeScript, and the registration of the script class with Laya@regClass. The img parameter is expected to be an existing Laya.Image component reference, while the Image's properties like skin, useSourceSize, and color are configured. Outputs are visual—modifying the look of the assigned Image node. No asynchronous or dynamic resource loading is shown, and the script expects the necessary image resource to be preloaded and available.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/Image/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Image })\n    public img: Laya.Image;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.img.skin = \"resources/layaAir.png\";//设置皮肤\n        this.img.useSourceSize = true;//设置图片大小为源大小\n        this.img.color = \"#0000FF\";//设置颜色为蓝色\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Message Schema in .proto File\nDESCRIPTION: Defines a protobuf 3 syntax message `ChatMessage` with three fields representing a chat message structure: `user` (string), `message` (string), and `timestamp` (int64). This file acts as the core message contract used by both client and server for serialization and deserialization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\"; // 指定使用 Protobuf 3 语法\n\n// 定义一个 ChatMessage 消息\nmessage ChatMessage {\n  string user = 1;     // 用户名，字段编号是 1\n  string message = 2;  // 消息内容，字段编号是 2\n  int64 timestamp = 3; // 消息时间戳，字段编号是 3\n}\n```\n\n----------------------------------------\n\nTITLE: 初始化并设置Laya.Byte对象端序\nDESCRIPTION: 创建一个Laya.Byte对象用于处理二进制数据，并设置其字节序为小端模式(LITTLE_ENDIAN)，这对于确保二进制数据在不同系统间正确传输非常重要。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/network/WebSocket/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//  初始化用于二进制数据处理的 Laya.Byte\nlet byte = new Laya.Byte();\n// 设置字节序为小端模式\nbyte.endian = Laya.Byte.LITTLE_ENDIAN;\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Closable WebView in TypeScript\nDESCRIPTION: Example of implementing a WebView that cannot be closed by the user (canclose set to false). The code adds a touch event listener that creates a WebView when the screen is touched.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/webview/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('touchstart',()=>{\n    if(conch){\n        var l = 50;\n        var t = 50;\n        var w = window.innerWidth - l * 2;\n        var h = window.innerHeight - t * 2;\n        conch.setExternalLinkEx('http://www.layabox.com',l,t,w,h,false); // canclose设置为false\n        //conch.setExternalLink('http://www.baidu.com');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing/Requiring Node Modules in UI/Scene Processes - TypeScript\nDESCRIPTION: Demonstrates how to import built-in Node.js modules using standard import syntax and how to require IDE-built-in CommonJS modules using `IEditor.require` or `IEditorEnv.require` within the LayaAir3-IDE UI or Scene processes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//可通过import导入node内置模块\nimport fs from \"fs\";\nimport path from \"path\";\n\n//也可以通过require\nconst fs = IEditor.require(\"fs\");\nconst sharp = IEditor.require(\"sharp\");\nconst glob = IEditor.require(\"glob\");\n```\n\n----------------------------------------\n\nTITLE: Creating Blueprint Functions\nDESCRIPTION: This section discusses how to create custom functions within the Shader Blueprint. It explains how to add parameters, set the return types, and how to call functions within a function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Handling Steam Callbacks - C++\nDESCRIPTION: This C++ code snippet shows how to handle Steam callbacks. It checks if Steam is initialized and then calls `SteamAPI_RunCallbacks()` to process any pending callbacks. This function should be called every frame to ensure timely processing of Steam events. It is essential for receiving notifications about achievements and other Steam-related events.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nvoid SteamManager::SteamCallback()\n{\n    // 每帧调用\n    if (m_bInitialized)\n    {\n        SteamAPI_RunCallbacks();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inspector Layout for Offline/Config Resources (TypeScript)\nDESCRIPTION: Demonstrates the creation of a custom class and file inspector layout for non-runtime resources, such as JSON or XML configuration files. DemoABCType is registered and used in DemoInspectorLayout, extending IEditor.FileInspectorLayout to provide editor-side inspection and editing capabilities. Inputs are editor-selected assets; outputs are property-bound panels for editing meta/config values.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditor.regClass()\nexport class DemoABCType {\n    @IEditor.property(String)\n    name: string = \"\";\n\n    @IEditor.property(Number)\n    age: number = 18;\n\n    @IEditor.property(Number)\n    gender: number =1;\n}\n\n@IEditor.inspectorLayout(\"asset\")\nexport class DemoInspectorLayout extends IEditor.FileInspectorLayout {\n    constructor() {\n        super(DemoABCType);\n    }\n\n    accept(asset: IEditor.IAssetInfo): boolean {\n        return asset.ext === \"abc\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation of PixelLineSprite3D in TypeScript\nDESCRIPTION: The constructor method for PixelLineSprite3D that initializes a new instance with a renderer component and UnlitMaterial. It sets up the material to use vertex colors and configures the maximum line count.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/PixelLine/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 创建一个 <code>PixelLineSprite3D</code> 实例。\n * @param maxCount 最大线段数量。\n * @param name 名字。\n */\nconstructor(maxCount: number = 2, name: string = null) {\n    super(name);\n\n    this._render = this.addComponent(PixelLineRenderer);\n    this._geometryFilter = (this._render as PixelLineRenderer)._pixelLineFilter;\n    (this._render as PixelLineRenderer).maxLineCount = maxCount;\n    let material = this._render.material = new UnlitMaterial();\n    material.enableVertexColor = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Orientation Function in LayaNative\nDESCRIPTION: A TypeScript function that sets the screen orientation in LayaNative by mapping named orientation values to numeric constants. The function takes a string parameter representing the desired orientation and uses the conchConfig API to apply the settings.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/screen_orientation/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setOrientation(s) {\n    var nameToVal = {\n        landscape: 0, portrait: 1, user: 2, behind: 3, sensor: 4, nosensor: 5, sensor_landscape: 6, sensorLandscape: 6,\n        sensor_portrait: 7, sensorPortrait: 7, reverse_landscape: 8, reverseLandscape: 8, reverse_portrait: 9, reversePortrait: 9, full_sensor: 10, fullSensor: 10,\n    };\n    var nOri = (function (name) {\n        try {\n            var n = nameToVal[name];\n            return n || 0;\n        }\n        catch (e) {\n            return 0;\n        }\n    })(s);\n    conchConfig.setScreenOrientation(nOri);\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Output Platform in LayaAir IDE\nDESCRIPTION: Demonstrates defining a new build target platform with specific settings, interface, and associated build plugin logic. Shows how to register the platform with unique ID and display properties, and how to implement build pipeline hooks for custom packaging and deployment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.extensionManager.createBuildTarget(\"test\",  //平台的唯一id，不能冲突\n{ \n    caption: \"自定义平台\", //目标名称\n    settingsName:\"MyBuildPlatformtSettings\", //需要先用Edition.extensionManager.createSettings注册\n    inspector: \"TestBuildSettings\"  //一个usage为build-settings的面板\n    templatePath : \"editorResources/testTemplate\" //可选的一个参数，指定的目录内放置构建模版文件，构建时将会自动拷贝到输出目录\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.panel(\"TestBuildSettings\", { usage: \"build-settings\", title: \"测试\" })\nexport class TestBuildSettings extends IEditor.EditorPanel {\n    @IEditor.onLoad\n    static start() {\n        Editor.typeRegistry.addTypes([\n            {\n                name: \"MyTestSettings2\",\n                catalogBarStyle : \"hidden\",\n                properties: [\n                    {\n                        name: \"option1\",\n                        type: \"boolean\",\n                        default: true\n                    },\n                    {\n                        name: \"option2\",\n                        type: \"string\",\n                        default: \"2332\",\n                    }\n                ]\n            }\n        ]);\n        Editor.extensionManager.createSettings(\"MyBuildPlatformtSettings\", \"project\");\n        Editor.extensionManager.createBuildTarget(\"test\", { caption: \"自定义平台\", settingsName:\"MyTestSettings2\", inspector: \"TestBuildSettings\" });\n    }\n\n    async create() {\n        let panel = IEditor.GUIUtils.createInspectorPanel();\n        panel.allowUndo = true;\n        panel.inspect(Editor.getSettings(\"MyBuildPlatformtSettings\").data, \"MyBuildPlatformtSettings\");\n        this._panel = panel;\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regBuildPlugin(\"test\")\nexport class TestBuildPlugin implements IEditorEnv.IBuildPlugin {\n\n    async onCreatePackage(task: IEditorEnv.IBuildTask) {\n        //这里platformConfig，对应的是MyBuildPlatformtSettings，不需要自行再getSettings\n        task.logger.info(task.platformConfig.option2);\n    }\n}\n\n// 构建完成后，定义运行处理器示例\n@IEditorEnv.regBuildPlugin(\"test\")\nexport class TestBuildPlugin implements IEditorEnv.IBuildPlugin {\n\n    async onCreatePackage(task: IEditorEnv.IBuildTask) {\n        task.config.runHandler = {\n            serveRootPath : \"\"\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.loop Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.loop method. This method schedules a function to execute repeatedly after a specified interval in milliseconds.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 定时重复执行。\n     * @param\tdelay\t间隔时间(单位毫秒)。\n     * @param\tcaller\t执行域(this)。\n     * @param\tmethod\t定时器回调函数。\n     * @param\targs\t回调参数。\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\n     * @param\tjumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次\n     */\n    loop(delay: number, caller: any, method: Function, args: any[] = null, coverBefore: boolean = true, jumpFrame: boolean = false): void {\n        var handler: TimerHandler = this._create(false, true, delay, caller, method, args, coverBefore);\n        if (handler) handler.jumpFrame = jumpFrame;\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing All Text from LoadingView in LayaNative Using JavaScript\nDESCRIPTION: Demonstrates how to hide all text information, including tips and the loading percentage, from the LoadingView display by setting the showTextInfo property to false. This adjustment must be made in config.js within the initialization block of window.loadingView. This enables a purely graphical loading screen without textual feedback.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/loading_view_new/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.loadingView = new loadingView();\nif(window.loadingView)\n{\n    ...\n    window.loadingView.loading(-1);\n\n    window.loadingView.showTextInfo=false; // 值设置为false\n\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Component Properties in IDE - TypeScript\nDESCRIPTION: This code demonstrates how to expose component properties in the LayaAir IDE using the `@property()` decorator.  It shows the standard and shorthand syntax for defining properties and specifying their types and captions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript1 extends Laya.Script {\n    //装饰器属性的标准写法，适用于IDE的需要显示Tips或属性的中文别名等完整功能需求\n    @property({ type: String, caption: \"IDE显示用的别名\", tips: \"这是一个文本对象，只能输入文本哦\" }) \n    public text1: string = \"\";\n\n    //装饰器属性类型的简写方式，适用于只定义类型的需求\n    @property(String)   \n    public text2: string = \"\";\n\n    constructor() {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Circular Mask to a Sprite in TypeScript\nDESCRIPTION: Creates a Sprite with an image, then creates another Sprite (`mask`) as a child and draws a circle onto its graphics context. After a delay (`setTimeout`), the `mask` Sprite is assigned to the parent Sprite's `mask` property, clipping the parent's rendering to the shape of the mask.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\nLaya.stage.addChild(sprite);\nsprite.loadImage(\"atlas/comp/image.png\", null);\n        \n//创建遮罩\nlet mask = new Laya.Sprite();\nsprite.addChild(mask);\nmask.graphics.drawCircle(200, 200, 100, \"#FFFFFF\");\n\n//图片添加遮罩\nsetTimeout(() => { \n\tsprite.mask = mask;//等待1秒执行遮罩\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timers with Laya.timer in TypeScript\nDESCRIPTION: This snippet shows how to use LayaAir's timer functions 'frameLoop' and 'loop' to schedule repeated execution based on frame count or time interval. It also includes clearing timers for object cleanup, essential for preventing memory leaks upon object disposal.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/CPU/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.timer.frameLoop(1, this, this.animateFrameRateBased);\nLaya.stage.on(\"click\", this, this.dispose);\n\ndispose() \n{\n    Laya.timer.clear(this, this.animateFrameRateBased);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Initialization Callback with Laya.addBeforeInitCallback()\nDESCRIPTION: This code snippet demonstrates how to use `Laya.addBeforeInitCallback()` to register a function that will be executed before the LayaAir engine is initialized. This is useful for tasks such as downloading resources required by the physical engine (e.g., WebAssembly modules) during the initialization phase.  The callback function is added to Laya's internal initialization sequence.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customPhysicsEngine/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nLaya.addBeforeInitCallback(() => {\n    // Your initialization code here, e.g., downloading resources\n    console.log(\"Custom initialization logic.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating OpenDataContextView Programmatically in LayaAir\nDESCRIPTION: This TypeScript example shows how to dynamically create an OpenDataContextView component through code rather than using the IDE. It creates the component, adds it to the stage, and sets its position and size.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/OpenDataContextView/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        let opendata = new Laya.OpenDataContextView();\n        Laya.stage.addChild(opendata);\n        opendata.pos(100,100);\n        opendata.size(500,500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Prefab Property in LayaAir TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a script property `prefabFromResource` of type `Laya.Prefab` using the `@property` decorator. This allows a Prefab asset to be dragged from the project's assets folder onto this property slot in the LayaAir editor. At runtime, this property will hold the loaded Prefab object, ready for instantiation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/componentProperties/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@property( { type : Laya.Prefab } ) //加载 Prefab 的对象\nprivate prefabFromResource: Laya.Prefab;    \n```\n\n----------------------------------------\n\nTITLE: Updating Terrain Sprite World Matrix in TypeScript\nDESCRIPTION: Copies the world matrix from the visual terrain model ('meshSprite3D') to the 'terrainSprite' (MeshTerrainSprite3D). This synchronizes the position, rotation, and scale, ensuring the height data corresponds correctly to the visual terrain's world space.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//更新terrainSprite世界矩阵(为可行走区域世界矩阵)\nthis.terrainSprite.transform.worldMatrix = meshSprite3D.transform.worldMatrix;\n```\n\n----------------------------------------\n\nTITLE: Creating a LayaNative Project with Local SDK Path (Shell)\nDESCRIPTION: Creates a native project using `layanative3 createapp`. It specifies the resource folder (`-f SnowBallH5`), bundles resources (`-t 1`), names the project (`-n SnowBallNative`), provides the game URL (`-u`), and uses a specific SDK located locally at `D:/v2.0` (`-s D:/v2.0`). This is useful in offline environments.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/build_Cmd/readme.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ layanative3 createapp -f SnowBallH5 -t 1 -n SnowBallNative -u http://10.10.20.102:8899/index.js -s D:/v2.0\n```\n\n----------------------------------------\n\nTITLE: Assigning Collider Category and Mask with Bitwise Operations - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to set collision categories and masks for colliders in LayaAir3, using bitwise operators. The category property uses power-of-two values (1 << N) to define the group a collider belongs to, while the mask property can be assigned individual groups or combined (with |) for multiple collision targets. XOR (^) with -1 allows exclusion of specific groups. Required dependencies are the physics system and valid collider component references. Inputs include group ID numbers; outputs are the correct collision behavior enforced by the physical engine. Ensure groups are properly defined in the IDE or project settings to match these values.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics2D/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//用代码指定xxx碰撞体所属哪个碰撞类别（组）\nxxx.category = 1 << 3  ;// 值为2 的 3 次幂（8），可以简单理解分组ID为3，这样就更容易与IDE中的概念统一\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//直接指定xxx碰撞体 可以与  某个碰撞类别（组） 发生碰撞\nxxx.mask = 1 << 2;  //只与分组ID为2的（值为4）分成发生碰撞\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//通过 按位或，指定xxx碰撞体 可以与 多个碰撞类别（组） 发生碰撞\nxxx.mask = (1 << 1) | (1 << 2) | (1 << 5); //只与分组ID为1、2、5的进行碰撞\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//通过异或运算指定xxx碰撞体  不可以  与哪些类别（组） 发生碰撞，其它 类别（组） 都可以碰撞\n//用-1去异或运算任何2的N次幂值，得到的结果再与该幂值进行按位与运算，一定是为0，也就是不可以碰撞的。\nxxx.mask = -1 ^ (1 << 3) ^ (1 << 6)  //不与分组3、6进行碰撞，除3与6组之外都可以发生碰撞)\n```\n\n----------------------------------------\n\nTITLE: Controlling IDE Visibility with @property() in TypeScript\nDESCRIPTION: This snippet explains how to control the visibility of properties in the IDE using the `private` option within the `@property()` decorator. By default, properties starting with an underscore (`_`) are not displayed. Setting `private` to `false` forces underscored properties to be visible, while setting it to `true` hides non-underscored properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@property({ type: \"number\", private: false })\n_velocity: number = 0;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n    @property({ type: Number , private: true })\n    radian: number = 0;  //private设置为true之后，radian不会出现在IDE的属性面板上，只是用来存储输入的弧度\n    \n    @property({ type: Number, caption: \"角度\", serializable: false }) //这里设置serializable为false，所以degree不会被保存到场景文件中\n     get degree() {\n        return this.radian * (180 / Math.PI);//由于自己没有序列化保存，需要把radian存下来的弧度反算回角度，用于IDE属性面板显示\n    }\n    set degree(value: number) {\n        this.radian = value * (Math.PI / 180);//把输入的角度值，转成弧度给radian存起来。\n    }\n    \n    onStart() {\n        console.log(this.radian); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Complex Types with Property Decorators in TypeScript\nDESCRIPTION: Examples of nested arrays, dictionaries, and dynamic dropdown implementation using advanced property decorator configurations in LayaAir.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n    @property([[\"string\"]])\n    test1: string[][] = [[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\"]];\n\n    @property([[\"Record\", \"string\"]])\n    test2: Array<Record<string, string>> = [{ name: \"A\", value: \"a\" }, { name: \"B\", value: \"b\" }];\n\n    @property({ type: [\"Record\", [Number]], elementProps: { elementProps: { range: [0, 10] } } })\n    test3: Record<string, number[]> = { \"a\": [1, 2, 3], \"b\": [4, 5, 6] };\n\n    @property([\"Record\", [Laya.Prefab]])\n    test4: Record<string, Laya.Prefab[]>;\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Value Metrics in LayaAir Performance Plugin\nDESCRIPTION: Example showing how to use the perf_value API to track custom numerical values. The code tracks the count value from a CPU-intensive operation, allowing developers to monitor computational workload over time.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    onUpdate(): void {\n        const targetDuration = 2; // 目标持续时间（毫秒）\n        const startTime = performance.now(); // 使用性能高精度时间标记\n        // 一个简单的计数循环，用于占用CPU时间\n        // 初始值和增量的大小可能需要调整以匹配大约2ms的执行时间\n        let count = 0;\n        while (performance.now() - startTime < targetDuration) {\n            count++;\n        }\n\n        this.perfMain.perf_value(\"value1\", count);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Event Handlers in LayaAir TypeScript\nDESCRIPTION: Demonstrates the implementation of various mouse event handlers in LayaAir using TypeScript. Each method handles a specific mouse interaction such as clicks, movement, dragging, and double-clicks.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//鼠标按下时执行\nonMouseDown(evt: Laya.Event): void {\n}\n\n//鼠标抬起时执行\nonMouseUp(evt: Laya.Event): void {\n}\n\n//鼠标右键或中键按下时执行\nonRightMouseDown(evt: Laya.Event): void {\n}\n\n//鼠标右键或中键抬起时执行\nonRightMouseUp(evt: Laya.Event): void {\n}\n\n//鼠标在节点上移动时执行\nonMouseMove(evt: Laya.Event): void {\n}\n\n//鼠标进入节点时执行\nonMouseOver(evt: Laya.Event): void {\n}\n\n//鼠标离开节点时执行\nonMouseOut(evt: Laya.Event): void {\n}\n\n//鼠标按住一个物体后，拖拽时执行\nonMouseDrag(evt: Laya.Event): void {\n}\n\n//鼠标按住一个物体，拖拽一定距离，释放鼠标按键后执行\nonMouseDragEnd(evt: Laya.Event): void {\n}\n\n//鼠标点击时执行\nonMouseClick(evt: Laya.Event): void {\n}\n\n//鼠标双击时执行\nonMouseDoubleClick(evt: Laya.Event): void {\n}\n\n//鼠标右键点击时执行\nonMouseRightClick(evt: Laya.Event): void {\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Initialization in Scene Hook Plugin (TypeScript)\nDESCRIPTION: Extends IEditorEnv.ISceneHook and implements onCreateNode to automatically set anchorX and anchorY to 0.5 for all new Laya.Sprite UI nodes created via the editor. Leverages type checking for node instances. No external dependencies required beyond the editor context; input is the newly created node, output is node property adjustments.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditorEnv.regSceneHook()\nexport class TestSceneHook implements IEditorEnv.ISceneHook {\n\n    onCreateNode(scene: IEditorEnv.IGameScene, node: Laya.Node) {\n        if (node instanceof Laya.Sprite)\n            node.anchorX = node.anchorY = 0.5;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Device Position on Baidu Map in TypeScript\nDESCRIPTION: This TypeScript snippet updates the device's position on the Baidu Map.  It receives the device's coordinates, converts them to Baidu coordinates using the Baidu Maps API, and then calls `convertToBaiduCoord` to update the marker on the map.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 更新设备位置\nprivate  updatePosition(p: Laya.GeolocationInfo): void {\n  // 转换为百度地图坐标\n  var  point:any = new this.BMap.Point(p.longitude,  p.latitude);\n  // 把原始坐标转换为百度坐标，部分设备的浏览器可能获取到的是谷歌坐标，这时第三个参数改为3才是正确的。\n  this.convertor.translate([point],  1,  5,  this.convertToBaiduCoord);\n}\n```\n\n----------------------------------------\n\nTITLE: LayaAir CameraEventFlags Enum - TypeScript\nDESCRIPTION: This snippet lists the available points in the LayaAir 3D camera rendering pipeline where a CommandBuffer can be attached and executed. These flags correspond to different stages, such as before opaque geometry, before the skybox, before transparent geometry, before image effects, or after all rendering.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/CommandBuffer/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nBeforeForwardOpaque = 0,//在渲染非透明物体之前\nBeforeSkyBox = 2,//在渲染天空盒之前\nBeforeTransparent = 4,//在渲染透明物体之\nBeforeImageEffect = 6,//在后期处理之前\nAfterEveryThing = 8,//所有渲染之后\n```\n\n----------------------------------------\n\nTITLE: Web Worker Task (XMLHttpRequest)\nDESCRIPTION: This JavaScript snippet shows the code that runs inside the Web Worker. It listens for messages from the main thread, performs an XMLHttpRequest to load a file, and sends the loaded data back to the main thread. This example illustrates offloading file loading to a background thread.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/useWorker/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nself.addEventListener('message', function (e) {\n    var xmlreq = new XMLHttpRequest();\n    xmlreq.responseType = \"text\";\n    xmlreq.onload = function (e) {\n        var data = e.currentTarget.response;\n        self.postMessage(data);\n    }\n    xmlreq.open(\"get\",\"../atlas/comp.json\");\n    xmlreq.send()\n}, false);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom File Double-Click Action - TypeScript\nDESCRIPTION: Shows how to define custom actions for files based on their extension using `Editor.extensionManager.addFileActions`. This example defines an `onOpen` function that is executed when a file with the \"abc\" extension is double-clicked, specifically opening it in a code editor using `IEditor.utils.openCodeEditor`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AssetHelper {\n    @IEditor.onLoad\n    onLoad() {\n        //Open VSCode when double-clicking abc type files\n        Editor.extensionManager.addFileActions([\"abc\"], {\n            onOpen: async (asset) => IEditor.utils.openCodeEditor(Editor.assetDb.getFullPath(asset))\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Vectors in GLSL\nDESCRIPTION: Illustrates various methods for initializing `vec2`, `vec3`, and `vec4` vector types in GLSL. Examples include initialization with individual float components, using a single float for all components, and combining floats with existing vectors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_11\n\nLANGUAGE: GLSL\nCODE:\n```\nvec2 v1 = vec2(1.0, 0.0);\nvec3 v2 = vec3(1.0); // v2 = [1.0, 1.0, 1.0]\nvec4 v3 = vec4(1.0, 0.0, vec2Value); //v3 = [1.0, 1.0, vec2Value.x, vec2Value.y]\n```\n\n----------------------------------------\n\nTITLE: TexturePropertyParams Interface Definition in LayaAir (TypeScript)\nDESCRIPTION: This code defines the `TexturePropertyParams` interface, which specifies optional parameters to configure texture properties in LayaAir. These parameters allow control over wrapping modes, filter mode, anisotropic filtering level, alpha pre-multiplication, and HDR encoding format.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nTexturePropertyParams {\n    wrapModeU?: number,\n    wrapModeV?: number,\n    filterMode?: FilterMode,\n    anisoLevel?: number,\n    premultiplyAlpha?: boolean,\n    hdrEncodeFormat?: HDREncodeFormat,\n}\n```\n\n----------------------------------------\n\nTITLE: Executing TypeScript Build Script via LayaAirIDE Command Line - Shell\nDESCRIPTION: This command runs a specific script method in the context of your LayaAirIDE project by supplying both --project and --script parameters. '--script' should reference the registered script method to execute. This allows automated background execution of build or custom operations, and requires the target script file to exist and be properly registered with IEditorEnv.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/commandLine/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> LayaAirIDE --project=/path/to/project --script=MyScript.buildWeb\n```\n\n----------------------------------------\n\nTITLE: Obtaining Sprite Dimensions after Loading an Image - TypeScript\nDESCRIPTION: Loads an image into a Sprite using loadImage. Correct width and height are retrieved in the loadImage callback. The sprite is added to the stage. Wait for the image to load before accessing sp.width and sp.height. This is the recommended way to handle dynamic image sizing.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/CPU/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.loadImage(\"res/apes/monkey2.png\",0,0,0,0,Laya.Handler.create(this,function()\n{\n    console.log(sp.width,sp.height);  \n}));\nLaya.stage.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Drawing Filled Text via fillText() Method in LayaAir (TypeScript)\nDESCRIPTION: This snippet highlights how to render text with specific styles using fillText(). Dependencies include Laya.Sprite and its graphics component. The example creates a sprite, uses fillText() to render styled text at specified coordinates, and adds it to the display tree, producing the visual output shown in the diagram.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n// Draw text\nsp.graphics.fillText(\"LayaAir\", 100, 100, \"20px Arial\", \"#ff0000\", \"center\");\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Move Character (CharacterController)\nDESCRIPTION: This code snippet demonstrates how to move a CharacterController using the `move()` method. It defines a moveVector and updates the CharacterController's position in the onUpdate method. It also provides a function to stop the character's movement by resetting the move vector.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/Component/physics3D/CharacterController/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n    // 标记角色是否移动\n    private ismoveing: boolean = false;\n    //移动向量，速度与方向，向X轴正方向移动，速度为0.05\n    private moveVector: Laya.Vector3 = new Laya.Vector3(0.05, 0, 0);\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n    }\n    \n    /**\n     * 每帧更新时执行，尽量不要在这里写大循环逻辑或者使用 getComponent 方法\n     * 此方法为虚方法，使用时重写覆盖即可\n     */\n    onUpdate(): void {\n        // 如果角色可移动 (ismoveing为true时)\n        if (this.ismoveing) {\n            // 调用角色控制器的 move 方法，使角色按照 moveVector 向量移动\n            this.characterController.move(this.moveVector);\n        }\n    }\n\n    /**\n     * 停止角色移动\n     */\n    public moveStop(): void {\n        // 标记角色停止移动，不再每帧更新\n        this.ismoveing = false;\n        // 重置角色的移动向量置为零向量，使其停止移动\n        this.characterController.move(Laya.Vector3.ZERO.clone());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Mouse Event Lifecycle Methods with LayaAir Script3D - TypeScript\nDESCRIPTION: Defines all major 3D mouse event lifecycle callbacks by extending Laya.Script3D, such as onMouseEnter, onMouseOver, onMouseDown, onMouseClick, onMouseUp, onMouseDrag, and onMouseOut. Each method logs when it is triggered, allowing developers to respond to various stages of mouse interaction on a 3D object. Requires the object to have a collider and be part of a scene with LayaAir 3D physics enabled; outputs are log statements per event.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class Script3DTest extends Laya.Script3D {\n\n    onMouseEnter(): void {\n        console.log(\"onMouseEnter:鼠标移动时,鼠标进入脚本所属的3D对象时触发，只在刚进入的时候触发一次\");\n    }\n\n    onMouseOver(): void {\n        console.log(\"onMouseOver:鼠标在脚本所属的3D对象时触发,每帧都在触发\");\n    }\n\n    onMouseDown(): void {\n        console.log(\"onMouseDown:鼠标在脚本所属的3D对象上按下时触发\");\n    }\n\n    onMouseClick(): void {\n        console.log(\"onMouseClick:鼠标在脚本所属的3D对象上点击时触发\");\n    }\n\n    onMouseUp(): void {\n        console.log(\"onMouseUp:鼠标在脚本所属的3D对象上抬起时触发\");\n    }\n\n    onMouseDrag(): void {\n        console.log(\"onMouseDrag:鼠标拖拽对象时触发,鼠标在脚本所属的3D对象时,按住鼠标任意键,每帧都在触发\");\n    }\n\n    onMouseOut(): void {\n        console.log(\"onMouseOut:鼠标移动时,鼠标离开脚本所属的3D对象时触发\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources (Uniform Type) in LayaAir with TypeScript\nDESCRIPTION: This snippet demonstrates how to load multiple resources of the same type by providing a single type parameter to `Laya.loader.load()`. The `.then()` callback receives an array of loaded resources, all of which are assumed to be of the specified type. This simplifies loading multiple assets of the same kind, such as images.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Loader/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load([url1, url2], type).then((res:Array<any>)=> {  /** 加载多个，统一类型，简洁实用 */   });     \n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Screen Orientation in LayaNative's index.js\nDESCRIPTION: This snippet demonstrates how to modify the screen orientation and load necessary libraries in the LayaNative project's index.js file. It emphasizes setting the screen orientation parameter and cautions against adding logic to this file to avoid unexpected errors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/native_index/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * 设置LayaNative屏幕方向，可设置以下值：\n * landscape：横屏\n * portrait：竖屏\n * reverseLandscape：反向横屏\n * reversePortrait：反向竖屏\n * sensorLandscape：传感器横屏旋转\n * sensorPortrait：传感器竖屏旋转\n * fullSensor：随传感器旋转\n */\nwindow.screenOrientation = \"reversePortrait\"; // 设置屏幕为竖屏\n\n// 加载基础Laya库文件\nloadLib(\"libs/laya.core.js\"); \n// 其他配置和加载可以在此添加\n......\n```\n\n----------------------------------------\n\nTITLE: Tiling Offset Configuration Example - JSON\nDESCRIPTION: This JSON snippet provides an example of how to configure tiling offset properties for shader export. `uName` specifies the Unity property name, and `layaName` specifies the corresponding LayaAir property name.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Unity/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uName\": unity 属性名,\n    \"layaName\": layaair 属性名,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Character Controller Position\nDESCRIPTION: This TypeScript code snippet demonstrates how to get the CharacterController component and set the initial position of the character using the `position` property. The CharacterController is obtained from the owner Sprite3D and the position is set using a new Vector3.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/physics3D/CharacterController/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n        //设置出生点位置\n        this.characterController.position = new Laya.Vector3(0, 0, 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kinematic Rigidbody3D for Motion Control in LayaAir 3D Using TypeScript\nDESCRIPTION: This snippet shows how to configure a Rigidbody3D component as a kinematic (motion) rigidbody by setting 'isKinematic' to true in LayaAir's 3D engine with TypeScript. A kinematic rigidbody is not affected by physical forces such as gravity or collisions but can influence dynamic rigidbodies. Dependencies include the LayaAir engine and access to the Rigidbody3D component on scene objects. The input is the rigidbody instance; setting 'isKinematic' modifies its behavior to be controlled by transform changes rather than physics simulation. This approach improves performance for objects requiring scripted movements without physics computation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*…≡省略若干代码…*/\n//获得刚体碰撞器\nthis.rigidbody = this.cube1.getComponent(Laya.Rigidbody3D) as Laya.Rigidbody3D;\n//开启运动类型刚体\nthis.rigidbody.isKinematic = true;\n/*…≡省略若干代码…*/\n```\n\n----------------------------------------\n\nTITLE: Calling Steam Initialization from LayaAir - TypeScript\nDESCRIPTION: This TypeScript component script calls the Steam initialization function when a button is clicked. It imports the `extendLib` object containing the native function and calls `extendLib.initializeSteam()` when the `initBtn` is clicked. An alert displays the result of the initialization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extendLib } from \"./extlib\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({type: Laya.Button})\n    public initBtn: Laya.Button;\n\n    onEnable(): void {\n        this.initBtn.on(Laya.Event.CLICK, this.onInit);\n    }\n\n    onInit() {\n        alert(extendLib.initializeSteam());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Export Output as Text Content (TypeScript)\nDESCRIPTION: Shows how to replace the default exported file content with custom text by directly assigning an object with { type: \"text\", data: ... } to the exportInfo.contents array. Useful for custom asset exporters that need to emit specific file data types (like text, json, xml) instead of copying the source file. Inputs are the custom data and content type, outputs are emitted files in the specified format.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nthis.exportInfo.contents[0] = { type: \"text\", data: \"this is demo text\" };\n```\n\n----------------------------------------\n\nTITLE: Wrapping Steam Initialization for JavaScript - C++\nDESCRIPTION: This C++ code snippet wraps the Steam initialization functionality for use in JavaScript.  It calls the `SteamManager::GetInstance()->Initialize()` method and converts the boolean result to an integer (1 for success, 0 for failure) for compatibility with JavaScript. The `printf` statement is included for debugging purposes. `jsvm_value` and `jsvm_env` types are assumed to be defined within the LayaNative environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsInitializeSteam(jsvm_env env, jsvm_callback_info info) {\n    bool success = SteamManager::GetInstance()->Initialize();\n    printf(\"init steam!!!\");\n    jsvm_value result;\n    JSVM_CALL_CHECK(jsvm_create_int32(env, success ? 1 : 0, &result));\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: 基于场景选择动态显示菜单（LayaAir Editor TypeScript）\nDESCRIPTION: 利用 enableTest 回调动态判断菜单项可点击状态。依赖 @IEditor.menu、Editor.scene。适合条件触发工具菜单，防止误操作等。输入为判断函数引用，输出为动态激活的菜单项。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclass AnyName {\n    static testEnable() {\n        return Editor.scene.getSelection().length > 0;\n    }\n    \n    @IEditor.menu(\"Hierarchy/test\", { enableTest: ()=> AnyName.testEnable() } )\n    static test() {\n        console.log(\"click menu\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Importer in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a custom Asset Importer in TypeScript for handling the import process of a specific resource type. The `handleImport` method is where the actual import logic resides. This importer is triggered during the IDE's import flow when a resource is imported or modified. Dependencies: Requires the LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regAssetImporter([\"abc\"])\nexport class DemoAssetImporter extends IEditorEnv.AssetImporter {\n    async handleImport(): Promise<any> {\n        console.log(\"importing abc file\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Method in Scene Process Script - TypeScript\nDESCRIPTION: Shows how to define a static method (`test`) within a class registered with `IEditorEnv.regClass`. This method can be called remotely from other processes, with `this` optionally typed as the current game scene object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是场景进程的代码\n\n//注意：IEditorEnv.regClass是必须的\n@IEditorEnv.regClass()\nexport class TestSceneScript {\n    //注意：this是当前的IEditorEnv.IGameScene对象，如果不需要，也可以省略这个声明\n    static test(this: IEditorEnv.IGameScene, msg: string) {\n        console.log(msg); //hello\n        \n        return \"ok\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Messages on Linux Platform in C\nDESCRIPTION: Illustrates Linux native message handlers setup similar to Windows by registering synchronous and asynchronous callbacks with `conchSetHandleMessageCallback`. Lambdas check for event names and send results using `conchSendHandleMessageResult` to return messages back to JavaScript. The example is within a standard `main` function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/platform_communication/readme.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nCONCH_EXPORT void CONCH_CDECL conchSetHandleMessageCallback(handleSyncMessageCallback handleSyncMessageCb,\n                                                            handleAsyncMessageCallback handleAsyncMessageCb);\nCONCH_EXPORT void CONCH_CDECL conchSendHandleMessageResult(const char *eventName, const char *result);\n```\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char *argv[])\n{\n    conchSetHandleMessageCallback(\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"syncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"sync message from platform\");\n            }\n        },\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"asyncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"async message from platform\");\n            }\n        });\n    return conchMain(argc, argv);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Asset Property by Custom Type - TypeScript\nDESCRIPTION: Demonstrates how to use the custom file type category name defined by `setFileType` to filter the asset picker dialog in component properties. The `@property` decorator is used with `isAsset: true` and `typeAssetFilter: \"ABC Files\"` to ensure only assets of the specified type can be selected.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n@property({ type: \"string\", isAsset:true, typeAssetFilter: \"ABC Files\"})\nabcResource: string;\n```\n\n----------------------------------------\n\nTITLE: Example: Loading Multiple Assets with Intersection\nDESCRIPTION: This code uses `Addressables.loadAssetsAsync` with `MergeMode.Intersection` to load resources whose keys intersect between 'test1' and 'test2'. Subsequently, it loops through the results to print the URLs of the intersected assets to the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    Addressables.loadAssetsAsync(['test1', 'test2'], { mode: MergeMode.Intersection }).then((result: LoadResult) => {\n\n        console.log(result);\n\n        for(let i = 0; i < result.data.length; i++) {\n            console.log(result.data[i].url);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Velocity Retrieval in CharacterController\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `getVerticalVel()` method to get the character's vertical velocity. The code retrieves the CharacterController component and then uses `getVerticalVel()` in the `onUpdate()` method to log the vertical velocity to the console.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/physics3D/CharacterController/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n@regClass()\nexport default class DirectMove extends Laya.Script {\n    declare owner: Laya.Sprite3D;\n    private characterController: Laya.CharacterController;\n\n    onAwake(): void {\n        // 获取 角色控制器 组件并赋值给 characterController\n        this.characterController = this.owner.getComponent(Laya.CharacterController);\n    }\n\n\tonUpdate(): void {\n        if (this.characterController.getVerticalVel() !== 0)\n            // 控制台输出角色的垂直速度\n            console.log(\"垂直速度\", this.characterController.getVerticalVel());\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Collision Groups in TypeScript\nDESCRIPTION: Uses bitwise XOR (^) operations to exclude specific collision groups from interaction. This example allows collisions with all groups except custom groups 2 and 5, by XORing the ALLFILTER value (-1) with the groups to exclude.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//指定不可以与其发生碰撞的碰撞组(本例将不与自定义组2、5进行碰撞，除自定义2与5组之外，都可以发生碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2 ^ Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;\n```\n\n----------------------------------------\n\nTITLE: Installing Alipay Mini Game Developer Tools (minidev) via npm\nDESCRIPTION: Installs a specific version (1.8.10 in this example) of the Alipay Mini Game developer tools globally using npm. Requires Node.js (version 12 or higher) and npm to be installed. The `@` symbol specifies the version; developers should choose the appropriate version based on their needs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/alipaygame/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g minidev@1.8.10\n```\n\n----------------------------------------\n\nTITLE: Using Laya.timer.callLater in a Component (TypeScript)\nDESCRIPTION: Example demonstrating Laya.timer.callLater. Even though called multiple times in a loop for the same caller and method, the callback (hideImage) executes only once later in the frame.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n    onAwake(): void {\n        //循环调用10次，但是定时器回调函数只执行一次，即\"hideImage\"日志只打印一次\n        for (let i = 0; i < 10; i++)\n            Laya.timer.callLater(this, this.hideImage);\n    }\n\n    hideImage(): void {\n        console.log(\"hideImage\");\n        this.Image.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Collision Filters in TypeScript\nDESCRIPTION: Configures a collider to interact with multiple collision groups using bitwise OR (|) operations. This example allows collisions with custom groups 1, 2, and 5 while preventing collisions with all other groups.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//指定xxx碰撞器可以与其发生碰撞的碰撞组(本例只与自定义组1、2、5进行碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1 | Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2 | Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events in LayaAir with TypeScript\nDESCRIPTION: Defines a TypeScript class script for LayaAir that listens for animation events named 'event1'. The script class extends Laya.Script and declares a method 'event1' accepting two parameters, which logs the event name and parameters to the console. This enables handling animation events triggered from the IDE with specified event names and parameters. The class requires LayaAir's decorators such as @regClass and imports from Laya namespace.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/timelineGUI/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    event1(p1:any, p2:any): void {\n        console.log(\"event1\",p1,p2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic LoadingView Closure in TypeScript for Manual Control\nDESCRIPTION: In projects where manual control over the loading screen is needed, this TypeScript snippet disables the automatic closure of the LoadingView by removing the default call to loadingView.hideLoadingView() within window.hideSplashScreen. Developers should manage the loading screen visibility explicitly in their code, coordinating with loadingView.loading(nPercent) calls.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/loading_view_new/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nwindow.hideSplashScreen = function() {\n    window.loadingView.hideLoadingView();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Resource Descriptions with TypeScript\nDESCRIPTION: This snippet retrieves resource description information using `getLocationAsync`.  It takes a key (string or string array) to filter the resources and an optional `MergeMode`. The method returns a Promise resolving to a `ResourceLocation[]`. It fetches metadata but doesn't load the actual resources.  Dependencies are the Addressables plugin and potentially other resource management systems.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/addressable/instruction/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取资源的描述信息列表\n * @param keys 用来筛选资源的关键字列表\n * @param mode 合并模式\n * @returns {Promise<ResourceLocation[]>}\n */\nstatic async getLocationAsync(key: string | string[], mode?: MergeMode): Promise<ResourceLocation[]>\n```\n\n----------------------------------------\n\nTITLE: Loading and Interacting with UI Widget in UI Panel - TypeScript\nDESCRIPTION: Demonstrates creating a custom editor UI panel (`MyPanel`) registered with `@IEditor.panel`, asynchronously loading a pre-designed UI widget (`MyWidget.widget`) from the `editorResources` directory using `gui.UIPackage.createWidget`, and attaching an event listener to a child control (`TextInput`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.panel(\"Test\")\nexport class MyPanel extends IEditor.EditorPanel {\n    async create() {\n        this._panel = await gui.UIPackage.createWidget(\"editorResources/UI/MyWidget.widget\");\n        let input: gui.TextInput = this._panel.getChild(\"TextInput\").getChild(\"title\");\n        input.on(\"changed\", () => {\n            console.log(\"改变了！\");\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous and Asynchronous Messaging Interface in JavaScript\nDESCRIPTION: Defines two JavaScript methods `postSyncMessage` for synchronous messaging and `postAsyncMessage` for asynchronous messaging with native platforms. These methods send event names and string data to native code and receive either a synchronous string response or a Promise resolving with a string asynchronously. Dependencies include a global `conch` object for message posting.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/platform_communication/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//同步\npostSyncMessage(eventName: string, data: string): string;\n//异步\npostAsyncMessage(eventName: string, data: string): Promise<string>;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ret = conch.postSyncMessage(\"syncMessage\", \"syncMessage from js\");\nalert(ret);\nconch.postAsyncMessage(\"asyncMessage\", \"asyncMessage from js\").then(function (data) {\nalert(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Data Tags for LayaPerf in TypeScript\nDESCRIPTION: This code shows how to register custom tags for time interval and numerical data within the LayaAir performance analysis plugin. The `regTimeTag` method is used to register tags for timing data, while `regValueTag` is used for registering tags for numerical data. These tags are used when recording custom performance data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    onEnable(): void {\n        this.perfMain.init(this.projectId).then(res =>{\n            this.perfMain.regTimeTag([\"time1\",\"time2\"]);\n            this.perfMain.regValueTag([\"value1\",\"value2\"]);\n        }); \n    }\n```\n\n----------------------------------------\n\nTITLE: Previewing Alipay Mini Game using minidev\nDESCRIPTION: Generates a preview QR code for the Alipay Mini Game project located in the current directory. Requires minidev version >= 1.2.10. Replace '2021xxx' with the actual AppID of the mini game. The `--ignore-http-domain-check` flag bypasses domain validation checks, often useful during development.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/alipaygame/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminidev preview -a 2021xxx --ignore-http-domain-check\n```\n\n----------------------------------------\n\nTITLE: Scene Process Communicating with UI Process - TypeScript\nDESCRIPTION: Shows how the Scene process can send messages to UI panels (`EditorEnv.postMessageToPanel`), call methods on custom panels and get results (`EditorEnv.sendMessageToPanel`), or execute scripts in the UI process (`EditorEnv.runUIScript`), often using `window.eval`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n//选中项目资源面板一个资源\nEditorEnv.postMessageToPanel(\"ProjectPanel\", \"select\", assetId);\n\n//调用自定义的Panel的一个方法，并返回结果\nlet ret = await EditorEnv.sendMessageToPanel(\"MyPanel\", \"getResult\");\n\n//使用eval执行一些简单的脚本\nlet ret = await EditorEnv.runUIScript(\"window.eval\", `\n    (function() {\n        //do something\n        return \"hello\";\n    }())\n`);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Display Object Boundaries in LayaAir\nDESCRIPTION: This code illustrates multiple methods to retrieve the visual bounds of display objects, including 'getGraphicBounds', setting 'autoSize' to true, and loading images with 'loadImage'. Each method caters to different runtime scenarios and performance considerations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/CPU/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.graphics.drawRect(0,0,100,100,\"#FF0000\");\nvar bounds:Laya.Rectangle=sp.getGraphicBounds();\nLaya.stage.addChild(sp);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.autoSize=true;\nsp.graphics.drawRect(0,0,100,100,\"#FF0000\");\nLaya.stage.addChild(sp);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar sp=new Laya.Sprite();\nsp.loadImage(\"res/apes/monkey2.png\",0,0,0,0,Laya.Handler.create(this,function()\n{\n    console.log(sp.width,sp.height);  \n}));\nLaya.stage.addChild(sp);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.loader.load(\"res/apes/monkey2.png\",Laya.Handler.create(this,function()\n{\n  var texture=Laya.loader.getRes(\"res/apes/monkey2.png\");\n  var sp=new Laya.Sprite();\n  sp.graphics.drawTexture(texture,0,0);\n  sp.size(texture.width,texture.height);\n  Laya.stage.addChild(sp);\n}));\n```\n\n----------------------------------------\n\nTITLE: Max Bones/Vertex Setting LayaAir3-IDE\nDESCRIPTION: Explains the 'Max Bones / Vertex' setting, which sets the maximum number of bones each vertex can be bound to. It describes the relationship to character model animation complexity, performance, and the need for balancing these factors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_13\n\nLANGUAGE: other\nCODE:\n```\n顾名思义，这里用于设置每个顶点所能绑定的骨骼最大数量，也就是每个顶点最多可以受到多少根骨骼的影响，超过限制的骨骼会被剔除。\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Settings for DirectionalLight in LayaAir with TypeScript\nDESCRIPTION: This code demonstrates how to configure shadow settings for a directional light, including shadow mode, distance, resolution, cascade mode, and normal bias. These settings control how shadows are generated and rendered in the scene.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Light/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Use soft shadow.\ndircom.shadowMode = Laya.ShadowMode.SoftLow;\n// Set shadow max distance from camera.\ndircom.shadowDistance = 50;\n// Set shadow resolution.\ndircom.shadowResolution = 1024;\n// Set shadow cascade mode.\ndircom.shadowCascadesMode = Laya.ShadowCascadesMode.NoCascades;\n// Set shadow normal bias.\ndircom.shadowNormalBias = 1;\n```\n\n----------------------------------------\n\nTITLE: Using FromTo Ray Casting in LayaAir\nDESCRIPTION: Shows how to perform ray casting using the FromTo method, which allows specifying both start and end points of the ray. This example demonstrates detecting the first collision.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n//进行射线检测,检测第一个碰撞物体\n_scene3D.physicsSimulation.raycastFromTo(this.from, this.to, this.out);\n//将射线碰撞到的物体设置为红色\n((this.out.collider.owner).getComponent(Laya.MeshRenderer).sharedMaterial as Laya.BlinnPhongMaterial).albedoColor = new Laya.Color(0.0, 1.0, 0.0, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Using DCC in Native Environment\nDESCRIPTION: Code example showing how to initialize and use DCC in a LayaNative environment to manage resource downloads.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar appUrl = \"http://stand.alone.version/index.js\";\nvar dccHead = \"http://10.10.20.26:6666/head.json\";\nvar dccUrl = null;\nvar mapToDCC = null;\nlet layadcc = require('layadcc.js').layadcc;\nlet dcc = new layadcc.LayaDCCClient(dccUrl || getBaseUrl(dccHead));\ndcc.pathMapToDCC = mapToDCC || getBaseUrl(appUrl);\ndcc.init(dccHead, null).then((ok) => {\n    if (ok) {\n        //如果初始化成功，接管native的下载流程\n        dcc.injectToNative3();\n    }\n    window.layadcc = layadcc;\n    window.dcc = dcc;\n    loadApp(conch.presetUrl || appUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Loop Function for Path Following\nDESCRIPTION: The `loopfun` function is executed repeatedly using `Laya.timer.loop`. It moves the 3D sprite along the calculated path, adjusting its position and orientation based on the terrain's height.  The function uses the `terrainSprite.getHeight` method to get the height at the current x and z coordinates to make the sprite appear to walk on the terrain and Tween.to method to perform the movement.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.timer.loop(40, this, this.loopfun);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nprivate loopfun(): void {\n        if (this.resPath && this.index < this.resPathLength) {\n            //AStar寻路位置\n            this._position.x = this.resPath[this.index].x;\n            this._position.z = this.resPath[this.index++].y;\n            //HeightMap获取高度数据\n            this._position.y = this.terrainSprite.getHeight(this._position.x, this._position.z);\n            if (isNaN(this._position.y)) {\n                this._position.y = this.moveSprite3D.transform.position.y;\n            }\n\n            this._tarPosition.x = this._position.x;\n            this._tarPosition.z = this._position.z;\n            this._tarPosition.y = this.moveSprite3D.transform.position.y;\n\n            //调整方向\n            this.layaMonkey.transform.lookAt(this._tarPosition, this._upVector3, false);\n            //因为资源规格,这里需要旋转180度\n            this.layaMonkey.transform.rotate(this._rotation2, false, false);\n            //调整位置\n            Tween.to(this._finalPosition, { x: this._position.x, y: this._position.y, z: this._position.z }, 40);\n            this.moveSprite3D.transform.position = this._finalPosition;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: 设置场景天空盒材质的代码示例\nDESCRIPTION: 通过加载天空盒材质文件并赋值给场景的skyRenderer，实现场景天空盒的动态设置。该示例演示了如何动态加载材质资源并应用于场景天空。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/sceneEditor/environment/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar skyRenderer = this.scene.skyRenderer;\nLaya.Material.load(\"sky2.lmat\", Laya.Handler.create(null, function(mat: any) {\n    //修改天空盒渲染器的天空盒材质\n    skyRenderer.material = mat;\n}));\n```\n\n----------------------------------------\n\nTITLE: Processing Pixel RGBA Values to Update Array Elements\nDESCRIPTION: This snippet reads pixel data from an array, compares RGBA values to white (255,255,255,255), and updates an array element to 1 if the pixel is white or 0 otherwise. It is part of a larger image processing routine that categorizes pixels based on color.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Astar/readme.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = pixelsInfo[index++];\nif (r == 255 && g == 255 && b == 255 && a == 255)\n    colaStarArr[h] = 1;\nelse {\n    colaStarArr[h] = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Model Display Example\nDESCRIPTION: This illustrates a simple example of displaying a model in the Shader Blueprint. It shows how to pass in a texture and use UV sampling to apply the texture's color, and then use it in the Unlit Color input. The result of the blueprint is also shown.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: 定义蓝图中的函数（方法）\nDESCRIPTION: 此代码示例通过@bpFunction装饰器定义实例方法和静态方法，包括参数、返回值类型和静态修饰符，使得方法可以在蓝图中被调用。支持定义事件类型的方法。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass, bpFunction } = BP;\n\n@bpClass({\n    name: \"TestBluePrint\",\n    extends: \"Script\",\n    construct: {\n        params: [\n            {\n                \"name\": \"testParams\",\n                \"type\": \"string\"\n            }\n        ]\n    }\n})\n\nexport class TestBluePrint extends Laya.Script {\n    constructor(testParams: string) {\n        super();\n    }\n    \n    @bpFunction({\n        params: [{ \"name\": \"PrimaryAssetId\", \"type\": \"string\" }],\n        returnType: \"string\"\n    })\n    testFunction(PrimaryAssetId: string): string {\n        return \"\";\n    }\n\n    @bpFunction({\n        params: [{ \"name\": \"PrimaryAssetId\", \"type\": \"string\" }],\n        modifiers: { isStatic: true },\n        returnType: \"void\"\n    })\n    static testStaFunction(PrimaryAssetId: string) {\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Blinnphong Shader Attributes\nDESCRIPTION: This section presents the attributes specific to Blinnphong material type, including NormalWS, AlphaTest, DiffuseColor, SpecularColor, Shininess, Gloss, and Aplha. These properties define the lighting characteristics of the material, such as diffuse and specular reflections.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: IGUIUtils Interface for Programmatic UI Creation - TypeScript\nDESCRIPTION: Defines the `IGUIUtils` interface, listing methods and properties available under `IEditor.GUIUtils` for programmatically creating standard editor UI components such as buttons, checkboxes, text inputs, color pickers, etc., and providing default editor colors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IGUIUtils {\n    /**\n     * 编辑器默认的背景颜色\n     */\n    bgColor: gui.Color;\n    /**\n     * 编辑器默认的分割线颜色\n     */\n    lineColor: gui.Color;\n    /**\n     * 编辑器默认的文字颜色\n     */\n    textColor: gui.Color;\n\n    createButton(autoSize?: boolean): gui.Button;\n    createIconButton(flat?: boolean): gui.Button;\n    createCheckbox(autoSize?: boolean): gui.Button;\n    createIconCheckbox(flat?: boolean): gui.Button;\n    createRadio(): gui.Button;\n    createComboBox(): gui.ComboBox;\n    createTextInput(): TextInput;\n    createTextArea(): TextArea;\n    createSearchInput(): SearchInput;\n    createNumericInput(): NumericInput;\n    createColorInput(): ColorInput;\n    createGradientInput(): GradientInput;\n    createCurveInput(): CurveInput;\n    createResourceInput(): ResourceInput;\n    createNodeRefInput(): NodeRefInput;\n    createProgressBar(): gui.ProgressBar;\n    createSlider(): gui.Slider;\n    createListItem(): ListItem;\n    createIconListItem(): ListItem;\n    createCheckboxListItem(): ListItem;\n    createCheckboxIconListItem(): ListItem;\n    \n    createInspectorPanel(): InspectorPanel;\n}\n```\n\n----------------------------------------\n\nTITLE: 显示自定义对话框（LayaAir Editor TypeScript）\nDESCRIPTION: 演示如何在编辑器内通过 Editor.showDialog 弹出预先定义的对话框实例。需事先 import 并注册对话框类。依赖 Editor.showDialog、IEditor.Dialog。输入为对话框类、可选参数，输出为模式对话框。适合临时交互、工具引导等场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyDialog } from \"./MyDialog\";\n\nEditor.showDialog(MyDialog, null);\n```\n\n----------------------------------------\n\nTITLE: Styling a Custom File Input in LayaAir with TypeScript\nDESCRIPTION: Demonstrates how to create and style a custom file input by making the native input transparent and overlaying it with a custom button. Sets file input properties including opacity, size, position, and accepted file types.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建隐藏的file并且把它和按钮对齐。达到位置一致，这里我们默认在0点位置\nvar file:any = Laya.Browser.document.createElement(\"input\");\n//设置file样式\nfile.style=\"filter:alpha(opacity=0);opacity:0;width: 150px;height:60px;\";\nfile.type =\"file\";//设置类型是file类型。\nfile.accept=\"image/png\";//设置文件的格式为png；\nfile.style.position =\"absolute\";\nfile.style.zIndex = 999;\n```\n\n----------------------------------------\n\nTITLE: Installing protobufjs CLI Tool with npm in Shell\nDESCRIPTION: Installs the protobufjs command line interface (CLI) tool via npm to enable protobuf file compilation and generation of static code modules. This tool is a prerequisite for subsequent protobuf.js and .d.ts file generation steps and requires a Node.js and npm environment installed beforehand.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install protobufjs-cli --save-dev\n```\n\n----------------------------------------\n\nTITLE: Viewport Configuration Meta Tag\nDESCRIPTION: This code snippet shows the meta tag configuration for the viewport in the HTML page. It disables user scaling and automatically scales the page based on the device's DPR (Device Pixel Ratio), enabling adaptation through logical resolution, similar to native app development.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/adaptScreen/readme.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n <meta name='viewport' content='width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no'/>\n```\n\n----------------------------------------\n\nTITLE: Testing Mouse Through Property with Sprite Hierarchy\nDESCRIPTION: This code demonstrates the Mouse Through property by setting up event listeners on overlapping sprites. When Mouse Through is enabled, click events pass through the top sprite to the one beneath it when clicking on empty areas of the top sprite.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nonAwake(): void {\n        this.sprite1.on(Laya.Event.MOUSE_DOWN, this, this.test1);//设置监听,sprite1\n        this.sprite2.on(Laya.Event.MOUSE_DOWN, this, this.test2);//设置监听,sprite2\n    }\n    test1(e: Laya.Event) {\n        console.log('mouseSprite1')\n    }\n    test2(e: Laya.Event) {\n        console.log('mouseSprite2')\n    }\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Handler.create for Persistent Callbacks (TypeScript)\nDESCRIPTION: Provides the correct way to use `Laya.Handler.create` for callbacks needing multiple triggers (e.g., loading progress). Setting the fourth parameter (`once`) to `false` prevents the handler from being immediately recovered by the object pool after the first execution.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/memory/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(urls, Laya.Handler.create(this,this.onAssetLoaded), Laya.Handler.create(this,this.onLoading, null, false));\n```\n\n----------------------------------------\n\nTITLE: Controlling Animator Playback Speed (Pause/Resume) in TypeScript\nDESCRIPTION: Shows how to control the playback speed of a Laya.Animator using the `speed` property. Setting `speed` to 0 pauses the animation, 1 resumes normal playback, and other values (like 0.5) adjust the speed accordingly. Assumes `this.animator` references a Laya.Animator instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/animationEditor/aniController/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n//暂停动画\nthis.animator.speed = 0.0;\n//播放动画\nthis.animator.speed = 1.0;\n//一半速度播放动画\nthis.animator.speed = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Using @property Decorator with Getter and Setter\nDESCRIPTION: Shows how to use the @property decorator with JavaScript getters and setters. This approach allows for more control over property values while still exposing them in the IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nclass Animal {\n    private _weight: number = 0;\n    \n    @property( { type : Number } )\n    get weight() : number {\n        return this._weight;\n    }\n    \n    set weight(value: number) {\n        this._weight = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Dropdown Menu in LayaAir with TypeScript\nDESCRIPTION: A practical example showing how to implement a dynamic dropdown menu using property decorators in LayaAir, by creating a getter method that provides dropdown options.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n    //这个属性提供一个get方法，返回下拉选项，这个数据一般只用于编辑器，所以设置不保存\n    @property({ type: [[\"Record\", String]], serializable: false })\n    get itemsProvider(): Array<Record<string, string>> {\n        return [{ name: \"Item0\", value: \"0\" }, { name: \"Item1\", value: \"1\" }];\n    }\n    //将enumSource设置为一个字符串，表示使用该名字的属性作为下拉数据源\n    @property({ type: String, enumSource: \"itemsProvider\" })\n    enumItems: string;\n```\n\n----------------------------------------\n\nTITLE: 通过脚本控制LayaAir Clip组件的初始化属性（TypeScript）\nDESCRIPTION: 该脚本演示如何在LayaAir中使用TypeScript控制Clip组件的各种属性，包括位置、皮肤、动画间隔和是否自动播放，方便在场景中动态调整动画效果。需要预先引入Laya库，并确保Clip组件已在场景中存在。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/uiComponent/Clip/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.Clip })\n    public clip: Laya.Clip;\n\n    // 组件初始化时设置属性\n    onAwake(): void {\n        this.clip.pos(Laya.stage.width >> 1, Laya.stage.height >> 1); // 设置位置\n        this.clip.skin = \"atlas/comp/clip_num.png\"; // 设置纹理资源路径\n        this.clip.interval = 1000; // 设置动画播放间隔为1000毫秒\n        this.clip.clipX = 10; // 设置横向切片数\n        this.clip.autoPlay = true; // 设置为自动播放\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Script Control of HSlider in LayaAir (TypeScript)\nDESCRIPTION: This code demonstrates how to control an HSlider component using a custom script in LayaAir. It includes setting the slider's position, skin, value, maximum, minimum, tick, and showing the progress bar.  It requires the LayaAir engine and assumes the `hslider.png` and `hslider$progress.png` resources are available. It is assumed that there is an HSlider component available, and this code configures the properties.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/HSlider/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({ type: Laya.HSlider })\n    public hslider: Laya.HSlider;\n\n    //组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n    onAwake(): void {\n        this.hslider.pos(300, 300);//滑动条位置\n        this.hslider.skin = \"resources/hslider.png\"; //滑动条底图皮肤\n        this.hslider.value = 0.5;\n        this.hslider.max = 50;\n        this.hslider.min = 0;\n        this.hslider.tick = 1;\n        this.hslider.showProgress = true;//必须存在hslider$progress.png资源，否则会报错\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dialog on Mouse Click in Scene\nDESCRIPTION: This code snippet demonstrates how to load a prefab, instantiate it as a Dialog, and then display it when the mouse is clicked in the scene.  It loads the prefab, creates an instance of the dialog, and calls the `show()` method to display the dialog.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Dialog/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    //鼠标点击后执行\n    onMouseClick(): void {\n        //使用Prefab，需要转换根节点为Dialog\n        Laya.loader.load(\"resources/Prefab2D.lh\").then(res => {\n            let dlg: Laya.Dialog = res.create();\n            dlg.show();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sprite.texture Property Signature in TypeScript\nDESCRIPTION: Defines the TypeScript getter and setter for the `texture` property of a Sprite. Setting this property allows assigning a `Texture` instance (or a URL string for automatic loading) to be displayed by the Sprite, clearing previous graphics.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 设置一个Texture实例，并显示此图片（如果之前有其他绘制，则会被清除掉）。\n     * 等同于graphics.clear();graphics.drawImage()，但性能更高\n     * 还可以赋值一个图片地址，则会自动加载图片，然后显示\n     */\n    get texture(): Texture;\n    set texture(value: Texture);\n```\n\n----------------------------------------\n\nTITLE: UnLit Shader Attributes\nDESCRIPTION: This part lists the attributes associated with UnLit material including NormalWS, AlphaTest, Color, and Alpha. It describes the function of each attribute. These attributes control the basic color and transparency.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: 利用路径和arcTo绘制圆角矩形\nDESCRIPTION: 本示例利用drawPath命令结合moveTo、lineTo和arcTo，手动画出带圆角的矩形。路径命令定义流程，arcTo实现弧线转角，参数详细描述端点和半径。通过路径的连续连接，形成平滑的弧线转角图形。适用需要自定义路径和弧线控制的复杂圆角效果，理解arcTo的原理和路径调整至关重要。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//自定义路径\nvar path:any[] =  [\n    [\"moveTo\", 0, 0],\n    [\"lineTo\",400,0],\n    [\"arcTo\", 500, 0, 500, 30, 30],\n    [\"lineTo\",500,200],\n    [\"arcTo\", 500, 300, 470, 300, 30],\n    [\"lineTo\",30,300],\n    [\"arcTo\", 0, 300, 0, 270, 30],\n    [\"lineTo\",0,100],\n    [\"arcTo\", 0, 0, 30, 0, 30],\n];\n//绘制圆角矩形\nsp.graphics.drawPath(100, 100, path, {fillStyle: \"#ff0000\"},{strokeStyle:\"#ffffff\", lineWidth:10});\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Using Window Methods in LayaAir\nDESCRIPTION: TypeScript example demonstrating how to use window object methods like open(), postMessage(), and addEventListener() in a LayaAir project. These methods allow opening new windows, sending data between windows, and registering event listeners.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Browser/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n//Get发送数据\nLaya.Browser.window.open(\"https://layaair.com/\");\n\n//Post发送数据\n//url必须为真实的地址，content表示要发送的数据\nlet win2 = Laya.Browser.window.open(url);\nwin2.postMessage(content, url);// 此处最好加延迟\n\n//监听器注册\nLaya.Browser.window.addEventListener(\"click\", (event: any) => {\n\tconsole.log(event.type);\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Listening to Custom Events in LayaAir\nDESCRIPTION: Demonstrates how to create, dispatch, and listen for custom events in LayaAir. The code shows implementing a custom 'test' event that gets triggered on mouse down and logs a message when received.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nonEnable(): void { \n\t//需要先侦听自定义的test事件\n  \tthis.xxx.on(\"test\", this, () => {\n\t\tconsole.log(\"已收到test事件\");\n \t });\n}\n\nonMouseDown(): void {\n\t//派发自定义事件的逻辑要放到侦听逻辑的后面\n    this.xxx.event(\"test\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inspector Layout for Custom Resources\nDESCRIPTION: Defines a `ResourceInspectorLayout` to display and edit properties of custom resources that are instances in the engine.  The `accept` method defines the resources which are valid for the layout. Dependencies: Requires LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditor.inspectorLayout(\"asset\")\nexport class DemoInspectorLayout extends IEditor.ResourceInspectorLayout {\n    constructor() {\n        super();\n    }\n\n    accept(asset: IEditor.IAssetInfo): boolean {\n        return asset.ext === \"abc\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Methods with Custom Script in LayaAir 3.0\nDESCRIPTION: A TypeScript example showing how to create an entry point using a custom script in LayaAir 3.0. This approach requires manually dragging desired component properties into the script in the editor. The onStart method serves as the initialization point.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/entrance/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property()\n    private img: Laya.Image;      \n\n    onStart() {\n        console.log(\"Game start\");\n        this.img.visible = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Preview Process Script from UI Process (Playing Scene) - TypeScript\nDESCRIPTION: Shows how the UI process can call a static method (`TestGameScript.test`) in a script running within the *currently playing* Preview process scene using `Editor.scene.runScriptMax`, which is necessary when the scene is running.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是UI进程的代码\n\n//这里用runScriptMax而不是runScript，因为在播放状态下，runScript依然会发送到源场景，而不是正在播放的场景\nlet ret = await Editor.scene.runScriptMax(\"TestGameScript.test\", \"hello\");\nconsole.log(ret); //ok\n```\n\n----------------------------------------\n\nTITLE: Exporting Steam Initialization Function - C++\nDESCRIPTION: This C++ code snippet exports the `jsInitializeSteam` function to JavaScript, allowing JavaScript code to call the native Steam initialization functionality.  It uses the `jsvm_create_function` and `jsvm_set_named_property` functions to register the function with the name \"initializeSteam\" in the LayaNative environment. The `LayaExtInit` function is the entry point for exporting native functions to LayaAir. `SIZE_MAX` indicates the maximum size for the function name.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nextern \"C\" {\n    LAYAEXTAPI void LayaExtInit(jsvm_env env, jsvm_value exp) {\n        ...\n        // 注册Steam初始化函数\n        jsvm_value fnInitSteam;\n        jsvm_create_function(env, \"initializeSteam\", SIZE_MAX, jsInitializeSteam, nullptr, &fnInitSteam);\n        jsvm_set_named_property(env, exp, \"initializeSteam\", fnInitSteam);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Instantiating a 3D Prefab in LayaAir via TypeScript\nDESCRIPTION: This TypeScript code exemplifies loading a 3D prefab asset (Prefab.lh), creating an instance of the prefab (typically a Laya.Sprite3D), and dynamically adding it to a Laya.Scene3D at runtime. The code defines camera and scene properties for context, logs game start, and after prefab loading and instantiation, adds the 3D object to the scene, assigning it a specific world position via the transform.position property. Dependencies include existing \"resources/Prefab.lh\" asset, TypeScript setup, and LayaAir3D runtime. Input parameters are not required beyond scene and camera references, and output is the display of the prefab model in the scene. Care should be taken to handle resource loading asynchronously and manage possible errors.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/prefab/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    @property( { type : Laya.Camera } )\n    private camera: Laya.Camera;  \n    @property( { type : Laya.Scene3D } )\n    private scene: Laya.Scene3D;\n\n    onStart() {\n        console.log(\"Game start\");\n        //加载预制体文件\n        Laya.loader.load(\"resources/Prefab.lh\").then( (res)=>{\n            //创建预制体\n            let monkey: Laya.Sprite3D = res.create();\n            //添加预制体到场景中\n            this.scene.addChild( monkey );\n            monkey.transform.position = new Laya.Vector3(-28.9354,0.3,-63.20264);\n        } );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Script Loading via eval in LayaAir with TypeScript\nDESCRIPTION: Demonstrates how to load and execute JavaScript code using the eval function. This method evaluates the loaded script content directly without creating a script element, though it's not recommended due to security and performance concerns.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate completeHandler(e:any):void\n{\n  \tLaya.Browser.window.eval(e);\n  \tvar client:any = new Laya.Browser.window.Demo1();\n  \tclient.start();\n}\n```\n\n----------------------------------------\n\nTITLE: 为 3D 场景对象绘制自定义 Gizmo/手柄（LayaAir Editor TypeScript）\nDESCRIPTION: 利用 IEditorEnv.customEditor 装饰器为自定义组件挂载编辑器可视化逻辑。onSceneGUI 绘制实时操作手柄，onDrawGizmos 绘制图标。依赖 IEditorEnv.Handles、IEditorEnv.Gizmos。输入为组件实例，输出为编辑器场景中的手柄和标记，提升工具反馈和交互。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n//Script1.ts\n\n@regClass()\nexport class Script1 extends Laya.Script {\n    declare owner : Laya.Sprite3D;\n}\n//TestCustomEditor.ts\n\n@IEditorEnv.customEditor(Script1)\nexport class TestCustomEditor extends IEditorEnv.CustomEditor {\n    declare owner: Laya.Sprite3D;\n\n    onSceneGUI(): void {\n        IEditorEnv.Handles.drawHemiSphere(this.owner.transform.position, 2);\n    }\n    \n    onDrawGizmos(): void {\n        IEditorEnv.Gizmos.drawIcon(this.owner.transform.position, \"editorResources/UI/ready1.png\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing npm Cache Forcefully\nDESCRIPTION: This command forcefully clears the npm cache. It is useful for resolving installation problems that might arise from corrupted or conflicting cache data, particularly when installing packages like TypeScript.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/developmentEnvironment/download/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm cache clean --force\n```\n\n----------------------------------------\n\nTITLE: Simple Grass: Fragment Shader\nDESCRIPTION: Describes the steps for creating the grass fragment shader, and how to calculate and display the shader correctly. This part first checks whether the macro SNOW is activated, then calculates the alpha value from the result. After that, the UV coordinates offset by a matrix, and then the sample grass texture.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Shader Blueprint - ALPHABLENDED Material\nDESCRIPTION: This snippet describes the ALPHABLENDED blending mode.  This blending mode uses SrcAlpha * SrcColor + (1 - SRCAlpha) * DstColor. It is used for semi-transparent objects, where SrcAlpha typically comes from the texture's alpha value. Requires blending setting to work.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Destroying TiledMap instance to free memory\nDESCRIPTION: This snippet shows proper cleanup of a TiledMap instance by calling its destroy() method, which releases associated resources and helps prevent memory leaks when the map is no longer needed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/TiledMap/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.tMap.destroy();\n```\n\n----------------------------------------\n\nTITLE: Extending Button Component with ImageRunTime in TypeScript\nDESCRIPTION: This code shows an example of extending Laya.Button instead of Laya.Image in the ImageRunTime class, demonstrating a potential issue when the runtime class doesn't extend the original component type. This can cause display problems as Button has different skin states than Image.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/ScriptUse/runtime/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nmodule game {\n    /*\n    ImageRunTime逻辑类 \n    */\n    export class ImageRunTime extends Laya.Button{\n        public scaleTime:number = 100;\n        constructor() {\n            super();\n            //设置组件的中心点\n            this.anchorX = this.anchorY = 0.5;\n            ......\n        }\n        ......\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying InspectorPanel Appearance by Setting catalogBarStyle in TypeScript\nDESCRIPTION: Shows customization of the inspector panel's header by setting catalogBarStyle to 'hidden', hiding the panel's title bar for cleaner UI.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    name : \"MyPanelType\",\n    catalogBarStyle: \"hidden\",\n    properties : [....]\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Type Category Name - TypeScript\nDESCRIPTION: Explains how to define a user-friendly category name for custom file extensions using `Editor.extensionManager.setFileType`. This category name is then used to filter asset selection in places like component properties, making it easier for users to find specific asset types.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AssetHelper {\n    @IEditor.onLoad\n    onLoad() {\n        //Set the category name for files with extension abc\n        Editor.extensionManager.setFileType([\"abc\"], \"ABC Files\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 利用drawEllipse绘制椭圆示例\nDESCRIPTION: 利用绘制路径操作中的arcTo命令可以制作出椭圆形状，适合定制特殊弧线效果。参数定义弧线的端点和半径，实现非圆形的椭圆或复杂曲线。通过调整路径和arcTo参数，可以绘制各种变化的椭圆或弧线轮廓。理解节点位置关系以及路径拼接是关键。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n（示意无具体代码，说明文字）\n```\n\n----------------------------------------\n\nTITLE: Extending Build Workflow with Custom Plugins in LayaAir IDE\nDESCRIPTION: Provides interfaces and example code for developing plugins that hook into different stages of the build process, such as asset collection, exporting, and packaging. Illustrates registering a build plugin with a given platform or globally, with plugin methods to customize build behaviors like adding assets or modifying configuration files.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n@IEditorEnv.regBuildPlugin(\"web\")\nclass MyBuildPlugin implements IEditorEnv.IBuildPlugin {\n    async onCollectAssets(task : IEditorEnv.IBuildTask, assets: Set<IAssetInfo>) {\n        let myAsset = ...\n        assets.add(myAsset);\n        task.logger.debug(\"add my asset\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Editor Menus via Decorators in TypeScript\nDESCRIPTION: Adds custom menu items into the editor's menu bar using @IEditor.menu decorator, supporting nested paths, click handlers, menu positioning, and options like checkboxes, separators, and enable/visible tests for dynamic control.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AnyName {\n    @IEditor.menu(\"App/tool/test\")\n    static test() {\n        console.log(\"click menu\");\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AnyName {\n    static testEnable() {\n        return Editor.scene.getSelection().length > 0;\n    }\n    \n    @IEditor.menu(\"Hierarchy/test\", { enableTest: ()=> AnyName.testEnable() } )\n    static test() {\n        console.log(\"click menu\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preview Process Communicating with UI Process - TypeScript\nDESCRIPTION: Demonstrates how the Preview process can communicate with the UI process using the global `EditorClient` object to send messages to panels, call methods on custom panels, or execute scripts in the UI process.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet EditorClient = (<any>window).EditorClient;\nEditorClient.postMessageToPanel(\"ProjectPanel\", \"select\", assetId);\n\n//调用自定义的Panel的一个方法，并返回结果\nlet ret = await EditorClient.sendMessageToPanel(\"MyPanel\", \"getResult\");\n\n//使用eval执行一些简单的脚本\nlet ret = await EditorClient.runUIScript(\"window.eval\", `\n    (function() {\n        //do something\n        return \"hello\";\n    }())\n`);\n```\n\n----------------------------------------\n\nTITLE: Get Network Type in LayaAir TypeScript\nDESCRIPTION: Retrieves and logs the current network type in a LayaAir project using TypeScript. The `(window as any).conch.config.getNetworkType()` function is used to get the network type as an integer. This example demonstrates how to access LayaNative specific objects from TypeScript code by casting `window` to `any`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/network/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonStart(): void {\n    var nType = (window as any).conch.config.getNetworkType();\n    console.log(\"network type: \" + nType);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lines to PixelLineSprite3D in TypeScript\nDESCRIPTION: The addLine method that adds a single line to the PixelLineSprite3D by specifying start and end positions and colors. It delegates to the underlying PixelLineRenderer component.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/Component/PixelLine/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n * 增加一条线。\n * @param\tstartPosition  初始点位置\n * @param\tendPosition\t   结束点位置\n * @param\tstartColor\t   初始点颜色\n * @param\tendColor\t   结束点颜色\n */\naddLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n    (this._render as PixelLineRenderer).addLine(startPosition, endPosition, startColor, endColor);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Object Property Types - TypeScript\nDESCRIPTION: This code demonstrates how to use a custom class as a property type in a LayaAir script, allowing to structure properties with more complex object definitions. Note that custom types also require the `@regClass` decorator.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n//MyScript.ts\nconst { regClass, property } = Laya;\n\nimport Animal from \"./Animal\";\n\n@regClass()\nexport class MyScript extends Laya.Script  {\n    @property({ type : Animal })\n    animal : Animal;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Animal.ts\nconst { regClass, property } = Laya;\n\n@regClass()\nexport default class Animal {\n    @property({ type : Number })\n    weight : number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Close Button Logic in RuntimeScript\nDESCRIPTION: This code snippet shows how to add the logic for closing the dialog window when the close button is clicked. It attaches a click event listener to the close button and calls the `close()` method to close the dialog.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/Dialog/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\nimport { RuntimeScriptBase } from \"./RuntimeScript.generated\";\n\n@regClass()\nexport class RuntimeScript extends RuntimeScriptBase {\n\n    onAwake(): void {\n        this.closeBtn.on(Laya.Event.CLICK, this, () => {\n            this.close();\n        });\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: 创建按钮（LayaAir Editor TypeScript）\nDESCRIPTION: 通过 IEditor.GUIUtils.createButton 动态创建一个按钮。无需手动指定路径，依赖 IEditor.GUIUtils 提供的 API。无须额外参数，输出为界面按钮控件，适合在编辑器插件开发时快速生成按钮，等效于直接同步加载按钮预制体。适用于需要动态界面元素的场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet button = IEditor.GUIUtils.createButton();\n```\n\n----------------------------------------\n\nTITLE: Categorizing Component Properties with a Custom Caption in TypeScript\nDESCRIPTION: This code snippet demonstrates how to assign a custom caption to a component property category using the `catalogCaption` parameter within the `@property` decorator. This allows you to provide a user-friendly name for the category in the LayaAir IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n    @property({ type: String, inspector: \"color\" ,catalog:\"adv\", catalogCaption:\"高级组件\"})\n    d: string;\n```\n\n----------------------------------------\n\nTITLE: Getting Object from Pool by Sign in LayaAir\nDESCRIPTION: Method to retrieve an object from a pool by its identifier. Returns null if the pool is empty, allowing developers to handle empty pool situations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Pool/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 根据传入的对象类型标识字符，获取对象池中已存储的此类型的一个对象，如果对象池中无此类型的对象，则返回 null 。\n     * @param sign 对象类型标识字符。\n     * @return 对象池中此类型的一个对象，如果对象池中无此类型的对象，则返回 null 。\n     */\n    static getItem(sign: string): any {\n        var pool: any[] = Pool.getPoolBySign(sign);\n        var rst: any = pool.length ? pool.pop() : null;\n        if (rst) {\n            rst[Pool.POOLSIGN] = false;\n        }\n        return rst;\n    }\n```\n\n----------------------------------------\n\nTITLE: Property Accessors with Decorators - TypeScript\nDESCRIPTION: This example showcases the use of the `@property()` decorator with property accessors (getter and setter). It demonstrates how to define a component property with custom read/write logic and expose it to the LayaAir IDE.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nclass Animal {\n    private _weight: number = 0;\n    \n    @property( { type : Number } )\n    get weight() : number {\n        return this._weight;\n    }\n    \n    set weight(value: number) {\n        this._weight = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 利用 drawPath 绘制圆角矩形路径示例\nDESCRIPTION: 该示例通过定义路径数组的方式绘制具有圆角的矩形，路径包含“moveTo”、“lineTo”、“arcTo”命令。为了正确显示圆角效果，需在绘制时添加边框线。修改路径起点为合适位置后，可实现预期的圆角矩形图形。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/uiEditor/graphics/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//自定义路径\nvar path:any[] =  [\n    [\"moveTo\", 30, 0], //起点\n    [\"lineTo\",400,0],\n    [\"arcTo\", 500, 0, 500, 30, 30],\n    [\"lineTo\",500,200],\n    [\"arcTo\", 500, 300, 470, 300, 30],\n    [\"lineTo\",30,300],\n    [\"arcTo\", 0, 300, 0, 270, 30],\n    [\"lineTo\",0,100],\n    [\"arcTo\", 0, 0, 30, 0, 30],\n];\n//绘制圆角矩形\nsp.graphics.drawPath(100, 100, path, {fillStyle: \"#ff0000\"},{strokeStyle: \"#ffffff\", lineWidth: 10});\n```\n\n----------------------------------------\n\nTITLE: Implementing Closable WebView in TypeScript\nDESCRIPTION: Example of implementing a WebView that can be closed by the user (canclose set to true). On iOS this will display a close button, while on Android the back button is used.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/webview/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('touchstart',()=>{\n    if(conch){\n        var l = 50;\n        var t = 50;\n        var w = window.innerWidth - l * 2;\n        var h = window.innerHeight - t * 2;\n        conch.setExternalLinkEx('http://www.layabox.com',l,t,w,h,true); // canclose设置为true\n        //conch.setExternalLink('http://www.baidu.com');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting mouseThrough Property in LayaAir with TypeScript\nDESCRIPTION: A simple example showing how to set the mouseThrough property of a UI component. When set to true, mouse events can pass through the component's non-drawn areas; when false (default), mouse events are blocked within the component's width and height.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n//trues可穿透,false不可穿透（默认值）\nthis.xxx.mouseThrough = true;\n```\n\n----------------------------------------\n\nTITLE: Defines Styles Definition\nDESCRIPTION: Shows how to define UI-specific properties that are not directly related to uniform or define variables, improving UI control and shader customization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_8\n\nLANGUAGE: glsl\nCODE:\n```\ndefines: {\n        RAIN : { type: Bool, default: true },\n        SNOWY : { type: Bool, default: false }\n    },\n\n    styles: {\n        RAIN : { caption: \"下雨\", inspector : null }, //inspector为null，不显示在属性面板\n        SNOWY : { caption: \"下雪\"},\n\n        // 定义不属于uniform和define的属性\n        weather : { caption:\"天气\", inspector: RadioGroup, options: { members: [RAIN, SNOWY] }}\n    },\n```\n\n----------------------------------------\n\nTITLE: Switching and Managing Scenes with LayaAir API in TypeScript\nDESCRIPTION: Demonstrates how to programmatically open, close, and destroy scenes using the Laya.Scene API in a TypeScript environment. Requires LayaAir engine dependencies. The methods include opening both Scene2D and Scene3D scenes with optional callbacks, closing a specific scene (releasing it from display), and fully destroying a scene resource to free memory. The input parameters are scene resource paths (string), with optional Boolean flags and callback handlers. Outputs are handled asynchronously; limitations include ensuring resource paths are correct and scenes are not already in use.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/sceneEditor/environment/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//打开指定的场景，同时显示Scene2D和Scene3D\nLaya.Scene.open(\"scene/Game.ls\",true, null, Laya.Handler.create(this, this.onLoaded), Laya.Handler.create(this, this.onLoading));\n\n//关闭指定的场景\nLaya.Scene.close(\"scene/Login.ls\")\n\n//销毁指定的场景\nLaya.Scene.destroy(\"scene/Login.ls\")\n```\n\n----------------------------------------\n\nTITLE: Color Nodes Description\nDESCRIPTION: This describes color-related nodes, focusing on GammaToLinear and LinearToGamma conversions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Installing LayaDCC2 Command Line Tool\nDESCRIPTION: Command to install the LayaDCC2 command line tool globally using npm with administrator privileges.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g layadcc2\n```\n\n----------------------------------------\n\nTITLE: Invoking the LayaAir Performance Panel in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates initializing the LayaAir stage and displaying the built-in performance statistics panel at the top-left corner (0,0). It uses `Laya.init()` to set up the stage dimensions and `Laya.Stat.show()` to activate the panel for real-time performance monitoring.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/Stat_Panel/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//初始化舞台\nLaya.init(1136, 640);\n//调用性能统计面板方法，(0,0)为面板位置坐标\nLaya.Stat.show(0,0);\n```\n\n----------------------------------------\n\nTITLE: Get/Set Static State - TypeScript\nDESCRIPTION: Gets or sets whether the node is static.  `get isStatic()` returns the current static state.  `set isStatic(value: boolean)` sets whether the node is static, impacting collision detection and rendering optimization. Requires a Sprite3D instance.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 是否为静态。\n     */\n    get isStatic(): boolean \n\n    /**\n     * 是否设为静态。\n     */\n    set isStatic(value: boolean) \n```\n\n----------------------------------------\n\nTITLE: Network Status Type Constants (Java)\nDESCRIPTION: These constants define the possible network status types returned by the network monitoring functions. Values range from 0 (no network) to 5 (network available), with specific identifiers for WiFi, 2G, 3G, and 4G networks.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/network/readme.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nNET_NO = 0;\nNET_WIFI = 1;\nNET_2G = 2;\nNET_3G = 3;\nNET_4G = 4;\nNET_YES = 5;\n```\n\n----------------------------------------\n\nTITLE: Specifying Shader Type\nDESCRIPTION: This defines the type of shader. In LayaAir, the type is currently limited to Shader3D, with potential support for more advanced shader types like Compute Shader planned for future versions. This declaration helps the engine to identify and process the shader correctly.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nShader3D Start\n{\n\ttype:Shader3D\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Bone Binding Setting LayaAir3-IDE\nDESCRIPTION: Details the settings related to bone binding during model import, specifically focusing on skinning weights, by default, and custom mode. Includes the sub-settings 'Max Bones / Vertex' and 'Min Bone Weight'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_12\n\nLANGUAGE: other\nCODE:\n```\n当我们选择自定义模式时，有 `每顶点最大骨骼数` 和 `骨骼影响最小权重`两个设置子选项，如图4-2所示。\n\n![](img/4-2.png)\n\n（图4-2）\n```\n\n----------------------------------------\n\nTITLE: Get Child Node by Name - TypeScript\nDESCRIPTION: Retrieves a child node by its name.  Iterates through the children and returns the node if the name matches. Returns null if no match is found.  Requires a node instance to call this function.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 根据子节点的名字，获取子节点对象。\n     * @param\tname 子节点的名字。\n     * @return\t节点对象。\n     */\n    getChildByName(name: string): Node {\n        for (let child of this._children) {\n            if (child && child.name === name)\n                return child;\n        }\n        return null;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Handler.create for Single Resource Loading Callback (TypeScript)\nDESCRIPTION: Illustrates using `Laya.Handler.create` for handling resource loading completion callbacks (`onAssetLoaded`). This method utilizes an internal object pool, and the handler is automatically recycled after its first execution by default.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/memory/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nLaya.loader.load(urls, Laya.Handler.create(this, this.onAssetLoaded));\n```\n\n----------------------------------------\n\nTITLE: Accessing Translated String by Key - TypeScript\nDESCRIPTION: Shows how to retrieve a translated string using the `t` method of a loaded `gui.Translations` object. The method takes a key (e.g., \"a\") and returns the corresponding translated string based on the current IDE language settings and configured fallback languages.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest() {\n    console.log(myI18n.t(\"a\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CommandBuffer and Adding Commands - LayaAir TypeScript\nDESCRIPTION: This snippet demonstrates the basic steps of creating a CommandBuffer instance, setting a rendering target (a RenderTexture), and adding a command to draw a specific renderable object with a material. This sequence defines a custom rendering step within the buffer.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/CommandBuffer/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar buf:CommandBuffer = new CommandBuffer();\nbuf.setRenderTarget(renderTexture);\nbuf.drawRender(renders[i],materials[i],0);\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol Buffer schema in .proto file\nDESCRIPTION: Example of a .proto file defining a ChatMessage structure with user, message, and timestamp fields using Protocol Buffers version 3 syntax.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_1\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\"; // 指定使用 Protobuf 3 语法\n\n// 定义一个 ChatMessage 消息\nmessage ChatMessage {\n  string user = 1;     // 用户名，字段编号是 1\n  string message = 2;  // 消息内容，字段编号是 2\n  int64 timestamp = 3; // 消息时间戳，字段编号是 3\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Node/Component Properties in UI Process - TypeScript\nDESCRIPTION: Shows how the UI process can directly modify properties of selected nodes or components in the scene using `Editor.scene.getSelection()`. Changes are automatically synchronized to the scene object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是UI进程代码\n\n//获取选中的节点\nlet node = Editor.scene.getSelection()[0];\n\n//修改节点属性，场景里的对象会自动同步，无需手动\nnode.props.x = 100;\n\n//修改组件属性，场景里的对象会自动同步，无需手动\nnode.getComponent(\"MeshRenderer\").props.enabled = false;\n```\n\n----------------------------------------\n\nTITLE: 使用drawPath绘制矩形路径示例\nDESCRIPTION: 该示例展现如何利用Graphics类的drawPath方法根据路径数组绘制自定义矩形。路径定义包括移动到起点、画线到各角以及闭合路径。通过路径参数控制矩形的轮廓和形状，适合绘制复杂边框或非规则矩形。路径数组中的命令和坐标定义绘制的详细轨迹，理解弧线和直线的结合方式。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\n//自定义路径\nlet path:Array<any> =  [\n    [\"moveTo\", 0, 0], //画笔移到A点\n    [\"lineTo\", 100, 0],//画到B点\n    [\"lineTo\", 100, 50],//再画到C点\n    [\"lineTo\", 0, 50], //继续画到D点\n    [\"closePath\"] //闭合路径\n];\n//绘制矩形\nsp.graphics.drawPath(20, 20, path, {fillStyle: \"#ff0000\"});\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Sizing with Sprite.autoSize in TypeScript\nDESCRIPTION: Shows how to create a Sprite, add it to the stage, and set its `autoSize` property to `true`. This causes the Sprite's width and height to automatically adjust based on its drawn content.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/displayObject/Sprite/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet sprite = new Laya.Sprite();\n// 添加到舞台\nLaya.stage.addChild(sprite);\nsprite.autoSize = true;\n```\n\n----------------------------------------\n\nTITLE: Network Status Type Enumeration Documentation (Java)\nDESCRIPTION: This documentation comment explains the network status enumeration constants used in the API. It documents each network type constant including no network, 2G, 3G, 4G, WiFi, and unknown network types.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/network/readme.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n * 枚举网络状态\n * NET_NO:没有网络\n * NET_2G:2g网络\n * NET_3G:3g网络\n * NET_4G:4g网络\n * NET_WIFI:wifi\n * NET_UNKNOWN:未知网络\n */\n```\n\n----------------------------------------\n\nTITLE: Setting Sound Volume with LayaAir SoundManager in TypeScript\nDESCRIPTION: This function sets the audio volume in a LayaAir game using the SoundManager.setSoundVolume static method. It can set the volume for all sound effects (excluding music) or for a specific audio URL, as specified by the url parameter. The volume parameter is a value between 0 (mute) and 1 (maximum). Dependencies: LayaAir SoundManager; Requires proper sound channel initialization. Input: volume (number), url (optional string). Output: Updates the volume property on the relevant channel(s). Does not affect background music if url is null.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/media/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n     * 设置声音音量。根据参数不同，可以分别设置指定声音（背景音乐或音效）音量或者所有音效（不包括背景音乐）音量。\n     * @param volume\t音量。初始值为1。音量范围从 0（静音）至 1（最大音量）。\n     * @param url\t\t(default = null)声音播放地址。默认为null。为空表示设置所有音效（不包括背景音乐）的音量，不为空表示设置指定声音（背景音乐或音效）的音量。\n     */\n    static setSoundVolume(volume: number, url: string = null): void {\n        if (url) {\n            SoundManager._setVolume(url, volume);\n        } else {\n            SoundManager.soundVolume = volume;\n            for (let i = SoundManager._channels.length - 1; i >= 0; i--) {\n                let channel = SoundManager._channels[i];\n                if (channel.url != SoundManager._bgMusic) {\n                    channel.volume = volume;\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Controlling LoadingView auto-close for manual progress updates in config.js (JavaScript)\nDESCRIPTION: Modifies the auto-close setting to false, enabling developers to manually control when the loading screen closes based on loading progress. Includes example code to update progress and hide the LoadingView when loading completes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/loading_view_new/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.loadingView = new loadingView();\nif(window.loadingView)\n{\n    window.loadingView.loadingAutoClose=false; // Set to false for manual control\n    // Other configurations...\n}\n\n// Define hide function (to be used in project)\nwindow.hideSplashScreen = function() {\n    window.loadingView.hideLoadingView();\n}\n\n// Update progress example:\nvar nPercent=0;\nvar image1 = document.createElement('img');\nimage1.onload=function()\n{\n    if(window.loadingView){\n        nPercent+=33;\n        window.loadingView.loading(nPercent);\n    }\n}\nimage1.src = \"a.png\";\n\nvar image2 = document.createElement('img');\nimage2.onload=function()\n{\n    if(window.loadingView){\n        nPercent+=33;\n        window.loadingView.loading(nPercent);\n    }\n}\nimage2.src = \"b.png\";\n\nvar image3 = document.createElement('img');\nimage3.onload=function()\n{\n    if(window.loadingView){\n        nPercent+=33;\n        window.loadingView.loading(nPercent);\n    }\n}\nimage3.src = \"c.png\";\n```\n\n----------------------------------------\n\nTITLE: Including Baidu Maps SDK in HTML\nDESCRIPTION: Script tag to load the Baidu Maps JavaScript API in the HTML file. The API key is included in the URL and a callback function named 'appendCode' is specified.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://api.map.baidu.com/api?v=2.0&ak=LIhOlvWfdiPYMCsK5wsqlFQD8wW4Bfy6&s=1&callback=appendCode\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Native Project with Specific SDK Version\nDESCRIPTION: This command creates a native project named 'SnowBallNative' using version 'v2.0' of the LayaNative SDK. It packages resources from the 'SnowBallH5' directory, sets the game URL, and specifies type 1 for resource packaging.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/build_Cmd/readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ layanative3 createapp -f SnowBallH5 -t 1 -n SnowBallNative -u http://10.10.20.102:8899/index.js -v v2.0\n```\n\n----------------------------------------\n\nTITLE: Sending Messages Between Scene Process and UI Panels in LayaAir3-IDE Using TypeScript\nDESCRIPTION: Shows usage of EditorEnv API to send asynchronous messages from the Scene process to UI panels, invoke custom panel methods with return values, and execute minimal code via eval on the UI process. This facilitates event-driven communication and control flow between scene scripts and UI components within the IDE plugin system.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n//选中项目资源面板一个资源\nEditorEnv.postMessageToPanel(\"ProjectPanel\", \"select\", assetId);\n\n//调用自定义的Panel的一个方法，并返回结果\nlet ret = await EditorEnv.sendMessageToPanel(\"MyPanel\", \"getResult\");\n\n//使用eval执行一些简单的脚本\nlet ret = await EditorEnv.runUIScript(\"window.eval\", `\n    (function() {\n        //do something\n        return \"hello\";\n    }())\n`);\n```\n\n----------------------------------------\n\nTITLE: Controlling Category Display Order for Component Properties\nDESCRIPTION: Demonstrates how to control the display order of property categories in the inspector using the catalogOrder parameter, allowing developers to customize the property organization.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@property({ type : \"number\", catalog:\"bb\", catalogOrder:1 })\na : number;\n\n@property({ type: \"string\"})\nb : string;\n\n@property({ type: \"boolean\", catalog:\"adv\"})\nc : boolean;\n\n@property({ type: String, inspector: \"color\", catalog:\"adv\", catalogCaption:\"高级组件\", catalogOrder:0})\nd: string;\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies `protobufjs` and `ws` for Server WebSocket\nDESCRIPTION: Uses npm to install the `protobufjs` library for protobuf message handling and the `ws` WebSocket server library. These enable the Node.js server to handle WebSocket connections and encode/decode protobuf messages for tests and development.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm install protobufjs ws\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Collision Group in TypeScript\nDESCRIPTION: Sets a collision group for a physics object using the COLLISIONFILTERGROUP_CUSTOMFILTER2 constant, which corresponds to a value of 128. This allows for organizing physics objects into separate custom collision groups.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//指定xxx碰撞器所属哪个碰撞组（COLLISIONFILTERGROUP_CUSTOMFILTER2对应的值为128）\nxxx.collisionGroup = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Collision Groups in LayaAir\nDESCRIPTION: Uses bitwise OR operations to configure a collider to interact with multiple collision groups. This example allows collision with custom groups 1, 2, and 5 only.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/physicsEditor/physics3D/readme - 副本.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n//指定xxx碰撞器可以与其发生碰撞的碰撞组(本例只与自定义组1、2、5进行碰撞)\nxxx.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1 | Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2 | Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;\n```\n\n----------------------------------------\n\nTITLE: Correct LocalStorage Usage in LayaNative with TypeScript\nDESCRIPTION: Demonstrates the proper way to store and retrieve data using LocalStorage in LayaNative. Uses the required Laya.LocalStorage.setItem() and getItem() methods which are fully supported in the LayaNative environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LocalStrorage/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//存储指定键名和键值，字符串类型。\nLaya.LocalStorage.setItem(\"LayaBox\",\"游戏引擎！\");\n//获取指定键名的值。\nLaya.LocalStorage.getItem(\"LayaBox\");\n```\n\n----------------------------------------\n\nTITLE: Basic Property Categorization in LayaAir Components\nDESCRIPTION: Demonstrates how to organize component properties into different categories using the catalog parameter in the @property decorator, allowing developers to group related properties together.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@property({ type : \"number\" })\na : number;\n\n@property({ type: \"string\"})\nb : string;\n\n@property({ type: \"boolean\",catalog:\"adv\"})\nc : boolean;\n\n@property({ type: String, inspector: \"color\" ,catalog:\"adv\"})\nd: string;\n```\n\n----------------------------------------\n\nTITLE: Adding CommandBuffer to Camera Event - LayaAir TypeScript\nDESCRIPTION: This code shows how to register a created CommandBuffer (`this.commandBuffer`) with a specific camera (`this.camera`) at a designated point in its rendering cycle (`this.cameraEventFlag`). This makes the camera execute the commands within the buffer at the specified event.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/CommandBuffer/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.camera.addCommandBuffer(this.cameraEventFlag,this.commandBuffer);\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Blinnphong Material Example\nDESCRIPTION: This snippet demonstrates Blinnphong material using a shader blueprint. It includes attributes such as NormalWS, AlphaTest, DiffuseColor, SpecularColor, Shininess, Gloss and Alpha. It is a fragment shader (fs) component, which involves more complex lighting calculations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Getting an Object by Class Name in TypeScript\nDESCRIPTION: Retrieves an object instance based on class name; creates a new instance if the pool for that class is empty. Facilitates type-safe object management based on class references.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Pool/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getItemByClass<T>(sign: string, cls: new () => T): T {\n    if (!Pool._poolDic[sign]) return new cls();\n\n    var pool = Pool.getPoolBySign(sign);\n    if (pool.length) {\n        var rst = pool.pop();\n        rst[Pool.POOLSIGN] = false;\n    } else {\n        rst = new cls();\n    }\n    return rst;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Decorators for Property Exposure in LayaAir TypeScript\nDESCRIPTION: Imports the `regClass` and `property` decorators from the LayaAir engine module. These decorators are essential for registering a custom script class and exposing its properties to the LayaAir editor interface.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/Script/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n```\n\n----------------------------------------\n\nTITLE: 字段注解绑定自定义 Inspector 编辑器（LayaAir Editor TypeScript）\nDESCRIPTION: 通过 @property({ inspector: ... }) 装饰器将自定义的 Inspector 编辑器应用到组件字段。依赖 IEditor.inspectorField 先行定义的编辑器类，适合个性化编辑体验。输入为自定义 inspector 名称，输出为关联自定义控件的字段，在编辑器内自动渲染为相应 UI。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Laya.regClass()\nexport class Script extends Laya.Script {\n     @property({ type : Laya.Node, inspector: \"MyTestField\" })\n     public node: Laya.Node;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing all textual tips and percentages from LoadingView via config.js (JavaScript)\nDESCRIPTION: Disables the display of tips and loading percentages by setting showTextInfo to false, providing a cleaner loading interface without text information.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/loading_view_new/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.loadingView = new loadingView();\nif(window.loadingView)\n{\n    //...\n    window.loadingView.loading(-1);\n\n    window.loadingView.showTextInfo=false; // Disable tips and percentage display\n}\n```\n\n----------------------------------------\n\nTITLE: Installing layanative3 on macOS (npm)\nDESCRIPTION: Installs the `layanative3` command-line tool globally on a macOS system using the Node Package Manager (npm). Requires administrator privileges (`sudo`) for global installation. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/build_Cmd/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo npm install -g layanative3\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tween Animation in TypeScript\nDESCRIPTION: Creates a basic tween animation that moves a sprite to specific X and Y coordinates over a duration of 1000 milliseconds. This demonstrates the fundamental tween animation pattern in LayaAir engine.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Tween/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 创建一个基础的缓动\n * aSprite为一个2D精灵\n */\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 500).to(\"y\", 300);\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential and Parallel Tweens in TypeScript\nDESCRIPTION: Demonstrates how to chain multiple animations sequentially using the chain() method, and how to run multiple animations in parallel with different durations using the parallel() method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Tween/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n//将两个缓动效果串行在一起\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 600)\n    .chain().duration(2000).to(\"y\", 400);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//在1秒内将aSprite的x移动到600，然后再在2秒内将bSprite的y移动到400\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 600)\n    .chain(bSprite).duration(2000).to(\"y\", 400);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//这段代码使用了串行与并行的方法\nLaya.Tween.create(aSprite).duration(1000).to(\"x\", 600)\n    .parallel().duration(2000).to(\"y\", 400)\n    .chain().duration(1000).to(\"visible\", false);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n//创建缓动，并为缓动添加名称\nLaya.Tween.create(aSprite).name(\"first\").duration(1000).to(\"x\", 100)\n    .chain().duration(2000).to(\"y\", 100);\n\n//根据名称找到缓动\nlet tweener = Laya.Tween.findTweener(\"first\");\nif (tweener != null) //需要判空，因为如果这段缓动已经执行完毕，会返回null\n    tweener.kill(); //会终止这段缓动，并立刻执行下一段\n```\n\n----------------------------------------\n\nTITLE: Generating DCC Programmatically (TypeScript)\nDESCRIPTION: TypeScript example demonstrating how to generate DCC data programmatically. It involves creating an instance of `LayaDCC`, setting parameters like version and output directory using `Params`, and then calling `genDCC` with the source resource path. Requires the `layadcc2` library/module.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    let srcPath = '资源的绝对路径'\n    let dcc = new LayaDCC();\n    //配置参数\n    let param = new Params();\n    param.version = '1.0.0';\n    param.dccout = '输出的绝对路径'\n    dcc.params = param;\n    //开始生成dcc数据\n    await dcc.genDCC(srcPath);\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners from a Specific Execution Domain\nDESCRIPTION: Demonstrates using the offAllCaller method to remove all event listeners associated with a specific execution domain.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/PerformanceOptimization/mouse/readme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n//删除xxx对象下this执行域的全部侦听器\nthis.xxx.offAllCaller(this);\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with GUIUtils in TypeScript\nDESCRIPTION: Creates a button using IEditor.GUIUtils.createButton() which simplifies button creation. It demonstrates the equivalence to a less concise method, highlighting utility functions for UI element creation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet button = IEditor.GUIUtils.createButton();\n//它实现的功能其实和以下代码是相同的，只是更加简洁\n//let button = gui.UIPackage.createWidgetSync(\"~/ui/basics/Button/Button.widget\");\n```\n\n----------------------------------------\n\nTITLE: Normal and Tangent Handling LayaAir3-IDE\nDESCRIPTION: Describes the settings for handling normals and tangents, crucial for lighting effects. This includes the 'normal' setting with options 'import', 'calculate', and 'none', and also the 'normal Calculate Mode' options 'unweight' and 'areaWeight', and also includes the tangent's setting options.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_9\n\nLANGUAGE: other\nCODE:\n```\n法线**属性有三个选项，**导入**`import`、**计算**`calculate`、**无**`none`。如图3-4所示。\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Lifecycle Methods in LayaAir Editor using @runInEditor - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to mark a script class with @runInEditor and @regClass decorators, enabling the class's lifecycle methods (such as onEnable and onStart) to be triggered when loaded in the LayaAir IDE. It requires importing regClass, property, and runInEditor from the Laya module. The class extends Laya.Script and defines a Sprite3D property exposed to the IDE. This allows component initialization and inspection in the editor environment but may lead to performance differences versus runtime and is not generally recommended unless specifically needed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property, runInEditor } = Laya;\n\n@regClass() @runInEditor     //重点看这里，要放到类之前，@regClass()与@runInEditor谁先谁后都可以。\nexport class NewScript extends Laya.Script {\n    @property({ type: Laya.Sprite3D })\n    sp3: Laya.Sprite3D;\n\n    constructor() {\n        super();\n    }\n\n    onEnable() {\n        console.log(\"Game onStart\", this.sp3.name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Laya Component Scripts - TypeScript\nDESCRIPTION: This code snippet shows how to register a component script in LayaAir using the `@regClass()` decorator. This allows the IDE to recognize the script as a component that can be added to nodes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass } = Laya;\n\n@regClass()\nexport class Script extends Laya.Script {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Object Types in Component Properties\nDESCRIPTION: Demonstrates how to expose custom object types in the LayaAir IDE by using the @regClass decorator on both the component script and the custom class being exposed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/Component/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n//MyScript.ts\nconst { regClass, property } = Laya;\n\nimport Animal from \"./Animal\";\n\n@regClass()\nexport class MyScript extends Laya.Script  {\n    @property({ type : Animal })\n    animal : Animal;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Animal.ts\nconst { regClass, property } = Laya;\n\n@regClass()\nexport default class Animal {\n    @property({ type : Number })\n    weight : number;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Static Method in Scene Process from UI Process - TypeScript\nDESCRIPTION: Demonstrates how the UI process can execute a static method (`TestSceneScript.test`) defined in a Scene process script using `Editor.scene.runScript`, passing arguments and receiving the return value.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n//下面是UI进程的代码\n\nlet ret = await Editor.scene.runScript(\"TestSceneScript.test\", \"hello\");\nconsole.log(ret); //ok;\n```\n\n----------------------------------------\n\nTITLE: UniformMap Styles Definition\nDESCRIPTION: Demonstrates how to define UI display details for uniform variables using the `styles` section instead of directly in the `uniformMap` for better code readability.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_7\n\nLANGUAGE: glsl\nCODE:\n```\nuniformMap:{\n        u_Number: { type: Float, default:0 }\n    },\n    styles: {\n        u_Number: { caption:\"数字\", range:[0,100], fractionDigits: 2 }\n    },\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handling in TypeScript with LayaAir\nDESCRIPTION: Demonstrates how to create, dispatch and listen for custom events in LayaAir engine using the event method.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nonEnable(): void { \n\t//需要先侦听自定义的test事件\n  \tthis.xxx.on(\"test\", this, () => {\n\t\tconsole.log(\"已收到test事件\");\n \t });\n}\n\nonMouseDown(): void {\n\t//派发自定义事件的逻辑要放到侦听逻辑的后面\n    this.xxx.event(\"test\");\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling JS Messages on Windows using C\nDESCRIPTION: Demonstrates registration of callback handlers (for synchronous and asynchronous JS messages) using conchSetHandleMessageCallback and result delivery via conchSendHandleMessageResult. Provided as an entry point (wWinMain) for the Windows platform and requires conchMain for runtime startup. Callback lambdas inspect the event name and return hardcoded responses. Requires correct native headers (Exports.h) and linkage with the LayaAir runtime for full functionality. Inputs are C strings for event names and data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/platform_communication/readme.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nCONCH_EXPORT void CONCH_CDECL conchSetHandleMessageCallback(handleSyncMessageCallback handleSyncMessageCb,\n                                                            handleAsyncMessageCallback handleAsyncMessageCb);\nCONCH_EXPORT void CONCH_CDECL conchSendHandleMessageResult(const char *eventName, const char *result);\n```\n\nLANGUAGE: C\nCODE:\n```\nint WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd)\n{\n    conchSetHandleMessageCallback(\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"syncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"sync message from platform\");\n            }\n        },\n        [](const char *eventName, const char *data) -> void {\n            if (strcmp(eventName, \"asyncMessage\") == 0)\n            {\n                conchSendHandleMessageResult(eventName, \"async message from platform\");\n            }\n        });\n    return conchMain(hInstance, hPrevInstance, lpCmdLine, nShowCmd);\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Grass Example - Fragment Shader\nDESCRIPTION: This is a fragment shader section of a grass shader. It uses a define macro for snow, UV manipulations, sampling the grass texture and finally using the sampled Alpha for the PBR function. The output affects transparency.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Installing LayaAir Extension Creator via npm\nDESCRIPTION: This snippet shows the command to install the LayaAir extension creator tool globally using npm. The tool is required to create the project template for custom DLLs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install laya-ext-creator -g\n```\n\n----------------------------------------\n\nTITLE: Removing CommandBuffer from Camera Event - LayaAir TypeScript\nDESCRIPTION: This snippet illustrates how to detach a previously added CommandBuffer (`this.commandBuffer`) from a specific camera event (`this.cameraEventFlag`) on the camera (`this.camera`). This prevents the camera from executing the buffer's commands at that stage.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/CommandBuffer/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.camera.removeCommandBuffer(this.cameraEventFlag,this.commandBuffer);\n```\n\n----------------------------------------\n\nTITLE: Generating a Pack File from File List\nDESCRIPTION: Code example showing how to create a pack file from a list of files using the LayaDCCTools.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {layadcctools} from './dist/layadcctools.js'\nconst {LayaDCCTools,LayaDCC,Params,PackRaw} = layadcctools;\n\nlayadcctools.LayaDCCTools.genPackByFileList( [\n    'D:/work/ideproj/DCCPlugin/release/web/internal/sky.jpg',\n    ],\n    'd:/temp/ddd1.pack', layadcctools.PackRaw)\n```\n\n----------------------------------------\n\nTITLE: Generating Pack File from File List (TypeScript)\nDESCRIPTION: Demonstrates generating a custom pack file using `LayaDCCTools.genPackByFileList`. This method takes a list of absolute file paths, an output pack file path, and a packer implementation class (like `PackRaw`). The pack file bundles the specified resources together. Requires the `layadcctools` module and associated classes.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {layadcctools} from './dist/layadcctools.js'\nconst {LayaDCCTools,LayaDCC,Params,PackRaw} = layadcctools;\n\nlayadcctools.LayaDCCTools.genPackByFileList( [\n    'D:/work/ideproj/DCCPlugin/release/web/internal/sky.jpg',\n    ],\n    'd:/temp/ddd1.pack', layadcctools.PackRaw)\n```\n\n----------------------------------------\n\nTITLE: Displaying createapp Command Help Information\nDESCRIPTION: This command displays the help information for the `createapp` command. This is useful to understand the various parameters available and how to use them to create a native project.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/build_Cmd/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ layanative3 createapp --help\n```\n\n----------------------------------------\n\nTITLE: 增加自定义面板（LayaAir Editor TypeScript）\nDESCRIPTION: 通过 @IEditor.panel 装饰器注册自定义面板，可设置标题、图标等属性，面板 UI 资源由预制体决定。依赖 IEditor.panel、gui.UIPackage。输入为面板名和配置对象，输出为持久面板，适合拓展编辑器工具和工作流。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@IEditor.panel(\"test\", {\n    title: \"Test\",\n    icon : \"editorResources/20230710-161955.png\"\n})\nexport class TestPanel extends IEditor.EditorPanel {\n    async create() {\n        this._panel = await gui.UIPackage.createWidget(\"MyPanel.widget\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating DCC Resources Using TypeScript\nDESCRIPTION: Code example showing how to create DCC resources from a source directory with version configuration parameters.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet srcPath = '资源的绝对路径'\nlet dcc = new LayaDCC();\n//配置参数\nlet param = new Params();\nparam.version = '1.0.0';\nparam.dccout = '输出的绝对路径'\ndcc.params = param;\n//开始生成dcc数据\nawait dcc.genDCC(srcPath);\n```\n\n----------------------------------------\n\nTITLE: Converting Stage Coordinates to Local Coordinates in LayaAir\nDESCRIPTION: Example of how to convert mouse coordinates from stage (global) space to an object's local coordinate space.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/PerformanceOptimization/mouse/readme.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//转换舞台坐标为XXX对象的局部坐标\nlet point: Laya.Point = this.XXX.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));\nconsole.log(\"打印局部坐标x,y\", point.x, point.y);\n```\n\n----------------------------------------\n\nTITLE: 通过代码动态加载压缩纹理到Image组件（TypeScript）\nDESCRIPTION: 示例演示了在LayaAir引擎中，如何用TypeScript通过代码直接加载存放在资源路径下的压缩纹理图片，应用于Image组件的皮肤，实现动态纹理加载功能。无需额外平台判断，由引擎自动识别平台支持对应压缩格式。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/textureCompress/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class Main extends Laya.Script {\n\n    onAwake(): void {\n        let img = new Laya.Image;\n        Laya.stage.addChild(img);\n        img.pos(500,100);\n        img.skin = \"resources/layabox.png\"; //纹理压缩的图片的路径\n    }\n\n    onStart() {\n        Laya.Stat.show(0, 0); //性能面板\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Steam Callback - C++\nDESCRIPTION: This function calls SteamAPI_RunCallbacks() every frame to process Steam events and callbacks.  It should only be called if Steam has been successfully initialized.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid SteamManager::SteamCallback()\n{\n    // 每帧调用\n    if (m_bInitialized)\n    {\n        SteamAPI_RunCallbacks();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 隐藏 Inspector 面板顶部栏目（LayaAir Editor TypeScript）\nDESCRIPTION: 通过给面板类型配置 catalogBarStyle: 'hidden' 属性，实现 Inspector 面板顶部栏目隐藏。需与 Editor.typeRegistry.addTypes 配合。适合希望清爽界面，无需类型名显示的场合。传入参数为属性对象，输出为无类型栏目显示的编辑面板。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    name : \"MyPanelType\",\n    catalogBarStyle: \"hidden\",\n    properties : [\n       ....\n    ]\n }\n```\n\n----------------------------------------\n\nTITLE: 创建层级级联菜单（LayaAir Editor TypeScript）\nDESCRIPTION: 通过 IEditor.Menu.create 实现多级结构的级联菜单。可嵌套任意层，配置简单。输入为包含 submenu 嵌套的结构，输出为复杂菜单树。适用于工具、右键菜单等多级交互需求。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nIEditor.Menu.create([ \n    { \n        label: \"test\" , \n        submenu: [ \n            { label : \"a\" },\n            { \n                label : \"b\",\n                submenu : [\n                    { label : \"c\" }\n                ]\n            }\n        ]\n    }\n ]);\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Color Parameter Definition\nDESCRIPTION: Describes the definition of a color parameter within a Shader Blueprint. Colors are defined with RGBA components and can be set through the inspector panel. The color parameter is useful for color blending and manipulation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Generating DCC Resources via CLI (Bash)\nDESCRIPTION: Example command using `layadcc2` to process resources in the `./resource` directory and generate the corresponding DCC structure in the `./dccout` directory.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlayadcc2 ./resource -o ./dccout\n```\n\n----------------------------------------\n\nTITLE: Querying Current Network Status in LayaNative (JavaScript)\nDESCRIPTION: This snippet shows how to actively query the current network status in LayaNative using the conch.config.getNetworkType() method. It returns an integer value corresponding to the network type constants.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/network/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif( conch )\n{\n    var nType = conch.config.getNetworkType();\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Coordinate Nodes\nDESCRIPTION: This section describes the coordinate nodes available in Shader Blueprints. It describes nodes like PositionWS, normalWS, tangentWS, biNormalWS and worldMat, which provide access to world space vertex data.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: 绘制圆角矩形的drawRoundRect方法示例\nDESCRIPTION: 该代码示例展示如何调用drawRoundRect方法在Sprite中绘制带有不同角半径的圆角矩形。参数包括矩形位置、尺寸、四个角的半径、填充色、边框色及宽度，支持百分比或像素单位。生成的图形为具有圆角效果的矩形，可用于UI或者装饰性图形。此示例强调参数设置和样式控制。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/graphics/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet sp = new Laya.Sprite();\nsp.graphics.drawRoundRect(200, 200, 300, 300, 20, 20, 20, 20, \"#ffff00\", \"#00ff00\", 5, false);\nthis.owner.addChild(sp);\n```\n\n----------------------------------------\n\nTITLE: Listing Available LayaNative SDK Versions (Shell)\nDESCRIPTION: Executes the `listversions` command of the `layanative3` tool to display a list of all available SDK versions that can be used when creating native projects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/build_Cmd/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ layanative3 listversions\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Example Loaded via Script Tag with TypeScript Compatible Syntax\nDESCRIPTION: This JavaScript snippet defines a module-like structure named Demo1 using an immediately invoked function expression (IIFE). It declares a Client function constructor with a start prototype method that logs a message to the console. This module is intended to be loaded dynamically as an external script (e.g., 'demo1.js') and instantiated from TypeScript code after the script tag has loaded the file. It outputs log messages indicating successful loading and function execution. This example demonstrates modular JavaScript compatible with dynamic script loading approaches used in LayaAir.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Demo1 = (function () {\n    function Client() {\n    }\n    Client.prototype.start = function () {\n        // body...\n        console.log(\"调用方法\");\n    };\n    return Client;\n})();\nconsole.log(\"我被加载进来了\");\n```\n\n----------------------------------------\n\nTITLE: Scene Class Autoplay Properties Definition\nDESCRIPTION: Definition of key scene class properties including autoDestroyAtClosed which controls automatic scene destruction when closed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**场景被关闭后，是否自动销毁（销毁节点和使用到的资源），默认为false*/\nautoDestroyAtClosed: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Updating Map with Converted Baidu Coordinates\nDESCRIPTION: Callback function that receives converted Baidu coordinates, updates the marker position on successful conversion, and pans the map to center the marker.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// 将原始坐标转换为百度坐标\nprivate convertToBaiduCoord(data: any): void {\n  if (data.status == 0) {\n    var position: any = data.points[0];\n    // 设置标注物位置\n    this.marker.setPosition(position);\n\n    this.map.panTo(position);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Information in LayaNative\nDESCRIPTION: Example of calling a config function in LayaNative to retrieve runtime version information. Demonstrates the pattern for accessing LayaNative configuration API.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Other_settings/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif( window.conch )\n{\n    window.conch.config.getRuntimeVersion();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Performance Analysis Plugin in LayaAir TypeScript Project\nDESCRIPTION: Code snippet showing how to initialize the performance analysis plugin in a LayaAir project. It demonstrates creating a script that initializes the plugin with a project ID obtained from the backend platform.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property(Number)\n    public projectId: number = 23;\n\n    private perfMain: LayaPerf = new LayaPerf();\n\n    onEnable(): void {\n        this.perfMain.init(this.projectId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Texture Nodes\nDESCRIPTION: This section describes the texture nodes within the Shader Blueprint. It presents sampler2D, samplerCube, sampler2DNormal (OpenGL), and sampler2DNormal (Directx) that handle texture sampling.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Getting the Default Animation State from a Layer in LayaAir (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates accessing the default `AnimatorState` associated with a specific `AnimatorControllerLayer`. After obtaining the layer (e.g., using `getControllerLayer`), the `defaultState` property directly provides a reference to the state designated as the default entry point for that layer.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//获得当前BaseLayer层的默认动画状态\nlet defaultState = animatorControllerLayer.defaultState;\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Handlers - TypeScript\nDESCRIPTION: These are empty handler functions for keyboard events in LayaAir. `onKeyDown` is triggered when a key is pressed, `onKeyPress` is triggered when a character is generated, and `onKeyUp` is triggered when a key is released. Each function accepts a Laya.Event object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Component/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\t//键盘按下时执行\n     onKeyDown(evt: Laya.Event): void {\n    }\n\n    //键盘产生一个字符时执行\n    onKeyPress(evt: Laya.Event): void {\n    }\n\n    //键盘抬起时执行\n    onKeyUp(evt: Laya.Event): void {\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing Scene Process Script from Laya.Script - TypeScript\nDESCRIPTION: Shows how a method within a Laya.Script class (which might run in the Preview process) can trigger the execution of a method in a different script registered with `IEditorEnv.regClass` (running in the Scene process) using `EditorEnv.scene.runScript` to access Node.js capabilities safely.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//Script.ts\n@Laya.regClass()\nclass Script extends Laya.Script {\n\n    wantToUseNode() {\n        EditorEnv.scene.runScript(\"TestSceneScript.visitNode\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Steam Initialization from LayaAir - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to call the native Steam initialization function from a LayaAir component script. It imports the `extendLib` object, which contains the native Steam initialization function. It then attaches a click event listener to a button, which, when clicked, calls the `extendLib.initializeSteam()` function and displays the result in an alert box.  `@regClass()` and `@property()` are LayaAir decorators. It depends on LayaAir's event system and UI components.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/steam/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extendLib } from \"./extlib\";\n\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property({type: Laya.Button})\n    public initBtn: Laya.Button;\n\n    onEnable(): void {\n        this.initBtn.on(Laya.Event.CLICK, this.onInit);\n    }\n\n    onInit() {\n        alert(extendLib.initializeSteam());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: 引擎初始化前后添加自定义配置（TypeScript）\nDESCRIPTION: 示范在引擎初始化之前和之后执行自定义逻辑的方法，包括配置渲染模式和执行初始化代码。可以在启动脚本或场景脚本中调用，确保引擎参数设置符合项目需求。代码中展示了使用Laya.addBeforeInitCallback和Laya.addAfterInitCallback两个钩子。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/entry/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 在引擎初始化前执行自定义逻辑\nLaya.addBeforeInitCallback(() => {\n    // 默认启用WebGL2渲染模式\n    Laya.Config.useWebGL2 = true;\n    console.log(\"before init\");\n});\n// 在引擎初始化后执行自定义逻辑\nLaya.addAfterInitCallback(() => {\n    console.log(\"after init\");\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { regClass } = Laya;\n@regClass()\nexport class Main extends Laya.Script {\n    onStart() {\n        console.log(\"Game start\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 销毁Sprite实例释放内存 - LayaAir - TypeScript\nDESCRIPTION: 该代码示例展示了如何通过调用Sprite对象的destroy()方法清除内部引用，辅助JavaScript垃圾回收器回收该实例的内存。依赖LayaAir引擎的Sprite类，销毁操作并非立即释放内存，而是等待系统认为内存不足时才触发回收。示例中创建一个Sprite实例后调用destroy()，适用于需要主动释放显示对象资源场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//创建一个Sprite实例\nvar sp:Laya.Sprite = new Laya.Sprite();\n//将sp内部引用设置为null\nsp.destroy();\n```\n\n----------------------------------------\n\nTITLE: 减少动态属性查找示例 - LayaAir - TypeScript\nDESCRIPTION: 这段代码示例说明了在函数调用中缓存频繁访问的对象属性到局部变量中，避免多次动态属性查找以提升性能。示例中通过将this.target.prop赋给局部变量prop，后续使用prop减少动态查找，降低CPU消耗。该技巧适用于对性能敏感且频繁访问同一属性的JavaScript或TypeScript代码中。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/performanceOptimization/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfoo()\n{\n    var prop=this.target.prop;\n    //使用prop\n    this.process1(prop);\n    this.process2(prop);\n    this.process3(prop);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing layanative on Windows\nDESCRIPTION: This command installs the layanative3 package globally using npm on a Windows system. This allows the layanative3 command to be accessible from any directory in the command line.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/build_Cmd/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g layanative3\n```\n\n----------------------------------------\n\nTITLE: Running pbts command to generate TypeScript declarations\nDESCRIPTION: Shell command to execute the pbts npm script that generates TypeScript declaration files from the previously generated JavaScript code.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run pbts\n```\n\n----------------------------------------\n\nTITLE: Parent Node Translation - TypeScript\nDESCRIPTION: Translates the parent node, affecting the position of its children. Requires a parent Sprite3D instance and a Vector3 for translation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/Sprite3D/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.layaMonkeyParent.transform.translate(new Laya.Vector3(-0.2, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Initializing CommandBuffer in LayaAir\nDESCRIPTION: This snippet demonstrates the creation of a new CommandBuffer object. CommandBuffer is used to store and execute rendering commands, providing greater control over the rendering process.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/CommandBuffer/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar buf:CommandBuffer = new CommandBuffer();\n```\n\n----------------------------------------\n\nTITLE: Installing protobufjs-cli for code generation\nDESCRIPTION: Command for installing the protobufjs-cli package via npm, which is necessary for generating static code from .proto files.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install protobufjs-cli --save-dev\n```\n\n----------------------------------------\n\nTITLE: Opening Scene Example in LayaAir\nDESCRIPTION: Simple examples of opening scenes using the Scene.open method, both for scene files and prefabs.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Scene/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nLaya.Scene.open(\"uiDemo/page/OpenScene.ls\", false);\n\n// Also can open a prefab-based UI\nLaya.Scene.open(\"dailog.lh\");\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Color Nodes\nDESCRIPTION: This section describes the color related nodes in Shader Blueprint. It explains GammaToLinear and LinearToGamma nodes, used for color space conversions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: 使用@bpClass装饰器定义带构造参数的蓝图类\nDESCRIPTION: 此代码示例展示如何在@bpClass装饰器中加入construct参数定义蓝图类的构造函数参数，使得蓝图实例化时可以传递参数。构造函数中可以访问参数以初始化对象。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass } = BP;\n\n@bpClass({\n    name: \"TestBluePrint\",\n    canInherited: true,\n    extends: \"Script\",\n    construct: {\n        params: [\n            {\n                \"name\": \"testParams\",\n                \"type\": \"string\"\n            }\n        ]\n    }\n})\n\nexport class TestBluePrint extends Laya.Script {\n\n    constructor(testParams: string) {\n        super();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating DCC Resources Using Pack Files\nDESCRIPTION: Simple code example showing how to update DCC resources using a pack file with a corresponding decoder.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndcc.updateByPack(buffer, DCCPackR);\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Texture2D Parameter Definition\nDESCRIPTION: Describes the definition of a 2D texture parameter within a Shader Blueprint. A 2D texture is defined and can be modified within the inspector panel. The texture is set and can be sampled.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: AlphaTest and SceneFog Parameters\nDESCRIPTION: This section discusses the AlphaTest and SceneFog parameters. It explains the usage of the Alpha test value and the enable of the scene fog.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Configuring LoadingView appearance and auto-close behavior in config.js (JavaScript)\nDESCRIPTION: Initial setup of LoadingView's background color, font color, and auto-close setting via config.js. This code initializes the LoadingView object and configures its visual attributes and auto-close behavior, enabling automatic transition to the game after animation or manual control.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/loading_view_new/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.loadingView = new loadingView();\nif(window.loadingView)\n{\n    window.loadingView.loadingAutoClose=true; // true: auto-close after animation, false: manual control\n    window.loadingView.bgColor(\"#FFFFFF\"); // set background color\n    window.loadingView.setFontColor(\"#000000\"); // set font color\n    window.loadingView.loading(-1); // start loading indicator with indefinite progress\n}\n```\n\n----------------------------------------\n\nTITLE: Mathematical Operation Nodes\nDESCRIPTION: This defines mathematical operation nodes, including add/minus/multiply/divide, sin/cos/tan, clamp, mix/max, step/smoothstep, pow, dot/cross.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Setting Achievement - C++\nDESCRIPTION: This code sets a Steam achievement based on the provided achievement ID. It checks if Steam is initialized, the user is logged in, and if the achievement is already unlocked before attempting to set it. Returns true if achievement is successfully set and stored, otherwise returns false.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/steam/readme.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool SteamManager::SetAchievement(const char* achievementID)\n{\n    if (!m_bInitialized || !SteamUserStats())\n    {\n        // Steam未初始化或统计接口不可用\n        return false;\n    }\n\n    if (!SteamUser()->BLoggedOn())\n    {\n        // Steam用户未登录\n        return false;\n    }\n\n    // 检查成就是否已解锁\n    bool alreadyAchieved = false;\n    if (SteamUserStats()->GetAchievement(achievementID, &alreadyAchieved))\n    {\n        if (alreadyAchieved)\n        {\n            printf(\"成就已经解锁\", achievementID);\n            return false;\n        }\n    }\n\n    bool result = SteamUserStats()->SetAchievement(achievementID);\n    if (result)\n    {\n        // 立即存储更新\n        return SteamUserStats()->StoreStats();\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Executing JavaScript by Setting Script Element innerHTML in LayaAir using TypeScript\nDESCRIPTION: This snippet loads an external JavaScript file as text using Laya.HttpRequest, then creates a script element and assigns the loaded JavaScript code to its innerHTML property, causing the browser to parse and execute it. Afterwards, it instantiates the Demo1 class from the loaded script and calls its start method. The example illustrates an alternative to loading scripts via src attribute, with limitations such as same-origin policy restrictions. It requires that the loaded JavaScript text be properly formatted. Uses LayaAir's HttpRequest and DOM manipulation.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/dom/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Main {\n    private video:Laya.Video;\n    constructor() {\n        //初始化引擎\n        Laya.init(500,500);\n        var httpreq:Laya.HttpRequest = new Laya.HttpRequest();\n        httpreq.on(Laya.Event.COMPLETE,this,this.completeHandler);\n        httpreq.on(Laya.Event.ERROR,this,this.errorHandler);\n        httpreq.send(\"demo1.js\");\n    }\n    private completeHandler(e:any):void{\n        var script:any = Laya.Browser.document.createElement(\"script\");\n        Laya.Browser.document.body.appendChild(script);\n        script.innerHTML = e;\n        var client:any = new Laya.Browser.window.Demo1();\n        client.start();\n    }\n    private errorHandler(e:any):void{\n    }\n}\nnew Main;\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Define Parameter Definition\nDESCRIPTION: Describes the definition of a Define parameter within a Shader Blueprint. Define parameters are macro definitions that enable different execution paths based on a given condition, such as an if-else. These can be more efficient than using an if-else.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Vertex Shader Definition\nDESCRIPTION: Defines the vertex shader (VS) code, including the inclusion of Sprite2DVertex.glsl and calculation of vertex position.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_10\n\nLANGUAGE: glsl\nCODE:\n```\nGLSL Start\n    \n#defineGLSL textureVS\n    // VS\n#endGLSL\n```\n\nLANGUAGE: glsl\nCODE:\n```\n#defineGLSL textureVS\n\n    #define SHADER_NAME Sprite2DTextureShader\n    #include \"Sprite2DVertex.glsl\";\n\n    void main() {\n\t    vertexInfo info;\n\t    getVertexInfo(info);\n\n\t    v_cliped = info.cliped;\n\t    v_texcoordAlpha = info.texcoordAlpha;\n\t    v_useTex = info.useTex;\n\t    v_color = info.color;\n\n\t    vec4 pos;\n\t    getPosition(pos);\n\t    gl_Position = pos;\n\n    }\n\n#endGLSL\n```\n\n----------------------------------------\n\nTITLE: Texture Nodes Description\nDESCRIPTION: This defines texture nodes like sampler2D, samplerCube, sampler2DNormal(OpenGL), and sampler2DNormal(Directx) with their corresponding explanations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Generating DCC Resources via Command Line\nDESCRIPTION: Command to generate DCC resources from a source directory and output to a specified directory.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlayadcc2 ./resource -o ./dccout\n```\n\n----------------------------------------\n\nTITLE: 定义多个参数以实现多条件动画切换\nDESCRIPTION: 通过给参数命名，提高条件判断的清晰度，支持多个参数共存。在动画条件中任一满足即可触发转跳，增强动画逻辑的复杂度与灵活性。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n//示意多参数配置与命名，具体实现依赖动画条件设置界面\n```\n\n----------------------------------------\n\nTITLE: 定义项目启动脚本Main函数加载场景（TypeScript）\nDESCRIPTION: 该代码示例展示如何编写一个异步main函数作为项目入口，加载并打开指定场景。需要在项目设置中配置该脚本，使其在引擎启动时执行，从而实现自定义的启动逻辑。此脚本可根据逻辑条件决定加载哪个场景。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/entry/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main() {\n    console.log(\"Hello LayaAir!\");\n    //加载场景并打开场景\n    Laya.Scene.open('Scene.ls');\n}\n```\n\n----------------------------------------\n\nTITLE: 使用@bpClass装饰器定义蓝图类\nDESCRIPTION: 此代码示例演示如何使用@bpClass装饰器注册一个蓝图类，包括基础信息和构造函数参数，以支持蓝图的实例化和继承。类继承自Laya.Script，可在蓝图中创建新实例。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/blueprint/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { bpClass } = BP;\n\n@bpClass({\n    name:\"TestBluePrint\",\n    canInherited: true,\n    extends:\"Script\"\n})\n\nexport class TestBluePrint extends Laya.Script {\n}\n```\n\n----------------------------------------\n\nTITLE: 创建自定义组件脚本（TypeScript类实现）\nDESCRIPTION: 通过继承Laya.Script类定义自定义组件脚本，可以在场景节点上挂载，实现特定逻辑或行为。脚本命名由编辑器自动生成，开发者在脚本中添加事件处理和生命周期方法。适用于扩展场景节点功能。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/entry/readme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class aaa extends Laya.Script {\n    onAwake() {\n        // 初始化逻辑\n    }\n    onDestroy() {\n        // 销毁时逻辑\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 获取动画当前播放状态信息\nDESCRIPTION: 通过getControllerLayer()获取控制器层，进一步调用getCurrentPlayState()获取动画的播放信息，包括normalizedTime（播放进度）、duration（总时长）和当前状态，便于判断动画是否播放完毕。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet layer = this.animator.getControllerLayer(0);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet state = layer.getCurrentPlayState();\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nif(state.normalizedTime >= 1){ /* 动画播放完毕 */ }\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - CUTOUT Material\nDESCRIPTION: This snippet describes the CUTOUT blending mode. If the alpha value from the texture is greater than the AlphaTestValue, then the final color is set to the source color; otherwise, the pixel is discarded. It uses the AlphaTestValue for the cut out threshold.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: 调整动画状态的片段播放范围\nDESCRIPTION: 获取AnimatorControllerLayer中的AnimatorState，修改clipStart和clipEnd，对动画片段进行裁剪，支持播放动画的某一段内容，便于制作特定效果。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet acl: Laya.AnimatorControllerLayer = this.animator.getControllerLayer(0);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet state = acl.getAnimatorState(\"Stand\");\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstate.clipStart = 10/40;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstate.clipEnd = 20/40;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.animator.play(\"Stand_new\");\n```\n\n----------------------------------------\n\nTITLE: 在动画状态中添加状态脚本实现特效\nDESCRIPTION: 通过在动画状态中挂载脚本，可以在状态进入或离开时执行特定逻辑，如播放音效或触发其他事件，增强动画的表现力和交互性。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/aniController/readme.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: 添加关键帧的操作示例（伪代码）\nDESCRIPTION: 通过双击动画面板或右键菜单在指定属性区域添加关键帧，实现动画的帧插入操作。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/animationEditor/timelineGUI/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addKeyFrame(time: number, property: string): void {\n  // 在时间轴上的某一时间点添加关键帧\n  animationTimeline.insertKeyFrame(time, property);\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Type Definition\nDESCRIPTION: Defines the shader type.  In 2D shaders, this is set to 2.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/2D/advanced/customShader/readme.md#_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\nShader3D Start\n{\n\tshaderType:2\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: UI运行时脚本设置与管理（示意图与流程说明）\nDESCRIPTION: 介绍UI运行时（Runtime）脚本在场景中的添加方法，包括选择目录、命名脚本、以及挂载到2D节点的具体操作步骤。此类脚本用于管理大量UI节点、传递参数和定制UI组件逻辑，为复杂UI场景提供支持。\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/IDE/entry/readme.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Loading Subpackage Resources (Using Modified Names) in LayaAir (TypeScript)\nDESCRIPTION: Illustrates the correct way to load assets from nested subpackages in Taobao Mini Games after modifying the subpackage names (e.g., 'subname1', 'subname2') in game.json to be single directory names. Uses the modified subpackage name instead of the full path in `Laya.loader.load`.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/tbgame/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n        Laya.loader.load(\"subname1/Cube.lh\").then((res) => {\n            // ......\n        });\n\n        Laya.loader.load(\"subname2/Sphere.lh\").then((res) => {\n            // ......\n        });\n```\n\n----------------------------------------\n\nTITLE: Exporting String Manipulation Function Using LayaAir Native Extension C API - C\nDESCRIPTION: Defines a C++ function that reads a UTF-8 string from JavaScript, appends a C++-specific suffix, and returns the new string to JavaScript. Relies on LayaAir's extension C API and proper structuring of the extension project. Input is a single string from JS, and output is the augmented string. Useful for demonstrating native string handling between C++ and JS.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/extension/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsStr(jsvm_env env, jsvm_callback_info info) {\n    jsvm_status status;\n    size_t argc = 1;\n    jsvm_value args[1];\n    jsvm_value _this;\n    jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr);\n\n    char strBuff[1024];\n    size_t strLen = 0;\n    jsvm_get_value_string_utf8(env, args[0], strBuff, 1024, &strLen);\n    std::string cstr;\n    cstr.assign(strBuff, strLen);\n    cstr += \" C++ 增加\";\n\n    jsvm_value retstr;\n    jsvm_create_string_utf8(env, cstr.c_str(), cstr.length(), &retstr);\n    return retstr;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Texture Configuration Example - JSON\nDESCRIPTION: This JSON snippet provides an example of how to configure texture properties for shader export. `uName` specifies the Unity property name, `layaName` specifies the corresponding LayaAir property name, and `defind` specifies a macro definition.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Unity/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uName\": unity 属性名,\n    \"layaName\": layaair 属性名,\n    \"defind\": defind\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Baidu Map Container and Configuration\nDESCRIPTION: Creates a DOM container for the Baidu Map, sets initial map location to Beijing, configures zoom level, disables various map interactions, and adds a marker overlay.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/device/baiduMap/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprivate init(): void {\n  this.mapDiv = Laya.Browser.createElement(\"div\");\n  Laya.Browser.document.body.appendChild(this.mapDiv);\n\n  // 适应窗口尺寸\n  this.refit();\n  Laya.stage.on(Laya.Event.RESIZE, this, this.refit);\n\n  // 初始化地图\n  this.map = new this.BMap.Map(this.mapDiv);\n\n  // 禁用部分交互\n  //this.map.disableDragging();\n  this.map.disableKeyboard();\n  this.map.disableScrollWheelZoom();\n  this.map.disableDoubleClickZoom();\n  this.map.disablePinchToZoom();\n  // 初始地点北京，缩放系数15\n  this.map.centerAndZoom(new this.BMap.Point(116.32715863448607, 39.990912172420714), 15);\n\n  // 创建标注物\n  this.marker = new this.BMap.Marker(new this.BMap.Point(0, 0));\n  this.map.addOverlay(this.marker);\n}\n```\n\n----------------------------------------\n\nTITLE: C++: Adding Two Integers in jsAdd Function\nDESCRIPTION: This C++ code defines a function `jsAdd` that takes two integer arguments from JavaScript, adds them, and returns the sum as an integer. It uses the LayaNative API to retrieve the arguments, perform the addition, and create a JavaScript value for the result. Requires the LayaNative SDK.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\njsvm_value jsAdd(jsvm_env env, jsvm_callback_info info) {\n    jsvm_status status;\n    size_t argc = 2;\n    jsvm_value args[2];\n    jsvm_value _this;\n    jsvm_get_cb_info(env, info, &argc, args, &_this, nullptr);\n\n    int int1,int2;\n    jsvm_get_value_int32(env, args[0], &int1);\n    jsvm_get_value_int32(env, args[1], &int2);\n\n    jsvm_value result;\n    jsvm_create_int32(env, int1+int2, &result);\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript Error Alerts in LayaNative\nDESCRIPTION: JavaScript code to disable the automatic display of error alerts when JavaScript exceptions occur in a LayaNative application.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Other_settings/readme.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nwindow.showAlertOnJsException(false);\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - UnLit Material Example\nDESCRIPTION: This snippet illustrates an Unlit material using a shader blueprint. It describes common attributes like NormalWS, AlphaTest, Color and Alpha. This is a fragment shader (fs) component, where lighting calculations are not applied. These values directly affect the final output of the fragment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Float Parameter Definition\nDESCRIPTION: Describes the definition of a float parameter within a Shader Blueprint. A float value is defined and used in the inspector panel. The float parameter is set with its default value.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Defining Laya.timer.clearAll Method (TypeScript)\nDESCRIPTION: TypeScript definition for the Laya.timer.clearAll method. This method removes all scheduled timers associated with a specific caller object.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/basics/common/Timer/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * 清理对象身上的所有定时器。\n     * @param\tcaller 执行域(this)。\n     */\n    clearAll(caller: any): void {\n        if (!caller) return;\n        for (var i: number = 0, n: number = this._handlers.length; i < n; i++) {\n            var handler: TimerHandler = this._handlers[i];\n            if (handler.caller === caller) {\n                handler.clear();\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Control Type for Component Properties in TypeScript\nDESCRIPTION: Shows how to override the default input control type for a string property to display it as a color picker control using the inspector parameter in the @property decorator.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/customComponent/decorators/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n//显示为颜色输入（如果类型是Laya.Color，则不需要这样定义，如果是字符串类型，则需要）\n@property({ type: String, inspector: \"color\"})\ncolor: string;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring CommandBuffer for Blur Effect\nDESCRIPTION: This code snippet illustrates how to create a CommandBuffer and implement a blurry glass effect using multiple rendering passes. It creates render textures, applies a blur shader, and uses screen quad blitting to achieve the effect. Dependencies: Requires shader named \"blurEffect\" and the `RenderTexture`, `Viewport`, `Shader3D`, `ShaderData`, `Vector4`, `FilterMode`, and `CameraEventFlags` classes from the LayaAir engine. Output: Creates a blurry image for the transparent objects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/CommandBuffer/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateCommandBuffer(camera:Camera){\n    //当需要在渲染透明物体之前拿到摄像机渲染结果，所以调用下面的属性true\n    camera.enableBuiltInRenderTexture = true;\n    //创建CommandBuffer\n    var buf:CommandBuffer = new CommandBuffer();\n    //创建需要模糊使用的屏幕RenderTexture\n    var viewPort:Viewport = camera.viewport;\n     //创建新的RenderTexture\n    var renderTexture = RenderTexture.createFromPool(viewPort.width,viewPort.height,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    this.texture = renderTexture; \n    //将当前渲染的结果拷贝到创建好的RenderTexture\nbuf.blitScreenTriangle(null,renderTexture);\n    //获得模糊shader\n    var shader:Shader3D = Shader3D.find(\"blurEffect\");\n    //设置模糊参数\nvar shaderValue:ShaderData = new ShaderData();\n    //down Sample level设置降采样等级\n    var downSampleFactor:number = 4;\n    var downSampleWidth:number = viewPort.width/downSampleFactor;\n    var downSampleheigh:number = viewPort.height/downSampleFactor;\n    //设置模糊材质参数\n    var texSize:Vector4 = new Vector4(1.0/viewPort.width,1.0/viewPort.height,viewPort.width,downSampleheigh);\n    shaderValue.setNumber(BlurEffect.SHADERVALUE_DOWNSAMPLEVALUE,1);\n    shaderValue.setVector(BlurEffect.SHADERVALUE_TEXELSIZE,texSize);\n    //创建降采样RenderTexture1\n    var downRenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    //降采样命令流\n    buf.blitScreenTriangle(renderTexture,downRenderTexture,null,shader,shaderValue,0);\n    //创建降采样RenderTexture2\n    var blurTexture:RenderTexture = RenderTexture.createFromPool(downSampleWidth,downSampleheigh,RenderTextureFormat.R8G8B8,RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\n    blurTexture.filterMode = FilterMode.Bilinear;\n    //Horizontal blur\n    buf.blitScreenTriangle(downRenderTexture,blurTexture,null,shader,shaderValue,1);\n    //vertical blur\n    buf.blitScreenTriangle(blurTexture,downRenderTexture,null,shader,shaderValue,2);\n    //Horizontal blur\n    buf.blitScreenTriangle(downRenderTexture,blurTexture,null,shader,shaderValue,1);\n    //vertical blur\n    buf.blitScreenTriangle(blurTexture,downRenderTexture,null,shader,shaderValue,2);\n    //至此  模糊图片已经生成在downRenderTexture中\n    //设置全局uniform变量 \n    var globalUniformNameID:number = Shader3D.propertyNameToID(\"u_screenTexture\");\n    //将全局变量u_screenTexture赋值为模糊图片\n    buf.setGlobalTexture(globalUniformNameID,downRenderTexture);\n    //将commandBuffer加入渲染流程\n    camera.addCommandBuffer(CameraEventFlags.BeforeTransparent,buf);\n    //回收用过的RenderTexture\n    RenderTexture.recoverToPool(downRenderTexture);\n    RenderTexture.recoverToPool(blurTexture);\n    return;\n  }\n```\n\n----------------------------------------\n\nTITLE: Color Configuration Example - JSON\nDESCRIPTION: This JSON snippet provides an example of how to configure color properties for shader export. `uName` specifies the Unity property name, `layaName` specifies the corresponding LayaAir property name, and `hdrName` specifies the HDR color intensity property if it exists in Unity.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Unity/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uName\": unity 属性名,\n    \"layaName\": layaair 属性名,\n    \"hdrName\": unity 中是hdr颜色则laya会生成这个参数，否则不需要。\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Defining an Interface for Native Functions\nDESCRIPTION: This TypeScript code defines an interface `ITestLib` which declares the structure of the native functions accessible through the DLL, specifying their input and output types. This provides type safety for calls to the native code.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ITestLib {\n    nativeAdd(a: number, b: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Local DCC Cache\nDESCRIPTION: Simple code example showing how to clean the local DCC cache.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet dcc = new DCCClient(null);\nawait dcc.clean();\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous and Asynchronous Messages in Android Using Java\nDESCRIPTION: Defines native message handlers in Android Java located in `HandleMessageUtils.java`. The synchronous method `handleSyncMessage` returns a string response based on the event name. The asynchronous method accepts a callback interface `HandleMessageCallback` to deliver the result. Both handlers log received parameters for debugging.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/platform_communication/readme.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    public static String handleSyncMessage(String eventName, String data) {\n        Log.d(LOG_TAG, eventName +\" \" + data);\n        if (eventName.equals(\"syncMessage\")) {\n            return \"sync message from platform\";\n        }\n        return \"default sync result\";\n    }\n    public static void handleAsyncMessage(String eventName, String data, HandleMessageCallback cb) {\n        Log.d(LOG_TAG, eventName +\" \" + data);\n        if (eventName.equals(\"asyncMessage\")) {\n            cb.callback(\"async message from platform\");\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Controlling OpenDataContextView Through Script in LayaAir\nDESCRIPTION: This TypeScript example demonstrates how to control an existing OpenDataContextView component by referencing it in a custom script. It positions and sizes the component after all nodes and components have been created.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/uiComponent/OpenDataContextView/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n    //declare owner : Laya.Sprite3D;\n\n    @property({ type: Laya.OpenDataContextView })\n    public opendata: Laya.OpenDataContextView;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，此方法只执行一次\n     */\n    onAwake(): void {\n        this.opendata.pos(100,100);\n        this.opendata.size(500,500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Math Nodes\nDESCRIPTION: This section introduces the math-related nodes in a Shader Blueprint. It includes nodes for operations add/minus/multiply/divide, and trigonometric functions like sin/cos/tan, and also clamp, mix, max, step, smoothstep, pow, dot and cross.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Registering C++ Native Functions for JavaScript Access in LayaAir Extension - C\nDESCRIPTION: Exports C++ functions to JavaScript through the LayaExtInit method. Each function is registered as a named property ('nativeAdd', 'nativeStr', 'nativeBin') that becomes accessible to JS code. Requires LayaAir extension API; dependencies are auto-handled by the extension toolchain. No specific inputs/outputs—this is an initialization/registration routine called by the engine upon library load.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/Windows/extension/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nextern \"C\" {\n    LAYAEXTAPI void LayaExtInit(jsvm_env env, jsvm_value exp) {\n        //注册新的函数\n        jsvm_value fn;\n        jsvm_create_function(env, \"testAdd\", SIZE_MAX, jsAdd, nullptr, &fn);\n        jsvm_set_named_property(env, exp, \"nativeAdd\", fn);\n\n        jsvm_value fn1;\n        jsvm_create_function(env, \"testStr\", SIZE_MAX, jsStr, nullptr, &fn1);\n        jsvm_set_named_property(env, exp, \"nativeStr\", fn1);\n\n        jsvm_value fn2;\n        jsvm_create_function(env, \"testBin\", SIZE_MAX, jsBin, nullptr, &fn2);\n        jsvm_set_named_property(env, exp, \"nativeBin\", fn2);\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Globally via npm\nDESCRIPTION: This command installs the TypeScript compiler (tsc) globally on the system using npm. The `-g` flag signifies a global installation, making the `tsc` command accessible from any directory in the command line. Requires Node.js and npm to be pre-installed and network connectivity.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/developmentEnvironment/download/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g typescript\n```\n\n----------------------------------------\n\nTITLE: Handling Geolocation Errors in TypeScript\nDESCRIPTION: This TypeScript snippet handles errors that may occur during geolocation. It checks the error code and displays an alert message to the user indicating the type of error (e.g., permission denied, position unavailable, or timeout).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate onError(e: any): void {\n        var errType: string;\n        if (e.code = Laya.Geolocation.PERMISSION_DENIED)\n            errType = \"Permission Denied\";\n        else if (e.code == Laya.Geolocation.POSITION_UNAVAILABLE)\n            errType = \"Position Unavailable\";\n        else if (e.code == Laya.Geolocation.TIMEOUT)\n            errType = \"Time Out\";\n        alert('ERROR(' + errType + '): ' + e.message);\n    }\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for createapp Command (Shell)\nDESCRIPTION: Uses the `--help` flag with the `layanative3 createapp` command to display detailed usage instructions, available parameters, and their descriptions for creating native projects.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/build_Cmd/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ layanative3 createapp --help\n```\n\n----------------------------------------\n\nTITLE: Network Type Constants in Java\nDESCRIPTION: Defines integer constants representing different network types. These constants are returned by the network status listener function and the network type query. The constants map to values like no network, WiFi, 2G, 3G, and 4G.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/network/readme.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nNET_NO = 0;\nNET_WIFI = 1;\nNET_2G = 2;\nNET_3G = 3;\nNET_4G = 4;\nNET_YES = 5;\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Creating a Function\nDESCRIPTION: This snippet explains how to create a custom function in Shader Blueprints, by creating a 'Shader BluePrint Function' in the Project window using the context menu. This function can then be reused in other Blueprints.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Model Scale Factor Setting LayaAir3-IDE\nDESCRIPTION: Describes the 'scale Factor' setting, which is used to pre-process the model size according to the target scene's scale and handle the size ratio between different models to match design requirements.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_4\n\nLANGUAGE: other\nCODE:\n```\n模型缩放主要用于根据目标场景尺度来预处理模型大小，通过模型的整体缩放来处理不同模型之间的大小比例，使其符合设计需求。\n```\n\n----------------------------------------\n\nTITLE: Updating DCC Resources Using ZIP Files\nDESCRIPTION: Code example showing how to download and apply a ZIP update to DCC resources.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function downloadBigZip(url:string):Promise<string|null>{\n    let cachePath = conch.getCachePath();\n    let localfile =  cachePath+url.substring(url.lastIndexOf('/'));\n\n    return new Promise((resolve,reject)=>{\n            downloadBigFile(url, localfile, (total, now, speed) => {\n                console.log(`downloading:${Math.floor((now / total) * 100)}`)\n                return false;0\n            }, (curlret, httpret) => {\n                if (curlret != 0 || httpret < 200 || httpret >= 300) {\n                    resolve(null);\n                }\n                else {\n                    resolve(localfile);\n                }\n            }, 10, 100000000);        \n        }\n    );\n}\n\nlet zipfile = await downloadBigZip('http://10.10.20.26:8899/update/dccout1.zip')\nlet client = new DCCClient('http://101.10.20.26:6677/dccout2');\nlet iniok = await client.init(dccurl+'/head.json', null);\n\nawait client.updateByZip(zipfile, Zip_Native,null);\n```\n\n----------------------------------------\n\nTITLE: Exporting Unity Particle System Renderer Parameters - Unity Export Plugin - C#\nDESCRIPTION: This C# snippet, from the Unity export plugin, exports particle rendering parameters from a Unity ParticleSystemRenderer into a JSON structure for LayaAir-IDE compatibility. It collects rendering modes, sorting, alignment, material, velocity scaling, length scaling, mesh data, and the pivot vector, relying on helper methods and resource mapping for material and mesh resolution. Required dependencies are a ParticleSystemRenderer object, JsonUtils utility, and a resource map (ResoureMap) for material and mesh lookups. The function outputs a JSONObject, formatted for use by LayaAir's rendering system, with all significant rendering attributes from the Unity side.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/enterprise/cpuParticle/unityCPUPartical/readme.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static JSONObject GetParticleSystemRneder(ParticleSystemRenderer renderer, bool isOverride,ResoureMap map)\n{\n    JSONObject compData = JsonUtils.SetComponentsType(new JSONObject(JSONObject.Type.OBJECT), \"ParticleSystemRenderer\", isOverride);\n    compData.AddField(\"renderMode\", (int)(object)renderer.renderMode);\n    compData.AddField(\"sortMode\", (int)(object)renderer.sortMode);\n    compData.AddField(\"alignment\", (int)(object)renderer.alignment);\n    compData.AddField(\"material\", map.GetMaterialData(renderer.sharedMaterial));\n    compData.AddField(\"cameraVelocityScale\", renderer.cameraVelocityScale);\n    compData.AddField(\"velocityScale\", renderer.velocityScale);\n    compData.AddField(\"lengthScale\", renderer.lengthScale);\n    if (renderer.mesh)\n    {\n        compData.AddField(\"sharedMesh\", map.GetMeshData(renderer.mesh, renderer));\n    }\n    compData.AddField(\"pivot\", JsonUtils.GetVector3Object(renderer.pivot));\n    return compData;\n}\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Adding Input Parameters\nDESCRIPTION: This describes how to add input parameters to the function, using the ShaderFunction options in the context menu. Inputs are critical to passing data and receiving it for the functions to perform their actions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Generating Differential ZIP Updates Between Versions\nDESCRIPTION: Code example showing how to generate a ZIP file containing differences between two DCC directory versions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet zipfile = await LayaDCCTools.genZipByComparePath(老的dcc目录, 新的dcc目录, 输出目录);\n//zipfile是返回的输出的zip文件路径\n```\n\n----------------------------------------\n\nTITLE: VIVO Subpackage Configuration in manifest.json\nDESCRIPTION: This code snippet demonstrates the structure of the manifest.json file after configuring subpackages for a VIVO mini game using LayaAir.  It shows the naming conventions and file size restrictions applicable to subpackages.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/miniGame/vivo/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n<分包大小限制20M：主包限制4m + 分包大小16M>\ncom.application.demo.rpk整体压缩包(包名+.rpk) \n------------- com.application.demo.rpk 原整包(包名+.rpk) (兼容老版本引擎的原整包=分包主包+分包A+分包B)\n------------- main.rpk 分包主包(main+.rpk) （4M）\n------------- pkgA.rpk pkgA分包(子包名+.rpk) (A+B 16M)\n------------- pkgB.rpk pkgB分包(子包名+.rpk)\n```\n\n----------------------------------------\n\nTITLE: Defining Baidu Map Members in TypeScript\nDESCRIPTION: This TypeScript snippet declares the member variables required for using the Baidu Maps API. It includes references to the map instance, marker, Baidu Maps namespace, coordinate converter, and the HTML div element that will contain the map.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/basics/common/device/baiduMap/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 百度地图\nprivate map: any;// 地图引用\nprivate marker: any;// 地图标注物\nprivate BMap: any = Laya.Browser.window.BMap;// 百度地图命名空间\nprivate convertor: any;// 坐标转换接口\nprivate mapDiv: any;// 包含百度地图的div容器\n```\n\n----------------------------------------\n\nTITLE: Importing Model Built-in Data LayaAir3-IDE\nDESCRIPTION: Explains how to import built-in data (visibility, camera, light) of a model if they've been configured during the model creation. The IDE defaults not to import these settings. If the developer requires using these settings, it can be enabled through checking the corresponding options and clicking 'Apply'.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_5\n\nLANGUAGE: other\nCODE:\n```\n如果美术在模型制作的时候，就有可见性(Visibility)、摄像机(Camera)、光源(Light)属性设置，LayaAir3-IDE默认是不导入的，建议在LayaAir-IDE的场景中进行添加与设置。\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Expansion File Paths in RuntimeProxy.java\nDESCRIPTION: Code snippet showing how to modify the RuntimeProxy.java file to specify the correct zip file paths for LayaNative's file extension mechanism. LayaNative supports up to two zip files, with the main path set in getExpansionMainPath and an optional second zip path in getExpansionPatchPath.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/apk_expansion/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    public String getExpansionMainPath()\n    {\n        return \"/storage/emulated/0/Android/test/com.layabox.game/test.zip\";\n    }\n    public String getExpansionPatchPath()\n    {\n        return \"\";\n    } \n```\n\n----------------------------------------\n\nTITLE: Defining UI-Only Properties with Styles (LayaAir GLSL)\nDESCRIPTION: Shows how to use the `styles` block to define properties purely for the LayaAir IDE inspector that don't map directly to uniforms or preprocessor defines. It also demonstrates hiding shader variables (`RAIN`) from the inspector using `inspector: null` and creating a custom UI control (`weather` RadioGroup) linked to shader defines (`RAIN`, `SNOWY`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/customShader/readme.md#_snippet_10\n\nLANGUAGE: GLSL\nCODE:\n```\ndefines: {\n    RAIN : { type: Bool, default: true },\n    SNOWY : { type: Bool, default: false }\n},\n\nstyles: {\n    RAIN : { caption: \"下雨\", inspector : null }, //inspector为null，不显示在属性面板\n    SNOWY : { caption: \"下雪\"},\n\n    // 定义不属于uniform和define的属性\n    weather : { caption:\"天气\", inspector: RadioGroup, options: { members: [RAIN, SNOWY] }}\n},\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Automatic Return Type\nDESCRIPTION: This explains how a Shader function automatically infers its return type based on the data type of the Default Output Result node. Functions are easier to maintain and can return many different data types.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Initializing DCC Client and Integrating with Laya Engine\nDESCRIPTION: Code example showing how to initialize a DCC client with a root file and integrate it with the Laya Engine's downloading system.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//创建DCC客户端，参数是DCC服务器地址\nlet dcc = new DCCClient('http://localhost:7788/' );\n//设置这个地址下的资源加载走DCC模式\ndcc.pathMapToDCC= 'http://localhost:8899/';\n//通过DCC的根文件初始化dcc客户端\nlet initok = await dcc.init('http://localhost:7788/version.3.0.0.json',null);\n//把dcc功能插入laya引擎\ndcc.injectToLaya();\n```\n\n----------------------------------------\n\nTITLE: Importing Models Assets LayaAir3-IDE\nDESCRIPTION: Explains the process of importing models of different formats into the LayaAir3-IDE, specifically focusing on how the engine handles the conversion and integration of models into the project. This also covers the basic usage of models by dragging and dropping them into the assets directory.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_0\n\nLANGUAGE: other\nCODE:\n```\nLayaAir3-IDE支持**obj、fbx、gltf、glb**这几种后缀的模型格式导入。\n\n> LayaAirIDE也支持`“LayaAir-Unity资源导出插件”导出的模型与网格`的导入(.lh与.lm后缀)。本篇主要是指外部模型文件，如果有lm网格配置的需求，本篇文档也适用。\n```\n\n----------------------------------------\n\nTITLE: Defining LogType Enum in LayaNative\nDESCRIPTION: Definition of the LogType enum in LayaNative that categorizes logs into five different types: Debug, Info, Warn, Error, and Fatal.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/Other_settings/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nenum class LogType\n{\n    Debug,\n    Info,\n    Warn,\n    Error,\n    Fatal,\n};\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Quick Operations\nDESCRIPTION: This section lists the shortcut keys available for quickly creating specific nodes: float (1), vector2 (2), vector3 (3), vector4 (4), if (i), boolean (b), and sampler2D (t).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Float Configuration Example - JSON\nDESCRIPTION: This JSON snippet provides an example of how to configure float properties for shader export. `uName` specifies the Unity property name, and `layaName` specifies the corresponding LayaAir property name.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/3D/advanced/Unity/readme.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uName\": unity 属性名,\n    \"layaName\": layaair 属性名,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Shader File Start/End\nDESCRIPTION: This code defines the basic structure of a shader file, outlining the start and end points for shader definitions. It shows the fundamental syntax needed for declaring a shader and encapsulating its properties, including the rendering pass and rendering states.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/3D/advanced/customShader/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nShader3D Start\n{\n\t//此处填写Shader渲染pass、渲染状态、材质参数等属性\n}\nShader3D End\n```\n\n----------------------------------------\n\nTITLE: Creating a LayaNative Project with Specific SDK Version (Shell)\nDESCRIPTION: Creates a native project using the `layanative3 createapp` command. It specifies the resource folder (`-f SnowBallH5`), sets the creation type to bundle resources (`-t 1`), names the native project (`-n SnowBallNative`), provides the game URL (`-u`), and explicitly uses SDK version `v2.0` (`-v v2.0`).\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/build_Cmd/readme.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ layanative3 createapp -f SnowBallH5 -t 1 -n SnowBallNative -u http://10.10.20.102:8899/index.js -v v2.0\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js WebSocket Server with Node Command\nDESCRIPTION: Executes the Node.js server-side script to start the WebSocket server. This must be run in the directory containing the `server.js` script and `.proto` file for proper loading and communication.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/libs/Protobuf/readme.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Modifying Exported Resource Content\nDESCRIPTION: This code shows how to override the content of an exported resource using `exportInfo.contents`.  It demonstrates how to replace the original file content with custom data.  The `type` parameter specifies the content type (text, json, etc.). Dependencies: LayaAir engine and its editor environment.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.exportInfo.contents[0] = { type: \"text\", data: \"this is demo text\" };\n```\n\n----------------------------------------\n\nTITLE: Generating White Noise with Web Audio API in JavaScript\nDESCRIPTION: Demonstrates creating an AudioContext, generating a 2-second stereo buffer filled with white noise (random values between -1.0 and 1.0), and playing it back using an AudioBufferSourceNode upon a window click event. This example uses the browser's native Web Audio API.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/2D/dom/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n// Stereo\nvar channels = 2;\n// Create an empty two-second stereo buffer at the\n// sample rate of the AudioContext\nvar frameCount = audioCtx.sampleRate * 2.0;\nvar myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nwindow.onclick = function() {\n    // Fill the buffer with white noise;\n    //just random values between -1.0 and 1.0\n    for (var channel = 0; channel < channels; channel++) {\n        // This gives us the actual ArrayBuffer that contains the data\n        var nowBuffering = myArrayBuffer.getChannelData(channel);\n        for (var i = 0; i < frameCount; i++) {\n            // Math.random() is in [0; 1.0]\n            // audio needs to be in [-1.0; 1.0]\n            nowBuffering[i] = Math.random() * 2 - 1;\n        }\n    }\n    // Get an AudioBufferSourceNode.\n    // This is the AudioNode to use when we want to play an AudioBuffer\n    var source = audioCtx.createBufferSource();\n    // set the buffer in the AudioBufferSourceNode\n    source.buffer = myArrayBuffer;\n    // connect the AudioBufferSourceNode to the\n    // destination so we can hear the sound\n    source.connect(audioCtx.destination);\n    // start the source playing\n    source.start();\n}\n```\n\n----------------------------------------\n\nTITLE: UI Editor Zoom Control Shortcuts in LayaAir\nDESCRIPTION: Table of keyboard shortcuts for zooming functionality in the LayaAir UI editor, including options to zoom in, zoom out, reset to 100%, and free zooming with mouse wheel.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/basic/readme.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 按键              | 功能       |\n| ----------------- | ---------- |\n| ctrl  +  +        | 放大       |\n| ctrl  +  -        | 缩小       |\n| ctrl  +  1        | 恢复到100% |\n| ctrl  +  鼠标滚轮 | 自由缩放   |\n```\n\n----------------------------------------\n\nTITLE: C++: Exporting Native Functions in LayaExtInit\nDESCRIPTION: This C++ code defines the `LayaExtInit` function, which serves as the entry point for exporting native functions to JavaScript.  It registers the functions `jsAdd`, `jsStr`, and `jsBin` making them accessible from JavaScript code in the LayaAir IDE.  Requires the LayaNative SDK.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Windows/extension/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nextern \"C\" {\n    LAYAEXTAPI void LayaExtInit(jsvm_env env, jsvm_value exp) {\n        //注册新的函数\n        jsvm_value fn;\n        jsvm_create_function(env, \"testAdd\", SIZE_MAX, jsAdd, nullptr, &fn);\n        jsvm_set_named_property(env, exp, \"nativeAdd\", fn);\n\n        jsvm_value fn1;\n        jsvm_create_function(env, \"testStr\", SIZE_MAX, jsStr, nullptr, &fn1);\n        jsvm_set_named_property(env, exp, \"nativeStr\", fn1);\n\n        jsvm_value fn2;\n        jsvm_create_function(env, \"testBin\", SIZE_MAX, jsBin, nullptr, &fn2);\n        jsvm_set_named_property(env, exp, \"nativeBin\", fn2);\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running pbjs command to generate JavaScript from .proto file\nDESCRIPTION: Shell command to execute the pbjs npm script that generates JavaScript code from the Protocol Buffer definition.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run pbjs\n```\n\n----------------------------------------\n\nTITLE: Launching LayaAirIDE Project from Command Line - Shell\nDESCRIPTION: This command opens a project in LayaAirIDE directly from the terminal by specifying the project path via the --project flag. The project path should be the absolute path to your LayaAirIDE project folder. Command execution requires LayaAirIDE installed and available in your PATH environment variable.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/commandLine/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n> LayaAirIDE --project=/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Installing LayaDCC2 CLI (Bash)\nDESCRIPTION: Installs the `layadcc2` command-line tool globally using npm. Requires Node.js and npm to be installed. Execute this command in a terminal with administrator privileges.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/native/LayaDcc_Tool/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g layadcc2\n```\n\n----------------------------------------\n\nTITLE: Restoring Original Resources from DCC Format\nDESCRIPTION: Command to restore the original resource structure from a DCC directory.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/native/LayaDcc_Tool/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlayadcc2 checkout ./dcc1\n```\n\n----------------------------------------\n\nTITLE: Executing Eval in Scene Process from UI Process - TypeScript\nDESCRIPTION: Illustrates using `Editor.scene.runScript` to execute arbitrary JavaScript code via `window.eval` within the Scene process, useful for simple operations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/layapackage/plug-in/readme.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet str = await Editor.scene.runScript(\"window.eval\", `\n    (function() {\n        //do something\n        return \"hello\";\n    }())\n`);\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js WebSocket server\nDESCRIPTION: Command to run the Node.js server that handles WebSocket connections and Protocol Buffer messages for testing with the LayaAir client.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/libs/Protobuf/readme.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Naming Match Rules Setting LayaAir3-IDE\nDESCRIPTION: Explains 'Naming match rules' including 'material name' and 'model name + material name' and the functions of each one.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_19\n\nLANGUAGE: other\nCODE:\n```\n| 匹配规则            | 作用                                                         |\n| ------------------- | ------------------------------------------------------------ |\n| 材质名称            | 材质名称仅由**材质的文件名**组成，例如：body.lmat            |\n| 模型名称 + 材质名称 | 材质名称的组成规则为：模型文件名称-材质文件名称，<br />例如\"character\" + \"-\" + \"body.lmat\" → \"character-body.lmat\" |\n```\n\n----------------------------------------\n\nTITLE: Executing Arbitrary Scripts in Scene Process Using Eval via UI Process in LayaAir3-IDE Using TypeScript\nDESCRIPTION: Provides an example of running arbitrary JavaScript code strings on the Scene process by invoking 'window.eval' through Editor.scene.runScript from the UI process. This approach supports simple, dynamic scripting needs but should be used cautiously due to security and performance considerations.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/plug-in/readme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet str = await Editor.scene.runScript(\"window.eval\", `\n    (function() {\n        //do something\n        return \"hello\";\n    }())\n`);\n```\n\n----------------------------------------\n\nTITLE: Initializing Performance Analysis Plugin in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the LayaAir performance analysis plugin in a TypeScript project. It includes registering a class, defining a project ID property, and initializing the LayaPerf instance within the `onEnable` lifecycle method. The `projectId` should match the ID assigned to the project in the backend platform.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/layapackage/enterprise/performanceAnalysis/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { regClass, property } = Laya;\n\n@regClass()\nexport class NewScript extends Laya.Script {\n\n    @property(Number)\n    public projectId: number = 23;\n\n    private perfMain: LayaPerf = new LayaPerf();\n\n    onEnable(): void {\n        this.perfMain.init(this.projectId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Unit Conversion Setting LayaAir3-IDE\nDESCRIPTION: Explains the 'convert Units' setting, specifically the transformation from the default unit, meter, to centimeters, or back. It describes how the engine handles scaling to preserve the visual size of the model during unit conversions, emphasizing the 'Model size unchanged' option.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_3\n\nLANGUAGE: other\nCODE:\n```\n例如，**将单位改为厘米**，默认会有一个 **已勾选** 的关联选项 `模型尺寸不变`(normalizeMesh)，如图2-1所示。勾选的作用是为了保持当前模型的视觉大小，仅仅变更模型的单位。\n\n![](img/2-1.png)\n\n（图2-1）\n```\n\n----------------------------------------\n\nTITLE: Shader Blueprint - Camera Nodes\nDESCRIPTION: This section describes the Camera nodes in a Shader Blueprint. It details the viewDirection, cameraPosition, cameraDirection, cameraUp, cameraNear, and cameraFar nodes which access camera information in world space.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/ShaderBlueprint/ShaderBlueprint/readme.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: VIVO Mini Game Package Structure Definition\nDESCRIPTION: This JSON snippet defines the structure and size limitations for sub-packages in a VIVO mini game. It outlines the main package and its sub-packages (pkgA and pkgB), including their size constraints.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/vivo/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"<分包大小限制20M：主包限制4m + 分包大小16M>\\ncom.application.demo.rpk整体压缩包(包名+.rpk) \\n------------- com.application.demo.rpk 原整包(包名+.rpk) (兼容老版本引擎的原整包=分包主包+分包A+分包B)\\n------------- main.rpk 分包主包(main+.rpk) （4M）\\n------------- pkgA.rpk pkgA分包(子包名+.rpk) (A+B 16M)\\n------------- pkgB.rpk pkgB分包(子包名+.rpk)\"\n```\n\n----------------------------------------\n\nTITLE: UI Editor Keyboard Shortcuts for Alignment in LayaAir\nDESCRIPTION: Table of keyboard shortcuts for different alignment options in the LayaAir UI editor, including left, center, right, top, middle, and bottom alignment commands.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/IDE/uiEditor/basic/readme.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 名称         | 功能                                                   | 快捷键     |\n| ------------ | ------------------------------------------------------ | ---------- |\n| 左对齐       | 将所选中的控件以水平方向平移到该控件父节点的最左边。   | Ctrl+Alt+1 |\n| 左右居中对齐 | 将所选中的控件以水平方向平移到该控件父节点的水平中心。 | Ctrl+Alt+2 |\n| 右对齐       | 将所选中的控件以水平方向平移到该控件父节点的最右边。   | Ctrl+Alt+3 |\n| 上对齐       | 将所选中的控件以垂直方向平移到该控件父节点的最上方。   | Ctrl+Alt+4 |\n| 上下居中对齐 | 将所选中的控件以垂直方向平移到该控件父节点的垂直中心。 | Ctrl+Alt+5 |\n| 下对齐       | 将所选中的控件以垂直方向平移到该控件父节点的最下方。   | Ctrl+Alt+6 |\n```\n\n----------------------------------------\n\nTITLE: Mesh Properties Description LayaAir3-IDE\nDESCRIPTION: Provides an overview of commonly understood mesh properties, including dynamic read/write, mesh compression, standardized weights, and import morph target, and includes a table summarizing their functions.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/IDE/assets/model/readme.md#_snippet_7\n\nLANGUAGE: other\nCODE:\n```\n| 中文属性名   | 英文属性名           | 属性说明                                                     |\n| ------------ | -------------------- | ------------------------------------------------------------ |\n| 动态读写     | read Write           | 当勾选动态读写后，允许开发者在运行时动态访问或修改模型的数据（比如捏脸时，需要更改的mesh顶点信息就属于修改模型数据）。<br />需要注意的是，启用`动态读写`会增加内存的使用。<br />所以，如果你的模型并不需要在运行时进行修改，那么请不要打开这个选项以节省内存。 |\n| 网格压缩     | mesh Compress        | 勾选后可对网格数据进行压缩，用以减少网格文件大小。<br />需要注意的是，压缩后的网格会存在IDE的临时目录，原始模型不会变，<br />只能在发布之后才能看到体积减少的变化。 |\n| 标准化权重   | standardized weights | 通过对权重校正调整，将总权重调整为1，<br />用于解决模型超过一定范围可能会出现扭曲等问题，建议保持勾选。<br />如果能确保模型在应用时不会出现问题，也可以取消勾选，取消后会保持模型的原数据，获得模型原始效果。 |\n| 导入变形目标 | import Morph Target  | 导入模型中的变形目标morph target（也叫混合形状Blend Shape）数据。 |\n```\n\n----------------------------------------\n\nTITLE: Forwarding Port for Debugging (HarmonyOS)\nDESCRIPTION: This snippet forwards TCP port 5959 from the PC to the HarmonyOS NEXT device using the `hdc fport` command. This allows Chrome on the PC to connect to the debugging server running on the device.  Success is indicated by the output \"Forwardport result:OK\".\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/released/Harmony/debug/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhdc fport tcp:5959 tcp:5959\n```\n\n----------------------------------------\n\nTITLE: Chrome Debug URL\nDESCRIPTION: The URL to connect to Chrome DevTools for debugging a VIVO mini game running on a connected device.  Replace {IP} with the IP address of the mobile device.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/vivo/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nchrome-devtools://devtools/bundled/inspector.html?v8only=true&ws={IP}:5086/00010002-0003-4004-8005-000600070008\n```\n\n----------------------------------------\n\nTITLE: Installing Alipay Mini Game Dev Tool (minidev) via npm\nDESCRIPTION: This command installs the Alipay Mini Game development tool globally using npm.  It is required for previewing, debugging, and uploading Alipay Mini Games.  The specified version (1.8.10) can be adjusted as needed.\nSOURCE: https://github.com/layabox/layaair-doc-zh/blob/LayaAir3.3/_book/released/miniGame/alipaygame/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g minidev@1.8.10\n```"
  }
]