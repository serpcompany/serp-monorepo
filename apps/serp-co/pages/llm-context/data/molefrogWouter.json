[
  {
    "owner": "molefrog",
    "repo": "wouter",
    "content": "TITLE: Basic Routing Example using Wouter in React\nDESCRIPTION: This code demonstrates basic routing functionality using wouter components such as Link, Route, and Switch. It defines a simple app with navigation links, route definitions, and a fallback 404 route. It shows how to define routes with parameters.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link, Route, Switch } from \"wouter\";\n\nconst App = () => (\n  <>\n    <Link href=\"/users/1\">Profile</Link>\n\n    <Route path=\"/about\">About Us</Route>\n\n    {/* \n      Routes below are matched exclusively -\n      the first matched route gets rendered\n    */}\n    <Switch>\n      <Route path=\"/inbox\" component={InboxPage} />\n\n      <Route path=\"/users/:name\">\n        {(params) => <>Hello, {params.name}!</>}\n      </Route>\n\n      {/* Default route in a switch */}\n      <Route>404: No such page!</Route>\n    </Switch>\n  </>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using useParams Hook in Wouter\nDESCRIPTION: This example demonstrates how to use the `useParams` hook to access route parameters within a component rendered by a `Route`.  It retrieves parameters from the closest parent route, avoiding prop drilling.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Route, useParams } from \"wouter\";\n\nconst User = () => {\n  const params = useParams();\n\n  params.id; // \"1\"\n\n  // alternatively, use the index to access the prop\n  params[0]; // \"1\"\n};\n\n<Route path=\"/user/:id\" component={User}> </Route>\n```\n\n----------------------------------------\n\nTITLE: Using useLocation Hook in Wouter\nDESCRIPTION: This snippet illustrates how to use the `useLocation` hook to get the current location and a function to navigate to different pages. It's analogous to `useState`, triggering re-renders upon location changes.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLocation } from \"wouter\";\n\nconst CurrentLocation = () => {\n  const [location, navigate] = useLocation();\n\n  return (\n    <div>\n      {`The current page is: ${location}`}\n      <a onClick={() => navigate(\"/somewhere\")}>Click to update</a>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Link Component Example\nDESCRIPTION: Illustrates the usage of the `Link` component in wouter to create navigation links.  It shows how to use `href` and `to` props for specifying the target path, standard `a` props for styling, and location hook options for customizing navigation behavior.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from \"wouter\"\n\n<Link href=\"/\">Home</Link>\n\n// `to` is an alias for `href`\n<Link to=\"/\">Home</Link>\n\n// all standard `a` props are proxied\n<Link href=\"/\" className=\"link\" aria-label=\"Go to homepage\">Home</Link>\n\n// all location hook options are supported\n<Link href=\"/\" replace state={{ animate: true }} />\n```\n\n----------------------------------------\n\nTITLE: Redirect Component Example\nDESCRIPTION: Illustrates the usage of the `Redirect` component to perform a redirect to a specified path. It shows how to use the `to` prop for setting the target path and how to pass additional navigation parameters such as state and `replace`.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Redirect to=\"/\" />\n\n// arbitrary state object\n<Redirect to=\"/\" state={{ modal: true }} />\n\n// use `replaceState`\n<Redirect to=\"/\" replace />\n```\n\n----------------------------------------\n\nTITLE: Route Component Usage Examples\nDESCRIPTION: This snippet demonstrates different ways to use the `Route` component in Wouter to conditionally render content based on the current path. It showcases simple form, render-prop style, and the `component` prop.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Route } from \"wouter\";\n\n// simple form\n<Route path=\"/home\"><Home /></Route>\n\n// render-prop style\n<Route path=\"/users/:id\">\n  {params => <UserPage id={params.id} />}\n</Route>\n\n// the `params` prop will be passed down to <Orders />\n<Route path=\"/orders/:status\" component={Orders} />\n```\n\n----------------------------------------\n\nTITLE: Using useRoute Hook in Wouter\nDESCRIPTION: This example demonstrates how to use the `useRoute` hook to check if the current location matches a specified route pattern and extract parameters. It shows conditional rendering based on the route match and access to route parameters.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRoute } from \"wouter\";\n\nconst Users = () => {\n  // `match` is a boolean\n  const [match, params] = useRoute(\"/users/:name\");\n\n  if (match) {\n    return <>Hello, {params.name}!</>;\n  } else {\n    return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Switch Component Example\nDESCRIPTION: Demonstrates how to use the `Switch` component to implement exclusive routing, ensuring that only the first matching route is rendered.  It also illustrates how to create a default route using a `Route` with an empty path.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Route, Switch } from \"wouter\";\n\n<Switch>\n  <Route path=\"/orders/all\" component={AllOrders} />\n  <Route path=\"/orders/:status\" component={Orders} />\n\n  {/* \n     in wouter, any Route with empty path is considered always active. \n     This can be used to achieve \"default\" route behaviour within Switch. \n     Note: the order matters! See examples below.\n  */}\n  <Route>This is rendered when nothing above has matched</Route>\n</Switch>;\n```\n\n----------------------------------------\n\nTITLE: Using useSearchParams Hook in Wouter\nDESCRIPTION: This code shows how to use the `useSearchParams` hook to get and set search parameters using a `URLSearchParams` object.  It demonstrates how to extract, modify, and override search parameters, and how to use the `replace` and `state` options to control history updates.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSearchParams } from 'wouter';\n\nconst [searchParams, setSearchParams] = useSearchParams();\n\n// extract a specific search parameter\nconst id = searchParams.get('id');\n\n// modify a specific search parameter\nsetSearchParams((prev) => {\n  prev.set('tab', 'settings');\n});\n\n// override all search parameters\nsetSearchParams({\n  id: 1234,\n  tab: 'settings',\n});\n\n// by default, setSearchParams() will push a new history entry\n// to avoid this, set `replace` option to `true`\nsetSearchParams(\n  (prev) => {\n    prev.set('order', 'desc');\n  },\n  {\n    replace: true,\n  },\n);\n\n// you can also pass a history state in options\nsetSearchParams(\n  (prev) => {\n    prev.set('foo', 'bar');\n  },\n  {\n    state: 'hello',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Additional Navigation Parameters with useLocation\nDESCRIPTION: This example shows how to use additional navigation parameters with the `useLocation` hook, specifically the `replace` and `state` options.  The `replace` option modifies the current history entry, and the `state` option updates the history state.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst [location, navigate] = useLocation();\n\nnavigate(\"/jobs\"); // `pushState` is used\nnavigate(\"/home\", { replace: true }); // `replaceState` is used\n```\n\nLANGUAGE: jsx\nCODE:\n```\nnavigate(\"/home\", { state: { modal: \"promo\" } });\n\nhistory.state; // { modal: \"promo\" }\n```\n\n----------------------------------------\n\nTITLE: Navigating Programmatically with navigate - JS\nDESCRIPTION: This snippet demonstrates how to initiate navigation from outside a component using the `navigate` function from the `wouter/use-browser-location` module. This function is the same one used internally by wouter.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nimport { navigate } from \"wouter/use-browser-location\";\n\nnavigate(\"/\", { replace: true });\n```\n\n----------------------------------------\n\nTITLE: Examples of useRoute Patterns in Wouter\nDESCRIPTION: This snippet showcases various pattern matching options available with `useRoute`, including optional parameters, suffixes, wildcards, optional wildcards, and regular expressions. It illustrates the flexibility of route definitions in Wouter.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseRoute(\"/app/:page\");\nuseRoute(\"/app/:page/:section\");\n\n// optional parameter, matches \"/en/home\" and \"/home\"\nuseRoute(\"/:locale?/home\");\n\n// suffixes\nuseRoute(\"/movies/:title.(mp4|mov)\");\n\n// wildcards, matches \"/app\", \"/app-1\", \"/app/home\"\nuseRoute(\"/app*\");\n\n// optional wildcards, matches \"/orders\", \"/orders/\"\n// and \"/orders/completed/list\"\nuseRoute(\"/orders/*?\");\n\n// regex for matching complex patterns,\n// matches \"/hello:123\"\nuseRoute(/^[/]([a-z]+):([0-9]+)[/]?$/);\n// and with named capture groups\nuseRoute(/^[/](?<word>[a-z]+):(?<num>[0-9]+)[/]?$/);\n```\n\n----------------------------------------\n\nTITLE: Route Nesting Example\nDESCRIPTION: Demonstrates how to use the `nest` prop to create nested routing contexts in wouter.  This allows for matching paths that start with a given pattern, with child routes receiving location relative to that pattern. The example shows a three-level route structure.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<Route path=\"/app\" nest>\n  <Route path=\"/users/:id\" nest>\n    <Route path=\"/orders\" />\n  </Route>\n</Route>\n```\n\n----------------------------------------\n\nTITLE: Applying Active Class to Link - JSX\nDESCRIPTION: This snippet demonstrates how to dynamically apply a CSS class to a `<Link>` component based on whether the link's target matches the current route. The `className` prop accepts a function that receives a boolean `active` parameter indicating the match status. An exact match is performed.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<Link className={(active) => (active ? \"active\" : \"\")}>Nav link</Link>\n```\n\n----------------------------------------\n\nTITLE: Using useParams with Regex Paths in Wouter\nDESCRIPTION: This snippet shows how to use the `useParams` hook with regular expression paths.  It demonstrates accessing capture groups by their index or by their named capture group (if defined).\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Route, useParams } from \"wouter\";\n\nconst User = () => {\n  const params = useParams();\n\n  params.id; // \"1\"\n  params[0]; // \"1\"\n};\n\n<Route path={/^[/]user[/](?<id>[0-9]+)[/]?$/} component={User}> </Route>\n```\n\n----------------------------------------\n\nTITLE: Using useRoute with Wildcards in Wouter\nDESCRIPTION: This example shows how to use wildcards with the `useRoute` hook to match a range of URLs. It demonstrates how to access the wildcard parameter using the `\"*\"` key in the `params` object.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// wildcards, matches \"/app\", \"/app-1\", \"/app/home\"\nconst [match, params] = useRoute(\"/app*\");\n\nif (match) {\n  // \"/home\" for \"/app/home\"\n  const page = params[\"*\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect with useLocation Hook\nDESCRIPTION: Shows how to use the `useLocation` hook to trigger a redirect inside an event handler or asynchronous operation. It allows for more advanced logic compared to the basic `Redirect` component.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLocation } from \"wouter\";\n\nconst [location, setLocation] = useLocation();\n\nfetchOrders().then((orders) => {\n  setOrders(orders);\n  setLocation(\"/app/orders\");\n});\n```\n\n----------------------------------------\n\nTITLE: Link Component with Dynamic ClassName\nDESCRIPTION: Shows how to use a function as the `className` prop of the `Link` component to dynamically style active links. The function receives a boolean value indicating whether the link is active for the current route.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Link className={(active) => (active ? \"active\" : \"\")}>Nav</Link>\n```\n\n----------------------------------------\n\nTITLE: Default Route with Switch Component\nDESCRIPTION: Shows how to create a default route that is rendered when no other route in a `Switch` component matches. The default route should always come last within the `Switch`.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch, Route } from \"wouter\";\n\n<Switch>\n  <Route path=\"/about\">...</Route>\n  <Route>404, Not Found!</Route>\n</Switch>;\n```\n\n----------------------------------------\n\nTITLE: Router Component with Base Path Example\nDESCRIPTION: Illustrates how to specify a base path using the `Router` component. This allows the app to be deployed to a subfolder without modifying the route definitions. The example shows how to use the `base` prop and how links are affected.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Router, Route, Link } from \"wouter\";\n\nconst App = () => (\n  <Router base=\"/app\">\n    {/* the link's href attribute will be \"/app/users\" */}\n    <Link href=\"/users\">Users</Link>\n\n    <Route path=\"/users\">The current path is /app/users!</Route>\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component with useRoute - JS\nDESCRIPTION: This snippet shows how to create a custom `<Link>` component that uses the `useRoute` hook to determine if the link is active. It allows for more control over props like `aria-current` or `style` based on the active state.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst [isActive] = useRoute(props.href);\n\nreturn (\n  <Link {...props} asChild>\n    <a style={isActive ? { color: \"red\" } : {}}>{props.children}</a>\n  </Link>\n);\n```\n\n----------------------------------------\n\nTITLE: Link Component with asChild Prop\nDESCRIPTION: Explains how to use the `asChild` prop with the `Link` component to wrap a custom component that renders an `<a>` element under the hood.  The custom component (`UIKitLink`) must implement an `onClick` handler for navigation to work correctly.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// use this instead\n<Link to=\"/\" asChild>\n  <UIKitLink />\n</Link>\n\n// Remember, `UIKitLink` must implement an `onClick` handler\n// in order for navigation to work!\n```\n\n----------------------------------------\n\nTITLE: Customizing Location Hook with Router Component\nDESCRIPTION: This snippet demonstrates how to customize the location hook used by Wouter by wrapping the application in a `Router` component and providing a custom hook like `useHashLocation`.  This allows for different routing strategies.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Router, Route } from \"wouter\";\nimport { useHashLocation } from \"wouter/use-hash-location\";\n\nconst App = () => (\n  <Router hook={useHashLocation}>\n    <Route path=\"/about\" component={About} />\n    ...\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useRouter Hook in Wouter\nDESCRIPTION: This example demonstrates how to access the global router object using the `useRouter` hook. The router object contains routing options configured in the `Router` component, such as the location hook and base path.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from \"wouter\";\n\nconst Custom = () => {\n  const router = useRouter();\n\n  router.hook; // `useBrowserLocation` by default\n  router.base; // \"/app\"\n};\n\nconst App = () => (\n  <Router base=\"/app\">\n    <Custom />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Routes with Framer Motion - JSX\nDESCRIPTION: This snippet illustrates how to animate route transitions using `framer-motion`. It uses `useRoute` to manually match the current route and conditionally render a `motion.div` with animation properties within `AnimatePresence` to ensure proper exit animations.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport const MyComponent = () => (\n  <AnimatePresence>\n    {/* This will not work! `motion.div` is not a direct child */}\n    <Route path=\"/\">\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      />\n    </Route>\n  </AnimatePresence>\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const MyComponent = ({ isVisible }) => {\n  const [isMatch] = useRoute(\"/\");\n\n  return (\n    <AnimatePresence>\n      {isMatch && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        />\n      )}\n    </AnimatePresence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Default Route with Wildcard Parameter\nDESCRIPTION: Demonstrates how to use wildcard parameters in a default route to access the unmatched segment of the path. This can be useful for displaying a 404 message with the requested URL.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n<Switch>\n  <Route path=\"/users\">...</Route>\n\n  {/* will match anything that starts with /users/, e.g. /users/foo, /users/1/edit etc. */}\n  <Route path=\"/users/*\">...</Route>\n\n  {/* will match everything else */}\n  <Route path=\"*\">\n    {(params) => `404, Sorry the page ${params[\"*\"]} does not exist!`}\n  </Route>\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: Testing Routes with memoryLocation - JSX\nDESCRIPTION: This snippet demonstrates how to test wouter routes using the `memoryLocation` hook. This allows for providing a static location to the router for testing specific routes and also recording the navigation history.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"@testing-library/react\";\nimport { memoryLocation } from \"wouter/memory-location\";\n\nit(\"renders a user page\", () => {\n  // `static` option makes it immutable\n  // even if you call `navigate` somewhere in the app location won't change\n  const { hook } = memoryLocation({ path: \"/user/2\", static: true });\n\n  const { container } = render(\n    <Router hook={hook}>\n      <Route path=\"/user/:id\">{(params) => <>User ID: {params.id}</>}</Route>\n    </Router>\n  );\n\n  expect(container.innerHTML).toBe(\"User ID: 2\");\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nit(\"performs a redirect\", () => {\n  const { hook, history, navigate } = memoryLocation({\n    path: \"/\",\n    // will store navigation history in `history`\n    record: true,\n  });\n\n  const { container } = render(\n    <Router hook={hook}>\n      <Switch>\n        <Route path=\"/\">Index</Route>\n        <Route path=\"/orders\">Orders</Route>\n\n        <Route>\n          <Redirect to=\"/orders\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n\n  expect(history).toStrictEqual([\"/\"]);\n\n  navigate(\"/unknown/route\");\n\n  expect(container.innerHTML).toBe(\"Orders\");\n  expect(history).toStrictEqual([\"/\", \"/unknown/route\", \"/orders\"]);\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Routers with Base Paths\nDESCRIPTION: Demonstrates how base paths are inherited and stack up when using multiple nested `Router` components. This allows for creating modular routing structures with different base paths for different sections of the application.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n<Router base=\"/app\">\n  <Router base=\"/cms\">\n    <Route path=\"/users\">Path is /app/cms/users!</Route>\n  </Router>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Using Bare Location Hooks - JS\nDESCRIPTION: This snippet demonstrates how to use the `useBrowserLocation` hook directly for minimal bundle size. This hook only provides the current location, and route matching must be handled manually.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nimport { useBrowserLocation } from \"wouter/use-browser-location\";\n\nconst UsersRoute = () => {\n  const [location] = useBrowserLocation();\n\n  if (location !== \"/users\") return null;\n\n  // render the route\n};\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering (SSR) with wouter - JS\nDESCRIPTION: This snippet demonstrates how to use wouter for server-side rendering. It wraps the application with the top-level `<Router>` component and specifies the `ssrPath` and optionally `ssrSearch` props derived from the request.  It also covers hydrating the client.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nimport { renderToString } from \"react-dom/server\";\nimport { Router } from \"wouter\";\n\nconst handleRequest = (req, res) => {\n  // top-level Router is mandatory in SSR mode\n  // pass an optional context object to handle redirects on the server\n  const ssrContext = {};\n  const prerendered = renderToString(\n    <Router ssrPath={req.path} ssrSearch={req.search} ssrContext={ssrContext}>\n      <App />\n    </Router>\n  );\n\n  if (ssrContext.redirectTo) {\n    // encountered redirect\n    res.redirect(ssrContext.redirectTo);\n  } else {\n    // respond with prerendered html\n  }\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Router ssrPath=\"/goods?sort=asc\" />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Router ssrPath=\"/goods\" ssrSearch=\"sort=asc\" />;\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { hydrateRoot } from \"react-dom/client\";\n\nconst root = hydrateRoot(\n  domNode,\n  // during hydration, `ssrPath` is set to `location.pathname`,\n  // `ssrSearch` set to `location.search` accordingly\n  // so there is no need to explicitly specify them\n  <Router>\n    <App />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Nested Routes with 'nest' prop - JS\nDESCRIPTION: This snippet shows how to create nested routes using the `nest` prop on a `<Route>` component.  Routes defined within a nested route will be scoped relative to the parent route's path.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nconst App = () => (\n  <Router base=\"/app\">\n    <Route path=\"/dashboard\" nest>\n      {/* the href is \"/app/dashboard/users\" */}\n      <Link to=\"/users\" />\n\n      <Route path=\"/users\">\n        {/* Here `useLocation()` returns \"/users\"! */}\n      </Route>\n    </Route>\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useSearch Hook in Wouter\nDESCRIPTION: This example shows how to use the `useSearch` hook to get the current search string. The component will re-render when the search string updates. The returned string does not include the `?` character.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSearch } from \"wouter\";\n\n// returns \"tab=settings&id=1\"\nconst searchString = useSearch();\n```\n\n----------------------------------------\n\nTITLE: Custom Parser with pathToRegexp for Strict Routes - JS\nDESCRIPTION: This snippet demonstrates how to implement strict route matching using a custom parser based on the `path-to-regexp` library.  The parser is passed to the `<Router>` component. It configures the `pathToRegexp` function with `strict: true` to enforce trailing slashes.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nimport { pathToRegexp } from \"path-to-regexp\";\n\n/**\n * Custom parser based on `pathToRegexp` with strict route option\n */\nconst strictParser = (path, loose) => {\n  const keys = [];\n  const pattern = pathToRegexp(path, keys, { strict: true, end: !loose });\n\n  return {\n    pattern,\n    // `pathToRegexp` returns some metadata about the keys,\n    // we want to strip it to just an array of keys\n    keys: keys.map((k) => k.name),\n  };\n};\n\nconst App = () => (\n  <Router parser={strictParser}>\n    <Route path=\"/foo\">...</Route>\n    <Route path=\"/foo/\">...</Route>\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Using ssrSearch prop with Router for SSR in Wouter\nDESCRIPTION: This demonstrates using the `ssrSearch` prop with the `Router` component for server-side rendering (SSR) to properly handle the search query during initial render.  It is necessary for the hook to retrieve the correct search parameters on the server.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Router ssrSearch={request.search}>{/* SSR! */}</Router>\n```\n\n----------------------------------------\n\nTITLE: Using wouter with Preact - DIFF\nDESCRIPTION: This snippet shows how to import wouter components when using Preact.  It recommends using the `wouter-preact` package instead of importing from `wouter/preact` directly.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n- import { useRoute, Route, Switch } from \"wouter\";\n+ import { useRoute, Route, Switch } from \"wouter-preact\";\n```\n\n----------------------------------------\n\nTITLE: Installing Wouter using npm\nDESCRIPTION: This command shows how to install the wouter package using the npm package manager. This is the first step to using wouter in a React project.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i wouter\n```\n\n----------------------------------------\n\nTITLE: Router Component Example\nDESCRIPTION: Demonstrates how to use the `Router` component to customize routing behavior, such as using hash-based routing or specifying a base path.  It shows how to provide a custom location hook and base path.\nSOURCE: https://github.com/molefrog/wouter/blob/v3/README.md#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useHashLocation } from \"wouter/use-hash-location\";\n\n<Router hook={useHashLocation} base=\"/app\">\n  {/* Your app goes here */}\n</Router>;\n```"
  }
]