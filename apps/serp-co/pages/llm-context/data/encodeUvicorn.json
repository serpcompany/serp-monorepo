[
  {
    "owner": "encode",
    "repo": "uvicorn",
    "content": "TITLE: Running Uvicorn from Command Line\nDESCRIPTION: Example of running Uvicorn from the command line with auto-reloading enabled and a custom port. The ASGI application is specified in the format 'path.to.module:instance.path'.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ uvicorn main:app --reload --port 5000\n```\n\n----------------------------------------\n\nTITLE: Programmatic Uvicorn Server Execution\nDESCRIPTION: Different methods to run Uvicorn programmatically using uvicorn.run() or Server/Config instances.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport uvicorn\n\nasync def app(scope, receive, send):\n    ...\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", port=5000, log_level=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ASGI Application in Python\nDESCRIPTION: An example of a simple ASGI application that responds with 'Hello, world!' to HTTP requests. This demonstrates the basic structure of an ASGI app with scope, receive, and send parameters.\nSOURCE: https://github.com/encode/uvicorn/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n\n    await send({\n        'type': 'http.response.start',\n        'status': 200,\n        'headers': [\n            (b'content-type', b'text/plain'),\n        ],\n    })\n    await send({\n        'type': 'http.response.body',\n        'body': b'Hello, world!',\n    })\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Programmatically in Python\nDESCRIPTION: Demonstrates how to run Uvicorn directly from within a Python program using uvicorn.run(). It includes configuration options such as host, port, and log level.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uvicorn\n\nclass App:\n    ...\n\napp = App()\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Programmatic Uvicorn Configuration\nDESCRIPTION: Example of programmatically starting Uvicorn server using the run() function with configuration parameters.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn with Gunicorn Worker Class\nDESCRIPTION: Demonstrates how to use Gunicorn as a process manager for Uvicorn, utilizing the UvicornWorker class for better production deployment.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn -w 4 -k uvicorn.workers.UvicornWorker\n```\n\n----------------------------------------\n\nTITLE: Creating Simple ASGI Application in Python\nDESCRIPTION: Defines a basic ASGI application that responds with 'Hello, world!' to HTTP requests.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def app(scope, receive, send):\n    body = \"Hello, world!\"\n    await send(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": 200,\n            \"headers\": [\n                [b\"content-type\", b\"text/plain\"],\n                [b\"content-length\", len(body)],\n            ],\n        }\n    )\n    await send(\n        {\n            \"type\": \"http.response.body\",\n            \"body\": body.encode(\"utf-8\"),\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic ASGI Application Implementation\nDESCRIPTION: Simple ASGI application that returns 'Hello, world!' response with proper HTTP headers.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n\n    await send({\n        'type': 'http.response.start',\n        'status': 200,\n        'headers': [\n            (b'content-type', b'text/plain'),\n            (b'content-length', b'13'),\n        ],\n    })\n    await send({\n        'type': 'http.response.body',\n        'body': b'Hello, world!',\n    })\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn with Multiple Worker Processes\nDESCRIPTION: Shows how to run Uvicorn with multiple worker processes using the built-in --workers option for improved performance and resilience.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ uvicorn main:app --workers 4\n```\n\n----------------------------------------\n\nTITLE: Advanced Server Configuration and Async Execution\nDESCRIPTION: Example showing how to configure and run Uvicorn server using Config and Server classes in an async context.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport uvicorn\n\nasync def app(scope, receive, send):\n    ...\n\nasync def main():\n    config = uvicorn.Config(\"main:app\", port=5000, log_level=\"info\")\n    server = uvicorn.Server(config)\n    await server.serve()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Uvicorn via Command Line\nDESCRIPTION: Example of starting Uvicorn server using command line options to specify host and port settings.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app --host 0.0.0.0 --port 8000\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn with HTTPS\nDESCRIPTION: Example of running Uvicorn with HTTPS enabled, specifying the paths to the SSL key file and certificate file for secure connections.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ uvicorn main:app --port 5000 --ssl-keyfile=./key.pem --ssl-certfile=./cert.pem\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with Uvicorn Worker and HTTPS\nDESCRIPTION: Demonstrates how to run Gunicorn with the Uvicorn worker class while enabling HTTPS support by specifying SSL certificate and key files.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn --keyfile=./key.pem --certfile=./cert.pem -k uvicorn.workers.UvicornWorker main:app\n```\n\n----------------------------------------\n\nTITLE: Creating Cache-Aware Dockerfile for Python Application\nDESCRIPTION: Defines a Dockerfile that uses caching strategies to optimize build times for a Python application using UV and Uvicorn.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.12-slim\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/\n\n# Change the working directory to the `app` directory\nWORKDIR /app\n\n# Install dependencies\nRUN --mount=type=cache,target=/root/.cache/uv \\\n    --mount=type=bind,source=uv.lock,target=uv.lock \\\n    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \\\n    uv sync --frozen --no-install-project\n\n# Copy the project into the image\nADD . /app\n\n# Sync the project\nRUN --mount=type=cache,target=/root/.cache/uv \\\n    uv sync --frozen\n\n# Run with uvicorn\nCMD [\"uv\", \"run\", \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Server with UV\nDESCRIPTION: Starts the Uvicorn server to run the ASGI application using UV.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run uvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Server from Command Line\nDESCRIPTION: Command to start the Uvicorn server with the example application. It specifies the module and application object to run.\nSOURCE: https://github.com/encode/uvicorn/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ uvicorn example:app\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Proxying to Uvicorn\nDESCRIPTION: Sample Nginx configuration for proxying requests to Uvicorn, including settings for websocket support, static file serving, and proper header forwarding.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n  server {\n    listen 80;\n    client_max_body_size 4G;\n\n    server_name example.com;\n\n    location / {\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_redirect off;\n      proxy_buffering off;\n      proxy_pass http://uvicorn;\n    }\n\n    location /static {\n      # path for static files\n      root /path/to/app/static;\n    }\n  }\n\n  map $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n  }\n\n  upstream uvicorn {\n    server unix:/tmp/uvicorn.sock;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn Using pip\nDESCRIPTION: Commands for installing Uvicorn with minimal dependencies or with standard features including Cython-based components.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install uvicorn\n\npip install 'uvicorn[standard]'\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn with pip\nDESCRIPTION: Commands to install Uvicorn using pip. The first command installs Uvicorn with minimal dependencies, while the second installs it with Cython-based dependencies and optional extras.\nSOURCE: https://github.com/encode/uvicorn/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install uvicorn\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install 'uvicorn[standard]'\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Uvicorn\nDESCRIPTION: Example of configuring Uvicorn using environment variables with the UVICORN_ prefix.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport UVICORN_HOST=\"0.0.0.0\"\nexport UVICORN_PORT=\"8000\"\nuvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Project with UV\nDESCRIPTION: Creates a new Python project using the UV package manager, setting up a basic project structure.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv init app\n```\n\n----------------------------------------\n\nTITLE: Adding Uvicorn Dependency with UV\nDESCRIPTION: Adds Uvicorn as a dependency to the project using the UV package manager.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv add uvicorn\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Handler Example\nDESCRIPTION: ASGI application example showing how to handle HTTP requests and return method and path information.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def app(scope, receive, send):\n    \"\"\"\n    Echo the method and path back in an HTTP response.\n    \"\"\"\n    assert scope['type'] == 'http'\n\n    body = f'Received {scope[\"method\"]} request to {scope[\"path\"]}'\n    await send({\n        'type': 'http.response.start',\n        'status': 200,\n        'headers': [\n            [b'content-type', b'text/plain'],\n        ]\n    })\n    await send({\n        'type': 'http.response.body',\n        'body': body.encode('utf-8'),\n    })\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container\nDESCRIPTION: Commands to build the Docker image and run the container for the Python application.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-app .\ndocker run -p 8000:8000 my-app\n```\n\n----------------------------------------\n\nTITLE: Streaming Response Implementation\nDESCRIPTION: Example demonstrating how to implement streaming HTTP responses with delays between chunks.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def app(scope, receive, send):\n    \"\"\"\n    Send a slowly streaming HTTP response back to the client.\n    \"\"\"\n    await send({\n        'type': 'http.response.start',\n        'status': 200,\n        'headers': [\n            [b'content-type', b'text/plain'],\n        ]\n    })\n    for chunk in [b'Hello', b', ', b'world!']:\n        await send({\n            'type': 'http.response.body',\n            'body': chunk,\n            'more_body': True\n        })\n        await asyncio.sleep(1)\n    await send({\n        'type': 'http.response.body',\n        'body': b'',\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for Development\nDESCRIPTION: Defines a Docker Compose configuration for running the application in development mode with hot-reloading.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - UVICORN_RELOAD=true\n    volumes:\n      - .:/app\n    tty: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisor for Uvicorn Deployment\nDESCRIPTION: Example configuration for using Supervisor as a process manager for Uvicorn, showing how to set up multiple processes and handle logging.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/deployment/index.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[supervisord]\n\n[fcgi-program:uvicorn]\nsocket=tcp://localhost:8000\ncommand=venv/bin/uvicorn --fd 0 main:App\nnumprocs=4\nprocess_name=uvicorn-%(process_num)d\nstdout_logfile=/dev/stdout\nstdout_logfile_maxbytes=0\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn Dependencies with pip\nDESCRIPTION: This snippet shows the content of a requirements file for installing Uvicorn and its dependencies using pip. It includes core dependencies, optional packages, testing tools, and documentation generators.\nSOURCE: https://github.com/encode/uvicorn/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .[standard]\n\n# TODO: Remove this after h11 makes a release. By this writing, h11 was on 0.14.0.\n# Core dependencies\nh11 @ git+https://github.com/python-hyper/h11.git@master\n\n# Explicit optionals\na2wsgi==1.10.8\nwsproto==1.2.0\nwebsockets==13.1\n\n# Packaging\nbuild==1.2.2.post1\ntwine==6.1.0\n\n# Testing\nruff==0.11.2\npytest==8.3.5\npytest-mock==3.14.0\npytest-xdist[psutil]==3.6.1\nmypy==1.15.0\ntypes-click==7.1.8\ntypes-pyyaml==6.0.12.20250326\ntrustme==1.2.1\ncryptography==44.0.2\ncoverage==7.8.0\ncoverage-conditional-plugin==0.9.0\ncoverage-enable-subprocess==1.0\nhttpx==0.28.1\n\n# Documentation\nmkdocs==1.6.1\nmkdocs-material==9.6.10\n```\n\n----------------------------------------\n\nTITLE: Running Daphne ASGI Server\nDESCRIPTION: Commands to install and run the Daphne ASGI server as an alternative to Uvicorn. Daphne supports HTTP/1.1, HTTP/2, and WebSockets.\nSOURCE: https://github.com/encode/uvicorn/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install daphne\n$ daphne app:App\n```\n\n----------------------------------------\n\nTITLE: Running Hypercorn ASGI Server\nDESCRIPTION: Commands to install and run the Hypercorn ASGI server, which supports HTTP/1.1, HTTP/2, WebSockets, and the trio async framework.\nSOURCE: https://github.com/encode/uvicorn/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install hypercorn\n$ hypercorn app:App\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Daphne ASGI Server\nDESCRIPTION: Commands to install Daphne using pip and run an ASGI application with it. Daphne is the first ASGI server implementation, originally developed for Django Channels.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npip install daphne\ndaphne app:App\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Hypercorn ASGI Server\nDESCRIPTION: Commands to install Hypercorn using pip and run an ASGI application with it. Hypercorn is an ASGI server that supports HTTP/1.1, HTTP/2, HTTP/3, and WebSockets.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/index.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npip install hypercorn\nhypercorn app:App\n```\n\n----------------------------------------\n\nTITLE: Cloning Uvicorn Repository\nDESCRIPTION: Instructions for cloning the forked Uvicorn repository to begin development.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/YOUR-USERNAME/uvicorn\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn Development Dependencies\nDESCRIPTION: Commands to install Uvicorn and its development dependencies after cloning.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd uvicorn\n$ scripts/install\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Tests\nDESCRIPTION: Commands for running the test suite, including options for running specific test files.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/test\n$ scripts/test tests/test_cli.py\n```\n\n----------------------------------------\n\nTITLE: Code Formatting and Linting\nDESCRIPTION: Commands for running code auto-formatting and linting checks.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/lint\n$ scripts/check\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally\nDESCRIPTION: Command to run the documentation site locally for preview purposes.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/docs serve\n```\n\n----------------------------------------\n\nTITLE: Configuration Version Update - Python\nDESCRIPTION: Version constraint updates for various dependencies including httptools, websockets, click and others. Shows the progression of version requirements across multiple releases.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/release-notes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhttptools >= 0.2.0,<0.4.0\nwebsockets >= 10.0\nclick >= 8.0\nwsproto >= 1.0.0\nwatchgod\nasgiref >= 3.4.0\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration - Python\nDESCRIPTION: Example of configuration settings for workers, logging, and proxy settings derived from environment variables.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/release-notes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nworkers = os.getenv('WEB_CONCURRENCY')\nforwarded_allow_ips = os.getenv('FORWARDED_ALLOW_IPS', '127.0.0.1')\n```\n\n----------------------------------------\n\nTITLE: Sponsorship Stats Display HTML\nDESCRIPTION: HTML and CSS code for displaying key statistics about Starlette and Uvicorn downloads and GitHub stars in a flexbox layout.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/sponsorship.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display: flex; justify-content: center; gap: 4rem; margin: 2rem 0; text-align: center;\">\n    <div style=\"padding: 1rem;\">\n        <h3 style=\"color: #6e5494; font-size: 2em; margin-bottom: 0.5rem;\">67M+</h3>\n        <p>Starlette Downloads/Month</p>\n    </div>\n    <div style=\"padding: 1rem;\">\n        <h3 style=\"color: #6e5494; font-size: 2em; margin-bottom: 0.5rem;\">57M+</h3>\n        <p>Uvicorn Downloads/Month</p>\n    </div>\n    <div style=\"padding: 1rem;\">\n        <h3 style=\"color: #6e5494; font-size: 2em; margin-bottom: 0.5rem;\">19K+</h3>\n        <p>Combined GitHub Stars</p>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sponsorship Call-to-Action Button HTML\nDESCRIPTION: HTML and CSS for a prominent call-to-action button linking to GitHub Sponsors, featuring hover effects and gradient background.\nSOURCE: https://github.com/encode/uvicorn/blob/master/docs/sponsorship.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center; padding: 2rem; margin: 2rem 0; background: linear-gradient(135deg, #6e5494, #24292e); border-radius: 10px; color: white;\">\n    <h2 style=\"color: white; margin-bottom: 1rem;\">🌟 Become a Sponsor Today! 🌟</h2>\n    <p style=\"margin-bottom: 1.5rem; font-size: 1.1em;\">Your support helps keep Starlette and Uvicorn growing stronger!</p>\n    <a href=\"https://github.com/sponsors/Kludex\"\n       style=\"display: inline-block; padding: 1rem 2rem; background-color: #238636; color: white; text-decoration: none; border-radius: 6px; font-size: 1.2em; font-weight: bold; transition: all 0.3s ease-in-out;\"\n       onmouseover=\"this.style.backgroundColor='#2ea043';this.style.transform='translateY(-2px)'\"\n       onmouseout=\"this.style.backgroundColor='#238636';this.style.transform='translateY(0)'\">\n        ❤️ Sponsor on GitHub\n    </a>\n</div>\n```"
  }
]