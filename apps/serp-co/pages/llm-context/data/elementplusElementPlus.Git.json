[
  {
    "owner": "element-plus",
    "repo": "element-plus.git",
    "content": "TITLE: Full Import Configuration in Vue\nDESCRIPTION: Basic setup for importing all Element Plus components and styles globally in a Vue application.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\napp.use(ElementPlus)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Defining Table Configuration Options in Markdown\nDESCRIPTION: This snippet defines various configuration options for the Element Plus Table component using a markdown table format. It includes attributes like select-on-indeterminate, indent, lazy loading, tree props, table layout, scrollbar behavior, and tooltip customization.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| select-on-indeterminate            | controls the behavior of master checkbox in multi-select tables when only some rows are selected (but not all). If true, all rows will be selected, else deselected                                                                                                        | ^[boolean]                                                                                                                                                           | true                                                                                                                    |\n| indent                             | horizontal indentation of tree data                                                                                                                                                                                                                                        | ^[number]                                                                                                                                                            | 16                                                                                                                      |\n| lazy                               | whether to lazy loading data                                                                                                                                                                                                                                               | ^[boolean]                                                                                                                                                           | false                                                                                                                   |\n| load                               | method for loading child row data, only works when `lazy` is true                                                                                                                                                                                                          | ^[Function]`(row: any, treeNode: TreeNode, resolve: (data: any[]) => void) => void`                                                                                  | —                                                                                                                       |\n| tree-props                         | configuration for rendering nested data                                                                                                                                                                                                                                    | ^[object]`{ hasChildren?: string, children?: string, checkStrictly?: boolean }`                                                                                      | ^[object]`{ hasChildren: 'hasChildren', children: 'children', checkStrictly: false }`                                   |\n| table-layout                       | sets the algorithm used to lay out table cells, rows, and columns                                                                                                                                                                                                          | ^[enum]`'fixed' \\| 'auto'`                                                                                                                                           | fixed                                                                                                                   |\n| scrollbar-always-on                | always show scrollbar                                                                                                                                                                                                                                                      | ^[boolean]                                                                                                                                                           | false                                                                                                                   |\n| show-overflow-tooltip              | whether to hide extra content and show them in a tooltip when hovering on the cell.It will affect all the table columns, refer to table [tooltip-options](#table-attributes)                                                                                               | ^[boolean] / [`object`](#table-attributes) ^(2.3.7)                                                                                                                  | —                                                                                                                       |\n| flexible ^(2.2.1)                  | ensure main axis minimum-size doesn't follow the content                                                                                                                                                                                                                   | ^[boolean]                                                                                                                                                           | false                                                                                                                   |\n| scrollbar-tabindex ^(2.8.3)        | body scrollbar's wrap container tabindex                                                                                                                                                                                                                                   | ^[string] / ^[number]                                                                                                                                                | —                                                                                                                       |\n| allow-drag-last-column ^(2.9.2)    | whether to allow drag the last column                                                                                                                                                                                                                                      | ^[boolean]                                                                                                                                                           | true                                                                                                                    |\n| tooltip-formatter ^(2.9.4)         | customize tooltip content when using `show-overflow-tooltip`                                                                                                                                                                                                               | ^[Function]`(data: { row: any, column: any, cellValue: any }) => VNode \\| string`                                                                                    | —                                                                                                                       |\n| preserve-expanded-content ^(2.9.7) | whether to preserve expanded row content in DOM when collapsed                                                                                                                                                                                                             | ^[boolean]                                                                                                                                                           | false                                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Declarations for TableV2 Component\nDESCRIPTION: Type definitions for TableV2 component including header, row, cell configurations, event handlers, and sorting functionality. Defines interfaces and types for customizing table behavior and appearance.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype HeaderClassGetter = (param: {\n  columns: Column<any>[]\n  headerIndex: number\n}) => string\n\ntype HeaderPropsGetter = (param: {\n  columns: Column<any>[]\n  headerIndex: number\n}) => Record<string, any>\n\ntype HeaderCellPropsGetter = (param: {\n  columns: Column<any>[]\n  column: Column<any>\n  columnIndex: number\n  headerIndex: number\n  style: CSSProperties\n}) => Record<string, any>\n\ntype RowClassGetter = (param: {\n  columns: Column<any>[]\n  rowData: any\n  rowIndex: number\n}) => string\n\ntype RowPropsGetter = (param: {\n  columns: Column<any>[]\n  rowData: any\n  rowIndex: number\n}) => Record<string, any>\n\ntype CellPropsGetter = (param: {\n  column: Column<any>\n  columns: Column<any>[]\n  columnIndex: number\n  cellData: any\n  rowData: any\n  rowIndex: number\n}) => void\n\ntype DataGetterParams<T> = {\n  columns: Column<T>[]\n  column: Column<T>\n  columnIndex: number\n} & RowCommonParams\n\ntype DataGetter<T> = (params: DataGetterParams<T>) => T\n\ntype CellRenderProps<T> = {\n  cellData: T\n  column: Column<T>\n  columns: Column<T>[]\n  columnIndex: number\n  rowData: any\n  rowIndex: number\n}\n\ntype HeaderRenderProps<T> = {\n  column: Column<T>\n  columns: Column<T>[]\n  columnIndex: number\n  headerIndex: number\n}\n\ntype ScrollParams = {\n  xAxisScrollDir: 'forward' | 'backward'\n  scrollLeft: number\n  yAxisScrollDir: 'forward' | 'backward'\n  scrollTop: number\n}\n\ntype CellSlotProps<T> = {\n  column: Column<T>\n  columns: Column<T>[]\n  columnIndex: number\n  depth: number\n  style: CSSProperties\n  rowData: any\n  rowIndex: number\n  isScrolling: boolean\n  expandIconProps?:\n    | {\n        rowData: any\n        rowIndex: number\n        onExpand: (expand: boolean) => void\n      }\n    | undefined\n}\n\ntype HeaderSlotProps = {\n  cells: VNode[]\n  columns: Column<any>[]\n  headerIndex: number\n}\n\ntype HeaderCellSlotProps = {\n  class: string\n  columns: Column<any>[]\n  column: Column<any>\n  columnIndex: number\n  headerIndex: number\n  style: CSSProperties\n  headerCellProps?: any\n  sortBy: SortBy\n  sortState?: SortState | undefined\n  onColumnSorted: (e: MouseEvent) => void\n}\n\ntype RowCommonParams = {\n  rowData: any\n  rowIndex: number\n}\n\ntype RowEventHandlerParams = {\n  rowKey: KeyType\n  event: Event\n} & RowCommonParams\n\ntype RowEventHandler = (params: RowEventHandlerParams) => void\ntype RowEventHandlers = {\n  onClick?: RowEventHandler\n  onContextmenu?: RowEventHandler\n  onDblclick?: RowEventHandler\n  onMouseenter?: RowEventHandler\n  onMouseleave?: RowEventHandler\n}\n\ntype RowsRenderedParams = {\n  rowCacheStart: number\n  rowCacheEnd: number\n  rowVisibleStart: number\n  rowVisibleEnd: number\n}\n\ntype RowSlotProps = {\n  columns: Column<any>[]\n  rowData: any\n  columnIndex: number\n  rowIndex: number\n  data: any\n  key: number | string\n  isScrolling?: boolean\n  style: CSSProperties\n}\n\ntype RowExpandParams = {\n  expanded: boolean\n  rowKey: KeyType\n} & RowCommonParams\n\ntype Data = {\n  [key: KeyType]: any\n  children?: Array<any>\n}\n\ntype FixedData = Data\n\ntype KeyType = string | number | symbol\n\ntype ColumnSortParam<T> = { column: Column<T>; key: KeyType; order: SortOrder }\n\nenum SortOrder {\n  ASC = 'asc',\n  DESC = 'desc',\n}\n\ntype SortBy = { key: KeyType; Order: SortOrder }\ntype SortState = Record<KeyType, SortOrder>\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Component Attributes in Markdown\nDESCRIPTION: This markdown table defines the attributes for the Element Plus Tree component. It includes details such as data structure, node keys, rendering options, expansion behavior, checkbox functionality, and filtering methods.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                         | Description                                                                                                                                                                                                                                                                                                                                                                 | Type                                                   | Default |\n| ---------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ | ------- |\n| data                         | tree data                                                                                                                                                                                                                                                                                                                                                                   | ^[object]`Array<{[key: string]: any}>`                 | —       |\n| empty-text                   | text displayed when data is void                                                                                                                                                                                                                                                                                                                                            | ^[string]                                              | —       |\n| node-key                     | unique identity key name for nodes, its value should be unique across the whole tree                                                                                                                                                                                                                                                                                        | ^[string]                                              | —       |\n| props                        | configuration options, see the following table                                                                                                                                                                                                                                                                                                                              | [props](#props)                                        | —       |\n| render-after-expand          | whether to render child nodes only after a parent node is expanded for the first time                                                                                                                                                                                                                                                                                       | ^[boolean]                                             | true    |\n| load                         | method for loading subtree data, only works when `lazy` is true                                                                                                                                                                                                                                                                                                             | ^[Function]`(node, resolve, reject) => void`           | —       |\n| render-content               | render function for tree node                                                                                                                                                                                                                                                                                                                                               | ^[Function]`(h, { node, data, store }) => void`        | —       |\n| highlight-current            | whether current node is highlighted                                                                                                                                                                                                                                                                                                                                         | ^[boolean]                                             | false   |\n| default-expand-all           | whether to expand all nodes by default                                                                                                                                                                                                                                                                                                                                      | ^[boolean]                                             | false   |\n| expand-on-click-node         | whether to expand or collapse node when clicking on the node, if false, then expand or collapse node only when clicking on the arrow icon.                                                                                                                                                                                                                                  | ^[boolean]                                             | true    |\n| check-on-click-node          | whether to check or uncheck node when clicking on the node, if false, the node can only be checked or unchecked by clicking on the checkbox.                                                                                                                                                                                                                                | ^[boolean]                                             | false   |\n| check-on-click-leaf ^(2.9.6) | whether to check or uncheck node when clicking on leaf node (last children).                                                                                                                                                                                                                                                                                                | ^[boolean]                                             | true    |\n| auto-expand-parent           | whether to expand father node when a child node is expanded                                                                                                                                                                                                                                                                                                                 | ^[boolean]                                             | true    |\n| default-expanded-keys        | array of keys of initially expanded nodes                                                                                                                                                                                                                                                                                                                                   | ^[object]`Array<string \\| number>`                     | —       |\n| show-checkbox                | whether node is selectable                                                                                                                                                                                                                                                                                                                                                  | ^[boolean]                                             | false   |\n| check-strictly               | whether checked state of a node not affects its father and child nodes when `show-checkbox` is `true`                                                                                                                                                                                                                                                                       | ^[boolean]                                             | false   |\n| default-checked-keys         | array of keys of initially checked nodes                                                                                                                                                                                                                                                                                                                                    | ^[object]`Array<string \\| number>`                     | —       |\n| current-node-key             | key of initially selected node                                                                                                                                                                                                                                                                                                                                              | ^[string] / ^[number]                                  | —       |\n| filter-node-method           | this function will be executed on each node when use filter method. if return `false`, tree node will be hidden.                                                                                                                                                                                                                                                            | ^[Function]`(value, data, node) => boolean`            | —       |\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of InputTag Component\nDESCRIPTION: Demonstrates the basic usage of the InputTag component where pressing the Enter key adds the input as a tag.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/basic\n```\n\n----------------------------------------\n\nTITLE: Vite Auto Import Configuration\nDESCRIPTION: Configuration for auto-importing Element Plus components in Vite projects.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport AutoImport from 'unplugin-auto-import/vite'\nimport Components from 'unplugin-vue-components/vite'\nimport { ElementPlusResolver } from 'unplugin-vue-components/resolvers'\n\nexport default defineConfig({\n  plugins: [\n    AutoImport({\n      resolvers: [ElementPlusResolver()],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SCSS Color Variables for Element Plus Theme\nDESCRIPTION: Core SCSS map defining the base color palette for Element Plus theme including primary, success, warning, danger, and info colors.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/theming.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$colors: () !default;\n$colors: map.deep-merge(\n  (\n    'white': #ffffff,\n    'black': #000000,\n    'primary': (\n      'base': #409eff,\n    ),\n    'success': (\n      'base': #67c23a,\n    ),\n    'warning': (\n      'base': #e6a23c,\n    ),\n    'danger': (\n      'base': #f56c6c,\n    ),\n    'error': (\n      'base': #f56c6c,\n    ),\n    'info': (\n      'base': #909399,\n    ),\n  ),\n  $colors\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Element Plus with Package Managers\nDESCRIPTION: Commands for installing Element Plus using different package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install element-plus --save\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add element-plus\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm install element-plus\n```\n\n----------------------------------------\n\nTITLE: Defining Table Exposes Methods in Markdown\nDESCRIPTION: This markdown table defines the methods exposed by the Element Plus Table component. It includes method names, descriptions, and their TypeScript function signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Method                     | Description                                                                                                                                                       | Type                                                                         |\n| -------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- |\n| clearSelection             | used in multiple selection Table, clear user selection                                                                                                            | ^[Function]`() => void`                                                      |\n| getSelectionRows           | returns the currently selected rows                                                                                                                               | ^[Function]`() => any[]`                                                     |\n| toggleRowSelection         | used in multiple selection Table, toggle if a certain row is selected. With the second parameter, you can directly set if this row is selected                    | ^[Function]`(row: any, selected?: boolean, ignoreSelectable = true) => void` |\n| toggleAllSelection         | used in multiple selection Table, toggle select all and deselect all                                                                                              | ^[Function]`() => void`                                                      |\n| toggleRowExpansion         | used in expandable Table or tree Table, toggle if a certain row is expanded. With the second parameter, you can directly set if this row is expanded or collapsed | ^[Function]`(row: any, expanded?: boolean) => void`                          |\n| setCurrentRow              | used in single selection Table, set a certain row selected. If called without any parameter, it will clear selection                                              | ^[Function]`(row: any) => void`                                              |\n| clearSort                  | clear sorting, restore data to the original order                                                                                                                 | ^[Function]`() => void`                                                      |\n| clearFilter                | clear filters of the columns whose `columnKey` are passed in. If no params, clear all filters                                                                     | ^[Function]`(columnKeys?: string[]) => void`                                 |\n| doLayout                   | refresh the layout of Table. When the visibility of Table changes, you may need to call this method to get a correct layout                                       | ^[Function]`() => void`                                                      |\n| sort                       | sort Table manually. Property `prop` is used to set sort column, property `order` is used to set sort order                                                       | ^[Function]`(prop: string, order: string) => void`                           |\n| scrollTo                   | scrolls to a particular set of coordinates                                                                                                                        | ^[Function]`(options: number \\| ScrollToOptions, yCoord?: number) => void`   |\n| setScrollTop               | set vertical scroll position                                                                                                                                      | ^[Function]`(top?: number) => void`                                          |\n| setScrollLeft              | set horizontal scroll position                                                                                                                                    | ^[Function]`(left?: number) => void`                                         |\n| columns ^(2.7.6)           | Get table columns context.                                                                                                                                        | ^[array]`TableColumnCtx<T>[]`                                                |\n| updateKeyChildren ^(2.8.4) | used in lazy Table, must set `rowKey`, update key children                                                                                                        | ^[Function]`(key: string, data: T[]) => void`                                |\n```\n\n----------------------------------------\n\nTITLE: Basic Tree Structure Implementation\nDESCRIPTION: Demonstrates the basic setup and structure of a tree component for displaying hierarchical data.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Importing and Using Element Plus Package in JavaScript\nDESCRIPTION: Basic example showing how to require and initialize the Element Plus package. Contains placeholder for API demonstration.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/packages/element-plus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst elementPlus = require('element-plus');\n\n// TODO: DEMONSTRATE API\n```\n\n----------------------------------------\n\nTITLE: Vite Plugin Configuration\nDESCRIPTION: Configuration for Element Plus plugin in Vite projects for style imports.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport ElementPlus from 'unplugin-element-plus/vite'\n\nexport default defineConfig({\n  plugins: [ElementPlus()],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Upload Component Attributes in Markdown\nDESCRIPTION: This snippet provides a comprehensive table of attributes for the Upload component in Element Plus. It includes details on required and optional attributes, their types, descriptions, and default values. The table covers configuration options like action URL, headers, upload method, and various event hooks for managing the upload process.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                          | Description                                                                                                                                                                           | Type                                                                                                                                       | Default                                                                                                            |\n| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------ |\n| action ^(required)            | request URL.                                                                                                                                                                          | ^[string]                                                                                                                                  | #                                                                                                                  |\n| headers                       | request headers.                                                                                                                                                                      | ^[object]`Headers \\| Record<string, any>`                                                                                                  | —                                                                                                                  |\n| method                        | set upload request method.                                                                                                                                                            | ^[string]                                                                                                                                  | post                                                                                                               |\n| multiple                      | whether uploading multiple files is permitted.                                                                                                                                        | ^[boolean]                                                                                                                                 | false                                                                                                              |\n| data                          | additions options of request. support `Awaitable` data and `Function` since v2.3.13.                                                                                                  | ^[object]`Record<string, any> \\| Awaitable<Record<string, any>>` / ^[Function]`(rawFile: UploadRawFile) => Awaitable<Record<string, any>>` | {}                                                                                                                 |\n| name                          | key name for uploaded file.                                                                                                                                                           | ^[string]                                                                                                                                  | file                                                                                                               |\n| with-credentials              | whether cookies are sent.                                                                                                                                                             | ^[boolean]                                                                                                                                 | false                                                                                                              |\n| show-file-list                | whether to show the uploaded file list.                                                                                                                                               | ^[boolean]                                                                                                                                 | true                                                                                                               |\n| drag                          | whether to activate drag and drop mode.                                                                                                                                               | ^[boolean]                                                                                                                                 | false                                                                                                              |\n| accept                        | accepted [file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept), will not work when `thumbnail-mode === true`.                                     | ^[string]                                                                                                                                  | ''                                                                                                                 |\n| crossorigin                   | native attribute [crossorigin](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin).                                                                             | ^[enum]`'' \\| 'anonymous' \\| 'use-credentials'`                                                                                            | —                                                                                                                  |\n| on-preview                    | hook function when clicking the uploaded files.                                                                                                                                       | ^[Function]`(uploadFile: UploadFile) => void`                                                                                              | —                                                                                                                  |\n| on-remove                     | hook function when files are removed.                                                                                                                                                 | ^[Function]`(uploadFile: UploadFile, uploadFiles: UploadFiles) => void`                                                                    | —                                                                                                                  |\n| on-success                    | hook function when uploaded successfully.                                                                                                                                             | ^[Function]`(response: any, uploadFile: UploadFile, uploadFiles: UploadFiles) => void`                                                     | —                                                                                                                  |\n| on-error                      | hook function when some errors occurs.                                                                                                                                                | ^[Function]`(error: Error, uploadFile: UploadFile, uploadFiles: UploadFiles) => void`                                                      | —                                                                                                                  |\n| on-progress                   | hook function when some progress occurs.                                                                                                                                              | ^[Function]`(evt: UploadProgressEvent, uploadFile: UploadFile, uploadFiles: UploadFiles) => void`                                          | —                                                                                                                  |\n| on-change                     | hook function when select file or upload file success or upload file fail.                                                                                                            | ^[Function]`(uploadFile: UploadFile, uploadFiles: UploadFiles) => void`                                                                    | —                                                                                                                  |\n| on-exceed                     | hook function when limit is exceeded.                                                                                                                                                 | ^[Function]`(files: File[], uploadFiles: UploadUserFile[]) => void`                                                                        | —                                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Defining Table Attributes in Markdown\nDESCRIPTION: This markdown snippet defines a table of attributes for the Element Plus Table component. It includes attribute names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                               | Description                                                                                                                                                                                                                                                                | Type                                                                                                                                                                 | Default                                                                                                                 |\n| ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| data                               | table data                                                                                                                                                                                                                                                                 | ^[array]`any[]`                                                                                                                                                      | []                                                                                                                      |\n| height                             | table's height. By default it has an `auto` height. If its value is a number, the height is measured in pixels; if its value is a string, the value will be assigned to element's style.height, the height is affected by external styles                                  | ^[string] / ^[number]                                                                                                                                                | —                                                                                                                       |\n| max-height                         | table's max-height. The legal value is a number or the height in px                                                                                                                                                                                                        | ^[string] / ^[number]                                                                                                                                                | —                                                                                                                       |\n| stripe                             | whether Table is striped                                                                                                                                                                                                                                                   | ^[boolean]                                                                                                                                                           | false                                                                                                                   |\n| border                             | whether Table has vertical border                                                                                                                                                                                                                                          | ^[boolean]                                                                                                                                                           | false                                                                                                                   |\n| size                               | size of Table                                                                                                                                                                                                                                                              | ^[enum]`'' \\| 'large' \\| 'default' \\| 'small'`                                                                                                                       | —                                                                                                                       |\n| fit                                | whether width of column automatically fits its container                                                                                                                                                                                                                   | ^[boolean]                                                                                                                                                           | true                                                                                                                    |\n| show-header                        | whether Table header is visible                                                                                                                                                                                                                                            | ^[boolean]                                                                                                                                                           | true                                                                                                                    |\n| highlight-current-row              | whether current row is highlighted                                                                                                                                                                                                                                         | ^[boolean]                                                                                                                                                           | false                                                                                                                   |\n| current-row-key                    | key of current row, a set only prop                                                                                                                                                                                                                                        | ^[string] / ^[number]                                                                                                                                                | —                                                                                                                       |\n| row-class-name                     | function that returns custom class names for a row, or a string assigning class names for every row                                                                                                                                                                        | ^[Function]`(data: { row: any, rowIndex: number }) => string` / ^[string]                                                                                            | —                                                                                                                       |\n| row-style                          | function that returns custom style for a row, or an object assigning custom style for every row                                                                                                                                                                            | ^[Function]`(data: { row: any, rowIndex: number }) => CSSProperties` / ^[object]`CSSProperties`                                                                      | —                                                                                                                       |\n| cell-class-name                    | function that returns custom class names for a cell, or a string assigning class names for every cell                                                                                                                                                                      | ^[Function]`(data: { row: any, column: any, rowIndex: number, columnIndex: number }) => string` / ^[string]                                                          | —                                                                                                                       |\n| cell-style                         | function that returns custom style for a cell, or an object assigning custom style for every cell                                                                                                                                                                          | ^[Function]`(data: { row: any, column: any, rowIndex: number, columnIndex: number }) => CSSProperties` / ^[object]`CSSProperties`                                    | —                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Defining Form Exposed Methods in Element Plus\nDESCRIPTION: This snippet lists the methods exposed by the Form component in Element Plus, including validation, field resetting, and scrolling functions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/form.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Description                                                        | Type                                                                                                                              |\n| --------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| validate        | Validate the whole form. Receives a callback or returns `Promise`. | ^[Function]`(callback?: FormValidateCallback) => Promise<void>`                                                                   |\n| validateField   | Validate specified fields.                                         | ^[Function]`(props?: Arrayable<FormItemProp> \\| undefined, callback?: FormValidateCallback \\| undefined) => FormValidationResult` |\n| resetFields     | Reset specified fields and remove validation result.               | ^[Function]`(props?: Arrayable<FormItemProp> \\| undefined) => void`                                                               |\n| scrollToField   | Scroll to the specified fields.                                    | ^[Function]`(prop: FormItemProp) => void`                                                                                         |\n| clearValidate   | Clear validation messages for all or specified fields.             | ^[Function]`(props?: Arrayable<FormItemProp> \\| undefined) => void`                                                               |\n| fields ^(2.7.3) | Get all fields context.                                            | ^[array]`FormItemContext[]`                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Tree Structure in Element Plus\nDESCRIPTION: This code snippet demonstrates the basic usage of the Tree V2 component, showing a simple tree structure.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ntree-v2/basic\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Component Setup for Localization\nDESCRIPTION: Shows how to use the ConfigProvider component to configure locale settings at the application root level using Vue 3 composition API.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/i18n.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-config-provider :locale=\"zhCn\">\n    <app />\n  </el-config-provider>\n</template>\n\n<script setup lang=\"ts\">\nimport { ElConfigProvider } from 'element-plus'\nimport zhCn from 'element-plus/es/locale/lang/zh-cn'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Trigger Element in Vue\nDESCRIPTION: Demonstrates using a button to trigger the dropdown and splitting it into a button group. The 'split-button' property is used, and a 'divided' attribute can be added to create a separator line.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/triggering-element\n```\n\n----------------------------------------\n\nTITLE: Registering All Icons Globally in Vue 3\nDESCRIPTION: TypeScript code to import and globally register all icons from @element-plus/icons-vue in a Vue 3 application. This allows using any icon component directly in templates.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// main.ts\n\n// if you're using CDN, please remove this line.\nimport * as ElementPlusIconsVue from '@element-plus/icons-vue'\n\nconst app = createApp(App)\nfor (const [key, component] of Object.entries(ElementPlusIconsVue)) {\n  app.component(key, component)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Element Plus SCSS Theme Configuration\nDESCRIPTION: Example of overriding Element Plus default theme variables using SCSS @forward directive to customize the primary color.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/theming.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@forward 'element-plus/theme-chalk/src/common/var.scss' with (\n  $colors: (\n    'primary': (\n      'base': green,\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Input Component Attributes\nDESCRIPTION: A detailed markdown table documenting all available attributes for the Element Plus Input component. Includes attribute names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                        | Description                                                                                                                            | Type                                                                                                                                                                                                                         | Default |\n| --------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| type                        | type of input                                                                                                                          | ^[string]`'text' \\| 'textarea' \\| 'password' \\| 'button' \\| 'checkbox' \\| 'file' \\| 'number' \\| 'radio' \\| ...` [native input types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types) | text    |\n| model-value / v-model       | binding value                                                                                                                          | ^[string] / ^[number]                                                                                                                                                                                                        | —       |\n| maxlength                   | same as `maxlength` in native input                                                                                                    | ^[string] / ^[number]                                                                                                                                                                                                        | —       |\n| minlength                   | same as `minlength` in native input                                                                                                    | ^[string] / ^[number]                                                                                                                                                                                                        | —       |\n| show-word-limit             | whether show word count, only works when `type` is 'text' or 'textarea'                                                                | ^[boolean]                                                                                                                                                                                                                   | false   |\n```\n\n----------------------------------------\n\nTITLE: Element Plus Table Column Attributes Definition\nDESCRIPTION: Markdown table defining all available attributes for table columns in Element Plus, including type specifications, descriptions, and default values. Covers functionality for sorting, formatting, styling, and behavior configuration.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                       | Description                                                                                                                                                                                                        | Type                                                                                                                                                                        | Default                           |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------- |\n| type                       | type of the column. If set to `selection`, the column will display checkbox. If set to `index`, the column will display index of the row (staring from 1). If set to `expand`, the column will display expand icon | ^[enum]`'default' \\| 'selection' \\| 'index' \\| 'expand'`                                                                                                                    | default                           |\n| index                      | customize indices for each row, works on columns with `type=index`                                                                                                                                                 | ^[number] / ^[Function]`(index: number) => number`                                                                                                                          | —                                 |\n| label                      | column label                                                                                                                                                                                                       | ^[string]                                                                                                                                                                   | —                                 |\n| column-key                 | column's key. If you need to use the filter-change event, you need this attribute to identify which column is being filtered                                                                                       | ^[string]                                                                                                                                                                   | —                                 |\n| prop                       | field name. You can also use its alias: `property`                                                                                                                                                                 | ^[string]                                                                                                                                                                   | —                                 |\n| width                      | column width                                                                                                                                                                                                       | ^[string] / ^[number]                                                                                                                                                       | ''                                |\n| min-width                  | column minimum width. Columns with `width` has a fixed width, while columns with `min-width` has a width that is distributed in proportion                                                                         | ^[string] / ^[number]                                                                                                                                                       | ''                                |\n| fixed                      | whether column is fixed at left / right. Will be fixed at left if `true`                                                                                                                                           | ^[enum]`'left' \\| 'right'` / ^[boolean]                                                                                                                                     | false                             |\n| render-header              | render function for table header of this column                                                                                                                                                                    | ^[Function]`(data: { column: any, $index: number }) => void`                                                                                                                | —                                 |\n| sortable                   | whether column can be sorted. Remote sorting can be done by setting this attribute to 'custom' and listening to the `sort-change` event of Table                                                                   | ^[boolean] / ^[string]                                                                                                                                                      | false                             |\n| sort-method                | sorting method, works when `sortable` is `true`. Should return a number, just like Array.sort                                                                                                                      | ^[Function]`<T = any>(a: T, b: T) => number`                                                                                                                                | —                                 |\n| sort-by                    | specify which property to sort by, works when `sortable` is `true` and `sort-method` is `undefined`. If set to an Array, the column will sequentially sort by the next property if the previous one is equal       | ^[Function]`(row: any, index: number) => string` / ^[string] / ^[object]`string[]`                                                                                          | —                                 |\n| sort-orders                | the order of the sorting strategies used when sorting the data, works when `sortable` is `true`. Accepts an array, as the user clicks on the header, the column is sorted in order of the elements in the array    | ^[object]`('ascending' \\| 'descending' \\| null)[]`                                                                                                                          | ['ascending', 'descending', null] |\n| resizable                  | whether column width can be resized, works when `border` of `el-table` is `true`                                                                                                                                   | ^[boolean]                                                                                                                                                                  | true                              |\n| formatter                  | function that formats cell content                                                                                                                                                                                 | ^[function]`(row: any, column: any, cellValue: any, index: number) => VNode \\| string`                                                                                      | —                                 |\n| show-overflow-tooltip      | whether to hide extra content and show them in a tooltip when hovering on the cell                                                                                                                                 | ^[boolean] / [`object`](#table-attributes) ^(2.2.28)                                                                                                                        | undefined                         |\n| align                      | alignment                                                                                                                                                                                                          | ^[enum]`'left' \\| 'center' \\| 'right'`                                                                                                                                      | left                              |\n| header-align               | alignment of the table header. If omitted, the value of the above `align` attribute will be applied                                                                                                                | ^[enum]`'left' \\| 'center' \\| 'right'`                                                                                                                                      | left                              |\n| class-name                 | class name of cells in the column                                                                                                                                                                                  | ^[string]                                                                                                                                                                   | —                                 |\n```\n\n----------------------------------------\n\nTITLE: Using Image Preview in Element Plus Table Columns\nDESCRIPTION: Example of how to implement image preview functionality within an Element Plus table column. This snippet demonstrates the usage of the el-image component with preview capabilities in a table cell.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-table-column width=\"180\">\n    <template #default=\"scope\">\n      <el-image preview-teleported :preview-src-list=\"srcList\" />\n    </template>\n  </el-table-column>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Element Plus Transitions in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and register Element Plus transition components and styles. It includes importing the collapse transition component, base CSS for fade/zoom effects, and registering the collapse transition as a global component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// collapse\nimport { ElCollapseTransition } from 'element-plus'\n// fade/zoom\nimport 'element-plus/lib/theme-chalk/base.css'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.component(ElCollapseTransition.name, ElCollapseTransition)\n```\n\n----------------------------------------\n\nTITLE: Volar TypeScript Configuration\nDESCRIPTION: TypeScript configuration for Volar to support Element Plus global components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"element-plus/global\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ColorPicker in Vue\nDESCRIPTION: Demonstrates the basic implementation of ColorPicker component. It requires a string-typed variable to be bound to v-model.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/color-picker.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ncolor-picker/basic\n```\n\n----------------------------------------\n\nTITLE: Defining FormItem Attributes in Element Plus\nDESCRIPTION: This snippet details the attributes available for the FormItem component in Element Plus, including prop, label, validation rules, and styling options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/form.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                    | Description                                                                                                                                                            | Type                                                | Default |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | ------- |\n| prop                    | A key of `model`. It could be a path of the property (e.g `a.b.0` or `['a', 'b', '0']`). In the use of `validate` and `resetFields` method, the attribute is required. | ^[string] / ^[string&#91;&#93;]                     | —       |\n| label                   | Label text.                                                                                                                                                            | ^[string]                                           | —       |\n| label-position ^(2.7.7) | Position of item label. If set to `'left'` or `'right'`, `label-width` prop is also required. Default extend `label-postion` of `form`.                                | ^[enum]`'left' \\| 'right' \\| 'top'`                 | ''      |\n| label-width             | Width of label, e.g. `'50px'`. `'auto'` is supported.                                                                                                                  | ^[string] / ^[number]                               | ''      |\n| required                | Whether the field is required or not, will be determined by validation rules if omitted.                                                                               | ^[boolean]                                          | —       |\n| rules                   | Validation rules of form, see the [following table](#formitemrule), more advanced usage at [async-validator](https://github.com/yiminghe/async-validator).             | ^[object]`Arrayable<FormItemRule>`                  | —       |\n| error                   | Field error message, set its value and the field will validate error and show this message immediately.                                                                | ^[string]                                           | —       |\n| show-message            | Whether to show the error message.                                                                                                                                     | ^[boolean]                                          | true    |\n| inline-message          | Inline style validate message.                                                                                                                                         | ^[string] / ^[boolean]                              | ''      |\n| size                    | Control the size of components in this form-item.                                                                                                                      | ^[enum]`'' \\| 'large' \\| 'default' \\| 'small'`      | —       |\n| for                     | Same as for in native label.                                                                                                                                           | ^[string]                                           | —       |\n| validate-status         | Validation state of formItem.                                                                                                                                          | ^[enum]`'' \\| 'error' \\| 'validating' \\| 'success'` | —       |\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Component Props in Markdown\nDESCRIPTION: This snippet defines the props for the Tree component, including options for accordion behavior, indentation, custom icons, lazy loading, and drag-and-drop functionality.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| accordion                    | whether only one node among the same level can be expanded at one time                                                                                                                                                                                                                                                                                                      | ^[boolean]                                             | false   |\n| indent                       | horizontal indentation of nodes in adjacent levels in pixels                                                                                                                                                                                                                                                                                                                | ^[number]                                              | 18      |\n| icon                         | custom tree node icon component                                                                                                                                                                                                                                                                                                                                             | ^[string] / ^[Component]                               | —       |\n| lazy                         | whether to lazy load leaf node, used with `load` attribute                                                                                                                                                                                                                                                                                                                  | ^[boolean]                                             | false   |\n| draggable                    | whether enable tree nodes drag and drop                                                                                                                                                                                                                                                                                                                                     | ^[boolean]                                             | false   |\n| allow-drag                   | this function will be executed before dragging a node. If `false` is returned, the node can not be dragged                                                                                                                                                                                                                                                                  | ^[Function]`(node) => boolean`                         | —       |\n| allow-drop                   | this function will be executed before the dragging node is dropped. If `false` is returned, the dragging node can not be dropped at the target node. `type` has three possible values: 'prev' (inserting the dragging node before the target node), 'inner' (inserting the dragging node to the target node) and 'next' (inserting the dragging node after the target node) | ^[Function]`(draggingNode, dropNode, type) => boolean` | —       |\n```\n\n----------------------------------------\n\nTITLE: Defining Config Provider Interface for Element Plus\nDESCRIPTION: TypeScript interface definitions showing the available configuration options for Config Provider component including locale, size, zIndex and other global settings.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/config-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConfigProviderProps {\n  locale?: TranslatePair;\n  size?: 'large' | 'default' | 'small';\n  zIndex?: number;\n  namespace?: string;\n  button?: {\n    autoInsertSpace?: boolean;\n  };\n  message?: {\n    max?: number;\n    grouping?: boolean;\n    duration?: number;\n    showClose?: boolean;\n    offset?: number;\n  };\n  experimentalFeatures?: object;\n  emptyValues?: any[];\n  valueOnClear?: string | number | boolean | Function;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Drawer Component Attributes\nDESCRIPTION: Detailed table documenting the available attributes for the Element Plus Drawer component, including model values, display settings, event handlers, and styling options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                       | Description                                                                                                                                                                                                                                                                                                  | Type                                                                                                                                                                                           | Default |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| model-value / v-model      | Should Drawer be displayed                                                                                                                                                                                                                                                                                   | ^[boolean]                                                                                                                                                                                     | false   |\n| append-to-body             | Controls should Drawer be inserted to DocumentBody Element, nested Drawer must assign this param to **true**                                                                                                                                                                                                 | ^[boolean]                                                                                                                                                                                     | false   |\n| append-to ^(2.8.0)         | which element the Drawer appends to. Will override `append-to-body`                                                                                                                                                                                                                                          | ^[CSSSelector] / ^[HTMLElement]                                                                                                                                                                | body    |\n| lock-scroll                | whether scroll of body is disabled while Drawer is displayed                                                                                                                                                                                                                                                 | ^[boolean]                                                                                                                                                                                     | true    |\n| before-close               | If set, closing procedure will be halted                                                                                                                                                                                                                                                                     | ^[Function]`(done: (cancel?: boolean) => void) => void(done is function type that accepts a boolean as parameter, calling done with true or without parameter will abort the close procedure)` | —       |\n| close-on-click-modal       | whether the Drawer can be closed by clicking the mask                                                                                                                                                                                                                                                        | ^[boolean]                                                                                                                                                                                     | true    |\n| close-on-press-escape      | Indicates whether Drawer can be closed by pressing ESC                                                                                                                                                                                                                                                       | ^[boolean]                                                                                                                                                                                     | true    |\n| open-delay                 | Time(milliseconds) before open                                                                                                                                                                                                                                                                               | ^[number]                                                                                                                                                                                      | 0       |\n| close-delay                | Time(milliseconds) before close                                                                                                                                                                                                                                                                              | ^[number]                                                                                                                                                                                      | 0       |\n| destroy-on-close           | Indicates whether children should be destroyed after Drawer closed                                                                                                                                                                                                                                           | ^[boolean]                                                                                                                                                                                     | false   |\n| modal                      | Should show shadowing layer                                                                                                                                                                                                                                                                                  | ^[boolean]                                                                                                                                                                                     | true    |\n| direction                  | Drawer's opening direction                                                                                                                                                                                                                                                                                   | ^[enum]`'rtl' \\| 'ltr' \\| 'ttb' \\| 'btt'`                                                                                                                                                      | rtl     |\n| show-close                 | Should show close button at the top right of Drawer                                                                                                                                                                                                                                                          | ^[boolean]                                                                                                                                                                                     | true    |\n| size                       | Drawer's size, if Drawer is horizontal mode, it effects the width property, otherwise it effects the height property, when size is `number` type, it describes the size by unit of pixels; when size is `string` type, it should be used with `x%` notation, other wise it will be interpreted to pixel unit | ^[number] / ^[string]                                                                                                                                                                          | 30%     |\n| title                      | Drawer's title, can also be set by named slot, detailed descriptions can be found in the slot form                                                                                                                                                                                                           | ^[string]                                                                                                                                                                                      | —       |\n| withHeader                 | Flag that controls the header section's existance, default to true, when withHeader set to false, both `title attribute` and `title slot` won't work                                                                                                                                                         | ^[boolean]                                                                                                                                                                                     | true    |\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Upload\nDESCRIPTION: Shows implementation of drag and drop file upload functionality within a designated area.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nupload/drag-and-drop\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Table Column Types in TypeScript\nDESCRIPTION: Type declarations for Sort interface and TreeNode interface used in the Element Plus Table component. These interfaces define the structure for sorting functionality and tree-structured data display in tables.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Sort {\n  prop: string\n  order: 'ascending' | 'descending'\n  init?: any\n  silent?: any\n}\n\ninterface TreeNode {\n  expanded?: boolean\n  loading?: boolean\n  noLazyChildren?: boolean\n  indent?: number\n  level?: number\n  display?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Upload Implementation\nDESCRIPTION: Demonstrates avatar upload functionality with file format and size restrictions using the before-upload hook.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nupload/avatar\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing MessageBox in Vue 3 with TypeScript\nDESCRIPTION: Shows how to import the MessageBox component and use it with app context inheritance in a Vue 3 setup method with TypeScript.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/message-box.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCurrentInstance } from 'vue'\nimport { ElMessageBox } from 'element-plus'\n\n// in your setup method\nconst { appContext } = getCurrentInstance()!\n// You can pass it like:\nElMessageBox({}, appContext)\n// or if you are using variants\nElMessageBox.alert('Hello world!', 'Title', {}, appContext)\n```\n\n----------------------------------------\n\nTITLE: Basic Virtualized Table Implementation\nDESCRIPTION: Example showing a basic virtualized table with 10 columns and 1000 rows displaying user data.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/basic\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Props in Markdown\nDESCRIPTION: This snippet defines various props for a Select component, including their descriptions, types, and default values. It covers a wide range of functionalities such as filtering, dropdown behavior, customization, and accessibility.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| reserve-keyword                 | when `multiple` and `filterable` is true, whether to reserve current keyword after selecting an option                | ^[boolean]                                                                                                                                                                  | true                                           |\n| default-first-option            | select first matching option on enter key. Use with `filterable` or `remote`                                          | ^[boolean]                                                                                                                                                                  | false                                          |\n| teleported                      | whether select dropdown is teleported, if `true` it will be teleported to where `append-to` sets                      | ^[boolean]                                                                                                                                                                  | true                                           |\n| append-to ^(2.8.4)              | which element the select dropdown appends to                                                                          | ^[CSSSelector] / ^[HTMLElement]                                                                                                                                             | —                                              |\n| persistent                      | when select dropdown is inactive and `persistent` is `false`, select dropdown will be destroyed                       | ^[boolean]                                                                                                                                                                  | true                                           |\n| automatic-dropdown              | for non-filterable Select, this prop decides if the option menu pops up when the input is focused                     | ^[boolean]                                                                                                                                                                  | false                                          |\n| clear-icon                      | custom clear icon component                                                                                           | ^[string] / ^[object]`Component`                                                                                                                                            | CircleClose                                    |\n| fit-input-width                 | whether the width of the dropdown is the same as the input                                                            | ^[boolean]                                                                                                                                                                  | false                                          |\n| suffix-icon                     | custom suffix icon component                                                                                          | ^[string] / ^[object]`Component`                                                                                                                                            | ArrowDown                                      |\n| tag-type                        | tag type                                                                                                              | ^[enum]`'' \\| 'success' \\| 'info' \\| 'warning' \\| 'danger'`                                                                                                                 | info                                           |\n| tag-effect ^(2.7.7)             | tag effect                                                                                                            | ^[enum]`'' \\| 'light' \\| 'dark' \\| 'plain'`                                                                                                                                 | light                                          |\n| validate-event                  | whether to trigger form validation                                                                                    | ^[boolean]                                                                                                                                                                  | true                                           |\n| offset ^(2.8.8)                 | offset of the dropdown                                                                                                | ^[number]                                                                                                                                                                   | 12                                             |\n| show-arrow ^(2.8.8)             | whether the dropdown has an arrow                                                                                     | ^[boolean]                                                                                                                                                                  | true                                           |\n| placement ^(2.2.17)             | position of dropdown                                                                                                  | ^[enum]`'top' \\| 'top-start' \\| 'top-end' \\| 'bottom' \\| 'bottom-start' \\| 'bottom-end' \\| 'left' \\| 'left-start' \\| 'left-end' \\| 'right' \\| 'right-start' \\| 'right-end'` | bottom-start                                   |\n| fallback-placements ^(2.5.6)    | list of possible positions for dropdown [popper.js](https://popper.js.org/docs/v2/modifiers/flip/#fallbackplacements) | ^[array]`Placement[]`                                                                                                                                                       | ['bottom-start', 'top-start', 'right', 'left'] |\n| max-collapse-tags ^(2.3.0)      | the max tags number to be shown. To use this, `collapse-tags` must be true                                            | ^[number]                                                                                                                                                                   | 1                                              |\n| popper-options                  | [popper.js](https://popper.js.org/docs/v2/) parameters                                                                | ^[object]refer to [popper.js](https://popper.js.org/docs/v2/) doc                                                                                                           | {}                                             |\n| aria-label ^(a11y)              | same as `aria-label` in native input                                                                                  | ^[string]                                                                                                                                                                   | —                                              |\n| empty-values ^(2.7.0)           | empty values of component, [see config-provider](/en-US/component/config-provider#empty-values-configurations)        | ^[array]                                                                                                                                                                    | —                                              |\n| value-on-clear ^(2.7.0)         | clear return value, [see config-provider](/en-US/component/config-provider#empty-values-configurations)               | ^[string] / ^[number] / ^[boolean] / ^[Function]                                                                                                                            | —                                              |\n| suffix-transition ^(deprecated) | animation when dropdown appears/disappears icon                                                                       | ^[boolean]                                                                                                                                                                  | true                                           |\n| tabindex ^(2.9.0)               | tabindex for input                                                                                                    | ^[string] / ^[number]                                                                                                                                                       | —                                              |\n```\n\n----------------------------------------\n\nTITLE: Implementing CascaderNode Class in TypeScript\nDESCRIPTION: This snippet defines the CascaderNode class, which represents a node in the Cascader component. It includes properties for node information, methods for managing child nodes, and handling check states.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Node {\n  readonly uid: number\n  readonly level: number\n  readonly value: CascaderNodeValue\n  readonly label: string\n  readonly pathNodes: Node[]\n  readonly pathValues: CascaderNodePathValue\n  readonly pathLabels: string[]\n\n  childrenData: ChildrenData\n  children: Node[]\n  text: string\n  loaded: boolean\n  /**\n   * Is it checked\n   *\n   * @default false\n   */\n  checked: boolean\n  /**\n   * Used to indicate the intermediate state of unchecked and fully checked child nodes\n   *\n   * @default false\n   */\n  indeterminate: boolean\n  /**\n   * Loading Status\n   *\n   * @default false\n   */\n  loading: boolean\n\n  // getter\n  isDisabled: boolean\n  isLeaf: boolean\n  valueByOption: CascaderNodeValue | CascaderNodePathValue\n\n  // method\n  appendChild(childData: CascaderOption): Node\n  calcText(allLevels: boolean, separator: string): string\n  broadcast(event: string, ...args: unknown[]): void\n  emit(event: string, ...args: unknown[]): void\n  onParentCheck(checked: boolean): void\n  onChildCheck(): void\n  setCheckState(checked: boolean): void\n  doCheck(checked: boolean): void\n}\n\nNode as CascaderNode\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Element Plus Autocomplete API Reference\nDESCRIPTION: A markdown table documenting the exposed properties, methods, and refs of the Element Plus Autocomplete component. Includes reactive properties like activation state and suggestions, as well as methods for handling selections and keyboard interactions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/autocomplete.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Description                                 | Type                                       |\n| ---------------- | ------------------------------------------- | ------------------------------------------ |\n| activated        | if autocomplete activated                   | ^[object]`Ref<boolean>`                    |\n| blur             | blur the input element                      | ^[Function]`() => void`                    |\n| close            | collapse suggestion list                    | ^[Function]`() => void`                    |\n| focus            | focus the input element                     | ^[Function]`() => void`                    |\n| handleSelect     | triggers when a suggestion is clicked       | ^[Function]`(item: any) => promise<void>`  |\n| handleKeyEnter   | handle keyboard enter event                 | ^[Function]`() => promise<void>`           |\n| highlightedIndex | the index of the currently highlighted item | ^[object]`Ref<number>`                     |\n| highlight        | highlight an item in a suggestion           | ^[Function]`(itemIndex: number) => void`   |\n| inputRef         | el-input component instance                 | ^[object]`Ref<ElInputInstance>`            |\n| loading          | remote search loading indicator             | ^[object]`Ref<boolean>`                    |\n| popperRef        | el-tooltip component instance               | ^[object]`Ref<ElTooltipInstance>`          |\n| suggestions      | fetch suggestions result                    | ^[object]`Ref<record<string, any>>`        |\n| getData ^(2.8.4) | loading suggestion list                     | ^[Function]`(queryString: string) => void` |\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Exposed Methods in Markdown\nDESCRIPTION: This snippet defines the exposed methods for the Cascader component, including their names, descriptions, and types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                          | Description                                                                                                       | Type                                                            |\n| ----------------------------- | ----------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| getCheckedNodes               | get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false` | ^[Function]`(leafOnly: boolean) => CascaderNode[] \\| undefined` |\n| cascaderPanelRef              | cascader panel ref                                                                                                | ^[object]`ComputedRef<any>`                                     |\n| togglePopperVisible ^(2.2.31) | toggle the visible type of popper                                                                                 | ^[Function]`(visible?: boolean) => void`                        |\n| contentRef                    | cascader content ref                                                                                              | ^[object]`ComputedRef<any>`                                     |\n| presentText ^(2.8.4)          | selected content text                                                                                             | ^[object]`ComputedRef<string>`                                  |\n```\n\n----------------------------------------\n\nTITLE: Accordion-style Tree Implementation\nDESCRIPTION: Demonstrates how to implement accordion-style behavior where only one node can be expanded at a time within the same level.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Defining TableV2 Events in Markdown\nDESCRIPTION: A markdown table listing all events emitted by the TableV2 component, including their names, descriptions, and parameters. This table covers events such as column sorting, row expansion, scrolling, and row rendering.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                 | Description                                                           | Parameters                                 |\n| -------------------- | --------------------------------------------------------------------- | ------------------------------------------ |\n| column-sort          | Invoked when column sorted                                            | `object`<[ColumnSortParam](#typings)>    |\n| expanded-rows-change | Invoked when expanded rows changed                                    | [KeyType[]](#typings)                      |\n| end-reached          | Invoked when the end of the table is reached                          | —                                          |\n| scroll               | Invoked after scrolling                                               | `object`<[ScrollParams](#typings)>       |\n| rows-rendered        | Invoked when rows are rendered                                        | `object`<[RowsRenderedParams](#typings)> |\n| row-expand           | Invoked when expand/collapse the tree node by clicking the arrow icon | `object`<[RowExpandParams](#typings)>    |\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage\nDESCRIPTION: Basic implementation of Switch component with v-model binding and color customization using CSS variables.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nswitch/basic\n```\n\n----------------------------------------\n\nTITLE: Handling Dropdown Command Events in Vue\nDESCRIPTION: Shows how to handle click events on dropdown items. Each item can fire an event with a custom parameter.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/command-event\n```\n\n----------------------------------------\n\nTITLE: Importing MessageBox on Demand in Element Plus\nDESCRIPTION: Demonstrates how to import the MessageBox component on demand in Element Plus, along with its available methods.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/message-box.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElMessageBox } from 'element-plus'\n```\n\n----------------------------------------\n\nTITLE: Element Plus Slider Attributes Table\nDESCRIPTION: A markdown table detailing all available attributes for the Element Plus Slider component, including their names, descriptions, types, and default values. The table covers functionality like value binding, range selection, input controls, tooltips, and accessibility features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/slider.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                        | Description                                                                                                                                             | Type                                                                                                                                                                        | Default |\n| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| model-value / v-model       | binding value                                                                                                                                           | ^[number] / ^[object]`number[]`                                                                                                                                             | 0       |\n| min                         | minimum value                                                                                                                                           | ^[number]                                                                                                                                                                   | 0       |\n| max                         | maximum value                                                                                                                                           | ^[number]                                                                                                                                                                   | 100     |\n| disabled                    | whether Slider is disabled                                                                                                                              | ^[boolean]                                                                                                                                                                  | false   |\n| step                        | step size                                                                                                                                               | ^[number]                                                                                                                                                                   | 1       |\n| show-input                  | whether to display an input box, works when `range` is false                                                                                            | ^[boolean]                                                                                                                                                                  | false   |\n| show-input-controls         | whether to display control buttons when `show-input` is true                                                                                            | ^[boolean]                                                                                                                                                                  | true    |\n| size                        | size of the slider wrapper, will not work in vertical mode                                                                                              | ^[enum]`'' \\| 'large' \\| 'default' \\| 'small'`                                                                                                                              | default |\n| input-size                  | size of the input box, when set `size`, the default is the value of `size`                                                                              | ^[enum]`'' \\| 'large' \\| 'default' \\| 'small'`                                                                                                                              | default |\n| show-stops                  | whether to display breakpoints                                                                                                                          | ^[boolean]                                                                                                                                                                  | false   |\n| show-tooltip                | whether to display tooltip value                                                                                                                        | ^[boolean]                                                                                                                                                                  | true    |\n| format-tooltip              | format to display tooltip value                                                                                                                         | ^[Function]`(value: number) => number \\| string`                                                                                                                            | —       |\n| range                       | whether to select a range                                                                                                                               | ^[boolean]                                                                                                                                                                  | false   |\n| vertical                    | vertical mode                                                                                                                                           | ^[boolean]                                                                                                                                                                  | false   |\n| height                      | slider height, required in vertical mode                                                                                                                | ^[string]                                                                                                                                                                   | —       |\n| aria-label ^(a11y) ^(2.7.2) | native `aria-label` attribute                                                                                                                           | ^[string]                                                                                                                                                                   | —       |\n| range-start-label           | when `range` is true, screen reader label for the start of the range                                                                                    | ^[string]                                                                                                                                                                   | —       |\n| range-end-label             | when `range` is true, screen reader label for the end of the range                                                                                      | ^[string]                                                                                                                                                                   | —       |\n| format-value-text           | format to display the `aria-valuenow` attribute for screen readers                                                                                      | ^[Function]`(value: number) => string`                                                                                                                                      | —       |\n| debounce                    | debounce delay when typing, in milliseconds, works when `show-input` is true                                                                            | ^[number]                                                                                                                                                                   | 300     |\n| tooltip-class               | custom class name for the tooltip                                                                                                                       | ^[string]                                                                                                                                                                   | —       |\n| placement                   | position of Tooltip                                                                                                                                     | ^[enum]`'top' \\| 'top-start' \\| 'top-end' \\| 'bottom' \\| 'bottom-start' \\| 'bottom-end' \\| 'left' \\| 'left-start' \\| 'left-end' \\| 'right' \\| 'right-start' \\| 'right-end'` | top     |\n| marks                       | marks, type of key must be `number` and must in closed interval `[min, max]`, each mark can custom style                                                | ^[object]`SliderMarks`                                                                                                                                                      | —       |\n| validate-event              | whether to trigger form validation                                                                                                                      | ^[boolean]                                                                                                                                                                  | true    |\n```\n\n----------------------------------------\n\nTITLE: Basic Drawer Usage in Element Plus\nDESCRIPTION: Demonstrates how to implement a basic drawer component that slides in from the right side of the screen with title, body and footer sections. It shows how to control visibility using v-model and configure its behavior with direction and size attributes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ndrawer/basic-usage\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Component Methods in Markdown\nDESCRIPTION: This snippet lists and describes various methods available on the Tree component for filtering, updating, and manipulating tree nodes and their states.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Description | Parameters |\n| --------------- | ---------------------------------------- | ---------------------------------------- |\n| filter | filter all tree nodes, filtered nodes will be hidden | Accept a parameter which will be used as first parameter for filter-node-method |\n| updateKeyChildren | set new data to node, only works when `node-key` is assigned | (key, data) Accept two parameters: 1. key of node 2. new data |\n| getCheckedNodes | If the node can be selected (`show-checkbox` is `true`), it returns the currently selected array of nodes | (leafOnly, includeHalfChecked) Accept two boolean type parameters: 1. default value is `false`. If the parameter is `true`, it only returns the currently selected array of sub-nodes. 2. default value is `false`. If the parameter is `true`, the return value contains halfchecked nodes |\n| setCheckedNodes | set certain nodes to be checked, only works when `node-key` is assigned | an array of nodes to be checked |\n| getCheckedKeys | If the node can be selected (`show-checkbox` is `true`), it returns the currently selected array of node's keys | (leafOnly) Accept a boolean type parameter whose default value is `false`. If the parameter is `true`, it only returns the currently selected array of sub-nodes. |\n| setCheckedKeys | set certain nodes to be checked, only works when `node-key` is assigned | (keys, leafOnly) Accept two parameters: 1. an array of node's keys to be checked 2. a boolean parameter. If set to `true`, only the checked status of leaf nodes will be set. The default value is `false`. |\n| setChecked | set node to be checked or not, only works when `node-key` is assigned | (key/data, checked, deep) Accept three parameters: 1. node's key or data to be checked 2. a boolean typed parameter indicating checked or not. 3. a boolean typed parameter indicating deep or not. |\n| getHalfCheckedNodes | If the node can be selected (`show-checkbox` is `true`), it returns the currently half selected array of nodes | — |\n| getHalfCheckedKeys | If the node can be selected (`show-checkbox` is `true`), it returns the currently half selected array of node's keys | — |\n| getCurrentKey | return the highlight node's key (null if no node is highlighted) | — |\n| getCurrentNode | return the highlight node's data (null if no node is highlighted) | — |\n| setCurrentKey | set highlighted node by key, only works when `node-key` is assigned | (key, shouldAutoExpandParent=true) 1. the node's key to be highlighted. If `null`, cancel the currently highlighted node 2. whether to automatically expand parent node |\n| setCurrentNode | set highlighted node, only works when `node-key` is assigned | (node, shouldAutoExpandParent=true) 1. the node to be highlighted 2. whether to automatically expand parent node |\n| getNode | get node by data or key | (data) the node's data or key |\n| remove | remove a node, only works when node-key is assigned | (data) the node's data or node to be deleted |\n| append | append a child node to a given node in the tree | (data, parentNode) 1. child node's data to be appended 2. parent node's data, key or node |\n| insertBefore | insert a node before a given node in the tree | (data, refNode) 1. node's data to be inserted 2. reference node's data, key or node |\n| insertAfter | insert a node after a given node in the tree | (data, refNode) 1. node's data to be inserted 2. reference node's data, key or node |\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderPanel Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes for the CascaderPanel component, including their names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                  | Description                                                                              | Type                                                       | Default |\n| --------------------- | ---------------------------------------------------------------------------------------- | ---------------------------------------------------------- | ------- |\n| model-value / v-model | binding value                                                                            | ^[string]/^[number]/^[object]`string[] \\| number[] \\| any` | —       |\n| options               | data of the options, the key of `value` and `label` can be customize by `CascaderProps`. | ^[object]`Record<string, unknown>[]`                       | —       |\n| props                 | configuration options, see the following `CascaderProps` table.                          | ^[object]`CascaderProps`                                   | —       |\n```\n\n----------------------------------------\n\nTITLE: Triggering Events with Popconfirm in Element Plus\nDESCRIPTION: This snippet demonstrates how to trigger events using the Popconfirm component. It shows how to handle click events on the confirmation button.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popconfirm.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\npopconfirm/trigger-event\n```\n\n----------------------------------------\n\nTITLE: Type Declarations for Element Plus Upload Component\nDESCRIPTION: TypeScript type declarations defining the core interfaces and types used by the Upload component, including file handling, upload status, and request options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadFiles = UploadFile[]\n\ntype UploadUserFile = Omit<UploadFile, 'status' | 'uid'> &\n  Partial<Pick<UploadFile, 'status' | 'uid'>>\n\ntype UploadStatus = 'ready' | 'uploading' | 'success' | 'fail'\n\ntype Awaitable<T> = Promise<T> | T\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] }\n\ninterface UploadFile {\n  name: string\n  percentage?: number\n  status: UploadStatus\n  size?: number\n  response?: unknown\n  uid: number\n  url?: string\n  raw?: UploadRawFile\n}\n\ninterface UploadProgressEvent extends ProgressEvent {\n  percent: number\n}\n\ninterface UploadRawFile extends File {\n  uid: number\n  isDirectory?: boolean\n}\n\ninterface UploadRequestOptions {\n  action: string\n  method: string\n  data: Record<string, string | Blob | [string | Blob, string]>\n  filename: string\n  file: File\n  headers: Headers | Record<string, string | number | null | undefined>\n  onError: (evt: UploadAjaxError) => void\n  onProgress: (evt: UploadProgressEvent) => void\n  onSuccess: (response: any) => void\n  withCredentials: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: TimePicker Component API Documentation\nDESCRIPTION: Comprehensive API documentation for the TimePicker component, detailing all available attributes including model binding, format options, validation, and accessibility features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/time-picker.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description | Type | Default |\n| --------------------------- | -------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------- |\n| model-value / v-model | binding value, if it is an array, the length should be 2 | ^[number] / ^[string] / ^[object]`Date \\| [Date, Date] \\| [number, number] \\| [string, string]` | '' |\n| readonly | whether TimePicker is read only | ^[boolean] | false |\n| disabled | whether TimePicker is disabled | ^[boolean] | false |\n| editable | whether the input is editable | ^[boolean] | true |\n| clearable | whether to show clear button | ^[boolean] | true |\n| size | size of Input | ^[enum]`'large' \\| 'default' \\| 'small'` | — |\n| placeholder | placeholder in non-range mode | ^[string] | '' |\n| start-placeholder | placeholder for the start time in range mode | ^[string] | — |\n| end-placeholder | placeholder for the end time in range mode | ^[string] | — |\n| is-range | whether to pick a time range | ^[boolean] | false |\n| arrow-control | whether to pick time using arrow buttons | ^[boolean] | false |\n| popper-class | custom class name for TimePicker's dropdown | ^[string] | '' |\n| range-separator | range separator | ^[string] | '-' |\n| format | format of the displayed value in the input box | ^[string] | — |\n| default-value | optional, default date of the calendar | ^[Date] / ^[object]`[Date, Date]` | — |\n| value-format | optional, format of binding value | ^[string] | — |\n| id | same as `id` in native input | ^[string] / ^[object]`[string, string]` | — |\n| name | same as `name` in native input | ^[string] | '' |\n| aria-label | same as `aria-label` in native input | ^[string] | — |\n| prefix-icon | Custom prefix icon component | ^[string] / ^[Component] | Clock |\n| clear-icon | Custom clear icon component | ^[string] / ^[Component] | CircleClose |\n| disabled-hours | To specify the array of hours that cannot be selected | ^[Function]`(role: string, comparingDate?: Dayjs) => number[]` | — |\n| disabled-minutes | To specify the array of minutes that cannot be selected | ^[Function]`(hour: number, role: string, comparingDate?: Dayjs) => number[]` | — |\n| disabled-seconds | To specify the array of seconds that cannot be selected | ^[Function]`(hour: number, minute: number, role: string, comparingDate?: Dayjs) => number[]` | — |\n| teleported | whether time-picker dropdown is teleported to the body | ^[boolean] | true |\n| tabindex | input tabindex | ^[string] / ^[number] | 0 |\n| empty-values | empty values of component | ^[array] | — |\n| value-on-clear | clear return value | ^[string] / ^[number] / ^[boolean] / ^[Function] | — |\n| label | same as `aria-label` in native input | ^[string] | — |\n```\n\n----------------------------------------\n\nTITLE: Remote Search Autocomplete in Vue\nDESCRIPTION: Demonstrates how to implement server-side search functionality with the Autocomplete component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/autocomplete.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nautocomplete/remote-search\n```\n\n----------------------------------------\n\nTITLE: Injecting Unique ID for Element Plus SSR\nDESCRIPTION: Demonstrates how to provide a unique ID injection for Element Plus components during SSR to avoid hydration errors. This snippet shows the setup in the main application file.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/ssr.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// irrelevant code omitted\nimport { createApp } from 'vue'\nimport { ID_INJECTION_KEY } from 'element-plus'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.provide(ID_INJECTION_KEY, {\n  prefix: 1024,\n  current: 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Component Import Example\nDESCRIPTION: Example of manually importing and using an Element Plus component in a Vue component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-button>I am ElButton</el-button>\n</template>\n\n<script>\nimport { ElButton } from 'element-plus'\nexport default {\n  components: { ElButton },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Autocomplete Usage in Vue\nDESCRIPTION: Demonstrates how to use the Autocomplete component to provide input suggestions. The fetch-suggestions attribute is a method that returns suggested inputs via a callback.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/autocomplete.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nautocomplete/autocomplete\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Props in Markdown\nDESCRIPTION: This snippet lists the props available for the Drawer component, including their descriptions, types, and default values. It covers customization options like modal class, header class, body class, footer class, z-index, and accessibility attributes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| modal-class                | Extra class names for shadowing layer                                                                                                                                                                                                                                                                        | ^[string]                                                                                                                                                                                      | —       |\n| header-class ^(2.9.3)      | custom class names for header wrapper                                                                                                                                                                                                                                                                        | ^[string]                                                                                                                                                                                      | —       |\n| body-class ^(2.9.3)        | custom class names for body wrapper                                                                                                                                                                                                                                                                          | ^[string]                                                                                                                                                                                      | —       |\n| footer-class ^(2.9.3)      | custom class names for footer wrapper                                                                                                                                                                                                                                                                        | ^[string]                                                                                                                                                                                      | —       |\n| z-index                    | set z-index                                                                                                                                                                                                                                                                                                  | ^[number]                                                                                                                                                                                      | —       |\n| header-aria-level ^(a11y)  | header's `aria-level` attribute                                                                                                                                                                                                                                                                              | ^[string]                                                                                                                                                                                      | 2       |\n| custom-class ^(deprecated) | Extra class names for Drawer                                                                                                                                                                                                                                                                                 | ^[string]                                                                                                                                                                                      | —       |\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Exposed Methods in Markdown\nDESCRIPTION: This snippet outlines the methods exposed by the TimePicker component. It includes method names, descriptions, and their function signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/time-picker.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                  | Description                    | Type                    |\n| --------------------- | ------------------------------ | ----------------------- |\n| focus                 | focus the TimePicker component | ^[Function]`() => void` |\n| blur                  | blur the TimePicker component  | ^[Function]`() => void` |\n| handleOpen ^(2.2.16)  | open the TimePicker popper     | ^[Function]`() => void` |\n| handleClose ^(2.2.16) | close the TimePicker popper    | ^[Function]`() => void` |\n```\n\n----------------------------------------\n\nTITLE: Tree Node Filtering Implementation\nDESCRIPTION: Shows how to implement node filtering functionality using the filter method and filter-node-method.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Element Plus Select Component Attributes Table\nDESCRIPTION: Markdown table documenting all available attributes for the Select component, including their names, descriptions, accepted types, and default values. Includes both basic attributes like model-value and advanced features like remote data loading and filtering options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                            | Description                                                                                                           | Type                                                                                                                                                                        | Default                                        |\n| ------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------- |\n| model-value / v-model           | binding value                                                                                                         | ^[string] / ^[number] / ^[boolean] / ^[object] / ^[array]                                                                                                                   | —                                              |\n| multiple                        | whether multiple-select is activated                                                                                  | ^[boolean]                                                                                                                                                                  | false                                          |\n| disabled                        | whether Select is disabled                                                                                            | ^[boolean]                                                                                                                                                                  | false                                          |\n| value-key                       | unique identity key name for value, required when value is an object                                                  | ^[string]                                                                                                                                                                   | value                                          |\n| size                            | size of Input                                                                                                         | ^[enum]`'' \\| 'large' \\| 'default' \\| 'small'`                                                                                                                              | —                                              |\n| clearable                       | whether select can be cleared                                                                                         | ^[boolean]                                                                                                                                                                  | false                                          |\n| collapse-tags                   | whether to collapse tags to a text when multiple selecting                                                            | ^[boolean]                                                                                                                                                                  | false                                          |\n| collapse-tags-tooltip ^(2.3.0)  | whether show all selected tags when mouse hover text of collapse-tags. To use this, `collapse-tags` must be true      | ^[boolean]                                                                                                                                                                  | false                                          |\n| multiple-limit                  | maximum number of options user can select when `multiple` is `true`. No limit when set to 0                           | ^[number]                                                                                                                                                                   | 0                                              |\n| name                            | the name attribute of select input                                                                                    | ^[string]                                                                                                                                                                   | —                                              |\n| effect                          | tooltip theme, built-in theme: `dark` / `light`                                                                       | ^[enum]`'dark' \\| 'light'` / ^[string]                                                                                                                                      | light                                          |\n| autocomplete                    | the autocomplete attribute of select input                                                                            | ^[string]                                                                                                                                                                   | off                                            |\n| placeholder                     | placeholder, default is 'Select'                                                                                      | ^[string]                                                                                                                                                                   | —                                              |\n| filterable                      | whether Select is filterable                                                                                          | ^[boolean]                                                                                                                                                                  | false                                          |\n| allow-create                    | whether creating new items is allowed. To use this, `filterable` must be true                                         | ^[boolean]                                                                                                                                                                  | false                                          |\n| filter-method                   | custom filter method                                                                                                  | ^[Function]`() => void`                                                                                                                                                     | —                                              |\n| remote                          | whether options are loaded from server                                                                                | ^[boolean]                                                                                                                                                                  | false                                          |\n| remote-method                   | custom remote search method                                                                                           | ^[Function]`() => void`                                                                                                                                                     | —                                              |\n| remote-show-suffix              | in remote search method show suffix icon                                                                              | ^[boolean]                                                                                                                                                                  | false                                          |\n| loading                         | whether Select is loading data from server                                                                            | ^[boolean]                                                                                                                                                                  | false                                          |\n| loading-text                    | displayed text while loading data from server, default is 'Loading'                                                   | ^[string]                                                                                                                                                                   | —                                              |\n| no-match-text                   | displayed text when no data matches the filtering query, you can also use slot `empty`, default is 'No matching data' | ^[string]                                                                                                                                                                   | —                                              |\n| no-data-text                    | displayed text when there is no options, you can also use slot `empty`, default is 'No data'                          | ^[string]                                                                                                                                                                   | —                                              |\n| popper-class                    | custom class name for Select's dropdown                                                                               | ^[string]                                                                                                                                                                   | ''                                             |\n```\n\n----------------------------------------\n\nTITLE: Type Declarations for Element Plus Menu Components\nDESCRIPTION: TypeScript type declarations for menu component events and interfaces. Includes types for menu selection, opening/closing events, and menu item registration/clicking.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/menu.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param index index of activated menu\n * @param indexPath index path of activated menu\n * @param item the selected menu item\n * @param routerResult result returned by `vue-router` if `router` is enabled\n */\ntype MenuSelectEvent = (\n  index: string,\n  indexPath: string[],\n  item: MenuItemClicked,\n  routerResult?: Promise<void | NavigationFailure>\n) => void\n\n/**\n * @param index index of expanded sub-menu\n * @param indexPath index path of expanded sub-menu\n */\ntype MenuOpenEvent = (index: string, indexPath: string[]) => void\n\n/**\n * @param index index of collapsed sub-menu\n * @param indexPath index path of collapsed sub-menu\n */\ntype MenuCloseEvent = (index: string, indexPath: string[]) => void\n\ninterface MenuItemRegistered {\n  index: string\n  indexPath: string[]\n  active: boolean\n}\n\ninterface MenuItemClicked {\n  index: string\n  indexPath: string[]\n  route?: RouteLocationRaw\n}\n```\n\n----------------------------------------\n\nTITLE: Selection Feature Implementation\nDESCRIPTION: Demonstration of implementing row selection functionality in the virtualized table.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/selection\n```\n\n----------------------------------------\n\nTITLE: Managing Loading Instance\nDESCRIPTION: Shows how to create and close a loading instance asynchronously using nextTick.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/loading.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst loadingInstance = ElLoading.service(options)\nnextTick(() => {\n  // Loading should be closed asynchronously\n  loadingInstance.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Radio Component Usage Example in Vue.js\nDESCRIPTION: Example of how to use the Radio component in Element-Plus with both new and deprecated API patterns. Shows the recommended approach using the value property (for versions >=2.6.0) and the deprecated approach using label as value.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/radio.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-radio-group v-model=\"radio1\">\n    <!-- works when >=2.6.0, recommended ✔️ not work when <2.6.0 ❌ -->\n    <el-radio value=\"Value 1\">Option 1</el-radio>\n    <!-- works when <2.6.0, deprecated act as value when >=3.0.0 -->\n    <el-radio label=\"Label 2 & Value 2\">Option 2</el-radio>\n  </el-radio-group>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Leaf Node Implementation with Lazy Loading\nDESCRIPTION: Demonstrates how to implement custom leaf nodes in lazy loading mode, including handling of drop-down buttons and leaf node prediction.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Defining TourStep Attributes in Markdown\nDESCRIPTION: This snippet details the attributes of the TourStep component, including their properties, descriptions, types, and default values. It covers various customization options such as target element selection, arrow visibility, placement, and styling.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                 | Description                                                                                                                                                                                            | Type                                                                                                                                                                        | Default   |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n| target                   | get the element the guide card points to. Empty makes it show in center of screen. the string and Function types are supported since ^(2.5.2). the string type is selectors of document.querySelector. | `HTMLElement` \\| `string` \\| ^[Function]`() => HTMLElement`                                                                                                                 | —         |\n| show-arrow               | whether to show the arrow                                                                                                                                                                              | `boolean`                                                                                                                                                                   | `true`    |\n| title                    | title                                                                                                                                                                                                  | `string`                                                                                                                                                                    | —         |\n| description              | description                                                                                                                                                                                            | `string`                                                                                                                                                                    | —         |\n| placement                | position of the guide card relative to the target element                                                                                                                                              | ^[enum]`'top' \\| 'top-start' \\| 'top-end' \\| 'bottom' \\| 'bottom-start' \\| 'bottom-end' \\| 'left' \\| 'left-start' \\| 'left-end' \\| 'right' \\| 'right-start' \\| 'right-end'` | `bottom`  |\n| content-style            | custom style for content                                                                                                                                                                               | `CSSProperties`                                                                                                                                                             | —         |\n| mask                     | whether to enable masking, change mask style and fill color by pass custom props                                                                                                                       | `boolean` \\| ^[Object]`{ style?: CSSProperties; color?: string; }`                                                                                                          | `true`    |\n| type                     | type, affects the background color and text color                                                                                                                                                      | `default` \\| `primary`                                                                                                                                                      | `default` |\n| next-button-props        | properties of the Next button                                                                                                                                                                          | ^[Object]`{ children: VueNode \\| string; onClick: Function }`                                                                                                               | —         |\n| prev-button-props        | properties of the previous button                                                                                                                                                                      | ^[Object]`{ children: VueNode \\| string; onClick: Function }`                                                                                                               | —         |\n| scroll-into-view-options | support pass custom scrollIntoView options, the default follows the `scrollIntoViewOptions` property of Tour                                                                                           | `boolean` \\| `ScrollIntoViewOptions`                                                                                                                                        | —         |\n| show-close               | whether to show a close button                                                                                                                                                                         | `boolean`                                                                                                                                                                   | `true`    |\n| close-icon               | custom close icon, default is Close                                                                                                                                                                    | `string` \\| `Component`                                                                                                                                                     | —         |\n```\n\n----------------------------------------\n\nTITLE: Global Locale Configuration in Element Plus\nDESCRIPTION: Demonstrates how to configure Element Plus to use a different locale globally using the main application entry point.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/i18n.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ElementPlus from 'element-plus'\nimport zhCn from 'element-plus/es/locale/lang/zh-cn'\n\napp.use(ElementPlus, {\n  locale: zhCn,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Nodes in Tree V2 Component\nDESCRIPTION: This snippet shows how to implement selectable nodes in the Tree V2 component, allowing for node selection functionality.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ntree-v2/selectable\n```\n\n----------------------------------------\n\nTITLE: Defining TableV2 Attributes in Markdown\nDESCRIPTION: A markdown table listing all available attributes for the TableV2 component, including their names, descriptions, types, and default values. This comprehensive list covers various customization options such as caching, row heights, custom classes, and sorting.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Description                                                                                                                | Type                                                   | Default   |\n| ------------------------- | -------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ | --------- |\n| cache                     | Number of rows rendered in advance to boost the performance                                                                | `number`                                               | 2         |\n| estimated-row-height      | The estimated row height for rendering dynamic height rows                                                                 | `number`                                               | —         |\n| header-class              | Customized class name passed to header wrapper                                                                             | `string` / Function<[HeaderClassGetter](#typings)>     | —         |\n| header-props              | Customized props name passed to header component                                                                           | `object` / Function<[HeaderPropsGetter](#typings)>     | —         |\n| header-cell-props         | Customized props name passed to header cell component                                                                      | `object` / Function<[HeaderCellPropsGetter](#typings)> | —         |\n| header-height             | The height of the header is set by `height`. If given an array, it renders header rows equal to its length                 | `number`/ `number[]`                                   | 50        |\n| footer-height             | The height of the footer element, when provided, will be part to the calculation of the table's height.                    | `number`                                               | 0         |\n| row-class                 | Customized class name passed to row wrapper                                                                                | `string` / Function<[RowClassGetter](#typings)>        | —         |\n| row-key                   | The key of each row, if not provided, will be the index of the row                                                         | `string` / `Symbol` / `number`                         | id        |\n| row-props                 | Customized props name passed to row component                                                                              | `object` / Function<[RowPropsGetter](#typings)>        | —         |\n| row-height                | The height of each row, used for calculating the total height of the table                                                 | `number`                                               | 50        |\n| row-event-handlers        | A collection of handlers attached to each row                                                                              | `object`<[RowEventHandlers](#typings)>               | —         |\n| cell-props                | extra props passed to each cell (except header cells)                                                                      | `object` / Function<[CellPropsGetter](#typings)>       | —         |\n| columns                   | An array of column definitions.                                                                                            | [Column[]](#column-attribute)                          | —         |\n| data                      | An array of data to be rendered in the table.                                                                              | [Data[]](#typings)                                     | []        |\n| data-getter               | A method to customize data fetch from the data source.                                                                     | Function<[DataGetter<T>](#typings)>                  | —         |\n| fixed-data                | Data for rendering rows above the main content and below the header                                                        | `object`<[Data](#typings)>                           | —         |\n| expand-column-key         | The column key indicates which row is expandable                                                                           | `string`                                               | —         |\n| expanded-row-keys         | An array of keys for expanded rows, can be used with `v-model`                                                             | [KeyType[]](#typings)                                  | —         |\n| default-expanded-row-keys | An array of keys for default expanded rows, **NON REACTIVE**                                                               | [KeyType[]](#typings)                                  | —         |\n| class                     | Class name for the virtual table, will be applied to all three tables (left, right, main)                                  | `string` / `array` / `object`                          | —         |\n| fixed                     | Flag indicates the table column's width to be fixed or flexible.                                                           | `boolean`                                              | false     |\n| width ^(required)         | Width of the table                                                                                                         | `number`                                               | —         |\n| height ^(required)        | Height of the table                                                                                                         | `number`                                               | —         |\n| max-height                | Maximum height of the table                                                                                                | `number`                                               | —         |\n| indent-size               | horizontal indentation of tree table                                                                                       | `number`                                               | 12        |\n| h-scrollbar-size          | Indicates the horizontal scrollbar's size for the table, used to prevent the horizontal and vertical scrollbar to collapse | `number`                                               | 6         |\n| v-scrollbar-size          | Indicates the vertical scrollbar's size for the table, used to prevent the horizontal and vertical scrollbar to collapse   | `number`                                               | 6         |\n| scrollbar-always-on       | If true, the scrollbar will always be shown instead of when mouse is placed above the table                                | `boolean`                                              | false     |\n| sort-by                   | Sort indicator                                                                                                             | `object`<[SortBy](#typings)>                         | {}        |\n| sort-state                | Multiple sort indicator                                                                                                    | `object`<[SortState](#typings)>                      | undefined |\n```\n\n----------------------------------------\n\nTITLE: Customizable Transfer Component\nDESCRIPTION: Enhanced Transfer component with customizable titles, button texts, render functions, and footer content. Supports initial checked states and custom event handling.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ntransfer/customizable\n```\n\n----------------------------------------\n\nTITLE: Inline Editing Implementation\nDESCRIPTION: Example showing how to enable inline editing functionality for table cells.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/inline-editing\n```\n\n----------------------------------------\n\nTITLE: Sticky Rows Implementation\nDESCRIPTION: Example of implementing sticky rows that remain fixed at the top during scrolling.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/sticky-rows\n```\n\n----------------------------------------\n\nTITLE: Advanced Icon Usage with Element Plus\nDESCRIPTION: Vue template showing enhanced icon usage with various attributes and classes. Demonstrates rotation, color customization, and integration with buttons. The is-loading class enables a 360-degree rotation animation.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>\n    with extra class <b>is-loading</b>, your icon is able to rotate 360 deg in 2\n    seconds, you can also override this\n  </p>\n  <el-icon :size=\"20\">\n    <Edit />\n  </el-icon>\n  <el-icon color=\"#409efc\" class=\"no-inherit\">\n    <Share />\n  </el-icon>\n  <el-icon>\n    <Delete />\n  </el-icon>\n  <el-icon class=\"is-loading\">\n    <Loading />\n  </el-icon>\n  <el-button type=\"primary\">\n    <el-icon style=\"vertical-align: middle\">\n      <Search />\n    </el-icon>\n    <span style=\"vertical-align: middle\"> Search </span>\n  </el-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Controlled Tooltip Implementation\nDESCRIPTION: Shows how to implement parent-controlled tooltips using two-way binding with the visible attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntooltip/controlled\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dropdown in Vue\nDESCRIPTION: Demonstrates how to create a basic dropdown menu that unfolds on hover. The triggering element is in the default slot, while the dropdown content is in the 'dropdown' named slot.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/basic-usage\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Namespace in Vue Component\nDESCRIPTION: Shows how to wrap the root component with ElConfigProvider to set a custom namespace 'ep' for Element Plus components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/namespace.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-config-provider namespace=\"ep\">\n    <!-- ... -->\n  </el-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Autocomplete Template in Vue\nDESCRIPTION: Shows how to customize the display of suggestions using scoped slots. The suggestion object can be accessed via the 'item' key in the slot scope.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/autocomplete.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nautocomplete/autocomplete-template\n```\n\n----------------------------------------\n\nTITLE: Defining Table Event Types in TypeScript\nDESCRIPTION: This snippet shows TypeScript function signatures for various table events in Element Plus. It includes events for selection, mouse interactions, sorting, filtering, and more.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nselect: <T = any>(selection: T[], row: T) => void\nselect-all: (selection: any[]) => void\nselection-change: (newSelection: any[]) => void\ncell-mouse-enter: (row: any, column: any, cell: HTMLTableCellElement, event: Event) => void\ncell-mouse-leave: (row: any, column: any, cell: HTMLTableCellElement, event: Event) => void\ncell-click: (row: any, column: any, cell: HTMLTableCellElement, event: Event) => void\ncell-dblclick: (row: any, column: any, cell: HTMLTableCellElement, event: Event) => void\ncell-contextmenu: (row: any, column: any, cell: HTMLTableCellElement, event: Event) => void\nrow-click: (row: any, column: any, event: Event) => void\nrow-contextmenu: (row: any, column: any, event: Event) => void\nrow-dblclick: (row: any, column: any, event: Event) => void\nheader-click: (column: any, event: Event) => void\nheader-contextmenu: (column: any, event: Event) => void\nsort-change: (data: {column: any, prop: string, order: any }) => void\nfilter-change: (newFilters: any) => void\ncurrent-change: (currentRow: any, oldCurrentRow: any) => void\nheader-dragend: (newWidth: number, oldWidth: number, column: any, event: MouseEvent) => void\nexpand-change: (row: any, expandedRows: any[]) => void & (row: any, expanded: boolean) => void\nscroll: ({ scrollLeft: number, scrollTop: number }) => void\n```\n\n----------------------------------------\n\nTITLE: Basic Transfer Component Demo\nDESCRIPTION: Basic implementation of Transfer component requiring data array with key, label and disabled attributes. Uses v-model for two-way binding of selected items.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ntransfer/basic\n```\n\n----------------------------------------\n\nTITLE: Customized Template for Element Plus Skeleton\nDESCRIPTION: Shows how to use the 'template' slot to create a custom skeleton structure that more closely matches the real DOM structure to avoid layout bouncing.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/customized-template\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Controlling Dropdown Menu Hiding Behavior in Vue\nDESCRIPTION: Demonstrates the use of 'hide-on-click' attribute to control whether the menu closes on clicking an item. By default, it closes, but this can be turned off.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/menu-hiding-behavior\n```\n\n----------------------------------------\n\nTITLE: Component Development Template in Vue\nDESCRIPTION: Template for testing components under development in the local playground. Requires the component to be registered in @element-plus/components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dev-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ComponentYouAreDeveloping />\n</template>\n\n<script setup lang=\"ts\">\n// make sure this component is registered in @element-plus/components\nimport { ComponentYouAreDeveloping } from '@element-plus/components'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Detail View Implementation\nDESCRIPTION: Implementation of expandable detail views using dynamic height rendering.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/detailed-view\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload Implementation\nDESCRIPTION: Demonstrates basic file upload functionality with customizable button type, text, and file limits. Includes ability to limit maximum uploads and handle exceeded limits.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Customize upload button type and text using `slot`. Set `limit` and `on-exceed` to limit the maximum number of uploads allowed and specify method when the limit is exceeded. Plus, you can abort removing a file in the `before-remove` hook.\n\nupload/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation\nDESCRIPTION: Shows basic popover usage with different trigger options including hover, click, focus and contextmenu. Built on ElTooltip component with manual visibility control through :visible prop.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\npopover/basic-usage\n```\n\n----------------------------------------\n\nTITLE: TimeSelect with Fixed Time Range in Element Plus\nDESCRIPTION: Demonstrates how to create a TimeSelect component with a fixed time range, where selecting start or end time affects the options of the other.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/time-select.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ntime-select/time-range\n```\n\n----------------------------------------\n\nTITLE: Selectable Tree Nodes with Async Loading\nDESCRIPTION: Shows how to implement selectable tree nodes with asynchronous data loading capabilities.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Filterable Transfer Component\nDESCRIPTION: Implementation of Transfer component with filtering capabilities. Supports custom filter methods and keyword-based filtering of items based on their labels.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ntransfer/filterable\n```\n\n----------------------------------------\n\nTITLE: Custom Space Size Implementation\nDESCRIPTION: Shows how to implement custom spacing sizes using number type values for more specific control.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nspace/customized-size\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Dropdown Placement Options in Vue\nDESCRIPTION: Shows how to set different placements for the dropdown menu using the 'placement' property. Supports 6 different positions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/placements\n```\n\n----------------------------------------\n\nTITLE: Animated Skeleton Component in Element Plus\nDESCRIPTION: Demonstrates how to enable loading animation on the skeleton component using the 'animated' flag.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/animation\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Basic Space Usage\nDESCRIPTION: Demonstrates the basic implementation of the Space component to provide unified spacing between elements.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Using Space to provide space\n\nspace/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Types and Interfaces in TypeScript\nDESCRIPTION: This snippet defines various types and interfaces used in the Cascader component, including CascaderNodeValue, CascaderValue, LazyLoad function, and the CascaderOption interface.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype CascaderNodeValue = string | number\ntype CascaderNodePathValue = CascaderNodeValue[]\ntype CascaderValue =\n  | CascaderNodeValue\n  | CascaderNodePathValue\n  | (CascaderNodeValue | CascaderNodePathValue)[]\n\ntype Resolve = (data: any) => void\n\ntype ExpandTrigger = 'click' | 'hover'\n\ntype LazyLoad = (node: Node, resolve: Resolve) => void\n\ntype isDisabled = (data: CascaderOption, node: Node) => boolean\n\ntype isLeaf = (data: CascaderOption, node: Node) => boolean\n\ninterface CascaderOption extends Record<string, unknown> {\n  label?: string\n  value?: CascaderNodeValue\n  children?: CascaderOption[]\n  disabled?: boolean\n  leaf?: boolean\n}\n\ninterface CascaderProps {\n  expandTrigger?: ExpandTrigger\n  multiple?: boolean\n  checkStrictly?: boolean\n  emitPath?: boolean\n  lazy?: boolean\n  lazyLoad?: LazyLoad\n  value?: string\n  label?: string\n  children?: string\n  disabled?: string | isDisabled\n  leaf?: string | isLeaf\n  hoverThreshold?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example - Tooltip Placement\nDESCRIPTION: Demonstrates the 9 different placement options for tooltips using the content and placement attributes. The placement follows the format [orientation]-[alignment] with orientations: top, left, right, bottom and alignments: start, end, null.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Use attribute `content` to set the display content when hover. The attribute `placement` determines the position of the tooltip. Its value is `[orientation]-[alignment]` with four orientations `top`, `left`, `right`, `bottom` and three alignments `start`, `end`, `null`, and the default alignment is null. Take `placement=\"left-end\"` for example, Tooltip will display on the left of the element which you are hovering and the bottom of the tooltip aligns with the bottom of the element.\n\ntooltip/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Multiple Times Lazy Loading Implementation\nDESCRIPTION: Shows how to handle multiple attempts at lazy loading node data with error handling and state management.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Different Sizes of InputTag Component\nDESCRIPTION: Demonstrates the different sizes available for the InputTag component: default, large, and small.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/size\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Attributes in Markdown\nDESCRIPTION: A markdown table listing all available attributes for the Element Plus Select component. It includes attribute names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select-v2.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                | Description                                                                                                                              | Type                                                                                                                                                                        | Default                                        |\n| ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------- |\n| model-value / v-model               | binding value                                                                                                                            | ^[string] / ^[number] / ^[boolean] / ^[object] / ^[array]                                                                                                                   | —                                              |\n| options                             | data of the options, the key of `value` and `label` can be customize by `props`                                                          | ^[array]                                                                                                                                                                    | —                                              |\n| props ^(2.4.2)                      | configuration options, see the following table                                                                                           | ^[object]                                                                                                                                                                   | —                                              |\n| multiple                            | is multiple                                                                                                                              | ^[boolean]                                                                                                                                                                  | false                                          |\n| disabled                            | is disabled                                                                                                                              | ^[boolean]                                                                                                                                                                  | false                                          |\n| value-key                           | unique identity key name for value, required when value is an object                                                                     | ^[string]                                                                                                                                                                   | value                                          |\n| size                                | size of component                                                                                                                        | ^[enum]`'' \\| 'large' \\| 'default' \\| 'small'`                                                                                                                              | ''                                             |\n| clearable                           | whether select can be cleared                                                                                                            | ^[boolean]                                                                                                                                                                  | false                                          |\n| clear-icon                          | custom clear icon                                                                                                                        | ^[string] / ^[object]`Component`                                                                                                                                            | CircleClose                                    |\n| collapse-tags                       | whether to collapse tags to a text when multiple selecting                                                                               | ^[boolean]                                                                                                                                                                  | false                                          |\n| multiple-limit                      | maximum number of options user can select when multiple is true. No limit when set to 0                                                  | ^[number]                                                                                                                                                                   | 0                                              |\n| name                                | the name attribute of select input                                                                                                       | ^[string]                                                                                                                                                                   | —                                              |\n| effect                              | tooltip theme, built-in theme: `dark` / `light`                                                                                          | ^[enum]`'dark' \\| 'light'` / ^[string]                                                                                                                                      | light                                          |\n| autocomplete                        | autocomplete of select input                                                                                                             | ^[string]                                                                                                                                                                   | off                                            |\n| placeholder                         | placeholder                                                                                                                              | ^[string]                                                                                                                                                                   | Please select                                  |\n| filterable                          | is filterable                                                                                                                            | ^[boolean]                                                                                                                                                                  | false                                          |\n| allow-create                        | whether creating new items is allowed. To use this, `filterable` must be true                                                            | ^[boolean]                                                                                                                                                                  | false                                          |\n| filter-method                       | custom filter method                                                                                                                     | ^[Function]`() => void`                                                                                                                                                     | —                                              |\n| loading                             | whether Select is loading data from server                                                                                               | ^[boolean]                                                                                                                                                                  | false                                          |\n| loading-text                        | displayed text while loading data from server, default is 'Loading'                                                                      | ^[string]                                                                                                                                                                   | —                                              |\n| reserve-keyword                     | whether reserve the keyword after select filtered option.                                                                                | ^[boolean]                                                                                                                                                                  | true                                           |\n| no-match-text                       | displayed text when no data matches the filtering query, you can also use slot `empty`, default is 'No matching data'                    | ^[string]                                                                                                                                                                   | —                                              |\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Dark Mode CSS\nDESCRIPTION: Shows how to import both Element Plus default dark mode CSS and custom overrides.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dark-mode.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'element-plus/theme-chalk/dark/css-vars.css'\nimport './styles/dark/css-vars.css'\n```\n\n----------------------------------------\n\nTITLE: Switch with Custom Action Icon\nDESCRIPTION: Demonstrates using custom action icons for different switch states.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\nswitch/custom-action-icon\n```\n\n----------------------------------------\n\nTITLE: Input Number with Custom Icons in Vue\nDESCRIPTION: Shows how to use custom icons for the increase and decrease buttons of the Input Number component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number\n    v-model=\"num\"\n    :min=\"1\"\n    :max=\"10\"\n    decrease-icon=\"Remove\"\n    increase-icon=\"Add\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Switch with Custom Action Slot\nDESCRIPTION: Shows how to use custom slots for switch actions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\nswitch/custom-action-slot\n```\n\n----------------------------------------\n\nTITLE: Nested Drawers in Element Plus\nDESCRIPTION: Shows how to implement multiple layers of Drawer components, similar to nested Dialogs. Requires setting the append-to-body attribute to true for proper layering.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\ndrawer/nested-drawer\n```\n\n----------------------------------------\n\nTITLE: Custom Node Content Implementation\nDESCRIPTION: Shows how to customize tree node content using render-content function or scoped slots.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Implementing Node Filtering in Tree V2 Component\nDESCRIPTION: This example demonstrates how to implement node filtering in the Tree V2 component using the 'filter' method and 'filter-method' attribute, available from version 2.9.1.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\ntree-v2/filter\n```\n\n----------------------------------------\n\nTITLE: Virtual Triggering Setup\nDESCRIPTION: Shows how to implement tooltips with separated trigger and content elements, including visibility control considerations.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntooltip/virtual-trigger\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Rowspan Implementation\nDESCRIPTION: Example of implementing row spanning in the virtualized table.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/rowspan\n```\n\n----------------------------------------\n\nTITLE: Defining FormItem Exposed Methods in Element Plus\nDESCRIPTION: This snippet details the methods and properties exposed by the FormItem component in Element Plus, including size, validation state, and validation functions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/form.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Description                                       | Type                                                                                                 |\n| --------------- | ------------------------------------------------- | ---------------------------------------------------------------------------------------------------- |\n| size            | Form item size.                                   | ^[object]`ComputedRef<'' \\| 'large' \\| 'default' \\| 'small'>`                                        |\n| validateMessage | Validation message.                               | ^[object]`Ref<string>`                                                                               |\n| validateState   | Validation state.                                 | ^[object]`Ref<'' \\| 'error' \\| 'validating' \\| 'success'>`                                           |\n| validate        | Validate form item.                               | ^[Function]`(trigger: string, callback?: FormValidateCallback \\| undefined) => FormValidationResult` |\n| resetField      | Reset current field and remove validation result. | ^[Function]`() => void`                                                                              |\n| clearValidate   | Remove validation status of the field.            | ^[Function]`() => void`                                                                              |\n```\n\n----------------------------------------\n\nTITLE: Tree Node Checking Implementation\nDESCRIPTION: Demonstrates methods for getting and setting checked nodes using both node and key approaches.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Configuring Vite for Custom SCSS Processing\nDESCRIPTION: Vite configuration to import and process the custom SCSS namespace configuration file using preprocessor options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/namespace.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  // ...\n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: `@use \"~/styles/element/index.scss\" as *;`,\n      },\n    },\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Loading State Control for Element Plus Skeleton\nDESCRIPTION: Demonstrates controlling the visibility of skeleton vs. actual content using the 'loading' attribute and 'default' slot for real DOM elements.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/loading-state\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Tree Data Implementation\nDESCRIPTION: Implementation of tree-structured data display with expand/collapse functionality.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/tree-data\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration - Dark and Light Options\nDESCRIPTION: Shows how to implement different tooltip themes using the effect attribute. Includes guidance on custom theming and limitations with gradient backgrounds.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Set `effect` to modify theme, and the default value is `dark`.\n\ntooltip/theme\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Dynamic Height Rows Implementation\nDESCRIPTION: Example of implementing rows with dynamic heights based on content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/dynamic-height\n```\n\n----------------------------------------\n\nTITLE: Defining Row Key Function in Element Plus Table (TypeScript)\nDESCRIPTION: This code defines the type for the row-key prop in Element Plus Table. It's a function that returns the key of row data, used for optimizing rendering and required for certain features like reserve-selection or displaying tree data.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(row: any) => string\n```\n\n----------------------------------------\n\nTITLE: Invoking Loading Service\nDESCRIPTION: Demonstrates basic invocation of the Loading service with configuration options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/loading.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nElLoading.service(options)\n```\n\n----------------------------------------\n\nTITLE: Customizing Timeline Nodes in Element Plus\nDESCRIPTION: This example illustrates how to customize the size, color, and icons of nodes in the Timeline component of Element Plus.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/timeline.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntimeline/custom-node\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Node Props in Markdown\nDESCRIPTION: This snippet defines the props for individual tree nodes, including options for customizing labels, children, disabled state, and leaf node identification.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Description                                                                   | Type                                             | Default |\n| --------- | ----------------------------------------------------------------------------- | ------------------------------------------------ | ------- |\n| label     | specify which key of node object is used as the node's label                  | ^[string] / ^[Function]`(data, node) => string`  | —       |\n| children  | specify which node object is used as the node's subtree                       | ^[string]                                        | —       |\n| disabled  | specify which key of node object represents if node's checkbox is disabled    | ^[string] / ^[Function]`(data, node) => boolean` | —       |\n| isLeaf    | specify whether the node is a leaf node, only works when lazy load is enabled | ^[string] / ^[Function]`(data, node) => boolean` | —       |\n| class     | custom node class name                                                        | ^[string] / ^[Function]`(data, node) => string`  | —       |\n```\n\n----------------------------------------\n\nTITLE: Setting Default Expanded and Checked Nodes in Tree V2\nDESCRIPTION: This snippet shows how to set initially expanded and checked nodes in the Tree V2 component using 'default-expanded-keys' and 'default-checked-keys' attributes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ntree-v2/default-state\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example Demo Reference\nDESCRIPTION: Example demonstrating basic scrollbar usage where height can be set via property or determined by parent container.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/scrollbar.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nscrollbar/basic-usage\n```\n\n----------------------------------------\n\nTITLE: Using Red Dot Badge in Element Plus\nDESCRIPTION: Demonstrates the use of a red dot to mark content that needs attention. The 'is-dot' attribute is used to enable this feature.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/badge.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nbadge/dot\n```\n\n----------------------------------------\n\nTITLE: Manual Scroll Control Demo Reference\nDESCRIPTION: Example showing manual scrollbar control using setScrollTop and setScrollLeft methods.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/scrollbar.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nscrollbar/manual-scroll\n```\n\n----------------------------------------\n\nTITLE: Rich Content Popover\nDESCRIPTION: Example of using nested components and elements within a popover using the default slot instead of content attribute. Shows implementation with a nested table.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\npopover/nested-information\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Group Usage with Value API in Vue\nDESCRIPTION: This example shows how to use the Checkbox component with the newer value API (introduced in v2.6.0) and the deprecated label-as-value approach for backward compatibility.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/checkbox.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-checkbox-group v-model=\"checkList\">\n    <!-- works when >=2.6.0, recommended ✔️ value not work when <2.6.0 ❌ -->\n    <el-checkbox label=\"Option 1\" value=\"Value 1\" />\n    <!-- works when <2.6.0, deprecated act as value when >=3.0.0 -->\n    <el-checkbox label=\"Option 2 & Value 2\" />\n  </el-checkbox-group>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Draggable Tree Nodes Implementation\nDESCRIPTION: Shows how to implement drag and drop functionality for tree nodes using the draggable attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Vite Configuration for Element Plus Custom Theme\nDESCRIPTION: Vite configuration setup for using custom Element Plus themes with SCSS preprocessing and on-demand component imports.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/theming.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path'\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ElementPlus from 'unplugin-element-plus/vite'\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '~/': `${path.resolve(__dirname, 'src')}/`,\n    },\n  },\n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: `@use \"~/styles/element/index.scss\" as *;`,\n      },\n    },\n  },\n  plugins: [\n    vue(),\n    ElementPlus({\n      useSource: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Statistic Usage\nDESCRIPTION: Demonstrates basic usage of the Statistic component with support for icons, units, and animated transitions using vueuse.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/statistic.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo To highlight a number or a group of numbers, such as statistical value, amount, and ranking, you can add elements such as icon and unit before and after the number and title. And use [vueuse](https://vueuse.org/core/useTransition/) to add animated transitions to value.\n\nstatistic/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Select Events in Markdown\nDESCRIPTION: A markdown table describing the events available for the Select component, including their names, descriptions, and function signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                  | Description                                                   | Type                                                                |\n| --------------------- | ------------------------------------------------------------- | ------------------------------------------------------------------- |\n| change                | triggers when the selected value changes                      | ^[Function]`(value: any) => void`                                   |\n| visible-change        | triggers when the dropdown appears/disappears                 | ^[Function]`(visible: boolean) => void`                             |\n| remove-tag            | triggers when a tag is removed in multiple mode               | ^[Function]`(tagValue: any) => void`                                |\n| clear                 | triggers when the clear icon is clicked in a clearable Select | ^[Function]`() => void`                                             |\n| blur                  | triggers when Input blurs                                     | ^[Function]`(event: FocusEvent) => void`                            |\n| focus                 | triggers when Input focuses                                   | ^[Function]`(event: FocusEvent) => void`                            |\n| popup-scroll ^(2.9.4) | triggers when dropdown scrolls                                | ^[Function]`(data:{scrollTop: number, scrollLeft: number}) => void` |\n```\n\n----------------------------------------\n\nTITLE: HTML Content Implementation\nDESCRIPTION: Demonstrates how to use HTML strings in tooltip content with important security considerations regarding XSS attacks.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntooltip/html-content\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Custom Backtop Component\nDESCRIPTION: Shows how to customize the Backtop component with a display area of 40px by 40px.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/backtop.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nbacktop/custom\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Dropdown Size Options in Vue\nDESCRIPTION: Shows how to use different sizes for the Dropdown component using the 'size' attribute. Available sizes are 'large', 'default', and 'small'.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/sizes\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists with Element Plus Skeleton\nDESCRIPTION: Shows how to render multiple skeleton templates using the 'count' attribute, useful for simulating loading states for lists of data.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/rendering-with-data\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Colspan Implementation\nDESCRIPTION: Example of implementing column spanning in the virtualized table.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/colspan\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Renderer Implementation\nDESCRIPTION: Example of customizing table cell rendering for specific content display needs.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/cell-templating\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Teleport Components in Nuxt\nDESCRIPTION: Demonstrates how to conditionally render Teleport components on the client-side using Nuxt's ClientOnly component. This approach helps avoid SSR-related issues with teleported content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/ssr.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<client-only>\n  <el-tooltip content=\"the tooltip content\">\n    <el-button>tooltip</el-button>\n  </el-tooltip>\n</client-only>\n```\n\n----------------------------------------\n\nTITLE: Rich Content Implementation\nDESCRIPTION: Explains how to display multiple lines of text and format content using named slots instead of the content attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Override attribute `content` of `el-tooltip` by adding a slot named `content`.\n\ntooltip/rich-content\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Type Declarations for Transfer Component in TypeScript\nDESCRIPTION: This code snippet defines various types and interfaces used in the Transfer component. It includes definitions for transfer keys, directions, data items, rendering functions, and prop aliases.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { h as H, VNode } from 'vue'\n\ntype TransferKey = string | number\n\ntype TransferDirection = 'left' | 'right'\n\ntype TransferDataItem = Record<string, any>\n\ntype renderContent = (h: typeof H, option: TransferDataItem) => VNode | VNode[]\n\ninterface TransferFormat {\n  noChecked?: string\n  hasChecked?: string\n}\n\ninterface TransferPropsAlias {\n  label?: string\n  key?: string\n  disabled?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Full Transition Tooltip Implementation\nDESCRIPTION: Demonstrates implementing full transition animations using Vue's Transition component for both opening and closing effects.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip-v2.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ntooltip-v2/full-transition\n```\n\n----------------------------------------\n\nTITLE: Filter Implementation\nDESCRIPTION: Implementation of custom filtering functionality using header renderers.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/filter\n```\n\n----------------------------------------\n\nTITLE: Icon Separator Breadcrumb - Element Plus\nDESCRIPTION: Demonstrates how to use SVG icons as separators in breadcrumb navigation instead of text characters.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/breadcrumb.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Set `separator-icon` to use `svg icon` as the separator，it will cover `separator`\n\nbreadcrumb/icon\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Controlled Sort Implementation\nDESCRIPTION: Implementation of controlled sorting with multiple sortable columns.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/controlled-sort\n```\n\n----------------------------------------\n\nTITLE: Input Number with Prefix and Suffix in Vue\nDESCRIPTION: Demonstrates how to add prefix and suffix content to the Input Number component using named slots.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num\" :min=\"1\" :max=\"10\">\n    <template #prefix>$</template>\n    <template #suffix>USD</template>\n  </el-input-number>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Header Cell Class in Element Plus Table (TypeScript)\nDESCRIPTION: This code defines the type for the header-cell-class-name prop in Element Plus Table. It can be a function returning custom class names for a cell in the table header, or a string assigning class names for every cell in the table header.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(data: { row: any, column: any, rowIndex: number, columnIndex: number }) => string\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Events in Markdown\nDESCRIPTION: This snippet defines the events available for the Dropdown component, including 'click', 'command', and 'visible-change'. It specifies the event names, descriptions, and function signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Dropdown Events\n\n| Name           | Description                                                                                               | Type                                  |\n| -------------- | --------------------------------------------------------------------------------------------------------- | ------------------------------------- |\n| click          | if `split-button` is `true`, triggers when left button is clicked                                         | ^[Function]`(e: MouseEvent) => void`  |\n| command        | triggers when a dropdown item is clicked, the parameters is the command dispatched from the dropdown item | ^[Function]`(...args: any[]) => void` |\n| visible-change | triggers when the dropdown appears/disappears, the param is true when it appears, and false otherwise     | ^[Function]`(val: boolean) => void`   |\n```\n\n----------------------------------------\n\nTITLE: Global Configuration with Full Import\nDESCRIPTION: Setting up global configuration options when using full import of Element Plus.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport ElementPlus from 'element-plus'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.use(ElementPlus, { size: 'small', zIndex: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Content in InputTag Component\nDESCRIPTION: Shows how to customize the tag content using the 'tag' slot in the InputTag component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/tag\n```\n\n----------------------------------------\n\nTITLE: Select Events Table\nDESCRIPTION: Markdown table documenting available events including change, visible-change, remove-tag, clear, blur, and focus events with their descriptions and types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select-v2.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Description                                                                                                | Type                                     |\n| -------------- | ---------------------------------------------------------------------------------------------------------- | ---------------------------------------- |\n| change         | triggers when the selected value changes, the param is current selected value                              | ^[Function]`(val: any) => void`          |\n| visible-change | triggers when the dropdown appears/disappears, the param will be true when it appears, and false otherwise | ^[Function]`(visible: boolean) => void`  |\n| remove-tag     | triggers when a tag is removed in multiple mode, the param is removed tag value                            | ^[Function]`(tagValue: any) => void`     |\n| clear          | triggers when the clear icon is clicked in a clearable Select                                              | ^[Function]`() => void`                  |\n| blur           | triggers when Input blurs                                                                                  | ^[Function]`(event: FocusEvent) => void` |\n| focus          | triggers when Input focuses                                                                                | ^[Function]`(event: FocusEvent) => void` |\n```\n\n----------------------------------------\n\nTITLE: Fixed Columns Implementation\nDESCRIPTION: Demonstration of implementing fixed columns on either side of the table.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/fixed-columns\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Value Management Methods\nDESCRIPTION: Defines two component methods: setCurrentValue for updating the current value with a number parameter, and resetCurrentValue for resetting to default value.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/rate.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetCurrentValue: (value: number) => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresetCurrentValue: () => void\n```\n\n----------------------------------------\n\nTITLE: Draggable Tags in InputTag Component\nDESCRIPTION: Shows how to enable dragging of tags within the InputTag component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/draggable\n```\n\n----------------------------------------\n\nTITLE: VNode Type Spacer Implementation\nDESCRIPTION: Demonstrates how to use VNode type spacers for advanced spacing configurations.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nspace/vnode-type-spacer\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Auto-resizing Table Implementation\nDESCRIPTION: Implementation of a table that automatically resizes based on parent container dimensions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/auto-resizer\n```\n\n----------------------------------------\n\nTITLE: Customized Header in Element Plus Drawer\nDESCRIPTION: Demonstrates how to customize the header area of a Drawer using the header slot while maintaining accessibility with the title attribute or titleId slot property.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ndrawer/customization-header\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Teleport Components with Vue\nDESCRIPTION: Shows how to conditionally render Teleport components on the client-side using Vue's onMounted hook. This approach helps avoid SSR-related issues with teleported content in a Vue application.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/ssr.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst isClient = ref(false)\n\nonMounted(() => {\n  isClient.value = true\n})\n</script>\n\n<template>\n  <el-tooltip v-if=\"isClient\" content=\"the tooltip content\">\n    <el-button>tooltip</el-button>\n  </el-tooltip>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Global Configuration with On-demand Import\nDESCRIPTION: Setting up global configuration options when using on-demand imports with ElConfigProvider.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-config-provider :size=\"size\" :z-index=\"zIndex\">\n    <app />\n  </el-config-provider>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport { ElConfigProvider } from 'element-plus'\n\nexport default defineComponent({\n  components: {\n    ElConfigProvider,\n  },\n  setup() {\n    return {\n      zIndex: 3000,\n      size: 'small',\n    }\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Transfer Component with Prop Aliases\nDESCRIPTION: Transfer component implementation supporting custom property mappings. Allows using different key names for key, label, and disabled properties through props attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\ntransfer/prop-alias\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Events in Markdown\nDESCRIPTION: This snippet defines the events that can be triggered by the TimePicker component. It includes event names, descriptions, and their corresponding function signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/time-picker.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Description                                                       | Type                                                                                                         |\n| -------------- | ----------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| change         | triggers when user confirms the value                             | ^[Function]`(val: number \\| string \\| Date \\| [number, number] \\| [string, string] \\| [Date, Date]) => void` |\n| blur           | triggers when Input blurs                                         | ^[Function]`(e: FocusEvent) => void`                                                                         |\n| focus          | triggers when Input focuses                                       | ^[Function]`(e: FocusEvent) => void`                                                                         |\n| clear ^(2.7.7) | triggers when the clear icon is clicked in a clearable TimePicker | ^[Function]`() => void`                                                                                      |\n| visible-change | triggers when the TimePicker's dropdown appears/disappears        | ^[Function]`(visibility: boolean) => void`                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Timeline Usage in Element Plus\nDESCRIPTION: This code snippet demonstrates the basic usage of the Timeline component in Element Plus. It shows how to split a timeline into multiple activities and highlights the importance of timestamps.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/timeline.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntimeline/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Max Height Demo Reference\nDESCRIPTION: Example demonstrating scrollbar visibility when content exceeds specified maximum height.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/scrollbar.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nscrollbar/max-height\n```\n\n----------------------------------------\n\nTITLE: Importing Loading Service in TypeScript\nDESCRIPTION: Shows how to import the ElLoading service from element-plus library for programmatic usage.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/loading.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElLoading } from 'element-plus'\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Z-Index for Element Plus SSR\nDESCRIPTION: Shows how to inject an initial z-index value to prevent hydration errors related to z-index during SSR. This setup is done in the main application file.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/ssr.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// irrelevant code omitted\nimport { createApp } from 'vue'\nimport { ZINDEX_INJECTION_KEY } from 'element-plus'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.provide(ZINDEX_INJECTION_KEY, { current: 0 })\n```\n\n----------------------------------------\n\nTITLE: Defining Summary Method in Element Plus Table (TypeScript)\nDESCRIPTION: This snippet shows the type definition for the summary-method prop in Element Plus Table. It's a function that takes columns and data as input and returns an array of VNode or string to customize the summary row.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n(data: { columns: any[], data: any[] }) => (VNode | string)[]\n```\n\n----------------------------------------\n\nTITLE: Infinite Scroll Directive Configuration Parameters\nDESCRIPTION: Table of configuration parameters for the v-infinite-scroll directive, including disabled state, delay, distance, and immediate loading options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/infinite-scroll.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Description                                                                                                      | Type        | Default |\n| ------------------------- | ---------------------------------------------------------------------------------------------------------------- | ----------- | ------- |\n| v-infinite-scroll         | Load more data while reach bottom of the page                                                                    | ^[Function] | —       |\n| infinite-scroll-disabled  | is disabled                                                                                                      | ^[boolean]  | false   |\n| infinite-scroll-delay     | throttle delay (ms)                                                                                              | ^[number]   | 200     |\n| infinite-scroll-distance  | trigger distance (px)                                                                                            | ^[number]   | 0       |\n| infinite-scroll-immediate | Whether to execute the loading method immediately, in case the content cannot be filled up in the initial state. | ^[boolean]  | true    |\n```\n\n----------------------------------------\n\nTITLE: Grouped Header Implementation\nDESCRIPTION: Example of implementing grouped headers using custom header renderer.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/grouping-header\n```\n\n----------------------------------------\n\nTITLE: Default Expanded and Checked States\nDESCRIPTION: Shows how to set initially expanded and checked nodes using default-expanded-keys and default-checked-keys properties.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Implementation\nDESCRIPTION: Demonstrates how to implement disabled checkboxes for specific tree nodes using the disabled property in defaultProps.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring Popover Placement\nDESCRIPTION: Demonstrates how to position a popover relative to its trigger element using the placement attribute. Supports 9 different placement options combining orientations (top, left, right, bottom) with alignments (start, end, null).\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\npopover/placement\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Declaration for MentionOption Interface\nDESCRIPTION: Defines the type structure for mention options used in the component. Includes required value property, optional label and disabled properties, and allows for additional custom properties.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/mention.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MentionOption = {\n  value: string\n  label?: string\n  disabled?: boolean\n  [key: string]: any\n}\n```\n\n----------------------------------------\n\nTITLE: Input Number with Strict Step in Vue\nDESCRIPTION: Shows how to enforce that the input value can only be a multiple of the step value.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num\" :step=\"2\" step-strictly />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(2)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Footer Implementation\nDESCRIPTION: Example of implementing a custom footer for the table.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/footer\n```\n\n----------------------------------------\n\nTITLE: Singleton Pattern Implementation\nDESCRIPTION: Explains how to use a single tooltip instance with multiple triggers, based on virtual triggering functionality.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntooltip/singleton\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Slots for DatePicker Component in Markdown\nDESCRIPTION: This snippet defines the available slots for the DatePicker component, including their names and descriptions. It covers custom content slots and icon slots for navigation.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/datetime-picker.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Slots\n\n| Name                | Description                    |\n| ------------------- | ------------------------------ |\n| default             | custom cell content            |\n| range-separator     | custom range separator content |\n| prev-month ^(2.8.0) | prev month icon                |\n| next-month ^(2.8.0) | next month icon                |\n| prev-year ^(2.8.0)  | prev year icon                 |\n| next-year ^(2.8.0)  | next year icon                 |\n```\n\n----------------------------------------\n\nTITLE: Toggle Show/Hide Without Rendering Bouncing in Element Plus Skeleton\nDESCRIPTION: Demonstrates smooth transitions when loading states change by using throttle with both leading and trailing parameters to control rendering timing.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/leading-trailing-without-bouncing\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Accessible Tooltip Implementation\nDESCRIPTION: Shows how to implement an accessible version of Tooltip V2 component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip-v2.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ntooltip-v2/a11y\n```\n\n----------------------------------------\n\nTITLE: Page Header Anatomy in Vue\nDESCRIPTION: Demonstrates the structure of the El-Page-Header component with all available slot positions. This template shows how different parts of the page header can be customized using named slots.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/page-header.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-page-header>\n    <!-- Line 1 -->\n    <template #breadcrumb />\n    <!-- Line 2 -->\n    <template #icon />\n    <template #title />\n    <template #content />\n    <template #extra />\n    <!-- Lines after 2 -->\n    <template #default />\n  </el-page-header>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Manual Upload Implementation\nDESCRIPTION: Demonstrates manual upload functionality implementation.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nupload/manual\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Implementation - Element Plus\nDESCRIPTION: Shows basic usage of el-breadcrumb component with default '/' separator character.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/breadcrumb.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo In `el-breadcrumb`, each `el-breadcrumb-item` is a tag that stands for every level starting from homepage. This component has a `String` attribute `separator`, and it determines the separator. Its default value is '/'.\n\nbreadcrumb/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Rendering Teleports in Server-Side Entry Point\nDESCRIPTION: Shows how to render teleports on the server-side in the entry point file. This function processes teleported content and prepares it for injection into the final HTML.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/ssr.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// irrelevant code omitted\nimport { renderToString } from 'vue/server-renderer'\nimport { createApp } from './main'\n\nexport async function render(url, manifest) {\n  // ...\n  const ctx = {}\n  const html = await renderToString(app, ctx)\n  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)\n  const teleports = renderTeleports(ctx.teleports)\n\n  return [html, preloadLinks, teleports]\n}\n\nfunction renderTeleports(teleports) {\n  if (!teleports) return ''\n  return Object.entries(teleports).reduce((all, [key, value]) => {\n    if (key.startsWith('#el-popper-container-')) {\n      return `${all}<div id=\"${key.slice(1)}\">${value}</div>`\n    }\n    return all\n  }, teleports.body || '')\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Content in Element Plus Drawer\nDESCRIPTION: Illustrates how to use the Drawer component with custom content, similar to Dialog, enabling diverse interactions within the drawer area.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ndrawer/customization-content\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Element Plus Custom Theme\nDESCRIPTION: Webpack configuration for customizing Element Plus theme with SCSS preprocessing and on-demand imports.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/theming.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElementPlus from 'unplugin-element-plus/webpack'\n\nexport default defineConfig({\n  css: {\n    loaderOptions: {\n      scss: {\n        additionalData: `@use \"~/styles/element/index.scss\" as *;`,\n      },\n    },\n  },\n  plugins: [\n    ElementPlus({\n      useSource: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Element Plus Popover Attributes Table\nDESCRIPTION: Markdown table documenting all available attributes for the Element Plus Popover component, including their descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Description                                                                                                                                                              | Type                                                                                                                                                                        | Default                                                                    |\n| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------- |\n| trigger                   | how the popover is triggered                                                                                                                                             | ^[enum]`'click' \\| 'focus' \\| 'hover' \\| 'contextmenu'`                                                                                                                     | hover                                                                      |\n| trigger-keys ^(2.9.8)     | When you click the mouse to focus on the trigger element, you can define a set of keyboard codes to control the display of popover through the keyboard                  | ^[Array]                                                                                                                                                                    | ['Enter','Space']                                                          |\n| title                     | popover title                                                                                                                                                            | ^[string]                                                                                                                                                                   | —                                                                          |\n| effect                    | Tooltip theme, built-in theme: `dark` / `light`                                                                                                                          | ^[enum]`'dark' \\| 'light'` / ^[string]                                                                                                                                      | light                                                                      |\n| content                   | popover content, can be replaced with a default `slot`                                                                                                                   | ^[string]                                                                                                                                                                   | ''                                                                         |\n| width                     | popover width                                                                                                                                                            | ^[string] / ^[number]                                                                                                                                                       | 150                                                                        |\n| placement                 | popover placement                                                                                                                                                        | ^[enum]`'top' \\| 'top-start' \\| 'top-end' \\| 'bottom' \\| 'bottom-start' \\| 'bottom-end' \\| 'left' \\| 'left-start' \\| 'left-end' \\| 'right' \\| 'right-start' \\| 'right-end'` | bottom                                                                     |\n| disabled                  | whether Popover is disabled                                                                                                                                              | ^[boolean]                                                                                                                                                                  | false                                                                      |\n| visible / v-model:visible | whether popover is visible                                                                                                                                               | ^[boolean] / ^[null]                                                                                                                                                        | null                                                                       |\n| offset                    | popover offset, `Popover` is built with `Tooltip`, offset of `Popover` is `undefined`, but offset of `Tooltip` is 12                                                     | ^[number]                                                                                                                                                                   | undefined                                                                  |\n| transition                | popover transition animation, the default is el-fade-in-linear                                                                                                           | ^[string]                                                                                                                                                                   | —                                                                          |\n| show-arrow                | whether a tooltip arrow is displayed or not. For more info, please refer to [ElPopper](https://github.com/element-plus/element-plus/tree/dev/packages/components/popper) | ^[boolean]                                                                                                                                                                  | true                                                                       |\n| popper-options            | parameters for [popper.js](https://popper.js.org/docs/v2/)                                                                                                               | ^[object]                                                                                                                                                                   | `{modifiers: [{name: 'computeStyles',options: {gpuAcceleration: false}}]}` |\n| popper-class              | custom class name for popover                                                                                                                                            | ^[string]                                                                                                                                                                   | —                                                                          |\n| popper-style              | custom style for popover                                                                                                                                                 | ^[string] / ^[object]                                                                                                                                                       | —                                                                          |\n| show-after                | delay of appearance, in millisecond                                                                                                                                      | ^[number]                                                                                                                                                                   | 0                                                                          |\n| hide-after                | delay of disappear, in millisecond                                                                                                                                       | ^[number]                                                                                                                                                                   | 200                                                                        |\n| auto-close                | timeout in milliseconds to hide tooltip                                                                                                                                  | ^[number]                                                                                                                                                                   | 0                                                                          |\n| tabindex                  | [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of Popover                                                                      | ^[number] / ^[string]                                                                                                                                                       | 0                                                                          |\n| teleported                | whether popover dropdown is teleported to the body                                                                                                                       | ^[boolean]                                                                                                                                                                  | true                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Defining Span Method in Element Plus Table (TypeScript)\nDESCRIPTION: This code defines the type for the span-method prop in Element Plus Table. It's a function that returns rowspan and colspan values for cells, allowing custom cell merging in the table.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n(data: { row: any, column: any, rowIndex: number, columnIndex: number }) => number[] | { rowspan: number, colspan: number } | void\n```\n\n----------------------------------------\n\nTITLE: Nested Operations Popover\nDESCRIPTION: Implementation of popover with nested interactive operations, providing a lightweight alternative to dialog components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\npopover/nested-operation\n```\n\n----------------------------------------\n\nTITLE: Maximum Tags Limit for InputTag Component\nDESCRIPTION: Demonstrates setting a limit on the number of tags that can be added to the InputTag component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/max\n```\n\n----------------------------------------\n\nTITLE: Using Dropdown Methods in Vue\nDESCRIPTION: Demonstrates how to manually open or close the dropdown menu using 'handleOpen' or 'handleClose' methods.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/dropdown-methods\n```\n\n----------------------------------------\n\nTITLE: Basic Backtop Component Usage\nDESCRIPTION: Demonstrates the basic implementation of the Backtop component showing a button in the bottom-right corner that appears when scrolling.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/backtop.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nbacktop/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing specific Element Plus component styles\nDESCRIPTION: JavaScript import statements to include specific component styles from the Element Plus chalk theme, demonstrating on-demand importing.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/packages/theme-chalk/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'element-plus/lib/theme-chalk/input.css'\nimport 'element-plus/lib/theme-chalk/select.css'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Message with App Context in Vue 3\nDESCRIPTION: Demonstrates how to use the ElMessage component with the current app's context in a Vue 3 setup method.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/message.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCurrentInstance } from 'vue'\nimport { ElMessage } from 'element-plus'\n\n// in your setup method\nconst { appContext } = getCurrentInstance()!\nElMessage({}, appContext)\n```\n\n----------------------------------------\n\nTITLE: Declaring Types for DatePicker Component in TypeScript\nDESCRIPTION: This code snippet defines TypeScript types used in the DatePicker component, including TimeLikeType and Placement. It also imports PopperOptions from @popperjs/core.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/date-picker.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Options as PopperOptions } from '@popperjs/core'\n\ntype TimeLikeType = 'datetime' | 'datetimerange'\n\ntype Placement =\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n```\n\n----------------------------------------\n\nTITLE: Custom Prefix and Suffix in InputTag Component\nDESCRIPTION: Demonstrates how to add custom prefix and suffix content to the InputTag component using slots.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/prefix-suffix\n```\n\n----------------------------------------\n\nTITLE: Virtual Triggered Popover\nDESCRIPTION: Demonstrates popover triggering using virtual elements, allowing separation of trigger and content elements. Uses #reference slot for trigger placement and virtual-ref API for custom trigger positioning.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\npopover/virtual-triggering\n```\n\n----------------------------------------\n\nTITLE: Switch with Custom Icons\nDESCRIPTION: Shows how to use custom icons for both active and inactive states of the Switch.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nswitch/custom-icons\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Cascader Implementation\nDESCRIPTION: Demonstrates the correct way to implement multiple selection in a Cascader component using props binding.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <el-cascader :props=\"props\" />\n</template>\n<script lang=\"ts\" setup>\n  const props = { multiple: true }\n</script>\n```\n\n----------------------------------------\n\nTITLE: File List Control Implementation\nDESCRIPTION: Demonstrates how to control the upload file list using the on-change hook function.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nupload/file-list\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Avoiding Rendering Bouncing with Element Plus Skeleton\nDESCRIPTION: Demonstrates using the 'throttle' attribute to prevent flickering when API responses are very quick, controlling the timing of skeleton display.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/avoiding-rendering-bouncing\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing Element Plus theme using Sass\nDESCRIPTION: Sass import statement to include the Element Plus chalk theme in a project.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/packages/theme-chalk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@use 'element-plus/lib/theme-chalk/index.scss';\n```\n\n----------------------------------------\n\nTITLE: Using Icons with el-icon Component in Vue\nDESCRIPTION: Vue template demonstrating basic usage of Element Plus icons with the el-icon wrapper component. Shows how to apply size attributes and use icons both with and without the wrapper.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Use el-icon to provide attributes to SVG icon -->\n<template>\n  <div>\n    <el-icon :size=\"size\" :color=\"color\">\n      <Edit />\n    </el-icon>\n    <!-- Or use it independently without derive attributes from parent -->\n    <Edit />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Animations Configuration\nDESCRIPTION: Demonstrates how to implement custom animations for tooltips using the transition attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntooltip/animations\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Switch with Text Description\nDESCRIPTION: Implementation of Switch with active and inactive text labels, including inline text display option.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nswitch/text-description\n```\n\n----------------------------------------\n\nTITLE: Sort Implementation\nDESCRIPTION: Basic implementation of table sorting functionality.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/sort\n```\n\n----------------------------------------\n\nTITLE: Switch with Extended Value Types\nDESCRIPTION: Demonstrates using different value types (Boolean, String, Number) for Switch states.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nswitch/extended-value-types\n```\n\n----------------------------------------\n\nTITLE: Space Size Control\nDESCRIPTION: Demonstrates size control functionality with built-in sizes (small, default, large) corresponding to 8px, 12px, and 16px spacing.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nspace/control-size\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Events in Markdown\nDESCRIPTION: This snippet defines the events for the Cascader component, including their names, descriptions, and types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Description                                                   | Type                                                        |\n| -------------- | ------------------------------------------------------------- | ----------------------------------------------------------- |\n| change         | triggers when the binding value changes                       | ^[Function]`(value: CascaderValue) => void`                 |\n| expand-change  | triggers when expand option changes                           | ^[Function]`(value: CascaderValue) => void`                 |\n| blur           | triggers when Cascader blurs                                  | ^[Function]`(event: FocusEvent) => void`                    |\n| focus          | triggers when Cascader focuses                                | ^[Function]`(event: FocusEvent) => void`                    |\n| clear ^(2.7.7) | triggers when the clear icon is clicked in a clearable Select | ^[Function]`() => void`                                     |\n| visible-change | triggers when the dropdown appears/disappears                 | ^[Function]`(value: boolean) => void`                       |\n| remove-tag     | triggers when remove tag in multiple selection mode           | ^[Function]`(value: CascaderNode['valueByOption']) => void` |\n```\n\n----------------------------------------\n\nTITLE: Space Alignment Configuration\nDESCRIPTION: Shows how to adjust alignment of child nodes using the alignment attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Using `alignment`\n\nspace/alignment\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing Element Plus via jsDelivr CDN\nDESCRIPTION: HTML code for importing Element Plus and its dependencies using jsDelivr CDN.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- Import style -->\n  <link\n    rel=\"stylesheet\"\n    href=\"//cdn.jsdelivr.net/npm/element-plus/dist/index.css\"\n  />\n  <!-- Import Vue 3 -->\n  <script src=\"//cdn.jsdelivr.net/npm/vue@3\"></script>\n  <!-- Import component library -->\n  <script src=\"//cdn.jsdelivr.net/npm/element-plus\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Setting Offset for Badge in Element Plus\nDESCRIPTION: Shows how to set the offset of the badge dot. The offset is specified as [left, top], representing the offset from the default position.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/badge.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nbadge/offset\n```\n\n----------------------------------------\n\nTITLE: Root Element Rendering with Teleport\nDESCRIPTION: Shows how to render the tooltip to the root element using Vue's Teleport component instead of the default behavior.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip-v2.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\ntooltip-v2/render-to-root\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Popconfirm Placement in Element Plus\nDESCRIPTION: This code snippet demonstrates how to use the placement attribute to position the Popconfirm component. It showcases 9 different placement options using the 'title' and 'placement' attributes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popconfirm.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\npopconfirm/placement\n```\n\n----------------------------------------\n\nTITLE: Importing Dark Mode CSS in TypeScript\nDESCRIPTION: Implementation showing how to import the default dark mode CSS variables in the application entry point.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dark-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// if you just want to import css\nimport 'element-plus/theme-chalk/dark/css-vars.css'\n```\n\n----------------------------------------\n\nTITLE: Input Number with Different Sizes in Vue\nDESCRIPTION: Shows how to create Input Number components with different sizes using the size attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num1\" size=\"large\" />\n  <el-input-number v-model=\"num2\" />\n  <el-input-number v-model=\"num3\" size=\"small\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num1 = ref(1)\nconst num2 = ref(1)\nconst num3 = ref(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configurable Rows in Element Plus Skeleton\nDESCRIPTION: Shows how to configure the number of rows in a skeleton component. The actual rendered row count will be one more than specified to account for a title row with 33% width.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/configurable-rows\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel API Properties in Markdown\nDESCRIPTION: API documentation table defining the various properties and attributes available for the Carousel component, including height, trigger mechanisms, autoplay settings, and motion blur features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/carousel.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                 | Description                                           | Type                                    | Default    |\n| -------------------- | ----------------------------------------------------- | --------------------------------------- | ---------- |\n| height               | height of the carousel                                | ^[string]                               | ''         |\n| initial-index        | index of the initially active slide (starting from 0) | ^[number]                               | 0          |\n| trigger              | how indicators are triggered                          | ^[enum]`'hover' \\| 'click'`             | hover      |\n| autoplay             | whether automatically loop the slides                 | ^[boolean]                              | true       |\n| interval             | interval of the auto loop, in milliseconds            | ^[number]                               | 3000       |\n```\n\n----------------------------------------\n\nTITLE: Vertical Layout Space Implementation\nDESCRIPTION: Shows how to use the direction attribute to create vertical spacing layouts using flex-direction.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo We also provide vertical layout.\n\nspace/vertical-layout\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Implementing Customized Content in Result Component for Element Plus\nDESCRIPTION: This code snippet shows how to implement customized content in the Result component. The actual implementation details are not provided in the given content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/result.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nresult/customized-content\n```\n\n----------------------------------------\n\nTITLE: Clearable InputTag Component\nDESCRIPTION: Demonstrates how to make the InputTag component clearable by showing a clear button.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/clearable\n```\n\n----------------------------------------\n\nTITLE: ColorPicker with Alpha Channel Support in Vue\nDESCRIPTION: Shows how to enable alpha channel selection in ColorPicker by adding the show-alpha attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/color-picker.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ncolor-picker/alpha\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip V2 Usage\nDESCRIPTION: Demonstrates the basic implementation of Tooltip V2 component with hover and tab interactions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip-v2.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ntooltip-v2/basic-usage\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Badge Component in Element Plus\nDESCRIPTION: Demonstrates how to display the amount of new messages using the Badge component. The value property accepts both Number and String types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/badge.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nbadge/basic\n```\n\n----------------------------------------\n\nTITLE: Input Number with Custom Controls Position in Vue\nDESCRIPTION: Demonstrates how to position the control buttons of the Input Number component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num\" controls-position=\"right\" :min=\"1\" :max=\"10\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Example - Feature Implementation\nDESCRIPTION: Example of a properly formatted commit message for a feature implementation, demonstrating the use of type, scope, and descriptive body text.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/commit-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(components): [button] I did something with button\n\nBlank between subject and body is expected.(period is expected)\nDescribes your change in one line or multi-line.\nCapitalize your first letter when starting a new line\nPlease do not exceeds 72 characters per line, because that would be harder to comprehend.\n\n- You can also add bullet list symbol for better layout\n```\n\n----------------------------------------\n\nTITLE: Select Exposed Methods Table\nDESCRIPTION: Markdown table documenting exposed methods and properties including focus, blur, and selectedLabel with their descriptions and types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select-v2.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Description                                     | Type                                       |\n| ---------------------- | ----------------------------------------------- | ------------------------------------------ |\n| focus                  | focus the Input component                       | ^[Function]`() => void`                    |\n| blur                   | blur the Input component, and hide the dropdown | ^[Function]`() => void`                    |\n| selectedLabel ^(2.8.5) | get the currently selected label                | ^[object]`ComputedRef<string \\| string[]>` |\n```\n\n----------------------------------------\n\nTITLE: Countdown Component Usage\nDESCRIPTION: Shows how to implement a countdown component with support for additional control components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/statistic.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Countdown component, support to add other components control countdown.\n\nstatistic/countdown\n:::\n```\n\n----------------------------------------\n\nTITLE: Select Component Properties Table\nDESCRIPTION: Markdown table defining the main configuration properties including empty-values, value-on-clear, popper-append-to-body, and tabindex attributes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select-v2.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| empty-values ^(2.7.0)               | empty values of component, [see config-provider](/en-US/component/config-provider#empty-values-configurations)                           | ^[array]                                                                                                                                                                    | —                                              |\n| value-on-clear ^(2.7.0)             | clear return value, [see config-provider](/en-US/component/config-provider#empty-values-configurations)                                  | ^[string] / ^[number] / ^[boolean] / ^[Function]                                                                                                                            | —                                              |\n| popper-append-to-body ^(deprecated) | whether to append the popper menu to body. If the positioning of the popper is wrong, you can try to set this prop to false              | ^[boolean]                                                                                                                                                                  | false                                          |\n| tabindex ^(2.9.0)                   | tabindex for input                                                                                                                       | ^[string] / ^[number]                                                                                                                                                       | —                                              |\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component with Deprecated Underline Control\nDESCRIPTION: Example showing Link component implementation with both deprecated boolean underline control and new string-based control. Demonstrates transition between old and new API versions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/link.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- works before 2.9.9, use 'hover' after, removed in 3.0.0 -->\n  <el-link underline>link</el-link>\n  <!-- works before 2.9.9, use 'never' after, removed in 3.0.0 -->\n  <el-link :underline=\"false\">link</el-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Documenting Dropdown-Item Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes available for the Dropdown-Item component, including 'command', 'disabled', 'divided', and 'icon'. It specifies the attribute names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## Dropdown-Item API\n\n### Dropdown-Item Attributes\n\n| Name     | Description                                                 | Type                              | Default |\n| -------- | ----------------------------------------------------------- | --------------------------------- | ------- |\n| command  | a command to be dispatched to Dropdown's `command` callback | ^[string] / ^[number] / ^[object] | —       |\n| disabled | whether the item is disabled                                | ^[boolean]                        | false   |\n| divided  | whether a divider is displayed                              | ^[boolean]                        | false   |\n| icon     | custom icon                                                 | ^[string] / ^[Component]          | —       |\n```\n\n----------------------------------------\n\nTITLE: Basic TimeSelect Usage in Element Plus\nDESCRIPTION: Demonstrates how to use the el-time-select component with start, end, and step properties to create a fixed time picker.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/time-select.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\ntime-select/basic\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Types in TypeScript\nDESCRIPTION: Type declarations for slider marks and array values. SliderMarks defines a record mapping numbers to either strings or objects with style and label properties. Arrayable type creates a union type that can be either a single value or an array of values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/slider.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SliderMarks = Record<number, string | { style: CSSProperties; label: any }>\ntype Arrayable<T> = T | T[]\n```\n\n----------------------------------------\n\nTITLE: Container Fill Implementation\nDESCRIPTION: Demonstrates the fill property usage for automatic container filling by child nodes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Use fill to automatically fill the container with child nodes\n\nspace/fill\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Auto Wrapping Space Configuration\nDESCRIPTION: Demonstrates the wrap property usage in horizontal mode for controlling auto wrapping behavior.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Using `wrap` to control line wrap\n\nspace/auto-wrapping\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining MessageBox Input Validator Function in TypeScript\nDESCRIPTION: This code snippet shows the type definition for the inputValidator property of the MessageBox component. It defines a function that takes a string value and returns either a boolean or string.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/message-box.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string) => boolean | string\n```\n\n----------------------------------------\n\nTITLE: Card Integration Example\nDESCRIPTION: Demonstrates how to use the Statistic component within cards for flexible combinations.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/statistic.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Card usage display, can be freely combined\n\nstatistic/card\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Default Sort Object in Element Plus Table (TypeScript)\nDESCRIPTION: This snippet shows the type definition for the default-sort prop in Element Plus Table. It's an object of type Sort used to set the default sort column and order.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nSort\n```\n\n----------------------------------------\n\nTITLE: Singleton Full Screen Loading\nDESCRIPTION: Demonstrates the singleton behavior of full screen loading instances where multiple calls return the same instance.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/loading.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst loadingInstance1 = ElLoading.service({ fullscreen: true })\nconst loadingInstance2 = ElLoading.service({ fullscreen: true })\nconsole.log(loadingInstance1 === loadingInstance2) // true\n```\n\n----------------------------------------\n\nTITLE: Documenting Dropdown Exposed Methods in Markdown\nDESCRIPTION: This snippet outlines the methods exposed by the Dropdown component, including 'handleOpen' and 'handleClose'. It provides the method names, descriptions, and function signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Dropdown Exposes\n\n| Method      | Description             | Type                    |\n| ----------- | ----------------------- | ----------------------- |\n| handleOpen  | open the dropdown menu  | ^[Function]`() => void` |\n| handleClose | close the dropdown menu | ^[Function]`() => void` |\n```\n\n----------------------------------------\n\nTITLE: Custom Loading for Autocomplete in Vue\nDESCRIPTION: Shows how to override the default loading content in the Autocomplete component. This feature is available from version 2.5.0 onwards.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/autocomplete.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nautocomplete/custom-loading\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Header Row Style in Element Plus Table (TypeScript)\nDESCRIPTION: This snippet demonstrates the type definition for the header-row-style prop in Element Plus Table. It can be a function returning custom style for a row in the table header, or an object assigning custom style for every row in the table header.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(data: { row: any, rowIndex: number }) => CSSProperties\n```\n\n----------------------------------------\n\nTITLE: Fill Ratio Customization\nDESCRIPTION: Shows how to use fillRatio parameter to customize the container filling ratio.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Use fillRatio to customize the fill ratio\n\nspace/fill-ratio\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Target Configuration for Tour\nDESCRIPTION: Explains various ways to configure the target for the tour, including string and Function types support since version 2.5.2.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntour/target\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Custom Thumbnail Upload\nDESCRIPTION: Demonstrates how to customize the thumbnail template using scoped slots.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nupload/custom-thumbnail\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for Segmented Component Options\nDESCRIPTION: TypeScript type declaration defining the Option type that can be used with the Segmented component. An Option can be a record with any properties, or a primitive type (string, number, boolean).\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/segmented.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Option = Record<string, any> | string | number | boolean\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker Attributes Table\nDESCRIPTION: Markdown table detailing all available attributes for the DateTimePicker component, including their names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/datetime-picker.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                    | Description                                                                                                    | Type                                                                                           | Default             |\n| ----------------------- | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ------------------- |\n| model-value / v-model   | binding value, if it is an array, the length should be 2                                                       | ^[number] / ^[string] / ^[object]`Date \\| [Date, Date] \\| [string, string]`                    | —                   |\n| readonly                | whether DatePicker is read only                                                                                | ^[boolean]                                                                                     | false               |\n```\n\n----------------------------------------\n\nTITLE: Defining Option Group Slots in Markdown\nDESCRIPTION: A markdown table describing the available slots for the Option Group component, including their names, descriptions, and associated subtags.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description               | Subtags |\n| ------- | ------------------------- | ------- |\n| default | customize default content | Option  |\n```\n\n----------------------------------------\n\nTITLE: Custom Mask Styling for Tour\nDESCRIPTION: Demonstrates how to apply custom styles to the tour mask.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntour/mask\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing Message Component in TypeScript\nDESCRIPTION: Shows how to import the ElMessage component from Element Plus for local usage in a TypeScript file.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/message.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElMessage } from 'element-plus'\n```\n\n----------------------------------------\n\nTITLE: Loading Switch State\nDESCRIPTION: Implementation of Switch component in loading state.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\nswitch/loading\n```\n\n----------------------------------------\n\nTITLE: Row Status Implementation\nDESCRIPTION: Implementation of row styling based on status and custom class conditions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/row-class\n```\n\n----------------------------------------\n\nTITLE: TreeV2 Events Table Structure\nDESCRIPTION: Markdown table defining available events for TreeV2 component, including event names, descriptions, and their parameter signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name               | Description                                          | Parameters                                                                                                                              |\n| ------------------ | ---------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| node-click         | triggers when a node is clicked                      | `(data: TreeNodeData, node: TreeNode, e: MouseEvent)`                                                                                   |\n| node-drop ^(2.8.3) | triggers when drag someting and drop on a node       | `(data: TreeNodeData, node: TreeNode, e: DragEvent)`                                                                                    |\n| node-contextmenu   | triggers when a node is clicked by right button      | `(e: Event, data: TreeNodeData, node: TreeNode)`                                                                                        |\n| check-change       | triggers when the selected state of the node changes | `(data: TreeNodeData, checked: boolean)`                                                                                                |\n| check              | triggers after clicking the checkbox of a node       | `(data: TreeNodeData, info: { checkedKeys: TreeKey[],checkedNodes: TreeData, halfCheckedKeys: TreeKey[], halfCheckedNodes: TreeData,})` |\n| current-change     | triggers when current node changes                   | `(data: TreeNodeData, node: TreeNode)`                                                                                                  |\n| node-expand        | triggers when current node open                      | `(data: TreeNodeData, node: TreeNode)`                                                                                                  |\n| node-collapse      | triggers when current node close                     | `(data: TreeNodeData, node: TreeNode)`                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Documenting Option Group Attributes in Markdown\nDESCRIPTION: A markdown table listing the attributes available for the Option Group component, including their names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Description                                  | Type       | Default |\n| -------- | -------------------------------------------- | ---------- | ------- |\n| label    | name of the group                            | ^[string]  | —       |\n| disabled | whether to disable all options in this group | ^[boolean] | false   |\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Component Attributes in Markdown\nDESCRIPTION: A markdown table listing all available attributes for the DatePicker component in Element Plus. It includes attribute names, descriptions, data types, and default values. The table covers a wide range of configuration options for customizing the DatePicker's behavior and appearance.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/date-picker.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                         | Description                                                                                                                  | Type                                                                                                                                                           | Default       |\n| ---------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- |\n| model-value / v-model        | binding value, if it is an array, the length should be 2                                                                     | ^[number] / ^[string] / ^[object]`Date \\| [Date, Date] \\| [string, string]`                                                                                    | ''            |\n| readonly                     | whether DatePicker is read only                                                                                              | ^[boolean]                                                                                                                                                     | false         |\n| disabled                     | whether DatePicker is disabled                                                                                               | ^[boolean]                                                                                                                                                     | false         |\n| size                         | size of Input                                                                                                                | ^[enum]`'' \\| 'large' \\| 'default' \\| 'small'`                                                                                                                 | —             |\n| editable                     | whether the input is editable                                                                                                | ^[boolean]                                                                                                                                                     | true          |\n| clearable                    | whether to show clear button                                                                                                 | ^[boolean]                                                                                                                                                     | true          |\n| placeholder                  | placeholder in non-range mode                                                                                                | ^[string]                                                                                                                                                      | ''            |\n| start-placeholder            | placeholder for the start date in range mode                                                                                 | ^[string]                                                                                                                                                      | —             |\n| end-placeholder              | placeholder for the end date in range mode                                                                                   | ^[string]                                                                                                                                                      | —             |\n| type                         | type of the picker                                                                                                           | ^[enum]`'year' \\| 'years' \\|'month' \\| 'months' \\| 'date' \\| 'dates' \\| 'datetime' \\| 'week' \\| 'datetimerange' \\| 'daterange' \\| 'monthrange' \\| 'yearrange'` | date          |\n| format                       | format of the displayed value in the input box                                                                               | ^[string] see [date formats](/en-US/component/date-picker#date-formats)                                                                                        | YYYY-MM-DD    |\n| popper-class                 | custom class name for DatePicker's dropdown                                                                                  | ^[string]                                                                                                                                                      | —             |\n| popper-options               | Customized popper option see more at [popper.js](https://popper.js.org/docs/v2/)                                             | ^[object]`Partial<PopperOptions>`                                                                                                                              | {}            |\n| range-separator              | range separator                                                                                                              | ^[string]                                                                                                                                                      | '-'           |\n| default-value                | optional, default date of the calendar                                                                                       | ^[object]`Date \\| [Date, Date]`                                                                                                                                | —             |\n| default-time                 | optional, the time value to use when selecting date range                                                                    | ^[object]`Date \\| [Date, Date]`                                                                                                                                | —             |\n| value-format                 | optional, format of binding value. If not specified, the binding value will be a Date object                                 | ^[string] see [date formats](/en-US/component/date-picker#date-formats)                                                                                        | —             |\n| id                           | same as `id` in native input                                                                                                 | ^[string] / ^[object]`[string, string]`                                                                                                                        | —             |\n| name                         | same as `name` in native input                                                                                               | ^[string] / ^[object]`[string, string]`                                                                                                                        | ''            |\n| unlink-panels                | unlink two date-panels in range-picker                                                                                       | ^[boolean]                                                                                                                                                     | false         |\n| prefix-icon                  | custom prefix icon component. By default, if the value of `type` is `TimeLikeType`, the value is `Clock`, else is `Calendar` | ^[string] / ^[object]`Component`                                                                                                                               | ''            |\n| clear-icon                   | custom clear icon component                                                                                                  | ^[string] / ^[object]`Component`                                                                                                                               | `CircleClose` |\n| validate-event               | whether to trigger form validation                                                                                           | ^[boolean]                                                                                                                                                     | true          |\n| disabled-date                | a function determining if a date is disabled with that date as its parameter. Should return a Boolean                        | ^[Function]`(data: Date) => boolean`                                                                                                                           | —             |\n| shortcuts                    | an object array to set shortcut options                                                                                      | ^[object]`Array<{ text: string, value: Date \\| Function }>`                                                                                                    | []            |\n| cell-class-name              | set custom className                                                                                                         | ^[Function]`(data: Date) => string`                                                                                                                            | —             |\n| teleported                   | whether date-picker dropdown is teleported to the body                                                                       | ^[boolean]                                                                                                                                                     | true          |\n```\n\n----------------------------------------\n\nTITLE: Tooltip Exposed Properties and Methods Table\nDESCRIPTION: Markdown table documenting the exposed properties and methods of the tooltip component, including popper references, content validation, and state management functions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                 | Description                                                       | Type                                                |\n| -------------------- | ----------------------------------------------------------------- | --------------------------------------------------- |\n| popperRef            | el-popper component instance                                      | ^[object]`Ref<PopperInstance \\| undefined>`         |\n| contentRef           | el-tooltip-content component instance                             | ^[object]`Ref<TooltipContentInstance \\| undefined>` |\n| isFocusInsideContent | validate current focus event is trigger inside el-tooltip-content | ^[Function]`() => boolean \\| undefined`             |\n| updatePopper         | update el-popper component instance                               | ^[Function]`() => void`                             |\n| onOpen               | expose onOpen function to mange el-tooltip open state             | ^[Function]`(event?: Event \\| undefined) => void`   |\n| onClose              | expose onClose function to mange el-tooltip open state            | ^[Function]`(event?: Event \\| undefined) => void`   |\n| hide                 | expose hide function                                              | ^[Function]`(event?: Event \\| undefined) => void`   |\n```\n\n----------------------------------------\n\nTITLE: Non-modal Tour Implementation\nDESCRIPTION: Shows how to create a non-modal tour using ':mask=\"false\"' and recommends using 'type=\"primary\"' for emphasis.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntour/non-modal\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Content in Tree V2 Component\nDESCRIPTION: This example demonstrates how to customize the content of tree nodes in the Tree V2 component, allowing for the addition of icons or buttons.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\ntree-v2/custom-node\n```\n\n----------------------------------------\n\nTITLE: Date Localization with Day.js\nDESCRIPTION: Demonstrates how to import locale settings for Day.js to support date and time localization in components like DatePicker.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/i18n.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'dayjs/locale/zh-cn'\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Mode via HTML Class\nDESCRIPTION: Basic implementation of dark mode by adding the 'dark' class to the HTML root element.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dark-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html class=\"dark\">\n  <head></head>\n  <body></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Width for Clearable Input in Vue\nDESCRIPTION: This snippet demonstrates how to set a fixed width for an ElInput component with the clearable property. This addresses the issue of the input width expanding when the clearable icon is displayed.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<el-input v-model=\"input\" clearable style=\"width: 200px\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Rate Component Events\nDESCRIPTION: Table documenting available events for the Element Plus Rate component, including event names, descriptions, and callback function signatures.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/rate.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   | Description                         | Type                                 |\n| ------ | ----------------------------------- | ------------------------------------ |\n| change | Triggers when rate value is changed | ^[Function]`(value: number) => void` |\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Attributes in Markdown\nDESCRIPTION: This code snippet is a markdown table that defines the attributes for the Cascader component. It includes detailed information about each attribute, its type, and default value.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                | Description                                                                                                                                                                      | Type                                                                                                                                                                        | Default      |\n| ----------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ |\n| model-value / v-model               | binding value                                                                                                                                                                    | ^[string]/^[number]/^[object]`string[] \\| number[] \\| any`                                                                                                                  | —            |\n| options                             | data of the options, the key of `value` and `label` can be customize by `CascaderProps`.                                                                                         | ^[object]`Record<string, unknown>[]`                                                                                                                                        | —            |\n| props                               | configuration options, see the following `CascaderProps` table.                                                                                                                  | ^[object]`CascaderProps`                                                                                                                                                    | —            |\n| size                                | size of input                                                                                                                                                                    | ^[enum]`'large' \\| 'default' \\| 'small'`                                                                                                                                    | —            |\n| placeholder                         | placeholder of input                                                                                                                                                             | ^[string]                                                                                                                                                                   | —            |\n| disabled                            | whether Cascader is disabled                                                                                                                                                     | ^[boolean]                                                                                                                                                                  | —            |\n| clearable                           | whether selected value can be cleared                                                                                                                                            | ^[boolean]                                                                                                                                                                  | —            |\n| show-all-levels                     | whether to display all levels of the selected value in the input                                                                                                                 | ^[boolean]                                                                                                                                                                  | true         |\n| collapse-tags                       | whether to collapse tags in multiple selection mode                                                                                                                              | ^[boolean]                                                                                                                                                                  | —            |\n| collapse-tags-tooltip               | whether show all selected tags when mouse hover text of collapse-tags. To use this, `collapse-tags` must be true                                                                 | ^[boolean]                                                                                                                                                                  | false        |\n| separator                           | option label separator                                                                                                                                                           | ^[string]                                                                                                                                                                   | ' / '        |\n| filterable                          | whether the options can be searched                                                                                                                                              | ^[boolean]                                                                                                                                                                  | —            |\n| filter-method                       | customize search logic, the first parameter is `node`, the second is `keyword`, and need return a boolean value indicating whether it hits.                                      | ^[Function]`(node: CascaderNode, keyword: string) => boolean`                                                                                                               | —            |\n| debounce                            | debounce delay when typing filter keyword, in milliseconds                                                                                                                       | ^[number]                                                                                                                                                                   | 300          |\n| before-filter                       | hook function before filtering with the value to be filtered as its parameter. If `false` is returned or a `Promise` is returned and then is rejected, filtering will be aborted | ^[Function]`(value: string) => boolean`                                                                                                                                     | —            |\n| popper-class                        | custom class name for Cascader's dropdown                                                                                                                                        | ^[string]                                                                                                                                                                   | ''           |\n| teleported                          | whether cascader popup is teleported                                                                                                                                             | ^[boolean]                                                                                                                                                                  | true         |\n| tag-type                            | tag type                                                                                                                                                                         | ^[enum]`'success' \\| 'info' \\| 'warning' \\| 'danger'`                                                                                                                       | info         |\n| tag-effect ^(2.7.8)                 | tag effect                                                                                                                                                                       | ^[enum]`'light' \\| 'dark' \\| 'plain'`                                                                                                                                       | light        |\n| validate-event                      | whether to trigger form validation                                                                                                                                               | ^[boolean]                                                                                                                                                                  | true         |\n| max-collapse-tags ^(2.3.10)         | The max tags number to be shown. To use this, `collpase-tags` must be true                                                                                                       | ^[number]                                                                                                                                                                   | 1            |\n| empty-values ^(2.7.0)               | empty values of component, [see config-provider](/en-US/component/config-provider#empty-values-configurations)                                                                   | ^[array]                                                                                                                                                                    | —            |\n```\n\n----------------------------------------\n\nTITLE: Progress Component API Documentation - Element Plus\nDESCRIPTION: API documentation detailing all available attributes and slots for the Progress component. Includes configuration options for percentage, type, styling, and customization.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/progress.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Description                                                                           | Type                                                                                                        | Default |\n| ---------------------- | ------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | ------- |\n| percentage ^(required) | percentage                                                                            | ^[number]`(0-100)`                                                                                          | 0       |\n| type                   | the type of progress bar                                                              | ^[enum]`'line' \\| 'circle' \\| 'dashboard'`                                                                  | line    |\n| stroke-width           | the width of progress bar                                                             | ^[number]                                                                                                   | 6       |\n| text-inside            | whether to place the percentage inside progress bar, only works when `type` is 'line' | ^[boolean]                                                                                                  | false   |\n| status                 | the current status of progress bar                                                    | ^[enum]`'success' \\| 'exception' \\| 'warning'`                                                              | —       |\n| indeterminate          | set indeterminate progress                                                            | ^[boolean]                                                                                                  | false   |\n| duration               | control the animation duration of indeterminate progress or striped flow progress     | ^[number]                                                                                                   | 3       |\n| color                  | background color of progress bar. Overrides `status` prop                             | ^[string] / ^[function]`(percentage: number) => string` / ^[Array]`{ color: string; percentage: number }[]` | ''      |\n| width                  | the canvas width of circle progress bar                                               | ^[number]                                                                                                   | 126     |\n| show-text              | whether to show percentage                                                            | ^[boolean]                                                                                                  | true    |\n| stroke-linecap         | circle/dashboard type shape at the end path                                           | ^[enum]`'butt' \\| 'round' \\| 'square'`                                                                      | round   |\n| format                 | custom text format                                                                    | ^[Function]`(percentage: number) => string`                                                                 | —       |\n| striped ^(2.3.4)       | stripe over the progress bar's color                                                  | ^[boolean]                                                                                                  | false   |\n| striped-flow ^(2.3.4)  | get the stripes to flow                                                               | ^[boolean]                                                                                                  | false   |\n```\n\n----------------------------------------\n\nTITLE: Select Slots Table\nDESCRIPTION: Markdown table listing available slots for customizing various parts of the Select component including default, header, footer, empty, prefix, tag, loading, and label slots.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select-v2.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Description                           |\n| ---------------- | ------------------------------------- |\n| default          | Option renderer                       |\n| header ^(2.5.2)  | content at the top of the dropdown    |\n| footer ^(2.5.2)  | content at the bottom of the dropdown |\n| empty            | content when options is empty         |\n| prefix           | prefix content of input               |\n| tag ^(2.5.0)     | content as Select tag                 |\n| loading ^(2.5.2) | content as Select loading             |\n| label ^(2.7.4)   | content as Select label               |\n```\n\n----------------------------------------\n\nTITLE: Disabled State of InputTag Component\nDESCRIPTION: Shows how to set the InputTag component to a disabled state.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/disabled\n```\n\n----------------------------------------\n\nTITLE: Custom Node Class Implementation\nDESCRIPTION: Demonstrates how to apply custom CSS classes to tree nodes using props.class.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree.md#2025-04-22_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: CDN Configuration for Localization\nDESCRIPTION: Shows how to configure Element Plus localization when using the library via CDN, using unpkg as an example.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/i18n.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//unpkg.com/element-plus/dist/locale/zh-cn\"></script>\n<script>\n  app.use(ElementPlus, {\n    locale: ElementPlusLocaleZhCn,\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Dark Mode CSS Variables\nDESCRIPTION: Example of overriding default dark mode CSS variables with custom values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dark-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nhtml.dark {\n  /* custom dark bg color */\n  --el-bg-color: #626aef;\n}\n```\n\n----------------------------------------\n\nTITLE: Photo Wall Upload Implementation\nDESCRIPTION: Shows how to create a photo wall style file list using the list-type property.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nupload/photo-wall\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Progress Component Slots Documentation - Element Plus\nDESCRIPTION: Documentation for available slots in the Progress component, showing customization options for content display.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/progress.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description        | Type                              |\n| ------- | ------------------ | --------------------------------- |\n| default | Customized content | ^[object]`{ percentage: number }` |\n```\n\n----------------------------------------\n\nTITLE: Listing Select Exposed Methods in Markdown\nDESCRIPTION: A markdown table describing the methods and properties exposed by the Select component, including their names, descriptions, and types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Description                                     | Type                                       |\n| ---------------------- | ----------------------------------------------- | ------------------------------------------ |\n| focus                  | focus the Input component                       | ^[Function]`() => void`                    |\n| blur                   | blur the Input component, and hide the dropdown | ^[Function]`() => void`                    |\n| selectedLabel ^(2.8.5) | get the currently selected label                | ^[object]`ComputedRef<string \\| string[]>` |\n```\n\n----------------------------------------\n\nTITLE: Direct SVG Icon Usage without el-icon Wrapper\nDESCRIPTION: Vue template showing how to use SVG icons directly without the el-icon wrapper. Since raw SVG icons don't inherit attributes automatically, inline styling must be applied directly to each icon element.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div style=\"font-size: 20px\">\n    <!-- Since svg icons do not carry any attributes by default -->\n    <!-- You need to provide attributes directly -->\n    <Edit style=\"width: 1em; height: 1em; margin-right: 8px\" />\n    <Share style=\"width: 1em; height: 1em; margin-right: 8px\" />\n    <Delete style=\"width: 1em; height: 1em; margin-right: 8px\" />\n    <Search style=\"width: 1em; height: 1em; margin-right: 8px\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Documenting Carousel Events in Markdown\nDESCRIPTION: Documentation table outlining the events emitted by the Carousel component, including change events and their parameters.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/carousel.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   | Description                                                                                                                                              | Type                                                    |\n| ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- |\n| change | triggers when the active slide switches, it has two parameters, the one is the index of the new active slide, and other is index of the old active slide | ^[Function]`(current: number, prev: number) => boolean` |\n```\n\n----------------------------------------\n\nTITLE: Customizing Dark Mode SCSS Variables\nDESCRIPTION: Advanced customization using SCSS to override default dark mode variables with custom values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dark-mode.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n/*just override what you need*/\n@forward 'element-plus/theme-chalk/src/dark/var.scss' with (\n  $bg-color: (\n    'page': #0a0a0a,\n    '': #626aef,\n    'overlay': #1d1e1f,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Arrow Implementation\nDESCRIPTION: Example of implementing a tooltip with an arrow pointer.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip-v2.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\ntooltip-v2/arrow\n```\n\n----------------------------------------\n\nTITLE: TimeSelect with Custom Time Formats in Element Plus\nDESCRIPTION: Shows how to use the format property to control the display of hours and minutes in the TimeSelect component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/time-select.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ntime-select/time-formats\n```\n\n----------------------------------------\n\nTITLE: Vertically Centering Timeline Items in Element Plus\nDESCRIPTION: This example demonstrates how to vertically center Timeline-Items in the Element Plus Timeline component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/timeline.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntimeline/center\n\n:::\n```\n\n----------------------------------------\n\nTITLE: File Upload with Previous File Replacement\nDESCRIPTION: Shows how to implement file upload with automatic replacement of previous files when selecting new ones using limit and on-exceed properties.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo Set `limit` and `on-exceed` to automatically replace the previous file when select a new file.\n\nupload/limit-cover\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Events in Markdown\nDESCRIPTION: This snippet outlines the events that can be listened to on the Drawer component. It includes events for opening and closing animations, as well as auto-focus events.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Description                                      | Type                    |\n| ---------------- | ------------------------------------------------ | ----------------------- |\n| open             | Triggered before Drawer opening animation begins | ^[Function]`() => void` |\n| opened           | Triggered after Drawer opening animation ended   | ^[Function]`() => void` |\n| close            | Triggered before Drawer closing animation begins | ^[Function]`() => void` |\n| closed           | Triggered after Drawer closing animation ended   | ^[Function]`() => void` |\n| open-auto-focus  | triggers after Drawer opens and content focused  | ^[Function]`() => void` |\n| close-auto-focus | triggers after Drawer closed and content focused | ^[Function]`() => void` |\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Slots in Markdown\nDESCRIPTION: This snippet describes the available slots for content insertion in the Drawer component. It includes slots for the main content, header, footer, and a deprecated title slot.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                | Description                                                                                    |\n| ------------------- | ---------------------------------------------------------------------------------------------- |\n| default             | Drawer's Content                                                                               |\n| header              | Drawer header section; Replacing this removes the title, but does not remove the close button. |\n| footer              | Drawer footer Section                                                                           |\n| title ^(deprecated) | Works the same as the header slot. Use that instead.                                           |\n```\n\n----------------------------------------\n\nTITLE: Defining FormItemRule in Element Plus\nDESCRIPTION: This snippet describes the FormItemRule object used for validation in Element Plus FormItem components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/form.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description                     | Type                        | Default |\n| ------- | ------------------------------- | --------------------------- | ------- |\n| trigger | How the validator is triggered. | ^[enum]`'blur' \\| 'change'` | —       |\n```\n\n----------------------------------------\n\nTITLE: Disabled Input Number in Vue\nDESCRIPTION: Shows how to create a disabled Input Number component and set minimum and maximum values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num\" :disabled=\"true\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Drawer Without Title in Element Plus\nDESCRIPTION: Shows how to create a drawer component without a header section by setting the withHeader attribute to false. This provides more space for content while maintaining accessibility by setting the title attribute.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ndrawer/no-title\n```\n\n----------------------------------------\n\nTITLE: Specifying MessageBox Button Size Options in TypeScript\nDESCRIPTION: This code snippet defines the possible string values for the buttonSize property of the MessageBox component. It allows for 'small', 'default', or 'large' sizes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/message-box.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'small' | 'default' | 'large'\n```\n\n----------------------------------------\n\nTITLE: Injecting Teleport Markup in SSR HTML Template\nDESCRIPTION: Demonstrates the HTML structure required for injecting teleport markup during SSR. This template includes placeholders for teleported content and the main application HTML.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/ssr.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Element Plus</title>\n    <!--preload-links-->\n  </head>\n  <body>\n    <!--app-teleports-->\n    <div id=\"app\"><!--app-html--></div>\n    <script type=\"module\" src=\"/src/entry-client.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining CacheOption Type for TreeSelect in TypeScript\nDESCRIPTION: Declares the CacheOption type used for caching lazy-loaded node data in the TreeSelect component. It includes properties for value, label, and disabled state.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-select.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CacheOption = {\n  value: string | number | boolean | object\n  currentLabel: string | number\n  isDisabled: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Trigger Method in Vue\nDESCRIPTION: Shows how to change the trigger method for the dropdown using the 'trigger' attribute. Default is hover, but it can be set to click.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ndropdown/how-to-trigger\n```\n\n----------------------------------------\n\nTITLE: ColorPicker with Predefined Colors in Vue\nDESCRIPTION: Illustrates the use of predefined color options in ColorPicker component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/color-picker.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ncolor-picker/predefined-color\n```\n\n----------------------------------------\n\nTITLE: Documenting Option Attributes in Markdown\nDESCRIPTION: A markdown table listing the attributes available for the Option component, including their names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Description                                 | Type                                           | Default |\n| -------- | ------------------------------------------- | ---------------------------------------------- | ------- |\n| value    | value of option                             | ^[string] / ^[number] / ^[boolean] / ^[object] | —       |\n| label    | label of option, same as `value` if omitted | ^[string] / ^[number]                          | —       |\n| disabled | whether option is disabled                  | ^[boolean]                                     | false   |\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Element Plus Form Components\nDESCRIPTION: This code snippet defines various TypeScript types and interfaces used in Element Plus form components. It includes types for form validation, rules, and form item properties, as well as utility types for handling nested object paths.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/form.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Arrayable<T> = T | T[]\n\ntype FormValidationResult = Promise<boolean>\n\n// ValidateFieldsError: see [async-validator](https://github.com/yiminghe/async-validator/blob/master/src/interface.ts)\ntype FormValidateCallback = (\n  isValid: boolean,\n  invalidFields?: ValidateFieldsError\n) => Promise<void> | void\n\n// RuleItem: see [async-validator](https://github.com/yiminghe/async-validator/blob/master/src/interface.ts)\ninterface FormItemRule extends RuleItem {\n  trigger?: Arrayable<string>\n}\n\ntype Primitive = null | undefined | string | number | boolean | symbol | bigint\ntype BrowserNativeObject = Date | FileList | File | Blob | RegExp\ntype IsTuple<T extends ReadonlyArray<any>> = number extends T['length']\n  ? false\n  : true\ntype ArrayMethodKey = keyof any[]\ntype TupleKey<T extends ReadonlyArray<any>> = Exclude<keyof T, ArrayMethodKey>\ntype ArrayKey = number\ntype PathImpl<K extends string | number, V> = V extends\n  | Primitive\n  | BrowserNativeObject\n  ? `${K}`\n  : `${K}` | `${K}.${Path<V>}`\ntype Path<T> = T extends ReadonlyArray<infer V>\n  ? IsTuple<T> extends true\n    ? {\n        [K in TupleKey<T>]-?: PathImpl<Exclude<K, symbol>, T[K]>\n      }[TupleKey<T>]\n    : PathImpl<ArrayKey, V>\n  : {\n      [K in keyof T]-?: PathImpl<Exclude<K, symbol>, T[K]>\n    }[keyof T]\ntype FieldPath<T> = T extends object ? Path<T> : never\n// MaybeRef: see [@vueuse/core](https://github.com/vueuse/vueuse/blob/main/packages/shared/utils/types.ts)\n// UnwrapRef: see [vue](https://github.com/vuejs/core/blob/main/packages/reactivity/src/ref.ts)\ntype FormRules<T extends MaybeRef<Record<string, any> | string> = string> =\n  Partial<\n    Record<\n      UnwrapRef<T> extends string ? UnwrapRef<T> : FieldPath<UnwrapRef<T>>,\n      Arrayable<FormItemRule>\n    >\n  >\n\ntype FormItemValidateState = typeof formItemValidateStates[number]\ntype FormItemProps = ExtractPropTypes<typeof formItemProps>\n\ntype FormItemContext = FormItemProps & {\n  $el: HTMLDivElement | undefined\n  size: ComponentSize\n  validateState: FormItemValidateState\n  isGroup: boolean\n  labelId: string\n  inputIds: string[]\n  hasLabel: boolean\n  fieldValue: any\n  addInputId: (id: string) => void\n  removeInputId: (id: string) => void\n  validate: (\n    trigger: string,\n    callback?: FormValidateCallback\n  ) => FormValidationResult\n  resetField(): void\n  clearValidate(): void\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Exposed Dialog Methods in Markdown\nDESCRIPTION: Lists the methods exposed by the Dialog component, including resetPosition and handleClose, with their respective versions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dialog.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Description    | Type                    |\n| ---------------------- | -------------- | ----------------------- |\n| resetPosition ^(2.8.1) | reset position | ^[Function]`() => void` |\n| handleClose ^(2.9.8)   | close dialog   | ^[Function]`() => void` |\n```\n\n----------------------------------------\n\nTITLE: Setting Max Value for Badge in Element Plus\nDESCRIPTION: Shows how to customize the maximum value displayed by the Badge component. The max property is used to set this limit and only works when the value is also a Number.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/badge.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nbadge/max\n```\n\n----------------------------------------\n\nTITLE: File List with Thumbnail Display\nDESCRIPTION: Shows implementation of file list with thumbnail display functionality.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/upload.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nupload/file-list-with-thumbnail\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Injecting Rendered Content into SSR HTML Template\nDESCRIPTION: Demonstrates how to inject the rendered app HTML, preload links, and teleported content into the final HTML template during the SSR process.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/ssr.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// irrelevant code omitted\nconst [appHtml, preloadLinks, teleports] = await render(url, manifest)\n\nconst html = template\n  .replace('<!--preload-links-->', preloadLinks)\n  .replace('<!--app-html-->', appHtml)\n  .replace(/(\\n|\\r\\n)\\s*<!--app-teleports-->/, teleports)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Header Row Class in Element Plus Table (TypeScript)\nDESCRIPTION: This snippet shows the type definition for the header-row-class-name prop in Element Plus Table. It can be a function returning custom class names for a row in the table header, or a string assigning class names for every row in the table header.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(data: { row: any, rowIndex: number }) => string\n```\n\n----------------------------------------\n\nTITLE: TreeV2 Slots Table Structure\nDESCRIPTION: Markdown table defining available slots for TreeV2 component, including default and empty slots with their scope parameters.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| -              | Custom content for tree nodes. The scope parameter is `{ node: TreeNode, data: TreeNodeData }` |\n| empty ^(2.9.0) | empty you can customize content when data is empty.                                            |\n```\n\n----------------------------------------\n\nTITLE: ColorPicker with Different Sizes in Vue\nDESCRIPTION: Demonstrates the various size options available for the ColorPicker component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/color-picker.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ncolor-picker/sizes\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderPanel Events in Markdown\nDESCRIPTION: This snippet defines the events for the CascaderPanel component, including their names, descriptions, and types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Description                                                             | Type                                                |\n| ------------- | ----------------------------------------------------------------------- | --------------------------------------------------- |\n| change        | triggers when the binding value changes                                 | ^[Function]`(value: CascaderValue) => void`         |\n| expand-change | triggers when expand option changes                                     | ^[Function]`(value: CascaderNodePathValue) => void` |\n| close         | close panel event, provided to Cascader to put away the panel judgment. | ^[Function]`() => void`                             |\n```\n\n----------------------------------------\n\nTITLE: Config Provider Message Configuration Interface\nDESCRIPTION: TypeScript interface showing message-specific configuration options including maximum messages, grouping, duration, and display settings.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/config-provider.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MessageConfig {\n  max?: number;        // Maximum number of messages\n  grouping?: boolean;   // Merge messages with same content\n  duration?: number;    // Display duration in milliseconds\n  showClose?: boolean;  // Show close button\n  offset?: number;      // Distance from viewport top\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch State\nDESCRIPTION: Example of implementing a disabled Switch component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\nswitch/disabled\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Tour Component\nDESCRIPTION: Demonstrates the most basic usage of the Tour component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntour/basic\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Combined Spans Implementation\nDESCRIPTION: Implementation combining both rowspan and colspan functionality.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/spans\n```\n\n----------------------------------------\n\nTITLE: Documenting Carousel-Item Properties in Markdown\nDESCRIPTION: API documentation table defining the properties available for individual Carousel items, including name and label attributes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/carousel.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name  | Description                                      | Type                  | Default |\n| ----- | ------------------------------------------------ | --------------------- | ------- |\n| name  | name of the item, can be used in `setActiveItem` | ^[string]             | ''      |\n| label | text content for the corresponding indicator     | ^[string] / ^[number] | ''      |\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Header Cell Style in Element Plus Table (TypeScript)\nDESCRIPTION: This snippet shows the type definition for the header-cell-style prop in Element Plus Table. It can be a function returning custom style for a cell in the table header, or an object assigning custom style for every cell in the table header.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(data: { row: any, column: any, rowIndex: number, columnIndex: number }) => CSSProperties\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage Configuration\nDESCRIPTION: Covers advanced tooltip features including custom transitions, disable functionality, and ElPopper attributes integration.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntooltip/advanced-usage\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Calendar Component in TypeScript\nDESCRIPTION: Defines the possible date selection types for the Calendar component, including navigation to previous/next month, previous/next year, or today.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/calendar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CalendarDateType =\n  | 'prev-month'\n  | 'next-month'\n  | 'prev-year'\n  | 'next-year'\n  | 'today'\n```\n\n----------------------------------------\n\nTITLE: Defining Option Slots in Markdown\nDESCRIPTION: A markdown table describing the available slots for the Option component, including their names and descriptions.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description               |\n| ------- | ------------------------- |\n| default | customize default content |\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Exposed Methods in Markdown\nDESCRIPTION: This snippet outlines the methods exposed by the Drawer component, specifically the handleClose method for programmatically closing the drawer.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/drawer.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Description                                                     |\n| ----------- | --------------------------------------------------------------- |\n| handleClose | In order to close Drawer, this method will call `before-close`. |\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown-Menu Slots in Markdown\nDESCRIPTION: This snippet describes the slots available for the Dropdown-Menu component, specifically the 'default' slot for content of the Dropdown Menu.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## Dropdown-Menu API\n\n### Dropdown-Menu Slots\n\n| Name    | Description              | Subtags       |\n| ------- | ------------------------ | ------------- |\n| default | content of Dropdown Menu | Dropdown-Item |\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Element Plus Skeleton Component\nDESCRIPTION: Demonstrates the most basic implementation of the Skeleton component. The code is referenced but not shown directly in the documentation.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/basic-usage\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Customizing Popconfirm in Element Plus\nDESCRIPTION: This code example illustrates how to customize the Popconfirm component. It likely includes modifications to the appearance or behavior of the default Popconfirm.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popconfirm.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\npopconfirm/customize\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Slots in Markdown\nDESCRIPTION: Describes the available slots for the Dialog component, including default, header, footer, and a deprecated title slot.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dialog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                | Description                                                                                           |\n| ------------------- | ----------------------------------------------------------------------------------------------------- |\n| default             | default content of Dialog                                                                             |\n| header              | content of the Dialog header; Replacing this removes the title, but does not remove the close button. |\n| footer              | content of the Dialog footer                                                                          |\n| title ^(deprecated) | works the same as the header slot. Use that instead.                                                  |\n```\n\n----------------------------------------\n\nTITLE: Declaring ImageViewer Types in TypeScript\nDESCRIPTION: Defines TypeScript type declarations for the Image Viewer component, including action types and action options. These types specify allowed values for the viewer actions (zoom and rotation) and their configuration options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/image.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImageViewerAction = 'zoomIn' | 'zoomOut' | 'clockwise' | 'anticlockwise'\ntype ImageViewerActionOptions = {\n  enableTransition?: boolean\n  zoomRate?: number\n  rotateDeg?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Popconfirm in Element Plus\nDESCRIPTION: This snippet shows the basic usage of the Popconfirm component. It demonstrates that only the 'title' attribute is available in Popconfirm, while 'content' is ignored.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popconfirm.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\npopconfirm/basic-usage\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Website Preview\nDESCRIPTION: Command to launch the documentation website locally for previewing components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dev-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: CheckboxButton Slots API Definition\nDESCRIPTION: Defines the available slots for the CheckboxButton component, specifically the default slot for custom content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/checkbox.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description               |\n| ------- | ------------------------- |\n| default | customize default content |\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Slots in Markdown\nDESCRIPTION: This snippet defines the slots for the Cascader component, including their names, descriptions, and scopes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                     | Description                                                                                    | Scope                               |\n| ------------------------ | ---------------------------------------------------------------------------------------------- | ----------------------------------- |\n| default                  | the custom content of cascader node, which are current Node object and node data respectively. | ^[object]`{ node: any, data: any }` |\n| empty                    | content when there is no matched options.                                                      | —                                   |\n| prefix ^(2.9.4)          | content as Input prefix                                                                        | —                                   |\n| suggestion-item ^(2.9.5) | custom content for suggestion item when searching                                              | ^[object]`{ item: CascaderNode }`   |\n```\n\n----------------------------------------\n\nTITLE: Importing Element Plus Display Utilities\nDESCRIPTION: Code snippet showing how to import the Element Plus display utilities CSS file for responsive hiding classes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/layout.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'element-plus/theme-chalk/display.css'\n```\n\n----------------------------------------\n\nTITLE: Customizing Menu Height with CSS Variables\nDESCRIPTION: Shows how to override the default height of a horizontal menu using CSS custom properties.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/menu.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.el-menu--horizontal {\n  --el-menu-horizontal-height: 100px;\n}\n```\n\n----------------------------------------\n\nTITLE: Input Number with Steps in Vue\nDESCRIPTION: Demonstrates how to set incremental steps for the Input Number component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num\" :step=\"2\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(5)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining TourStep Slots in Markdown\nDESCRIPTION: This snippet outlines the available slots for the TourStep component. It includes the default slot for description and a header slot.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description |\n| ------- | ----------- |\n| default | description |\n| header  | header      |\n```\n\n----------------------------------------\n\nTITLE: Text Component API Specification\nDESCRIPTION: Detailed API documentation for the Text component showing supported attributes and slots. Includes type definitions, default values, and available options for customization.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/text.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                | Description        | Type                                                               | Default |\n| ------------------- | ------------------ | ------------------------------------------------------------------ | ------- |\n| type                | text type          | ^[enum]`'primary' \\| 'success' \\| 'warning' \\| 'danger' \\| 'info'` | —       |\n| size                | text size          | ^[enum]`'large' \\| 'default' \\| 'small'`                           | default |\n| truncated           | render ellipsis    | ^[boolean]                                                         | false   |\n| line-clamp ^(2.4.0) | maximum lines      | ^[string] / ^[number]                                              | —       |\n| tag                 | custom element tag | ^[string]                                                          | span    |\n```\n\n----------------------------------------\n\nTITLE: CheckboxButton Attributes API Definition\nDESCRIPTION: Comprehensive list of attributes available for the CheckboxButton component, including value handling, labeling, and state management.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/checkbox.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Description                                                                                                 | Type                                           | Default |\n| ------------------------- | ----------------------------------------------------------------------------------------------------------- | ---------------------------------------------- | ------- |\n| value ^(2.6.0)            | value of the checkbox when used inside a `checkbox-group`                                                   | ^[string] / ^[number] / ^[boolean] / ^[object] | —       |\n| label                     | label of the checkbox when used inside a `checkbox-group`. If there's no value, `label` will act as `value` | ^[string] / ^[number] / ^[boolean] / ^[object] | —       |\n| true-value ^(2.6.0)       | value of the checkbox if it's checked                                                                       | ^[string] / ^[number]                          | —       |\n| false-value ^(2.6.0)      | value of the checkbox if it's not checked                                                                   | ^[string] / ^[number]                          | —       |\n| disabled                  | whether the checkbox is disabled                                                                            | ^[boolean]                                     | false   |\n| name                      | native 'name' attribute                                                                                     | ^[string]                                      | —       |\n| checked                   | if the checkbox is checked                                                                                  | ^[boolean]                                     | false   |\n| true-label ^(deprecated)  | value of the checkbox if it's checked                                                                       | ^[string] / ^[number]                          | —       |\n| false-label ^(deprecated) | value of the checkbox if it's not checked                                                                   | ^[string] / ^[number]                          | —       |\n```\n\n----------------------------------------\n\nTITLE: Tour Placement Options\nDESCRIPTION: Illustrates different placement options for the tour guide relative to the target.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntour/placement\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Component in Vue Template\nDESCRIPTION: Vue template code that renders a Resource component. This appears to be a self-closing component implementation.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/resource/index.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Resource />\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderPanel Exposed Methods in Markdown\nDESCRIPTION: This snippet defines the exposed methods for the CascaderPanel component, including their names, descriptions, and types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Name              | Description                                                                                                       | Type                                                            |\n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| getCheckedNodes   | get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false` | ^[Function]`(leafOnly: boolean) => CascaderNode[] \\| undefined` |\n| clearCheckedNodes | clear checked nodes                                                                                               | ^[Function]`() => void`                                         |\n```\n\n----------------------------------------\n\nTITLE: Vue Entry File with Element Plus Theme Import\nDESCRIPTION: Main application entry file showing how to import custom Element Plus theme styles before initializing the framework.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/theming.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport './styles/element/index.scss'\nimport ElementPlus from 'element-plus'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.use(ElementPlus)\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Placement in Element Plus Timeline\nDESCRIPTION: This code snippet shows how to customize the placement of timestamps in the Timeline component, particularly when the content is too high.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/timeline.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntimeline/custom-timestamp\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Disabling Checkboxes in Tree V2 Component\nDESCRIPTION: This example demonstrates how to disable checkboxes for specific nodes in the Tree V2 component using the 'disabled' property.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ntree-v2/disabled\n```\n\n----------------------------------------\n\nTITLE: Documenting Exposed Methods of DatePicker Component in Markdown\nDESCRIPTION: This snippet outlines the exposed methods of the DatePicker component, including their names, descriptions, and types. It covers focus and blur methods for the component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/datetime-picker.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Exposes\n\n| Method        | Description                    | Type                    |\n| ------------- | ------------------------------ | ----------------------- |\n| focus         | focus the DatePicker component | ^[Function]`() => void` |\n| blur ^(2.8.7) | blur the DatePicker component  | ^[Function]`() => void` |\n```\n\n----------------------------------------\n\nTITLE: Watermark Component API Definition in Markdown\nDESCRIPTION: API documentation table defining the attributes, properties and slots available for the Watermark component. Includes configuration options for width, height, rotation, z-index, image source, content, font styling, gap spacing, and offset positioning.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/watermark.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description                                                                                     | Type                          | Default                    |\n| ------- | ----------------------------------------------------------------------------------------------- | ----------------------------- | -------------------------- |\n| width   | The width of the watermark, the default value of `content` is its own width                     | ^[number]                     | 120                        |\n| height  | The height of the watermark, the default value of `content` is its own height                   | ^[number]                     | 64                         |\n| rotate  | When the watermark is drawn, the rotation Angle, unit `°`                                       | ^[number]                     | -22                        |\n| zIndex  | The z-index of the appended watermark element                                                   | ^[number]                     | 9                          |\n| image   | Image source, it is recommended to export 2x or 3x image, high priority                         | ^[string]                     | —                          |\n| content | Watermark text content                                                                          | ^[string]/^[object]`string[]` | —                          |\n| font    | Text style                                                                                      | [Font](#font)                 | [Font](#font)              |\n| gap     | The spacing between watermarks                                                                  | ^[object]`[number, number]`   | \\[100, 100\\]               |\n| offset  | The offset of the watermark from the upper left corner of the container. The default is `gap/2` | ^[object]`[number, number]`   | \\[gap\\[0\\]/2, gap\\[1\\]/2\\] |\n```\n\n----------------------------------------\n\nTITLE: Input Number with Precision in Vue\nDESCRIPTION: Demonstrates how to set the precision of the input value for decimal numbers.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num\" :precision=\"2\" :step=\"0.1\" :max=\"10\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format - Type and Scope\nDESCRIPTION: The basic format structure for commit message headers, showing the type and scope format used in conventional commits.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/commit-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[type](scope): [messages]\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup Slots API Definition\nDESCRIPTION: Defines the available slots for the CheckboxGroup component, including the default slot for customizing content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/checkbox.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description               | Subtags                    |\n| ------- | ------------------------- | -------------------------- |\n| default | customize default content | Checkbox / Checkbox-button |\n```\n\n----------------------------------------\n\nTITLE: Auto Import Dependencies Installation\nDESCRIPTION: NPM command to install required plugins for auto-importing Element Plus components.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D unplugin-vue-components unplugin-auto-import\n```\n\n----------------------------------------\n\nTITLE: Tooltip Slots Documentation Table\nDESCRIPTION: Markdown table documenting the available slots for the tooltip component - default slot for triggering element and content slot for custom content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description                            |\n| ------- | -------------------------------------- |\n| default | Tooltip triggering & reference element |\n| content | customize content                      |\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderPanel Slots in Markdown\nDESCRIPTION: This snippet defines the slots for the CascaderPanel component, including their names, descriptions, and scopes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Description                                                                                    | Scope                               |\n| -------------- | ---------------------------------------------------------------------------------------------- | ----------------------------------- |\n| default        | the custom content of cascader node, which are current Node object and node data respectively. | ^[object]`{ node: any, data: any }` |\n| empty ^(2.8.3) | the content of the panel when there is no data.                                                | —                                   |\n```\n\n----------------------------------------\n\nTITLE: Config Provider Button Configuration Interface\nDESCRIPTION: TypeScript interface showing button-specific configuration options for the Config Provider component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/config-provider.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ButtonConfig {\n  autoInsertSpace: boolean; // Automatically insert space between Chinese characters\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handler Function Signatures for Element Plus Pagination\nDESCRIPTION: TypeScript function signatures for event handlers in the Element Plus Pagination component. These functions handle various pagination events like size changes, page changes, and navigation clicks.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(value: number) => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\n(currentPage: number, pageSize: number) => void\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Input Number in Vue\nDESCRIPTION: Demonstrates how to use the basic Input Number component by binding a variable to v-model.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-number.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <el-input-number v-model=\"num\" :min=\"1\" :max=\"10\" @change=\"handleChange\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst num = ref(1)\nconst handleChange = (value: number) => {\n  console.log(value)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Switch with State Change Prevention\nDESCRIPTION: Shows how to prevent switch state changes using the before-change property.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\nswitch/prevent-switching\n```\n\n----------------------------------------\n\nTITLE: Fixing Table Layout for Sticky Columns\nDESCRIPTION: Fixes an issue with table layout being set to auto when using sticky columns.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents [table] table-layout auto fixed by sticky (#11742 by @MrWeilian)\n```\n\n----------------------------------------\n\nTITLE: Webpack Auto Import Configuration\nDESCRIPTION: Configuration for auto-importing Element Plus components in Webpack projects.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst AutoImport = require('unplugin-auto-import/webpack')\nconst Components = require('unplugin-vue-components/webpack')\nconst { ElementPlusResolver } = require('unplugin-vue-components/resolvers')\n\nmodule.exports = {\n  plugins: [\n    AutoImport({\n      resolvers: [ElementPlusResolver()],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()],\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger for InputTag Component\nDESCRIPTION: Shows how to customize the key used to trigger the input tag, with the default being the Enter key.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/input-tag.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ninput-tag/trigger\n```\n\n----------------------------------------\n\nTITLE: Overlay Implementation\nDESCRIPTION: Example of implementing an overlay for loading states or other purposes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/overlay\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup Events API Definition\nDESCRIPTION: Defines the events available for the CheckboxGroup component, specifically the change event that triggers when the binding value changes.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/checkbox.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   | Description                             | Type                                               |\n| ------ | --------------------------------------- | -------------------------------------------------- |\n| change | triggers when the binding value changes | ^[Function]`(value: string[] \\| number[]) => void` |\n```\n\n----------------------------------------\n\nTITLE: Styling Color Demonstration Boxes in SCSS\nDESCRIPTION: This SCSS code defines styles for color demonstration boxes used in the Element Plus color documentation. It sets up the layout, dimensions, and appearance of color swatches and their sub-elements.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/color.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.demo-color-box {\n  position: relative;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 8px 0;\n  height: 112px;\n  box-sizing: border-box;\n  color: var(--el-color-white);\n  font-size: 14px;\n\n  .bg-color-sub {\n    width: 100%;\n    height: 40px;\n    left: 0;\n    bottom: 0;\n    position: absolute;\n\n    .bg-blue-sub-item {\n      height: 100%;\n      display: inline-block;\n\n      &:first-child {\n        border-radius: 0 0 0 var(--el-border-radius-base);\n      }\n    }\n\n    .bg-secondary-sub-item {\n      height: 100%;\n      display: inline-block;\n      &:first-child {\n        border-radius: 0 0 0 var(--el-border-radius-base);\n      }\n    }\n  }\n\n  .value {\n    margin-top: 2px;\n  }\n}\n\n.demo-color-box-lite {\n  color: var(--el-text-color-primary);\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Content Transfer Component\nDESCRIPTION: Transfer component implementation with custom empty state content. Allows customization of content displayed when lists are empty or no filtering results found.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\ntransfer/empty-content\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Website\nDESCRIPTION: Command to compile the Element Plus documentation website locally. This builds the static files for the element-plus.org website.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm docs:build\n```\n\n----------------------------------------\n\nTITLE: Fixing Table Layout Reference in JavaScript\nDESCRIPTION: Fixes an undefined reference in the table-layout of the Table component. This addresses a bug in the component's rendering logic.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents [table] fix an undefined reference in table-layout (#11204 by @jaa134)\n```\n\n----------------------------------------\n\nTITLE: Installing Element Plus via npm\nDESCRIPTION: Command to install the Element Plus library using npm package manager.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/packages/theme-chalk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i element-plus\n```\n\n----------------------------------------\n\nTITLE: Font Properties Table in Markdown\nDESCRIPTION: Detailed table of font-related properties for watermark styling including color, size, weight, family, style, alignment, and baseline options.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/watermark.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Description   | Type                                                                                 | Default         |\n| ------------ | ------------- | ------------------------------------------------------------------------------------ | --------------- |\n| color        | font color    | ^[string]                                                                            | rgba(0,0,0,.15) |\n| fontSize     | font size     | ^[number]                                                                            | 16              |\n| fontWeight   | font weight   | ^[enum]`'normal' \\| 'light' \\| 'weight' \\| number`                                   | normal          |\n| fontFamily   | font family   | ^[string]                                                                            | sans-serif      |\n| fontStyle    | font style    | ^[enum]`'none' \\| 'normal' \\| 'italic' \\| 'oblique'`                                 | normal          |\n| textAlign    | text align    | ^[enum]`'left' \\| 'right' \\| 'center' \\| 'start' \\| 'end' `                          | center          |\n| textBaseline | text baseline | ^[enum]`'top' \\| 'hanging' \\| 'middle' \\| 'alphabetic' \\| 'ideographic' \\| 'bottom'` | hanging         |\n```\n\n----------------------------------------\n\nTITLE: Enhancing Select Component Type Definitions\nDESCRIPTION: Improves the type definitions for the Select component instance.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nComponents [select] enhance instance type (#14352 by @HeftyKoo)\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Properties for Element Plus Theme\nDESCRIPTION: Example of using CSS custom properties (variables) to customize Element Plus component styles globally and individually.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/theming.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --el-color-primary: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TableV2 Slots in Markdown\nDESCRIPTION: A markdown table listing all available slots for the TableV2 component, including their names and associated parameters. This table provides information on customizable parts of the table such as cells, headers, rows, and empty states.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Params                                      |\n| ----------- | ------------------------------------------- |\n| cell        | `object`<[CellSlotProps](#typings)>       |\n| header      | `object`<[HeaderSlotProps](#typings)>     |\n| header-cell | `object`<[HeaderCellSlotProps](#typings)> |\n| row         | `object`<[RowSlotProps](#typings)>        |\n| footer      | —                                           |\n| empty       | —                                           |\n| overlay     | —                                           |\n```\n\n----------------------------------------\n\nTITLE: Customizing Badge Content in Element Plus\nDESCRIPTION: Illustrates how to display custom text content or use the 'content' slot to customize the Badge component's content beyond numbers.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/badge.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nbadge/customize\n```\n\n----------------------------------------\n\nTITLE: Directive Usage Popover\nDESCRIPTION: Shows directive-based implementation of popover, though not recommended due to increased application complexity. References virtual triggering as preferred alternative.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\npopover/directive-usage\n```\n\n----------------------------------------\n\nTITLE: Fixing Custom Options Initialization in Select-v2 Component\nDESCRIPTION: Bug fix addressing an initialization error with custom options in the multiple mode of the select-v2 component. This change is part of the unreleased features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- Components [select-v2] custom options init error in multiple (#16664 by @Liao-js)\n```\n\n----------------------------------------\n\nTITLE: Importing Element Plus theme using Vite/Webpack\nDESCRIPTION: JavaScript import statement to include the Element Plus chalk theme CSS in a Vite or Webpack project.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/packages/theme-chalk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'element-plus/lib/theme-chalk/index.css'\n```\n\n----------------------------------------\n\nTITLE: Node Props Configuration Table\nDESCRIPTION: Markdown table specifying the node object key mappings for value, label, options, and disabled properties.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select-v2.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Description                                                     | Type      | Default  |\n| --------- | --------------------------------------------------------------- | --------- | -------- |\n| value     | specify which key of node object is used as the node's value    | ^[string] | value    |\n| label     | specify which key of node object is used as the node's label    | ^[string] | label    |\n| options   | specify which key of node object is used as the node's children | ^[string] | options  |\n| disabled  | specify which key of node object is used as the node's disabled | ^[string] | disabled |\n```\n\n----------------------------------------\n\nTITLE: Adding Gradient Support to Progress Bar Background\nDESCRIPTION: Enhancement to support gradient backgrounds in the progress bar component of Element Plus. This change is part of the unreleased features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Components [progress] bar background support gradient (#16666 by @btea)\n```\n\n----------------------------------------\n\nTITLE: Nuxt Configuration\nDESCRIPTION: Configuration for integrating Element Plus in Nuxt projects.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@element-plus/nuxt'],\n})\n```\n\n----------------------------------------\n\nTITLE: Documenting Select Slots in Markdown\nDESCRIPTION: A markdown table listing the available slots for the Select component, including their names, descriptions, and associated subtags.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Description                           | Subtags               |\n| ---------------- | ------------------------------------- | --------------------- |\n| default          | option component list                 | Option Group / Option |\n| header ^(2.4.3)  | content at the top of the dropdown    | —                     |\n| footer ^(2.4.3)  | content at the bottom of the dropdown | —                     |\n| prefix           | content as Select prefix              | —                     |\n| empty            | content when there is no options      | —                     |\n| tag ^(2.5.0)     | content as Select tag                 | —                     |\n| loading ^(2.5.2) | content as Select loading             | —                     |\n| label ^(2.7.4)   | content as Select label               | —                     |\n```\n\n----------------------------------------\n\nTITLE: Append-to Usage Example\nDESCRIPTION: Explains how to use the append-to feature with considerations for DOM mounting timing.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntooltip/append-to\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Vue Resource Page\nDESCRIPTION: YAML frontmatter configuration block that sets page metadata including page flag and language setting for an English US localized page.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/resource/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npage: true\nlang: en-US\n---\n```\n\n----------------------------------------\n\nTITLE: Fixing Menu Component Export in TypeScript\nDESCRIPTION: Exports the MenuInstance type from the menu component to fix a TypeScript error.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nComponents [menu] export MenuInstance (#14284 by @HeftyKoo)\n```\n\n----------------------------------------\n\nTITLE: Including Element Plus theme via CDN\nDESCRIPTION: HTML link tag to include the Element Plus chalk theme CSS from a CDN (unpkg).\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/packages/theme-chalk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://unpkg.com/element-plus/lib/theme-chalk/index.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Text Component Slots Documentation\nDESCRIPTION: Documentation for the available slots in the Text component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/text.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description     |\n| ------- | --------------- |\n| default | default content |\n```\n\n----------------------------------------\n\nTITLE: Custom Indicator for Tour\nDESCRIPTION: Shows how to implement a custom indicator for the tour component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\ntour/indicator\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Nuxt Module Installation\nDESCRIPTION: Installation command for Element Plus Nuxt module.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/quickstart.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @element-plus/nuxt\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker Events Table\nDESCRIPTION: Markdown table listing all events that can be triggered by the DateTimePicker component, including event names, descriptions, and parameter types.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/datetime-picker.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Description                                                                   | Parameters                                |\n| --------------- | ----------------------------------------------------------------------------- | ----------------------------------------- |\n| change          | triggers when user confirms the value                                         | component's binding value                 |\n| blur            | triggers when Input blurs                                                     | `(e: FocusEvent)`                         |\n```\n\n----------------------------------------\n\nTITLE: Initial Rendering Loading with Element Plus Skeleton\nDESCRIPTION: Shows how to control the immediate display of skeleton screen on initial load using throttle with initVal parameter in version 2.8.8 and above.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/skeleton.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nskeleton/initial-rendering-loading\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in Markdown\nDESCRIPTION: Shows various project badges including npm version, node version requirement, download count, and code coverage using HTML within a Markdown file.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://www.npmjs.org/package/element-plus\">\n    <img src=\"https://img.shields.io/npm/v/element-plus.svg\" />\n  </a>\n  <a href=\"https://github.com/element-plus/element-plus\">\n    <img src=\"https://img.shields.io/badge/node-%20%3E%3D%2018-47c219\" />\n  </a>\n  <a href=\"https://npmcharts.com/compare/element-plus?minimal=true\">\n    <img src=\"https://img.shields.io/npm/dm/element-plus.svg\" />\n  </a>\n  <a href=\"https://codecov.io/gh/element-plus/element-plus\">\n    <img src=\"https://codecov.io/gh/element-plus/element-plus/branch/dev/graph/badge.svg?token=BKSBO2GLZI\"/>\n  </a>\n  <br>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Updating Autocomplete Default Width in Element Plus\nDESCRIPTION: Bug fix for updating the default width of the autocomplete component. This change is part of the unreleased features in Element Plus.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- 🐛 update autocomplete default width (#16633 by @xxholly32)\n```\n\n----------------------------------------\n\nTITLE: Popover Event Handler Type Definition\nDESCRIPTION: Type definition for popover event handlers showing they are void functions that take no parameters.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/popover.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component in Vue\nDESCRIPTION: Example of updating the Button component from using a 'text' type to a 'text' prop in Vue. This change is part of a breaking change in Element Plus v2.2.0.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_23\n\nLANGUAGE: Vue\nCODE:\n```\n--- <el-button type=\"text\"/>\n+++ <el-button text />\n```\n\n----------------------------------------\n\nTITLE: Defining TourStep Events in Markdown\nDESCRIPTION: This snippet describes the events emitted by the TourStep component. It includes the 'close' event, which is triggered when the tour step is closed.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tour.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name  | Description                   | Arguments               |\n| ----- | ----------------------------- | ----------------------- |\n| close | callback function on shutdown | ^[Function]`() => void` |\n```\n\n----------------------------------------\n\nTITLE: Importing Element Plus via UNPKG CDN\nDESCRIPTION: HTML code for importing Element Plus and its dependencies using UNPKG CDN.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- Import style -->\n  <link rel=\"stylesheet\" href=\"//unpkg.com/element-plus/dist/index.css\" />\n  <!-- Import Vue 3 -->\n  <script src=\"//unpkg.com/vue@3\"></script>\n  <!-- Import component library -->\n  <script src=\"//unpkg.com/element-plus\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining FormItem Slots in Element Plus\nDESCRIPTION: This snippet lists the available slots for the FormItem component in Element Plus, including default content, custom label, and error message display.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/form.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description                                   | Type                         |\n| ------- | --------------------------------------------- | ---------------------------- |\n| default | Content of Form Item.                         | —                            |\n| label   | Custom content to display on label.           | ^[object]`{ label: string }` |\n| error   | Custom content to display validation message. | ^[object]`{ error: string }` |\n```\n\n----------------------------------------\n\nTITLE: Switch Size Variants\nDESCRIPTION: Demonstrates different size options available for the Switch component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/switch.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nswitch/sizes\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Export in Element Plus Components\nDESCRIPTION: Bug fix to add a missing export in the Element Plus components. This change is part of the unreleased features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Components Add missing export (#16323 by @zzh948498)\n```\n\n----------------------------------------\n\nTITLE: Exporting selectedLabel in Select Components\nDESCRIPTION: Explicitly exports the selectedLabel property from both the Select and SelectV2 components, enabling external access to the currently selected label.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents [select & select-v2] explicit export `selectedLabel` (#18350 by @warmthsea)\n```\n\n----------------------------------------\n\nTITLE: Cross Hovering Implementation\nDESCRIPTION: Implementation of cross-hovering effect for better row and column tracking.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/cross-hovering\n```\n\n----------------------------------------\n\nTITLE: Refactoring Select-V2 Value Key Usage\nDESCRIPTION: Changes how the value-key prop is used for object selection in the Select-V2 component.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents!: [select-v2] value-key is used for object select (#13263 by @tolking)\n```\n\n----------------------------------------\n\nTITLE: Adding Focus and Blur Events to Filterable Cascader in JavaScript\nDESCRIPTION: Adds focus and blur event handling to the Cascader component when the filterable property is set. This enhances the component's interactivity.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents [cascader] add focus and blur event when set filterable (#11273 by @btea)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass in Vite Config\nDESCRIPTION: Configuration for handling Sass modern API in Vite to resolve legacy JS API deprecation warnings.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss: {\n  preprocessorOptions: {\n    scss: { api: 'modern-compiler' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Rate Component Attributes\nDESCRIPTION: Table documenting all available attributes for the Element Plus Rate component, including types, default values, and descriptions for each configuration option.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/rate.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                        | Description                                                                                                                                                                                                                    | Type                                                                      | Default                                                            |\n| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------- | ------------------------------------------------------------------ |\n| model-value / v-model       | binding value                                                                                                                                                                                                                  | ^[number]                                                                 | 0                                                                  |\n| max                         | max rating score                                                                                                                                                                                                               | ^[number]                                                                 | 5                                                                  |\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup Slots Table in Markdown\nDESCRIPTION: A markdown table documenting the slots available in the ButtonGroup component. It shows that the component has a 'default' slot which allows customizing the button group content, with Button as a subtag.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/button.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description                    | Subtags |\n| ------- | ------------------------------ | ------- |\n| default | customize button group content | Button  |\n```\n\n----------------------------------------\n\nTITLE: Updating Timepicker Options on Locale Change\nDESCRIPTION: Fixes an issue where timepicker options were not updating when changing the locale.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents fix: update timepicker options when changing locale (#14287 by @cuongle-hdwebsoft)\n```\n\n----------------------------------------\n\nTITLE: Exporting dropdownVisible in Mention Component\nDESCRIPTION: Explicitly exports the dropdownVisible property from the Mention component, allowing external access to this internal state.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents [mention] explicit export dropdownVisible (#18460 by @SorrowX)\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining title, page type and language settings.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: A Vue 3 UI Framework\npage: true\nlang: en-US\n---\n```\n\n----------------------------------------\n\nTITLE: Deprecation Warning for Select Component in Markdown\nDESCRIPTION: This snippet provides a warning message about the deprecation of the 'suffix-transition' prop in the Select component. It informs users that the prop will be removed in version 2.4.0 and suggests using an override style scheme instead.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/select.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::warning\n\n`suffix-transition` has been **deprecated**, and **will be** removed in ^(2.4.0), please use override style scheme.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Styling Hero Content with SCSS\nDESCRIPTION: SCSS style block that applies padding to the hero-content class using the @at-root directive to scope the style.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@at-root .hero-content {\n  padding: 32px;\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Scroll Demo Reference\nDESCRIPTION: Example showing horizontal scrollbar behavior when content width exceeds container width.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/scrollbar.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nscrollbar/horizontal-scroll\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown-Item Slots in Markdown\nDESCRIPTION: This snippet describes the slots available for the Dropdown-Item component, specifically the 'default' slot for customizing the Dropdown Item content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dropdown.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### Dropdown-Item Slots\n\n| Name    | Description                |\n| ------- | -------------------------- |\n| default | customize of Dropdown Item |\n```\n\n----------------------------------------\n\nTITLE: Literal Type Spacer Example\nDESCRIPTION: Shows implementation of literal type spacers for more complex spacing needs.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/space.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n:::demo\n\nspace/literal-type-spacer\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Markdown Element Plus v2.2.16 Changelog\nDESCRIPTION: Changelog section showing bug fixes, features and refactoring for Element Plus version 2.2.16\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### 2.2.16\n\n_2022-09-02_\n\n#### Features\n\n- Components [image-viewer] add `setActiveItem` method (#9389 by @holazz)\n- Components [dialog] add align center prop (#8947 by @Hfutsora)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment for Components\nDESCRIPTION: Command to start a local playground for testing component changes. This is for contributors who want to modify Element Plus components rather than the documentation website.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# If you would like to run a local playground to test out your changes against\n# Some specific component\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Element Plus Table Component Example\nDESCRIPTION: Example of using Element Plus table component with proper double-closed tags.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<el-table>\n  <el-table-column></el-table-column>\n  <el-table-column></el-table-column>\n</el-table>\n```\n\n----------------------------------------\n\nTITLE: Linking Local Element Plus Dependencies\nDESCRIPTION: Step-by-step commands to link a local Element Plus development build globally and connect it to your project using pnpm link.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dev-faq.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# get dist\npnpm build\ncd dist/element-plus\n# set cur element-plus to global `node_modules`\npnpm link --global\n# for esm we also need link element-plus for dist\npnpm link --global element-plus\n\n# go to your project, link to `element-plus`\ncd your-project\npnpm link --global element-plus\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependency Issues in Element Plus\nDESCRIPTION: Commands to resolve dependency-related issues by removing node_modules and performing a clean install using pnpm.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dev-faq.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf node_modules\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Element Plus Icons via yarn\nDESCRIPTION: Command to install Element Plus Icons using yarn package manager.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add @element-plus/icons-vue\n```\n\n----------------------------------------\n\nTITLE: Listing Dialog Events in Markdown\nDESCRIPTION: Enumerates the events emitted by the Dialog component, including open, opened, close, closed, open-auto-focus, and close-auto-focus events.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/dialog.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Description                                      | Type                    |\n| ---------------- | ------------------------------------------------ | ----------------------- |\n| open             | triggers when the Dialog opens                   | ^[Function]`() => void` |\n| opened           | triggers when the Dialog opening animation ends  | ^[Function]`() => void` |\n| close            | triggers when the Dialog closes                  | ^[Function]`() => void` |\n| closed           | triggers when the Dialog closing animation ends  | ^[Function]`() => void` |\n| open-auto-focus  | triggers after Dialog opens and content focused  | ^[Function]`() => void` |\n| close-auto-focus | triggers after Dialog closed and content focused | ^[Function]`() => void` |\n```\n\n----------------------------------------\n\nTITLE: Empty Renderer Implementation\nDESCRIPTION: Implementation of custom empty state rendering.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/empty\n```\n\n----------------------------------------\n\nTITLE: Release Notes Section\nDESCRIPTION: Release notes showing version changes, new features, bug fixes and refactoring changes for Element Plus component library\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n#### Features\n\n- Components [el-time-select] support custom format (e.g. 12-hour) (#5309 by @Alanscut)\n- Support custom namespace (#5377 by @iamkun)\n- Dropdown add popper-options prop (#5396 by @kooriookami)\n- Build add full bundle locale (#5399 by @sxzz)\n- Components [el-drawer] add footer slot (#5404 by @Alanscut)\n- Components [el-date-picker] add panel change event (#5304 by @msidolphin)\n```\n\n----------------------------------------\n\nTITLE: Developing Documentation Website with VitePress\nDESCRIPTION: Commands for generating locale files and running the documentation website locally. This is for contributors who want to update the Element Plus website at element-plus.org.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# If you would like to modify the website source code of https://element-plus.org\n# It was made with [VitePress](https://vitepress.vuejs.org)\npnpm docs:gen-locale # This generates locale files for your local development\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Element Plus v2.2.15 Changelog\nDESCRIPTION: Changelog section showing bug fixes, features and refactoring for Element Plus version 2.2.15\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### 2.2.15\n\n_2022-08-26_\n\n#### Features\n\n- Components [page-header] enhancement (#9215 by @jw-foss)\n- Components [tree-v2] add `setExpendKeys` method (#9412 by @holazz)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all project dependencies using PNPM package manager.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dev-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Setting Custom SCSS Namespace Configuration\nDESCRIPTION: Creates a SCSS configuration file to customize the Element Plus default namespace from 'el' to 'ep' using SCSS forwarding.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/namespace.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// we can add this to custom namespace, default is 'el'\n@forward 'element-plus/theme-chalk/src/mixins/config.scss' with (\n  $namespace: 'ep'\n);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating isDisabled Property in Select Component\nDESCRIPTION: Bug fix to address the issue where the isDisabled property was not refreshing in the select component of Element Plus. This change is part of the unreleased features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Components [select] `isDisabled` is not fresh (#16419 by @makedopamine)\n```\n\n----------------------------------------\n\nTITLE: Custom Changelog Component Implementation\nDESCRIPTION: Vue component tag for rendering the changelog content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/changelog.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<VpChangelog />\n```\n\n----------------------------------------\n\nTITLE: Slots Configuration in Markdown\nDESCRIPTION: Definition of available slots for the Watermark component, specifically the default slot used as container for adding watermark content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/watermark.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description                    |\n| ------- | ------------------------------ |\n| default | container for adding watermark |\n```\n\n----------------------------------------\n\nTITLE: Refactoring Changes Section\nDESCRIPTION: Documentation of refactoring changes made to improve code structure and maintainability\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n#### Refactors\n\n- Components [empty] add namespace & instance type (#5446 by @sxzz)\n- Components [card] add namespace & instance type (#5445 by @sxzz)\n- Components [link] add namespace & instance type (#5449 by @sxzz)\n- Components [result] add namespace & instance type (#5453 by @sxzz)\n```\n\n----------------------------------------\n\nTITLE: Importing Element Plus Icons via unpkg CDN\nDESCRIPTION: HTML code to import Element Plus Icons through the unpkg CDN, making the icons available via the global ElementPlusIconsVue variable.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//unpkg.com/@element-plus/icons-vue\"></script>\n```\n\n----------------------------------------\n\nTITLE: Fixing Dropdown Unmounted Error in JavaScript\nDESCRIPTION: Addresses an error that occurs when the Dropdown component is unmounted. This fix improves the component's lifecycle management.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents [dropdown] unmounted error (#11649 by @chenxch)\n```\n\n----------------------------------------\n\nTITLE: Installing Element Plus Icons via npm\nDESCRIPTION: Command to install Element Plus Icons using npm package manager.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install @element-plus/icons-vue\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Navigation Styling in Element Plus\nDESCRIPTION: This CSS snippet defines color variables for navigation components in both light and dark modes. It sets colors for backgrounds, text, icons, and lines used in navigation elements.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/nav.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --categories-c-bg: #F9FAFC;\n  --categories-c-page: #E5E9F2;\n  --categories-c-overlay: white;\n  --categories-c-text: #99A9BF;\n  --categories-c-icon: #E5E9F2;\n  --categories-c-line: #E5E9F2;\n}\n\n.dark {\n  --categories-c-bg: #1D1E1F;\n  --categories-c-page: #0A0A0A;\n  --categories-c-overlay: #141414;\n  --categories-c-text: #53637A;\n  --categories-c-icon: #2F333D;\n  --categories-c-line: #242529;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ESBuild Plugin to TSX Component\nDESCRIPTION: Applies the ESBuild plugin to a TSX component in the playground.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlay apply esbuild plugin to tsx component (#14480 by @btea)\n```\n\n----------------------------------------\n\nTITLE: Displaying Element Plus Logo in Markdown\nDESCRIPTION: Centers and displays the Element Plus logo image using HTML within a Markdown file.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<p align=\"center\">\n  <img width=\"300px\" src=\"https://user-images.githubusercontent.com/10731096/95823103-9ce15780-0d5f-11eb-8010-1bd1b5910d4f.png\">\n</p>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of Result Component in Element Plus\nDESCRIPTION: This code snippet demonstrates the basic usage of the Result component. It is referenced in the documentation but not directly provided in the content.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/result.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nresult/basic-usage\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Node Classes in Tree V2 Component\nDESCRIPTION: This snippet shows how to apply custom classes to tree nodes in the Tree V2 component, available from version 2.9.0 onwards.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tree-v2.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\ntree-v2/custom-node-class\n```\n\n----------------------------------------\n\nTITLE: Importing Element Plus Icons via jsDelivr CDN\nDESCRIPTION: HTML code to import Element Plus Icons through the jsDelivr CDN, making the icons available via the global ElementPlusIconsVue variable.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/@element-plus/icons-vue\"></script>\n```\n\n----------------------------------------\n\nTITLE: Fixing Scrolling Issue in Table-v2 Component\nDESCRIPTION: Bug fix addressing a scrolling failure in the table-v2 component of Element Plus. This change is part of the unreleased features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Components [table-v2] fix scrolling fail (#16470 by @Tsong-LC)\n```\n\n----------------------------------------\n\nTITLE: Displaying Playground Links in Markdown\nDESCRIPTION: Provides links to try Element Plus in various playground environments, including a built-in playground and CodeSandbox.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n#### Try it with our built-in playground\n\n[Playground](https://element-plus.run/)\n\n#### Try it with code sandbox\n\n[![Edit element-plus](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/element-plus-demo-dxtcr)\n```\n\n----------------------------------------\n\nTITLE: Defining Font Family for Element Plus in CSS\nDESCRIPTION: Specifies the font stack to be used in Element Plus, prioritizing Inter and fallback to system fonts. This ensures consistent typography across different operating systems and devices.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/typography.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfont-family: Inter, 'Helvetica Neue', Helvetica, 'PingFang SC',\n  'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, sans-serif;\n```\n\n----------------------------------------\n\nTITLE: Updating Germany Translations in Element Plus\nDESCRIPTION: Updates the German language translations for Element Plus. This improves localization support for German-speaking users.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nI18n update germany translations (#18447 by @MaikoTan)\n```\n\n----------------------------------------\n\nTITLE: Markdown Element Plus v2.2.14 Changelog\nDESCRIPTION: Changelog section showing features for Element Plus version 2.2.14\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### 2.2.14\n\n_2022-08-19_\n\n#### Features\n\n- Components [pagination] btns icon can be customized Vuecomponent (#9372 by @Tsong-LC)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: Commands for navigating to the project directory and installing dependencies using pnpm. This is the first step after cloning the repository to set up the development environment.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd $THE_PROJECT_PATH_YOU_DOWNLOADED\n# If you haven't installed yet\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Transition Animation\nDESCRIPTION: Example of implementing transition/animation effects for the tooltip content when opening.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/tooltip-v2.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\ntooltip-v2/transition\n```\n\n----------------------------------------\n\nTITLE: Installing Element Plus Icons via pnpm\nDESCRIPTION: Command to install Element Plus Icons using pnpm package manager.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/icon.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm install @element-plus/icons-vue\n```\n\n----------------------------------------\n\nTITLE: Fixing Main Export Error in Element Plus Test Utils\nDESCRIPTION: Bug fix addressing the main export error in the test utilities of Element Plus. This change is part of the unreleased features.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Test-utils fix main export error (#16504 by @wzc520pyfm)\n```\n\n----------------------------------------\n\nTITLE: Page Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the design documentation page, specifying the title and language settings.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/design.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Design\nlang: en-US\n---\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Client-Side Parallax Component Configuration\nDESCRIPTION: Configuration for rendering a client-side only parallax component on the documentation homepage using Vue 3 syntax.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/index.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ClientOnly>\n  <ParallaxHome />\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes Section\nDESCRIPTION: List of bug fixes and improvements made to various Element Plus components\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n#### Bug fixes\n\n- Components [el-cascader] inline style (#5339 by @Alanscut)\n- Components [el-dropdown-menu] size (#5343 by @Alanscut)\n- Components fix TreeOptionProps types (#4813 by @ElsaOOo)\n- Fix space style (#5387 by @kooriookami)\n- Components time picker when midnight (#5403 by @sxzz)\n```\n\n----------------------------------------\n\nTITLE: Verifying Installation with Tests and Formatting\nDESCRIPTION: Commands to verify that the project is correctly installed by running tests and code formatting. This ensures the development environment is properly set up.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm t\npnpm format\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Options in Element Plus Table (TypeScript)\nDESCRIPTION: This code defines the type for the tooltip-options prop in Element Plus Table. It's an object that includes various properties from the ElTooltipProps interface to customize the overflow tooltip behavior.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nPick<ElTooltipProps, 'effect' | 'enterable' | 'hideAfter' | 'offset' | 'placement' | 'popperClass' | 'popperOptions' | 'showAfter' | 'showArrow'>\n```\n\n----------------------------------------\n\nTITLE: Invalid Multiple Selection Implementation\nDESCRIPTION: Shows an incorrect implementation of multiple selection using inline object literal binding, which is invalid syntax for cascader.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!--  Object literal binging here is invalid syntax for cascader  -->\n  <el-cascader :props=\"{ multiple: true }\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Manual Scrolling Implementation\nDESCRIPTION: Implementation of programmatic scrolling with various scroll strategies.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/table-v2.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntable-v2/manual-scroll\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Commit Messages with Commitizen\nDESCRIPTION: Command to use the Commitizen CLI tool for generating properly formatted commit messages. Element Plus requires formatted commit messages for all pull requests.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm cz\n```\n\n----------------------------------------\n\nTITLE: Building Element Plus Source Code\nDESCRIPTION: Command to compile the Element Plus source code locally. This builds the code that would be published to npmjs.com when ready for release.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# This one line code would start compiling the code which was published to https://npmjs.com\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Logos in Markdown\nDESCRIPTION: Shows sponsor logos and links using HTML tables within a Markdown file, categorized by sponsorship level (Platinum and Gold).\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<p align=\"center\">\n  <b>Special thanks to the generous sponsorship by:</b>\n</p>\n<br/>\n<p align=\"center\">\n  <b>Platinum Sponsors</b>\n</p>\n<table align=\"center\" cellspacing=\"0\" cellpadding=\"0\">\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://melecode.com/\" target=\"_blank\">\n          <img width=\"150px\" src=\"https://github.com/element-plus/element-plus/assets/82012629/9ca4269c-7545-4463-9bdc-8e5a1fbd0b08\">\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://www.jnpfsoft.com/index.html?from=elementUI\" target=\"_blank\">\n          <img width=\"150px\" src=\"https://github.com/element-plus/element-plus/assets/17680888/6a044d82-c393-48ab-90b8-de0d3aad1624\">\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://vue.misboot.com/#/login?from=element-plus\" target=\"_blank\">\n          <img width=\"150px\" src=\"https://github.com/user-attachments/assets/ade8e7e6-f9a4-45d5-9006-44b548599a8d\">\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"http://github.crmeb.net/u/Element?from=element-plus\" target=\"_blank\">\n          <img width=\"150px\" src=\"https://github.com/user-attachments/assets/18079452-986c-4c6e-84ec-fb6175c26567\">\n        </a>\n      </td>\n    </tr>\n    </tbody>\n</table>\n<p align=\"center\">\n  <b>Gold Sponsors</b>\n</p>\n<table align=\"center\" cellspacing=\"0\" cellpadding=\"0\">\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://doc.buildadmin.com/?from=element-plus\" target=\"_blank\">\n          <img width=\"130px\" src=\"https://user-images.githubusercontent.com/17680888/173179536-30e35fd1-cd5a-482a-bc41-9d5f0aa66fd4.png\">\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://fantastic-admin.github.io/?from=element-plus\" target=\"_blank\">\n          <img width=\"130px\" src=\"https://github.com/user-attachments/assets/0dbd9c02-d132-4c9e-a162-2b5a8728fc7e\">\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://bit.dev/?from=element-ui\" target=\"_blank\">\n          <img width=\"130px\" src=\"https://user-images.githubusercontent.com/10095631/41342907-e44e7196-6f2f-11e8-92f2-47702dc8f059.png\">\n        </a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes for the Cascader component, including their names, descriptions, types, and default values.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/cascader.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| value-on-clear ^(2.7.0)             | clear return value, [see config-provider](/en-US/component/config-provider#empty-values-configurations)                                                                          | ^[string] / ^[number] / ^[boolean] / ^[Function]                                                                                                                            | —            |\n| persistent ^(2.7.8)                 | when dropdown is inactive and `persistent` is `false`, dropdown will be destroyed                                                                                | ^[boolean]                                                                                                                                                                  | true         |\n| fallback-placements ^(2.8.1)        | list of possible positions for Tooltip [popper.js](https://popper.js.org/docs/v2/modifiers/flip/#fallbackplacements)                                                             | ^[arrary]`Placement[]`                                                                                                                                                      | —            |\n| placement ^(2.8.1)                  | position of dropdown                                                                                                                                                             | ^[enum]`'top' \\| 'top-start' \\| 'top-end' \\| 'bottom' \\| 'bottom-start' \\| 'bottom-end' \\| 'left' \\| 'left-start' \\| 'left-end' \\| 'right' \\| 'right-start' \\| 'right-end'` | bottom-start |\n| popper-append-to-body ^(deprecated) | whether to append the popper menu to body. If the positioning of the popper is wrong, you can try to set this prop to false                                                      | ^[boolean]                                                                                                                                                                  | true         |\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Template - Basic Rules\nDESCRIPTION: Template showing the basic structure and rules for writing git commit messages, including character limits, formatting guidelines, and important reminders for writing effective commits.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/commit-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# (If applied, this commit will...) <subject> (Max 72 characters)\n\n# |<---- Using a Maximum Of 72 Characters ---->|\n\n# Explain why this change is being made\n\n# |<---- Try To Limit Each Line to a Maximum Of 72 Characters ---->|\n\n# Provide links or keys to any relevant tickets, articles or other resources\n\n# Use issues and merge requests' full URLs instead of short references,\n\n# as they are displayed as plain text outside of GitLab\n\n# --- COMMIT END ---\n\n# --------------------\n\n# Remember to\n\n# Capitalize the subject line\n\n# Use the imperative mood in the subject line\n\n# Do not end the subject line with a period\n\n# Subject must contain at least 3 words\n\n# Separate subject from body with a blank line\n\n# Commits that change 30 or more lines across at least 3 files should\n\n# describe these changes in the commit body\n\n# Do not use Emojis\n\n# Use the body to explain what and why vs. how\n\n# Can use multiple lines with \"-\" for bullet points in body\n\n# For more information: https://chris.beams.io/posts/git-commit/\n\n# --------------------\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Contains a structured changelog documenting various improvements, bug fixes and features across multiple Element Plus versions, including version 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.36, 2.2.35, 2.2.34, and 2.2.33.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/CHANGELOG.en-US.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n#### Bug fixes\n\n- Components [backtop] change default visible (#13069 by @init-qy)\n- Components [table] add missing append height (#12676 by @init-qy)\n- Components [table] width of columns become 0 unexpectedly (#12920 by @makedopamine)\n- Components[time-picker] add parseFloat to resolve TimePicker offset (#12837 by @zhengsixsix)\n- Components [input] fix formatter and parse problem (#12622 by @wzc520pyfm)\n- Components [table] fix clearFilter type (#13149 by @mdoi2)\n- Locale : improve sr translation (#13125 by @N-M)\n- Components [form] improve types (#12549 by @ModyQyW)\n- Components [calendar] improve types (#13165 by @ModyQyW)\n- Components [select] filter shake (#12106 by @chenxch)\n- Components [tag] element vertically centered (#13235 by @yj-liuzepeng)\n- Components [table] adjust the showOverflowTooltip value logic (#13282 by @btea)\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Environment\nDESCRIPTION: Command to start the local development environment for component development.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dev-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Dark Mode SCSS\nDESCRIPTION: Shows how to import custom SCSS dark mode variables in the application entry point.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/dark-mode.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport './styles/element/index.scss'\n\n// or just want to import scss?\n// import 'element-plus/theme-chalk/src/dark/css-vars.scss'\n```\n\n----------------------------------------\n\nTITLE: Importing Container-Related SCSS Styles\nDESCRIPTION: Import SCSS styles for container examples to be displayed in the documentation. This style import is used for the common layout demonstrations.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/component/container.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '../../examples/container/common-layout.scss';\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributors Graph in Markdown\nDESCRIPTION: Shows a contributors graph image using HTML within a Markdown file, linking to the project's GitHub contributors page.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n<a href=\"https://github.com/element-plus/element-plus/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=element-plus/element-plus\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Scoped CSS Style in Markdown\nDESCRIPTION: This snippet adds a scoped CSS style to the Markdown document, targeting the 'details' element with a top margin of 8 pixels.\nSOURCE: https://github.com/element-plus/element-plus.git/blob/dev/docs/en-US/guide/migration.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style scoped>\n  details {\n    margin-top: 8px;\n  }\n</style>\n```"
  }
]