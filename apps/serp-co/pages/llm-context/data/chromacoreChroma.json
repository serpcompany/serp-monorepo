[
  {
    "owner": "chroma-core",
    "repo": "chroma",
    "content": "TITLE: Querying Chroma Collections with Embeddings\nDESCRIPTION: Query a Chroma collection using vector embeddings to find similar items. Supports filtering by metadata and document content, and returns the closest matches to each query embedding.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/query-and-get.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(\n    query_embeddings=[[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],\n    n_results=10,\n    where={\"metadata_field\": \"is_equal_to_this\"},\n    where_document={\"$contains\":\"search_string\"}\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await collection.query({\n    queryEmbeddings: [[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],\n    nResults: 10,\n    where: {\"metadata_field\": \"is_equal_to_this\"},\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma Python Client\nDESCRIPTION: Basic setup of Chroma database in Python with persistent storage configuration\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n```\n\nLANGUAGE: python\nCODE:\n```\nclient = chromadb.PersistentClient(path=\"/path/to/save/to\")\n```\n\n----------------------------------------\n\nTITLE: Complete Chroma Example in Python\nDESCRIPTION: A full working example in Python that initializes a client, creates or gets a collection, upserts documents, and performs a query about Florida.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nchroma_client = chromadb.Client()\n\n# switch `create_collection` to `get_or_create_collection` to avoid creating a new collection every time\ncollection = chroma_client.get_or_create_collection(name=\"my_collection\")\n\n# switch `add` to `upsert` to avoid adding the same documents every time\ncollection.upsert(\n    documents=[\n        \"This is a document about pineapple\",\n        \"This is a document about oranges\"\n    ],\n    ids=[\"id1\", \"id2\"]\n)\n\nresults = collection.query(\n    query_texts=[\"This is a query document about florida\"], # Chroma will embed this for you\n    n_results=2 # how many results to return\n)\n\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Using the Chroma API with Python\nDESCRIPTION: Demonstrates the core Chroma API which includes creating a client, setting up a collection, adding documents to the collection, and querying similar documents. The code shows how to add documents with metadata and how to query with optional filters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n# setup Chroma in-memory, for easy prototyping. Can add persistence easily!\nclient = chromadb.Client()\n\n# Create collection. get_collection, get_or_create_collection, delete_collection also available!\ncollection = client.create_collection(\"all-my-documents\")\n\n# Add docs to the collection. Can also update and delete. Row-based API coming soon!\ncollection.add(\n    documents=[\"This is document1\", \"This is document2\"], # we handle tokenization, embedding, and indexing automatically. You can skip that and add your own embeddings as well\n    metadatas=[{\"source\": \"notion\"}, {\"source\": \"google-docs\"}], # filter on these!\n    ids=[\"doc1\", \"doc2\"], # unique for each doc\n)\n\n# Query/search 2 most similar results. You can also .get by id\nresults = collection.query(\n    query_texts=[\"This is a query document\"],\n    n_results=2,\n    # where={\"metadata_field\": \"is_equal_to_this\"}, # optional filter\n    # where_document={\"$contains\":\"search_string\"}  # optional filter\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Getting Collections with Embedding Functions in Chroma\nDESCRIPTION: Creates a new collection or retrieves an existing one with a specified name and embedding function. An embedding function must be supplied every time when getting a collection if it was provided during creation.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/create-get-delete.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection = client.create_collection(name=\"my_collection\", embedding_function=emb_fn)\ncollection = client.get_collection(name=\"my_collection\", embedding_function=emb_fn)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet collection = await client.createCollection({\n    name: \"my_collection\",\n    embeddingFunction: emb_fn,\n});\n\ncollection = await client.getCollection({\n    name: \"my_collection\",\n    embeddingFunction: emb_fn,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma JavaScript Client\nDESCRIPTION: Setting up Chroma client in JavaScript using both CommonJS and ES modules\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// CJS\nconst { ChromaClient } = require(\"chromadb\");\n\n// ESM\nimport { ChromaClient } from \"chromadb\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new ChromaClient();\n```\n\n----------------------------------------\n\nTITLE: Creating a Multimodal Collection in Chroma with Python\nDESCRIPTION: Creates a new Chroma collection configured for multimodal data by passing both an embedding function and a data loader. This setup allows the collection to handle multiple data types like text and images.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.Client()\n\ncollection = client.create_collection(\n    name='multimodal_collection',\n    embedding_function=embedding_function,\n    data_loader=data_loader)\n```\n\n----------------------------------------\n\nTITLE: Complete Chroma Example in TypeScript\nDESCRIPTION: A full working example in TypeScript that initializes a client, creates or gets a collection, upserts documents, and performs a query about Florida.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\nconst client = new ChromaClient();\n\n// switch `createCollection` to `getOrCreateCollection` to avoid creating a new collection every time\nconst collection = await client.getOrCreateCollection({\n    name: \"my_collection\",\n});\n\n// switch `addRecords` to `upsertRecords` to avoid adding the same documents every time\nawait collection.upsert({\n    documents: [\n        \"This is a document about pineapple\",\n        \"This is a document about oranges\",\n    ],\n    ids: [\"id1\", \"id2\"],\n});\n\nconst results = await collection.query({\n    queryTexts: \"This is a query document about florida\", // Chroma will embed this for you\n    nResults: 2, // how many results to return\n});\n\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Collections in Python\nDESCRIPTION: Demonstrates how to create a new collection and retrieve an existing collection using the Chroma client in Python. It also shows how to use embedding functions when creating or retrieving collections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncollection = client.create_collection(name=\"my_collection\", embedding_function=emb_fn)\ncollection = client.get_collection(name=\"my_collection\", embedding_function=emb_fn)\n```\n\n----------------------------------------\n\nTITLE: Querying by Embeddings in Python\nDESCRIPTION: This snippet demonstrates how to query a Chroma collection by providing a set of query embeddings. It allows for filtering by metadata fields and documents, where the number of results can be specified.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(\n    query_embeddings=[[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],\n    n_results=10,\n    where={\"metadata_field\": \"is_equal_to_this\"},\n    where_document={\"$contains\":\"search_string\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Raw Documents to Chroma Collection in TypeScript\nDESCRIPTION: This snippet shows how to add raw documents to a Chroma collection using TypeScript. It includes documents, metadata, and IDs. The method is asynchronous and returns a promise.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/add-data.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.add({\n    ids: [\"id1\", \"id2\", \"id3\", ...],\n    metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents: [\"lorem ipsum...\", \"doc2\", \"doc3\", ...],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Chroma Collection for Relevant Supports\nDESCRIPTION: Retrieves the most relevant supporting evidence for the first 10 questions using embedding similarity\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/start_here.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\\n    query_texts=dataset[\"question\"][:10],\\n    n_results=1)\\n\\nfor i, q in enumerate(dataset['question'][:10]):\\n    print(f\"Question: {q}\")\\n    print(f\"Retrieved support: {results['documents'][i][0]}\")\\n    print()\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Remote Chroma Client\nDESCRIPTION: Creates a client that connects to a remote Chroma server. Supports multiple clients connecting to the same server and is recommended for production use.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef HttpClient(host: str = \"localhost\",\n               port: int = 8000,\n               ssl: bool = False,\n               headers: Optional[Dict[str, str]] = None,\n               settings: Optional[Settings] = None,\n               tenant: str = DEFAULT_TENANT,\n               database: str = DEFAULT_DATABASE) -> ClientAPI\n```\n\n----------------------------------------\n\nTITLE: Using ChromaDB with OpenAI Embedding Function\nDESCRIPTION: Example showing how to use ChromaDB with an OpenAI embedding function, which allows adding documents without providing embeddings and querying with text directly.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb-client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// First install: npm install chromadb-client openai\nimport { ChromaClient, OpenAIEmbeddingFunction } from \"chromadb-client\";\n\nconst embedder = new OpenAIEmbeddingFunction({\n  openai_api_key: \"your-api-key\",\n  model_name: \"text-embedding-ada-002\"\n});\n\nconst chroma = new ChromaClient({ path: \"http://localhost:8000\" });\nconst collection = await chroma.createCollection({\n  name: \"my-collection\",\n  embeddingFunction: embedder\n});\n\n// Now you can add documents without providing embeddings\nawait collection.add({\n  ids: [\"id1\"],\n  documents: [\"Document content\"],\n});\n\n// And query with text\nconst results = await collection.query({\n  queryTexts: [\"similar document\"],\n  nResults: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items by ID in Javascript\nDESCRIPTION: This snippet demonstrates how to get records from a collection using their identifiers in Javascript. It also supports filtering on style metadata fields.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.get( {\n\tids: [\"id1\", \"id2\", \"id3\", ...], //ids\n\twhere: {\"style\": \"style1\"} // where\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Multimodal Collection with Data Inclusion in Chroma\nDESCRIPTION: Performs a query on a multimodal collection with images, including the actual data in the results.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_images=[...], # # list of numpy arrays representing images\n    includes=['data']\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Collection Metadata in Python\nDESCRIPTION: This method modifies the collection's name or metadata. The parameters allow updating various attributes of the collection without altering its foundational structure.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef modify(name: Optional[str] = None,\n           metadata: Optional[CollectionMetadata] = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Adding Raw Documents to Chroma Collection in Python\nDESCRIPTION: This snippet demonstrates how to add raw documents to a Chroma collection using Python. It includes documents, metadata, and IDs. Chroma will automatically tokenize and embed the documents using the collection's embedding function.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/add-data.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    documents=[\"lorem ipsum...\", \"doc2\", \"doc3\", ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    ids=[\"id1\", \"id2\", \"id3\", ...]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Chroma Client Usage in JavaScript\nDESCRIPTION: Demonstrates how to create a Chroma client, create a collection, add embeddings to the collection, and query the collection. This example shows the core functionality of connecting to a Chroma server running on localhost port 8000.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\"; // or \"chromadb-client\"\nconst chroma = new ChromaClient({ path: \"http://localhost:8000\" });\nconst collection = await chroma.createCollection({ name: \"test-from-js\" });\nfor (let i = 0; i < 20; i++) {\n  await collection.add({\n    ids: [\"test-id-\" + i.toString()],\n    embeddings: [1, 2, 3, 4, 5],\n    documents: [\"test\"],\n  });\n}\nconst queryData = await collection.query({\n  queryEmbeddings: [1, 2, 3, 4, 5],\n  queryTexts: [\"test\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Chroma Collection in Python\nDESCRIPTION: This code snippet demonstrates how to initialize a new PersistentClient and load a previously created collection. It allows the user to reload the collection data from the specified persistence directory. This is particularly useful for accessing the stored data after the client is restarted.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/local_persistence.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create a new client with the same settings\nclient = chromadb.PersistentClient(path=persist_directory)\n\n# Load the collection\ncollection = client.get_collection(collection_name)\n```\n\n----------------------------------------\n\nTITLE: Querying a Multimodal Collection with Images in Python\nDESCRIPTION: Shows how to query a multimodal collection using image data as the query input. This allows finding similar items to the provided image queries from the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_images=[...] # A list of numpy arrays representing images\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to a Collection in Python\nDESCRIPTION: Code to add text documents to a Chroma collection in Python. Each document requires a unique ID, and Chroma handles embedding automatically.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    documents=[\n        \"This is a document about pineapple\",\n        \"This is a document about oranges\"\n    ],\n    ids=[\"id1\", \"id2\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Chroma Collection using Python\nDESCRIPTION: Updates properties of existing records in a Chroma collection by ID. This method can modify embeddings, metadatas, and documents. If an ID is not found, an error is logged and the update is ignored. If documents are provided without embeddings, new embeddings will be generated using the collection's embedding function.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/update-data.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection.update(\n    ids=[\"id1\", \"id2\", \"id3\", ...],\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents=[\"doc1\", \"doc2\", \"doc3\", ...],\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Records in Python\nDESCRIPTION: This snippet demonstrates the use of the `.upsert` method in Python to either update existing records or insert new ones into a Chroma collection, including the handling of IDs, embeddings, metadata, and documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ncollection.upsert(\n    ids=[\"id1\", \"id2\", \"id3\", ...],\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents=[\"doc1\", \"doc2\", \"doc3\", ...],\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Collections in Python\nDESCRIPTION: Shows various methods for managing collections in Python, including retrieving, creating, and deleting collections. It also demonstrates how to use the get_or_create_collection method.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncollection = client.get_collection(name=\"test\") # Get a collection object from an existing collection, by name. Will raise an exception if it's not found.\ncollection = client.get_or_create_collection(name=\"test\") # Get a collection object from an existing collection, by name. If it doesn't exist, create it.\nclient.delete_collection(name=\"my_collection\") # Delete a collection and all associated embeddings, documents, and metadata. ⚠️ This is destructive and not reversible\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma Client and Collection\nDESCRIPTION: Sets up the Chroma client and creates a new collection for demonstration purposes.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.Client()\n\n# Create a new chroma collection\ncollection_name = \"filter_example_collection\"\ncollection = client.create_collection(name=collection_name)\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authentication with Chroma Client in Python\nDESCRIPTION: This snippet demonstrates how to use basic authentication with the Chroma client in Python, specifying the authentication provider and credentials in the settings and accessing different endpoints.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/auth.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb import Settings\n\nclient = chromadb.HttpClient(\n    settings=Settings(chroma_client_auth_provider=\"chromadb.auth.basic_authn.BasicAuthClientProvider\",\n                      chroma_client_auth_credentials=\"admin:admin\"))\nclient.heartbeat()  # this should work with or without authentication - it is a public endpoint\n\nclient.get_version()  # this should work with or without authentication - it is a public endpoint\n\nclient.list_collections()  # this is a protected endpoint and requires authentication\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Chroma Client\nDESCRIPTION: Creates a persistent Chroma client that saves data to disk. Suitable for local testing and development scenarios with data persistence.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef PersistentClient(path: str = \"./chroma\",\n                     settings: Optional[Settings] = None,\n                     tenant: str = DEFAULT_TENANT,\n                     database: str = DEFAULT_DATABASE) -> ClientAPI\n```\n\n----------------------------------------\n\nTITLE: Using Embedding Functions with ChromaDB JavaScript Client\nDESCRIPTION: Shows how to use embedding functions with the ChromaDB client, including creating a collection with an embedding function and querying with text.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChromaClient, OpenAIEmbeddingFunction } from \"chromadb\";\n\nconst embedder = new OpenAIEmbeddingFunction({\n  openai_api_key: \"your-api-key\",\n  model_name: \"text-embedding-ada-002\"\n});\n\nconst chroma = new ChromaClient({ path: \"http://localhost:8000\" });\nconst collection = await chroma.createCollection({\n  name: \"my-collection\",\n  embeddingFunction: embedder\n});\n\n// Now you can add documents without providing embeddings\nawait collection.add({\n  ids: [\"id1\"],\n  documents: [\"Document content\"],\n});\n\n// And query with text\nconst results = await collection.query({\n  queryTexts: [\"similar document\"],\n  nResults: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items by ID in Python\nDESCRIPTION: This snippet showcases how to retrieve specific items from a Chroma collection using their IDs. It includes an option for filtering based on metadata fields.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(\n\tids=[\"id1\", \"id2\", \"id3\", ...],\n\twhere={\"style\": \"style1\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Multimodal Collection with Images in Chroma\nDESCRIPTION: Performs a query on a multimodal collection using image data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_images=[...] # A list of numpy arrays representing images\n)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Chroma Retrieval Pipeline with Braintrust in Python\nDESCRIPTION: This code example demonstrates how to set up and run an evaluation for a Chroma-based retrieval pipeline using Braintrust. It initializes an OpenAI client, creates a Levenshtein evaluator, defines a retrieval pipeline function that queries Chroma, and runs an evaluation that logs results to Braintrust.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/braintrust.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom autoevals.llm import *\nfrom braintrust import Eval\n\nPROJECT_NAME=\"Chroma_Eval\"\n\nfrom openai import OpenAI\n\nclient = OpenAI()\nleven_evaluator = LevenshteinScorer()\n\nasync def pipeline_a(input, hooks=None):\n    # Get a relevant fact from Chroma\n    relevant = collection.query(\n        query_texts=[input],\n        n_results=1,\n    )\n    relevant_text = ','.join(relevant[\"documents\"][0])\n    prompt = \"\"\"\n        You are an assistant called BT. Help the user.\n        Relevant information: {relevant}\n        Question: {question}\n        Answer:\n        \"\"\".format(question=input, relevant=relevant_text)\n    messages = [{\"role\": \"system\", \"content\": prompt}]\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=messages,\n        temperature=0,\n        max_tokens=100,\n    )\n\n    result = response.choices[0].message.content\n    return result\n\n# Run an evaluation and log to Braintrust\nawait Eval(\n    PROJECT_NAME,\n    # define your test cases\n    data = lambda:[{\"input\": \"What is my eye color?\", \"expected\": \"Brown\"}],\n    # define your retrieval pipeline w/ Chroma above\n    task = pipeline_a,\n    # use a prebuilt scoring function or define your own :)\n    scores=[leven_evaluator],\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embeddings from the Data Store in Python\nDESCRIPTION: The 'get' method fetches embeddings based on provided identifiers or conditions. It supports pagination through limits and offsets, returning associated metadata and documents as specified.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get(ids: Optional[OneOrMany[ID]] = None,\n        where: Optional[Where] = None,\n        limit: Optional[int] = None,\n        offset: Optional[int] = None,\n        where_document: Optional[WhereDocument] = None,\n        include: Include = [\"metadatas\", \"documents\"]) -> GetResult\n```\n\n----------------------------------------\n\nTITLE: Querying a Collection in Python\nDESCRIPTION: Code to perform a semantic similarity query against a Chroma collection in Python. The query returns the n most similar documents to the provided query text.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_texts=[\"This is a query document about hawaii\"], # Chroma will embed this for you\n    n_results=2 # how many results to return\n)\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Creating Chroma Client and Multimodal Collection in Python\nDESCRIPTION: This code creates a Chroma client, specifies an embedding function and image loader, and creates a multimodal collection. It uses OpenCLIPEmbeddingFunction for handling both text and image data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/multimodal/multimodal_retrieval.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb.utils.embedding_functions import OpenCLIPEmbeddingFunction\nfrom chromadb.utils.data_loaders import ImageLoader\n\nclient = chromadb.Client()\n\nembedding_function = OpenCLIPEmbeddingFunction()\nimage_loader = ImageLoader()\n\ncollection = client.create_collection(\n    name='multimodal_collection', \n    embedding_function=embedding_function, \n    data_loader=image_loader)\n```\n\n----------------------------------------\n\nTITLE: Deleting Items from Chroma Collection - Python\nDESCRIPTION: Delete items from a Chroma collection using IDs or where filter conditions in Python. The method can delete embeddings, documents, and metadata for specified items or those matching the where clause.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/delete-data.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection.delete(\n    ids=[\"id1\", \"id2\", \"id3\",...],\n\twhere={\"chapter\": \"20\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Items from Chroma Collection in Python\nDESCRIPTION: This snippet demonstrates how to delete items from a Chroma collection using Python. It allows deleting by specific IDs and supports a where filter to delete items matching certain criteria.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ncollection.delete(\n    ids=[\"id1\", \"id2\", \"id3\",...],\n\twhere={\"chapter\": \"20\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Data via URIs to a Multimodal Collection in Python\nDESCRIPTION: Shows how to add data to a collection using URIs which reference externally stored data. This requires a data loader to be specified when creating the collection to interpret the URIs.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    ids=['id1', 'id2', 'id3'],\n    uris=[...] #  A list of strings representing URIs to data\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Multimodal Collection with Images in Chroma\nDESCRIPTION: Updates entries in a multimodal collection with new image data, overwriting existing modalities.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncollection.update(\n    ids=['id1', 'id2', 'id3'],\n    images=[...] # A list of numpy arrays representing images\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Collections in JavaScript\nDESCRIPTION: Demonstrates how to create a new collection and retrieve an existing collection using the Chroma client in JavaScript. It also shows how to use embedding functions when creating or retrieving collections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet collection = await client.createCollection({\n  name: \"my_collection\",\n  embeddingFunction: emb_fn,\n});\nlet collection2 = await client.getCollection({\n  name: \"my_collection\",\n  embeddingFunction: emb_fn,\n});\n```\n\n----------------------------------------\n\nTITLE: Set Tenant for Chroma Client\nDESCRIPTION: This function sets the tenant and database for the Chroma client. An error will be raised if the specified tenant or database does not exist.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef set_tenant(tenant: str, database: str = DEFAULT_DATABASE) -> None\n```\n\n----------------------------------------\n\nTITLE: Adding Embeddings to the Data Store in Python\nDESCRIPTION: This method adds a list of embeddings to the data store, along with optional metadata and documents. It ensures that at least some identifiers for the embeddings are provided and checks for duplicates.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef add(ids: OneOrMany[ID],\n        embeddings: Optional[OneOrMany[Embedding]] = None,\n        metadatas: Optional[OneOrMany[Metadata]] = None,\n        documents: Optional[OneOrMany[Document]] = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Get or Create Collection in Chroma\nDESCRIPTION: This function retrieves a collection if it exists, otherwise creates a new collection with the given name, metadata, embedding function, and data loader. If the collection already exists, the provided metadata will be ignored.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_or_create_collection(\n        name: str,\n        configuration: Optional[CollectionConfiguration] = None,\n        metadata: Optional[CollectionMetadata] = None,\n        embedding_function: Optional[\n            EmbeddingFunction[Embeddable]] = ef.DefaultEmbeddingFunction(),\n        data_loader: Optional[DataLoader[Loadable]] = None) -> Collection\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentence Transformer Embedding Function\nDESCRIPTION: Shows how to initialize a Sentence Transformer embedding function with a specific model name. Provides flexibility in choosing different pre-trained models.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/embedding-functions.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsentence_transformer_ef = embedding_functions.SentenceTransformerEmbeddingFunction(\n    model_name=\"all-MiniLM-L6-v2\"\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultEmbeddingFunction } from \"chromadb\";\nconst modelName = \"all-MiniLM-L6-v2\";\nconst defaultEF = new DefaultEmbeddingFunction(modelName);\n```\n\n----------------------------------------\n\nTITLE: Upserting Records in Javascript\nDESCRIPTION: This snippet illustrates how to perform an upsert operation in a Chroma collection using Javascript, effectively updating existing entries or creating new items based on the provided data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.upsert({\n  ids: [\"id1\", \"id2\", \"id3\"],\n  embeddings: [\n    [1.1, 2.3, 3.2],\n    [4.5, 6.9, 4.4],\n    [1.1, 2.3, 3.2],\n  ],\n  metadatas: [\n    { chapter: \"3\", verse: \"16\" },\n    { chapter: \"3\", verse: \"5\" },\n    { chapter: \"29\", verse: \"11\" },\n  ],\n  documents: [\"doc1\", \"doc2\", \"doc3\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Embedding Function in Chroma\nDESCRIPTION: Shows how to initialize the default all-MiniLM-L6-v2 embedding function in both Python and TypeScript. This is the standard way to create embeddings for documents and queries.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/embedding-functions.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils import embedding_functions\ndefault_ef = embedding_functions.DefaultEmbeddingFunction()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultEmbeddingFunction } from \"chromadb\";\nconst defaultEF = new DefaultEmbeddingFunction();\n```\n\n----------------------------------------\n\nTITLE: Connecting Streamlit to ChromaDB using streamlit-chromadb-connection\nDESCRIPTION: This code snippet demonstrates how to connect a Streamlit application to ChromaDB using the streamlit-chromadb-connection library. It creates a persistent ChromaDB client, connects to a collection, and displays the collection data in a Streamlit dataframe.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/streamlit.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom streamlit_chromadb_connection.chromadb_connection import ChromadbConnection\n\nconfiguration = {\n    \"client\": \"PersistentClient\",\n    \"path\": \"/tmp/.chroma\"\n}\n\ncollection_name = \"documents_collection\"\n\nconn = st.connection(\"chromadb\",\n                     type=ChromaDBConnection,\n                     **configuration)\ndocuments_collection_df = conn.get_collection_data(collection_name)\nst.dataframe(documents_collection_df)\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Embeddings in Python\nDESCRIPTION: This method allows updating existing embeddings, their associated metadata, or documents based on provided identifiers, ensuring that entries remain current.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef update(ids: OneOrMany[ID],\n           embeddings: Optional[OneOrMany[Embedding]] = None,\n           metadatas: Optional[OneOrMany[Metadata]] = None,\n           documents: Optional[OneOrMany[Document]] = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Upserting Records in Chroma Collection using Python\nDESCRIPTION: Performs an upsert operation in a Chroma collection, which updates existing records or adds new ones if they don't exist. This method combines the functionality of update and add operations, handling both cases based on whether the provided IDs already exist in the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/update-data.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection.upsert(\n    ids=[\"id1\", \"id2\", \"id3\", ...],\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents=[\"doc1\", \"doc2\", \"doc3\", ...],\n)\n```\n\n----------------------------------------\n\nTITLE: Querying a Collection in TypeScript\nDESCRIPTION: Code to perform a semantic similarity query against a Chroma collection in TypeScript. The query returns the n most similar documents to the provided query text.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await collection.query({\n    queryTexts: \"This is a query document about hawaii\", // Chroma will embed this for you\n    nResults: 2, // how many results to return\n});\n\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Embedding Server and ChromaDB Operations - Python\nDESCRIPTION: This code snippet imports the chromadb library and sets up a Hugging Face embedding server to create and query a collection in ChromaDB. It establishes connections to the embedding server and the ChromaDB client, creates a collection if it does not exist, adds documents, and performs a query, returning results based on the input query texts.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/server_side_embeddings/huggingface/test.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nfrom chromadb.utils.embedding_functions import HuggingFaceEmbeddingServer\n\nef = HuggingFaceEmbeddingServer(url=\"http://localhost:8001/embed\")\n\nclient = chromadb.HttpClient(\"http://localhost:8000/\")\n\ncol=client.get_or_create_collection(\"test\",embedding_function=ef)\n\ncol.add(documents=[\"test\"],ids=[\"test\"])\n\ncol.query(query_texts=[\"test\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenCLIP Embedding Function for Multimodal Data in Python\nDESCRIPTION: Creates an instance of the OpenCLIPEmbeddingFunction which supports embedding both text and images into a single embedding space. This function is built into Chroma and allows for multimodal data processing.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions import OpenCLIPEmbeddingFunction\nembedding_function = OpenCLIPEmbeddingFunction()\n```\n\n----------------------------------------\n\nTITLE: Managing Collections in JavaScript\nDESCRIPTION: Shows various methods for managing collections in JavaScript, including retrieving, creating, and deleting collections. It also demonstrates how to use the getOrCreateCollection method.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst collection = await client.getCollection({ name: \"test\" }); // Get a collection object from an existing collection, by name. Will raise an exception of it's not found.\ncollection = await client.getOrCreateCollection({ name: \"test\" }); // Get a collection object from an existing collection, by name. If it doesn't exist, create it.\nawait client.deleteCollection(collection); // Delete a collection and all associated embeddings, documents, and metadata. ⚠️ This is destructive and not reversible\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Chroma Collection using TypeScript\nDESCRIPTION: Updates properties of existing records in a Chroma collection by ID using TypeScript. This asynchronous method can modify embeddings, metadatas, and documents. If an ID is not found, an error is logged and the update is ignored. The embeddings must match the dimension of the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/update-data.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.update({\n    ids: [\"id1\", \"id2\", \"id3\", ...], \n    embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...], \n    metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...], \n    documents: [\"doc1\", \"doc2\", \"doc3\", ...]\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Existing Collections in Chroma\nDESCRIPTION: Demonstrates methods to get, get-or-create, and delete collections. The get method raises an exception if the collection is not found, while get-or-create will create it if it doesn't exist. Deletion is destructive and not reversible.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/create-get-delete.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection = client.get_collection(name=\"test\") # Get a collection object from an existing collection, by name. Will raise an exception if it's not found.\ncollection = client.get_or_create_collection(name=\"test\") # Get a collection object from an existing collection, by name. If it doesn't exist, create it.\nclient.delete_collection(name=\"my_collection\") # Delete a collection and all associated embeddings, documents, and metadata. ⚠️ This is destructive and not reversible\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await client.getCollection({ name: \"test\" }); // Get a collection object from an existing collection, by name. Will raise an exception of it's not found.\ncollection = await client.getOrCreateCollection({ name: \"test\" }); // Get a collection object from an existing collection, by name. If it doesn't exist, create it.\nawait client.deleteCollection(collection); // Delete a collection and all associated embeddings, documents, and metadata. ⚠️ This is destructive and not reversible\n```\n\n----------------------------------------\n\nTITLE: Creating Multimodal Collection in Chroma\nDESCRIPTION: Initializes a Chroma client and creates a multimodal collection with specified embedding function and data loader.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.Client()\n\ncollection = client.create_collection(\n    name='multimodal_collection',\n    embedding_function=embedding_function,\n    data_loader=data_loader)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Cohere Embedding Collection\nDESCRIPTION: This snippet creates a Chroma collection using the Cohere embedding function, adds documents to it, and performs a query. It follows the same pattern as the OpenAI example but uses a different embedding provider.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncohere_collection = client.create_collection(name=\"cohere_embeddings\", embedding_function=cohere_ef)\n\ncohere_collection.add(\n    documents=[\"This is a document\", \"This is another document\"],\n    metadatas=[{\"source\": \"my_source\"}, {\"source\": \"my_source\"}],\n    ids=[\"id1\", \"id2\"]\n)\n\nresults = cohere_collection.query(\n    query_texts=[\"This is a query document\"],\n    n_results=2\n)\nresults\n```\n\n----------------------------------------\n\nTITLE: Upserting Embeddings in Python\nDESCRIPTION: This method performs an insert or update operation on embeddings, allowing for new entries to be added or existing ones to be modified based on their identifiers.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef upsert(ids: OneOrMany[ID],\n           embeddings: Optional[OneOrMany[Embedding]] = None,\n           metadatas: Optional[OneOrMany[Metadata]] = None,\n           documents: Optional[OneOrMany[Document]] = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma Client and Collection\nDESCRIPTION: Creates an ephemeral Chroma client and establishes a collection for storing supporting evidence\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/start_here.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\\n\\nclient = chromadb.Client()\\n\\ncollection = client.create_collection(\"sciq_supports\")\n```\n\n----------------------------------------\n\nTITLE: Adding Documents with Embeddings to Chroma Collection in Python\nDESCRIPTION: This snippet demonstrates how to add documents with pre-computed embeddings to a Chroma collection using Python. It includes documents, embeddings, metadata, and IDs. Chroma will store the documents without re-embedding them.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/add-data.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    documents=[\"doc1\", \"doc2\", \"doc3\", ...],\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    ids=[\"id1\", \"id2\", \"id3\", ...]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Documents with Embeddings to Chroma Collection in TypeScript\nDESCRIPTION: This snippet shows how to add documents with pre-computed embeddings to a Chroma collection using TypeScript. It includes documents, embeddings, metadata, and IDs. The method is asynchronous and returns a promise.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/add-data.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.add({\n    ids: [\"id1\", \"id2\", \"id3\", ...],\n    embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents: [\"lorem ipsum...\", \"doc2\", \"doc3\", ...],\n})\n```\n\n----------------------------------------\n\nTITLE: Querying with Data Inclusion in Python\nDESCRIPTION: Demonstrates how to query a collection and include the actual data in the results by specifying 'data' in the includes parameter. This automatically retrieves data for any available URIs using the data loader.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_images=[...], # # list of numpy arrays representing images\n    includes=['data']\n)\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous HTTP Client in Python with Chroma\nDESCRIPTION: Python code demonstrating the use of the asynchronous HTTP client for Chroma. It shows how to create a collection and add documents asynchronously.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/client-server.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport chromadb\n\nasync def main():\n    client = await chromadb.AsyncHttpClient()\n\n    collection = await client.create_collection(name=\"my_collection\")\n    await collection.add(\n        documents=[\"hello world\"],\n        ids=[\"id1\"]\n    )\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Chroma Collection in Python\nDESCRIPTION: This snippet retrieves various data aspects from the current Chroma collection, including embeddings, metadata, and documents. The 'include' parameter allows specifying which types of data to return. This is useful for extracting detailed information from the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/local_persistence.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(include=[\"embeddings\", \"metadatas\", \"documents\"])\n```\n\n----------------------------------------\n\nTITLE: Upserting Records in Chroma Collection using TypeScript\nDESCRIPTION: Performs an asynchronous upsert operation in a Chroma collection using TypeScript, which updates existing records or adds new ones if they don't exist. This method efficiently handles both updating existing records and creating new ones in a single operation.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/update-data.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.upsert({\n    ids: [\"id1\", \"id2\", \"id3\"],\n    embeddings: [\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n        [1.1, 2.3, 3.2],\n    ],\n    metadatas: [\n        { chapter: \"3\", verse: \"16\" },\n        { chapter: \"3\", verse: \"5\" },\n        { chapter: \"29\", verse: \"11\" },\n    ],\n    documents: [\"doc1\", \"doc2\", \"doc3\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Chroma Collections with Text\nDESCRIPTION: Query a Chroma collection using text queries that are automatically embedded using the collection's embedding function. Supports filtering by metadata and document content.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/query-and-get.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(\n    query_texts=[\"doc10\", \"thus spake zarathustra\", ...],\n    n_results=10,\n    where={\"metadata_field\": \"is_equal_to_this\"},\n    where_document={\"$contains\":\"search_string\"}\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.query({\n    queryTexts: [\"doc10\", \"thus spake zarathustra\", ...],\n    nResults: 10,\n    where: {\"metadata_field\": \"is_equal_to_this\"},\n    whereDocument: {\"$contains\": \"search_string\"}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous HTTP Remote Chroma Client\nDESCRIPTION: Creates an asynchronous client for connecting to a remote Chroma server. Supports concurrent client connections and is recommended for production use with async workflows.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def AsyncHttpClient(host: str = \"localhost\",\n                          port: int = 8000,\n                          ssl: bool = False,\n                          headers: Optional[Dict[str, str]] = None,\n                          settings: Optional[Settings] = None,\n                          tenant: str = DEFAULT_TENANT,\n                          database: str = DEFAULT_DATABASE) -> AsyncClientAPI\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Chroma Collection for Team Knowledge Base\nDESCRIPTION: Python script demonstrating how to connect to Chroma Cloud, create a collection for support cases, and add example documents. This setup allows team members to use Claude to access shared knowledge.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/anthropic-mcp.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom datetime import datetime\n\n# Connect to Chroma Cloud\nclient = chromadb.HttpClient(\n    ssl=True,\n    host='api.trychroma.com',\n    tenant='your-tenant-id',\n    database='support-kb',\n    headers={\n        'x-chroma-token': 'YOUR_API_KEY'\n    }\n)\n\n# Create a collection for support cases\ncollection = client.create_collection(\"support_cases\")\n\n# Add some example support cases\nsupport_cases = [\n    {\n        \"case\": \"Customer reported issues connecting their IoT devices to the dashboard.\",\n        \"resolution\": \"Guided customer through firewall configuration and port forwarding setup.\",\n        \"category\": \"connectivity\",\n        \"date\": \"2024-03-15\"\n    },\n    {\n        \"case\": \"User couldn't access admin features after recent update.\",\n        \"resolution\": \"Discovered role permissions weren't migrated correctly. Applied fix and documented process.\",\n        \"category\": \"permissions\",\n        \"date\": \"2024-03-16\"\n    }\n]\n\n# Add documents to collection\ncollection.add(\n    documents=[case[\"case\"] + \"\\n\" + case[\"resolution\"] for case in support_cases],\n    metadatas=[{\n        \"category\": case[\"category\"],\n        \"date\": case[\"date\"]\n    } for case in support_cases],\n    ids=[f\"case_{i}\" for i in range(len(support_cases))]\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Results in Javascript\nDESCRIPTION: This snippet shows how to filter results in a Chroma collection query in Javascript, limiting the output to specific elements by using the include parameter.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n# Only get documents and ids\ncollection.get(\n    {include=[\"documents\"]}\n)\n\ncollection.get({\n    queryEmbeddings=[[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],\n    include=[\"documents\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Items from Chroma Collection - TypeScript\nDESCRIPTION: Delete items from a Chroma collection using IDs or where filter conditions in TypeScript. The async method can delete embeddings, documents, and metadata for specified items or those matching the where clause.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/delete-data.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.delete({\n    ids: [\"id1\", \"id2\", \"id3\",...], //ids\n    where: {\"chapter\": \"20\"} //where\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentence Transformer Embedding Function in Python\nDESCRIPTION: Creates an instance of a Sentence Transformer embedding function in Chroma, allowing custom model selection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/embeddings-guide.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsentence_transformer_ef = embedding_functions.SentenceTransformerEmbeddingFunction(model_name=\"all-MiniLM-L6-v2\")\n```\n\n----------------------------------------\n\nTITLE: Using Collection Utility Methods in Chroma\nDESCRIPTION: Shows utility methods available on collection objects including peek() to view the first 10 items, count() to get the number of items, and modify() to rename the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/create-get-delete.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection.peek() \ncollection.count() \ncollection.modify(name=\"new_name\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.peek();\nawait collection.count();\nawait collection.modify({ name: \"new_name\" })\n```\n\n----------------------------------------\n\nTITLE: Creating and Using HuggingFace Embedding Collection\nDESCRIPTION: This snippet creates a Chroma collection using the HuggingFace embedding function, adds documents to it, and performs a query. It follows the same pattern as the previous examples but uses the HuggingFace model for embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhuggingface_collection = client.create_collection(name=\"huggingface_embeddings\", embedding_function=huggingface_ef)\n\nhuggingface_collection.add(\n    documents=[\"This is a document\", \"This is another document\"],\n    metadatas=[{\"source\": \"my_source\"}, {\"source\": \"my_source\"}],\n    ids=[\"id1\", \"id2\"]\n)\n\nresults = huggingface_collection.query(\n    query_texts=[\"This is a query document\"],\n    n_results=2\n)\nresults\n```\n\n----------------------------------------\n\nTITLE: Querying Chroma Multimodal Collection with Text in Python\nDESCRIPTION: This code demonstrates querying the multimodal collection using text. It retrieves and displays images related to specific text queries like \"animals\", \"vehicles\", and \"street scene\".\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/multimodal/multimodal_retrieval.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Querying for \"Animals\"\n\nretrieved = collection.query(query_texts=[\"animals\"], include=['data'], n_results=3)\nfor img in retrieved['data'][0]:\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.show()\n\n# Querying for \"Vehicles\"\n\nretrieved = collection.query(query_texts=[\"vehicles\"], include=['data'], n_results=3)\nfor img in retrieved['data'][0]:\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.show()\n\n# Querying for \"Street Scenes\"\n\nretrieved = collection.query(query_texts=[\"street scene\"], include=['data'], n_results=3)\nfor img in retrieved['data'][0]:\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Create Database in Chroma\nDESCRIPTION: This function creates a new database with the given name. Raises an error if the database already exists.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef create_database(name: str, tenant: str = DEFAULT_TENANT) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenCLIP Embedding Function in Python\nDESCRIPTION: Creates an OpenCLIP embedding function that supports both text and image embedding.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions import OpenCLIPEmbeddingFunction\nembedding_function = OpenCLIPEmbeddingFunction()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server and Performing Basic Operations\nDESCRIPTION: Example showing how to connect to a Chroma server, create a collection, add documents with embeddings and metadata, and query the database. The example demonstrates setting up the HTTP client, adding documents with custom metadata and IDs, and performing a basic similarity search query.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/python/README.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n# Example setup of the client to connect to your chroma server\nclient = chromadb.HttpClient(host=\"localhost\", port=8000)\n\ncollection = client.create_collection(\"all-my-documents\")\n\ncollection.add(\n    documents=[\"This is document1\", \"This is document2\"],\n    metadatas=[{\"source\": \"notion\"}, {\"source\": \"google-docs\"}], # filter on these!\n    ids=[\"doc1\", \"doc2\"], # unique for each doc\n    embeddings = [[1.2, 2.1, ...], [1.2, 2.1, ...]]\n)\n\nresults = collection.query(\n    query_texts=[\"This is a query document\"],\n    n_results=2,\n    # where={\"metadata_field\": \"is_equal_to_this\"}, # optional filter\n    # where_document={\"$contains\":\"search_string\"}  # optional filter\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up ImageLoader Data Loader in Python\nDESCRIPTION: Initializes an ImageLoader which allows Chroma to load images from the filesystem via URIs. This data loader enables Chroma to work with image data stored externally rather than within its database.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.data_loaders import ImageLoader\ndata_loader = ImageLoader()\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Collection in Python\nDESCRIPTION: Demonstrates how to add data to a collection in Python, including documents, metadata, and IDs. It also shows how to add pre-computed embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    documents=[\"lorem ipsum...\", \"doc2\", \"doc3\", ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    ids=[\"id1\", \"id2\", \"id3\", ...]\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    documents=[\"doc1\", \"doc2\", \"doc3\", ...],\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    ids=[\"id1\", \"id2\", \"id3\", ...]\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    ids=[\"id1\", \"id2\", \"id3\", ...],\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...]\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Collection in TypeScript\nDESCRIPTION: This snippet demonstrates performing queries on a collection using the 'query' method with parameters in a 'QueryRecordsParams' object. It supports different query types, including embedding and text queries, and returns a promise resolving to 'MultiQueryResponse'. Errors are thrown if the query fails.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Query the collection using embeddings\nconst embeddingsResults = await collection.query({\n  queryEmbeddings: [[0.1, 0.2, ...], ...],\n  nResults: 10,\n  where: {\"name\": {\"$eq\": \"John Doe\"}},\n  include: [\"metadata\", \"document\"]\n});\n\n// Query the collection using query text\nconst textResults = await collection.query({\n    queryTexts: \"some text\",\n    nResults: 10,\n    where: {\"name\": {\"$eq\": \"John Doe\"}},\n    include: [\"metadata\", \"document\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Client and Collection with Persistence in Python\nDESCRIPTION: This snippet initializes a ChromaDB PersistentClient with a specified directory for persistence, and creates or retrieves a collection named 'peristed_collection'. The 'path' parameter denotes the directory for storing data, and the 'name' parameter specifies the collection name. This setup ensures that the data can be stored on disk and retrieved later.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/local_persistence.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create a new Chroma client with persistence enabled. \npersist_directory = \"db\"\n\nclient = chromadb.PersistentClient(path=persist_directory)\n\n# Create a new chroma collection\ncollection_name = \"peristed_collection\"\ncollection = client.get_or_create_collection(name=collection_name)\n```\n\n----------------------------------------\n\nTITLE: Adding Embeddings and Metadata to Chroma Collection in TypeScript\nDESCRIPTION: This snippet shows how to add only embeddings and metadata to a Chroma collection using TypeScript, without storing the actual documents. It includes embeddings, metadata, and IDs. The method is asynchronous and returns a promise.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/add-data.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.add({\n    ids: [\"id1\", \"id2\", \"id3\", ...],\n    embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors in Python\nDESCRIPTION: This method allows querying for the nearest neighbor embeddings based on either embedding vectors or document texts. It permits filtering and customization of results through additional parameters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef query(\n        query_embeddings: Optional[OneOrMany[Embedding]] = None,\n        query_texts: Optional[OneOrMany[Document]] = None,\n        n_results: int = 10,\n        where: Optional[Where] = None,\n        where_document: Optional[WhereDocument] = None,\n        include: Include = [\"metadatas\", \"documents\",\n                            \"distances\"]) -> QueryResult\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Embedding Functions\nDESCRIPTION: Examples of implementing custom embedding functions by following the EmbeddingFunction protocol. Shows the required structure and methods for both Python and TypeScript implementations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/embedding-functions.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb import Documents, EmbeddingFunction, Embeddings\n\nclass MyEmbeddingFunction(EmbeddingFunction):\n    def __call__(self, input: Documents) -> Embeddings:\n        # embed the documents somehow\n        return embeddings\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyEmbeddingFunction {\n    private api_key: string;\n\n    constructor(api_key: string) {\n        this.api_key = api_key;\n    }\n\n    public async generate(texts: string[]): Promise<number[][]> {\n        // do things to turn texts into embeddings with an api_key perhaps\n        return embeddings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ChromaDB JavaScript Client\nDESCRIPTION: Demonstrates how to initialize the ChromaDB client, create a collection, add documents, and query the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\n// Initialize the client\nconst chroma = new ChromaClient({ path: \"http://localhost:8000\" });\n\n// Create a collection\nconst collection = await chroma.createCollection({ name: \"my-collection\" });\n\n// Add documents to the collection\nawait collection.add({\n  ids: [\"id1\", \"id2\"],\n  embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4]],\n  metadatas: [{ source: \"doc1\" }, { source: \"doc2\" }],\n  documents: [\"Document 1 content\", \"Document 2 content\"],\n});\n\n// Query the collection\nconst results = await collection.query({\n  queryEmbeddings: [1.1, 2.3, 3.2],\n  nResults: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Collection in JavaScript\nDESCRIPTION: Demonstrates how to add data to a collection in JavaScript, including documents, metadata, and IDs. It also shows how to add pre-computed embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.add({\n    ids: [\"id1\", \"id2\", \"id3\", ...],\n    metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents: [\"lorem ipsum...\", \"doc2\", \"doc3\", ...],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.add({\n    ids: [\"id1\", \"id2\", \"id3\", ...],\n    embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents: [\"lorem ipsum...\", \"doc2\", \"doc3\", ...],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.add({\n    ids: [\"id1\", \"id2\", \"id3\", ...],\n    embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding and Adding Data to Chroma Collection\nDESCRIPTION: Embeds documents using OpenAI's embedding model and adds them to a Chroma collection. The snippet demonstrates the setup of collection parameters and multi-threaded batching for performance improvement.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncorpus_embeddings = openai_embed_in_batches(\n    openai_client=openai_client,\n    texts=corpus_documents,\n    model=\"text-embedding-3-large\",\n)\n\ncorpus_collection = chroma_client.get_or_create_collection(\n    name=COLLECTION_NAME,\n    metadata={\"hnsw:space\": \"cosine\"}\n)\n\ncollection_add_in_batches(\n    collection=corpus_collection,\n    ids=corpus_ids,\n    texts=corpus_documents,\n    embeddings=corpus_embeddings,\n)\n\ncorpus = {\n    id: {\n        'document': document,\n        'embedding': embedding\n    }\n    for id, document, embedding in zip(corpus_ids, corpus_documents, corpus_embeddings)\n}\n```\n\n----------------------------------------\n\nTITLE: List Databases in Chroma\nDESCRIPTION: This function lists databases for a given tenant with optional limit and offset parameters for pagination.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef list_databases(limit: Optional[int] = None, offset: Optional[int] = None, tenant: str = DEFAULT_TENANT) -> Sequence[Database]\n```\n\n----------------------------------------\n\nTITLE: Creating a Chroma Collection with Custom HNSW Settings in Python\nDESCRIPTION: This code demonstrates how to create a Chroma collection with custom HNSW configuration settings in Python, specifically setting the distance function to cosine similarity and defining the search_ef parameter value.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/configure.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection = client.create_collection(\n    name=\"my_collection\", \n    embedding_function=emb_fn,\n    metadata={\n        \"hnsw:space\": \"cosine\",\n        \"hnsw:search_ef\": 100\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic ChromaDB Client Usage with Explicit Embeddings\nDESCRIPTION: Example of initializing the ChromaDB client, creating a collection, adding documents with explicit embeddings, and querying the collection with embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb-client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChromaClient } from \"chromadb-client\";\n\n// Initialize the client\nconst chroma = new ChromaClient({ path: \"http://localhost:8000\" });\n\n// Create a collection\nconst collection = await chroma.createCollection({ name: \"my-collection\" });\n\n// Add documents to the collection\nawait collection.add({\n  ids: [\"id1\", \"id2\"],\n  embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4]],\n  metadatas: [{ source: \"doc1\" }, { source: \"doc2\" }],\n  documents: [\"Document 1 content\", \"Document 2 content\"],\n});\n\n// Query the collection\nconst results = await collection.query({\n  queryEmbeddings: [1.1, 2.3, 3.2],\n  nResults: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Preparing a Test Case for RAG Evaluation with Chroma\nDESCRIPTION: This example demonstrates how to create a test case for evaluating a Chroma-based retrieval system. It shows how to implement a Chroma retriever function, execute a query, and create an LLMTestCase with the necessary components for evaluation.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/deepeval.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n...\n\ndef chroma_retriever(query):\n    query_embedding = model.encode(query).tolist() # Replace with your embedding model\n    res = collection.query(\n        query_embeddings=[query_embedding],\n        n_results=3\n    )\n    return res[\"metadatas\"][0][0][\"text\"]\n\nquery = \"How does Chroma work?\"\nretrieval_context = search(query)\nactual_output = generate(query, retrieval_context)  # Replace with your LLM function\n\ntest_case = LLMTestCase(\n    input=query,\n    retrieval_context=retrieval_context,\n    actual_output=actual_output\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Chroma Client\nDESCRIPTION: Returns a running Chroma API instance with optional tenant and database specification. Provides a default client for general database interactions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef Client(settings: Settings = __settings,\n           tenant: str = DEFAULT_TENANT,\n           database: str = DEFAULT_DATABASE) -> ClientAPI\n```\n\n----------------------------------------\n\nTITLE: Starting Chroma Server via CLI\nDESCRIPTION: Command to start a Chroma server instance using the CLI with a specified database path\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/chroma-server/client-server-mode.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nchroma run --path /db_path\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Python\nDESCRIPTION: This snippet explains how to update various properties of records in a Chroma collection using the `.update` method, including embeddings, metadata, and documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ncollection.update(\n    ids=[\"id1\", \"id2\", \"id3\", ...],\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    documents=[\"doc1\", \"doc2\", \"doc3\", ...],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Chroma\nDESCRIPTION: Installs necessary Python libraries for working with Chroma, embeddings, and dataset processing\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/start_here.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -Uq chromadb numpy datasets tqdm ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Changing Distance Function in JavaScript\nDESCRIPTION: Shows how to customize the distance method of the embedding space when creating a collection in JavaScript by setting the 'hnsw:space' metadata.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet collection = client.createCollection({\n  name: \"collection_name\",\n  metadata: { \"hnsw:space\": \"cosine\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Embedding Function\nDESCRIPTION: This snippet sets up an OpenAI embedding function using the specified API key and model name. It requires the OpenAI package to be installed.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nopenai_ef = embedding_functions.OpenAIEmbeddingFunction(\n    api_key=\"OPENAI_KEY\", # Replace with your own OpenAI API key\n    model_name=\"text-embedding-ada-002\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Image Data to Chroma Collection in Python\nDESCRIPTION: This snippet adds image data to the Chroma collection using image URIs. The data loader and embedding functions specified earlier automatically ingest data from the provided URIs.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/multimodal/multimodal_retrieval.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get the uris to the images\nimage_uris = sorted([os.path.join(IMAGE_FOLDER, image_name) for image_name in os.listdir(IMAGE_FOLDER)])\nids = [str(i) for i in range(len(image_uris))]\n\ncollection.add(ids=ids, uris=image_uris)\n```\n\n----------------------------------------\n\nTITLE: Create Tenant in Chroma\nDESCRIPTION: This function creates a new tenant with the given name. An error will be raised if the tenant already exists.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef create_tenant(name: str) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating a Chroma Collection with Custom HNSW Settings in TypeScript\nDESCRIPTION: This code demonstrates how to create a Chroma collection with custom HNSW configuration settings in TypeScript, specifically setting the distance function to cosine similarity and defining the search_ef parameter value.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/configure.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet collection = await client.createCollection({\n    name: \"my_collection\",\n    embeddingFunction: emb_fn,\n    metadata: {\n        \"hnsw:space\": \"cosine\",\n        \"hnsw:search_ef\": 100\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Returned Data Fields in Chroma Queries\nDESCRIPTION: Specify which data fields to include in the results of get or query operations. By default, documents, metadatas, and distances (for queries) are returned, but this can be customized using the include parameter.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/query-and-get.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Only get documents and ids\ncollection.get(\n    include=[\"documents\"]\n)\n\ncollection.query(\n    query_embeddings=[[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],\n    include=[\"documents\"]\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Only get documents and ids\nawait collection.get({\n    include: [\"documents\"]\n})\n\nawait collection.query({\n    query_embeddings: [[11.1, 12.1, 13.1], [1.1, 2.3, 3.2], ...],\n    include: [\"documents\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Evaluating RAG System with Contextual Metrics\nDESCRIPTION: Code for evaluating Chroma retrieval using DeepEval's contextual metrics. It imports necessary metrics for precision, recall, and relevancy, then runs the evaluation on the test case to measure retrieval performance.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/deepeval.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deepeval.metrics import (\n    ContextualPrecisionMetric,\n    ContextualRecallMetric,\n    ContextualRelevancyMetric\n)\nfrom deepeval import evaluate\n...\n\nevaluate(\n    [test_case],\n    [\n        ContextualPrecisionMetric(),\n        ContextualRecallMetric(),\n        ContextualRelevancyMetric(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items by ID from Chroma Collections\nDESCRIPTION: Retrieve specific items from a Chroma collection by their IDs. Also supports filtering by metadata and document content, and will return all matching items if no IDs are provided.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/query-and-get.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(\n\tids=[\"id1\", \"id2\", \"id3\", ...],\n\twhere={\"style\": \"style1\"}\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.get( {\n    ids: [\"id1\", \"id2\", \"id3\", ...],\n    where: {\"style\": \"style1\"}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using OpenAI Embedding Collection\nDESCRIPTION: This snippet creates a Chroma collection using the OpenAI embedding function, adds documents to it, and performs a query. It demonstrates the basic workflow of using a custom embedding function with Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nopenai_collection = client.get_or_create_collection(name=\"openai_embeddings\", embedding_function=openai_ef)\n\nopenai_collection.add(\n    documents=[\"This is a document\", \"This is another document\"],\n    metadatas=[{\"source\": \"my_source\"}, {\"source\": \"my_source\"}],\n    ids=[\"id1\", \"id2\"]\n)\n\nresults = openai_collection.query(\n    query_texts=[\"This is a query document\"],\n    n_results=2\n)\nresults\n```\n\n----------------------------------------\n\nTITLE: Adding Embeddings and Metadata to Chroma Collection in Python\nDESCRIPTION: This snippet demonstrates how to add only embeddings and metadata to a Chroma collection using Python, without storing the actual documents. It includes embeddings, metadata, and IDs. This approach is useful when documents are stored elsewhere.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/add-data.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    embeddings=[[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n    metadatas=[{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n    ids=[\"id1\", \"id2\", \"id3\", ...]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Javascript\nDESCRIPTION: This snippet shows how to update records in a Chroma collection with Javascript, using methods that allow changes to embeddings, metadata, and documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.update(\n    {\n      ids: [\"id1\", \"id2\", \"id3\", ...],\n      embeddings: [[1.1, 2.3, 3.2], [4.5, 6.9, 4.4], [1.1, 2.3, 3.2], ...],\n      metadatas: [{\"chapter\": \"3\", \"verse\": \"16\"}, {\"chapter\": \"3\", \"verse\": \"5\"}, {\"chapter\": \"29\", \"verse\": \"11\"}, ...],\n      documents: [\"doc1\", \"doc2\", \"doc3\", ...],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Items in Collection in TypeScript\nDESCRIPTION: This snippet shows how to upsert items into a collection using the 'upsert' method with parameters encapsulated in an 'AddRecordsParams' object. It returns a promise resolving with void, indicating the completion of the upsert operation.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await collection.upsert({\n  ids: [\"id1\", \"id2\"],\n  embeddings: [[1, 2, 3], [4, 5, 6]],\n  metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n  documents: [\"document1\", \"document2\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HuggingFace Embedding Function\nDESCRIPTION: This snippet sets up a HuggingFace embedding function using the specified API key and model name. It requires a HuggingFace API key.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhuggingface_ef = embedding_functions.HuggingFaceEmbeddingFunction(\n    api_key=\"HUGGINGFACE_API_KEY\", # Replace with your own HuggingFace API key\n    model_name=\"sentence-transformers/all-MiniLM-L6-v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Image Search with Text Query\nDESCRIPTION: Execute a search query using a text prompt, retrieve top matching image results based on CLIP embeddings, and visualize the most similar image.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/roboflow/embeddings.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery = \"baseball\"\n\nresults = collection.query(\n    n_results=3,\n    query_texts=query\n)\ntop_result = results[\"metadatas\"][0][0][\"file\"]\n\nsv.plot_image(cv2.imread(top_result))\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Chroma Collection in Python\nDESCRIPTION: This snippet adds embeddings, metadata, documents, and IDs to the Chroma collection. The 'embeddings' parameter takes a list of embedding vectors, 'metadatas' includes associated metadata, 'documents' contains document data, and 'ids' assigns unique identifiers to each entry. The function facilitates data organization within the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/local_persistence.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Add some data to the collection\ncollection.add(\n    embeddings=[\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n    ],\n    metadatas=[\n        {\"uri\": \"img1.png\", \"style\": \"style1\"},\n        {\"uri\": \"img2.png\", \"style\": \"style2\"},\n        {\"uri\": \"img3.png\", \"style\": \"style1\"},\n        {\"uri\": \"img4.png\", \"style\": \"style1\"},\n        {\"uri\": \"img5.png\", \"style\": \"style1\"},\n        {\"uri\": \"img6.png\", \"style\": \"style1\"},\n        {\"uri\": \"img7.png\", \"style\": \"style1\"},\n        {\"uri\": \"img8.png\", \"style\": \"style1\"},\n    ],\n    documents=[\"doc1\", \"doc2\", \"doc3\", \"doc4\", \"doc5\", \"doc6\", \"doc7\", \"doc8\"],\n    ids=[\"id1\", \"id2\", \"id3\", \"id4\", \"id5\", \"id6\", \"id7\", \"id8\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Running Chroma with a persistent backend and client\nDESCRIPTION: Commands for starting a persistent Chroma server and connecting to it with an HTTP client.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/DEVELOP.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchroma run --path /chroma_db_path\n```\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\napi = chromadb.HttpClient(host=\"localhost\", port=\"8000\")\n\nprint(api.heartbeat())\n```\n\n----------------------------------------\n\nTITLE: Logical AND Operator for Metadata Filtering in Python\nDESCRIPTION: Demonstrates how to use the $and operator to combine multiple metadata filters, where all conditions must be met for a result to be returned.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/metadata-filtering.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"$and\": [\n        {\n            \"metadata_field\": {\n                <Operator>: <Value>\n            }\n        },\n        {\n            \"metadata_field\": {\n                <Operator>: <Value>\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Python\nDESCRIPTION: Code to create a named collection in Chroma using Python. Collections store embeddings, documents, and metadata.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncollection = chroma_client.create_collection(name=\"my_collection\")\n```\n\n----------------------------------------\n\nTITLE: Setting up ChromaDB HTTP Client in Python\nDESCRIPTION: Example of how to set up the ChromaDB HTTP client in Python. It demonstrates both synchronous and asynchronous client initialization to connect to a Chroma server.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/chroma-server/python-thin-client.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport chromadb\n# Example setup of the client to connect to your chroma server\nclient = chromadb.HttpClient(host='localhost', port=8000)\n\n# Or for async usage:\nasync def main():\n    client = await chromadb.AsyncHttpClient(host='localhost', port=8000)\n```\n\n----------------------------------------\n\nTITLE: ChromaDB Multilingual with Cohere Embeddings\nDESCRIPTION: Demonstrates the multilingual capabilities of Cohere with ChromaDB. It initializes the CohereEmbeddingFunction with the API key and the `multilingual-22-12` model, creates a ChromaDB collection named `cohere_multilingual`, adds documents in various languages to the collection, and queries it in English.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/cohere/cohere_python.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"cohere_mutlilingual = embedding_functions.CohereEmbeddingFunction(\n        api_key=os.environ[\\\"COHERE_API_KEY\\\"], \n        model_name=\\\"multilingual-22-12\\\")\n\n# 나는 오렌지를 좋아한다 is \\\"I like oranges\\\" in Korean\nmultilingual_texts = [ 'Hello from Cohere!', 'مرحبًا من كوهير!', \n        'Hallo von Cohere!', 'Bonjour de Cohere!', \n        '¡Hola desde Cohere!', 'Olá do Cohere!', \n        'Ciao da Cohere!', '您好，来自 Cohere！',\n        'कोहेरे से नमस्ते!', '나는 오렌지를 좋아한다'  ]\n\ncollection = client.create_collection(\\\"cohere_multilingual\\\", embedding_function=cohere_mutlilingual)\n\ncollection.add(\n    ids=[str(i) for i in range(len(multilingual_texts))],\n    documents=multilingual_texts\n)\n\nprint(collection.query(query_texts=[\\\"citrus\\\"], n_results=1))\"\n```\n\n----------------------------------------\n\nTITLE: Starting Chroma Docker Container\nDESCRIPTION: Command to run a Chroma server in a Docker container, mapping a local directory for data storage and exposing port 8000.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ndocker run -v ./chroma-data:/data -p 8000:8000 chromadb/chroma\n```\n\n----------------------------------------\n\nTITLE: Deleting Items from Chroma Collection in JavaScript\nDESCRIPTION: This snippet shows how to delete items from a Chroma collection using JavaScript. It supports deleting by specific IDs and uses a where filter to delete items matching certain conditions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.delete({\n    ids: [\"id1\", \"id2\", \"id3\",...], //ids\n\twhere: {\"chapter\": \"20\"} //where\n})\n```\n\n----------------------------------------\n\nTITLE: ChromaDB with Cohere Embeddings\nDESCRIPTION: Creates a ChromaDB collection using Cohere embeddings. It initializes the CohereEmbeddingFunction with the API key and the `large` model, then creates a ChromaDB client and a collection named `cohere_python` using the Cohere embedding function. Finally, it adds documents to the collection and queries it.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/cohere/cohere_python.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"import chromadb\nfrom chromadb.utils import embedding_functions\n\ncohere_ef = embedding_functions.CohereEmbeddingFunction(api_key=os.environ[\\\"COHERE_API_KEY\\\"],  model_name=\\\"large\\\")\n\nclient = chromadb.Client()\ncollection = client.create_collection(\\\"cohere_python\\\", embedding_function=cohere_ef)\n\ncollection.add(\n    ids=[\\\"1\\\", \\\"2\\\", \\\"3\\\"],\n    documents=[\\\"I like apples\\\", \\\"I like bananas\\\", \\\"I like oranges\\\"],\n    metadatas=[{\\\"fruit\\\": \\\"apple\\\"}, {\\\"fruit\\\": \\\"banana\\\"}, {\\\"fruit\\\": \\\"orange\\\"}],\n)\n\nprint(collection.query(query_texts=[\\\"citrus\\\"], n_results=1))\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in TypeScript\nDESCRIPTION: Code to create a named collection in Chroma using TypeScript. The function returns a Promise that resolves to the collection object.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await client.createCollection({\n  name: \"my_collection\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using JinaAI Embedding Function in TypeScript\nDESCRIPTION: This snippet shows how to create and use a JinaAI embedding function in TypeScript. It demonstrates generating embeddings directly and using the embedding function with Chroma collections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/jina-ai.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JinaEmbeddingFunction } from 'chromadb';\n\nconst embedder = new JinaEmbeddingFunction({\n  jinaai_api_key: 'jina_****',\n  model_name: 'jina-embeddings-v2-base-en',\n});\n\n// use directly\nconst embeddings = embedder.generate(['document1', 'document2']);\n\n// pass documents to query for .add and .query\nconst collection = await client.createCollection({name: \"name\", embeddingFunction: embedder})\nconst collectionGet = await client.getCollection({name:\"name\", embeddingFunction: embedder})\n```\n\n----------------------------------------\n\nTITLE: Initializing PersistentClient with Custom Settings in Python\nDESCRIPTION: This snippet initializes a PersistentClient with custom settings, allowing users to disable anonymized telemetry. This setup is critical for users who wish to control their telemetry preferences while using Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb.config import Settings\nclient = chromadb.PersistentClient(\n    path=\"/path/to/persist/directory\",\n    settings=Settings(anonymized_telemetry=False))\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Collection in TypeScript\nDESCRIPTION: This snippet demonstrates how to add items to a collection using the 'add' method. It requires parameters like 'ids', 'embeddings', 'metadatas', and 'documents', encapsulated in an 'AddRecordsParams' object. This operation returns a promise that resolves with void, indicating the add operation's completion.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await collection.add({\n  ids: [\"id1\", \"id2\"],\n  embeddings: [[1, 2, 3], [4, 5, 6]],\n  metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n  documents: [\"document1\", \"document2\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Chroma Collection in Python\nDESCRIPTION: This snippet illustrates querying the Chroma collection based on a set of query embeddings and retrieving a specified number of results. The 'query_embeddings' parameter specifies the search criteria, while 'n_results' sets the maximum number of results to return. The results are then printed, displaying the relevant data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/local_persistence.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Query the collection\nresults = collection.query(\n    query_embeddings=[[1.1, 2.3, 3.2]],\n    n_results=1\n)\n\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Embedding Function in Python\nDESCRIPTION: Defines a custom embedding function class that implements the EmbeddingFunction protocol for use with Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/embeddings-guide.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb import Documents, EmbeddingFunction, Embeddings\n\nclass MyEmbeddingFunction(EmbeddingFunction):\n    def __call__(self, input: Documents) -> Embeddings:\n        # embed the documents somehow\n        return embeddings\n```\n\n----------------------------------------\n\nTITLE: Exclusion Operator ($nin) for Metadata Filtering in JSON\nDESCRIPTION: Shows how to use the $nin operator to filter metadata by excluding a list of values. This returns results where the metadata field does not match any value in the provided list.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/metadata-filtering.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata_field\": {\n    \"$nin\": [\"value1\", \"value2\", \"value3\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying by Texts in Python\nDESCRIPTION: This snippet presents a method for querying a collection by providing a set of query texts. It illustrates the way to embed texts using the collection's embedding function, including additional filtering options.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(\n    query_texts=[\"doc10\", \"thus spake zarathustra\", ...],\n    n_results=10,\n    where={\"metadata_field\": \"is_equal_to_this\"},\n    where_document={\"$contains\":\"search_string\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Chroma Multimodal Collection with URIs in Python\nDESCRIPTION: This code shows how to query the multimodal collection using URIs. It uses an image URI to retrieve and display similar images from the collection, demonstrating that query URIs don't necessarily have to be in the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/multimodal/multimodal_retrieval.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nquery_uri = image_uris[1]\n\nquery_result = collection.query(query_uris=query_uri, include=['data'], n_results=5)\nfor img in query_result['data'][0][1:]:\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Embedding Function in Python\nDESCRIPTION: Creates an instance of the default embedding function in Chroma, which uses the Sentence Transformers 'all-MiniLM-L6-v2' model.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/embeddings-guide.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils import embedding_functions\ndefault_ef = embedding_functions.DefaultEmbeddingFunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma Ephemeral Client in Python\nDESCRIPTION: Creates an in-memory Chroma server and returns a client connected to it. This approach doesn't persist data but is useful for experimentation and testing embedding functions or retrieval techniques in notebooks.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/ephemeral-client.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.Client()\n```\n\n----------------------------------------\n\nTITLE: Creating an In-Memory Ephemeral Chroma Client\nDESCRIPTION: Creates an in-memory instance of Chroma for testing and development purposes. Useful for temporary data storage that does not persist between sessions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef EphemeralClient(settings: Optional[Settings] = None,\n                    tenant: str = DEFAULT_TENANT,\n                    database: str = DEFAULT_DATABASE) -> ClientAPI\n```\n\n----------------------------------------\n\nTITLE: Querying by Texts in Javascript\nDESCRIPTION: This snippet illustrates querying a collection in Chroma using Javascript, with a focus on text-based queries and the optional filtering by metadata fields.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.query({\n    nResults: 10, // n_results\n    where: {\"metadata_field\": \"is_equal_to_this\"}, // where\n    queryTexts: [\"doc10\", \"thus spake zarathustra\", ...], // query_text\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Chroma Server with Docker Compose\nDESCRIPTION: This code snippet provides instructions to start the Chroma server using Docker Compose, configured to use basic authentication with environment variables stored in a .env file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/auth.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CHROMA_USER=admin\nexport CHROMA_PASSWORD=admin\ndocker run --rm --entrypoint htpasswd httpd:2 -Bbn ${CHROMA_USER} ${CHROMA_PASSWORD} > server.htpasswd\ncat << EOF > .env\nCHROMA_SERVER_AUTH_CREDENTIALS_FILE=\"/chroma/server.htpasswd\"\nCHROMA_SERVER_AUTH_PROVIDER=\"chromadb.auth.basic_authn.BasicAuthenticationServerProvider\"\nEOF\ndocker-compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Updating Items in Collection in TypeScript\nDESCRIPTION: This snippet exemplifies updating items in the collection using the 'update' method. Parameters are provided in an 'UpdateRecordsParams' object. The promise resolves with void, indicating the successful update of the items.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await collection.update({\n  ids: [\"id1\", \"id2\"],\n  embeddings: [[1, 2, 3], [4, 5, 6]],\n  metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n  documents: [\"document1\", \"document2\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Chroma Multimodal Collection with Images in Python\nDESCRIPTION: This snippet demonstrates querying the multimodal collection using images. It loads a query image, displays it, and then retrieves and shows similar images from the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/multimodal/multimodal_retrieval.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom PIL import Image\nimport numpy as np\n\nquery_image = np.array(Image.open(f\"{IMAGE_FOLDER}/1.jpg\"))\nprint(\"Query Image\")\nplt.imshow(query_image)\nplt.axis('off')\nplt.show()\n\nprint(\"Results\")\nretrieved = collection.query(query_images=[query_image], include=['data'], n_results=5)\nfor img in retrieved['data'][0][1:]:\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Querying a Multimodal Collection with Text in Python\nDESCRIPTION: Demonstrates querying a multimodal collection using text data. This allows finding items in the collection that are semantically similar to the provided text queries.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_texts=[\"This is a query document\", \"This is another query document\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Persistent Client in Python\nDESCRIPTION: Creates a PersistentClient instance in Python that automatically saves and loads the database from a specified path. If no path is provided, it defaults to '.chroma'.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/persistent-client.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.PersistentClient(path=\"/path/to/save/to\")\n```\n\n----------------------------------------\n\nTITLE: Starting Chroma Server from Terminal\nDESCRIPTION: Command to start the Chroma server process, specifying the database path.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/client-server.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nchroma run --path /db_path\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server using Python HTTP Client\nDESCRIPTION: Python code to instantiate a synchronous HTTP client for connecting to the Chroma server. This allows the API to run in client-server mode.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/client-server.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nchroma_client = chromadb.HttpClient(host='localhost', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Counting Embeddings in Python\nDESCRIPTION: This method returns the total count of embeddings added to the database. It provides a simple way to monitor the number of stored embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef count() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating a Collection - TypeScript\nDESCRIPTION: Retrieves a collection if it exists or creates a new one using the getOrCreateCollection method. Returns a promise resolving to the fetched or created collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await client.getOrCreateCollection({\n  name: \"my_collection\",\n  metadata: {\n    \"description\": \"My first collection\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Embedding Function in JavaScript\nDESCRIPTION: Defines a custom embedding function class with a generate method for use with Chroma in JavaScript.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/embeddings-guide.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyEmbeddingFunction {\n  private api_key: string;\n\n  constructor(api_key: string) {\n    this.api_key = api_key;\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    // do things to turn texts into embeddings with an api_key perhaps\n    return embeddings;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Items in Collection in TypeScript\nDESCRIPTION: This snippet shows how to delete items from a collection using the 'delete' method with optional parameters encoded in a 'DeleteParams' object. It returns a promise that resolves to an array of string IDs of the deleted items and throws an error if the deletion encounters an issue.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await collection.delete({\n  ids: \"some_id\",\n  where: {\"name\": {\"$eq\": \"John Doe\"}},\n  whereDocument: {\"$contains\":\"search_string\"}\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma HTTP Client\nDESCRIPTION: Command to install the lightweight HTTP-only client package for Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/python-http-client.md#2025-04-11_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\npip install chromadb-client\n```\n\n----------------------------------------\n\nTITLE: Starting Chroma Server with Basic Authentication\nDESCRIPTION: The code snippet shows how to start a Chroma server instance configured to use basic authentication leveraging Docker, using environment variables to set authentication parameters such as username and password.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/auth.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CHROMA_USER=admin\nexport CHROMA_PASSWORD=admin\ndocker run --rm --entrypoint htpasswd httpd:2 -Bbn ${CHROMA_USER} ${CHROMA_PASSWORD} > server.htpasswd\nCHROMA_SERVER_AUTHN_CREDENTIALS_FILE=\"./server.htpasswd\" \\\nCHROMA_SERVER_AUTHN_PROVIDER=\"chromadb.auth.basic_authn.BasicAuthenticationServerProvider\" \\\nuvicorn chromadb.app:app --workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config log_config.yml\n```\n\n----------------------------------------\n\nTITLE: Getting a Collection - TypeScript\nDESCRIPTION: Retrieves a collection by name using the getCollection method. Returns a promise resolving to the requested collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await client.getCollection({\n  name: \"my_collection\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Chroma Vector Database\nDESCRIPTION: Load images from a specified directory, generate unique identifiers, and add images to the Chroma collection with their file paths as metadata.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/roboflow/embeddings.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nIMAGE_DIR = dataset.location + \"/train/images\"\n\ndocuments = [os.path.join(IMAGE_DIR, img) for img in os.listdir(IMAGE_DIR)]\nuris = [os.path.join(IMAGE_DIR, img) for img in os.listdir(IMAGE_DIR)]\nids = [str(uuid.uuid4()) for _ in range(len(documents))]\n\ncollection.add(\n    uris=uris,\n    ids=ids,\n    metadatas=[{\"file\": file} for file in documents]\n)\n```\n\n----------------------------------------\n\nTITLE: Querying a Multimodal Collection with URIs in Python\nDESCRIPTION: Shows how to query a collection using URIs that reference externally stored data. This requires a data loader to be set for the collection to interpret the URI data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_uris=[...] # A list of strings representing URIs to data\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Embedding Function for Azure in Python\nDESCRIPTION: This snippet shows how to set up the OpenAI embedding function to work with Azure or other platforms. It includes additional parameters for API base path, type, and version.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/openai.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb.utils.embedding_functions as embedding_functions\nopenai_ef = embedding_functions.OpenAIEmbeddingFunction(\n                api_key=\"YOUR_API_KEY\",\n                api_base=\"YOUR_API_BASE_PATH\",\n                api_type=\"azure\",\n                api_version=\"YOUR_API_VERSION\",\n                model_name=\"text-embedding-3-small\"\n            )\n```\n\n----------------------------------------\n\nTITLE: Configuring Python HTTP Client\nDESCRIPTION: Setting up the Python HTTP client to connect to a Chroma server\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nchroma_client = chromadb.HttpClient(host='localhost', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Querying by Embeddings in Javascript\nDESCRIPTION: This snippet showcases the process of querying a Chroma collection in Javascript using the `.queryRecords` method. It includes parameters for query embeddings, number of results, and metadata filtering.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await collection.query({\n    queryEmbeddings: [[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],\n    nResults: 10,\n    where: {\"metadata_field\": \"is_equal_to_this\"},\n})\n// input order\n// queryEmbeddings - optional, exactly one of queryEmbeddings and queryTexts must be provided\n// queryTexts - optional\n// n_results - required\n// where - optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Client Settings\nDESCRIPTION: Override Chroma's default settings, environment variables, or .env files. This function allows customization of Chroma's configuration parameters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef configure(**kwargs) -> None\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Token Authentication in Chroma Client with Python\nDESCRIPTION: This code shows how to configure the Chroma client to use token-based authentication in Python by setting a token in the settings, which is used in every request to authenticate against the server.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/auth.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb import Settings\n\n# Adds a header {\"Authorization\": \"Bearer test-token\"} to all requests\nclient = chromadb.HttpClient(\n    settings=Settings(chroma_client_auth_provider=\"token\", chroma_client_auth_credentials=\"test-token\"))\nclient.heartbeat()  # this should work with or without authentication - it is a public endpoint\n\nclient.get_version()  # this should work with or without authentication - it is a public endpoint\n\nclient.list_collections()  # this is a protected endpoint and requires authentication\n\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFace Embedding Function in Chroma\nDESCRIPTION: Creates a HuggingFace embedding function instance using an API key and optional model name. The default model is 'sentence-transformers/all-MiniLM-L6-v2'. Requires a HuggingFace API key obtained through account registration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/hugging-face.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb.utils.embedding_functions as embedding_functions\nhuggingface_ef = embedding_functions.HuggingFaceEmbeddingFunction(\n    api_key=\"YOUR_API_KEY\",\n    model_name=\"sentence-transformers/all-MiniLM-L6-v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from Collection in TypeScript\nDESCRIPTION: This snippet demonstrates how to get items from a collection using the 'get' method with parameters encapsulated in a 'BaseGetParams' object. It returns a promise that resolves to a 'MultiGetResponse', containing the query results.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await collection.get({\n  ids: [\"id1\", \"id2\"],\n  where: { \"key\": \"value\" },\n  limit: 10,\n  offset: 0,\n  include: [\"embeddings\", \"metadatas\", \"documents\"],\n  whereDocument: { $contains: \"value\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Optimized HNSW Library for ChromaDB\nDESCRIPTION: This command builds a Docker image for ChromaDB with the HNSW library rebuilt from source to take advantage of CPU-specific optimizations. It uses the --build-arg flag to enable HNSW rebuilding and --no-cache to ensure a fresh build.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/advanced/hadrware-optimized-image.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t chroma-test1 --build-arg REBUILD_HNSWLIB=true --no-cache .\n```\n\n----------------------------------------\n\nTITLE: Delete Database in Chroma\nDESCRIPTION: This function deletes a database and all associated collections. An error will be raised if the database does not exist.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef delete_database(name: str, tenant: str = DEFAULT_TENANT) -> None\n```\n\n----------------------------------------\n\nTITLE: Adding Data via URI to Multimodal Collection in Chroma\nDESCRIPTION: Adds data to a multimodal collection using URIs, requiring a specified data loader.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    ids=['id1', 'id2', 'id3'],\n    uris=[...] #  A list of strings representing URIs to data\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromaDB Client in JavaScript\nDESCRIPTION: Example of how to initialize the ChromaDB client in JavaScript using the chromadb-client package. It shows how to create a new ChromaClient instance with a specified server path.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/chroma-server/python-thin-client.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nimport { ChromaClient } from \"chromadb-client\";\nconst client = new ChromaClient({ path: \"http://localhost:8000\" })\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma HTTP Client in Python\nDESCRIPTION: Python code to initialize a Chroma HTTP client with the IP address of the AWS instance and the default port.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nchroma_client = chromadb.HttpClient(\n    host=\"<Your Chroma instance IP>\",\n    port=8000\n)\nchroma_client.heartbeat()\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to a Collection in TypeScript\nDESCRIPTION: Code to add text documents to a Chroma collection in TypeScript. Each document requires a unique ID, and Chroma handles embedding automatically.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait collection.add({\n    documents: [\n        \"This is a document about pineapple\",\n        \"This is a document about oranges\",\n    ],\n    ids: [\"id1\", \"id2\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Embedding and Negative Content Filter\nDESCRIPTION: Shows how to query for vectors excluding documents with specific content.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(query_embeddings=[[0, 0, 0]], where_document={\"$not_contains\": \"domestic policy\"}, n_results=5)\n```\n\n----------------------------------------\n\nTITLE: Adding Image Data to a Multimodal Collection in Python\nDESCRIPTION: Demonstrates how to add image data directly to a multimodal collection using the add method with the images parameter. The images should be provided as numpy arrays representing the image data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    ids=['id1', 'id2', 'id3'],\n    images=[...] # A list of numpy arrays representing images\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Embedding Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize and use the OpenAI embedding function in TypeScript, including direct usage for generating embeddings and passing it to Chroma collections for document operations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/openai.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIEmbeddingFunction } from 'chromadb';\n\nconst embeddingFunction = new OpenAIEmbeddingFunction({\n    openai_api_key: \"apiKey\",\n    openai_model: \"text-embedding-3-small\"\n})\n\n// use directly\nconst embeddings = embeddingFunction.generate([\"document1\",\"document2\"])\n\n// pass documents to query for .add and .query\nlet collection = await client.createCollection({\n    name: \"name\",\n    embeddingFunction: embeddingFunction\n})\ncollection = await client.getCollection({\n    name: \"name\",\n    embeddingFunction: embeddingFunction\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Chroma and Setting Up Client\nDESCRIPTION: This snippet imports the Chroma library and initializes a client for interacting with the Chroma database.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.Client()\n```\n\n----------------------------------------\n\nTITLE: Python HTTP-only Client Setup\nDESCRIPTION: Installation and configuration of the lightweight HTTP-only client for Python\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install chromadb-client\n```\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n# Example setup of the client to connect to your chroma server\nclient = chromadb.HttpClient(host='localhost', port=8000)\n\n# Or for async usage:\nasync def main():\n    client = await chromadb.AsyncHttpClient(host='localhost', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Creating Golden Dataset for Benchmarking\nDESCRIPTION: Leverages filtered documents to generate a golden dataset using predefined context and queries. This dataset is critical for evaluating the effectiveness of the embedding model, providing baseline queries against the data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ngolden_dataset = create_golden_dataset(\n    client=openai_client,\n    model=\"gpt-4o\",\n    documents=passed_documents,\n    ids=filtered_document_ids,\n    context=context,\n    example_queries=example_queries\n)\n\ngolden_dataset.head()\n```\n\n----------------------------------------\n\nTITLE: Set Database for Chroma Client\nDESCRIPTION: This function sets the database for the Chroma client. An error will be raised if the specified database does not exist.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef set_database(database: str) -> None\n```\n\n----------------------------------------\n\nTITLE: Filtering with OR Logical Operator\nDESCRIPTION: Demonstrates the use of the $or operator to filter documents based on multiple author conditions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient = chromadb.Client()\ncollection = client.get_or_create_collection(\"test-where-list\")\ncollection.add(documents=[\"Article by john\", \"Article by Jack\", \"Article by Jill\"],\n               metadatas=[{\"author\": \"john\"}, {\"author\": \"jack\"}, {\"author\": \"jill\"}], ids=[\"1\", \"2\", \"3\"])\n\ncollection.get(where={\"$or\": [{\"author\": \"john\"}, {\"author\": \"jack\"}]})\n```\n\n----------------------------------------\n\nTITLE: Adding Text Data to Multimodal Collection in Chroma\nDESCRIPTION: Adds text documents to a multimodal collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    ids=['id4', 'id5', 'id6'],\n    documents=[\"This is a document\", \"This is another document\", \"This is a third document\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server in TypeScript\nDESCRIPTION: Creates a ChromaClient instance in TypeScript that connects to a locally running Chroma server for persistent storage.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/persistent-client.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\nconst client = new ChromaClient();\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Chroma Client in JavaScript\nDESCRIPTION: Shows how to import the ChromaClient in both CommonJS and ES6 module formats for JavaScript. This is required to interact with the Chroma server backend.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// CJS\nconst { ChromaClient } = require(\"chromadb\");\n\n// ESM\nimport { ChromaClient } from \"chromadb\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Chroma Client in Python\nDESCRIPTION: Code to import the chromadb module and create an in-memory Chroma client in Python.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nchroma_client = chromadb.Client()\n```\n\n----------------------------------------\n\nTITLE: Querying with Embedding and Content Filter\nDESCRIPTION: Demonstrates querying for the closest vectors to [0, 0, 0] that contain specific content, limited to 5 results.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(query_embeddings=[[0, 0, 0]], where_document={\"$contains\": \"affairs\"}, n_results=5)\n```\n\n----------------------------------------\n\nTITLE: Using Embedding Functions for Value Generation\nDESCRIPTION: Demonstrates how to generate embedding values for a text input using the default embedding function. Shows the direct usage pattern for debugging purposes.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/embedding-functions.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nval = default_ef([\"foo\"])\nprint(val) # [[0.05035809800028801, 0.0626462921500206, -0.061827320605516434...]]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst val = defaultEf.generate([\"foo\"]);\nconsole.log(val); // [[0.05035809800028801, 0.0626462921500206, -0.061827320605516434...]]\n```\n\n----------------------------------------\n\nTITLE: Multilingual Embedding with Cohere in TypeScript\nDESCRIPTION: Shows how to use Cohere's embedding functionality in TypeScript to generate embeddings for text in various languages, demonstrating Cohere's multilingual capabilities.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/cohere.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CohereEmbeddingFunction } from 'chromadb';\n\nconst embedder = new CohereEmbeddingFunction(\"apiKey\")\n\nmultilingual_texts  = [ 'Hello from Cohere!', 'مرحبًا من كوهير!',\n        'Hallo von Cohere!', 'Bonjour de Cohere!',\n        '¡Hola desde Cohere!', 'Olá do Cohere!',\n        'Ciao da Cohere!', '您好，来自 Cohere！',\n        'कोहिअर से नमस्ते!'  ]\n\nconst embeddings = embedder.generate(multilingual_texts)\n```\n\n----------------------------------------\n\nTITLE: Configuring OllamaEmbeddingFunction in Python\nDESCRIPTION: Creates a ChromaDB client with Ollama embedding function using the nomic-embed-text model and a custom endpoint\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/ollama.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb.utils.embedding_functions import OllamaEmbeddingFunction\n\nclient = chromadb.PersistentClient(path=\"ollama\")\n\n# create EF with custom endpoint\nef = OllamaEmbeddingFunction(\n    model_name=\"nomic-embed-text\",\n    url=\"http:\\/\\/127.0.0.1:11434\\/api\\/embeddings\",\n)\n\nprint(ef([\"Here is an article about llamas...\"]))\n```\n\n----------------------------------------\n\nTITLE: Viewing Document Filtering Results\nDESCRIPTION: Outputs the numbers of successful and failed document passes and shows examples from each set. This visualization aids in validating the filtering process results before proceeding.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Number of documents passed: {len(filtered_document_ids)}\")\nprint(f\"Number of documents failed: {len(failed_document_ids)}\")\nprint(\"-\"*80)\nprint(\"Example of passed document:\")\nprint(corpus[filtered_document_ids[0]]['document'])\nprint(\"-\"*80)\nprint(\"Example of failed document:\")\nprint(corpus[failed_document_ids[0]]['document'])\nprint(\"-\"*80)\n```\n\n----------------------------------------\n\nTITLE: Get Tenant in Chroma\nDESCRIPTION: This function retrieves a tenant by name. Raises an error if the tenant does not exist.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef get_tenant(name: str) -> Tenant\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Metadata and Content Conditions\nDESCRIPTION: Demonstrates retrieving documents based on metadata status and document content.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(where={\"status\": \"read\"}, where_document={\"$contains\": \"affairs\"})\n```\n\n----------------------------------------\n\nTITLE: Querying Multimodal Collection with Text in Chroma\nDESCRIPTION: Performs a query on a multimodal collection using text data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_texts=[\"This is a query document\", \"This is another query document\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Instructor Embeddings with Custom Configuration\nDESCRIPTION: Shows how to initialize InstructorEmbeddingFunction with a custom model (XL) and CUDA GPU acceleration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/instructor.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb.utils.embedding_functions as embedding_functions\nef = embedding_functions.InstructorEmbeddingFunction(\nmodel_name=\"hkunlp/instructor-xl\", device=\"cuda\")\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Backend via Docker\nDESCRIPTION: Commands to pull and run the Chroma Docker image, exposing the service on port 8000.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\ndocker pull chromadb/chroma\ndocker run -p 8000:8000 chromadb/chroma\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Chroma Collections in Python\nDESCRIPTION: This snippet demonstrates how to create a persistent Chroma client, create or retrieve a collection, and then verify the collection's properties. It showcases basic operations with the Chroma database.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/test_get_collection_by_id.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.PersistentClient()\n\ncol = client.get_or_create_collection('test_collection')\nprint(col)\n\n\ncol1=client.get_collection(id=col.id)\n\nprint(col1.tenant)\nassert col1.id == col.id\n\nassert col1.tenant == col.tenant\nassert col1.name == col.name\nassert col1.database == col.database\nprint(col1.database)\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Server via CLI\nDESCRIPTION: This command runs a Chroma server locally using the Chroma CLI. It allows specifying a path for data persistence and offers additional customization options for host, port, and configuration file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/run.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nchroma run --path [/path/to/persist/data]\n```\n\n----------------------------------------\n\nTITLE: Initializing JinaAI Embedding Function in Python\nDESCRIPTION: This snippet demonstrates how to create a JinaAI embedding function in Python using Chroma's embedding_functions module. It requires an API key from JinaAI and allows specifying the model name.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/jina-ai.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb.utils.embedding_functions as embedding_functions\njinaai_ef = embedding_functions.JinaEmbeddingFunction(\n                api_key=\"YOUR_API_KEY\",\n                model_name=\"jina-embeddings-v2-base-en\"\n            )\njinaai_ef(input=[\"This is my first text to embed\", \"This is my second document\"])\n```\n\n----------------------------------------\n\nTITLE: Defining the Collection Class in Python\nDESCRIPTION: This snippet defines a class 'Collection' that inherits from 'BaseModel'. It serves as the blueprint for creating instances of collections which will manage embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Collection(BaseModel)\n```\n\n----------------------------------------\n\nTITLE: Starting Chroma Server\nDESCRIPTION: Commands for running Chroma in client-server mode using the CLI\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchroma run --path /db_path\n```\n\n----------------------------------------\n\nTITLE: Setting Document Quality Criteria\nDESCRIPTION: Defines criteria for filtering documents based on relevance and completeness before generating queries. The criteria are formulated as textual conditions used to evaluate document quality.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrelevance = f\"The document is relevant to the following context: {context}\"\ncompleteness = \"The document is complete, meaning that it contains useful information to answer queries and does not only serve as an introduction to the main content that users may be looking for.\"\n\ncriteria = [relevance, completeness]\ncriteria_labels = [\"relevance\", \"completeness\"]\n```\n\n----------------------------------------\n\nTITLE: Running Chroma and Accessing Swagger API Documentation\nDESCRIPTION: This snippet demonstrates how to install Chroma, run it, and open the Swagger REST API documentation in a web browser. It uses pip to install chromadb, runs the Chroma server, and opens the documentation URL.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/chroma-reference.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install chromadb\nchroma run\nopen http://localhost:8000/docs\n```\n\n----------------------------------------\n\nTITLE: Counting Collections - TypeScript\nDESCRIPTION: Counts all collections using the countCollections method. Returns a promise resolving to the number of collections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst collections = await client.countCollections();\n```\n\n----------------------------------------\n\nTITLE: Querying Multimodal Collection with URIs in Chroma\nDESCRIPTION: Performs a query on a multimodal collection using URIs, requiring a data loader.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_uris=[...] # A list of strings representing URIs to data\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing RoboflowEmbeddingFunction with API Key in Python\nDESCRIPTION: Creates a RoboflowEmbeddingFunction instance by directly passing the Roboflow API key. This approach allows for explicit credential management within the code.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/roboflow.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions import RoboflowEmbeddingFunction\n\nroboflow_ef = RoboflowEmbeddingFunction(api_key=API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Backend via CLI\nDESCRIPTION: Command to run the Chroma backend server through the command line, specifying a storage path.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nchroma run --path ./getting-started \n```\n\n----------------------------------------\n\nTITLE: Using VoyageAI for Multilingual Embeddings in Python\nDESCRIPTION: Demonstrates how to use VoyageAI's embedding function with multilingual text inputs in Python. Shows the model's capability to process text in multiple languages.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/voyageai.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvoyageai_ef  = embedding_functions.VoyageAIEmbeddingFunction(\n        api_key=\"YOUR_API_KEY\",\n        model_name=\"voyage-3-large\")\n\nmultilingual_texts  = [ 'Hello from VoyageAI!', 'مرحباً من VoyageAI!!',\n        'Hallo von VoyageAI!', 'Bonjour de VoyageAI!',\n        '¡Hola desde VoyageAI!', 'Olá do VoyageAI!',\n        'Ciao da VoyageAI!', '您好，来自 VoyageAI！',\n        'कोहिअर से VoyageAI!'  ]\n\nvoyageai_ef(input=multilingual_texts)\n```\n\n----------------------------------------\n\nTITLE: Using VoyageAI for Multilingual Embeddings in TypeScript\nDESCRIPTION: Demonstrates how to use VoyageAI's embedding function with multilingual text inputs in TypeScript. Shows the model's capability to process text in multiple languages.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/voyageai.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoyageAIEmbeddingFunction } from 'chromadb';\n\nconst embedder = new VoyageAIEmbeddingFunction(\"apiKey\", \"voyage-3-large\")\n\nmultilingual_texts  = [ 'Hello from VoyageAI!', 'مرحباً من VoyageAI!!',\n        'Hallo von VoyageAI!', 'Bonjour de VoyageAI!',\n        '¡Hola desde VoyageAI!', 'Olá do VoyageAI!',\n        'Ciao da VoyageAI!', '您好，来自 VoyageAI！',\n        'कोहिअर से VoyageAI!'  ]\n\nconst embeddings = embedder.generate(multilingual_texts)\n```\n\n----------------------------------------\n\nTITLE: Listing and Getting Collections in Chroma\nDESCRIPTION: Demonstrates listing collection names and retrieving collections using a custom embedding function in Chroma's Python client. Requires OpenAIEmbeddingFunction or an equivalent class. Inputs include collection names and an embedding function, outputting configured collection objects. Ensures compatibility with client methods post-update.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection_names = client.list_collections()\nef = OpenAIEmbeddingFunction(...)\ncollections = [\n    client.get_collection(name=name, embedding_function=ef)\n    for name in collection_names\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Text Documents to a Multimodal Collection in Python\nDESCRIPTION: Demonstrates adding text documents to a multimodal collection that also contains images. This is possible because the multimodal embedding function can process both text and image data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    ids=['id4', 'id5', 'id6'],\n    documents=[\"This is a document\", \"This is another document\", \"This is a third document\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing VoyageAI Embedding Function in Python\nDESCRIPTION: Creates a VoyageAI embedding function in Python and generates embeddings for documents. Requires the voyageai package and a valid API key from VoyageAI.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/voyageai.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb.utils.embedding_functions as embedding_functions\nvoyageai_ef  = embedding_functions.VoyageAIEmbeddingFunction(api_key=\"YOUR_API_KEY\",  model_name=\"voyage-3-large\")\nvoyageai_ef(input=[\"document1\",\"document2\"])\n```\n\n----------------------------------------\n\nTITLE: Listing Collections - TypeScript\nDESCRIPTION: Lists all collections using the listCollections method. Returns a promise resolving to a list of collection names.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst collections = await client.listCollections({\n    limit: 10,\n    offset: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Hugging Face Server - Bash\nDESCRIPTION: This snippet runs a Docker container using Docker Compose to set up a Hugging Face server. Ensure that Docker is installed and the proper configuration file is available before executing the command. The expected outcome is a running service that can be accessed at the specified URL.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/server_side_embeddings/huggingface/test.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f examples/server_side_embeddings/huggingface/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Verifying Authentication Failure with Chroma Client in Python\nDESCRIPTION: The snippet depicts a negative test case using Python, where an attempt is made to access a protected endpoint without authentication, expecting an 'Unauthorized' error to verify authentication failure handling.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/auth.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nclient = chromadb.HttpClient()\ntry:\n    client.list_collections()\nexcept Exception as e:\n    if \"Unauthorized\" in str(e):\n        print(\"As expected, you are not authorized to access protected endpoints.\", file=sys.stderr)\n    else:\n        raise e\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma Vector Database with Roboflow Embedding Function\nDESCRIPTION: Create a persistent Chroma client, initialize a Roboflow embedding function, and create a collection for storing image embeddings using cosine similarity.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/roboflow/embeddings.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nimport os\nfrom chromadb.utils.data_loaders import ImageLoader\nfrom chromadb.utils.embedding_functions import RoboflowEmbeddingFunction\nimport uuid\nimport cv2\nimport supervision as sv\n\nSERVER_URL = \"https://infer.roboflow.com\"\n\nef = RoboflowEmbeddingFunction(API_KEY, api_url = SERVER_URL)\n\nclient = chromadb.PersistentClient(path=\"database\")\n\ndata_loader = ImageLoader()\n\ncollection = client.create_collection(name=\"images_db2\", embedding_function=ef, data_loader=data_loader, metadata={\"hnsw:space\": \"cosine\"})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server in Python\nDESCRIPTION: This Python code snippet demonstrates how to connect to a running Chroma server using the HttpClient. It specifies the host and port of the server.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/run.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nchroma_client = chromadb.HttpClient(host='localhost', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Initializing RoboflowEmbeddingFunction without Explicit API Key\nDESCRIPTION: Creates a RoboflowEmbeddingFunction instance without explicitly passing an API key, instead relying on the environment variable. This approach improves security by keeping credentials out of code.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/roboflow.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions import RoboflowEmbeddingFunction\n\nroboflow_ef = RoboflowEmbeddingFunction()\n```\n\n----------------------------------------\n\nTITLE: Installing chromadb-client for Python and JavaScript\nDESCRIPTION: Commands to install the chromadb-client package using pip for Python and npm for JavaScript. This lightweight package is used for client-server mode with minimal dependencies.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/chroma-server/python-thin-client.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# Python\npip install chromadb-client\n# JS\nnpm install chromadb-client\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Embedding Function in Python\nDESCRIPTION: This snippet demonstrates how to create an OpenAI embedding function in Python using the openai package. It requires an API key from OpenAI and allows specifying which embedding model to use.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/openai.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb.utils.embedding_functions as embedding_functions\nopenai_ef = embedding_functions.OpenAIEmbeddingFunction(\n                api_key=\"YOUR_API_KEY\",\n                model_name=\"text-embedding-3-small\"\n            )\n```\n\n----------------------------------------\n\nTITLE: Comparing Embedding Models Based on Metrics\nDESCRIPTION: Compares the loaded benchmarks of embedding models using a specified metric, such as 'Recall@3'. This function takes in the DataFrame of metrics and displays the comparison results in a specified format.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/compare.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\\ncompare_embedding_models(\\n    metrics_df = metrics_df,\\n    metric = \"Recall@3\",\\n    title = \"Recall@3 Scores by Model\"\\n)\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ChromaDB HttpClient with SSL Certificate Verification\nDESCRIPTION: Demonstrates how to initialize the ChromaDB HttpClient with custom SSL certificate verification. The example shows two methods: specifying a certificate file path or using a boolean value to control verification behavior.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-01022024_SSL_Verify_Client_Config.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb import Settings\nclient = chromadb.HttpClient(host=\"localhost\",port=\"8443\",ssl=True, settings=Settings(chroma_server_ssl_verify='./servercert.pem'))\n# or with boolean\nclient = chromadb.HttpClient(host=\"localhost\",port=\"8443\",ssl=True, settings=Settings(chroma_server_ssl_verify=False))\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Google Gemini Embedding Function in Python\nDESCRIPTION: This snippet demonstrates how to import, initialize, and use the Google Generative AI embedding function in Python with Chroma. It requires the 'google-generativeai' package and an API key from Google MakerSuite.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/google-gemini.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# import\nimport chromadb.utils.embedding_functions as embedding_functions\n\n# use directly\ngoogle_ef  = embedding_functions.GoogleGenerativeAiEmbeddingFunction(api_key=\"YOUR_API_KEY\")\ngoogle_ef([\"document1\",\"document2\"])\n\n# pass documents to query for .add and .query\ncollection = client.create_collection(name=\"name\", embedding_function=google_ef)\ncollection = client.get_collection(name=\"name\", embedding_function=google_ef)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection - TypeScript\nDESCRIPTION: Creates a new collection with specified properties using the createCollection method. Returns a promise resolving to the created collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await client.createCollection({\n  name: \"my_collection\",\n  metadata: {\n    \"description\": \"My first collection\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Token Credentials for API Requests\nDESCRIPTION: This snippet demonstrates how to use the retrieved token credentials to make an authorized API request to the Chroma service.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport CHROMA_AUTH=$(terraform output chroma_auth_token | sed 's/\"//g')\ncurl -v http://$instance_public_ip:8000/api/v2/collections -H \"Authorization: Bearer ${CHROMA_AUTH}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Clients in Chroma After Update - Python\nDESCRIPTION: This snippet contrasts the previous and updated methods of creating clients in Chroma, showcasing how to instantiate an EphemeralClient and a PersistentClient as part of the enhancements in client creation.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n### in-memory ephemeral client\n\n# before\nimport chromadb\nclient = chromadb.Client()\n\n# after\nimport chromadb\nclient = chromadb.EphemeralClient()\n\n\n### persistent client\n\n# before\nimport chromadb\nfrom chromadb.config import Settings\nclient = chromadb.Client(Settings(\n    chroma_db_impl=\"duckdb+parquet\",\n    persist_directory=\"/path/to/persist/directory\" # Optional, defaults to .chromadb/ in the current directory\n))\n\n# after\nimport chromadb\nclient = chromadb.PersistentClient(path=\"/path/to/persist/directory\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Admin Chroma Client\nDESCRIPTION: Creates an administrative client for managing tenants and databases within the Chroma system. Provides high-level administrative capabilities.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef AdminClient(settings: Settings = Settings()) -> AdminAPI\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to create a new ChromaClient to connect to a running Chroma server. It uses default connection settings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/run.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\nconst client = new ChromaClient();\n```\n\n----------------------------------------\n\nTITLE: Using Client Utility Methods in Python\nDESCRIPTION: Demonstrates the use of heartbeat() to check client connection and reset() to clear the database in Python.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/persistent-client.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.heartbeat()\nclient.reset()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Cohere Embedding Function in TypeScript\nDESCRIPTION: Creates a Cohere embedding function in TypeScript and demonstrates both direct usage for generating embeddings and integration with Chroma collections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/cohere.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CohereEmbeddingFunction } from 'chromadb';\n\nconst embedder = new CohereEmbeddingFunction(\"apiKey\")\n\n// use directly\nconst embeddings = embedder.generate([\"document1\",\"document2\"])\n\n// pass documents to query for .add and .query\nconst collection = await client.createCollection({name: \"name\", embeddingFunction: embedder})\nconst collectionGet = await client.getCollection({name:\"name\", embeddingFunction: embedder})\n```\n\n----------------------------------------\n\nTITLE: Initializing Cohere Embedding Function in Python\nDESCRIPTION: Sets up a Cohere embedding function in Python using an API key and specifies the embedding model. The function is then demonstrated by embedding two sample documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/cohere.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb.utils.embedding_functions as embedding_functions\ncohere_ef  = embedding_functions.CohereEmbeddingFunction(api_key=\"YOUR_API_KEY\",  model_name=\"large\")\ncohere_ef(input=[\"document1\",\"document2\"])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chroma Collection Data\nDESCRIPTION: Fetches documents from a Chroma collection and prepares them for subsequent evaluation and filtering processes. It's a critical step for managing and referencing added data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncorpus_collection = chroma_client.get_collection(\n    name=COLLECTION_NAME\n)\n\ncorpus = get_collection_items(\n    collection=corpus_collection\n)\n\ncorpus_ids = [key for key in corpus.keys()]\ncorpus_documents = [corpus[key]['document'] for key in corpus_ids]\n```\n\n----------------------------------------\n\nTITLE: Deleting Embeddings in Python\nDESCRIPTION: This method deletes embeddings from the data store based on specified ids or filters. It supports targeted deletion through various parameters for greater control.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef delete(ids: Optional[IDs] = None,\n           where: Optional[Where] = None,\n           where_document: Optional[WhereDocument] = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Connecting to Hugging Face Embedding Server in Python\nDESCRIPTION: Python code snippet demonstrating how to create an embedding function that connects to the Hugging Face embedding server. This allows Chroma to use the server for generating document embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/hugging-face-server.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions import HuggingFaceEmbeddingServer\nhuggingface_ef = HuggingFaceEmbeddingServer(url=\"http://localhost:8001/embed\")\n```\n\n----------------------------------------\n\nTITLE: Setting Cohere API Key\nDESCRIPTION: Sets the Cohere API key as an environment variable. This allows the CohereEmbeddingFunction to authenticate with the Cohere API. It uses `getpass` to securely prompt the user for the API key.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/cohere/cohere_python.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"import os\nimport getpass\n\nos.environ[\\\"COHERE_API_KEY\\\"] = getpass.getpass(\\\"Cohere API Key:\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Chroma Instance with Terraform\nDESCRIPTION: This snippet exports necessary Terraform variables for AWS access and Chroma deployment. It includes AWS credentials, SSH key paths, and other configuration settings required for deploying Chroma on EC2.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#AWS access key\nexport TF_VAR_AWS_ACCESS_KEY=<AWS_ACCESS_KEY>\n#AWS secret access key\nexport TF_VAR_AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>\n#path to the public key you generated above (or can be different if you want to use your own key)\nexport TF_ssh_public_key=\"./chroma-aws.pub\"\n#path to the private key you generated above (or can be different if you want to use your own key) - used for formatting the Chroma data volume\nexport TF_ssh_private_key=\"./chroma-aws\"\n#set the chroma release to deploy\nexport TF_VAR_chroma_release=0.4.12\n# AWS region to deploy the chroma instance to\nexport TF_VAR_region=\"us-west-1\"\n#enable public access to the chroma instance on port 8000\nexport TF_VAR_public_access=\"true\"\n#enable basic auth for the chroma instance\nexport TF_VAR_enable_auth=\"true\"\n#The auth type to use for the chroma instance (token or basic)\nexport TF_VAR_auth_type=\"token\"\n#optional - if you want to restore from a snapshot\nexport TF_VAR_chroma_data_restore_from_snapshot_id=\"\"\n#optional - if you want to snapshot the data volume before destroying the instance\nexport TF_VAR_chroma_data_volume_snapshot_before_destroy=\"true\"\nterraform apply -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Migrating Server Configuration to Token Authentication - YAML\nDESCRIPTION: This snippet presents the updated server configuration needed to migrate from Basic to Token Authentication in Chroma. It specifies the new credential settings and the authentication provider.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nCHROMA_SERVER_AUTHN_PROVIDER=\"chromadb.auth.token_authn.TokenAuthenticationServerProvider\"\nCHROMA_SERVER_AUTHN_CREDENTIALS=\"test-token\"\nCHROMA_SERVER_AUTHN_CREDENTIALS_FILE=\"./example_file\"\n```\n\n----------------------------------------\n\nTITLE: AdminAPI Class Definition\nDESCRIPTION: Abstract base class defining the interface for administrative API operations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass AdminAPI(ABC)\n```\n\n----------------------------------------\n\nTITLE: Creating Collections with Metadata in Chroma\nDESCRIPTION: Creates a collection with custom metadata including description and creation timestamp. Metadata can store general information about the collection like creation time or a description of the data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/create-get-delete.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\ncollection = client.create_collection(\n    name=\"my_collection\", \n    embedding_function=emb_fn,\n    metadata={\n        \"description\": \"my first Chroma collection\",\n        \"created\": str(datetime.now())\n    }  \n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet collection = await client.createCollection({\n    name: \"my_collection\",\n    embeddingFunction: emb_fn,\n    metadata: {\n        description: \"my first Chroma collection\",\n        created: (new Date()).toString()\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Client Utility Methods in TypeScript\nDESCRIPTION: Demonstrates the use of heartbeat() to check client connection and reset() to clear the database in TypeScript with async/await.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/persistent-client.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.heartbeat();\nawait client.reset();\n```\n\n----------------------------------------\n\nTITLE: Chroma Client Utility Methods\nDESCRIPTION: Basic utility methods for the Chroma client including heartbeat and reset functionality\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.heartbeat() # returns a nanosecond heartbeat. Useful for making sure the client remains connected.\nclient.reset() # Empties and completely resets the database. ⚠️ This is destructive and not reversible.\n```\n\n----------------------------------------\n\nTITLE: Initializing VoyageAI Embedding Function in TypeScript\nDESCRIPTION: Creates a VoyageAI embedding function in TypeScript and demonstrates both direct usage and integration with Chroma collections. Requires an API key from VoyageAI.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/voyageai.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoyageAIEmbeddingFunction } from 'chromadb';\n\nconst embedder = new VoyageAIEmbeddingFunction(\"apiKey\", \"model_name\")\n\n// use directly\nconst embeddings = embedder.generate([\"document1\",\"document2\"])\n\n// pass documents to query for .add and .query\nconst collection = await client.createCollection({name: \"name\", embeddingFunction: embedder})\nconst collectionGet = await client.getCollection({name: \"name\", embeddingFunction: embedder})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Google Gemini Embedding Function in TypeScript\nDESCRIPTION: This snippet shows how to import, initialize, and use the Google Generative AI embedding function in TypeScript with Chroma. It requires the '@google/generative-ai' npm package and an API key from Google MakerSuite.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/google-gemini.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient, GoogleGenerativeAiEmbeddingFunction } from \"chromadb\";\nconst embedder = new GoogleGenerativeAiEmbeddingFunction({\n  googleApiKey: \"<YOUR API KEY>\",\n});\n\n// use directly\nconst embeddings = await embedder.generate([\"document1\", \"document2\"]);\n\n// pass documents to query for .add and .query\nconst collection = await client.createCollection({\n  name: \"name\",\n  embeddingFunction: embedder,\n});\nconst collectionGet = await client.getCollection({\n  name: \"name\",\n  embeddingFunction: embedder,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qrels for Benchmark Evaluation\nDESCRIPTION: Forms qrels (query relevance labels) linking queries to their respective documents for benchmark analysis. This helps in validating the effectiveness of embeddings by evaluating query-document relevance.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nqrels = pd.DataFrame(\n    {\n        \"query-id\": ids,\n        \"corpus-id\": ids,\n        \"score\": 1\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Instructor Embedding Collection\nDESCRIPTION: This snippet creates a Chroma collection using the Instructor embedding function, adds documents to it, and performs a query. It also includes commented-out examples of using task-specific embeddings with instructions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ninstructor_collection = client.create_collection(name=\"instructor_embeddings\", embedding_function=instructor_ef)\n\ninstructor_collection.add(\n    documents=[\"This is a document\", \"This is another document\"],\n    metadatas=[{\"source\": \"my_source\"}, {\"source\": \"my_source\"}],\n    ids=[\"id1\", \"id2\"]\n)\n\n# Adding documents with an instruction\n# instructor_ef = embedding_functions.InstructorEmbeddingFunction(\n#     instruction=\"Represent the Science sentence: \"\n# )\n# instructor_collection = client.create_collection(name=\"instructor_embeddings\", embedding_function=instructor_ef)\n# instructor_collection.add(documents=[\"Parton energy loss in QCD matter\"], ids=[\"id1\"])\n\nresults = instructor_collection.query(\n    query_texts=[\"This is a query document\"],\n    n_results=2\n)\nresults\n\n# Querying with an instruction\n# instructor_ef = embedding_functions.InstructorEmbeddingFunction(instruction=\"Represent the Wikipedia question for retrieving supporting documents: \")\n# instructor_collection = client.get_collection(name=\"instructor_embeddings\", embedding_function=instructor_ef)\n# results = instructor_collection.query(query_texts=[\"where is the food stored in a yam plant\"])\n```\n\n----------------------------------------\n\nTITLE: Using Hugging Face Embedding Server in TypeScript\nDESCRIPTION: TypeScript code showing how to initialize and use the Hugging Face embedding server function. It demonstrates both direct generation of embeddings and integration with Chroma collections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/hugging-face-server.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport  {HuggingFaceEmbeddingServerFunction} from 'chromadb';\nconst embedder = new HuggingFaceEmbeddingServerFunction({url:\"http://localhost:8001/embed\"})\n\n// use directly\nconst embeddings = embedder.generate([\"document1\",\"document2\"])\n\n// pass documents to query for .add and .query\nlet collection = await client.createCollection({name: \"name\", embeddingFunction: embedder})\ncollection = await client.getCollection({name: \"name\", embeddingFunction: embedder})\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma HttpClient in Python\nDESCRIPTION: This snippet initializes a HttpClient for Chroma, connecting to a specified host and port. It is essential for starting interactions with the Chroma database.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nclient = chromadb.HttpClient(host=\"localhost\", port=\"8000\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Chroma Health Check\nDESCRIPTION: This snippet performs a health check on the Chroma instance by sending a request to its API endpoint to ensure it is running correctly.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport instance_public_ip=$(terraform output instance_public_ip | sed 's/\"//g')\ncurl -v http://$instance_public_ip:8000/api/v2/heartbeat\n```\n\n----------------------------------------\n\nTITLE: Chroma Client Configuration\nDESCRIPTION: Code examples for configuring Chroma client in Python and TypeScript to connect to the GCP instance\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/gcp.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nchroma_client = chromadb.HttpClient(\n    host=\"<Your Chroma instance IP>\",\n    port=8000\n)\nchroma_client.heartbeat()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\nconst chromaClient = new ChromaClient({\n    path: \"<Your Chroma instance IP>\",\n    port: 8000\n})\nchromaClient.heartbeat()\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Client in TypeScript\nDESCRIPTION: TypeScript code snippet to set up the Chroma client using the ChromaClient with the Azure instance IP.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\nconst chromaClient = new ChromaClient({\n    path: \"<Your Chroma instance IP>\",\n    port: 8000\n})\nchromaClient.heartbeat()\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma Database\nDESCRIPTION: Command to install Chroma database via pip for Python or npm for JavaScript. Also includes the command to run Chroma in client-server mode with a specific database path.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install chromadb # python client\n# for javascript, npm install chromadb!\n# for client-server mode, chroma run --path /chroma_db_path\n```\n\n----------------------------------------\n\nTITLE: Using Embedding Function Directly in Python\nDESCRIPTION: Demonstrates how to use an embedding function directly, which can be useful for debugging purposes.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/embeddings-guide.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nval = default_ef([\"foo\"])\n```\n\n----------------------------------------\n\nTITLE: Export Chroma Basic Auth Credentials\nDESCRIPTION: Exports the Chroma basic auth credentials as an environment variable. This makes the credentials available for use in subsequent commands.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport CHROMA_AUTH=$(terraform output chroma_auth_basic | sed 's/\"//g')\n```\n```\n\n----------------------------------------\n\nTITLE: Using OllamaEmbeddingFunction in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import the OllamaEmbeddingFunction and create an instance for generating embeddings. It includes usage examples such as generating embeddings directly from an array of document strings and creating a collection which utilizes the embedder. The configuration involves setting the embedding function via its URL and model parameters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/ollama.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OllamaEmbeddingFunction } from \"chromadb\";\nconst embedder = new OllamaEmbeddingFunction({\n    url: \"http://127.0.0.1:11434/\",\n    model: \"llama2\"\n})\n\n// use directly\nconst embeddings = embedder.generate([\"document1\", \"document2\"])\n\n// pass documents to query for .add and .query\nlet collection = await client.createCollection({\n    name: \"name\",\n    embeddingFunction: embedder\n})\ncollection = await client.getCollection({\n    name: \"name\",\n    embeddingFunction: embedder\n})\n```\n\n----------------------------------------\n\nTITLE: Saving Benchmark Results to JSON\nDESCRIPTION: Saves the benchmark results to a JSON file, including the model used and results data. The output file can serve both as a record for future comparisons and as data for further analysis.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntimestamp = datetime.now().strftime(\"%Y-%m-%d--%H-%M-%S\")\nresults_to_save = {\n    \"model\": \"text-embedding-3-large\",\n    \"results\": results\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nresults_dir = Path(\"results\")\n\nwith open(os.path.join(results_dir, f'{timestamp}.json'), 'w') as f:\n    json.dump(results_to_save, f)\n```\n\n----------------------------------------\n\nTITLE: Creating a Chroma Cloud Client\nDESCRIPTION: Creates a client to connect to a specific tenant and database on the Chroma cloud platform. Provides cloud-based data storage and management.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef CloudClient(tenant: str,\n                database: str,\n                api_key: Optional[str] = None,\n                settings: Optional[Settings] = None,\n                *,\n                cloud_host: str = \"api.trychroma.com\",\n                cloud_port: int = 8000,\n                enable_ssl: bool = True) -> ClientAPI\n```\n\n----------------------------------------\n\nTITLE: Initializing OllamaEmbeddingFunction in Python\nDESCRIPTION: This snippet demonstrates how to import and instantiate the OllamaEmbeddingFunction in Python, setting up the connection to the embedding API and specifying the model to use. It generates embeddings for a list of documents provided as input. The key parameters are 'url', which is the API endpoint, and 'model_name', indicating the specific model version to use.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/ollama.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions.ollama_embedding_function import (\n    OllamaEmbeddingFunction,\n)\n\nollama_ef = OllamaEmbeddingFunction(\n    url=\"http://localhost:11434\",\n    model_name=\"llama2\",\n)\n\nembeddings = ollama_ef([\"This is my first text to embed\",\n                        \"This is my second document\"])\n```\n\n----------------------------------------\n\nTITLE: Combining Document Content and Logical Operators\nDESCRIPTION: Demonstrates filtering based on document content and complex logical conditions on metadata.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(where_document={\"$contains\": \"Article\"},where={\"$and\": [{\"category\": \"chroma\"}, {\"$or\": [{\"author\": \"john\"}, {\"author\": \"jack\"}]}]})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chroma Auth Token\nDESCRIPTION: Outputs the authentication token for the Chroma instance from Terraform state when token auth is enabled.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterraform output chroma_auth_token\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Client in Python\nDESCRIPTION: Python code snippet to set up the Chroma client using the HttpClient with the Azure instance IP.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nchroma_client = chromadb.HttpClient(\n    host=\"<Your Chroma instance IP>\",\n    port=8000\n)\nchroma_client.heartbeat()\n```\n\n----------------------------------------\n\nTITLE: Preparing Inputs for Benchmark Evaluation\nDESCRIPTION: Prepares query inputs from the golden dataset and embeds them using the chosen embedding model. The snippet ensures all necessary data is ready for evaluation in subsequent benchmark testing.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nqueries = golden_dataset['query'].tolist()\nids = golden_dataset['id'].tolist()\n```\n\n----------------------------------------\n\nTITLE: Running Chroma standalone in-memory with persistence\nDESCRIPTION: Python code for initializing Chroma with local persistence, saving the database and indexes to a specified directory.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/DEVELOP.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\napi = chromadb.PersistentClient(path=\"/path/to/persist/directory\")\nprint(api.heartbeat())\n```\n\n----------------------------------------\n\nTITLE: Initializing Baseten Embedding Function in Python for Chroma\nDESCRIPTION: This code snippet demonstrates how to create and use a Baseten embedding function in Chroma. It requires the 'openai' Python package and uses environment variables for API authentication. The function is initialized with the Baseten API key and base URL, then used to embed sample texts.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/baseten.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport chromadb.utils.embedding_functions as embedding_functions\n\nbaseten_ef = embedding_functions.BasetenEmbeddingFunction(\n                api_key=os.environ[\"BASETEN_API_KEY\"],\n                api_base=\"https://model-xxxxxxxx.api.baseten.co/environments/production/sync/v1\",\n            )\n\nbaseten_ef(input=[\"This is my first text to embed\", \"This is my second document\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Chroma Client in TypeScript (CJS)\nDESCRIPTION: Code to require the ChromaClient class and create a client that connects to the Chroma backend using CommonJS modules.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ChromaClient } = require(\"chromadb\");\nconst client = new ChromaClient();\n```\n\n----------------------------------------\n\nTITLE: Creating a Chroma Client in TypeScript (ESM)\nDESCRIPTION: Code to import the ChromaClient class and create a client that connects to the Chroma backend using ECMAScript modules.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\nconst client = new ChromaClient();\n```\n\n----------------------------------------\n\nTITLE: Configuring Instructor Embedding Function\nDESCRIPTION: This snippet sets up an Instructor embedding function. It requires the InstructorEmbedding package to be installed. The commented-out sections show how to customize the function with specific instructions or use different models and devices.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ninstructor_ef = embedding_functions.InstructorEmbeddingFunction() \n\n# For task specific embeddings, add an instruction\n# instructor_ef = embedding_functions.InstructorEmbeddingFunction(\n#     instruction=\"Represent the Wikipedia document for retrieval: \"\n# )\n\n# Uses hkunlp/instructor-xl model and GPU\n#instructor_ef = embedding_functions.InstructorEmbeddingFunction(model_name=\"hkunlp/instructor-xl\", device=\"cuda\")\n```\n\n----------------------------------------\n\nTITLE: Using Python AsyncHttpClient with Chroma\nDESCRIPTION: Asynchronous Python client implementation showing collection creation and document addition using async/await pattern\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/chroma-server/client-server-mode.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport chromadb\n\nasync def main():\n    client = await chromadb.AsyncHttpClient()\n    collection = await client.create_collection(name=\"my_collection\")\n    await collection.add(\n        documents=[\"hello world\"],\n        ids=[\"id1\"]\n    )\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Changing Distance Function in Python\nDESCRIPTION: Shows how to customize the distance method of the embedding space when creating a collection in Python by setting the 'hnsw:space' metadata.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncollection = client.create_collection(\n        name=\"collection_name\",\n        metadata={\"hnsw:space\": \"cosine\"} # l2 is the default\n    )\n```\n\n----------------------------------------\n\nTITLE: Combining AND and OR Logical Operators\nDESCRIPTION: Illustrates how to combine AND and OR operators for complex filtering conditions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(where={\"$and\": [{\"category\": \"chroma\"}, {\"$or\": [{\"author\": \"john\"}, {\"author\": \"jack\"}]}]})\n```\n\n----------------------------------------\n\nTITLE: Export Chroma Auth Token\nDESCRIPTION: Exports the Chroma auth token as an environment variable. This makes the token available for use in subsequent commands.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport CHROMA_AUTH=$(terraform output chroma_auth_token | sed 's/\"//g')\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Chroma Server with Authentication and Authorization in Bash\nDESCRIPTION: This Bash command starts the Chroma server with specific authentication and authorization settings. It uses environment variables to configure the authentication provider, credentials file, authorization provider, and config file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/authz/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIS_PERSISTENT=1 \\\nCHROMA_SERVER_AUTHN_PROVIDER=\"chromadb.auth.token_authn.TokenAuthenticationServerProvider\" \\\nCHROMA_SERVER_AUTHN_CREDENTIALS_FILE=examples/basic_functionality/authz/authz.yaml \\\nCHROMA_SERVER_AUTHZ_PROVIDER=\"chromadb.auth.simple_rbac_authz.SimpleRBACAuthorizationProvider\" \\\nCHROMA_SERVER_AUTHZ_CONFIG_FILE=examples/basic_functionality/authz/authz.yaml \\\nuvicorn chromadb.app:app --workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config chromadb/log_config.yml --reload --timeout-keep-alive 30\n```\n\n----------------------------------------\n\nTITLE: Embedding Generated Queries for Evaluation\nDESCRIPTION: Embeds queries generated from the golden dataset to prepare them for benchmarking against the Chroma collection. This involves the same embedding model used for the original corpus for consistency.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nquery_embeddings = openai_embed_in_batches(\n    openai_client=openai_client,\n    texts=queries,\n    model=\"text-embedding-3-large\"\n)\n\nquery_embeddings_lookup_dict = {\n    id: QueryItem(\n        text=query,\n        embedding=embedding\n    )\n    for id, query, embedding in zip(ids, queries, query_embeddings)\n}\n\nquery_embeddings_lookup = QueryLookup(lookup=query_embeddings_lookup_dict)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python virtual environment for Chroma development\nDESCRIPTION: Commands for creating a virtual environment, activating it, and installing required dependencies for Chroma development.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/DEVELOP.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv      # Only need to do this once\nsource venv/bin/activate  # Do this each time you use a new shell for the project\npip install -r requirements.txt\npip install -r requirements_dev.txt\npre-commit install # install the precommit hooks\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudFormation Stack for Chroma\nDESCRIPTION: AWS CLI command to delete the CloudFormation stack, removing all AWS resources associated with the Chroma deployment.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation delete-stack --stack-name my-chroma-stack\n```\n\n----------------------------------------\n\nTITLE: Creating a DataFrame from Loaded Results\nDESCRIPTION: Collects the loaded results into a list and creates a pandas DataFrame to structure the data for analysis. This DataFrame will be utilized for comparing the results between different embedding models.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/compare.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\\nresults_list = [openai_small_results, openai_large_results, jina_results, voyage_results] # Add as many results as you want to compare\\n\\n# Create a dataframe of the results\\nmetrics_df = create_metrics_dataframe(results_list)\\n\\nmetrics_df\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Filtering with AND Logical Operator\nDESCRIPTION: Shows how to use the $and operator to filter documents based on multiple metadata conditions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncollection = client.get_or_create_collection(\"test-where-list\")\ncollection.upsert(documents=[\"Article by john\", \"Article by Jack\", \"Article by Jill\"],\n               metadatas=[{\"author\": \"john\",\"category\":\"chroma\"}, {\"author\": \"jack\",\"category\":\"ml\"}, {\"author\": \"jill\",\"category\":\"lifestyle\"}], ids=[\"1\", \"2\", \"3\"])\ncollection.get(where={\"$and\": [{\"category\": \"chroma\"}, {\"author\": \"john\"}]})\n```\n\n----------------------------------------\n\nTITLE: Updating a Multimodal Collection with Images in Python\nDESCRIPTION: Shows how to update existing entries in a multimodal collection with new image data. Note that updates overwrite the existing modality for that ID, replacing any previous data associated with those IDs.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/multimodal-guide.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncollection.update(\n    ids=['id1', 'id2', 'id3'],\n    images=[...] # A list of numpy arrays representing images\n)\n```\n\n----------------------------------------\n\nTITLE: Preparing COCO Dataset for Multimodal Collection in Python\nDESCRIPTION: This code snippet downloads a subset of the COCO object detection dataset, saves images locally, and displays them using matplotlib. It sets up the necessary data for creating a multimodal collection in Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/multimodal/multimodal_retrieval.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom datasets import load_dataset\nfrom matplotlib import pyplot as plt\n\ndataset = load_dataset(path=\"detection-datasets/coco\", name=\"coco\", split=\"train\", streaming=True)\n\nIMAGE_FOLDER = \"images\"\nN_IMAGES = 20\n\n# For plotting\nplot_cols = 5\nplot_rows = N_IMAGES // plot_cols\nfig, axes = plt.subplots(plot_rows, plot_cols, figsize=(plot_rows*2, plot_cols*2))\naxes = axes.flatten()\n\n# Write the images to a folder\ndataset_iter = iter(dataset)\nos.makedirs(IMAGE_FOLDER, exist_ok=True)\nfor i in range(N_IMAGES):\n    image = next(dataset_iter)['image']\n    axes[i].imshow(image)\n    axes[i].axis(\"off\")\n\n    image.save(f\"images/{i}.jpg\")\n\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Get Instance Public IP\nDESCRIPTION: Retrieves the public IP address of the deployed Chroma instance from Terraform's state. This IP is used to access the Chroma service.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterraform output instance_public_ip\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Ollama Docker Container with Embedding Model\nDESCRIPTION: Sets up a local Docker container running Ollama, pulls the nomic-embed-text model, and tests the embeddings API endpoint\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/ollama.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ./ollama:\\/root\\/.\\.ollama -p 11434:11434 --name ollama ollama\\/ollama\ndocker exec -it ollama ollama run nomic-embed-text # press Ctrl+D to exit after model downloads successfully\n# test it\ncurl http:\\/\\/localhost:11434\\/api\\/embeddings -d '{\"model\": \"nomic-embed-text\",\"prompt\": \"Here is an article about llamas...\"}''\n```\n\n----------------------------------------\n\nTITLE: Gathering Data for Chroma Collection\nDESCRIPTION: Creates lists of document IDs and documents from a loaded corpus for future processing and embedding. It's a preparatory step for adding data to Chroma collections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncorpus_ids = list(corpus.keys())\ncorpus_documents = [corpus[key] for key in corpus_ids]\n```\n\n----------------------------------------\n\nTITLE: Async Python HTTP Client Example\nDESCRIPTION: Demonstration of using the async HTTP client in Python with collection creation\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport chromadb\n\nasync def main():\n    client = await chromadb.AsyncHttpClient()\n    collection = await client.create_collection(name=\"my_collection\")\n\n    await collection.add(\n        documents=[\"hello world\"],\n        ids=[\"id1\"]\n    )\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Chroma in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Chroma MCP server in Claude Desktop. This snippet shows how to specify the command, arguments, and data directory for the Chroma MCP server.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/anthropic-mcp.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"chroma\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"chroma-mcp\",\n        \"--client-type\",\n        \"persistent\",\n        \"--data-dir\",\n        \"/path/to/your/data/directory\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Metadata Filtering Structure in Python\nDESCRIPTION: Demonstrates the basic structure of a metadata filter dictionary in Chroma. It shows how to specify a metadata field and an operator with a value.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/metadata-filtering.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"metadata_field\": {\n        <Operator>: <Value>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Benchmark Results from JSON Files\nDESCRIPTION: Opens and loads JSON files containing benchmark results for several embedding models into Python dictionaries. These results are stored in a specified directory which allows for easy access for comparison.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/compare.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\\nresults_dir = Path(\"results\")\\n\\nwith open(os.path.join(results_dir, \"2025-03-31--14-01-03.json\"), \"r\") as f:\\n    openai_small_results = json.load(f)\\n\\nwith open(os.path.join(results_dir, \"2025-03-31--13-59-25.json\"), \"r\") as f:\\n    openai_large_results = json.load(f)\\n    \\nwith open(os.path.join(results_dir, \"2025-03-31--14-08-55.json\"), \"r\") as f:\\n    jina_results = json.load(f)\\n\\nwith open(os.path.join(results_dir, \"2025-03-31--14-10-29.json\"), \"r\") as f:\\n    voyage_results = json.load(f)\\n\\n# Load in the results you wish to compare\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Peeking into Collection in TypeScript\nDESCRIPTION: This snippet shows how to execute a 'peek' operation on a collection using optional parameters in a 'PeekParams' object. It returns a promise resolving to a 'MultiGetResponse', containing the query results, and throws an error if it fails.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await collection.peek({\n  limit: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Metadata Filtering in Python\nDESCRIPTION: Shows two equivalent ways of expressing an equality filter in Chroma: using a direct value assignment and using the $eq operator explicitly.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/metadata-filtering.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"metadata_field\": \"search_string\"\n}\n\n# is equivalent to\n\n{\n    \"metadata_field\": {\n        \"$eq\": \"search_string\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma and OpenAI Clients\nDESCRIPTION: Initializes client instances for interacting with Chroma and OpenAI services, allowing embedding and data management operations. The code also demonstrates using Chroma through HTTP with authentication if Chroma Cloud is used.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nchroma_client = chromadb.Client()\n\n# If you want to use Chroma Cloud, uncomment the following line:\n# chroma_client = chromadb.HttpClient(\n#   ssl=True,\n#   host='api.trychroma.com',\n#   tenant=CHROMA_TENANT,\n#   database=DATABASE_NAME,\n#   headers={\n#     'x-chroma-token': X_CHROMA_TOKEN\n#   }\n# )\n\nopenai_client = OpenAIClient(api_key=OPENAI_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform for Chroma Deployment on Digital Ocean\nDESCRIPTION: Initializes the Terraform working directory and downloads required provider plugins.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Loading SciQ Dataset from HuggingFace\nDESCRIPTION: Retrieves the SciQ dataset and filters it to include only questions with supporting evidence\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/start_here.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\\n\\ndataset = load_dataset(\"sciq\", split=\"train\")\\n\\ndataset = dataset.filter(lambda x: x[\"support\"] != \"\")\\n\\nprint(\"Number of questions with support: \", len(dataset))\n```\n\n----------------------------------------\n\nTITLE: Collection Utility Methods in JavaScript\nDESCRIPTION: Demonstrates utility methods available for collections in JavaScript, including peeking at the first 10 items and counting items in the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait collection.peek(); // returns a list of the first 10 items in the collection\nawait collection.count(); // returns the number of items in the collection\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenLLMetry SDK in Python\nDESCRIPTION: This Python code snippet shows how to initialize the Traceloop SDK in your application. This step is necessary to enable OpenLLMetry tracing for your Chroma-based system.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/openllmetry.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom traceloop.sdk import Traceloop\n\nTraceloop.init()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hugging Face Embedding Server with Docker Compose\nDESCRIPTION: Command to run the Hugging Face embedding server along with Chroma using Docker Compose from the repository root. This setup bundles both services together for local development.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/hugging-face-server.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ndocker compose -f examples/server_side_embeddings/huggingface/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with GPT-4o-mini\nDESCRIPTION: Filters documents using the GPT-4o-mini model to check document relevance and completeness. Utilizes batching functions for processing efficiency, allowing the inclusion of relevant documents in the dataset.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfiltered_document_ids = filter_documents(\n    client=openai_client,\n    model=\"gpt-4o-mini\",\n    documents=corpus_documents,\n    ids=corpus_ids,\n    criteria=criteria,\n    criteria_labels=criteria_labels\n)\n```\n\n----------------------------------------\n\nTITLE: Peeking at Initial Results in Python\nDESCRIPTION: This method retrieves the first set of embeddings in the database, limited by the specified number. It is useful for quickly accessing the most recent embeddings without filters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/collection.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef peek(limit: int = 10) -> GetResult\n```\n\n----------------------------------------\n\nTITLE: Logical OR Operator for Metadata Filtering in Python\nDESCRIPTION: Shows how to use the $or operator to combine multiple metadata filters, where at least one condition must be met for a result to be returned.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/metadata-filtering.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"$or\": [\n        {\n            \"metadata_field\": {\n                <Operator>: <Value>\n            }\n        },\n        {\n            \"metadata_field\": {\n                <Operator>: <Value>\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ollama Embeddings in JavaScript\nDESCRIPTION: Demonstrates how to use the OllamaEmbeddingFunction class in JavaScript to generate text embeddings with Ollama\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/ollama.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {OllamaEmbeddingFunction} = require('chromadb');\nconst embedder = new OllamaEmbeddingFunction({\n    url: \"http:\\/\\/127.0.0.1:11434\\/api\\/embeddings\",\n    model: \"llama2\"\n})\n\n// use directly\nconst embeddings = embedder.generate([\"Here is an article about llamas...\"])\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for Chroma Digital Ocean Droplet\nDESCRIPTION: Creates a new RSA 4096-bit SSH key pair for accessing the Chroma instance on Digital Ocean. The private key is set to read-only permissions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t RSA -b 4096 -C \"Chroma DO Key\" -N \"\" -f ./chroma-do && chmod 400 ./chroma-do\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma or Chroma Client using pip\nDESCRIPTION: This snippet demonstrates how to install either the Chroma or Chroma client package via pip, which is essential before setting up any authentication configurations on the client or server side.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/auth.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install chromadb\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install chromadb-client\n```\n\n----------------------------------------\n\nTITLE: Running ChromaDB Examples in Node.js Environment\nDESCRIPTION: Commands for installing dependencies and running ChromaDB examples in a Node.js environment using different package options, including the default bundled package, explicitly specified bundled package, or client package with peer dependencies.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/examples/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd node\npnpm install\n\n# Run with the default bundled package\npnpm dev\n\n# Run with the bundled package explicitly\npnpm dev:bundled\n\n# Run with the client package (peer dependencies)\npnpm dev:client\n```\n\n----------------------------------------\n\nTITLE: Validating Embedding Function Configuration with Python in Chroma\nDESCRIPTION: This snippet demonstrates how to use the validate_config function to validate an embedding function configuration against its schema. It shows validation of an OpenAI embedding model configuration with API key environment variable and model name parameters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/utils/embedding_functions/schemas/README.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions.schemas import validate_config\n\n# Validate a configuration\nconfig = {\n    \"api_key_env_var\": \"CHROMA_OPENAI_API_KEY\",\n    \"model_name\": \"text-embedding-ada-002\"\n}\nvalidate_config(config, \"openai\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Instructor Embeddings with Base Model\nDESCRIPTION: Demonstrates how to initialize the InstructorEmbeddingFunction using the default base model and CPU processing.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/instructor.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#uses base model and cpu\nimport chromadb.utils.embedding_functions as embedding_functions\nef = embedding_functions.InstructorEmbeddingFunction()\n```\n\n----------------------------------------\n\nTITLE: Identifying Failed Documents Post-Filter\nDESCRIPTION: Identifies documents that failed the filtering criteria used for document processing. This is part of ensuring the quality of data for subsequent steps in query generation and evaluation.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npassed_documents = [corpus[id]['document'] for id in filtered_document_ids]\n\nfailed_document_ids = [id for id in corpus_ids if id not in filtered_document_ids]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma with Path-based SSL Certificate Verification\nDESCRIPTION: Python code to connect to a secure Chroma server with SSL verification using the path to the certificate file. This approach verifies the server's certificate against the specified certificate file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/assets/CIP-01022024-test_self_signed.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb import Settings\nimport chromadb\nclient = chromadb.HttpClient(host=\"localhost\",port=\"8443\",ssl=True, settings=Settings(chroma_server_ssl_verify='./servercert.pem'))\nprint(client.heartbeat())\n```\n\n----------------------------------------\n\nTITLE: Filtering Results in Python\nDESCRIPTION: This snippet demonstrates how to selectively return data from a Chroma collection query using the include parameter. Only specified data, such as documents and IDs, will be returned.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Only get documents and ids\ncollection.get(\n    include=[\"documents\"]\n)\n\ncollection.query(\n    query_embeddings=[[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],\n    include=[\"documents\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Get Database in Chroma\nDESCRIPTION: This function retrieves a database by name and tenant. Raises an error if the database does not exist.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef get_database(name: str, tenant: str = DEFAULT_TENANT) -> Database\n```\n\n----------------------------------------\n\nTITLE: Destroying Chroma Deployment on Digital Ocean\nDESCRIPTION: Runs the Terraform destroy command to remove all resources associated with the Chroma deployment on Digital Ocean.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Importing ChromaDB Library in Python\nDESCRIPTION: This initial step imports the ChromaDB library, which is necessary for interacting with the Chroma database. No additional parameters are required for this import, and it serves as the foundation for the rest of the operations in the script.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/local_persistence.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n```\n\n----------------------------------------\n\nTITLE: Using Chroma Basic Auth for API Requests\nDESCRIPTION: Demonstrates how to use the Chroma basic auth credentials in a curl request to access the collections API endpoint.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport CHROMA_AUTH=$(terraform output chroma_auth_basic | sed 's/\"//g')\ncurl -v http://$instance_public_ip:8000/api/v2/collections -u \"${CHROMA_AUTH}\"\n```\n\n----------------------------------------\n\nTITLE: Running ChromaDB Examples in Browser Environment\nDESCRIPTION: Commands for installing dependencies and running ChromaDB examples in a browser environment using different package options, including the default bundled package, explicitly specified bundled package, or client package with peer dependencies.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/examples/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd browser\npnpm install\n\n# Run with the default bundled package\npnpm dev\n\n# Run with the bundled package explicitly\npnpm dev:bundled\n\n# Run with the client package (peer dependencies)\npnpm dev:client\n```\n\n----------------------------------------\n\nTITLE: Installing ChromaDB HTTP Client via pip\nDESCRIPTION: Command to install the ChromaDB HTTP client Python library using pip. This installs only the client portion which connects to a Chroma server, not the full library.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/python/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install chromadb-client # python http-client only library\n```\n\n----------------------------------------\n\nTITLE: Listing Available Chroma Sample Applications\nDESCRIPTION: Command to display all available sample applications that can be installed through the Chroma CLI.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/sample-apps.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nchroma install --list\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Server with Docker\nDESCRIPTION: Commands to pull and run the official Chroma Docker image, exposing the service on port 8000.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/persistent-client.md#2025-04-11_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\ndocker pull chromadb/chroma\ndocker run -p 8000:8000 chromadb/chroma\n```\n\n----------------------------------------\n\nTITLE: Filtering with AND Logical Operator (No Match)\nDESCRIPTION: Demonstrates a case where the AND condition doesn't match any documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(where={\"$and\": [{\"category\": \"chroma\"}, {\"author\": \"jill\"}]})\n```\n\n----------------------------------------\n\nTITLE: Initializing PersistentClient with Reset Option in Python\nDESCRIPTION: This snippet demonstrates how to initialize a PersistentClient with the option to allow database reset through custom settings. This is useful for developers needing to reset their database while using Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb.config import Settings\nclient = chromadb.PersistentClient(path=\"./path/to/chroma\", settings=Settings(allow_reset=True))\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server with Python HttpClient\nDESCRIPTION: Example of connecting to a Chroma server using the synchronous Python HttpClient with host and port configuration\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/chroma-server/client-server-mode.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nchroma_client = chromadb.HttpClient(host='localhost', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Terraform Deployment Commands\nDESCRIPTION: Series of terraform commands for initializing, planning, and applying the Chroma deployment\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/gcp.md#2025-04-11_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nterraform init\nterraform plan -var-file chroma.tfvars\nterraform apply -var-file chroma.tfvars\n```\n\n----------------------------------------\n\nTITLE: Destroying Chroma Instance\nDESCRIPTION: This snippet executes the command to destroy the Chroma instance using Terraform, requiring updating the instance's prevent_destroy setting.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Importing Embedding Functions\nDESCRIPTION: This snippet imports the embedding functions utility from Chroma, which provides various embedding function implementations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils import embedding_functions\n```\n\n----------------------------------------\n\nTITLE: Use Chroma Auth Token\nDESCRIPTION: Uses the Chroma auth token to authenticate a request to the Chroma collections API. This demonstrates how to use the token to access protected resources.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl -v http://$instance_public_ip:8000/api/v2/collections -H \"Authorization: Bearer ${CHROMA_AUTH}\"\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Random Embeddings for Testing HNSW Parameters\nDESCRIPTION: This code snippet demonstrates how to generate random embeddings for testing HNSW parameter configurations. It creates 50,000 random embeddings with 2048 dimensions as floating point numbers.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/configure.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nembeddings = np.random.randn(50000, 2048).astype(np.float32).tolist()\n```\n\n----------------------------------------\n\nTITLE: Installing ChromaDB JavaScript Client\nDESCRIPTION: Commands to install the ChromaDB JavaScript client using different package managers.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install chromadb\n\n# pnpm\npnpm add chromadb\n\n# yarn\nyarn add chromadb\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Client for Chroma MCP Server\nDESCRIPTION: JSON configuration for setting up the Chroma MCP server with a persistent client. This client type stores data persistently on the local machine, surviving between restarts.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/anthropic-mcp.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"chroma\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"chroma-mcp\",\n        \"--client-type\",\n        \"persistent\",\n        \"--data-dir\",\n        \"/path/to/your/data/directory\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Authentication\nDESCRIPTION: This snippet retrieves the token authentication credentials for Chroma from Terraform state and exports it as an environment variable.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterraform output chroma_auth_token\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Docker Container with Custom Config\nDESCRIPTION: Commands to create a custom config file and run the Chroma Docker container with the custom configuration mounted.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\necho \"allow_reset: true\" > config.yaml # the server will now allow clients to reset its state\ndocker run -v ./chroma-data:/data -v ./config.yaml:/config.yaml -p 8000:8000 chromadb/chroma\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server using TypeScript Client\nDESCRIPTION: TypeScript code to instantiate a ChromaClient for connecting to the Chroma server in a TypeScript environment.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/client-server.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\nconst client = new ChromaClient();\n```\n\n----------------------------------------\n\nTITLE: Testing Chroma Authorization with Python Client\nDESCRIPTION: This Python code snippet demonstrates how to test the Chroma authorization setup. It creates a client with authentication settings, lists collections, creates a new collection, adds a document, and retrieves it.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/authz/README.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb.config import Settings\n\nclient = chromadb.HttpClient(\"http://localhost:8000/\",\n                             settings=Settings(chroma_client_auth_provider=\"chromadb.auth.token_authn.TokenAuthClientProvider\",\n                                               chroma_client_auth_credentials=\"test-token-admin\"))\n\nclient.list_collections()\ncollection = client.get_or_create_collection(\"test_collection\")\n\ncollection.add(documents=[\"test\"],ids=[\"1\"])\ncollection.get()\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This snippet lists the required Python packages for the project. It includes Chroma DB version 0.5.16 or higher, OpenAI, and tqdm (a progress bar library).\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/chat_with_your_documents/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nchromadb>=0.5.16\nopenai\ntqdm\n```\n\n----------------------------------------\n\nTITLE: Modifying Collection in TypeScript\nDESCRIPTION: This snippet details how to modify a collection's metadata or name using the 'modify' method. Parameters are passed in an object with optional 'metadata' and 'name' fields. It returns a promise resolving to a 'CollectionParams' object with the API response.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.updateCollection({\n  name: \"new name\",\n  metadata: { \"key\": \"value\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddingFunction After Update - Python\nDESCRIPTION: This snippet illustrates the modified structure of the EmbeddingFunction class, now generically defined to support multiple input types. It enables a broader application of embedding functions across various data types.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nEmbeddable = Union[Documents, Images]\nD = TypeVar(\"D\", bound=Embeddable, contravariant=True)\n\nclass EmbeddingFunction(Protocol[D]):\n    def __call__(self, input: D) -> Embeddings:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromaDB Client\nDESCRIPTION: Creates a persistent ChromaDB client and collection for storing embeddings\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nfrom chromadb.config import Settings\n\nchroma_client = chromadb.PersistentClient(path=\"./chroma)\")\n\ncollection = chroma_client.get_or_create_collection(name=\"sciq\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Ephemeral Client for Chroma MCP Server\nDESCRIPTION: JSON configuration for setting up the Chroma MCP server with an ephemeral client. This client type stores data in memory only, which is cleared when the server restarts.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/anthropic-mcp.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"chroma\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"chroma-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Chroma Auth Token\nDESCRIPTION: Retrieves the Chroma auth token from Terraform output when token auth is enabled. The token is used to authenticate requests to the Chroma API.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterraform output chroma_auth_token\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromaClient Instance - TypeScript\nDESCRIPTION: Creates a new instance of the ChromaClient with specified parameters such as the API path.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new ChromaClient({\n  path: \"http://localhost:8000\"\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server with TypeScript Client\nDESCRIPTION: Example showing how to instantiate a ChromaClient in both CommonJS and ES Module formats for TypeScript/JavaScript applications\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/chroma-server/client-server-mode.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// CJS\nconst { ChromaClient } = require(\"chromadb\");\n// ESM\nimport { ChromaClient } from \"chromadb\";\n\nconst client = new ChromaClient();\n```\n\n----------------------------------------\n\nTITLE: ServerAPI Class Definition\nDESCRIPTION: This class defines the ServerAPI that extends the BaseAPI, AdminAPI, and Component, providing a root component for the Chroma System.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass ServerAPI(BaseAPI, AdminAPI, Component)\n```\n\n----------------------------------------\n\nTITLE: Loading Chroma Docs Example Data\nDESCRIPTION: Loads pre-chunked Chroma documentation data from a JSON file for use throughout the benchmark notebook. Users are directed to modify the collection name and data source when changing embedding models or utilizing custom data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith open('data/chroma_docs.json', 'r') as f:\n    corpus = json.load(f)\n\ncontext = \"This is a technical support bot for Chroma, a vector database company often used by developers for building AI applications.\"\nexample_queries = \"\"\"\n    how to add to a collection\n    filter by metadata\n    retrieve embeddings when querying\n    how to use openai embedding function when adding to collection\n    \"\"\"\n\nCOLLECTION_NAME = \"chroma-docs-openai-large\" # change this collection name whenever you switch embedding models\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Chroma Integration - TypeScript\nDESCRIPTION: This snippet configures the Next.js project to properly integrate the Chroma library by specifying external packages. This is necessary to support embedding functions after version 15.2.1.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/troubleshooting.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst nextConfig = {\n  serverExternalPackages: ['chromadb', 'chromadb-default-embed'],\n};\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication for Server - YAML\nDESCRIPTION: This snippet illustrates the server configuration for using Basic Authentication with Chroma. It configures credentials and sets up the credential provider necessary for the authentication process.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nCHROMA_SERVER_AUTH_CREDENTIALS=\"admin:admin\"\nCHROMA_SERVER_AUTH_CREDENTIALS_FILE=\"./example_file\"\nCHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=\"chromadb.auth.providers.HtpasswdConfigurationServerAuthCredentialsProvider\"\nCHROMA_SERVER_AUTH_PROVIDER=\"chromadb.auth.basic.BasicAuthServerProvider\"\n```\n\n----------------------------------------\n\nTITLE: Example Query Using New $in Operator in Chroma\nDESCRIPTION: Demonstrates how to use the proposed $in operator in combination with existing operators for filtering collection queries.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP_4_In_Nin_Metadata_Filters.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(query_texts=query,\n                 where={\"$and\": [{\"author\": {'$in': ['john', 'jill']}}, {\"article_type\": {\"$eq\": \"blog\"}}]},\n                 n_results=3)\n```\n\n----------------------------------------\n\nTITLE: Running Chroma standalone in-memory mode\nDESCRIPTION: Python code snippet for initializing Chroma in standalone in-memory mode, which creates a non-persistent instance.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/DEVELOP.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\napi = chromadb.Client()\nprint(api.heartbeat())\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Collection Size in Chroma (Markdown)\nDESCRIPTION: This snippet provides a formula for calculating the maximum collection size in Chroma based on available system RAM. It's useful for capacity planning when deploying Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/administration/performance.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor 1024 dimensional embeddings, with three metadata records and a small document per embedding, this works out to `N = R * 0.245` where `N` is the max collection size in millions, and `R` is the amount of system RAM required in gigabytes. Remember, you wil also need reserve at least a gigabyte for the system's other needs, in addition to the memory required by Chroma.\n```\n\n----------------------------------------\n\nTITLE: Sample Query Results in TypeScript\nDESCRIPTION: Example output from a Chroma query in TypeScript, showing returned documents, IDs, and similarity distances.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    documents: [\n        [\n            'This is a document about pineapple', \n            'This is a document about oranges'\n        ]\n    ], \n    ids: [\n        ['id1', 'id2']\n    ], \n    distances: [[1.0404009819030762, 1.243080496788025]],\n    uris: null,\n    data: null,\n    metadatas: [[null, null]],\n    embeddings: null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Query Results in Python\nDESCRIPTION: Example output from a Chroma query in Python, showing returned documents, IDs, and similarity distances.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n{\n  'documents': [[\n      'This is a document about pineapple',\n      'This is a document about oranges'\n  ]],\n  'ids': [['id1', 'id2']],\n  'distances': [[1.0404009819030762, 1.243080496788025]],\n  'uris': None,\n  'data': None,\n  'metadatas': [[None, None]],\n  'embeddings': None,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Configuration in YAML for Chroma Authentication\nDESCRIPTION: This YAML snippet defines user configurations for Chroma, including user IDs, roles, and authentication tokens. It demonstrates how to set up both authenticated and anonymous users with admin roles.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/authz/README.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n  - id: user@example.com\n    role: admin\n    tokens:\n      - token: test-token-admin\n  - id: Anonymous\n    role: admin\n    tokens:\n      - token: my_api_token\n```\n\n----------------------------------------\n\nTITLE: Configuring Cohere Embedding Function\nDESCRIPTION: This snippet sets up a Cohere embedding function using the specified API key and model name. It requires the Cohere package to be installed.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncohere_ef  = embedding_functions.CohereEmbeddingFunction(\n    api_key=\"COHERE_API_KEY\",  \n    model_name=\"large\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma Python Client\nDESCRIPTION: Command to install the Chroma Python client using pip package manager.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/introduction.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install chromadb\n```\n\n----------------------------------------\n\nTITLE: Running the Benchmark Evaluation\nDESCRIPTION: Executes the benchmark evaluation using previously prepared query embeddings against the corpus collection and qrels. It provides insights into the accuracy and robustness of the embedding model in retrieving relevant documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nresults = run_benchmark(\n    query_embeddings_lookup=query_embeddings_lookup,\n    collection=corpus_collection,\n    qrels=qrels\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with poetry\nDESCRIPTION: This snippet demonstrates the use of poetry to install dependencies for the Generative Benchmarking project. It simplifies the management of Python packages and environments.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Connecting TypeScript Client to Chroma Docker Container\nDESCRIPTION: TypeScript code snippet to configure a Chroma client to connect to the server running in the Docker container on localhost:8000.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\nconst chromaClient = new ChromaClient({ path: \"http://localhost:8000\" })\nchromaClient.heartbeat()\n```\n\n----------------------------------------\n\nTITLE: Running Chroma with CLI Configuration\nDESCRIPTION: Illustrates how to run the Chroma server using a configuration file via the CLI. Users must prepare a 'config.yaml' file as dependency. This snippet is essential for specifying server settings formerly set through environment variables, simplifying server management. The CLI tool should be properly installed and configured.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nchroma run --config ./config.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing ChromaDB Client with Package Managers\nDESCRIPTION: Commands to install the chromadb-client package using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install chromadb-client\n\n# pnpm\npnpm add chromadb-client\n\n# yarn\nyarn add chromadb-client\n```\n\n----------------------------------------\n\nTITLE: Extending OperatorExpression to Support New Inclusion/Exclusion Operators in Python\nDESCRIPTION: Updates the OperatorExpression Union type to include the new InclusionExclusionOperator, allowing it to work with existing Where semantics.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP_4_In_Nin_Metadata_Filters.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nOperatorExpression = Union[\n    Dict[Union[WhereOperator, LogicalOperator], LiteralValue],\n    Dict[InclusionExclusionOperator, List[LiteralValue]],\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing RoboflowEmbeddingFunction with Local Server\nDESCRIPTION: Creates a RoboflowEmbeddingFunction instance configured to use a local Inference server. This setup calculates embeddings locally without relying on the Roboflow cloud infrastructure.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/roboflow.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions import RoboflowEmbeddingFunction\n\nroboflow_ef = RoboflowEmbeddingFunction(api_key=API_KEY, server_url=\"http://localhost:9001\")\n```\n\n----------------------------------------\n\nTITLE: Docker Chroma Configuration\nDESCRIPTION: Shows how to configure the Chroma Docker container using a volume mount and specifies the change in default data location from '/chroma/chroma' to '/data'. The example requires Docker to be installed. Required parameters include Docker image 'chroma-core/chroma'. This configuration simplifies data management within Docker containers.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\ndocker run -p 8000:8000 -v ./chroma:/data chroma-core/chroma\n```\n\n----------------------------------------\n\nTITLE: Migrating Client Configuration to Token Authentication - YAML\nDESCRIPTION: This code snippet outlines the necessary changes for client configuration when switching to Token Authentication, detailing the provider and credentials settings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nCHROMA_CLIENT_AUTH_CREDENTIALS=\"test-token\"\nCHROMA_CLIENT_AUTH_PROVIDER=\"chromadb.auth.basic_authn.BasicAuthClientProvider\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma JavaScript Client\nDESCRIPTION: Commands to install the Chroma JavaScript/TypeScript client using different package managers (yarn, npm, pnpm).\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/introduction.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nyarn add chromadb chromadb-default-embed\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install --save chromadb chromadb-default-embed\n```\n\nLANGUAGE: terminal\nCODE:\n```\npnpm install chromadb chromadb-default-embed\n```\n\n----------------------------------------\n\nTITLE: Dependency List\nDESCRIPTION: This snippet lists Python package dependencies and version constraints required for the Chroma Core project. It includes packages for various functionalities such as cryptography, vector search, web framework, data validation, and more. These dependencies ensure the Chroma Core library functions correctly with specific versions of each package.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"bcrypt>=4.0.1\nchroma-hnswlib==0.7.6\nfastapi==0.115.9\ngraphlib_backport==1.0.3; python_version < '3.9'\ngrpcio>=1.58.0\nhttpx>=0.27.0\nimportlib-resources\njsonschema>=4.19.0\nkubernetes>=28.1.0\nmmh3>=4.0.1\nnumpy>=1.22.5\nonnxruntime>=1.14.1\nopentelemetry-api>=1.24.0\nopentelemetry-exporter-otlp-proto-grpc>=1.24.0\nopentelemetry-instrumentation-fastapi>=0.41b0\nopentelemetry-sdk>=1.24.0\norjson>=3.9.12\noverrides>=7.3.1\nposthog>=2.4.0\npydantic>=1.9\npypika>=0.48.9\nPyYAML>=6.0.0\nrich>=10.11.0\ntenacity>=8.2.3\ntokenizers>=0.13.2\ntqdm>=4.65.0\ntyper>=0.9.0\ntyping_extensions>=4.5.0\nuvicorn[standard]>=0.18.3\"\n```\n\n----------------------------------------\n\nTITLE: Resetting the Client - TypeScript\nDESCRIPTION: Resets the state of the ChromaClient instance by making an API call to the reset endpoint. Returns a promise that resolves when the reset operation is complete.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.reset();\n```\n\n----------------------------------------\n\nTITLE: Getting API Version - TypeScript\nDESCRIPTION: Retrieves the version of the Chroma API using the version method. Returns a promise resolving to the version string.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst version = await client.version();\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Actions in YAML for Chroma Authorization\nDESCRIPTION: This YAML snippet defines the available resource actions for authorization in Chroma. It includes actions for tenant management, database operations, and collection manipulations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/authz/README.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresource_type_action:\n  - tenant:create_tenant\n  - tenant:get_tenant\n  - db:create_database\n  - db:get_database\n  - db:reset\n  - db:list_collections\n  - collection:get_collection\n  - db:create_collection\n  - db:get_or_create_collection\n  - collection:delete_collection\n  - collection:update_collection\n  - collection:add\n  - collection:delete\n  - collection:get\n  - collection:query\n  - collection:peek\n  - collection:count\n  - collection:update\n  - collection:upsert\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma using pipx\nDESCRIPTION: Alternative installation method using pipx for systems that don't allow global pip installs\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/install.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\npipx install chromadb\n```\n\n----------------------------------------\n\nTITLE: Defining InclusionExclusionOperator Type for Chroma in Python\nDESCRIPTION: Defines a new Union type for the inclusion ($in) and exclusion ($nin) operators to be used in metadata filtering.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP_4_In_Nin_Metadata_Filters.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nInclusionExclusionOperator = Union[Literal[\"$in\"], Literal[\"$nin\"]]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for Chroma Observability Stack\nDESCRIPTION: Docker Compose configuration for setting up a Chroma server with OpenTelemetry Collector and Zipkin for observability.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  zipkin:\n    image: openzipkin/zipkin\n    ports:\n      - \"9411:9411\"\n    depends_on: [otel-collector]\n    networks:\n      - internal\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.111.0\n    command: [\"--config=/etc/otel-collector-config.yaml\"]\n    volumes:\n      - ${PWD}/otel-collector-config.yaml:/etc/otel-collector-config.yaml\n    networks:\n      - internal\n  server:\n    image: chromadb/chroma\n    volumes:\n      - chroma_data:/data\n    ports:\n      - \"8000:8000\"\n    networks:\n      - internal\n    environment:\n      - CHROMA_OPEN_TELEMETRY__ENDPOINT=http://otel-collector:4317/\n      - CHROMA_OPEN_TELEMETRY__SERVICE_NAME=chroma\n    depends_on:\n      - otel-collector\n      - zipkin\n\nnetworks:\n  internal:\n\nvolumes:\n  chroma_data:\n```\n\n----------------------------------------\n\nTITLE: Loading Data into ChromaDB\nDESCRIPTION: Batch loads the dataset into ChromaDB collection with support documents and metadata\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection.delete()\n\nfrom tqdm.notebook import tqdm\nbatch_size = 1000\nfor i in tqdm(range(0, len(dataset), batch_size)):\n    collection.add(ids=[str(i) for i in range(i, min(i + batch_size, len(dataset)))], documents=dataset['support'][i:i + batch_size], metadatas=[{'type': 'support'} for _ in range(i, min(i + batch_size, len(dataset)))])\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma with pip\nDESCRIPTION: Command to install the Chroma database using pip package manager.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\npip install chromadb\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installs necessary packages listed in the requirements.txt file to set up the environment for the project. This is crucial for ensuring that all dependencies are met for the subsequent code to run smoothly.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/compare.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\\n%pip install -r requirements.txt\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining LogWriter Interface in wal3\nDESCRIPTION: This code defines the `LogWriter` struct and its associated methods for opening and appending messages to the log. It demonstrates the asynchronous API for writing to the log.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/wal3/README.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npub struct LogWriter { ... }\n\nimpl LogWriter {\n    pub async fn open(options: LogWriterOptions) -> Result<Arc<Self>, Error>;\n    pub async fn append(self: &Arc<Self>, message: Message) -> Result<LogPosition, Error>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Mappings in YAML for Chroma RBAC\nDESCRIPTION: This YAML snippet defines role mappings for Chroma's Role-Based Access Control (RBAC). It specifies the actions allowed for different roles such as admin, write, db_read, collection_read, and collection_x_read.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/authz/README.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nroles_mapping:\n  admin:\n    actions:\n      [\n        db:list_collections,\n        collection:get_collection,\n        db:create_collection,\n        db:get_or_create_collection,\n        collection:delete_collection,\n        collection:update_collection,\n        collection:add,\n        collection:delete,\n        collection:get,\n        collection:query,\n        collection:peek,\n        collection:update,\n        collection:upsert,\n        collection:count,\n      ]\n  write:\n    actions:\n      [\n        db:list_collections,\n        collection:get_collection,\n        db:create_collection,\n        db:get_or_create_collection,\n        collection:delete_collection,\n        collection:update_collection,\n        collection:add,\n        collection:delete,\n        collection:get,\n        collection:query,\n        collection:peek,\n        collection:update,\n        collection:upsert,\n        collection:count,\n      ]\n  db_read:\n    actions:\n      [\n        db:list_collections,\n        collection:get_collection,\n        db:create_collection,\n        db:get_or_create_collection,\n        collection:delete_collection,\n        collection:update_collection,\n      ]\n  collection_read:\n    actions:\n      [\n        db:list_collections,\n        collection:get_collection,\n        collection:get,\n        collection:query,\n        collection:peek,\n        collection:count,\n      ]\n  collection_x_read:\n    actions:\n      [\n        collection:get_collection,\n        collection:get,\n        collection:query,\n        collection:peek,\n        collection:count,\n      ]\n```\n\n----------------------------------------\n\nTITLE: Global Installation on Windows\nDESCRIPTION: Installs Chroma CLI globally on Windows systems using PowerShell\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/install.md#2025-04-11_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/chroma-core/chroma/main/rust/cli/install/install.ps1'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication and Authorization Schema in YAML\nDESCRIPTION: Comprehensive YAML configuration defining the authentication and authorization structure for Chroma. Includes resource type actions, role mappings with granular permissions, and user definitions with token authentication. The schema supports various access levels from admin to collection-specific read access.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-10112023_Authorization.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresource_type_action: # This is here just for reference\n  - tenant:create_tenant\n  - tenant:get_tenant\n  - db:create_database\n  - db:get_database\n  - db:reset\n  - db:list_collections\n  - collection:get_collection\n  - db:create_collection\n  - db:get_or_create_collection\n  - collection:delete_collection\n  - collection:update_collection\n  - collection:add\n  - collection:delete\n  - collection:get\n  - collection:query\n  - collection:peek #from API perspective this is the same as collection:get\n  - collection:count\n  - collection:update\n  - collection:upsert\n\nroles_mapping:\n  admin:\n    actions:\n      [\n        \"tenant:create_tenant\",\n        \"tenant:get_tenant\",\n        \"db:create_database\",\n        \"db:get_database\",\n        \"db:reset\",\n        \"db:list_collections\",\n        \"collection:get_collection\",\n        \"db:create_collection\",\n        \"db:get_or_create_collection\",\n        \"collection:delete_collection\",\n        \"collection:update_collection\",\n        \"collection:add\",\n        \"collection:delete\",\n        \"collection:get\",\n        \"collection:query\",\n        \"collection:peek\",\n        \"collection:update\",\n        \"collection:upsert\",\n        \"collection:count\",\n      ]\n  write:\n    actions:\n      [\n        \"tenant:get_tenant\",\n        \"db:get_database\",\n        \"db:list_collections\",\n        \"collection:get_collection\",\n        \"db:create_collection\",\n        \"db:get_or_create_collection\",\n        \"collection:delete_collection\",\n        \"collection:update_collection\",\n        \"collection:add\",\n        \"collection:delete\",\n        \"collection:get\",\n        \"collection:query\",\n        \"collection:peek\",\n        \"collection:update\",\n        \"collection:upsert\",\n        \"collection:count\",\n      ]\n  db_read:\n    actions:\n      [\n        \"tenant:get_tenant\",\n        \"db:get_database\",\n        \"db:list_collections\",\n        \"collection:get_collection\",\n        \"db:create_collection\",\n        \"db:get_or_create_collection\",\n        \"collection:delete_collection\",\n        \"collection:update_collection\",\n      ]\n  collection_read:\n    actions:\n      [\n        \"tenant:get_tenant\",\n        \"db:get_database\",\n        \"db:list_collections\",\n        \"collection:get_collection\",\n        \"collection:get\",\n        \"collection:query\",\n        \"collection:peek\",\n        \"collection:count\",\n      ]\n  collection_x_read:\n    actions:\n      [\n        \"tenant:get_tenant\",\n        \"db:get_database\",\n        \"collection:get_collection\",\n        \"collection:get\",\n        \"collection:query\",\n        \"collection:peek\",\n        \"collection:count\",\n      ]\n    resources: [\"<UUID>\"] #not yet supported\nusers:\n  - id: user@example.com\n    role: admin\n    tenant: my_tenant\n    tokens:\n      - token: test-token-admin\n        secret: my_api_secret # not yet supported\n  - id: Anonymous\n    role: db_read\n    tokens:\n      - token: my_api_token\n        secret: my_api_secret\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration\nDESCRIPTION: YAML configuration for OpenTelemetry Collector, defining receivers, exporters, and service pipelines for tracing.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nexporters:\n  debug:\n  zipkin:\n    endpoint: \"http://zipkin:9411/api/v2/spans\"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [zipkin, debug]\n```\n\n----------------------------------------\n\nTITLE: Using Collection Get Method in Chroma\nDESCRIPTION: Illustrates using 'collection.get()' without empty dictionaries in the 'where' clause. Inputs are collection IDs and the method outputs filtered data. This snippet helps users avoid deprecated practices. Prerequisites include existing collection data and an active Chroma client connection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(ids=[\"id1\", \"id2\", \"id3\", ...])\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma with pnpm\nDESCRIPTION: Command to install Chroma and its default embedding library using pnpm package manager.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\npnpm add chromadb chromadb-default-embed \n```\n\n----------------------------------------\n\nTITLE: Running the chatbot application\nDESCRIPTION: This snippet runs the main chatbot application which handles user queries and interactions, leveraging Chroma and Google Gemini for processing.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/gemini/README.md#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Run the chatbot\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Defining LogReader Interface in wal3\nDESCRIPTION: This code defines the `LogReader` struct and its associated methods for opening, scanning, and fetching data from the log.  It demonstrates the asynchronous API for reading the log, including scanning from a specific position and fetching data by path.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/wal3/README.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n// Limits allows encoding things like offset, timestamp, and byte size limits for the read.\npub struct Limits { ... }\n\npub struct LogReader { ...  }\n\nimpl LogReader {\n    pub async fn open(options: LogReaderOptions) -> Result<Self, Error>;\n\n    pub async fn scan(\n        self: &Self,\n        from: LogPosition,\n        limits: Limits,\n    ) -> Result<(LogPosition, Path), Error>;\n\n    pub async fn fetch(\n        self: &Self,\n        path: &str,\n    ) -> Result<Vec<u8>, Error>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Local Observability\nDESCRIPTION: This command is used to start the local observability stack with OpenTelemetry and Zipkin using Docker. It builds the necessary images and runs the containers in detached mode. The command expects a Docker Compose file located at 'examples/observability/docker-compose.local-observability.yml'.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/observability/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f examples/observability/docker-compose.local-observability.yml up --build -d\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry for Chroma on Azure\nDESCRIPTION: Example content for the chroma.tfvars file to enable OpenTelemetry tracing for Chroma on Azure.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nchroma_otel_collection_endpoint          = \"api.honeycomb.com\"\nchroma_otel_service_name                 = \"chromadb\"\nchroma_otel_collection_headers           = \"{'x-honeycomb-team': 'abc'}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma Sample Applications via CLI\nDESCRIPTION: Command for installing specific Chroma sample applications. Users can specify the desired application name as an argument to install it locally.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/sample-apps.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nchroma install [app_name]\n```\n\n----------------------------------------\n\nTITLE: Connecting Python Client to Chroma Docker Container\nDESCRIPTION: Python code snippet to configure a Chroma client to connect to the server running in the Docker container on localhost:8000.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nchroma_client = chromadb.HttpClient(host='localhost', port=8000)\nchroma_client.heartbeat()\n```\n\n----------------------------------------\n\nTITLE: Counting Items in Collection in TypeScript\nDESCRIPTION: This snippet illustrates how to count items in a collection using the 'count' method, which returns a promise resolving to a number, representing the total number of items present in the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/collection.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await collection.count();\n```\n\n----------------------------------------\n\nTITLE: Installing ChromaDB Client with Embedding Libraries\nDESCRIPTION: Commands to install chromadb-client along with specific embedding libraries as separate dependencies.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb-client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For OpenAI embeddings\nnpm install chromadb-client openai\n\n# For default embeddings\nnpm install chromadb-client chromadb-default-embed\n\n# For Cohere embeddings\nnpm install chromadb-client cohere-ai\n```\n\n----------------------------------------\n\nTITLE: Exporting xAI API Key\nDESCRIPTION: This snippet demonstrates how to set the xAI API key as an environment variable before running the demo application.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/xai/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport XAI_API_KEY=[Your API key goes here]\n```\n\n----------------------------------------\n\nTITLE: Defining Log Position Structure in wal3\nDESCRIPTION: This code defines the `LogPosition` struct, which represents a point in the log. It includes the offset (sequence number of records) and the timestamp.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/wal3/README.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npub struct LogPosition {\n    // Offset is a sequence number indicating the total number of records inserted into the log.\n    pub offset: u64,\n    // Timestampl\n    pub timestamp; u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Credentials for API Requests\nDESCRIPTION: This snippet demonstrates how to use the retrieved basic credentials to perform an authorized API request to the Chroma service.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport CHROMA_AUTH=$(terraform output chroma_auth_basic | sed 's/\"//g')\ncurl -v http://$instance_public_ip:8000/api/v2/collections -u \"${CHROMA_AUTH}\"\n```\n\n----------------------------------------\n\nTITLE: Executing Vacuum Operation on Chroma Database\nDESCRIPTION: This command runs the vacuum utility on a Chroma database to optimize its size and performance. It requires specifying the path to the data directory. The operation may take several minutes for large databases and blocks all read and write operations during execution.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/vacuum.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchroma utils vacuum --path <your-data-directory>\n```\n\n----------------------------------------\n\nTITLE: Installing ChromaDB Bundled Package in Node.js\nDESCRIPTION: Example of importing the bundled ChromaDB package which includes all embedding libraries as dependencies. Suitable for simple projects needing a complete solution.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/examples/node/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chroma = require(\"chromadb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma CLI systemd Service\nDESCRIPTION: This snippet shows the systemd service configuration for running Chroma using the CLI. It defines the service type, user, working directory, and the command to start Chroma with specific parameters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/systemd-service/systemd-service.md#2025-04-11_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription = Chroma Service\nAfter = network.target\n\n[Service]\nType = simple\nUser = root\nGroup = root\nWorkingDirectory = /chroma\nExecStart = /usr/local/bin/chroma run --host 127.0.0.1 --port 8000 --path /chroma/data --log-path /var/log/chroma.log\n\n[Install]\nWantedBy = multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection - TypeScript\nDESCRIPTION: Deletes a collection by name using the deleteCollection method. Returns a promise that resolves when the collection is deleted.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.deleteCollection({\n name: \"my_collection\"\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Python Chroma Client\nDESCRIPTION: Code example showing how to disable telemetry by setting 'anonymized_telemetry' to False in the Chroma client settings. Demonstrates configuration for both standard Client and PersistentClient.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/telemetry.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.config import Settings\nclient = chromadb.Client(Settings(anonymized_telemetry=False))\n# or if using PersistentClient\nclient = chromadb.PersistentClient(path=\"/path/to/save/to\", settings=Settings(anonymized_telemetry=False))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Python Project\nDESCRIPTION: This snippet installs the necessary dependencies listed in a requirements file for the Python project prior to running the chatbot.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/xai/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Example wal3 cursor file paths\nDESCRIPTION: This shows example paths where cursors are stored in object storage. The cursor API needs to expose a compare-and-swap like interface for its update so that the client can move cursors safely. This means that when writing a cursor, you must provide a witness to the previous cursor.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/wal3/README.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nwal3/cursor/compaction.json\nwal3/cursor/emergency.json\n```\n\n----------------------------------------\n\nTITLE: Use Chroma Basic Auth Credentials\nDESCRIPTION: Uses the Chroma basic auth credentials to authenticate a request to the Chroma collections API. This demonstrates how to use basic auth to access protected resources.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl -v http://$instance_public_ip:8000/api/v2/collections -u \"${CHROMA_AUTH}\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in ChromaDB Monorepo\nDESCRIPTION: Command to install all dependencies across the monorepo packages using pnpm package manager.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/DEVELOP.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Dataset to Print Mismatches\nDESCRIPTION: This Python snippet iterates over a dataset to print questions with their respective supports and top results where the support differs from the top result. It requires a dataset with 'question', 'support', and 'documents' fields for the operation. Inputs are taken from the dataset and outputs the mismatched cases between support and top result.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor i, q in enumerate(dataset['question'][:20]):\n    support = dataset['support'][i]\n    top_result = question_results['documents'][i][0]\n\n    if support != top_result:\n        print(f\"Question: {q} \\nSupport: {support} \\nTop result: {top_result}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Chroma systemd Service\nDESCRIPTION: These bash commands reload the systemd daemon, enable the Chroma service to start on boot, and start the service immediately.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/systemd-service/systemd-service.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable chroma\nsudo systemctl start chroma\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Context Classes in Python\nDESCRIPTION: This snippet defines dataclasses for representing the authorization context, including user, resource, and action components. These classes form the core structure for authorization requests in the proposed system.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-10112023_Authorization.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass AuthzUser:\n    id: Optional[str]\n    attributes: Optional[Dict[str, Any]] = None\n    claims: Optional[Dict[str, Any]] = None\n\n\n@dataclass\nclass AuthzResource:\n    id: Optional[str]\n    type: Optional[str]\n    namespace: Optional[str]\n    attributes: Optional[Dict[str, Any]] = None\n\n\n@dataclass\nclass AuthzAction:\n    id: str\n    attributes: Optional[Dict[str, Any]] = None\n\n\n@dataclass\nclass AuthorizationContext:\n    user: AuthzUser\n    resource: AuthzResource\n    action: AuthzAction\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry via Environment Variable\nDESCRIPTION: Example of how to disable telemetry by setting the ANONYMIZED_TELEMETRY environment variable to False in a .env file when running Chroma with docker-compose.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/telemetry.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nANONYMIZED_TELEMETRY=False\n```\n\n----------------------------------------\n\nTITLE: Validating Embedding Configuration in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to validate an embedding function configuration using the `validateConfig` function from the `@chromadb/core` module. It passes a configuration object and the embedding function name to the validator.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/schemas/embedding_functions/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validateConfig } from '@chromadb/core';\n\n// Validate a configuration\nconst config = {\n    api_key_env_var: \"CHROMA_OPENAI_API_KEY\",\n    model_name: \"text-embedding-ada-002\"\n};\nvalidateConfig(config, \"openai\");\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for Chroma in Python\nDESCRIPTION: This snippet changes the current working directory to two levels up from the current location. This is likely done to ensure the correct path for subsequent operations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/test_get_collection_by_id.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\ncurrent_dir = os.getcwd()\nos.chdir(\"../../\")\n```\n\n----------------------------------------\n\nTITLE: Check Chroma Heartbeat\nDESCRIPTION: Verifies that the Chroma service is running by sending a request to the heartbeat endpoint. It retrieves the public IP address and then uses `curl` to check the service status.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport instance_public_ip=$(terraform output instance_public_ip | sed 's/\"//g')\ncurl -v http://$instance_public_ip:8000/api/v2/heartbeat\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Environment Variables for ChromaDB\nDESCRIPTION: Docker environment configuration required for testing, setting persistence and reset permissions for the ChromaDB container.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/DEVELOP.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n      - IS_PERSISTENT=TRUE\n      - ALLOW_RESET=True\n```\n\n----------------------------------------\n\nTITLE: Downloading Chroma Docker systemd Service File\nDESCRIPTION: This bash command downloads the pre-configured systemd service file for Chroma Docker from the GitHub repository and saves it to the appropriate location in the system.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/systemd-service/systemd-service.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/chroma-core/chroma/main/examples/deployments/systemd-service/chroma-docker.service \\\n  -O /etc/systemd/system/chroma.service\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Stack for Chroma Observability\nDESCRIPTION: Command to start the Docker Compose stack for Chroma with OpenTelemetry Collector and Zipkin.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\ndocker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Running Standalone Hugging Face Embedding Server with Docker\nDESCRIPTION: Command to run just the Hugging Face text embedding server as a standalone Docker container. This uses the BAAI/bge-small-en-v1.5 model for generating embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/hugging-face-server.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ndocker run -p 8001:80 -d -rm --name huggingface-embedding-server ghcr.io/huggingface/text-embeddings-inference:cpu-0.3.0 --model-id BAAI/bge-small-en-v1.5 --revision -main\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Cargo\nDESCRIPTION: This command allows running all tests in the project using Cargo, which is the standard build system and package manager for Rust. It assumes the Tilt stack is already started.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/worker/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Checking Chroma Instance Public IP\nDESCRIPTION: This snippet retrieves the public IP address assigned to the Chroma instance by Terraform, allowing further interactions with the service.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterraform output instance_public_ip\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Chroma Docs (Bash)\nDESCRIPTION: Commands to install dependencies and run the NextJS development server for the Chroma documentation project.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn # install\nyarn dev # run nextjs\n```\n\n----------------------------------------\n\nTITLE: Loading SciQ Dataset from HuggingFace\nDESCRIPTION: Loads and filters the SciQ dataset to include only questions with supporting evidence\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"sciq\", split=\"train\")\n\n# Filter the dataset to only include questions with a support\ndataset = dataset.filter(lambda x: x['support'] != '')\n\nprint(\"Number of questions with support: \", len(dataset))\n```\n\n----------------------------------------\n\nTITLE: Installing Inference for Local Deployment\nDESCRIPTION: Installs the Inference package and CLI tools via pip for local deployment. This is required to run Roboflow Inference on your own hardware instead of the cloud.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/roboflow.md#2025-04-11_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\npip install inference inference-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key for Document Chatbot\nDESCRIPTION: Instructions for creating a .env file to store the OpenAI API key, which is required to run the chatbot application.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/chat_with_your_documents/README.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPENAI_API_KEY=<your API key>\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Server with CLI\nDESCRIPTION: Command to start a Chroma server that persists data to a specific path. The server will store database files in the specified path and load them on start.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/persistent-client.md#2025-04-11_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nchroma run --path ./getting-started\n```\n\n----------------------------------------\n\nTITLE: Installing Nextest for Rust Testing\nDESCRIPTION: This snippet provides the command to install Nextest, which is recommended for faster test execution and better output in Rust projects. It also suggests downloading a prebuilt binary as an alternative.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/worker/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nextest\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform\nDESCRIPTION: This snippet initializes the Terraform environment, setting up the necessary files and directories to manage Terraform state effectively.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Documentation (Bash)\nDESCRIPTION: Commands to install dependencies and generate JavaScript documentation for the Chroma project.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn gen-js\n```\n\n----------------------------------------\n\nTITLE: Running the Chatbot in Python\nDESCRIPTION: This snippet initiates the chatbot application that utilizes Chroma for document embeddings, allowing users to interact with their documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/xai/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run the chatbot\npython rag_chat_with_your_docs.py\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Chroma Collection\nDESCRIPTION: Adds sample data to the collection, including embeddings, metadata, documents, and IDs.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    embeddings=[\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n        [1.1, 2.3, 3.2],\n        [4.5, 6.9, 4.4],\n    ],\n    metadatas=[\n        {\"status\": \"read\"},\n        {\"status\": \"unread\"},\n        {\"status\": \"read\"},\n        {\"status\": \"unread\"},\n        {\"status\": \"read\"},\n        {\"status\": \"unread\"},\n        {\"status\": \"read\"},\n        {\"status\": \"unread\"},\n    ],\n    documents=[\"A document that discusses domestic policy\", \"A document that discusses international affairs\", \"A document that discusses kittens\", \"A document that discusses dogs\", \"A document that discusses chocolate\", \"A document that is sixth that discusses government\", \"A document that discusses international affairs\", \"A document that discusses global affairs\"],\n    ids=[\"id1\", \"id2\", \"id3\", \"id4\", \"id5\", \"id6\", \"id7\", \"id8\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenLIT via pip\nDESCRIPTION: Command to install the OpenLIT package using pip. This installs the OpenLIT library which provides OpenTelemetry auto-instrumentation for Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/openlit.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openlit\n```\n\n----------------------------------------\n\nTITLE: Create Chroma Role in Postgres\nDESCRIPTION: This SQL command creates a new role named 'chroma' with login privileges and a specified password. The chroma role will be used to access the chroma database.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n\"create role chroma with login password 'chroma';\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: Initializes the Terraform working directory. This downloads the necessary provider plugins (like the Google Cloud provider) and sets up the Terraform state.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterraform init\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Docker Compose systemd Service\nDESCRIPTION: This snippet shows the systemd service configuration for running Chroma using Docker Compose. It defines the service dependencies, start and stop commands, and specifies the working directory.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/systemd-service/systemd-service.md#2025-04-11_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription = Chroma Docker Service\nAfter = network.target docker.service\nRequires = docker.service\n\n[Service]\nType = forking\nUser = root\nGroup = root\nWorkingDirectory = /home/admin/chroma\nExecStart = /usr/bin/docker compose up -d\nExecStop = /usr/bin/docker compose down\nRemainAfterExit = true\n\n[Install]\nWantedBy = multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates for Chroma Server using OpenSSL\nDESCRIPTION: Command to generate a self-signed SSL certificate for Chroma server. It creates a private key (serverkey.pem) and certificate (servercert.pem) valid for 365 days with RSA 2048-bit encryption.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/assets/CIP-01022024-test_self_signed.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 \\\n  -keyout ./serverkey.pem \\\n  -out ./servercert.pem \\\n  -subj \"/O=Chroma/C=US\" \\\n  -config chromadb/test/openssl.cnf\n```\n\n----------------------------------------\n\nTITLE: Building the TypeScript Client for Chroma\nDESCRIPTION: Commands to install dependencies and build the TypeScript sources into JavaScript. This process compiles the TypeScript code into a usable JavaScript package.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb-core/src/generated/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Describing Distributed ChromaDB Test Folder in Markdown\nDESCRIPTION: A Markdown comment explaining the purpose of a folder containing basic sanity checks for the distributed version of ChromaDB. It also mentions potential future expansion of tests for the distributed version.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/test/distributed/README.md#2025-04-11_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# This folder holds basic sanity checks for the distributed version of chromadb\\n# while it is in development. In the future, it may hold more extensive tests\\n# in tandem with the main test suite, targeted at the distributed version.\n```\n\n----------------------------------------\n\nTITLE: Loading example documents into Chroma\nDESCRIPTION: This snippet executes a Python script that loads example documents into a Chroma collection for later querying.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/gemini/README.md#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Load the example documents into Chroma\npython load_data.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Client for Basic Authentication - YAML\nDESCRIPTION: This code snippet shows the client configuration necessary for Basic Authentication within Chroma, including the credentials and the authentication provider.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nCHROMA_CLIENT_AUTH_PROVIDER=\"chromadb.auth.token.TokenAuthClientProvider\"\nCHROMA_CLIENT_AUTH_CREDENTIALS=\"admin:admin\"\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenLIT in Python\nDESCRIPTION: Code to initialize OpenLIT in a Python application. This enables OpenTelemetry auto-instrumentation for Chroma with just two lines of code, allowing the collection of telemetry data for LLM application observability.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/openlit.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport openlit\n\nopenlit.init()\n```\n\n----------------------------------------\n\nTITLE: Stop Postgres Service using Brew\nDESCRIPTION: This command stops the Postgres service on macOS using Homebrew services. It is used to shut down the database server when it is not needed.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"brew services stop postgresql\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Instance via SSH\nDESCRIPTION: This snippet outlines the command to connect to the Chroma instance using SSH with the generated private key.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nssh -i ./chroma-aws ubuntu@$instance_public_ip\n```\n\n----------------------------------------\n\nTITLE: Starting Secure Chroma Server with SSL/TLS\nDESCRIPTION: Command to start a Chroma server with HTTPS support using the generated SSL certificates. It configures Uvicorn to use the private key and certificate files while exposing the server on port 8443.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/assets/CIP-01022024-test_self_signed.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn chromadb.app:app --workers 1 --host 0.0.0.0 --port 8443 \\\n  --proxy-headers --log-config chromadb/log_config.yml --ssl-keyfile ./serverkey.pem --ssl-certfile ./servercert.pem\n```\n\n----------------------------------------\n\nTITLE: Building ChromaDB Packages\nDESCRIPTION: Commands for building all packages, core package only, or public packages in the monorepo.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/DEVELOP.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma via pip\nDESCRIPTION: Command to install Chroma through pip package manager, required for running a local persistent Chroma server with the TypeScript client.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/persistent-client.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\npip install chromadb\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma and Supervision Libraries\nDESCRIPTION: Install Chroma Python client and supervision library for image processing and vector database operations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/roboflow/embeddings.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!pip install chromadb supervision -q\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma with SSL Certificate Verification Disabled\nDESCRIPTION: Python code to connect to a secure Chroma server while disabling SSL certificate verification. This approach is not recommended for production as it skips validation of the server's certificate.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/assets/CIP-01022024-test_self_signed.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb import Settings\nimport chromadb\nclient = chromadb.HttpClient(host=\"localhost\",port=\"8443\",ssl=True, settings=Settings(chroma_server_ssl_verify=False))\nprint(client.heartbeat())\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Client for Chroma MCP Server\nDESCRIPTION: JSON configuration for setting up the Chroma MCP server with a cloud client. This client type connects to Chroma Cloud or other hosted instances, suitable for scalable and managed infrastructure.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/anthropic-mcp.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"chroma\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"chroma-mcp\",\n        \"--client-type\",\n        \"cloud\",\n        \"--tenant\",\n        \"your-tenant-id\",\n        \"--database\",\n        \"your-database-name\",\n        \"--api-key\",\n        \"your-api-key\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: Destroys all resources created by Terraform. This removes the Chroma instance and associated infrastructure from Google Cloud Compute.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterraform destroy -auto-approve\n```\n```\n\n----------------------------------------\n\nTITLE: SSH Access to Chroma Digital Ocean Droplet\nDESCRIPTION: Provides the command to SSH into the Chroma instance using the generated SSH key and the instance's public IP.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nssh -i ./chroma-do root@$instance_public_ip\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for Chroma Instance\nDESCRIPTION: This snippet generates an RSA SSH key pair for secure access to the Chroma instance on AWS EC2. The key is configured with proper permissions for secure usage.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t RSA -b 4096 -C \"Chroma AWS Key\" -N \"\" -f ./chroma-aws && chmod 400 ./chroma-aws\n```\n\n----------------------------------------\n\nTITLE: Measuring WAL Deletion Performance in SQLite\nDESCRIPTION: Test script to measure the latency impact of deleting rows from embeddings_queue table in SQLite. The experiment compares performance with different sync threshold values by creating and then deleting batches of embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-07102024_Write_Ahead_Log_Pruning_Vacuuming.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\nimport time\nimport numpy as np\nimport os\n\nDEFAULT_SYNC_THRESHOLD = 1000\nEMBEDDING_DIMENSION = 1024\n\ndef measure(conn, sync_threshold, repeat):\n  timings = []\n  for _ in range(repeat):\n    # Create\n    for i in range(sync_threshold):\n      encoded_embedding = np.random.rand(EMBEDDING_DIMENSION).astype(np.float32).tobytes()\n\n      conn.execute(\"\"\"\n      INSERT INTO embeddings_queue (operation, topic, id, vector, encoding, metadata)\n      VALUES (?, ?, ?, ?, ?, ?)\n      \"\"\", (0, \"test\", i, encoded_embedding, \"test\", \"test\"))\n      conn.commit()\n\n    # Delete\n    started_at = time.time()\n    conn.execute(\"DELETE FROM embeddings_queue WHERE seq_id <= ?\", (sync_threshold,))\n    conn.commit()\n    timings.append(time.time() - started_at)\n\n  return timings\n\ndef print_timings(timings, batch_size):\n  print(f\"Ran {len(timings)} delete queries deleting {batch_size} rows each\")\n  print(f\"p50: {np.percentile(timings, 50) * 1000}ms\")\n  print(f\"p90: {np.percentile(timings, 90) * 1000}ms\")\n  print(f\"p99: {np.percentile(timings, 99) * 1000}ms\")\n\n\ndef main():\n  os.remove(\"test.sqlite\")\n  conn = sqlite3.connect(\"test.sqlite\")\n  conn.execute(\"\"\"\n  CREATE TABLE embeddings_queue (\n      seq_id INTEGER PRIMARY KEY,\n      created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n      operation INTEGER NOT NULL,\n      topic TEXT NOT NULL,\n      id TEXT NOT NULL,\n      vector BLOB,\n      encoding TEXT,\n      metadata TEXT\n  )\n  \"\"\")\n\n  num_rows = DEFAULT_SYNC_THRESHOLD * 16\n\n  print(f\"hnsw:sync_threshold = {DEFAULT_SYNC_THRESHOLD}:\")\n  timings = measure(conn, DEFAULT_SYNC_THRESHOLD, 50)\n  print_timings(timings, DEFAULT_SYNC_THRESHOLD)\n\n  conn.execute(\"DELETE FROM embeddings_queue\")\n  conn.commit()\n\n  sync_threshold = DEFAULT_SYNC_THRESHOLD * 10\n  print(f\"hnsw:sync_threshold = {sync_threshold}:\")\n  timings = measure(conn, sync_threshold, 50)\n  print_timings(timings, sync_threshold)\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Computing and Plotting Density Function\nDESCRIPTION: Calculates and visualizes the density and cumulative density functions of distances\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nhist, bin_edges = np.histogram(flat_dists, bins=100, density=True)\ncumulative_density = np.cumsum(hist) / np.sum(hist)\n\nimport matplotlib.pyplot as plt\nplt.plot(bin_edges[1:], hist, label=\"Density\")\nplt.plot(bin_edges[1:], cumulative_density, label=\"Cumulative Density\")\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"Distance\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenLLMetry SDK via pip\nDESCRIPTION: This command installs the Traceloop SDK, which is required to use OpenLLMetry with Chroma. It should be run in a terminal or command prompt.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/openllmetry.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\npip install traceloop-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing ChromaDB and Cohere with pip\nDESCRIPTION: Installs the chromadb and cohere libraries using pip. This is a prerequisite step before using ChromaDB with Cohere embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/cohere/cohere_python.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"! pip install chromadb --quiet\\n! pip install cohere --quiet\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Chroma Migration CLI\nDESCRIPTION: This snippet provides terminal commands to install the Chroma migration tool and run the migration process, essential for users upgrading from previous versions of Chroma that used different metadata storage options.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\npip install chroma-migrate\nchroma-migrate\n```\n\n----------------------------------------\n\nTITLE: Multilingual Embedding with Cohere in Python\nDESCRIPTION: Demonstrates using Cohere's multilingual embedding model to generate embeddings for text in multiple languages including English, Arabic, German, French, Spanish, Portuguese, Italian, Chinese, and Hindi.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/cohere.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncohere_ef  = embedding_functions.CohereEmbeddingFunction(\n        api_key=\"YOUR_API_KEY\",\n        model_name=\"multilingual-22-12\")\n\nmultilingual_texts  = [ 'Hello from Cohere!', 'مرحبًا من كوهير!',\n        'Hallo von Cohere!', 'Bonjour de Cohere!',\n        '¡Hola desde Cohere!', 'Olá do Cohere!',\n        'Ciao da Cohere!', '您好，来自 Cohere！',\n        'कोहिअर से नमस्ते!'  ]\n\ncohere_ef(input=multilingual_texts)\n```\n\n----------------------------------------\n\nTITLE: SSH to Chroma Instance\nDESCRIPTION: Connects to the Chroma instance via SSH using the generated or provided SSH key. This allows you to access the instance's shell and perform administrative tasks.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nssh -i ./chroma-aws debian@$instance_public_ip\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chroma Instance Public IP\nDESCRIPTION: Outputs the public IP address of the deployed Chroma instance from Terraform state.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraform output instance_public_ip\n```\n\n----------------------------------------\n\nTITLE: Measuring Baseline Latency for Chroma Collection Operations\nDESCRIPTION: Test script to establish baseline latency for Chroma's collection.add() operations that trigger persistence, providing context for the performance impact of the proposed pruning method. The script measures the time taken for operations that cross the sync threshold.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-07102024_Write_Ahead_Log_Pruning_Vacuuming.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\nimport numpy as np\nimport time\n\nSYNC_THRESHOLD = 1000\n\nclient = chromadb.PersistentClient(\"./bench-baseline\")\ncollection = client.create_collection(\"test\")\n\ntimings = []\n\nfor batch_i in range(10):\n  ids = [f\"test-{i}\" for i in range(SYNC_THRESHOLD)]\n  embeddings = np.random.rand(SYNC_THRESHOLD, 1024).astype(np.float32)\n\n  # Add all except last id\n  collection.add(ids=ids[:-1], embeddings=embeddings[:-1])\n  print(\"added all except last id\")\n\n  # Should trigger the persist\n  started_at = time.time()\n  collection.add(ids=[ids[-1]], embeddings=[embeddings[-1].tolist()])\n  timings.append(time.time() - started_at)\n\n  collection.delete(ids=ids)\n\nprint(f\"p50: {np.percentile(timings, 50) * 1000}ms\")\nprint(f\"p90: {np.percentile(timings, 90) * 1000}ms\")\nprint(f\"p99: {np.percentile(timings, 99) * 1000}ms\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Embeddings with UMAP\nDESCRIPTION: Creates a 2D visualization of the high-dimensional embeddings using UMAP\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom umap.umap_ import UMAP\nimport umap.plot as umap_plot\nimport numpy as np\n\nmapper = UMAP().fit(support_embeddings)\numap_plot.points(mapper, values=np.array(flat_dists), show_legend=False, theme='inferno')\n```\n\n----------------------------------------\n\nTITLE: Installing DeepEval via pip\nDESCRIPTION: Command to install the DeepEval package, which is required to use the LLM evaluation framework with Chroma.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/deepeval.md#2025-04-11_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\npip install deepeval\n```\n\n----------------------------------------\n\nTITLE: Importing Python Modules for Chroma Benchmarking\nDESCRIPTION: This block imports necessary Python modules and extensions required for the Chroma benchmark notebook, such as chromadb, pandas, numpy, and OpenAI client libraries. It also loads environment variables essential for API integrations.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%load_ext autoreload\n%autoreload 2\n\nimport chromadb\nimport pandas as pd\nimport numpy as np\nimport json\nimport os\nimport dotenv\nfrom pathlib import Path\nfrom datetime import datetime\nfrom openai import OpenAI as OpenAIClient\nfrom anthropic import Anthropic as AnthropicClient\nfrom functions.llm import *\nfrom functions.embed import *\nfrom functions.chroma import *\nfrom functions.evaluate import *\nfrom functions.visualize import *\nfrom functions.types import *\n\ndotenv.load_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Generating Python Documentation (Bash)\nDESCRIPTION: Commands to install Python dependencies and generate Python documentation for the Chroma project.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\nyarn gen-python\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chroma Server IP from CloudFormation Stack\nDESCRIPTION: AWS CLI command to describe the CloudFormation stack and query for the outputs, which include the Chroma server's public IP address.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name my-chroma-stack --query 'Stacks[0].Outputs'\n```\n\n----------------------------------------\n\nTITLE: Get Chroma Basic Auth Credentials\nDESCRIPTION: Retrieves the Chroma basic auth credentials from Terraform output when basic auth is enabled.  These credentials are used to authenticate requests to the Chroma API.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterraform output chroma_auth_basic\n```\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Python project\nDESCRIPTION: This snippet installs the necessary dependencies listed in the requirements.txt file for the chatbot application.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/gemini/README.md#2025-04-11_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Install dependencies\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Variables for Chroma Deployment\nDESCRIPTION: Exports environment variables used by Terraform for configuring the Chroma deployment. Includes settings for Digital Ocean token, SSH keys, Chroma version, region, and authentication options.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_do_token=<DIGITALOCEAN_TOKEN>\nexport TF_ssh_public_key=\"./chroma-do.pub\"\nexport TF_ssh_private_key=\"./chroma-do\"\nexport TF_VAR_chroma_release=\"0.4.12\"\nexport TF_VAR_region=\"ams2\"\nexport TF_VAR_public_access=\"true\"\nexport TF_VAR_enable_auth=\"true\"\nexport TF_VAR_auth_type=\"token\"\nterraform apply -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Modifying list_collections API in Python for Chroma Project\nDESCRIPTION: This code snippet shows the proposed change to the list_collections API, adding an optional 'where' parameter of type Where for filtering collections. The change aims to allow users to filter collections based on metadata directly in the API call.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-1_Allow_Filtering_for_Collections.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef list_collections(self) -> Sequence[Collection]: # original\ndef list_collections(self, where: Optional[Where] = {}) # after the change\n```\n\n----------------------------------------\n\nTITLE: Computing Distance Distribution\nDESCRIPTION: Retrieves embeddings and computes nearest neighbor distances for density analysis\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsupport_embeddings = collection.get(include=['embeddings'])['embeddings']\ndists = collection.query(query_embeddings=support_embeddings, n_results=2, include=['distances'])\nflat_dists = [item for sublist in dists['distances'] for item in sublist[1:]]\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma with npm\nDESCRIPTION: Command to install Chroma and its default embedding library using npm package manager.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install --save chromadb chromadb-default-embed\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma with yarn\nDESCRIPTION: Command to install Chroma and its default embedding library using yarn package manager.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nyarn add chromadb chromadb-default-embed \n```\n\n----------------------------------------\n\nTITLE: Loading API Keys for Chroma Cloud\nDESCRIPTION: This Python snippet handles loading API keys from environment variables for interacting with external services like OpenAI and optionally Chroma Cloud. It directs users to input their own keys for accessing these services.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Embedding Model & LLM\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# If you want to use Chroma Cloud, uncomment and fill in the following:\n# CHROMA_TENANT = \"YOUR CHROMA TENANT ID\"\n# X_CHROMA_TOKEN = \"YOUR CHROMA API KEY\"\n# DATABASE_NAME = \"YOUR CHROMA DATABASE NAME\"\n```\n\n----------------------------------------\n\nTITLE: Clear System Cache in Chroma\nDESCRIPTION: This static method clears the system cache to allow new systems to be created for an existing path. It's primarily intended for testing purposes.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/python/client.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef clear_system_cache() -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CloudFormation Stack for Chroma\nDESCRIPTION: AWS CLI command to create a CloudFormation stack with custom parameters for instance type and SSH key pair.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --stack-name my-chroma-stack --template-url https://s3.amazonaws.com/public.trychroma.com/cloudformation/latest/chroma.cf.json \\\n --parameters ParameterKey=KeyName,ParameterValue=mykey \\\n ParameterKey=InstanceType,ParameterValue=m5.4xlarge\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply with Variables\nDESCRIPTION: Deploys the Chroma application to Google Cloud Compute using Terraform. This involves setting environment variables for project ID, SSH keys, Chroma release version, zone, and access control.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport TF_VAR_project_id=<your_project_id> #take note of this as it must be present in all of the subsequent steps\nexport TF_ssh_public_key=\"./chroma-aws.pub\" #path to the public key you generated above (or can be different if you want to use your own key)\nexport TF_ssh_private_key=\"./chroma-aws\" #path to the private key you generated above (or can be different if you want to use your own key) - used for formatting the Chroma data volume\nexport TF_VAR_chroma_release=\"0.4.9\" #set the chroma release to deploy\nexport TF_VAR_zone=\"us-central1-a\" # AWS region to deploy the chroma instance to\nexport TF_VAR_public_access=\"true\" #enable public access to the chroma instance on port 8000\nexport TF_VAR_enable_auth=\"true\" #enable basic auth for the chroma instance\nexport TF_VAR_auth_type=\"token\" #The auth type to use for the chroma instance (token or basic)\nterraform apply -auto-approve\n```\n```\n\n----------------------------------------\n\nTITLE: GCloud Authentication\nDESCRIPTION: Authenticates the gcloud CLI with your Google Cloud project. This is a prerequisite for Terraform to interact with your Google Cloud resources.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngcloud auth application-default login\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installs necessary Python packages including ChromaDB, NumPy, UMAP, Matplotlib, and the datasets library\nSOURCE: https://github.com/chroma-core/chroma/blob/main/chromadb/experimental/density_relevance.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n!{sys.executable} -m pip install chromadb numpy umap-learn[plot] matplotlib tqdm datasets\n```\n\n----------------------------------------\n\nTITLE: Rejected Alternative API for Getting Collections in Python\nDESCRIPTION: This code snippet illustrates a rejected alternative solution for getting collections. It shows a new API that was considered but ultimately not chosen to avoid increasing the learning curve for users.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-1_Allow_Filtering_for_Collections.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_collection(\nself,\nname: str,\nembedding_function: Optional[EmbeddingFunction] = ef.DefaultEmbeddingFunction(),\n) -> Collection:\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with pip\nDESCRIPTION: This Python snippet installs the required packages specified in the 'requirements.txt' file using pip. It is essential for setting up the necessary environment dependencies required to run the notebook.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/generate_benchmark.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Batch Loading Documents into Chroma Collection\nDESCRIPTION: Adds supporting evidence from the dataset to the Chroma collection in batches, with unique IDs and metadata\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/start_here.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.notebook import tqdm\\n\\nbatch_size = 1000\\nfor i in tqdm(range(0, len(dataset), batch_size), desc=\"Adding documents\"):\\n    collection.add(\\n        ids=[str(i) for i in range(i, min(i + batch_size, len(dataset)))],\\n        documents=dataset[\"support\"][i : i + batch_size],\\n        metadatas=[{\"type\": \"support\"} for _ in range(i, min(i + batch_size, len(dataset)))]\\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating CloudFormation Stack with OpenTelemetry Tracing\nDESCRIPTION: AWS CLI command to create a CloudFormation stack with custom parameters for OpenTelemetry tracing configuration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --stack-name my-chroma-stack --template-url https://s3.amazonaws.com/public.trychroma.com/cloudformation/latest/chroma.cf.json \\\n --parameters ParameterKey=ChromaOtelCollectionEndpoint,ParameterValue=\"api.honeycomb.com\" \\\n ParameterKey=ChromaOtelServiceName,ParameterValue=\"chromadb\" \\\n ParameterKey=ChromaOtelCollectionHeaders,ParameterValue=\"{'x-honeycomb-team': 'abc'}\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Infrastructure with Terraform\nDESCRIPTION: This snippet generates a visualization of the infrastructure created with Terraform, outputting the result as an SVG file. Graphviz is required for this operation.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nterraform graph | dot -Tsvg > graph.svg\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip\nDESCRIPTION: This snippet shows how to install the required Python packages using pip by referencing a requirements file. It is essential to ensure all dependencies are satisfied for the toolkit to function properly.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: SSH Key Generation\nDESCRIPTION: Generates an SSH key pair for accessing the Chroma instance. This is an optional step if you already have an existing SSH key you want to use.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/google-cloud-compute/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nssh-keygen -t RSA -b 4096 -C \"Chroma AWS Key\" -N \"\" -f ./chroma-aws && chmod 400 ./chroma-aws\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Identity Abstract Base Class in Python\nDESCRIPTION: This snippet defines an abstract base class for User Identity, which serves as a bridge between authentication and authorization. It provides a method to retrieve the user ID.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-10112023_Authorization.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserIdentity(EnforceOverrides, ABC):\n    @abstractmethod\n    def get_user_id(self) -> str:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Setting Roboflow API Key as Environment Variable\nDESCRIPTION: Sets the Roboflow API key as an environment variable, which is a more secure method for credential management compared to hardcoding in application code.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/roboflow.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nexport ROBOFLOW_API_KEY=YOUR_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Creating Environment with conda\nDESCRIPTION: This snippet illustrates how to create a new conda environment specifically for the Generative Benchmarking toolkit, ensuring isolated dependencies. Activating the environment allows for a dedicated workspace.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda env create -f environment.yml\nconda activate generative-benchmarking-env\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Document Chatbot\nDESCRIPTION: Bash commands for installing required dependencies, loading example documents into Chroma, and running the chatbot application.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/chat_with_your_documents/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npip install -r requirements.txt\n\n# Load the example documents into Chroma\npython load_data.py\n\n# Run the chatbot\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Deployment for Azure\nDESCRIPTION: Command to plan the Terraform deployment using the specified variable file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nterraform plan -var-file chroma.tfvars\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Authentication Credentials\nDESCRIPTION: This snippet retrieves the basic authentication credentials for Chroma from Terraform state.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nterraform output chroma_auth_basic\n```\n\n----------------------------------------\n\nTITLE: Sending a Heartbeat - TypeScript\nDESCRIPTION: Sends a heartbeat request to the Chroma API and retrieves the response using the heartbeat method. Returns a promise resolving to the heartbeat.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/reference/js/client.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst heartbeat = await client.heartbeat();\n```\n\n----------------------------------------\n\nTITLE: Installing ChromaDB Client Package in Node.js\nDESCRIPTION: Example of importing the ChromaDB client package which uses peer dependencies. Ideal for projects that already use specific versions of embedding libraries.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/examples/node/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chroma = require(\"chromadb-client\");\n```\n\n----------------------------------------\n\nTITLE: Testing SQLite Incremental Vacuum with Concurrent Queries in Python\nDESCRIPTION: This script performs an incremental vacuum on the test SQLite database while running concurrent read or write queries. It measures the duration of the vacuum operation and analyzes the impact on query performance.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-07102024_Write_Ahead_Log_Pruning_Vacuuming.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport multiprocessing\nfrom multiprocessing.synchronize import Event\nimport sqlite3\nimport time\nimport random\nimport string\n\ndef random_string(len):\n  return ''.join(random.choices(string.ascii_uppercase + string.digits, k=len))\n\ndef print_results(timings, vacuum_start, vacuum_end):\n  if len(timings) == 0:\n    return\n\n  durations = [end - start for (start, end) in timings]\n\n  durations.sort()\n  p95 = durations[int(len(durations) * 0.95)]\n  print(f\"Ran {len(durations)} concurrent queries\")\n  print(f\"Query duration 95th percentile: {p95 * 1000}ms\")\n  print(f\"Query duration max: {durations[-1] * 1000}ms\")\n\n  num_queries_during_vacuum = sum(1 for (start, end) in timings if start >= vacuum_start and end <= vacuum_end)\n  print(f\"Number of queries during vacuum: {num_queries_during_vacuum}\")\n\ndef query_read(ready_event: Event, shutdown_event: Event, timings_tx):\n  conn = sqlite3.connect(\"test.sqlite\")\n\n  ready_event.set()\n  timings = []\n  while not shutdown_event.is_set():\n    started_at = time.time()\n    conn.execute(\"SELECT COUNT(*) FROM test\")\n    timings.append((started_at, time.time()))\n\n  conn.close()\n  timings_tx.send(timings)\n\ndef query_write(ready_event: Event, shutdown_event: Event, timings_tx):\n  conn = sqlite3.connect(\"test.sqlite\", check_same_thread=False)\n\n  ready_event.set()\n  timings = []\n  while not shutdown_event.is_set():\n    started_at = time.time()\n    conn.execute(\"INSERT INTO test (name) VALUES (?)\", (random_string(32),))\n    conn.commit()\n    timings.append((started_at, time.time()))\n\n  conn.close()\n  timings_tx.send(timings)\n\n\ndef increment_vacuum():\n  conn = sqlite3.connect(\"test.sqlite\", timeout=0, check_same_thread=False)\n\n  conn.execute(\"DELETE FROM test\")\n  conn.commit()\n\n  ctx = multiprocessing.get_context(\"spawn\")\n  ready_event = ctx.Event()\n  shutdown_event = ctx.Event()\n  (timings_tx, timings_rx) = ctx.Pipe()\n  # can switch between concurrent read and writes\n  # process = ctx.Process(target=query_read, args=(ready_event, shutdown_event, timings_tx), daemon=True)\n  process = ctx.Process(target=query_write, args=(ready_event, shutdown_event, timings_tx), daemon=True)\n  process.start()\n  ready_event.wait()\n\n  vacuum_started_at = time.time()\n  r = conn.execute(\"PRAGMA incremental_vacuum\")\n  # https://stackoverflow.com/a/56412002\n  r.fetchall()\n  vacuum_finished_at = time.time()\n  print(f\"Vacuum took {(vacuum_finished_at - vacuum_started_at) * 1000}ms\")\n\n  conn.close()\n\n  shutdown_event.set()\n  process.join()\n\n  timings = timings_rx.recv()\n  print_results(timings, vacuum_started_at, vacuum_finished_at)\n\nif __name__ == '__main__':\n  increment_vacuum()\n```\n\n----------------------------------------\n\nTITLE: Specifying Rust Version Requirement\nDESCRIPTION: This note indicates the minimum Rust version required for the project, ensuring proper feature support and compatibility.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/worker/README.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nUse rust 1.81.0 or greater.\n```\n\n----------------------------------------\n\nTITLE: Building Core Package in ChromaDB\nDESCRIPTION: Command to build only the core package in the monorepo.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/DEVELOP.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:core\n```\n\n----------------------------------------\n\nTITLE: Logging into Confident AI Platform\nDESCRIPTION: Command to log into the Confident AI platform (DeepEval's visualization platform) to access evaluation results and analytics.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/deepeval.md#2025-04-11_snippet_3\n\nLANGUAGE: CLI\nCODE:\n```\ndeepeval login\n```\n\n----------------------------------------\n\nTITLE: Destroying Azure Resources with Terraform\nDESCRIPTION: Command to destroy all Azure resources created by Terraform using the specified variable file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nterraform destroy -var-file chroma.tfvars\n```\n\n----------------------------------------\n\nTITLE: Loading Necessary Python Modules\nDESCRIPTION: Loads essential Python modules and functions required for data manipulation and visualization. This includes packages like pandas, numpy, and custom utilities for handling data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/sample_apps/generative_benchmarking/compare.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\\n%load_ext autoreload\\n%autoreload 2\\n\\nimport pandas as pd\\nimport numpy as np\\nimport json\\nimport os\\nfrom pathlib import Path\\nfrom functions.utils import *\\nfrom functions.visualize import *\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Chroma CLI systemd Service File\nDESCRIPTION: This bash command downloads the pre-configured systemd service file for Chroma CLI from the GitHub repository and saves it to the appropriate location in the system.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/systemd-service/systemd-service.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/chroma-core/chroma/main/examples/deployments/systemd-service/chroma-cli.service \\\n  -O /etc/systemd/system/chroma.service\n```\n\n----------------------------------------\n\nTITLE: Installing the Chroma Client Package in a Project\nDESCRIPTION: Command to install the Chroma client package in a consuming project. This adds the package as a dependency in the project's package.json file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/packages/chromadb-core/src/generated/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install PATH_TO_GENERATED_PACKAGE --save\n```\n\n----------------------------------------\n\nTITLE: Querying AWS EC2 AMIs\nDESCRIPTION: This snippet queries the AWS EC2 service for Ubuntu JAMMY AMIs using the AWS CLI. It filters images by owner and sorts them by creation date to return the latest image ID.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/aws-terraform/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 099720109477 is Canonical\naws ec2 describe-images \\\n    --owners 099720109477 \\\n    --filters 'Name=name,Values=ubuntu/images/*/ubuntu-jammy*' \\\n    --query 'sort_by(Images,&CreationDate)[-1].ImageId'\n```\n\n----------------------------------------\n\nTITLE: Building Public Packages in ChromaDB\nDESCRIPTION: Command to build only the public packages in the monorepo.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/js/DEVELOP.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:packages\n```\n\n----------------------------------------\n\nTITLE: Defining Pull Request Label Prefixes for Chroma Contributions\nDESCRIPTION: This code block lists the standardized prefixes that should be used when labeling pull requests for Chroma. Each prefix indicates the type of change being proposed, helping maintainers categorize and prioritize contributions.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/overview/contributing.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nENH: Enhancement, new functionality\nBUG: Bug fix\nDOC: Additions/updates to documentation\nTST: Additions/updates to tests\nBLD: Updates to the build process/scripts\nPERF: Performance improvement\nTYP: Type annotations\nCLN: Code cleanup\nCHORE: Maintenance and other tasks that do not modify source or test files\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Terraform Infrastructure for Chroma Deployment\nDESCRIPTION: Generates a visual representation of the Terraform infrastructure as an SVG file using the graph command and GraphViz.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterraform graph | dot -Tsvg > graph.svg\n```\n\n----------------------------------------\n\nTITLE: Removing Chroma Data Directory\nDESCRIPTION: This snippet shows how to delete the Chroma data directory if you need to reset the example or remove previous documents.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/xai/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf chroma_data\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Credentials Environment Variable\nDESCRIPTION: Sets the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the service account key file\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/gcp.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/your/service-account-key.json\"\n```\n\n----------------------------------------\n\nTITLE: Global Installation using cURL\nDESCRIPTION: Installs Chroma CLI globally using a shell script downloaded via cURL\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/install.md#2025-04-11_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/chroma-core/chroma/main/rust/cli/install/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Implementing CLI Vacuum Command for Chroma Database\nDESCRIPTION: A new CLI command to perform database vacuuming operations, checking for sufficient disk space before running. This command prunes the embeddings queue and runs SQLite's VACUUM command to free up disk space.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-07102024_Write_Ahead_Log_Pruning_Vacuuming.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchroma vacuum --path ./chroma_data\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chroma Basic Auth Credentials\nDESCRIPTION: Outputs the basic authentication credentials for the Chroma instance from Terraform state when basic auth is enabled.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nterraform output chroma_auth_basic\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Configuration\nDESCRIPTION: Terraform variables configuration for enabling OpenTelemetry tracing with external collection endpoint\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/gcp.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nchroma_otel_collection_endpoint          = \"api.honeycomb.com\"\nchroma_otel_service_name                 = \"chromadb\"\nchroma_otel_collection_headers           = \"{'x-honeycomb-team': 'abc'}\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Persistence Directory in Shell\nDESCRIPTION: This shell command deletes the persistence directory 'db' and its contents, cleaning up any data the previous operations stored on disk. It ensures that the environment is returned to its original state, which is useful in testing or repeated run scenarios.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/local_persistence.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Clean up\n! rm -rf db\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Jupyter Notebook - Python\nDESCRIPTION: This snippet changes the working directory in a Jupyter notebook environment. It's necessary to ensure that the code operates in the correct directory context and can access the necessary files or modules within that directory. It does not produce any output.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/server_side_embeddings/huggingface/test.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%cd ../../../\n```\n\n----------------------------------------\n\nTITLE: Creating Test SQLite Database with Python\nDESCRIPTION: This script creates a test SQLite database file named 'test.sqlite' with a specified target size. It sets up incremental vacuuming and inserts random string data into a table.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/cip/CIP-07102024_Write_Ahead_Log_Pruning_Vacuuming.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\nimport string\nimport random\n\nTARGET_SIZE_BYTES = 1000000000\nTEXT_COLUMN_SIZE = 32\n\ndef random_string(len):\n  return ''.join(random.choices(string.ascii_uppercase + string.digits, k=len))\n\nconn = sqlite3.connect(\"test.sqlite\")\nconn.execute(\"PRAGMA auto_vacuum = INCREMENTAL\")\nconn.execute(\"CREATE TABLE test (id INTEGER PRIMARY KEY, name TEXT)\")\n\nbatch_size = 10000\ninsert_query = \"INSERT INTO test (name) VALUES (?)\"\ndata = [(random_string(TEXT_COLUMN_SIZE),) for _ in range(batch_size)]\n\nnum_rows = TARGET_SIZE_BYTES // (TEXT_COLUMN_SIZE + 4) # int is variable width, assume average 4 bytes\n\nfor _ in range(num_rows // batch_size):\n    conn.executemany(insert_query, data)\n    conn.commit()\n\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Using Chroma Auth Token for API Requests\nDESCRIPTION: Demonstrates how to use the Chroma auth token in a curl request to access the collections API endpoint.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport CHROMA_AUTH=$(terraform output chroma_auth_token | sed 's/\"//g')\ncurl -v http://$instance_public_ip:8000/api/v2/collections -H \"Authorization: Bearer ${CHROMA_AUTH}\"\n```\n\n----------------------------------------\n\nTITLE: Example Repository Folder Structure\nDESCRIPTION: Proposed organizational structure for example notebooks and demonstrations in the Chroma Core project, categorized by functionality, deployment, and integration types\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfolder structure\n- basic_functionality - notebooks with simple walkthroughs\n- advanced_functionality - notebooks with advanced walkthroughs\n- deployments - how to deploy places\n- use_with - chroma + ___, where ___ can be langchain, nextjs, etc\n- data - common data for examples\n```\n\n----------------------------------------\n\nTITLE: GCP Project Configuration Variables\nDESCRIPTION: Terraform variables configuration for GCP project settings including project ID, region, and zone\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/gcp.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nproject_id=\"<your project ID>\"\nregion=\"<your region>\"\nzone=\"<your zone>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Cleanup Command\nDESCRIPTION: Command to destroy the GCP resources and remove the deployment\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/gcp.md#2025-04-11_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nterraform destroy -var-file chroma.tfvars\n```\n\n----------------------------------------\n\nTITLE: Custom Machine Type Configuration\nDESCRIPTION: Terraform variable configuration for customizing the GCP machine type\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/gcp.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmachine_type = \"e2-medium\"\n```\n\n----------------------------------------\n\nTITLE: Atlas Migrate Apply Command\nDESCRIPTION: This command applies the generated migration script to the database using Atlas. The `--url` flag specifies the connection string to the Postgres database. `sslmode=disable` is used to disable SSL for local development.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n\"atlas --env dev migrate apply --url \\\"postgres://chroma:chroma@localhost:5432/chroma?sslmode=disable\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Install Postgres on Mac using Brew\nDESCRIPTION: This command installs Postgres version 14 on macOS using the Homebrew package manager. It's a prerequisite for setting up the local database for Chroma development.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"brew install postgresql@14\"\n```\n\n----------------------------------------\n\nTITLE: Atlas Migrate Diff Command\nDESCRIPTION: This command uses Atlas to generate a migration script by comparing the current database schema with the desired schema defined in the code. The `--env dev` flag specifies the development environment configuration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n\"atlas migrate diff --env dev\"\n```\n\n----------------------------------------\n\nTITLE: Connect to Postgres via psql\nDESCRIPTION: This command opens the psql terminal, allowing you to connect to the Postgres server. This step is a prerequisite to create the Chroma role and database.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"psql postgres\"\n```\n\n----------------------------------------\n\nTITLE: Create Chroma Database in Postgres\nDESCRIPTION: This SQL command creates a new database named 'chroma'.  The Chroma application will use this database to store its data.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n\"create database chroma;\"\n```\n\n----------------------------------------\n\nTITLE: Grant Superuser Privileges to Chroma Role\nDESCRIPTION: This SQL command grants superuser privileges to the 'chroma' role. Superuser privileges are needed for database creation and other administrative tasks.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n\"alter role chroma with superuser;\"\n```\n\n----------------------------------------\n\nTITLE: Set POSTGRES_HOST Environment Variable\nDESCRIPTION: This command sets the `POSTGRES_HOST` environment variable to 'localhost'. It specifies the hostname or IP address of the Postgres server.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n\"export POSTGRES_HOST=localhost\"\n```\n\n----------------------------------------\n\nTITLE: Set POSTGRES_PORT Environment Variable\nDESCRIPTION: This command sets the `POSTGRES_PORT` environment variable to 5432. It specifies the port number on which the Postgres server is listening.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n\"export POSTGRES_PORT=5432\"\n```\n\n----------------------------------------\n\nTITLE: Start Postgres Service using Brew\nDESCRIPTION: This command starts the Postgres service on macOS using Homebrew services. It is used to make the database server available for local connections.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/go/README.md#2025-04-11_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"brew services start postgresql\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Nextest\nDESCRIPTION: This snippet shows the command to execute most tests in a Rust project using Nextest, facilitating fast segmentation and performance during continuous integration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/worker/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo nextest run\n```\n\n----------------------------------------\n\nTITLE: Downloading Roboflow Dataset with Python\nDESCRIPTION: Install Roboflow library and download COCO 128 dataset using Roboflow API. Requires an API key for authentication and dataset retrieval.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/use_with/roboflow/embeddings.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install roboflow -q\n\nAPI_KEY = \"\"\n\nfrom roboflow import Roboflow\n\nrf = Roboflow(api_key=API_KEY)\nproject = rf.workspace(\"team-roboflow\").project(\"coco-128\")\ndataset = project.version(2).download(\"yolov8\")\n```\n\n----------------------------------------\n\nTITLE: Building the Rust Project\nDESCRIPTION: This command builds the Rust project using Cargo, compiling the code into an executable or library according to the project's configuration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/worker/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Object Store Layout Example for wal3\nDESCRIPTION: This text shows an example of how wal3 organizes data in an object store, utilizing prefixes for fragments and manifests. It demonstrates a bucketing strategy to optimize performance with object storage services like S3.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/wal3/README.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nwal3/log/Bucket=    0/FragmentSeqNo=00000.parquet\nwal3/log/Bucket=    0/FragmentSeqNo=00001.parquet\nwal3/log/Bucket=    0/FragmentSeqNo=00002.parquet\n...\nwal3/log/Bucket=    0/FragmentSeqNo=04999.parquet\nwal3/log/Bucket= 5000/FragmentSeqNo=05000.parquet\n...\nwal3/log/Bucket=10000/FragmentSeqNo=10000.parquet\n...\nwal3/log/Bucket=15000/FragmentSeqNo=15000.parquet\n...\nwal3/manifest/MANIFEST.json\nwal3/snapshot/SNAPSHOT.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Nextest\nDESCRIPTION: This snippet details how to run tests that require additional resources using a specific profile in Nextest, useful for integration scenarios within a Tilt stack.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/worker/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo nextest run --profile k8s_integration\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Requirements\nDESCRIPTION: A comprehensive list of Python package dependencies with their minimum version requirements for the Chroma project. Includes libraries for HTTP requests (httpx), numerical operations (numpy), telemetry (opentelemetry), JSON handling (orjson), and various utilities.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/python/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttpx>=0.27.0\nnumpy >= 1.22.5\nopentelemetry-api>=1.2.0\nopentelemetry-exporter-otlp-proto-grpc>=1.2.0\nopentelemetry-sdk>=1.2.0\norjson>=3.9.12\noverrides >= 7.3.1\nposthog >= 2.4.0\npydantic>=1.9\nPyYAML>=6.0.0\ntenacity>=8.2.3\ntyping_extensions >= 4.5.0\n```\n\n----------------------------------------\n\nTITLE: Manifest Tree Structure Visualization\nDESCRIPTION: Illustrates the multi-level tree structure used for manifest compaction and log scaling, showing root, interior nodes, and leaf fragments\nSOURCE: https://github.com/chroma-core/chroma/blob/main/rust/wal3/README.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nroot\n│\n├── snapshot\n│   ├── snapshot\n│   │   ├── fragment_1\n│   │   ├── fragment_2\n│   │   └── fragment_3\n│   └── snapshot\n│       ├── fragment_4\n│       ├── fragment_5\n│       └── fragment_6\n├── fragment_7\n├── fragment_8\n└── fragment_9\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies\nDESCRIPTION: This snippet defines the Python dependencies required for the project. It specifies the package name and version, including comments about compatibility issues with specific versions of protobuf, opentelemetry, and potential future updates for hypothesis.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/requirements_dev.txt#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"black==23.3.0 # match what's in pyproject.toml\nbuild\ngrpcio-tools==1.67.1 # Later version not compatible with protobuf 4.25.5\nhttpx\nhypothesis==6.112.2 # TODO: Resolve breaking changes and bump version\nhypothesis[numpy]==6.112.2 # TODO: Resolve breaking changes and bump version\nmypy-protobuf\npre-commit\nprotobuf==5.28.0 # Later version not compatible with opentemetry 1.27.0\npsutil\npytest\npytest-asyncio\npytest-xdist\nsetuptools_scm\ntypes-protobuf\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Chroma Core Project\nDESCRIPTION: This requirements file specifies the Python packages required for the Chroma Core project. It includes packages for FastAPI web framework, testing with pytest and hypothesis, OpenTelemetry instrumentation, database query building with pypika, and the uvicorn server for running the application.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/clients/python/requirements_dev.txt#2025-04-11_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nbuild>=1.0.3\nfastapi>=0.95.2\nhypothesis\nhypothesis[numpy]\nopentelemetry-instrumentation-fastapi>=0.41b0\npypika==0.48.9\npytest\nuvicorn[standard]==0.18.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Hosted Client for Chroma MCP Server\nDESCRIPTION: JSON configuration for setting up the Chroma MCP server with a self-hosted client. This client type connects to a user-owned Chroma server, providing full control over data and infrastructure.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/frameworks/anthropic-mcp.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"chroma\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"chroma-mcp\",\n        \"--client-type\",\n        \"http\",\n        \"--host\",\n        \"http://localhost:8000\",\n        \"--port\",\n        \"8000\",\n        \"--custom-auth-credentials\",\n        \"username:password\",\n        \"--ssl\",\n        \"true\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Chroma Client in Python\nDESCRIPTION: Demonstrates the import and instantiation of different Chroma clients in Python. No specific dependencies are mentioned, but 'chromadb' must be installed. The purpose is to interact with Chroma services using various client types. The dependencies include a Chroma server instance running.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/migration.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n\nclient = chromadb.Client()\n# or\nclient = chromadb.EphemeralClient()\n# or\nclient = chromadb.PersistentClient()\n```\n\n----------------------------------------\n\nTITLE: Querying Collection with Embeddings in Chroma - Python\nDESCRIPTION: This snippet shows how to query a collection in Chroma while including embeddings, documents, metadatas, and distances. This is important for retrieving comprehensive result data including otherwise omitted large embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/updates/troubleshooting.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresults = collection.query(\n    query_texts=\"hello\",\n    n_results=1,\n    include=[\"embeddings\", \"documents\", \"metadatas\", \"distances\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chroma Server with HTTP Client\nDESCRIPTION: Python code demonstrating how to create both synchronous and asynchronous HTTP clients to connect to a Chroma server. The example shows configuration with host and port parameters.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/python-http-client.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport chromadb\n# Example setup of the client to connect to your chroma server\nclient = chromadb.HttpClient(host='localhost', port=8000)\n\n# Or for async usage:\nasync def main():\n    client = await chromadb.AsyncHttpClient(host='localhost', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Validating Embedding Configuration in Python\nDESCRIPTION: This Python snippet demonstrates how to validate an embedding function configuration using the `validate_config` function from the `chromadb.utils.embedding_functions.schemas` module. It shows how to pass a configuration dictionary and the embedding function name to the validator.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/schemas/embedding_functions/README.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.embedding_functions.schemas import validate_config\n\n# Validate a configuration\nconfig = {\n    \"api_key_env_var\": \"CHROMA_OPENAI_API_KEY\",\n    \"model_name\": \"text-embedding-ada-002\"\n}\nvalidate_config(config, \"openai\")\n```\n\n----------------------------------------\n\nTITLE: Inclusion Operator ($in) for Metadata Filtering in JSON\nDESCRIPTION: Demonstrates how to use the $in operator to filter metadata based on a list of possible values. This returns results where the metadata field matches any value in the provided list.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/querying-collections/metadata-filtering.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata_field\": {\n    \"$in\": [\"value1\", \"value2\", \"value3\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Utility Methods in Python\nDESCRIPTION: Demonstrates utility methods available for collections in Python, including peeking at the first 10 items, counting items, and renaming the collection.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/guides/usage-guide.md#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncollection.peek() # returns a list of the first 10 items in the collection\ncollection.count() # returns the number of items in the collection\ncollection.modify(name=\"new_name\") # Rename the collection\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Settings in Terraform Variables\nDESCRIPTION: Example content for the chroma.tfvars file, defining Azure resource group, location, and machine type.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nresource_group_name = \"your-azure-resource-group-name\"\nlocation            = \"your-location\"\nmachine_type        = \"Standard_B1s\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Inference Server\nDESCRIPTION: Launches an Inference server locally that will run in the background. The server accepts HTTP requests from RoboflowEmbeddingFunction to calculate CLIP embeddings.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/integrations/embedding-models/roboflow.md#2025-04-11_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\ninference server start\n```\n\n----------------------------------------\n\nTITLE: Verifying Chroma Deployment with Heartbeat Check\nDESCRIPTION: Sends a curl request to the Chroma instance's heartbeat endpoint to verify successful deployment and accessibility.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/deployments/do-terraform/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport instance_public_ip=$(terraform output instance_public_ip | sed 's/\"//g')\ncurl -v http://$instance_public_ip:8000/api/v2/heartbeat\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with OR Condition on Content\nDESCRIPTION: Shows how to retrieve documents that match either of two content conditions using the $or operator.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/where_filtering.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection.get(where_document={\"$or\": [{\"$contains\": \"global affairs\"}, {\"$contains\": \"domestic policy\"}]})\n```\n\n----------------------------------------\n\nTITLE: Initializing Chroma Client in TypeScript\nDESCRIPTION: TypeScript code to initialize a Chroma client with the IP address of the AWS instance and the default port.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChromaClient } from \"chromadb\";\n\nconst chromaClient = new ChromaClient({\n    path: \"<Your Chroma instance IP>\",\n    port: 8000\n})\nchromaClient.heartbeat()\n```\n\n----------------------------------------\n\nTITLE: Exporting AWS Credentials in Bash\nDESCRIPTION: Commands to export AWS access key ID and secret access key as environment variables for AWS CLI configuration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=**\\*\\***\\*\\*\\***\\*\\***\nexport AWS_SECRET_ACCESS_KEY=****\\*\\*****\\*\\*****\\*\\*****\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Trace for Chroma Observability\nDESCRIPTION: cURL command to call the Chroma heartbeat endpoint and generate a sample trace for viewing in Zipkin.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/containers/docker.md#2025-04-11_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\ncurl http://localhost:8000/api/v2/heartbeat\n```\n\n----------------------------------------\n\nTITLE: Creating CloudFormation Stack for Chroma\nDESCRIPTION: AWS CLI command to create a CloudFormation stack using the Chroma template, deploying Chroma on AWS.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --stack-name my-chroma-stack --template-url https://s3.amazonaws.com/public.trychroma.com/cloudformation/latest/chroma.cf.json\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Region in Bash\nDESCRIPTION: Command to set the AWS region using an environment variable for AWS CLI configuration.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/aws.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Server\nDESCRIPTION: Command to start a Chroma server with a specified data persistence path.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/python-http-client.md#2025-04-11_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nchroma run --path [path/to/persist/data]\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma Server Package\nDESCRIPTION: Command to install the full Chroma package on the server side using pip.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/run-chroma/python-http-client.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\npip install chromadb\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Deployment for Azure\nDESCRIPTION: Command to apply the Terraform deployment using the specified variable file.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nterraform apply -var-file chroma.tfvars\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public IP Address of Azure Instance\nDESCRIPTION: Command to output the public IP address of the deployed Azure instance.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nterraform output -raw public_ip_address\n```\n\n----------------------------------------\n\nTITLE: Initializing Image Loader in Python\nDESCRIPTION: Creates an ImageLoader for loading images from a filesystem.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom chromadb.utils.data_loaders import ImageLoader\ndata_loader = ImageLoader()\n```\n\n----------------------------------------\n\nTITLE: Adding Image Data to Multimodal Collection in Chroma\nDESCRIPTION: Adds image data to a multimodal collection using numpy arrays.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/embeddings/multimodal.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection.add(\n    ids=['id1', 'id2', 'id3'],\n    images=[...] # A list of numpy arrays representing images\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure CLI\nDESCRIPTION: Command to log in to Azure using the Azure CLI.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma using pip\nDESCRIPTION: Installs the Chroma package using Python's pip package manager\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/cli/install.md#2025-04-11_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\npip install chromadb\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform for Azure Deployment\nDESCRIPTION: Command to initialize Terraform in the current directory.\nSOURCE: https://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/production/cloud-providers/azure.md#2025-04-11_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nterraform init\n```"
  }
]