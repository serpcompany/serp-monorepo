[
  {
    "owner": "appwrite",
    "repo": "sdk-for-kotlin",
    "content": "TITLE: Create Appwrite Database Collection in Java\nDESCRIPTION: This code snippet creates a database collection in Appwrite using the Java SDK. It requires the `io.appwrite` dependency. The snippet initializes the Appwrite client with the endpoint, project ID, and API key, and then uses the `Databases` service to create a collection with the provided database ID, collection ID, name, permissions, and security settings. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-collection.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createCollection(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"<NAME>\", // name\n    listOf(\"read(\"any\")\"), // permissions (optional)\n    false, // documentSecurity (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create Datetime Attribute with Appwrite Java SDK\nDESCRIPTION: This snippet creates a datetime attribute in an Appwrite database collection using the Java SDK. It requires the Appwrite Java SDK and the necessary project credentials. The code initializes the Appwrite client with endpoint, project ID, and API key, then uses the Databases service to create the datetime attribute. It handles both successful results and errors through a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-datetime-attribute.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createDatetimeAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"\", // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Appwrite Database Collection in Kotlin\nDESCRIPTION: This snippet demonstrates updating an Appwrite database collection using the Kotlin SDK. It requires the `io.appwrite` dependency. The code initializes an Appwrite client with endpoint, project ID, and API key, then utilizes the `updateCollection` method from the `Databases` service to update an existing collection. A CoroutineCallback handles the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-collection.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateCollection(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"<NAME>\", // name\n    listOf(\"read(\"any\")\"), // permissions (optional)\n    false, // documentSecurity (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Email with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it creates an email using the `createEmail` method of the `Messaging` service. The method takes parameters such as `messageId`, `subject`, `content`, and lists for `topics`, `users`, `targets`, `cc`, `bcc`, and `attachments`.  It also includes options for setting the email as a draft, using HTML content, and scheduling the email. A CoroutineCallback is used to handle the response and print any errors or the result.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-email.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createEmail(\n    \"<MESSAGE_ID>\", // messageId\n    \"<SUBJECT>\", // subject\n    \"<CONTENT>\", // content\n    listOf(), // topics (optional)\n    listOf(), // users (optional)\n    listOf(), // targets (optional)\n    listOf(), // cc (optional)\n    listOf(), // bcc (optional)\n    listOf(), // attachments (optional)\n    false, // draft (optional)\n    false, // html (optional)\n    \"\", // scheduledAt (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Messaging Topic with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a new messaging topic using the Appwrite SDK for Kotlin. It initializes the Appwrite client with the endpoint, project ID, and API key, and then calls the `createTopic` method to create a new topic. The `topicId`, `name`, and `subscribe` parameters are used to configure the new topic.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-topic.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.createTopic(\n    topicId = \"<TOPIC_ID>\",\n    name = \"<NAME>\",\n    subscribe = listOf(\"any\") // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Database Attributes with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list database attributes using the Appwrite Kotlin SDK. It requires the Appwrite SDK as a dependency. The code initializes the Appwrite client, then uses the `Databases` service to list attributes for a specified database and collection. The `databaseId` and `collectionId` parameters are required. The result or error is handled by a callback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/list-attributes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.listAttributes(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Documents from Appwrite Database in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client, configures the endpoint and project ID, and uses the `Databases` service to list documents from a specified database and collection.  It utilizes a `CoroutineCallback` to handle asynchronous results and any potential errors during the process.  The `databaseId` and `collectionId` parameters must be provided, and an optional list of queries can be passed.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/list-documents.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nDatabases databases = new Databases(client);\n\ndatabases.listDocuments(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification using Appwrite Messaging (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to send a push notification using Appwrite's Messaging service. It initializes the Appwrite client with the endpoint, project ID, and API key. The `createPush` method is then called to send a notification with customizable parameters, including message ID, title, body, topics, users, targets, data, action, image, icon, sound, color, tag, badge, draft status, schedule, content availability, criticality, and priority.  A CoroutineCallback is used to handle the result, printing the result or printing the error if it fails.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-push.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createPush(\n    \"<MESSAGE_ID>\", // messageId\n    \"<TITLE>\", // title (optional)\n    \"<BODY>\", // body (optional)\n    listOf(), // topics (optional)\n    listOf(), // users (optional)\n    listOf(), // targets (optional)\n    mapOf( \"a\" to \"b\" ), // data (optional)\n    \"<ACTION>\", // action (optional)\n    \"[ID1:ID2]\", // image (optional)\n    \"<ICON>\", // icon (optional)\n    \"<SOUND>\", // sound (optional)\n    \"<COLOR>\", // color (optional)\n    \"<TAG>\", // tag (optional)\n    0, // badge (optional)\n    false, // draft (optional)\n    \"\", // scheduledAt (optional)\n    false, // contentAvailable (optional)\n    false, // critical (optional)\n    MessagePriority.NORMAL, // priority (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet demonstrates how to send a push notification using the Appwrite Messaging service in Kotlin. It first initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the `messaging.createPush` method to send a push notification, setting parameters such as message ID, title, body, topics, users, targets, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt, contentAvailable, critical, and priority. The parameters are mostly optional and can be customized according to the notification requirements.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-push.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.createPush(\n    messageId = \"<MESSAGE_ID>\",\n    title = \"<TITLE>\", // optional\n    body = \"<BODY>\", // optional\n    topics = listOf(), // optional\n    users = listOf(), // optional\n    targets = listOf(), // optional\n    data = mapOf( \"a\" to \"b\" ), // optional\n    action = \"<ACTION>\", // optional\n    image = \"[ID1:ID2]\", // optional\n    icon = \"<ICON>\", // optional\n    sound = \"<SOUND>\", // optional\n    color = \"<COLOR>\", // optional\n    tag = \"<TAG>\", // optional\n    badge = 0, // optional\n    draft = false, // optional\n    scheduledAt = \"\", // optional\n    contentAvailable = false, // optional\n    critical = false, // optional\n    priority = \"normal\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Float Attribute in Appwrite Database using Kotlin\nDESCRIPTION: This snippet demonstrates how to create a float attribute within an Appwrite database collection using the Kotlin SDK. It uses the `createFloatAttribute` method of the `Databases` service. It takes database ID, collection ID, attribute key, required status, min, max, default values, and an array flag as parameters. A callback is defined to handle the result or any errors that occur during the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-float-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ndatabases.createFloatAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    0, // min (optional)\n    0, // max (optional)\n    0, // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite User with Argon2 Hashing in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client, sets the endpoint, project ID, and API key. It then uses the `Users` service to create a new user with Argon2 hashing, requiring a user ID, email, and password.  An optional name can also be provided. The function uses a CoroutineCallback to handle the result or any errors during user creation. You must replace the placeholders with your actual Appwrite endpoint, project ID, API key, user ID, and user details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-argon2user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createArgon2User(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"password\", // password\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating File in Appwrite Storage\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, create a Storage service instance, and upload a file to a specified bucket with specific read permissions. It uses CoroutineCallback for asynchronous operation and handles potential errors during the file creation process. The code requires a valid endpoint, project ID, bucket ID, file ID, and the file path.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/create-file.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.models.InputFile;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.createFile(\n    \"<BUCKET_ID>\", // bucketId\n    \"<FILE_ID>\", // fileId\n    InputFile.fromPath(\"file.png\"), // file\n    listOf(\"read(\\\"any\\\")\"), // permissions (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Argon2 User with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create a user with Argon2 password hashing using the Appwrite Kotlin SDK. It calls the `createArgon2User` method of the `Users` service, providing the user ID, email, password, and an optional name. Replace the placeholder values with the actual data for the user you want to create.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-argon2user.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.createArgon2User(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"password\",\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Document in Appwrite using Kotlin\nDESCRIPTION: This snippet creates a document in a specified database and collection using the Appwrite Kotlin SDK. It requires the database ID, collection ID, document ID, and the data to be stored in the document.  The permissions parameter is optional and allows specifying read and write access.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-document.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.createDocument(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    documentId = \"<DOCUMENT_ID>\",\n    data = mapOf( \"a\" to \"b\" ),\n    permissions = listOf(\"read(\"any\")\") // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating User (Kotlin)\nDESCRIPTION: This Kotlin snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Users service to create a new user with MD5 hashing for the password.  Replace `<REGION>.cloud.appwrite.io/v1`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, `<USER_ID>`, and `<NAME>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-m-d5user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.createMD5User(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"password\",\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Create Function Variable with Appwrite Java SDK\nDESCRIPTION: This code snippet demonstrates creating a function variable in Appwrite using the Java SDK. It initializes the Appwrite client with necessary credentials and then uses the `createVariable` method of the `Functions` service to create a new variable associated with a specific function. The function requires the `appwrite` dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/create-variable.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.createVariable(\n    \"<FUNCTION_ID>\", // functionId\n    \"<KEY>\", // key\n    \"<VALUE>\", // value\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting an Appwrite Database Index in Kotlin\nDESCRIPTION: This snippet demonstrates deleting an index from an Appwrite database collection. It requires the Appwrite Kotlin SDK. The code initializes an Appwrite client, then calls the `deleteIndex` method on the `Databases` service, passing in the database ID, collection ID, and index key. The result is then printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/delete-index.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.deleteIndex(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Team Membership with Appwrite Kotlin SDK\nDESCRIPTION: This snippet shows how to create a team membership using Appwrite's Kotlin SDK. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and session. It utilizes the `createMembership` function of the `Teams` service, passing the team ID, roles, email, user ID, phone, URL, and name as parameters. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/create-membership.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.createMembership(\n    \"<TEAM_ID>\", // teamId\n    listOf(), // roles\n    \"email@example.com\", // email (optional)\n    \"<USER_ID>\", // userId (optional)\n    \"+12065550100\", // phone (optional)\n    \"https://example.com\", // url (optional)\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Appwrite Function with Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to create and trigger an Appwrite function execution using the Kotlin SDK. It configures the client with the endpoint and project ID, then utilizes the `Functions` service to execute the function.  Parameters such as function ID, body, asynchronous execution flag, path, method, headers, and scheduled time can be specified.  The result is stored in the `response` variable.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/create-execution.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval functions = Functions(client)\n\nval response = functions.createExecution(\n    functionId = \"<FUNCTION_ID>\",\n    body = \"<BODY>\", // optional\n    async = false, // optional\n    path = \"<PATH>\", // optional\n    method = \"GET\", // optional\n    headers = mapOf( \"a\" to \"b\" ), // optional\n    scheduledAt = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating IP Attribute in Kotlin\nDESCRIPTION: This snippet demonstrates creating an IP attribute in an Appwrite database collection using the Kotlin SDK. It calls the `createIpAttribute` method on the Databases service and requires database and collection IDs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-ip-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.createIpAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"\", // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating MSG91 Provider Config with Appwrite in Kotlin\nDESCRIPTION: This snippet updates an existing MSG91 provider configuration within the Appwrite messaging service. It requires the Appwrite Kotlin SDK as a dependency and uses parameters like provider ID, name, enabled status, template ID, sender ID, and auth key. The output is the response from the update operation. The API key needs write permissions to the project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-msg91provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateMsg91Provider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    templateId = \"<TEMPLATE_ID>\", // optional\n    senderId = \"<SENDER_ID>\", // optional\n    authKey = \"<AUTH_KEY>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Appwrite Database Relationship Attribute in Kotlin\nDESCRIPTION: This code snippet shows how to update a relationship attribute in an Appwrite database using the Kotlin SDK. It requires the `io.appwrite` dependency. It initializes the Appwrite client with the endpoint, project ID, and API key.  The `updateRelationshipAttribute` function is then called with parameters for database ID, collection ID, the current attribute key, the desired `onDelete` behavior, and the new key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-relationship-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.updateRelationshipAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    onDelete = \"cascade\", // optional\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Telesign Provider with Appwrite in Kotlin\nDESCRIPTION: This Kotlin code creates a Telesign messaging provider using the Appwrite SDK. It requires the Appwrite SDK as a dependency. The snippet initializes the Appwrite client with endpoint, project ID, and API key. It uses the Messaging service to create the Telesign provider with parameters like providerId, name, from number, customerId, apiKey, and enabled status, along with a callback for handling results or errors. The 'from' number, customerId, apiKey, and enabled status are optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-telesign-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createTelesignProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"+12065550100\", // from (optional)\n    \"<CUSTOMER_ID>\", // customerId (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Document in Appwrite Database - Kotlin\nDESCRIPTION: This code creates a new document in an Appwrite database. It initializes an Appwrite client with the endpoint and project ID, then uses the `Databases` service to create a document in the specified database and collection. The `createDocument` method takes the database ID, collection ID, document ID, document data (as a map), and permissions as parameters. It uses a CoroutineCallback to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nDatabases databases = new Databases(client);\n\ndatabases.createDocument(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"<DOCUMENT_ID>\", // documentId\n    mapOf( \"a\" to \"b\" ), // data\n    listOf(\"read(\"any\")\"), // permissions (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Full Example: Initialize Client and Create User - Kotlin\nDESCRIPTION: A complete example demonstrating the initialization of the Appwrite client and the creation of a new user. It imports necessary Appwrite classes and showcases the typical setup and usage pattern.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.services.Users\nimport io.appwrite.ID\n\nsuspend fun main() {\n    val client = Client(context)\n      .setEndpoint(\"https://[HOSTNAME_OR_IP]/v1\") // Your API Endpoint\n      .setProject(\"5df5acd0d48c2\") // Your project ID\n      .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key\n      .setSelfSigned(true) // Use only on dev mode with a self-signed SSL cert\n\n    val users = Users(client)\n    val user = users.create(\n        user = ID.unique(),\n        email = \"email@example.com\",\n        phone = \"+123456789\",\n        password = \"password\",\n        name = \"Walter O'Brien\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Account Recovery with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates creating an account recovery request using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the endpoint and project ID, and then uses the Account service's `createRecovery` method to initiate the password recovery process. The callback handles the result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-recovery.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.createRecovery(\n    \"email@example.com\", // email\n    \"https://example.com\", // url\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Central Repository - Gradle\nDESCRIPTION: Configures the Gradle build file to include Maven Central as a repository to fetch the Appwrite SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {      \n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Account Password in Kotlin\nDESCRIPTION: This snippet updates the account password using the Appwrite Account service. It requires the initialized Appwrite client and provides the new and old passwords. Dependencies: io.appwrite.services.Account\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-password.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = account.updatePassword(\n    password = \"\",\n    oldPassword = \"password\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Function Deployments with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Kotlin SDK to list function deployments. It initializes the Appwrite client with the necessary credentials (endpoint, project ID, and API key) and then uses the `Functions` service to list the deployments for a specified function ID, with optional query parameters and a search term.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/list-deployments.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.listDeployments(\n    functionId = \"<FUNCTION_ID>\",\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Textmagic Provider with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client and updates a Textmagic provider using the Messaging service. It requires the Appwrite SDK for Kotlin.  The `updateTextmagicProvider` function is called with the provider ID and optional parameters. The API key, endpoint, and project ID must be configured.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-textmagic-provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateTextmagicProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    username = \"<USERNAME>\", // optional\n    apiKey = \"<API_KEY>\", // optional\n    from = \"<FROM>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Create Mailgun Provider in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with endpoint, project ID, and API key, and then uses the Messaging service to create a Mailgun provider. It includes parameters for provider ID, name, API key, domain, region, sender details, and enabling status. The result or error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-mailgun-provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createMailgunProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"<API_KEY>\", // apiKey (optional)\n    \"<DOMAIN>\", // domain (optional)\n    false, // isEuRegion (optional)\n    \"<FROM_NAME>\", // fromName (optional)\n    \"email@example.com\", // fromEmail (optional)\n    \"<REPLY_TO_NAME>\", // replyToName (optional)\n    \"email@example.com\", // replyToEmail (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update User Email with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a user's email address using the Appwrite Kotlin SDK. It initializes the Appwrite client with the necessary endpoint, project ID, and API key, then calls the `updateEmail` method on the `Users` service. The `updateEmail` method requires the user's ID and the new email address as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-email.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.updateEmail(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in Kotlin\nDESCRIPTION: This snippet shows how to update a user's password using the Appwrite Kotlin SDK. It requires a configured Appwrite client and the user's ID. Replace `<USER_ID>` with the actual user ID and the empty string with the desired new password. Ensure that the API key has the necessary permissions to update user passwords.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-password.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval users = Users(client)\n\nval response = users.updatePassword(\n    userId = \"<USER_ID>\",\n    password = \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a QR Code with Appwrite Avatars in Kotlin\nDESCRIPTION: This snippet demonstrates how to generate a QR code using the Appwrite Avatars service. It uses the `getQR` method with the required `text` parameter and optional parameters such as `size`, `margin`, and `download`.  The 'text' parameter sets the content of the QR code.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-q-r.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = avatars.getQR(\n    text = \"<TEXT>\",\n    size = 1, // optional\n    margin = 0, // optional\n    download = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Create Msg91 Messaging Provider with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet shows how to initialize the Appwrite client and create a new Msg91 messaging provider using the `createMsg91Provider` method from the Appwrite Kotlin SDK. It requires your Appwrite endpoint, project ID, API key, provider ID, name, template ID, sender ID, and auth key.  The `enabled` parameter is set to false by default.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-msg91provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.createMsg91Provider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    templateId = \"<TEMPLATE_ID>\", // optional\n    senderId = \"<SENDER_ID>\", // optional\n    authKey = \"<AUTH_KEY>\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Email - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it creates a Messaging service instance and sends an email using the `createEmail` method. The `createEmail` function takes parameters for the message ID, subject, content, and optional lists for topics, users, targets, CC, BCC, attachments, draft status, HTML status, and a scheduled date/time.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-email.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.createEmail(\n    messageId = \"<MESSAGE_ID>\",\n    subject = \"<SUBJECT>\",\n    content = \"<CONTENT>\",\n    topics = listOf(), // optional\n    users = listOf(), // optional\n    targets = listOf(), // optional\n    cc = listOf(), // optional\n    bcc = listOf(), // optional\n    attachments = listOf(), // optional\n    draft = false, // optional\n    html = false, // optional\n    scheduledAt = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update User Email with Appwrite Kotlin SDK\nDESCRIPTION: This snippet updates a user's email address using the Appwrite Kotlin SDK. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. It calls the `updateEmail` function with the user ID and the new email address. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-email.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateEmail(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Messaging Topic with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to create a messaging topic using the Appwrite Kotlin SDK. It first initializes the Appwrite client with the endpoint, project ID, and API key.  Then, it instantiates the `Messaging` service and calls the `createTopic` method with the topic ID, name, and a list of subscriptions. It uses a CoroutineCallback to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-topic.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createTopic(\n    \"<TOPIC_ID>\", // topicId\n    \"<NAME>\", // name\n    listOf(\"any\"), // subscribe (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage Bucket in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a storage bucket using the Appwrite Kotlin SDK. It configures the bucket ID, name, permissions, file security, enabled status, maximum file size, allowed file extensions, compression, encryption and antivirus. The bucketId and name are required parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/create-bucket.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = storage.createBucket(\n    bucketId = \"<BUCKET_ID>\",\n    name = \"<NAME>\",\n    permissions = listOf(\"read(\"any\")\"), // optional\n    fileSecurity = false, // optional\n    enabled = false, // optional\n    maximumFileSize = 1, // optional\n    allowedFileExtensions = listOf(), // optional\n    compression = \"none\", // optional\n    encryption = false, // optional\n    antivirus = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Appwrite User in Kotlin\nDESCRIPTION: This code snippet shows how to initialize the Appwrite client and use the Users service to create a new user. The client is configured with the endpoint, project ID, and API key. The user is created with a unique ID and optional parameters like email, phone, password and name. A callback function is used to handle the result and potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.create(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email (optional)\n    \"+12065550100\", // phone (optional)\n    \"\", // password (optional)\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Messaging Provider in Kotlin with Appwrite\nDESCRIPTION: This snippet demonstrates how to delete a messaging provider using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the endpoint, project ID, and API key, and then calls the `deleteProvider` method on the `Messaging` service with the provider ID. A CoroutineCallback is used to handle the success or failure of the API call.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/delete-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.deleteProvider(\n    \"<PROVIDER_ID>\", // providerId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Twilio Provider with Appwrite Messaging in Java\nDESCRIPTION: This code initializes an Appwrite client with endpoint, project ID, and API key. It then uses the Messaging service to create a new Twilio provider with the given provider ID, name, Twilio account SID, auth token, and optional 'from' number and enabled status. A callback is used to handle the result or any potential errors during the creation process. The callback prints the result to the console or prints the stack trace if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-twilio-provider.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createTwilioProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"+12065550100\", // from (optional)\n    \"<ACCOUNT_SID>\", // accountSid (optional)\n    \"<AUTH_TOKEN>\", // authToken (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Account Recovery Request with Kotlin SDK\nDESCRIPTION: This snippet uses the Appwrite Kotlin SDK to create an account recovery request. It requires the user's email address and a URL where the user can complete the recovery process. The email parameter specifies the email address for account recovery and the url parameter defines where the user will be redirected for password reset. \nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-recovery.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.createRecovery(\n    email = \"email@example.com\",\n    url = \"https://example.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appwrite Client Initialization and Email Token Creation in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID, and then uses the Account service to create an email token for a user. The email token can be used for password reset or email verification. It requires the Appwrite Kotlin SDK dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-email-token.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval response = account.createEmailToken(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    phrase = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Message with Appwrite Messaging in Java\nDESCRIPTION: This snippet demonstrates deleting a message using the Appwrite Messaging service in Java. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it creates a Messaging service instance and calls the `delete` method to remove a message specified by its ID. The result or any error is handled in the CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/delete.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.delete(\n    \"<MESSAGE_ID>\", // messageId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client and then use the `Users` service to list users. It configures the endpoint, project ID, and API key for authentication. The `users.list` method retrieves a list of users, with optional query and search parameters. A CoroutineCallback is used to handle asynchronous results and potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/list.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.list(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a File in Appwrite Storage using Kotlin\nDESCRIPTION: This snippet demonstrates how to create a file in Appwrite storage using the Storage service.  It requires a bucket ID, a file ID, the file itself (provided as an InputFile object from the specified path), and optionally a list of permissions for the file. Make sure the `file.png` exists in the root path.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/create-file.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = storage.createFile(\n    bucketId = \"<BUCKET_ID>\",\n    fileId = \"<FILE_ID>\",\n    file = InputFile.fromPath(\"file.png\"),\n    permissions = listOf(\"read(\\\"any\\\")\") // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Email Message with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet shows how to update an email message using the Appwrite Messaging service in Kotlin. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the `updateEmail` method of the `Messaging` service to update an email message. The parameters include the message ID, optional topics, users, targets, subject, content, draft status, HTML format, CC recipients, BCC recipients, scheduled time and attachments.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-email.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateEmail(\n    messageId = \"<MESSAGE_ID>\",\n    topics = listOf(), // optional\n    users = listOf(), // optional\n    targets = listOf(), // optional\n    subject = \"<SUBJECT>\", // optional\n    content = \"<CONTENT>\", // optional\n    draft = false, // optional\n    html = false, // optional\n    cc = listOf(), // optional\n    bcc = listOf(), // optional\n    scheduledAt = \"\", // optional\n    attachments = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Enum Attribute in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a `Databases` service instance and calls the `createEnumAttribute` method to create a new enum attribute within a specified database and collection. The snippet demonstrates how to interact with Appwrite's Databases service from a Kotlin application. Note that databaseId, collectionId, key, and elements must be properly populated to achieve the intended result.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-enum-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.createEnumAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    elements = listOf(),\n    required = false,\n    default = \"<DEFAULT>\", // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update MFA Authenticator in Kotlin with Appwrite\nDESCRIPTION: This code snippet updates the MFA authenticator using the Appwrite Kotlin SDK.  It initializes the client, sets the endpoint and project ID, and then calls the `updateMfaAuthenticator` method on the Account service. It requires the Appwrite SDK as a dependency.  The 'type' parameter specifies the type of authenticator (e.g., TOTP), and the 'otp' parameter is the One-Time Password.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticatorType\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateMfaAuthenticator(\n    type =  AuthenticatorType.TOTP,\n    otp = \"<OTP>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating User in Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client with the endpoint, project ID, and API key. It then uses the `Users` service to create a new user with the specified user ID, email, phone number, password, and name. The `userId` is required and must be unique.  Other fields are optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.create(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\", // optional\n    phone = \"+12065550100\", // optional\n    password = \"\", // optional\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite IP Attribute in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and uses it to create a new IP attribute within a specified database collection. It sets the Appwrite endpoint, project ID, and API key. The `createIpAttribute` method is then called with the database ID, collection ID, attribute key, required status, default value, array status, and a callback to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-ip-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createIpAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"\", // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create Email Password Session with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates creating a new email and password session with the Appwrite Account service using the Kotlin SDK.  It requires the io.appwrite dependency. It takes an email and password as input and prints the session details if successful or the error if it fails.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-email-password-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createEmailPasswordSession(\n    \"email@example.com\", // email\n    \"password\", // password\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating User Target with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates creating a user target using the `createTarget` method of the Users service.  It requires the `userId`, `targetId`, `providerType`, and `identifier`. `providerId` and `name` are optional parameters. The `providerType` uses the enum MessagingProviderType to specify the provider. Replace the placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-target.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.createTarget(\n    userId = \"<USER_ID>\",\n    targetId = \"<TARGET_ID>\",\n    providerType =  MessagingProviderType.EMAIL,\n    identifier = \"<IDENTIFIER>\",\n    providerId = \"<PROVIDER_ID>\", // optional\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Account Phone with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a user's phone number using the Appwrite Kotlin SDK. It initializes the Appwrite client, configures the endpoint and project ID, and calls the `updatePhone` method on the Account service. The phone and password parameters are required.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-phone.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updatePhone(\n    phone = \"+12065550100\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Account Email with Appwrite Kotlin SDK\nDESCRIPTION: This Kotlin code updates the email address of an Appwrite user account. It initializes the Appwrite client with the endpoint, project ID, and an optional session. It then uses the Account service to call the `updateEmail` function, requiring the user's new email address and password. The response from Appwrite will indicate the success or failure of the operation.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-email.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateEmail(\n    email = \"email@example.com\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Textmagic Provider in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a Textmagic provider using the Messaging service. It requires the initialized Appwrite client and Messaging service. Replace the placeholders with your provider ID, name, and other relevant information. Optional parameters are shown with default values or comments.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-textmagic-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.createTextmagicProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    from = \"+12065550100\", // optional\n    username = \"<USERNAME>\", // optional\n    apiKey = \"<API_KEY>\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Documents with Appwrite Databases in Kotlin\nDESCRIPTION: This snippet demonstrates how to list documents from a specified database and collection using the Appwrite Databases service. It requires the database ID and collection ID as parameters. An empty list is passed to the optional queries parameter.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/list-documents.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.listDocuments(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating User Preferences in Appwrite (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to update user preferences in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the `Users` service to call the `updatePrefs` method, passing the user ID and a map of preferences to update. The `userId` and API keys need to be set for this snippet to work.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-prefs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.updatePrefs(\n    userId = \"<USER_ID>\",\n    prefs = mapOf( \"a\" to \"b\" )\n)\n```\n\n----------------------------------------\n\nTITLE: Update User Preferences with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client and uses the Users service to update a user's preferences. It requires the Appwrite endpoint, project ID, and API key. The userId and preferences map are also required. The updatePrefs method is called with these parameters, and the result is handled in a callback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updatePrefs(\n    \"<USER_ID>\", // userId\n    mapOf( \"a\" to \"b\" ), // prefs\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Index Kotlin\nDESCRIPTION: This snippet demonstrates how to create an index in a specified database collection using the Appwrite Kotlin SDK.  It takes databaseId, collectionId, key, type, attributes, and orders as parameters. Make sure to replace placeholder values with your actual database and collection details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-index.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = databases.createIndex(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    type =  IndexType.KEY,\n    attributes = listOf(),\n    orders = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SMS Message with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to create an SMS message using the Appwrite Messaging service.  It uses the messaging.createSms method and provides configurable parameters such as messageId, content, topics, users, targets, draft, and scheduledAt.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-sms.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.createSms(\n    messageId = \"<MESSAGE_ID>\",\n    content = \"<CONTENT>\",\n    topics = listOf(), // optional\n    users = listOf(), // optional\n    targets = listOf(), // optional\n    draft = false, // optional\n    scheduledAt = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update User Phone Number with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client and updates the phone number of a user using the `updatePhone` method. It requires the Appwrite endpoint, project ID, API key, user ID, and the new phone number. The callback handles the asynchronous response, printing either the success result or any errors encountered.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-phone.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updatePhone(\n    \"<USER_ID>\", // userId\n    \"+12065550100\", // number\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating FCM Provider with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to create an FCM (Firebase Cloud Messaging) provider in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Messaging service to create the FCM provider, passing parameters such as provider ID, name, service account JSON (optional), and enabled status. A CoroutineCallback is used to handle the result or any errors during the API call.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-fcm-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createFcmProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    mapOf( \"a\" to \"b\" ), // serviceAccountJSON (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating URL Attribute in Appwrite Kotlin\nDESCRIPTION: This snippet demonstrates how to update a URL attribute within an Appwrite database collection using the `updateUrlAttribute` method. It requires the database ID, collection ID, attribute key, and various configuration options like whether the attribute is required and a default value. The newKey parameter is optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-url-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.updateUrlAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"https://example.com\",\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Recovery Codes with Appwrite Kotlin SDK\nDESCRIPTION: This snippet shows how to update MFA recovery codes using the Appwrite Kotlin SDK. It requires the `io.appwrite.Client`, `io.appwrite.coroutines.CoroutineCallback`, and `io.appwrite.services.Account` dependencies.  The `setEndpoint` and `setProject` methods must be configured with your Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateMfaRecoveryCodes(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Update String Attribute in Kotlin\nDESCRIPTION: This snippet updates a string attribute in an Appwrite database collection. It requires the database ID, collection ID, the key of the attribute to update, and other parameters like required, default, size and newKey. Replace the placeholders with the actual values. The size parameter is optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-string-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval databases = Databases(client)\n\nval response = databases.updateStringAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"<DEFAULT>\",\n    size = 1, // optional\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Function Deployment Build with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to update a function deployment build using the Appwrite Kotlin SDK. It initializes an Appwrite client with the endpoint, project ID, and API key. Then, it uses the `updateDeploymentBuild` method of the `Functions` service to update the build associated with a specified deployment of a function. The `functionId` and `deploymentId` parameters are required to identify the function and deployment to be updated. The result of the update operation is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/update-deployment-build.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.updateDeploymentBuild(\n    \"<FUNCTION_ID>\", // functionId\n    \"<DEPLOYMENT_ID>\", // deploymentId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Password with Appwrite Kotlin SDK\nDESCRIPTION: This snippet shows how to update a user's password using the Appwrite Kotlin SDK.  It requires the Appwrite client to be initialized with the endpoint, project ID, and user session. The `updatePassword` method takes the new password and optional old password as parameters. A callback is used to handle the result or any errors that occur during the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-password.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updatePassword(\n    \"\", // password\n    \"password\", // oldPassword (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appwrite Function by ID in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific function using its ID after initializing the Appwrite client. It makes a call to the `get` method of the `Functions` service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/get.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = functions.get(\n    functionId = \"<FUNCTION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update Magic URL Session - Kotlin\nDESCRIPTION: This code snippet updates a magic URL session using the Appwrite Kotlin SDK. It calls the `updateMagicURLSession` function of the `Account` service with the user ID and secret. It expects valid user ID and secret as input and returns a response object representing the updated session. The Appwrite client and Account service must be initialized beforehand.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-magic-u-r-l-session.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.updateMagicURLSession(\n    userId = \"<USER_ID>\",\n    secret = \"<SECRET>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Document in Appwrite Database Kotlin\nDESCRIPTION: This code snippet updates a document within an Appwrite database. It initializes the Appwrite client, sets the endpoint, project ID, and an empty session. It then calls the `updateDocument` method on the `Databases` service to update a specified document with new data and permissions.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval databases = Databases(client)\n\nval response = databases.updateDocument(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    documentId = \"<DOCUMENT_ID>\",\n    data = mapOf( \"a\" to \"b\" ), // optional\n    permissions = listOf(\"read(\"any\")\") // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Function Variable in Appwrite with Kotlin\nDESCRIPTION: This snippet demonstrates updating a function's variable within Appwrite. It requires the `appwrite` SDK. The `updateVariable` function takes the function ID, variable ID, key, and value as parameters, and executes asynchronously, printing the result or error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/update-variable.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.updateVariable(\n    \"<FUNCTION_ID>\", // functionId\n    \"<VARIABLE_ID>\", // variableId\n    \"<KEY>\", // key\n    \"<VALUE>\", // value (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Email Attribute in Appwrite Database using Kotlin\nDESCRIPTION: This code snippet demonstrates updating an email attribute within a specified Appwrite database collection using the Appwrite Kotlin SDK. It uses the `updateEmailAttribute` method, setting parameters such as the database ID, collection ID, key, required status, default value, and optional new key for the attribute.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-email-attribute.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = databases.updateEmailAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"email@example.com\",\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Attribute in Appwrite with Java\nDESCRIPTION: This snippet initializes the Appwrite client and deletes an attribute from a database collection using the `deleteAttribute` method. It requires the Appwrite Java SDK as a dependency and expects the database ID, collection ID, and attribute key as parameters.  It uses a CoroutineCallback to handle asynchronous results and potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/delete-attribute.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.deleteAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Function Deployment with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a function deployment using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then calls the `updateDeployment` method from the `Functions` service to update the specified deployment. The result or any error is then printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/update-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.updateDeployment(\n    \"<FUNCTION_ID>\", // functionId\n    \"<DEPLOYMENT_ID>\", // deploymentId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Attribute with Appwrite Databases in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a Databases service instance and calls the createEmailAttribute method to create a new email attribute in a specified database collection. The method takes the database ID, collection ID, attribute key, required status, default value, and array flag as parameters. Replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-email-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.createEmailAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"email@example.com\", // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Attribute in Appwrite Database with Kotlin\nDESCRIPTION: This snippet demonstrates the use of the Appwrite Kotlin SDK to create an enum attribute within a specified database collection. It requires the Appwrite endpoint, project ID, and API key to be configured. The function `createEnumAttribute` is called with parameters such as database ID, collection ID, key, enum elements, required flag, default value, and array flag. A CoroutineCallback is used to handle the result or any errors encountered during the operation.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-enum-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createEnumAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    listOf(), // elements\n    false, // required\n    \"<DEFAULT>\", // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Database in Appwrite with Kotlin\nDESCRIPTION: This snippet shows how to update a database in Appwrite using the `Databases` service.  It uses the initialized Appwrite client to call the `update` method.  The `databaseId` parameter specifies the ID of the database to update, `name` is the new name for the database, and `enabled` is an optional boolean to enable or disable the database.  Replace the placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval databases = Databases(client)\n\nval response = databases.update(\n    databaseId = \"<DATABASE_ID>\",\n    name = \"<NAME>\",\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Get Message from Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific message from Appwrite's Messaging service using the Kotlin SDK. It initializes the Appwrite client with necessary credentials (endpoint, project ID, API key) and then utilizes the `getMessage` method of the `Messaging` service to fetch the message based on its ID.  A CoroutineCallback is used to handle the asynchronous result, printing the message content or any encountered error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/get-message.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.getMessage(\n    \"<MESSAGE_ID>\", // messageId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update SMTP Provider with Appwrite Messaging - Kotlin\nDESCRIPTION: This code snippet updates an existing SMTP provider using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then uses the Messaging service to update the provider with specific configuration details such as host, port, username, password, and email settings.  Ensure to replace placeholder values with actual credentials and provider ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-smtp-provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateSmtpProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    host = \"<HOST>\", // optional\n    port = 1, // optional\n    username = \"<USERNAME>\", // optional\n    password = \"<PASSWORD>\", // optional\n    encryption = \"none\", // optional\n    autoTLS = false, // optional\n    mailer = \"<MAILER>\", // optional\n    fromName = \"<FROM_NAME>\", // optional\n    fromEmail = \"email@example.com\", // optional\n    replyToName = \"<REPLY_TO_NAME>\", // optional\n    replyToEmail = \"<REPLY_TO_EMAIL>\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Email Attribute in Appwrite Database Kotlin\nDESCRIPTION: This snippet demonstrates how to update an email attribute within an Appwrite database collection. It requires the io.appwrite dependency. The snippet initializes the Appwrite client and then uses the `updateEmailAttribute` method to update the specified attribute. Parameters include database ID, collection ID, attribute key, required flag, default value, and optional new key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-email-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateEmailAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"email@example.com\", // default\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Identity from Appwrite Account in Kotlin\nDESCRIPTION: This snippet demonstrates deleting a user identity from an Appwrite account. It initializes the Appwrite client with the endpoint and project ID, and then uses the Account service to delete an identity specified by its ID. A callback is used to handle the result or any errors that occur during the process. Requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/delete-identity.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.deleteIdentity(\n    \"<IDENTITY_ID>\", // identityId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Sendgrid Provider in Appwrite (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to update a Sendgrid provider's settings within the Appwrite Messaging service. It requires the Appwrite Kotlin SDK. The parameters include the provider ID, name, enabled status, API key, from name, from email, reply-to name and reply-to email.  Error handling is implemented via a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-sendgrid-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateSendgridProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    \"<FROM_NAME>\", // fromName (optional)\n    \"email@example.com\", // fromEmail (optional)\n    \"<REPLY_TO_NAME>\", // replyToName (optional)\n    \"<REPLY_TO_EMAIL>\", // replyToEmail (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Email Verification Request in Kotlin\nDESCRIPTION: This snippet demonstrates how to create an email verification request for an Appwrite account using the Account service. It uses the createVerification method with a specified URL where the user will be redirected after verifying their email address.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-verification.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = account.createVerification(\n    url = \"https://example.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete an Appwrite team using the `teams.delete()` method.  It requires a `teamId` parameter, which should be replaced with the ID of the team to be deleted.  The `teams` object needs to be initialized as shown in the previous snippet.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/delete.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = teams.delete(\n    teamId = \"<TEAM_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sendgrid Provider with Appwrite Kotlin SDK\nDESCRIPTION: This snippet creates a Sendgrid provider using the Appwrite Kotlin SDK.  It requires a provider ID, name, and optional parameters like API key, from name, from email, reply-to name, reply-to email, and a boolean to enable or disable the provider.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-sendgrid-provider.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = messaging.createSendgridProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    apiKey = \"<API_KEY>\", // optional\n    fromName = \"<FROM_NAME>\", // optional\n    fromEmail = \"email@example.com\", // optional\n    replyToName = \"<REPLY_TO_NAME>\", // optional\n    replyToEmail = \"email@example.com\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite Function with Kotlin SDK\nDESCRIPTION: This Kotlin code snippet initializes the Appwrite client and uses the Functions service to create a new function. It sets various parameters such as function ID, name, runtime, execution permissions, scheduling options, timeout, and other configurations. Requires the Appwrite Kotlin SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\nimport io.appwrite.enums.Runtime\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.create(\n    functionId = \"<FUNCTION_ID>\",\n    name = \"<NAME>\",\n    runtime =  .NODE_14_5,\n    execute = listOf(\"any\"), // optional\n    events = listOf(), // optional\n    schedule = \"\", // optional\n    timeout = 1, // optional\n    enabled = false, // optional\n    logging = false, // optional\n    entrypoint = \"<ENTRYPOINT>\", // optional\n    commands = \"<COMMANDS>\", // optional\n    scopes = listOf(), // optional\n    installationId = \"<INSTALLATION_ID>\", // optional\n    providerRepositoryId = \"<PROVIDER_REPOSITORY_ID>\", // optional\n    providerBranch = \"<PROVIDER_BRANCH>\", // optional\n    providerSilentMode = false, // optional\n    providerRootDirectory = \"<PROVIDER_ROOT_DIRECTORY>\", // optional\n    templateRepository = \"<TEMPLATE_REPOSITORY>\", // optional\n    templateOwner = \"<TEMPLATE_OWNER>\", // optional\n    templateRootDirectory = \"<TEMPLATE_ROOT_DIRECTORY>\", // optional\n    templateVersion = \"<TEMPLATE_VERSION>\", // optional\n    specification = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vonage Provider using Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client and create a Vonage provider using the Messaging service. It requires the Appwrite Kotlin SDK and specific credentials like endpoint, project ID, API key, provider ID, name, and Vonage API credentials. The `CoroutineCallback` handles the result or error from the API call.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-vonage-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createVonageProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"+12065550100\", // from (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    \"<API_SECRET>\", // apiSecret (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite JWT with Kotlin SDK\nDESCRIPTION: This code snippet initializes an Appwrite client with the endpoint, project ID, and API key, and then creates a JWT for a specific user.  The `createJWT` function is called on the `Users` service, passing in the user ID and optional session ID and duration.  A callback is used to handle the result or any potential errors during the JWT creation process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-j-w-t.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createJWT(\n    \"<USER_ID>\", // userId\n    \"<SESSION_ID>\", // sessionId (optional)\n    0, // duration (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get File from Appwrite Storage - Kotlin\nDESCRIPTION: This code snippet retrieves a file from Appwrite Storage. It requires the Appwrite Kotlin SDK and uses a callback to handle the result or any errors.  The endpoint, project ID, bucket ID and file ID must be properly configured.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/get-file.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.getFile(\n    \"<BUCKET_ID>\", // bucketId\n    \"<FILE_ID>\", // fileId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Messaging Topic with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates updating a messaging topic using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the `updateTopic` method of the `Messaging` service to update a topic with a specific ID, providing an optional name and a list of subscriptions. Replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-topic.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateTopic(\n    topicId = \"<TOPIC_ID>\",\n    name = \"<NAME>\", // optional\n    subscribe = listOf(\"any\") // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP MFA Authenticator in Kotlin\nDESCRIPTION: This snippet creates a Time-based One-Time Password (TOTP) MFA authenticator for the current user's Appwrite account. It utilizes the Account service's `createMfaAuthenticator` method with the `AuthenticatorType.TOTP` parameter.  It assumes that the Appwrite client and Account service have already been initialized.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-mfa-authenticator.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.createMfaAuthenticator(\n    type =  AuthenticatorType.TOTP\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Appwrite Account Identity with Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to delete an identity from an Appwrite account using the Appwrite Kotlin SDK. It initializes the client with the endpoint and project ID, creates an account object, and then calls the `deleteIdentity` method with the identity ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/delete-identity.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.deleteIdentity(\n    identityId = \"<IDENTITY_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update Appwrite Database Document in Kotlin\nDESCRIPTION: This code snippet demonstrates how to update a document in an Appwrite database using the Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID, then uses the `updateDocument` function of the `Databases` service to update a document. The update includes the database ID, collection ID, document ID, a map of data to update, and a list of permissions.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nDatabases databases = new Databases(client);\n\ndatabases.updateDocument(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"<DOCUMENT_ID>\", // documentId\n    mapOf( \"a\" to \"b\" ), // data (optional)\n    listOf(\"read(\"any\")\"), // permissions (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Appwrite User with bcrypt in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key. It then creates a new user using the `createBcryptUser` method, which requires a user ID, email, and password. An optional name can also be provided. A callback is used to handle the result or any errors that occur during the user creation process. It depends on the io.appwrite library.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-bcrypt-user.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createBcryptUser(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"password\", // password\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Vonage Provider with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet demonstrates updating a Vonage provider using the Appwrite Messaging service in Kotlin. It initializes an Appwrite client with the endpoint, project ID, and API key. Then, it uses the Messaging service to update the Vonage provider by ID with optional parameters like name, enabled state, API key, API secret, and 'from' number.  A CoroutineCallback is used to handle the asynchronous response, printing the result or the error if it occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-vonage-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateVonageProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    \"<API_SECRET>\", // apiSecret (optional)\n    \"<FROM>\", // from (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Message with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a message using the Appwrite Messaging service. It requires the message ID to identify the message to be deleted.  The Messaging object is initialized with the client previously.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/delete.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.delete(\n    messageId = \"<MESSAGE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Email/Password Session with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create an email/password session using the Appwrite Kotlin SDK. It requires the Appwrite client to be initialized with the endpoint and project ID. It then uses the `createEmailPasswordSession` method of the `Account` service, passing the email and password as parameters. The response is then stored in the `response` variable.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-email-password-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval response = account.createEmailPasswordSession(\n    email = \"email@example.com\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Bucket in Appwrite with Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it utilizes the Storage service to create a new bucket with specified configurations like ID, name, permissions, file security, enablement status, maximum file size, allowed file extensions, compression type, encryption status, and antivirus status. The callback handles potential errors and prints the result upon successful bucket creation.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/create-bucket.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nStorage storage = new Storage(client);\n\nstorage.createBucket(\n    \"<BUCKET_ID>\", // bucketId\n    \"<NAME>\", // name\n    listOf(\"read(\"any\")\"), // permissions (optional)\n    false, // fileSecurity (optional)\n    false, // enabled (optional)\n    1, // maximumFileSize (optional)\n    listOf(), // allowedFileExtensions (optional)\n    .NONE, // compression (optional)\n    false, // encryption (optional)\n    false, // antivirus (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Account Verification Request with Appwrite (Kotlin)\nDESCRIPTION: This snippet showcases how to create an account verification request using the Appwrite Kotlin SDK. It requires the `io.appwrite.Client`, `io.appwrite.coroutines.CoroutineCallback`, and `io.appwrite.services.Account` dependencies.  It initializes the Appwrite client, sets the endpoint and project ID, and then uses the `createVerification` method on the `Account` object to initiate the email verification process with a provided redirect URL. The callback handles the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.createVerification(\n    \"https://example.com\", // url\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Bucket with Appwrite Kotlin SDK\nDESCRIPTION: This snippet updates an existing bucket in Appwrite Storage. It requires the Appwrite client to be initialized with the project endpoint, project ID, and API key. The snippet then calls the `updateBucket` function to modify the bucket's properties such as name, permissions, file security, enabled status, maximum file size, allowed file extensions, compression, encryption, and antivirus settings. A CoroutineCallback is used to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/update-bucket.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nStorage storage = new Storage(client);\n\nstorage.updateBucket(\n    \"<BUCKET_ID>\", // bucketId\n    \"<NAME>\", // name\n    listOf(\"read(\\\"any\\\")\"), // permissions (optional)\n    false, // fileSecurity (optional)\n    false, // enabled (optional)\n    1, // maximumFileSize (optional)\n    listOf(), // allowedFileExtensions (optional)\n    .NONE, // compression (optional)\n    false, // encryption (optional)\n    false, // antivirus (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing User Sessions with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client and retrieves a list of sessions for a specified user.  It requires the Appwrite SDK for Kotlin. It prints the result to the console or the stack trace if an error occurred. Replace <REGION>, <YOUR_PROJECT_ID>, <YOUR_API_KEY>, and <USER_ID> with your actual Appwrite instance details and user ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/list-sessions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.listSessions(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Integer Attribute in Appwrite using Kotlin\nDESCRIPTION: This snippet shows how to update an integer attribute within a specified Appwrite database collection. It requires the Appwrite Kotlin SDK and utilizes the `updateIntegerAttribute` method, taking parameters such as database ID, collection ID, key, required flag, default value, min/max constraints, and a new key (optional). The API key must have sufficient permissions to perform this operation.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-integer-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.updateIntegerAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = 0,\n    min = 0, // optional\n    max = 0, // optional\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Membership Status - Appwrite Teams - Kotlin\nDESCRIPTION: This snippet shows how to update a team membership status in Appwrite using the Kotlin SDK. It requires the Appwrite client to be initialized with the endpoint, project ID, and session. It calls the `updateMembershipStatus` method, passing the team ID, membership ID, user ID, and secret as parameters. It uses a CoroutineCallback to handle the result and any potential errors, printing either the result or the stack trace of the error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/update-membership-status.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.updateMembershipStatus(\n    \"<TEAM_ID>\", // teamId\n    \"<MEMBERSHIP_ID>\", // membershipId\n    \"<USER_ID>\", // userId\n    \"<SECRET>\", // secret\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Messaging Provider in Kotlin\nDESCRIPTION: This snippet shows how to delete a messaging provider using the `deleteProvider` function of the `Messaging` service.  It requires a valid `providerId`. Replace `<PROVIDER_ID>` with the actual provider ID you want to delete.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/delete-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.deleteProvider(\n    providerId = \"<PROVIDER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Attribute in Appwrite Database with Java\nDESCRIPTION: This Java code snippet demonstrates how to create a boolean attribute within an Appwrite database collection. It initializes the Appwrite client with the endpoint, project ID, and API key. The 'createBooleanAttribute' method is then called on the 'Databases' service, specifying the database ID, collection ID, attribute key, required status, default value (optional), and array status (optional). A CoroutineCallback is used to handle the result or any potential errors during the attribute creation process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-boolean-attribute.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createBooleanAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    false, // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Image with Appwrite Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a flag image using the Appwrite Avatars service. The getFlag method is called with the Afghanistan flag code and optional parameters for width, height, and quality. These optional parameters can adjust the size and quality of the returned flag image.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-flag.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = avatars.getFlag(\n    code =  Flag.AFGHANISTAN,\n    width = 0, // optional\n    height = 0, // optional\n    quality = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Appwrite Storage Bucket Kotlin\nDESCRIPTION: This snippet updates an Appwrite storage bucket using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then it initializes the storage service and uses it to update the bucket's attributes, such as name, permissions, file security, enabled status, maximum file size, allowed file extensions, compression, encryption, and antivirus settings.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/update-bucket.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval storage = Storage(client)\n\nval response = storage.updateBucket(\n    bucketId = \"<BUCKET_ID>\",\n    name = \"<NAME>\",\n    permissions = listOf(\"read(\"any\")\"), // optional\n    fileSecurity = false, // optional\n    enabled = false, // optional\n    maximumFileSize = 1, // optional\n    allowedFileExtensions = listOf(), // optional\n    compression = \"none\", // optional\n    encryption = false, // optional\n    antivirus = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Recovery Codes with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to create MFA recovery codes for a user using the Appwrite Kotlin SDK. It initializes the Appwrite client with necessary credentials and then calls the `createMfaRecoveryCodes` method of the `Users` service.  The `userId` parameter specifies the user for whom the recovery codes should be generated. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<USER_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.createMfaRecoveryCodes(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Float Attribute in Kotlin\nDESCRIPTION: This snippet updates a float attribute in a specified Appwrite database collection. It requires the database ID, collection ID, key of the attribute to be updated, whether it's required, a default value, optional min/max values, and an optional new key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-float-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.updateFloatAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = 0,\n    min = 0, // optional\n    max = 0, // optional\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Database using Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a new database in Appwrite using the Kotlin SDK. It requires the database ID, name, and an optional boolean value indicating whether the database is enabled.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.create(\n    databaseId = \"<DATABASE_ID>\",\n    name = \"<NAME>\",\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials, including the endpoint, project ID, and API key.  It creates a `Client` instance, configures it, and then instantiates the `Users` service for interacting with user-related functionalities.  Make sure to replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.deleteTarget(\n    userId = \"<USER_ID>\",\n    targetId = \"<TARGET_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update Push Notification with Appwrite - Kotlin\nDESCRIPTION: This code updates an existing push notification using the Appwrite Messaging service. It requires the Appwrite client to be initialized with the endpoint, project ID, and API key. The `messageId` parameter is mandatory to identify the push notification to be updated; all other parameters are optional and allow modification of the notification's content, target audience, and delivery options.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-push.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updatePush(\n    messageId = \"<MESSAGE_ID>\",\n    topics = listOf(), // optional\n    users = listOf(), // optional\n    targets = listOf(), // optional\n    title = \"<TITLE>\", // optional\n    body = \"<BODY>\", // optional\n    data = mapOf( \"a\" to \"b\" ), // optional\n    action = \"<ACTION>\", // optional\n    image = \"[ID1:ID2]\", // optional\n    icon = \"<ICON>\", // optional\n    sound = \"<SOUND>\", // optional\n    color = \"<COLOR>\", // optional\n    tag = \"<TAG>\", // optional\n    badge = 0, // optional\n    draft = false, // optional\n    scheduledAt = \"\", // optional\n    contentAvailable = false, // optional\n    critical = false, // optional\n    priority = \"normal\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Appwrite Collection in Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a collection in an Appwrite database using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it calls the `deleteCollection` method with the database ID and collection ID. The `databaseId` and `collectionId` need to be replaced with appropriate values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete-collection.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.deleteCollection(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update Appwrite Function with Kotlin SDK\nDESCRIPTION: This code initializes an Appwrite client and uses the Functions service to update an existing function. It requires the Appwrite Kotlin SDK as a dependency. The snippet takes parameters such as the function ID, name, runtime, execute permissions, events, schedule, timeout, enabled flag, logging flag, entrypoint, commands, scopes, installation ID, provider repository ID, provider branch, provider silent mode, provider root directory, and specification as input. It updates the specified function with the provided parameters and prints the result or error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/update.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.update(\n    \"<FUNCTION_ID>\", // functionId\n    \"<NAME>\", // name\n    .NODE_14_5, // runtime (optional)\n    listOf(\"any\"), // execute (optional)\n    listOf(), // events (optional)\n    \"\", // schedule (optional)\n    1, // timeout (optional)\n    false, // enabled (optional)\n    false, // logging (optional)\n    \"<ENTRYPOINT>\", // entrypoint (optional)\n    \"<COMMANDS>\", // commands (optional)\n    listOf(), // scopes (optional)\n    \"<INSTALLATION_ID>\", // installationId (optional)\n    \"<PROVIDER_REPOSITORY_ID>\", // providerRepositoryId (optional)\n    \"<PROVIDER_BRANCH>\", // providerBranch (optional)\n    false, // providerSilentMode (optional)\n    \"<PROVIDER_ROOT_DIRECTORY>\", // providerRootDirectory (optional)\n    \"\", // specification (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Appwrite Account Email - Kotlin\nDESCRIPTION: This snippet updates a user's email address with the Appwrite Kotlin SDK. It initializes the Appwrite client, configures the endpoint and project ID, creates an Account service instance, and then calls the `updateEmail` method. The `CoroutineCallback` handles asynchronous responses and potential errors, printing either the success result or the error stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-email.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateEmail(\n    \"email@example.com\", // email\n    \"password\", // password\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating FCM Provider in Kotlin\nDESCRIPTION: This snippet demonstrates how to update an existing FCM provider using the Appwrite Kotlin SDK. It requires an initialized Appwrite client and a valid FCM provider ID. It updates the provider's name, enabled status, and service account JSON.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-fcm-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateFcmProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    serviceAccountJSON = mapOf( \"a\" to \"b\" ) // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting User Target with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete a specific target associated with a user using the Appwrite Kotlin SDK. It calls the `deleteTarget` method on the `Users` service, providing the user ID and the target ID as parameters.  The placeholders `<USER_ID>` and `<TARGET_ID>` need to be replaced with the appropriate values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-target.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.deleteTarget(\n    userId = \"<USER_ID>\",\n    targetId = \"<TARGET_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update IP Attribute in Appwrite Database (Java)\nDESCRIPTION: This snippet updates an IP address attribute in an Appwrite database collection using the Appwrite Java SDK. It requires the `io.appwrite` dependency. The code initializes the Appwrite client with the endpoint, project ID, and API key. It then calls the `updateIpAttribute` method on the `Databases` service with the database ID, collection ID, attribute key, and other related parameters. The result or error message is printed to the console using a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-ip-attribute.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateIpAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"\", // default\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Function Variable with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete a function variable using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, and then uses the `deleteVariable` function from the `Functions` service to delete a variable. The `functionId` and `variableId` parameters specify the function and variable to be deleted, respectively. Replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/delete-variable.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.deleteVariable(\n    functionId = \"<FUNCTION_ID>\",\n    variableId = \"<VARIABLE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Function Deployment with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a function deployment in Appwrite using the Kotlin SDK. It requires the Appwrite Kotlin SDK dependency. The function takes functionId and deploymentId as parameters and returns a response object.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/update-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.updateDeployment(\n    functionId = \"<FUNCTION_ID>\",\n    deploymentId = \"<DEPLOYMENT_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Retrieve Bucket - Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client with the endpoint, project ID, and API key. It then creates a Storage service instance and retrieves a storage bucket using the getBucket method. Replace placeholders with your actual Appwrite credentials and bucket ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/get-bucket.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval storage = Storage(client)\n\nval response = storage.getBucket(\n    bucketId = \"<BUCKET_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating User Password with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet updates a user's password in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. The `updatePassword` method of the `Users` service is then called to update the specified user's password. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<USER_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-password.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updatePassword(\n    \"<USER_ID>\", // userId\n    \"\", // password\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating SMS with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet updates an existing SMS message using the Appwrite Messaging service. It requires the Appwrite Kotlin SDK and a configured Appwrite client. The `updateSms` method takes several optional parameters such as topics, users, targets, content, draft status, and a scheduled time.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-sms.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateSms(\n    messageId = \"<MESSAGE_ID>\",\n    topics = listOf(), // optional\n    users = listOf(), // optional\n    targets = listOf(), // optional\n    content = \"<CONTENT>\", // optional\n    draft = false, // optional\n    scheduledAt = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update MFA Challenge with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update an MFA challenge using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the endpoint and project ID, and then calls the `updateMfaChallenge` method of the `Account` service. The function requires a challenge ID and an OTP to complete the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-mfa-challenge.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateMfaChallenge(\n    challengeId = \"<CHALLENGE_ID>\",\n    otp = \"<OTP>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating File Metadata in Appwrite Storage (Kotlin)\nDESCRIPTION: This snippet updates a file's metadata and permissions in Appwrite Storage. It requires the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID, then calls `updateFile` with the necessary parameters: bucket ID, file ID, optional name, and a list of permissions. The updated file information is printed to the console upon success.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/update-file.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.updateFile(\n    \"<BUCKET_ID>\", // bucketId\n    \"<FILE_ID>\", // fileId\n    \"<NAME>\", // name (optional)\n    listOf(\"read(\"any\")\"), // permissions (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite User with MD5 in Kotlin\nDESCRIPTION: This snippet creates a new user with an MD5 hashed password in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the necessary endpoint, project ID, and API key. It then calls the `createMD5User` method from the `Users` service, passing the required user ID, email, password, and optional name. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-m-d5user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createMD5User(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"password\", // password\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating User Target with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a user's target using the `updateTarget` method of the `Users` service.  It requires the user ID, target ID, and optional parameters like identifier, providerId, and name.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-target.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = users.updateTarget(\n    userId = \"<USER_ID>\",\n    targetId = \"<TARGET_ID>\",\n    identifier = \"<IDENTIFIER>\", // optional\n    providerId = \"<PROVIDER_ID>\", // optional\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Document from Appwrite Database in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a document from an Appwrite database using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session, then uses the Databases service to delete a document by its database ID, collection ID, and document ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval databases = Databases(client)\n\nval response = databases.deleteDocument(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    documentId = \"<DOCUMENT_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appwrite Client Initialization and Health Check - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a Health service instance and calls the getStorage() method to check the storage health.  The endpoint, project ID, and API key must be replaced with your specific Appwrite instance details. The `CoroutineCallback` import suggests this might be used with coroutines.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-storage.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getStorage()\n```\n\n----------------------------------------\n\nTITLE: Creating User with SHA1 Hashing - Kotlin\nDESCRIPTION: This snippet shows how to create a user with a SHA1-hashed password using the Appwrite Kotlin SDK. It initializes the Appwrite client and then calls the `createSHAUser` method with necessary parameters like user ID, email, password, password hash type, and name. The callback handles both successful user creation and potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-s-h-a-user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createSHAUser(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"password\", // password\n    PasswordHash.SHA1, // passwordVersion (optional)\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Appwrite User with Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to delete a user in Appwrite using the Kotlin SDK.  It initializes the Appwrite client with the endpoint, project ID, and API key.  Then, it calls the `users.delete()` method to delete the user specified by `userId`.  It requires the Appwrite Kotlin SDK and a valid API key with sufficient permissions to delete users.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.delete(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vonage Provider in Kotlin\nDESCRIPTION: This snippet creates a Vonage provider using the Appwrite Messaging service.  It requires a provider ID and name. Optional parameters include the 'from' number, API key, API secret, and an 'enabled' flag. Replace the placeholder values with your actual Vonage provider details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-vonage-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.createVonageProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    from = \"+12065550100\", // optional\n    apiKey = \"<API_KEY>\", // optional\n    apiSecret = \"<API_SECRET>\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Delete File in Appwrite Storage - Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and then deletes a file from a specified bucket using its ID.  It requires the io.appwrite dependency.  The bucketId and fileId parameters specify the target file for deletion.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/delete-file.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n\nval response = storage.deleteFile(\n    bucketId = \"<BUCKET_ID>\",\n    fileId = \"<FILE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Preview from Appwrite Storage in Kotlin\nDESCRIPTION: This code initializes an Appwrite client and uses the `Storage` service to retrieve a file preview. It sets the endpoint, project ID, and user session, then calls `getFilePreview` with parameters like bucket ID, file ID, width, height, gravity, quality, border, and rotation.  The result of the API call is printed to the console, and any errors are printed to the stack trace. Requires the Appwrite Kotlin SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/get-file-preview.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.getFilePreview(\n    \"<BUCKET_ID>\", // bucketId\n    \"<FILE_ID>\", // fileId\n    0, // width (optional)\n    0, // height (optional)\n    ImageGravity.CENTER, // gravity (optional)\n    0, // quality (optional)\n    0, // borderWidth (optional)\n    \"\", // borderColor (optional)\n    0, // borderRadius (optional)\n    0, // opacity (optional)\n    -360, // rotation (optional)\n    \"\", // background (optional)\n    ImageFormat.JPG, // output (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite Database Collection in Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a new collection within an Appwrite database using the Appwrite Kotlin SDK.  It initializes the client with the necessary endpoint, project ID, and API key. It then uses the `createCollection` method of the `Databases` service to create the collection with the specified parameters. This example requires the Appwrite Kotlin SDK as a dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-collection.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.createCollection(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    name = \"<NAME>\",\n    permissions = listOf(\"read(\"any\")\"), // optional\n    documentSecurity = false, // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing MFA Factors in Kotlin\nDESCRIPTION: This snippet lists the MFA factors for a specific user using the Appwrite Kotlin SDK. The userId parameter is required to identify the user. Ensure the Appwrite client has been initialized beforehand.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-mfa-factors.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.listMfaFactors(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Provider - Kotlin\nDESCRIPTION: This code snippet demonstrates how to update an existing Mailgun provider in Appwrite using the Kotlin SDK.  It requires the `io.appwrite` dependency and the `Messaging` service. The snippet initializes the Appwrite client with necessary credentials and then calls the `updateMailgunProvider` function with provider ID and other optional parameters to update the Mailgun provider's configurations.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-mailgun-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateMailgunProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    apiKey = \"<API_KEY>\", // optional\n    domain = \"<DOMAIN>\", // optional\n    isEuRegion = false, // optional\n    enabled = false, // optional\n    fromName = \"<FROM_NAME>\", // optional\n    fromEmail = \"email@example.com\", // optional\n    replyToName = \"<REPLY_TO_NAME>\", // optional\n    replyToEmail = \"<REPLY_TO_EMAIL>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Email Attribute in Kotlin\nDESCRIPTION: This code initializes the Appwrite client with the endpoint, project ID, and API key. It then creates an instance of the Databases service and calls the createEmailAttribute method to add an email attribute to a specified collection within a database. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-email-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createEmailAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"email@example.com\", // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating User Session with Appwrite Kotlin SDK\nDESCRIPTION: This snippet creates a user session in Appwrite. It requires the Appwrite Kotlin SDK.  The code initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the `Users` service to create a session for a specified user ID. A callback is used to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createSession(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update MFA Recovery Codes with Appwrite in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates updating MFA recovery codes using the Appwrite SDK. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and session. The Account service is then used to call the updateMfaRecoveryCodes() method. The result is stored in the 'response' variable.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateMfaRecoveryCodes()\n```\n\n----------------------------------------\n\nTITLE: Creating a Database with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create a database using the Appwrite Kotlin SDK. It requires the Appwrite Kotlin SDK as a dependency. It initializes the client with the endpoint, project ID, and API key. It then calls the `create` method of the `Databases` service, providing the database ID, name, and a callback to handle the result or error. The optional 'enabled' parameter is set to false.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.create(\n    \"<DATABASE_ID>\", // databaseId\n    \"<NAME>\", // name\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Team Name with Appwrite Kotlin SDK\nDESCRIPTION: This snippet utilizes the Appwrite Teams service to update the name of a specific team. It requires the team ID and the new name as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/update-name.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval teams = Teams(client)\n\nval response = teams.updateName(\n    teamId = \"<TEAM_ID>\",\n    name = \"<NAME>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Attribute in Appwrite Database using Kotlin\nDESCRIPTION: This snippet demonstrates how to create an integer attribute within a specified database collection using the Appwrite Kotlin SDK. It requires the database ID, collection ID, key, and other optional parameters such as required, min, max, default, and array. It also includes a callback function to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-integer-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nDatabases databases = new Databases(client);\n\ndatabases.createIntegerAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    0, // min (optional)\n    0, // max (optional)\n    0, // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get File View with Appwrite Storage in Kotlin\nDESCRIPTION: This snippet demonstrates how to get a file view from Appwrite Storage using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session. Then, it calls the `getFileView` method of the Storage service with the bucket ID and file ID to retrieve the file view. A callback is used to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/get-file-view.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.getFileView(\n    \"<BUCKET_ID>\", // bucketId\n    \"<FILE_ID>\", // fileId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Mailgun Provider Configuration - Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a Mailgun provider's configuration within an Appwrite project using the Kotlin SDK. It requires the io.appwrite library. It initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Messaging service to update various Mailgun provider details such as API key, domain, region, and email settings. A CoroutineCallback is used to handle the result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-mailgun-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateMailgunProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    \"<DOMAIN>\", // domain (optional)\n    false, // isEuRegion (optional)\n    false, // enabled (optional)\n    \"<FROM_NAME>\", // fromName (optional)\n    \"email@example.com\", // fromEmail (optional)\n    \"<REPLY_TO_NAME>\", // replyToName (optional)\n    \"<REPLY_TO_EMAIL>\", // replyToEmail (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Certificate in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key. It then utilizes the Health service's getCertificate method to retrieve a certificate.  The result is printed to the console, and any errors are handled and printed as well.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-certificate.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getCertificate(\n    \"\", // domain (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create OAuth2 Token with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates creating an OAuth2 token using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the endpoint and project ID, and then uses the Account service to create the token for a specified OAuth provider (Amazon in this case). Success and failure URLs are configured, and the `scopes` parameter is set as an empty list. Dependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Account, io.appwrite.enums.OAuthProvider.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-o-auth2token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.OAuthProvider\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\naccount.createOAuth2Token(\n    provider =  OAuthProvider.AMAZON,\n    success = \"https://example.com\", // optional\n    failure = \"https://example.com\", // optional\n    scopes = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Messaging Provider Logs with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to list provider logs using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the Messaging service to retrieve provider logs based on the provider ID. It also shows how to handle the asynchronous result using CoroutineCallback. Requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-provider-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listProviderLogs(\n    \"<PROVIDER_ID>\", // providerId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create User with PHPass in Appwrite Kotlin\nDESCRIPTION: This snippet demonstrates how to create a new user with a PHPass-hashed password using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it utilizes the `Users` service to create a new user with a specified user ID, email, password, and optional name, employing a CoroutineCallback for asynchronous handling of the result or any potential errors. It also includes basic error handling.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-p-h-pass-user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createPHPassUser(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"password\", // password\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Datetime Attribute Kotlin\nDESCRIPTION: This snippet creates a datetime attribute in a specified database and collection using the Appwrite Kotlin SDK.  It requires the `databaseId`, `collectionId`, and `key` parameters, along with optional parameters such as `required`, `default`, and `array`. Replace `<DATABASE_ID>` and `<COLLECTION_ID>` with your actual database and collection IDs. The `key` parameter should be the name of the attribute.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-datetime-attribute.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = databases.createDatetimeAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"\", // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Email Message using Appwrite in Kotlin\nDESCRIPTION: This code snippet shows how to update an email message using Appwrite's Messaging service in Kotlin. It initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a Messaging service instance and calls the `updateEmail` method with various parameters, including the message ID, optional topics, users, targets, subject, content, draft status, HTML format, CC, BCC, scheduled time, and attachments. A CoroutineCallback is used to handle the response and print the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-email.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateEmail(\n    \"<MESSAGE_ID>\", // messageId\n    listOf(), // topics (optional)\n    listOf(), // users (optional)\n    listOf(), // targets (optional)\n    \"<SUBJECT>\", // subject (optional)\n    \"<CONTENT>\", // content (optional)\n    false, // draft (optional)\n    false, // html (optional)\n    listOf(), // cc (optional)\n    listOf(), // bcc (optional)\n    \"\", // scheduledAt (optional)\n    listOf(), // attachments (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating User Name with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a user's name using the Appwrite Kotlin SDK. It calls the `updateName` method of the `Users` service, passing in the user ID and the new name. Replace `<USER_ID>` and `<NAME>` placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-name.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = users.updateName(\n    userId = \"<USER_ID>\",\n    name = \"<NAME>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Avatar using Appwrite in Kotlin\nDESCRIPTION: This snippet shows how to retrieve a browser avatar using the Appwrite Avatars service in Kotlin. It uses the `getBrowser` method of the `Avatars` class to get the avatar for a specific browser. The `code` parameter specifies the browser, while `width`, `height`, and `quality` are optional parameters to customize the avatar.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-browser.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = avatars.getBrowser(\n    code =  Browser.AVANT_BROWSER,\n    width = 0, // optional\n    height = 0, // optional\n    quality = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Phone Number using Appwrite SDK in Kotlin\nDESCRIPTION: This snippet updates a user's phone number using the Appwrite Account service. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and session.  The `updatePhone` method takes the new phone number, password, and a callback function as parameters. The callback handles both successful responses and errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-phone.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updatePhone(\n    \"+12065550100\", // phone\n    \"password\", // password\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update MFA Authenticator with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to update the MFA authenticator for an account using the Appwrite Kotlin SDK. It sets the Appwrite client with the endpoint, project ID, and session, and then calls the `updateMfaAuthenticator` method on the `Account` service. The `AuthenticatorType` is set to TOTP and requires an OTP code.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\nimport io.appwrite.enums.AuthenticatorType;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateMfaAuthenticator(\n    AuthenticatorType.TOTP, // type\n    \"<OTP>\", // otp\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Migrations with Appwrite in Java\nDESCRIPTION: This snippet initializes an Appwrite client and uses the Health service to retrieve queue migrations. It sets the endpoint, project ID, and API key. A threshold of 0 is used. A callback is used to handle either successful retrieval of results (printed to the console) or an error (printed to the console).\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-migrations.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueMigrations(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Appwrite Team in Kotlin\nDESCRIPTION: This snippet creates a new team using the Appwrite `Teams` service. It requires a unique team ID and a team name as parameters. An optional list of roles can also be provided.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/create.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = teams.create(\n    teamId = \"<TEAM_ID>\",\n    name = \"<NAME>\",\n    roles = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Account Preferences with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and session, then uses the client to update the account preferences. It depends on the `io.appwrite.Client`, `io.appwrite.coroutines.CoroutineCallback`, and `io.appwrite.services.Account` classes. The `updatePrefs` method takes a map of key-value pairs as preferences to be updated.  The callback function handles either the successful result or any errors encountered during the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updatePrefs(\n    mapOf( \"a\" to \"b\" ), // prefs\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update APNS Provider with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet updates an APNS (Apple Push Notification service) provider using the Appwrite Messaging service. It requires the Appwrite client to be initialized with the project's endpoint, project ID, and API key. The `updateApnsProvider` method is called with the provider ID, and various optional parameters like name, enabled status, authentication keys, team ID, bundle ID, and sandbox mode. A CoroutineCallback is used to handle the asynchronous result, printing any errors or the successful result to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-apns-provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateApnsProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    \"<AUTH_KEY>\", // authKey (optional)\n    \"<AUTH_KEY_ID>\", // authKeyId (optional)\n    \"<TEAM_ID>\", // teamId (optional)\n    \"<BUNDLE_ID>\", // bundleId (optional)\n    false, // sandbox (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting User Session in Kotlin\nDESCRIPTION: This snippet shows how to delete a specific user session using the Appwrite Kotlin SDK.  It requires the user ID and session ID to identify the session to be deleted.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-session.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.deleteSession(\n    userId = \"<USER_ID>\",\n    sessionId = \"<SESSION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Appwrite Storage (Kotlin)\nDESCRIPTION: This snippet demonstrates how to list files within a specified bucket in Appwrite Storage using the Kotlin SDK. It requires the Appwrite Kotlin SDK dependency.  The code initializes an Appwrite client, configures the endpoint and project ID, and then uses the `listFiles` method of the `Storage` service to retrieve a list of files. Optional query and search parameters can be provided.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/list-files.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n\nval response = storage.listFiles(\n    bucketId = \"<BUCKET_ID>\",\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Create Appwrite Function Kotlin\nDESCRIPTION: This snippet demonstrates how to create a new function in Appwrite using the Kotlin SDK. It requires the io.appwrite dependency and establishes a connection to your Appwrite project using your endpoint, project ID, and API key. The code then utilizes the `Functions` service to define and create the function with various parameters, including runtime environment, execution permissions, schedule, timeout, and entry point.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\nimport io.appwrite.enums.Runtime;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.create(\n    \"<FUNCTION_ID>\", // functionId\n    \"<NAME>\", // name\n    .NODE_14_5, // runtime\n    listOf(\"any\"), // execute (optional)\n    listOf(), // events (optional)\n    \"\", // schedule (optional)\n    1, // timeout (optional)\n    false, // enabled (optional)\n    false, // logging (optional)\n    \"<ENTRYPOINT>\", // entrypoint (optional)\n    \"<COMMANDS>\", // commands (optional)\n    listOf(), // scopes (optional)\n    \"<INSTALLATION_ID>\", // installationId (optional)\n    \"<PROVIDER_REPOSITORY_ID>\", // providerRepositoryId (optional)\n    \"<PROVIDER_BRANCH>\", // providerBranch (optional)\n    false, // providerSilentMode (optional)\n    \"<PROVIDER_ROOT_DIRECTORY>\", // providerRootDirectory (optional)\n    \"<TEMPLATE_REPOSITORY>\", // templateRepository (optional)\n    \"<TEMPLATE_OWNER>\", // templateOwner (optional)\n    \"<TEMPLATE_ROOT_DIRECTORY>\", // templateRootDirectory (optional)\n    \"<TEMPLATE_VERSION>\", // templateVersion (optional)\n    \"\", // specification (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Favicon with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates fetching a favicon using Appwrite's Avatars service in Kotlin. It initializes the Appwrite client with the endpoint, project ID, and session. It then creates an `Avatars` service instance and calls the `getFavicon` method with the target URL. Note: Replace `<REGION>` and `<YOUR_PROJECT_ID>` with your actual Appwrite endpoint and project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-favicon.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval avatars = Avatars(client)\n\nval result = avatars.getFavicon(\n    url = \"https://example.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Create User Target with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client and then uses the `Users` service to create a new user target.  It requires the Appwrite endpoint, project ID, and API key for initialization. Parameters include `userId`, `targetId`, `providerType` (set to EMAIL), `identifier`, and optional `providerId` and `name`. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\nimport io.appwrite.enums.MessagingProviderType;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createTarget(\n    \"<USER_ID>\", // userId\n    \"<TARGET_ID>\", // targetId\n    MessagingProviderType.EMAIL, // providerType\n    \"<IDENTIFIER>\", // identifier\n    \"<PROVIDER_ID>\", // providerId (optional)\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection in Appwrite using Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a collection in Appwrite using the Kotlin SDK. It uses the `updateCollection` method of the `Databases` service.  The required parameters are the database ID, collection ID, and name. Optional parameters include permissions, document security, and enabled status.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-collection.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = databases.updateCollection(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    name = \"<NAME>\",\n    permissions = listOf(\"read(\"any\")\"), // optional\n    documentSecurity = false, // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Recovery Codes with Appwrite Kotlin SDK\nDESCRIPTION: This snippet creates MFA recovery codes using the initialized Appwrite client and the Account service.  It depends on the Appwrite client being initialized and authenticated beforehand.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-mfa-recovery-codes.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval account = Account(client)\n\nval response = account.createMfaRecoveryCodes()\n```\n\n----------------------------------------\n\nTITLE: Updating Boolean Attribute in Appwrite using Kotlin\nDESCRIPTION: This snippet demonstrates how to update a boolean attribute in an Appwrite database collection using the `updateBooleanAttribute` method. It requires the database ID, collection ID, key of the attribute to be updated, whether it's required, a default value, and an optional new key. Replace the placeholders with your actual database ID, collection ID, and attribute details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-boolean-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.updateBooleanAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = false,\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Msg91 Provider with Appwrite Messaging - Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a Msg91 messaging provider using the Appwrite Kotlin SDK. It initializes the Appwrite client with the necessary credentials and then uses the Messaging service to create a new provider with parameters such as provider ID, name, template ID, sender ID, authentication key, and an enabled flag. The result is then printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-msg91provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createMsg91Provider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"<TEMPLATE_ID>\", // templateId (optional)\n    \"<SENDER_ID>\", // senderId (optional)\n    \"<AUTH_KEY>\", // authKey (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Team Membership with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to delete a specific team membership using the Appwrite Kotlin SDK. It initializes an Appwrite client, sets the endpoint and project ID, and then calls the `deleteMembership` method. The snippet includes error handling using a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/delete-membership.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.deleteMembership(\n    \"<TEAM_ID>\", // teamId\n    \"<MEMBERSHIP_ID>\", // membershipId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Performing Health Check in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with the necessary credentials (endpoint, project ID, and API key) and then uses the Health service to perform a basic health check. It requires the Appwrite Kotlin SDK dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.get()\n```\n\n----------------------------------------\n\nTITLE: Creating Telesign Provider in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a Telesign provider using the `createTelesignProvider` method of the Appwrite Messaging service. It requires a `providerId`, `name`, and optional parameters like `from`, `customerId`, `apiKey`, and `enabled`. Replace the placeholders with your actual Telesign provider details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-telesign-provider.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = messaging.createTelesignProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    from = \"+12065550100\", // optional\n    customerId = \"<CUSTOMER_ID>\", // optional\n    apiKey = \"<API_KEY>\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Databases with Appwrite Java SDK\nDESCRIPTION: This code snippet initializes an Appwrite client and uses it to list databases.  It sets the endpoint, project ID, and API key for the client. Then, it initializes the `Databases` service and calls the `list` method to retrieve a list of databases. The result is printed to the console, and any errors are printed to the stack trace.  Dependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Databases.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/list.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.list(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Function Variable with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete a specific variable associated with an Appwrite function. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. The `deleteVariable` method is then called with the function ID and the variable ID to be deleted. A callback is used to handle the success or failure of the operation.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/delete-variable.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.deleteVariable(\n    \"<FUNCTION_ID>\", // functionId\n    \"<VARIABLE_ID>\", // variableId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Token with Appwrite in Kotlin\nDESCRIPTION: This snippet shows how to initialize an Appwrite client and use the Account service to create an OAuth2 token.  It specifies the OAuth provider, success and failure redirect URLs, and scopes. It relies on the io.appwrite library.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-o-auth2token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\nimport io.appwrite.enums.OAuthProvider;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createOAuth2Token(\n    OAuthProvider.AMAZON, // provider\n    \"https://example.com\", // success (optional)\n    \"https://example.com\", // failure (optional)\n    listOf(), // scopes (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Team Membership Status with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to update the status of a team membership in Appwrite using the `updateMembershipStatus` method.  It requires the team ID, membership ID, user ID, and secret as parameters. Replace the placeholder values with the actual IDs and secret.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/update-membership-status.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = teams.updateMembershipStatus(\n    teamId = \"<TEAM_ID>\",\n    membershipId = \"<MEMBERSHIP_ID>\",\n    userId = \"<USER_ID>\",\n    secret = \"<SECRET>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Appwrite Function Build with Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to initialize an Appwrite client and create a function build using the Kotlin SDK. It requires the Appwrite SDK dependency. The snippet sets the endpoint, project ID, and API key. It then uses the `createBuild` method of the `Functions` service to create a new build, taking the function ID, deployment ID, and an optional build ID as input.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/create-build.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.createBuild(\n    \"<FUNCTION_ID>\", // functionId\n    \"<DEPLOYMENT_ID>\", // deploymentId\n    \"<BUILD_ID>\", // buildId (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Membership with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then uses the `Teams` service to retrieve a specific team membership.  It requires the `teamId` and `membershipId` as input. The result (membership object) is printed to the console, and any errors are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/get-membership.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.getMembership(\n    \"<TEAM_ID>\", // teamId\n    \"<MEMBERSHIP_ID>\", // membershipId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating User in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key. It then uses the Users service to create a user with specified details such as user ID, email, password, password salt, separator, signer key, and optional name. Replace the placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-scrypt-modified-user.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.createScryptModifiedUser(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"password\",\n    passwordSalt = \"<PASSWORD_SALT>\",\n    passwordSaltSeparator = \"<PASSWORD_SALT_SEPARATOR>\",\n    passwordSignerKey = \"<PASSWORD_SIGNER_KEY>\",\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database with Appwrite Java SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a database by its ID using the Appwrite Java SDK.  It requires the Appwrite SDK as a dependency. The endpoint, project ID, and API key must be configured before calling the `get` method. It prints the result or error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/get.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.get(\n    \"<DATABASE_ID>\", // databaseId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Challenge with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create an MFA challenge using the Appwrite Kotlin SDK. It requires the io.appwrite dependency and initializes the client with the Appwrite endpoint and project ID. The createMfaChallenge method of the Account service is then called with the EMAIL authentication factor to generate the challenge. The result or error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-mfa-challenge.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\nimport io.appwrite.enums.AuthenticationFactor;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createMfaChallenge(\n    AuthenticationFactor.EMAIL, // factor\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating User Token - Kotlin\nDESCRIPTION: This code snippet demonstrates initializing the Appwrite client with endpoint, project ID, and API key. It then creates a user token using the Users service, specifying the user ID, token length, and expiry time (optional parameters).\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.createToken(\n    userId = \"<USER_ID>\",\n    length = 4, // optional\n    expire = 60 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Appwrite Function Variable\nDESCRIPTION: This snippet initializes an Appwrite client and retrieves a function variable.  It requires the Appwrite Java SDK. The snippet takes functionId and variableId as input and prints the result, or the error if something goes wrong.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/get-variable.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.getVariable(\n    \"<FUNCTION_ID>\", // functionId\n    \"<VARIABLE_ID>\", // variableId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Float Attribute Kotlin\nDESCRIPTION: This snippet creates a float attribute in a specified database collection using the Appwrite Kotlin SDK. It defines parameters such as database ID, collection ID, attribute key, and optional constraints like min, max, and default values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-float-attribute.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = databases.createFloatAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    min = 0, // optional\n    max = 0, // optional\n    default = 0, // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Attribute in Kotlin\nDESCRIPTION: This snippet uses the Appwrite Kotlin SDK to create an integer attribute in a database collection. It requires the database ID, collection ID, attribute key, and other optional parameters like required, min, max, default, and array. Ensure the database and collection exist before running this code.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-integer-attribute.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = databases.createIntegerAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    min = 0, // optional\n    max = 0, // optional\n    default = 0, // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Account Name in Kotlin with Appwrite\nDESCRIPTION: This snippet demonstrates how to update an account's name using the Appwrite Kotlin SDK. It initializes the Appwrite client with your project's endpoint and ID, then calls the `updateName` method on the `Account` service. The result or any error is handled within the callback function. \nDependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Account\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-name.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateName(\n    \"<NAME>\", // name\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Attribute in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a boolean attribute within an Appwrite database collection using the `createBooleanAttribute` method. It requires the database ID, collection ID, attribute key, required status, default value (optional), and array status (optional). Replace `<DATABASE_ID>` and `<COLLECTION_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-boolean-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.createBooleanAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = false, // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating User Name with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and API key.  It then uses the Users service to update a user's name using the `updateName` method. The method requires the `userId` and the new `name` as parameters, along with a CoroutineCallback to handle the response or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-name.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateName(\n    \"<USER_ID>\", // userId\n    \"<NAME>\", // name\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting User Sessions in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete all user sessions using the Appwrite Kotlin SDK. It uses the Users service and requires a user ID to delete the sessions.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-sessions.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval users = Users(client)\n\nval response = users.deleteSessions(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update User MFA with Appwrite Kotlin SDK\nDESCRIPTION: This code initializes the Appwrite client with the endpoint, project ID, and API key, and then uses the `Users` service to update the MFA setting for a specified user. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<USER_ID>` with your actual Appwrite credentials and user ID. The `mfa` parameter is set to `false` in this example.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-mfa.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.updateMfa(\n    userId = \"<USER_ID>\",\n    mfa = false\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving File from Appwrite Storage in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a file from Appwrite Storage using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session. It then retrieves the file from a specific bucket using the `getFile` method with the bucket ID and file ID. The response contains the file metadata.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/get-file.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n\nval response = storage.getFile(\n    bucketId = \"<BUCKET_ID>\",\n    fileId = \"<FILE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update Msg91 Provider with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet updates the Msg91 provider using the Appwrite Messaging service. It requires the Appwrite Kotlin SDK.  The snippet initializes the Appwrite client with the endpoint, project ID, and API key, then calls the `updateMsg91Provider` function with the provider ID, name, enabled status, template ID, sender ID, and auth key as parameters. It prints the result to the console or prints the stack trace if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-msg91provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateMsg91Provider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    \"<TEMPLATE_ID>\", // templateId (optional)\n    \"<SENDER_ID>\", // senderId (optional)\n    \"<AUTH_KEY>\", // authKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Appwrite Storage Buckets in Kotlin\nDESCRIPTION: This code initializes the Appwrite client with necessary credentials (endpoint, project ID, and API key) and then uses the `Storage` service to list buckets. The `listBuckets` method is called with optional query parameters and a search term.  Ensure that the endpoint, project ID, and API key are correctly configured before running this code. The response will contain information about the storage buckets in the project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/list-buckets.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval storage = Storage(client)\n\nval response = storage.listBuckets(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Get Appwrite Storage Bucket in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and retrieves a storage bucket by its ID.  It requires the Appwrite Kotlin SDK.  The endpoint, project ID, and API key need to be set. The `bucketId` parameter specifies the ID of the bucket to retrieve.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/get-bucket.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nStorage storage = new Storage(client);\n\nstorage.getBucket(\n    \"<BUCKET_ID>\", // bucketId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating User Recovery with Appwrite in Kotlin\nDESCRIPTION: This code demonstrates how to update a user's recovery settings using the Appwrite Account service. It requires a valid client instance, user ID, secret, and new password. Replace the placeholder values with your actual data.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-recovery.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.updateRecovery(\n    userId = \"<USER_ID>\",\n    secret = \"<SECRET>\",\n    password = \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Scrypt User Kotlin\nDESCRIPTION: This snippet demonstrates how to create a user with a scrypt hash using the Appwrite Kotlin SDK. It uses the Users service to create a new user with the specified parameters, including userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength and an optional name.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-scrypt-user.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval users = Users(client)\n\nval response = users.createScryptUser(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"password\",\n    passwordSalt = \"<PASSWORD_SALT>\",\n    passwordCpu = 0,\n    passwordMemory = 0,\n    passwordParallel = 0,\n    passwordLength = 0,\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Preferences in Kotlin\nDESCRIPTION: This snippet retrieves the preferences for a specific team using the Appwrite Teams service. You need to provide the team ID for which you want to retrieve the preferences.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/get-prefs.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = teams.getPrefs(\n    teamId = \"<TEAM_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: List Appwrite Storage Buckets with Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client and uses the Storage service to list buckets.  It sets the endpoint, project ID, and API key. The listBuckets method is called with optional query and search parameters. The CoroutineCallback handles the response, printing the result or printing the stack trace of the error if present.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/list-buckets.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nStorage storage = new Storage(client);\n\nstorage.listBuckets(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Anonymous Session - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint and project ID, and then creates an anonymous session using the Account service. The endpoint should be replaced with your Appwrite instance's URL, and the project ID with your Appwrite project's ID. This allows you to interact with the Appwrite API without user authentication.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-anonymous-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval response = account.createAnonymousSession()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document from Appwrite Database with Kotlin\nDESCRIPTION: This Kotlin code snippet initializes the Appwrite client with the project's endpoint, project ID, and session. It then uses the `Databases` service to retrieve a specific document from a database collection using the `getDocument` method.  The method requires the database ID, collection ID, and document ID as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval databases = Databases(client)\n\nval response = databases.getDocument(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    documentId = \"<DOCUMENT_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Fetch User Target with Appwrite Kotlin SDK\nDESCRIPTION: This code initializes an Appwrite client and uses it to fetch a specific target associated with a user. It sets the API endpoint, project ID, and API key. It then calls the `getTarget` method on the `Users` service, providing the user ID and target ID as parameters. A callback handles the result, printing it to the console, or prints any error messages.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/get-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.getTarget(\n    \"<USER_ID>\", // userId\n    \"<TARGET_ID>\", // targetId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Function Executions with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client, configures it with the endpoint and project ID, and then uses the `listExecutions` method from the `Functions` service to list the executions of a given function.\nDependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Functions\nParameters: functionId (String), queries (List), search (String)\nExpected Input: Appwrite project ID, API endpoint, function ID, optional queries and search string.\nOutput: Prints the list of function executions to the console, or an error message if the request fails.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/list-executions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nFunctions functions = new Functions(client);\n\nfunctions.listExecutions(\n    \"<FUNCTION_ID>\", // functionId\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Phone Token with Appwrite Kotlin SDK\nDESCRIPTION: This snippet shows how to create a phone token using the Appwrite Kotlin SDK. It requires setting the Appwrite endpoint and project ID. The `createPhoneToken` method is called on the Account service with the user ID, phone number, and a callback to handle the result or error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-phone-token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createPhoneToken(\n    \"<USER_ID>\", // userId\n    \"+12065550100\", // phone\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Push Notification with Appwrite Messaging (Kotlin)\nDESCRIPTION: This snippet updates an existing push notification using Appwrite's Messaging service. It initializes the Appwrite client with the endpoint, project ID, and API key, then calls the `updatePush` method with various parameters to modify the push notification. The code uses a `CoroutineCallback` to handle the asynchronous result and any potential errors. Note that the user will need to replace placeholder values like `<MESSAGE_ID>`, `<TITLE>`, `<BODY>`, etc., with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-push.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\nimport io.appwrite.models.MessagePriority;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updatePush(\n    \"<MESSAGE_ID>\", // messageId\n    listOf(), // topics (optional)\n    listOf(), // users (optional)\n    listOf(), // targets (optional)\n    \"<TITLE>\", // title (optional)\n    \"<BODY>\", // body (optional)\n    mapOf( \"a\" to \"b\" ), // data (optional)\n    \"<ACTION>\", // action (optional)\n    \"[ID1:ID2]\", // image (optional)\n    \"<ICON>\", // icon (optional)\n    \"<SOUND>\", // sound (optional)\n    \"<COLOR>\", // color (optional)\n    \"<TAG>\", // tag (optional)\n    0, // badge (optional)\n    false, // draft (optional)\n    \"\", // scheduledAt (optional)\n    false, // contentAvailable (optional)\n    false, // critical (optional)\n    MessagePriority.NORMAL, // priority (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Function Runtimes with Appwrite SDK - Java\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and API key, and then uses the Functions service to list available function runtimes. The `listRuntimes` method is called asynchronously using `CoroutineCallback`, with a callback to handle the result or any errors encountered during the process.  The success callback prints the list of runtimes to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/list-runtimes.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.listRuntimes(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Create Function Variable with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create a function variable using the Appwrite Kotlin SDK. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. It uses the `createVariable` function from the `Functions` service, taking the function ID, variable key, and variable value as parameters. The expected output is a response object from the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/create-variable.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.createVariable(\n    functionId = \"<FUNCTION_ID>\",\n    key = \"<KEY>\",\n    value = \"<VALUE>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Session in Appwrite (Kotlin)\nDESCRIPTION: This code snippet initializes the Appwrite client and creates an anonymous session using the `createAnonymousSession` method from the `Account` service. It handles the asynchronous result using a CoroutineCallback, printing the result or printing the stack trace if an error occurs.  The endpoint and project ID need to be configured before execution.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-anonymous-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createAnonymousSession(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Team Membership with Appwrite Kotlin SDK\nDESCRIPTION: This snippet updates a specific team membership within an Appwrite project. It requires the Appwrite Kotlin SDK. The snippet initializes the Appwrite client with the endpoint, project ID, and user session. It then utilizes the `updateMembership` function from the `Teams` service to update the membership, providing the team ID, membership ID, roles, and a callback to handle the result or any potential errors. The output is either the updated membership object or an error message printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/update-membership.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.updateMembership(\n    \"<TEAM_ID>\", // teamId\n    \"<MEMBERSHIP_ID>\", // membershipId\n    listOf(), // roles\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Account MFA with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet showcases how to update the Multi-Factor Authentication (MFA) status for an Appwrite account using the Kotlin SDK. It requires setting up the Appwrite client with the correct endpoint, project ID, and session information. The `updateMFA` function of the `Account` service is then used to disable MFA for the account.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-m-f-a.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateMFA(\n    mfa = false\n)\n```\n\n----------------------------------------\n\nTITLE: Update Textmagic Provider with Appwrite in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint, project ID, and API key. It then uses the Messaging service to update a Textmagic provider with its ID and other optional parameters such as name, enabled status, username, API key, and from address. A CoroutineCallback handles the response, printing the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-textmagic-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateTextmagicProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    \"<USERNAME>\", // username (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    \"<FROM>\", // from (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code with Appwrite Avatars in Java\nDESCRIPTION: This snippet demonstrates generating a QR code using Appwrite's Avatars service within a Java application. It initializes an Appwrite client with the endpoint and project ID, and then utilizes the `getQR` method of the `Avatars` service to create the QR code based on the specified text, size, margin and download parameters. A CoroutineCallback is used to handle the asynchronous response and print the result or any errors encountered.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-q-r.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Avatars;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAvatars avatars = new Avatars(client);\n\navatars.getQR(\n    \"<TEXT>\", // text\n    1, // size (optional)\n    0, // margin (optional)\n    false, // download (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Datetime Attribute Kotlin\nDESCRIPTION: This snippet demonstrates how to update a datetime attribute within a collection in Appwrite. It utilizes the `updateDatetimeAttribute` function from the `Databases` service. Replace the placeholder values for databaseId, collectionId, and key with your actual values.  The newKey parameter is optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-datetime-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.updateDatetimeAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"\",\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Queue Usage in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and API key. It then creates a Health service instance and calls the `getQueueUsage` method to asynchronously retrieve queue usage information. The callback handles both success and error scenarios, printing the result or the stack trace of the error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-usage.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueUsage(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Appwrite Account Session\nDESCRIPTION: This Kotlin snippet shows how to update an Appwrite account session. It initializes the Appwrite client with the endpoint and project ID, creates an Account service instance, and calls the `updateSession` method to update the session. The `sessionId` parameter specifies the ID of the session to update.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateSession(\n    sessionId = \"<SESSION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Subscribers with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client and uses the Messaging service to list subscribers for a given topic.  It requires the Appwrite Kotlin SDK. Parameters include the topic ID, optional queries, an optional search term, and a callback function to handle the result or any errors that occur.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-subscribers.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listSubscribers(\n    \"<TOPIC_ID>\", // topicId\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Team Preferences with Appwrite Kotlin SDK\nDESCRIPTION: This snippet updates the preferences for a specific team using the Appwrite Kotlin SDK. It initializes an Appwrite client, sets the endpoint and project ID, creates a Teams service, and calls the updatePrefs method with the team ID and preferences as a map. A CoroutineCallback is used to handle the asynchronous response and print the result or error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/update-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.updatePrefs(\n    \"<TEAM_ID>\", // teamId\n    mapOf( \"a\" to \"b\" ), // prefs\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Telesign Provider with Appwrite in Kotlin\nDESCRIPTION: This snippet updates a Telesign messaging provider using the Appwrite Kotlin SDK. It requires the Appwrite client to be initialized with the endpoint, project ID, and API key. The `updateTelesignProvider` method is called with the provider ID and optional parameters such as name, enabled status, customer ID, API key, and 'from' number. A callback is used to handle the response and any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-telesign-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateTelesignProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    \"<CUSTOMER_ID>\", // customerId (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    \"<FROM>\", // from (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Languages using Appwrite Locale in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Locale service to retrieve a list of languages. It depends on a properly initialized Appwrite client and the io.appwrite.services.Locale class. The response contains the list of supported languages.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-languages.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval locale = Locale(client)\n\nval response = locale.listLanguages()\n```\n\n----------------------------------------\n\nTITLE: Retrieve Appwrite Messaging Subscriber in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific subscriber from an Appwrite Messaging topic using the Kotlin SDK. It initializes the Appwrite client with the required endpoint, project ID, and API key. It then uses the Messaging service to call the `getSubscriber` method, passing the topic ID and subscriber ID as parameters. The result or any potential error is handled within the CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/get-subscriber.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.getSubscriber(\n    \"<TOPIC_ID>\", // topicId\n    \"<SUBSCRIBER_ID>\", // subscriberId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Attribute with Appwrite Java SDK\nDESCRIPTION: This code snippet shows how to retrieve a database attribute from Appwrite using the Java SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. It then calls the getAttribute method on the Databases service, passing in the database ID, collection ID, and key of the attribute to retrieve. The result is handled asynchronously with a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/get-attribute.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.getAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Session with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client, sets the endpoint and project ID, and then uses the Account service to update a phone session. It requires the Appwrite Kotlin SDK as a dependency. The updatePhoneSession method takes the user ID and secret as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-phone-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval response = account.updatePhoneSession(\n    userId = \"<USER_ID>\",\n    secret = \"<SECRET>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Messages with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and API key, and then uses the Messaging service to list messages. It uses a CoroutineCallback to handle the asynchronous response, printing the result or error if any.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-messages.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listMessages(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Twilio Provider with Appwrite Messaging - Kotlin\nDESCRIPTION: This snippet demonstrates how to create a Twilio provider in Appwrite using the Kotlin SDK. It initializes an Appwrite client with the endpoint, project ID, and API key. Then, it creates a Twilio provider using the `createTwilioProvider` method of the `Messaging` service. The parameters include the provider ID, name, `from` phone number (optional), `accountSid` (optional), `authToken` (optional), and whether the provider is `enabled` (optional).\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-twilio-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.createTwilioProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    from = \"+12065550100\", // optional\n    accountSid = \"<ACCOUNT_SID>\", // optional\n    authToken = \"<AUTH_TOKEN>\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Telesign Provider in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then calls the `updateTelesignProvider` function of the `Messaging` service to update a Telesign provider. The function takes various parameters like provider ID, name, enabled status, customer ID, API key, and 'from' number.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-telesign-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateTelesignProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    customerId = \"<CUSTOMER_ID>\", // optional\n    apiKey = \"<API_KEY>\", // optional\n    from = \"<FROM>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Appwrite Messaging Provider with Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client and uses the Messaging service to update a Twilio provider. It requires the Appwrite endpoint, project ID, API key, provider ID, and optionally name, enabled status, account SID, auth token, and 'from' number. The result or any errors are printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-twilio-provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateTwilioProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    \"<ACCOUNT_SID>\", // accountSid (optional)\n    \"<AUTH_TOKEN>\", // authToken (optional)\n    \"<FROM>\", // from (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving MFA Recovery Codes in Kotlin\nDESCRIPTION: This snippet uses the initialized Appwrite client and the Users service to retrieve MFA recovery codes for a specific user.  The `userId` parameter needs to be replaced with the ID of the user.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/get-mfa-recovery-codes.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.getMfaRecoveryCodes(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Create Appwrite Magic URL Token in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and then uses the Account service to create a magic URL token for passwordless authentication. It requires the Appwrite endpoint, project ID, user ID, email address, and redirect URL. A CoroutineCallback is used to handle the asynchronous response, printing the result or error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-magic-u-r-l-token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createMagicURLToken(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"https://example.com\", // url (optional)\n    false, // phrase (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Download Function Deployment with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to download a specific deployment of an Appwrite function. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. The `getDeploymentDownload` method is then called with the function ID and deployment ID to initiate the download. The download is handled asynchronously using CoroutineCallback. Replace `<FUNCTION_ID>` and `<DEPLOYMENT_ID>` with actual IDs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/get-deployment-download.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.getDeploymentDownload(\n    \"<FUNCTION_ID>\", // functionId\n    \"<DEPLOYMENT_ID>\", // deploymentId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: List Function Deployments with Appwrite in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and lists function deployments using the Functions service. It requires the Appwrite Kotlin SDK.  The functionId parameter is required, while queries and search are optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/list-deployments.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.listDeployments(\n    \"<FUNCTION_ID>\", // functionId\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Account Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then creates an instance of the Account service. It sets up the necessary configurations for interacting with the Appwrite API to manage user accounts.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-verification.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Listing Account Sessions with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list user sessions using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the endpoint and project ID, and then calls the `listSessions` method on the Account service. The result is printed to the console, and errors are handled.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/list-sessions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.listSessions(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Deleting MFA Authenticator in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a Multi-Factor Authentication (MFA) authenticator of a specific type (TOTP) using the Appwrite SDK for Kotlin. It calls the `deleteMfaAuthenticator` method on the `Account` service with the specified authenticator type.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/delete-mfa-authenticator.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.deleteMfaAuthenticator(\n    type =  AuthenticatorType.TOTP\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Identity with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to delete a user identity using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then calls the `deleteIdentity` method of the `Users` service with the identity ID. A CoroutineCallback is used to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/delete-identity.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.deleteIdentity(\n    \"<IDENTITY_ID>\", // identityId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Attribute in Kotlin\nDESCRIPTION: This snippet creates a relationship attribute between two collections in an Appwrite database.  It uses the `createRelationshipAttribute` method of the `Databases` service. The parameters include database ID, collection ID, related collection ID, relationship type, and optional settings like two-way relationship, keys, and delete behavior. Replace <DATABASE_ID>, <COLLECTION_ID>, and <RELATED_COLLECTION_ID> with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-relationship-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.createRelationshipAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    relatedCollectionId = \"<RELATED_COLLECTION_ID>\",\n    type =  RelationshipType.ONETOONE,\n    twoWay = false, // optional\n    key = \"\", // optional\n    twoWayKey = \"\", // optional\n    onDelete = \"cascade\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Create Appwrite URL Attribute in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client and creates a URL attribute in a specified database collection. It requires the Appwrite Kotlin SDK and sets the endpoint, project ID, and API key for authentication. The `createUrlAttribute` function is then called with the database ID, collection ID, attribute key, required flag, default URL, array flag, and a callback function to handle the result.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-url-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createUrlAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"https://example.com\", // default (optional)\n    false, // array (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Team Preferences with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint and project ID, and retrieves preferences for a specified team using the `getPrefs` method. It uses a CoroutineCallback to handle the asynchronous response, printing the result or error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/get-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.getPrefs(\n    \"<TEAM_ID>\", // teamId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and sets the endpoint, project ID, and API key. The endpoint should point to your Appwrite instance, and you'll need to replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual values. The client is then used to create a Messaging service instance.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-twilio-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Listing Functions in Appwrite with Kotlin SDK\nDESCRIPTION: This snippet showcases how to initialize the Appwrite client with the required endpoint, project ID, and API key. It then uses the `Functions` service to list the available functions. The `list` method takes optional query parameters and a search term. A callback is used to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/list.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.list(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Health of Failed Jobs in Kotlin\nDESCRIPTION: This snippet uses the initialized Appwrite client and the Health service to retrieve the number of failed jobs for the database v1 service. It takes an optional threshold parameter.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-failed-jobs.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval health = Health(client)\n\nval response = health.getFailedJobs(\n    name =  Name.V1_DATABASE,\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: List User Identities with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list user identities using the Appwrite Kotlin SDK. It initializes the client with the endpoint, project ID, and API key. It then calls `users.listIdentities()` with optional query parameters and a search term. The callback handles the response, printing the result or any errors to the console. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/list-identities.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.listIdentities(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Account Status with Appwrite Kotlin SDK\nDESCRIPTION: This snippet updates the account status using the Appwrite Kotlin SDK. It requires the io.appwrite library. The client is initialized with the endpoint, project ID, and session. The updateStatus method is called with a CoroutineCallback to handle the asynchronous result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-status.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateStatus(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Create User Token - Appwrite Kotlin SDK\nDESCRIPTION: This snippet creates a user token using the Appwrite Kotlin SDK. It requires the Appwrite client to be initialized with the endpoint, project ID, and API key. The `createToken` method is then called on the Users service, providing the user ID and optional parameters for token length and expiration. A callback is used to handle the result or any potential errors. \n\nDependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Users.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createToken(\n    \"<USER_ID>\", // userId\n    4, // length (optional)\n    60, // expire (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating an Appwrite Function using Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update an Appwrite function using the Kotlin SDK. It initializes the Appwrite client with endpoint, project ID, and API key, then uses the `Functions` service to update a function, specifying parameters such as function ID, name, runtime environment, and execution permissions. The `update` function takes several optional parameters to configure the function's behavior.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/update.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.update(\n    functionId = \"<FUNCTION_ID>\",\n    name = \"<NAME>\",\n    runtime = \"node-14.5\", // optional\n    execute = listOf(\"any\"), // optional\n    events = listOf(), // optional\n    schedule = \"\", // optional\n    timeout = 1, // optional\n    enabled = false, // optional\n    logging = false, // optional\n    entrypoint = \"<ENTRYPOINT>\", // optional\n    commands = \"<COMMANDS>\", // optional\n    scopes = listOf(), // optional\n    installationId = \"<INSTALLATION_ID>\", // optional\n    providerRepositoryId = \"<PROVIDER_REPOSITORY_ID>\", // optional\n    providerBranch = \"<PROVIDER_BRANCH>\", // optional\n    providerSilentMode = false, // optional\n    providerRootDirectory = \"<PROVIDER_ROOT_DIRECTORY>\", // optional\n    specification = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Enum Attribute in Appwrite Database (Kotlin)\nDESCRIPTION: This code snippet updates an enum attribute in an Appwrite database collection using the Appwrite Kotlin SDK. It initializes the Appwrite client, creates a Databases service instance, and calls the `updateEnumAttribute` method. The method takes parameters such as database ID, collection ID, attribute key, enum elements, required status, default value, and an optional new key. It uses a CoroutineCallback to handle the asynchronous result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-enum-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateEnumAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    listOf(), // elements\n    false, // required\n    \"<DEFAULT>\", // default\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create JWT with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create a JWT using the Appwrite Kotlin SDK. It requires the `io.appwrite` dependency. The `createJWT` method is called asynchronously using `CoroutineCallback`. The generated JWT or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-j-w-t.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createJWT(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Getting Queue Webhooks Health - Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client and uses the Health service to retrieve the status of queue webhooks. It requires an endpoint, project ID, and API key to be set up correctly. The getQueueWebhooks method is called with a threshold and a callback to handle the response or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-webhooks.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueWebhooks(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update String Attribute in Appwrite Database - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to update a string attribute in an Appwrite database. It requires the `io.appwrite` dependency. The code initializes the Appwrite client with the endpoint, project ID, and API key, then calls the `updateStringAttribute` method on the `Databases` service, providing the database ID, collection ID, attribute key, and other parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-string-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateStringAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"<DEFAULT>\", // default\n    1, // size (optional)\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Database Indexes with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client, configures it with endpoint, project ID, and API key, then uses the `Databases` service to list indexes within a specified database and collection. It uses `CoroutineCallback` to handle the asynchronous response and prints the result or error message.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/list-indexes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.listIndexes(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Account Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It also creates an instance of the Account service which is used to interact with Appwrite's account management features. Replace <REGION>.cloud.appwrite.io with your Appwrite endpoint and <YOUR_PROJECT_ID> with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-recovery.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Logs with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the `Users` service to retrieve logs for a specified user ID.  It defines a callback to handle the result or any potential errors during the API call.  Replace placeholders with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/list-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.listLogs(\n    \"<USER_ID>\", // userId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Vonage Provider via Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to update a Vonage provider using the Appwrite Messaging service. It requires a valid provider ID and allows updating parameters such as name, enabled status, API key, API secret, and 'from' address. All the optional parameters can be updated by providing values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-vonage-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.updateVonageProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    apiKey = \"<API_KEY>\", // optional\n    apiSecret = \"<API_SECRET>\", // optional\n    from = \"<FROM>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting MFA Authenticator with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete a multi-factor authentication (MFA) authenticator for a specific user using the Appwrite Kotlin SDK. It requires setting up the Appwrite client with the endpoint, project ID, and API key.  The `deleteMfaAuthenticator` method is then called with the user ID and authenticator type, handling both successful and error responses. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<USER_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/delete-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\nimport io.appwrite.enums.AuthenticatorType;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.deleteMfaAuthenticator(\n    \"<USER_ID>\", // userId\n    AuthenticatorType.TOTP, // type\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Team Name with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to update a team name using the Appwrite Kotlin SDK.  It initializes the client, sets the endpoint, project ID and session, and then updates the team name using the Teams service. It requires the Appwrite Kotlin SDK dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/update-name.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.updateName(\n    \"<TEAM_ID>\", // teamId\n    \"<NAME>\", // name\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Target with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete a target associated with a specific user within an Appwrite project. It requires the Appwrite Kotlin SDK.  It initializes the client with the endpoint, project ID, and API key, then calls the `deleteTarget` method with the `userId` and `targetId`. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/delete-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.deleteTarget(\n    \"<USER_ID>\", // userId\n    \"<TARGET_ID>\", // targetId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection with Appwrite Kotlin SDK\nDESCRIPTION: This snippet retrieves a collection from an Appwrite database. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. The `getCollection` method is then called with the database ID and collection ID.  The result is printed to the console, and any errors are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/get-collection.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.getCollection(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Health Check with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials (endpoint, project ID, and API key) and then uses the Health service to check the health of the local storage. It requires the io.appwrite dependency. Replace `<REGION>.cloud.appwrite.io/v1`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your Appwrite instance's details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-storage-local.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getStorageLocal()\n```\n\n----------------------------------------\n\nTITLE: Get Function Execution Details with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet shows how to retrieve the details of a specific function execution in Appwrite using the Kotlin SDK. It initializes an Appwrite client with the endpoint and project ID, creates a Functions service, and then uses the `getExecution` method to fetch the execution details. The function and execution IDs are passed as parameters, and the result is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/get-execution.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nFunctions functions = new Functions(client);\n\nfunctions.getExecution(\n    \"<FUNCTION_ID>\", // functionId\n    \"<EXECUTION_ID>\", // executionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing User Identities with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to list user identities using the Appwrite Kotlin SDK. It uses the `listIdentities` method, allowing optional queries and search parameters. Replace `<SEARCH>` with your desired search term, if any.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-identities.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = users.listIdentities(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function from Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific function from Appwrite using the Appwrite Kotlin SDK. It initializes an Appwrite client with the endpoint, project ID, and API key, then creates a Functions service instance. The `get` method is called with the function ID, and the result is handled asynchronously using a `CoroutineCallback` to print the function details or any encountered errors. Requires the io.appwrite package.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.get(\n    \"<FUNCTION_ID>\", // functionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Appwrite Storage (Kotlin)\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, set the endpoint and project ID, create a Storage service instance, and list files within a specified bucket. It includes error handling and printing the results. Dependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Storage.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/list-files.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.listFiles(\n    \"<BUCKET_ID>\", // bucketId\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating SMS Message with Appwrite in Kotlin\nDESCRIPTION: This snippet updates an existing SMS message using Appwrite's Messaging service. It initializes the Appwrite client, sets the endpoint, project ID, and API key, and then calls the `updateSms` method with parameters such as the message ID, topics, users, targets, content, draft status and schedule time. The result of the update operation is then printed to the console or any error encountered is printed via stacktrace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-sms.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateSms(\n    \"<MESSAGE_ID>\", // messageId\n    listOf(), // topics (optional)\n    listOf(), // users (optional)\n    listOf(), // targets (optional)\n    \"<CONTENT>\", // content (optional)\n    false, // draft (optional)\n    \"\", // scheduledAt (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Function Deployment Build - Kotlin\nDESCRIPTION: This snippet updates the build associated with a specific function deployment in Appwrite. It initializes the Appwrite client with the endpoint, project ID, and API key, and then calls the `updateDeploymentBuild` method of the `Functions` service. It requires the function ID and deployment ID as input.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/update-deployment-build.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.updateDeploymentBuild(\n    functionId = \"<FUNCTION_ID>\",\n    deploymentId = \"<DEPLOYMENT_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Recovery Codes with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it creates an instance of the Users service and calls the createMfaRecoveryCodes method with the user ID. The result or error is then printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createMfaRecoveryCodes(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving EU Countries with Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Locale service to retrieve a list of EU countries. It utilizes a CoroutineCallback to handle the asynchronous result and prints the result to the console, or prints the stacktrace if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-countries-e-u.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nLocale locale = new Locale(client);\n\nlocale.listCountriesEU(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating User Phone Number with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to update a user's phone number using the `Users` service in the Appwrite Kotlin SDK.  It requires a configured Appwrite client and the user's ID and the new phone number as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-phone.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval users = Users(client)\n\nval response = users.updatePhone(\n    userId = \"<USER_ID>\",\n    number = \"+12065550100\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. The `Client` object is configured with necessary credentials to interact with the Appwrite server. Replace `<REGION>.cloud.appwrite.io`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-boolean-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Download Function Deployment with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set the endpoint, project ID, and API key, and then use the Functions service to download a specific function deployment. It requires the io.appwrite dependency. The functionId and deploymentId parameters are necessary to identify the specific deployment to download.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/get-deployment-download.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval result = functions.getDeploymentDownload(\n    functionId = \"<FUNCTION_ID>\",\n    deploymentId = \"<DEPLOYMENT_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving MFA Recovery Codes with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to retrieve MFA recovery codes for a user using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then uses the Users service to call the getMfaRecoveryCodes method. A CoroutineCallback is used to handle the asynchronous result and any potential errors.  Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<USER_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/get-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.getMfaRecoveryCodes(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Messages with Appwrite in Kotlin\nDESCRIPTION: This snippet uses the initialized Appwrite client to list messages from the Messaging service. It showcases the use of optional query parameters and search terms.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-messages.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.listMessages(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Messaging Topic in Appwrite (Kotlin)\nDESCRIPTION: This snippet demonstrates how to update a messaging topic in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, and then uses the `updateTopic` method to update the topic. A callback is used to handle the result or any potential errors. Dependencies include the Appwrite Kotlin SDK. Replace placeholders like `<TOPIC_ID>`, `<NAME>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<REGION>` with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-topic.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateTopic(\n    \"<TOPIC_ID>\", // topicId\n    \"<NAME>\", // name (optional)\n    listOf(\"any\"), // subscribe (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration to connect to the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-labels.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite User with Scrypt - Kotlin\nDESCRIPTION: This snippet demonstrates creating a user in Appwrite with a scrypt modified hash using the Kotlin SDK.  It requires the Appwrite client to be initialized with the endpoint, project ID, and API key. The `createScryptModifiedUser` method is then called on the `Users` service with the user details and hashing parameters. The CoroutineCallback handles the API response.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-scrypt-modified-user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createScryptModifiedUser(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"password\", // password\n    \"<PASSWORD_SALT>\", // passwordSalt\n    \"<PASSWORD_SALT_SEPARATOR>\", // passwordSaltSeparator\n    \"<PASSWORD_SIGNER_KEY>\", // passwordSignerKey\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating SMTP Provider with Appwrite in Kotlin\nDESCRIPTION: This snippet shows how to create an SMTP provider using the Appwrite Messaging service.  It requires various parameters such as provider ID, name, host, port, username, password, encryption, and email-related details. A CoroutineCallback is used to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-smtp-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nmessaging.createSmtpProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"<HOST>\", // host\n    1, // port (optional)\n    \"<USERNAME>\", // username (optional)\n    \"<PASSWORD>\", // password (optional)\n    SmtpEncryption.NONE, // encryption (optional)\n    false, // autoTLS (optional)\n    \"<MAILER>\", // mailer (optional)\n    \"<FROM_NAME>\", // fromName (optional)\n    \"email@example.com\", // fromEmail (optional)\n    \"<REPLY_TO_NAME>\", // replyToName (optional)\n    \"email@example.com\", // replyToEmail (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create Bcrypt User with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates creating a new user with bcrypt password hashing using the Appwrite Kotlin SDK.  It calls the `createBcryptUser` method of the `Users` service, passing the user ID, email, password, and an optional name. Replace placeholders with desired values for the new user.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-bcrypt-user.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.createBcryptUser(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"password\",\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Account Logs with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Kotlin SDK to list account logs. It calls the `listLogs` method on the `Account` service, passing an empty list for queries, indicating that all logs should be retrieved without any filtering.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/list-logs.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.listLogs(\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Recovery Codes in Kotlin\nDESCRIPTION: This snippet demonstrates how to update the MFA recovery codes for a user using the `updateMfaRecoveryCodes` method of the `Users` service. It requires the user's ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-mfa-recovery-codes.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval users = Users(client)\n\nval response = users.updateMfaRecoveryCodes(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint URL and project ID. Replace `<REGION>` with the Appwrite region and `<YOUR_PROJECT_ID>` with your project's ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Deployment in Kotlin\nDESCRIPTION: This Kotlin code initializes an Appwrite client with the endpoint, project ID, and API key. It then creates a Functions service instance and retrieves a specific deployment using its function and deployment IDs. The code requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/get-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.getDeployment(\n    functionId = \"<FUNCTION_ID>\",\n    deploymentId = \"<DEPLOYMENT_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the project's endpoint, project ID, and API key. It sets up the client to interact with the Appwrite API. Replace placeholders with your actual credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-ip-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Creating an Appwrite Account in Kotlin\nDESCRIPTION: This snippet creates a new user account in Appwrite. Replace `<USER_ID>`, `email@example.com`, and `<NAME>` with the desired user ID, email, and name, respectively. The password is intentionally left blank, indicating the creation process will require password setup later.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.create(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"\",\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Appwrite Account in Kotlin\nDESCRIPTION: This snippet shows how to create a new account with the Appwrite Kotlin SDK. It requires the `io.appwrite` dependency.  The code initializes the Appwrite client, sets the endpoint and project ID, and then uses the `Account` service to create a new user with email, userId, password and name. The result or any errors are printed to the console using a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.create(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"\", // password\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Team Membership with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create a team membership using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the endpoint and project ID, and then calls the createMembership function of the Teams service with various parameters such as team ID, roles, email, user ID, phone, URL, and name. The result is stored in the 'response' variable.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/create-membership.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n\nval response = teams.createMembership(\n    teamId = \"<TEAM_ID>\",\n    roles = listOf(),\n    email = \"email@example.com\", // optional\n    userId = \"<USER_ID>\", // optional\n    phone = \"+12065550100\", // optional\n    url = \"https://example.com\", // optional\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Adding SNAPSHOT Repository - Gradle\nDESCRIPTION: Configures the Gradle build file to include the SNAPSHOT repository, which is required if you want to fetch SNAPSHOT releases of the Appwrite SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://s01.oss.sonatype.org/content/repositories/snapshots/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update User Phone Verification with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint, project ID, and API key, and then uses the Users service to update a specific user's phone verification status.  It uses a CoroutineCallback to handle the result and any potential errors. The parameters required are `<USER_ID>`, `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>`.  If an error occurs, it prints the stack trace; otherwise, it prints the result.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-phone-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updatePhoneVerification(\n    \"<USER_ID>\", // userId\n    false, // phoneVerification\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Appwrite Account Session with Kotlin SDK\nDESCRIPTION: This snippet shows how to delete a specific session of an Appwrite account using its ID. It initializes the Appwrite client with the endpoint, project ID, and session.  The Account service is then used to delete the session, with a callback to handle success or failure.  The `sessionId` parameter is the ID of the session to be deleted.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/delete-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.deleteSession(\n    \"<SESSION_ID>\", // sessionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Messaging Subscriber - Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a new subscriber in Appwrite Messaging using the Kotlin SDK. It initializes the Appwrite client with the necessary credentials (endpoint, project ID, and JWT) and then calls the `createSubscriber` method on the Messaging service to create a subscriber.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-subscriber.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setJWT(\"<YOUR_JWT>\") // Your secret JSON Web Token\n\nval messaging = Messaging(client)\n\nval response = messaging.createSubscriber(\n    topicId = \"<TOPIC_ID>\",\n    subscriberId = \"<SUBSCRIBER_ID>\",\n    targetId = \"<TARGET_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving MFA Recovery Codes with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to retrieve MFA recovery codes for a user account using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session token. Then, it uses the Account service to asynchronously fetch the recovery codes and prints the result or any error that occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/get-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.getMfaRecoveryCodes(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Delete Team Membership with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete a team membership using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session, and then calls the `deleteMembership` function with the team ID and membership ID. The `teamId` and `membershipId` parameters are required to identify the membership to be deleted.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/delete-membership.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n\nval response = teams.deleteMembership(\n    teamId = \"<TEAM_ID>\",\n    membershipId = \"<MEMBERSHIP_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and List Continents in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and session. It then creates a Locale service instance and uses it to retrieve a list of continents. A CoroutineCallback is used to handle the asynchronous result, printing the result to the console or printing the error stacktrace if there's an error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-continents.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nLocale locale = new Locale(client);\n\nlocale.listContinents(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating User Session with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a user session using the Appwrite Kotlin SDK. It uses the initialized client and the `createSession` method from the `Users` service. Replace `<USER_ID>` with the actual user ID for whom you want to create the session.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-session.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.createSession(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, setting the API endpoint, project ID, and user session.  It requires the io.appwrite.Client dependency and proper values for the endpoint and project ID. The endpoint should point to your Appwrite instance, and the project ID should match your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-languages.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Update Phone Session with Appwrite in Kotlin\nDESCRIPTION: This code initializes an Appwrite client, sets the endpoint and project ID, creates an Account service instance, and then calls the `updatePhoneSession` method. It requires the Appwrite SDK for Kotlin. The `<USER_ID>` and `<SECRET>` placeholders need to be replaced with actual values. The result or any potential errors are handled within the CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-phone-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updatePhoneSession(\n    \"<USER_ID>\", // userId\n    \"<SECRET>\", // secret\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, setting the endpoint and project ID.  It also sets the session. Replace <REGION>.cloud.appwrite.io with your Appwrite endpoint and <YOUR_PROJECT_ID> with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval locale = Locale(client)\n\nval response = locale.get()\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Settings with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update a user's multi-factor authentication (MFA) settings using the Appwrite Kotlin SDK. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. The `updateMfa` method of the `Users` service is then called with the user ID and the desired MFA status (enabled/disabled). A callback is used to handle the response or any errors that occur.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-mfa.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateMfa(\n    \"<USER_ID>\", // userId\n    false, // mfa\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Deleting Function in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the necessary endpoint, project ID, and API key.  It then uses the `Functions` service to asynchronously delete a function using its ID. The `functionId` parameter specifies the ID of the function to be deleted.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.delete(\n    functionId = \"<FUNCTION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: List Messaging Subscriber Logs with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client and uses the Messaging service to list subscriber logs. It requires the Appwrite SDK for Kotlin as a dependency. The `listSubscriberLogs` method takes the subscriber ID and an optional list of queries as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-subscriber-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listSubscriberLogs(\n    \"<SUBSCRIBER_ID>\", // subscriberId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Magic URL Token with Appwrite in Kotlin\nDESCRIPTION: This code snippet creates a magic URL token for a user with a given email and URL. Replace `<USER_ID>` with the ID of the user. The `url` and `phrase` parameters are optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-magic-u-r-l-token.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = account.createMagicURLToken(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    url = \"https://example.com\", // optional\n    phrase = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. It sets the endpoint to the Appwrite server and configures the project ID to interact with a specific Appwrite project. It also initializes an empty session. This step is crucial for authenticating and communicating with the Appwrite service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-browser.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\nimport io.appwrite.enums.Browser\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Avatar with Appwrite SDK for Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a browser avatar using the Appwrite SDK for Kotlin. It initializes the Appwrite client with the endpoint and project ID, and then uses the Avatars service to fetch the browser avatar based on the specified browser code, width, height, and quality. A callback is used to handle the result or any errors encountered.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-browser.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Avatars;\nimport io.appwrite.enums.Browser;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAvatars avatars = new Avatars(client);\n\navatars.getBrowser(\n    Browser.AVANT_BROWSER, // code\n    0, // width (optional)\n    0, // height (optional)\n    0, // quality (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update FCM Provider using Appwrite Kotlin SDK\nDESCRIPTION: This snippet shows how to update an FCM provider in Appwrite using the Kotlin SDK. It requires the io.appwrite dependency and sets up the client with the endpoint, project ID, and API key. The updateFcmProvider function is called with the provider ID, optional name, enabled state, service account JSON, and a callback to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-fcm-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateFcmProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    false, // enabled (optional)\n    mapOf( \"a\" to \"b\" ), // serviceAccountJSON (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Get Time - Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It then utilizes the Health service to asynchronously retrieve the server time and prints the result or any errors to the console. Requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-time.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getTime(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It sets up the client to interact with the Appwrite server. Ensure to replace placeholders with your actual endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-boolean-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Listing Teams in Kotlin\nDESCRIPTION: This snippet demonstrates how to list teams using the Appwrite Teams service. It uses the `list` method with optional query and search parameters.  `queries` allows for filtering based on various criteria and `search` allows for searching based on text.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/list.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval teams = Teams(client)\n\nval response = teams.list(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Health Check: Retrieve Queue Certificates - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client and uses it to call the `getQueueCertificates` method of the Health service. It requires the Appwrite SDK for Kotlin and uses coroutines to handle the asynchronous API call. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual Appwrite endpoint, project ID, and API key respectively. The callback function handles the result or error and prints accordingly.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-certificates.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueCertificates(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Team Memberships with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list team memberships in Appwrite using the Kotlin SDK. It sets up the Appwrite client with the endpoint, project ID, and user session, then utilizes the `Teams` service to retrieve memberships. The `listMemberships` method is called with the team ID, optional queries, and search parameters. A callback is used to handle the result or any potential errors during the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/list-memberships.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.listMemberships(\n    \"<TEAM_ID>\", // teamId\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Subscribers in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then utilizes the Messaging service to list subscribers for a specific topic ID, allowing optional queries and search parameters for filtering.  The endpoint, project ID, API key, and topic ID need to be replaced with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-subscribers.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.listSubscribers(\n    topicId = \"<TOPIC_ID>\",\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving MFA Recovery Codes - Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and user session. It then creates an Account service instance and retrieves MFA recovery codes using the getMfaRecoveryCodes() method.  It demonstrates basic setup and usage of the Appwrite Kotlin SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/get-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.getMfaRecoveryCodes()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client and sets the endpoint and project ID. The endpoint should point to your Appwrite instance, and the project ID should be the ID of your Appwrite project. This client instance will be used for subsequent API calls.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Fetching Favicon with Appwrite Avatars in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with endpoint and project ID, then utilizes the `Avatars` service to fetch a favicon from a given URL. It includes error handling and prints the result. It depends on the io.appwrite library.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-favicon.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Avatars;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAvatars avatars = new Avatars(client);\n\navatars.getFavicon(\n    \"https://example.com\", // url\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Messaging Health in Kotlin\nDESCRIPTION: This snippet utilizes the initialized Appwrite client to check the health of queue messaging. It creates a `Health` service instance and calls the `getQueueMessaging` method. It takes an optional threshold parameter and a callback function to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-messaging.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nHealth health = new Health(client);\n\nhealth.getQueueMessaging(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Index with Appwrite SDK in Java\nDESCRIPTION: This snippet initializes the Appwrite client and retrieves a database index using the `getIndex` method. It requires the Appwrite Java SDK as a dependency. The endpoint, project ID, and API key are essential for authentication.  It uses a callback to handle the result or any potential errors during the process. The databaseId, collectionId, and key parameters are used to specify the index to retrieve.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/get-index.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.getIndex(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Account Verification Status in Kotlin with Appwrite\nDESCRIPTION: This snippet demonstrates how to update the verification status of an Appwrite account using the Kotlin SDK. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and a valid session. The userId and secret are passed as parameters to the updateVerification method of the Account service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateVerification(\n    userId = \"<USER_ID>\",\n    secret = \"<SECRET>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary endpoint, project ID, and API key. It sets up the client for subsequent API calls to the Appwrite server. Replace placeholders with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-index.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\nimport io.appwrite.enums.IndexType\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client - Kotlin\nDESCRIPTION: Initializes the Appwrite client with the API endpoint, project ID, API key, and self-signed certificate option (for development environments). Requires importing io.appwrite.Client and io.appwrite.services.Account.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.services.Account\n\nsuspend fun main() {\n    val client = Client(context)\n      .setEndpoint(\"https://[HOSTNAME_OR_IP]/v1\") // Your API Endpoint\n      .setProject(\"5df5acd0d48c2\") // Your project ID\n      .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key\n      .setSelfSigned(true) // Use only on dev mode with a self-signed SSL cert\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Attribute with Appwrite Databases in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a relationship attribute between two collections within an Appwrite database. It requires the Appwrite Kotlin SDK and sets up the client with the endpoint, project ID, and API key. The `createRelationshipAttribute` method is then used to define the relationship.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-relationship-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\nimport io.appwrite.enums.RelationshipType;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.createRelationshipAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"<RELATED_COLLECTION_ID>\", // relatedCollectionId\n    RelationshipType.ONETOONE, // type\n    false, // twoWay (optional)\n    \"\", // key (optional)\n    \"\", // twoWayKey (optional)\n    RelationMutate.CASCADE, // onDelete (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing User Targets Kotlin\nDESCRIPTION: This snippet demonstrates how to list user targets using the Appwrite Kotlin SDK. It requires a user ID and optionally accepts a list of queries.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-targets.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.listTargets(\n    userId = \"<USER_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating String Attribute in Appwrite Kotlin\nDESCRIPTION: This snippet demonstrates how to create a string attribute within a specified collection of a database using the Appwrite Kotlin SDK. It utilizes the `createStringAttribute` method of the `Databases` service, requiring parameters such as `databaseId`, `collectionId`, `key`, and `size`, along with optional settings for `required`, `default`, `array`, and `encrypt`.  It also uses a CoroutineCallback to handle the asynchronous result.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-string-attribute.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabases.createStringAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    1, // size\n    false, // required\n    \"<DEFAULT>\", // default (optional)\n    false, // array (optional)\n    false, // encrypt (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Appwrite Database Collections in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and uses it to list collections within a database.  It sets the endpoint, project ID, and API key for authentication and then calls the `listCollections` method on the `Databases` service.  The database ID is required and optional queries and search parameters can also be provided.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/list-collections.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.listCollections(\n    databaseId = \"<DATABASE_ID>\",\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Session in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific account session using the Appwrite Kotlin SDK. It utilizes the `getSession` method from the `Account` service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/get-session.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account = Account(client)\n\nval response = account.getSession(\n    sessionId = \"<SESSION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SMTP Provider using Appwrite in Kotlin\nDESCRIPTION: This snippet uses the Appwrite Messaging service to create a new SMTP provider. It sets various parameters such as provider ID, name, host, port, username, password, encryption, and other optional settings. The function returns the created SMTP Provider.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-smtp-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.createSmtpProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    host = \"<HOST>\",\n    port = 1, // optional\n    username = \"<USERNAME>\", // optional\n    password = \"<PASSWORD>\", // optional\n    encryption = \"none\", // optional\n    autoTLS = false, // optional\n    mailer = \"<MAILER>\", // optional\n    fromName = \"<FROM_NAME>\", // optional\n    fromEmail = \"email@example.com\", // optional\n    replyToName = \"<REPLY_TO_NAME>\", // optional\n    replyToEmail = \"email@example.com\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Phone Verification in Kotlin\nDESCRIPTION: This snippet updates the phone verification status for a user account using the Account service. It requires the user ID and a secret as parameters. The call returns a response indicating the success or failure of the update.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-phone-verification.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = account.updatePhoneVerification(\n    userId = \"<USER_ID>\",\n    secret = \"<SECRET>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client to communicate with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-messages.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving User - Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with your endpoint, project ID, and API key. It then uses the `Users` service to retrieve a user by their ID. The snippet requires the `io.appwrite` dependency and handles the result using a CoroutineCallback. The `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<USER_ID>` placeholders must be replaced with your actual Appwrite credentials and the desired user ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.get(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It is necessary to configure the client before interacting with any Appwrite services. Replace `<REGION>.cloud.appwrite.io`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-string-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document from Appwrite Database in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a document from an Appwrite database using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session, then uses the `getDocument` method of the `Databases` service to fetch the document. It handles potential errors and prints the result or the error message.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/get-document.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nDatabases databases = new Databases(client);\n\ndatabases.getDocument(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"<DOCUMENT_ID>\", // documentId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Downloading File from Appwrite Storage in Kotlin\nDESCRIPTION: This snippet demonstrates how to download a file from Appwrite Storage using the getFileDownload method.  Replace <BUCKET_ID> and <FILE_ID> with your actual bucket and file IDs respectively.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/get-file-download.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = storage.getFileDownload(\n    bucketId = \"<BUCKET_ID>\",\n    fileId = \"<FILE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Image from URL using Appwrite Avatars in Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client with the endpoint and project ID and then uses the Avatars service to retrieve an image from a specified URL. It sets the width and height to 0 (optional) and handles the result using a CoroutineCallback. Error handling is included to print the stack trace if there's an issue.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-image.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Avatars;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAvatars avatars = new Avatars(client);\n\navatars.getImage(\n    \"https://example.com\", // url\n    0, // width (optional)\n    0, // height (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Database Health with Appwrite in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and then uses the Health service to get the status of the queue databases. It requires the Appwrite endpoint, project ID, and API key. The `getQueueDatabases` method is called with optional parameters for the database name and threshold. The result or any errors are printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-databases.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueDatabases(\n    \"<NAME>\", // name (optional)\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and user session.  It sets up the client for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-credit-card.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\nimport io.appwrite.enums.CreditCard\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID and session. The endpoint should be replaced with your Appwrite instance's endpoint, and the project ID should be replaced with your project's ID. Replace the session with the current user session, if any.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/get-file-download.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n```\n\n----------------------------------------\n\nTITLE: Create URL Attribute in Appwrite using Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint, project ID, and API key, and then creates a URL attribute in a specified database collection.  It utilizes the `createUrlAttribute` function from the `Databases` service, setting parameters like `databaseId`, `collectionId`, `key`, `required`, `default`, and `array`.  It requires the Appwrite Kotlin SDK dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-url-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.createUrlAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"https://example.com\", // optional\n    array = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Messaging Targets with Appwrite in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and lists messaging targets associated with a specific message ID using the Messaging service. It requires the Appwrite Kotlin SDK. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, and `<MESSAGE_ID>` with your actual Appwrite project details and message ID. The CoroutineCallback handles the asynchronous result, printing the result to the console or printing the stack trace if there's an error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-targets.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listTargets(\n    \"<MESSAGE_ID>\", // messageId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating IP Attribute in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with the endpoint, project ID, and API key. It then uses the Databases service to call the updateIpAttribute method to update an IP attribute in a specified database and collection. Note: Replace placeholders like `<REGION>`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, `<DATABASE_ID>`, and `<COLLECTION_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-ip-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.updateIpAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    required = false,\n    default = \"\",\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Attributes in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the provided endpoint, project ID, and API key. It then uses the `Databases` service to list attributes for a given database and collection. The listAttributes function takes databaseId, collectionId and an optional list of queries.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/list-attributes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.listAttributes(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Topic Logs in Kotlin\nDESCRIPTION: This snippet lists topic logs for a given topic ID. The `topicId` parameter specifies the ID of the topic to retrieve logs from. The `queries` parameter is an optional list of query parameters to filter the results.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-topic-logs.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.listTopicLogs(\n    topicId = \"<TOPIC_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Health Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary endpoint, project ID, and API key. It then creates an instance of the Health service using the initialized client. The Health service is then used to retrieve information about queue builds.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-builds.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueBuilds(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: Initializes the Appwrite client with the endpoint, project ID, and session. The endpoint should be your Appwrite instance URL. The project ID is the ID of your Appwrite project.  A session is optionally set for authentication.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/update-file.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n```\n\n----------------------------------------\n\nTITLE: Getting Queue Certificates in Kotlin\nDESCRIPTION: This snippet uses the Health service to retrieve the status of queue certificates. The `threshold` parameter is optional and can be used to filter the results. The code shows how to call the `getQueueCertificates` method.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-certificates.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = health.getQueueCertificates(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Delete User Session with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client and uses the `deleteSession` method from the `Users` service to delete a user's session.  It requires the Appwrite endpoint, project ID, and API key for initialization, and the user ID and session ID for deletion. The code also includes a callback to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/delete-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.deleteSession(\n    \"<USER_ID>\", // userId\n    \"<SESSION_ID>\", // sessionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting File from Appwrite Storage in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a file from an Appwrite storage bucket using the Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID, creates a Storage service instance, and then calls the `deleteFile` method with the bucket ID and file ID. The result or error is handled in the callback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/delete-file.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.deleteFile(\n    \"<BUCKET_ID>\", // bucketId\n    \"<FILE_ID>\", // fileId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Health with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to use the Appwrite Kotlin SDK to check the health of the queue deletes. It initializes the Appwrite client with the endpoint, project ID, and API key, and then uses the Health service's `getQueueDeletes` method to retrieve the data. The result is printed to the console or the error is logged if the request fails. The `threshold` parameter (set to 0 in this example) is optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-deletes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueDeletes(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Team Membership in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and session.  It then uses the `Teams` service to retrieve a specific team membership.  The `teamId` and `membershipId` parameters are required to specify which membership to retrieve.  The response contains the details of the requested team membership.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/get-membership.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n\nval response = teams.getMembership(\n    teamId = \"<TEAM_ID>\",\n    membershipId = \"<MEMBERSHIP_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Document in Appwrite Database - Kotlin\nDESCRIPTION: This Kotlin code deletes a document from an Appwrite database.\nIt initializes an Appwrite client and uses it to interact with the Databases service.\nIt deletes the document specified by database ID, collection ID and document ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/delete-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nDatabases databases = new Databases(client);\n\ndatabases.deleteDocument(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"<DOCUMENT_ID>\", // documentId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and List Languages - Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and session. It then creates a Locale service instance using this client. Finally, it asynchronously retrieves a list of available languages using `locale.listLanguages()` and prints the result or any errors to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-languages.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nLocale locale = new Locale(client);\n\nlocale.listLanguages(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Scrypt - Kotlin\nDESCRIPTION: This snippet demonstrates how to create a user with Scrypt password encryption using the Appwrite Kotlin SDK. It requires the io.appwrite library. The createScryptUser method takes parameters for userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength and name, along with a callback to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/create-scrypt-user.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.createScryptUser(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    \"password\", // password\n    \"<PASSWORD_SALT>\", // passwordSalt\n    0, // passwordCpu\n    0, // passwordMemory\n    0, // passwordParallel\n    0, // passwordLength\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting an Appwrite Storage Bucket in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to initialize an Appwrite client and delete a storage bucket. It requires the io.appwrite dependency. It sets the endpoint, project ID, and API key, then calls the deleteBucket function with the bucket ID. The client needs to be initialized with your Appwrite project's endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/delete-bucket.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval storage = Storage(client)\n\nval response = storage.deleteBucket(\n    bucketId = \"<BUCKET_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update User Email Verification with Appwrite Kotlin SDK\nDESCRIPTION: This snippet updates a user's email verification status using the Appwrite Kotlin SDK. It requires the Appwrite endpoint, project ID, API key, and the user ID. A CoroutineCallback is used to handle the asynchronous result and any potential errors.  The 'emailVerification' parameter is set to false in this example.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-email-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateEmailVerification(\n    \"<USER_ID>\", // userId\n    false, // emailVerification\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Appwrite Health Check with Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and API key. It then creates a Health service instance and uses it to retrieve the database health status. The result is printed to the console or any errors are printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-d-b.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getDB(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Account Verification with Appwrite Kotlin\nDESCRIPTION: This code snippet demonstrates how to update account verification using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session, then uses the Account service to update verification for a specified user ID and secret. The result or any error encountered during the process is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateVerification(\n    \"<USER_ID>\", // userId\n    \"<SECRET>\", // secret\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Appwrite Health Check in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, configures the endpoint, project ID, and API key, and then calls the `get` method on the `Health` service to perform a health check. It uses coroutines for asynchronous handling of the API response, printing the result or error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.get(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and session information. The endpoint should point to your Appwrite instance, and the project ID should be your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-continents.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval locale = Locale(client)\n\nval response = locale.listContinents()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Avatars Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It also creates an instance of the Avatars service, which will be used to interact with the Appwrite Avatars API.\nRequired dependencies: io.appwrite.Client, io.appwrite.services.Avatars\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-credit-card.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Avatars;\nimport io.appwrite.enums.CreditCard;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAvatars avatars = new Avatars(client);\n```\n\n----------------------------------------\n\nTITLE: Update MFA Challenge with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to update an MFA challenge using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the endpoint, project ID, and session, then calls the `updateMfaChallenge` method with a challenge ID and OTP. A CoroutineCallback is used to handle the asynchronous result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-mfa-challenge.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateMfaChallenge(\n    \"<CHALLENGE_ID>\", // challengeId\n    \"<OTP>\", // otp\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session.  It's a prerequisite for using any of the Appwrite services.  Replace `<REGION>.cloud.appwrite.io` with your Appwrite endpoint and `<YOUR_PROJECT_ID>` with your project ID. An empty string is set as the session.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and GraphQL Service in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It then creates an instance of the Graphql service using the initialized client.  Make sure to replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/graphql/mutation.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Graphql\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval graphql = Graphql(client)\n\nval response = graphql.mutation(\n    query = mapOf( \"a\" to \"b\" )\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Appwrite Function Deployment - Kotlin\nDESCRIPTION: This snippet demonstrates how to delete an Appwrite function deployment using the Appwrite SDK for Kotlin. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. The `deleteDeployment` function is called with the function ID and deployment ID as parameters to remove the specified deployment.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/delete-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.deleteDeployment(\n    functionId = \"<FUNCTION_ID>\",\n    deploymentId = \"<DEPLOYMENT_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update APNs Provider with Appwrite in Kotlin\nDESCRIPTION: This snippet shows how to update an APNs provider using Appwrite's Messaging service in Kotlin. It requires the Appwrite SDK and the appropriate API key, project ID, and endpoint. It uses optional parameters to update different attributes of the APNs provider, such as name, enabled status, auth key, and bundle ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-apns-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateApnsProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    authKey = \"<AUTH_KEY>\", // optional\n    authKeyId = \"<AUTH_KEY_ID>\", // optional\n    teamId = \"<TEAM_ID>\", // optional\n    bundleId = \"<BUNDLE_ID>\", // optional\n    sandbox = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint to the Appwrite server, specifies the project ID, and configures the API key for authentication.  The client is then used to instantiate the Databases service. Replace placeholders with actual values for your environment.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Update Account Name with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint and project ID, creates an Account service instance, and then calls the updateName method to update the user's account name.  It requires the Appwrite Kotlin SDK to be imported. It assumes you have a valid session and project id.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-name.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateName(\n    name = \"<NAME>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Health Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates an instance of the Health service using the initialized client.  The endpoint and project ID should be replaced with the actual values. An API key with sufficient permissions is also required.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-messaging.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueMessaging(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Health Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates an instance of the Health service, which is used to perform health checks. The client needs the appropriate Appwrite endpoint, project ID, and API Key to authenticate and authorize requests. Update placeholders with your specific appwrite setup.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-builds.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueBuilds(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Function Deployment in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a new function deployment using the Appwrite Functions service. It requires a function ID, code (as InputFile), activation status, entrypoint, and commands.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/create-deployment.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = functions.createDeployment(\n    functionId = \"<FUNCTION_ID>\",\n    code = InputFile.fromPath(\"file.png\"),\n    activate = false,\n    entrypoint = \"<ENTRYPOINT>\", // optional\n    commands = \"<COMMANDS>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Health Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It also creates an instance of the Health service, which is then used to check health status of the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-mails.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueMails(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Function Variables with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list variables associated with a specific function using the Appwrite Kotlin SDK. It requires setting up the Appwrite client with the endpoint, project ID, and API key. It utilizes the `Functions` service and its `listVariables` method, requiring the `functionId` as a parameter, to retrieve the list of variables.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/list-variables.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.listVariables(\n    functionId = \"<FUNCTION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It is a necessary step before making any API calls to Appwrite. Replace placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-mfa-factors.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving File View from Appwrite Storage in Kotlin\nDESCRIPTION: This snippet retrieves a file view from Appwrite Storage using the bucket ID and file ID. Replace `<BUCKET_ID>` with your bucket ID and `<FILE_ID>` with your file ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/get-file-view.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = storage.getFileView(\n    bucketId = \"<BUCKET_ID>\",\n    fileId = \"<FILE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: List User Memberships - Appwrite - Kotlin\nDESCRIPTION: This snippet demonstrates how to list the memberships of a user using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, and then calls the `listMemberships` function to fetch the user's memberships. The function takes the user ID as a parameter. The result or any error is then printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/list-memberships.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.listMemberships(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating File in Appwrite Storage with Kotlin\nDESCRIPTION: Updates a file in Appwrite Storage using the `updateFile` method. Requires the bucket ID, file ID, and optional name and permissions. The bucket ID is the ID of the bucket the file is located in. The file ID is the ID of the file to update.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/update-file.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = storage.updateFile(\n    bucketId = \"<BUCKET_ID>\",\n    fileId = \"<FILE_ID>\",\n    name = \"<NAME>\", // optional\n    permissions = listOf(\"read(\"any\")\") // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Account Logs with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to retrieve account logs from Appwrite using the Kotlin SDK. It requires the io.appwrite dependency. The code initializes an Appwrite client, sets the endpoint and project ID, and then calls the `listLogs` method on the Account service. The result is printed to the console, or any errors are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/list-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.listLogs(\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Queue Logs in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the Health service to retrieve queue logs with an optional threshold. Make sure to replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-logs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueLogs(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team by ID in Kotlin\nDESCRIPTION: This snippet uses the Appwrite Kotlin SDK to retrieve a team by its ID. It calls the `get` method on the `Teams` service and handles the response or any potential errors using a `CoroutineCallback`.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/get.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nTeams teams = new Teams(client);\n\nteams.get(\n    \"<TEAM_ID>\", // teamId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and an optional session. The endpoint should point to your Appwrite instance, and the project ID should be set to your Appwrite project's ID. Replace <REGION> and <YOUR_PROJECT_ID> with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticatorType\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Update User Status with Appwrite in Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client with the provided endpoint, project ID, and API key. It then utilizes the Users service to update the status of a specific user. The updateStatus method takes the user ID and a boolean value representing the new status as parameters. A CoroutineCallback is used to handle the result, printing the successful response or printing the error if it fails.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-status.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateStatus(\n    \"<USER_ID>\", // userId\n    false, // status\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Datetime Attribute in Appwrite with Kotlin\nDESCRIPTION: This code snippet shows how to update a datetime attribute in an Appwrite database using the Kotlin SDK. It requires the io.appwrite dependency and the Appwrite project's endpoint, project ID, and API key. The updateDatetimeAttribute method updates the datetime attribute in the specified database and collection, using a CoroutineCallback to handle the result or error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-datetime-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateDatetimeAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"\", // default\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team using Appwrite Kotlin SDK\nDESCRIPTION: This snippet shows how to delete a team from Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session. It then creates a `Teams` service and calls the `delete` method with the team ID. A `CoroutineCallback` handles the asynchronous result and any potential errors, printing the result or the error stack trace to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.delete(\n    \"<TEAM_ID>\", // teamId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Mails Health Status with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the provided endpoint, project ID, and API key. It then utilizes the Health service to retrieve the queue mail status with an optional threshold. The result or any potential error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-mails.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueMails(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Countries and Phone Codes with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of countries and their phone codes using the Appwrite Locale service in Kotlin. It initializes the Appwrite client with the endpoint and project ID, creates a Locale service instance, and then calls the `listCountriesPhones` method using a CoroutineCallback to handle the asynchronous response. The API endpoint and project ID need to be configured.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-countries-phones.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nLocale locale = new Locale(client);\n\nlocale.listCountriesPhones(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It configures the client to connect to the Appwrite server and authenticates the application. Replace <REGION>, <YOUR_PROJECT_ID>, and <YOUR_API_KEY> with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-relationship-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\nimport io.appwrite.enums.RelationshipType\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Updating Account Preferences in Kotlin\nDESCRIPTION: This code snippet updates the account preferences using the initialized Appwrite client. It utilizes a map to define the preference key-value pairs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-prefs.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = account.updatePrefs(\n    prefs = mapOf( \"a\" to \"b\" )\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Perform Health Check in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and API key, and then uses the Health service to get the queue functions' health status. A threshold can optionally be set.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-functions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueFunctions(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting User Identity Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a user identity using the Appwrite Kotlin SDK. It uses the initialized Appwrite client and the Users service to call the deleteIdentity function. Replace <IDENTITY_ID> with the actual identity ID you want to delete.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-identity.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = users.deleteIdentity(\n    identityId = \"<IDENTITY_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  These parameters are essential for authenticating and connecting to your Appwrite project. The endpoint is the URL of your Appwrite instance, the project ID identifies your project, and the API key authorizes access.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-messaging.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It's a prerequisite for interacting with Appwrite services. The client is configured with the necessary credentials to authenticate requests.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-scrypt-user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It sets up the client for subsequent requests to the Appwrite API.  Ensure to replace the placeholder values with your actual Appwrite project details. No external dependencies beyond the imported Appwrite libraries are required.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.list(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: List Countries with Appwrite Locale in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, sets the API endpoint and project ID, and uses the Locale service to retrieve a list of countries.  It uses a CoroutineCallback to handle the asynchronous response and prints the results to the console or prints the error stack trace if there is an error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-countries.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nLocale locale = new Locale(client);\n\nlocale.listCountries(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Update Twilio Provider in Kotlin\nDESCRIPTION: This snippet demonstrates how to update a Twilio provider using the `updateTwilioProvider` method of the Appwrite Messaging service.  It requires the `providerId` and other optional parameters such as `name`, `enabled`, `accountSid`, `authToken`, and `from`.  Replace the placeholder values with your actual Twilio provider details. The result is stored in the `response` variable.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-twilio-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.updateTwilioProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    accountSid = \"<ACCOUNT_SID>\", // optional\n    authToken = \"<AUTH_TOKEN>\", // optional\n    from = \"<FROM>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. These are required to authenticate and connect to the Appwrite server. Replace the placeholders with your actual credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-integer-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Deleting User in Appwrite with Kotlin SDK\nDESCRIPTION: This snippet shows how to delete a user from Appwrite using the Kotlin SDK. It requires the Appwrite client to be initialized with your project's endpoint, project ID, and API key. The `delete` method of the `Users` service is called with the user ID to delete.  The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.delete(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Health Check with Appwrite in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client and uses the Health service to retrieve the cache status. It sets the endpoint, project ID, and API key for the client and then calls the `getCache` method with a CoroutineCallback to handle the result or any errors that occur. The result is printed to the console, or the error stack trace is printed if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-cache.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getCache(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Listing Teams with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client, configures the endpoint and project ID, and lists teams using the `Teams.list` method.  The `CoroutineCallback` handles the asynchronous response, printing results or errors to the console. Optional query parameters and a search string can be passed to further refine the list.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/list.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.list(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Locale Service in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the specified endpoint and project ID, and then creates an instance of the Locale service. It configures the client to interact with the Appwrite server and prepares the Locale service for making API calls. No external dependencies are needed beyond the io.appwrite library.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-countries-e-u.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval locale = Locale(client)\n\nval response = locale.listCountriesEU()\n```\n\n----------------------------------------\n\nTITLE: Download File from Appwrite Storage Kotlin\nDESCRIPTION: This code downloads a file from Appwrite Storage using the `getFileDownload` method. It requires the `bucketId` and `fileId` as parameters. The result of the download is printed to the console, and any errors during the process are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/get-file-download.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nStorage storage = new Storage(client);\n\nstorage.getFileDownload(\n    \"<BUCKET_ID>\", // bucketId\n    \"<FILE_ID>\", // fileId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to execute a GraphQL mutation using the Appwrite Kotlin SDK. It requires the `io.appwrite` dependency to be included in the project. It initializes the Appwrite client with the endpoint, project ID, and API key, and then performs a mutation with sample query parameters. The callback function handles the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/graphql/mutation.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Graphql;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nGraphql graphql = new Graphql(client);\n\ngraphql.mutation(\n    mapOf( \"a\" to \"b\" ), // query\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Account Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint, project ID, and session. It then creates an instance of the Account service, which can be used to interact with the account-related Appwrite API endpoints. Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-status.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.updateStatus()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. The endpoint should point to your Appwrite instance, and you need to replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual values.  This is a prerequisite for using any Appwrite services.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-datetime-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Create Function Build in Kotlin with Appwrite\nDESCRIPTION: This snippet demonstrates how to create a function build within Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then uses the `Functions` service to trigger a build creation for a specific function and deployment. The `buildId` is optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/create-build.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.createBuild(\n    functionId = \"<FUNCTION_ID>\",\n    deploymentId = \"<DEPLOYMENT_ID>\",\n    buildId = \"<BUILD_ID>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Appwrite Storage Bucket in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a storage bucket in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, and then calls the `deleteBucket` method of the `Storage` service to delete the bucket specified by `BUCKET_ID`. The result of the deletion is printed to the console, or the error is printed if the deletion fails.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/storage/delete-bucket.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nStorage storage = new Storage(client);\n\nstorage.deleteBucket(\n    \"<BUCKET_ID>\", // bucketId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Health Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a Health service instance using the initialized client. Replace <REGION>, <YOUR_PROJECT_ID>, and <YOUR_API_KEY> with your actual Appwrite instance details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-antivirus.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getAntivirus()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. The client is then used to create an instance of the Users service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\nimport io.appwrite.enums.MessagingProviderType\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  The endpoint should point to your Appwrite instance, and the project ID should match your Appwrite project. The session is set to an empty string in this example.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval locale = Locale(client)\n\nval response = locale.listCodes()\n```\n\n----------------------------------------\n\nTITLE: Creating Sendgrid Provider with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the project endpoint, project ID, and API key. It then uses the messaging service to create a Sendgrid provider. The `createSendgridProvider` method is called with provider details such as provider ID, name, API key, sender and reply-to information, and an enabled flag. The result or any error is then printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-sendgrid-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createSendgridProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"<API_KEY>\", // apiKey (optional)\n    \"<FROM_NAME>\", // fromName (optional)\n    \"email@example.com\", // fromEmail (optional)\n    \"<REPLY_TO_NAME>\", // replyToName (optional)\n    \"email@example.com\", // replyToEmail (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Team Preferences in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with the endpoint, project ID, and session, and then use the Teams service to update the preferences for a specific team. It requires the io.appwrite library as a dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/update-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n\nval response = teams.updatePrefs(\n    teamId = \"<TEAM_ID>\",\n    prefs = mapOf( \"a\" to \"b\" )\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Messaging Topics with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client, configures the endpoint, project ID, and API key, and then uses the Messaging service to list topics. It handles the asynchronous result using a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-topics.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listTopics(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It configures the client to communicate with the Appwrite server. Replace `<REGION>.cloud.appwrite.io` with your Appwrite region, `<YOUR_PROJECT_ID>` with your Appwrite project ID, and `<YOUR_API_KEY>` with your secret API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get-index.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Deleting Collection in Appwrite using Kotlin\nDESCRIPTION: This snippet shows how to delete a collection from an Appwrite database using the Appwrite Kotlin SDK. It initializes an Appwrite client with the endpoint, project ID, and API key. Then it calls the `deleteCollection` method with the database and collection IDs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/delete-collection.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.deleteCollection(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Checking Health Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a Health service instance and calls the `getFailedJobs` method to check the status of failed jobs. A callback is used to handle the result or any errors that occur during the API call. Replace <REGION>, <YOUR_PROJECT_ID>, and <YOUR_API_KEY> with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-failed-jobs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\nimport io.appwrite.enums.Name;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getFailedJobs(\n    .V1_DATABASE, // name\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Appwrite Function Execution in Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a function execution in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then uses the `deleteExecution` method of the `Functions` service to delete a specific execution by its `functionId` and `executionId`. Requires the Appwrite Kotlin SDK and valid credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/delete-execution.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.deleteExecution(\n    functionId = \"<FUNCTION_ID>\",\n    executionId = \"<EXECUTION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Replace placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-provider-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Currency List with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint and project ID. It then uses the Locale service to asynchronously fetch a list of available currencies. The result is printed to the console, and any errors during the process are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-currencies.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nLocale locale = new Locale(client);\n\nlocale.listCurrencies(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Listing Messaging Providers with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set the endpoint, project ID, and API key. It then uses the Messaging service to list providers, with optional query and search parameters. A CoroutineCallback is used to handle the asynchronous result, printing the result or the stack trace of any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-providers.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listProviders(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and user session. The endpoint should point to your Appwrite instance, and the project ID should match your project in Appwrite.  The session is set to empty string.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/list-documents.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Delete Appwrite Function in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete an Appwrite function using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. It then calls the `delete` method of the `Functions` service with the function ID to be deleted. A callback handles the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.delete(\n    \"<FUNCTION_ID>\", // functionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It sets the necessary credentials to connect to your Appwrite project. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-pub-sub.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getPubSub(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Team - Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize an Appwrite client in Kotlin, configure the endpoint and project ID, and then use the Teams service to retrieve a team by its unique ID. It requires the Appwrite Kotlin SDK as a dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/get.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n\nval response = teams.get(\n    teamId = \"<TEAM_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Phone Token with Appwrite in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then uses the Account service to create a phone token for a given user ID and phone number. The user ID and phone number are passed as parameters to the `createPhoneToken` function.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-phone-token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval response = account.createPhoneToken(\n    userId = \"<USER_ID>\",\n    phone = \"+12065550100\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials including the endpoint, project ID, and API key. These are crucial for authenticating and connecting to your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-failed-jobs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\nimport io.appwrite.enums.Name\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Deleting Function Execution with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete a function execution in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a `Functions` service instance and calls the `deleteExecution` method to delete the specified execution, handling potential errors using a coroutine callback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/delete-execution.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.deleteExecution(\n    \"<FUNCTION_ID>\", // functionId\n    \"<EXECUTION_ID>\", // executionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Getting a Subscriber using Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet showcases how to retrieve subscriber details using the Appwrite Messaging service in Kotlin. It requires the `topicId` and `subscriberId` as parameters. Make sure to replace the placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-subscriber.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.getSubscriber(\n    topicId = \"<TOPIC_ID>\",\n    subscriberId = \"<SUBSCRIBER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Account Preferences Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize an Appwrite client with the endpoint and project ID, then create an Account service instance to retrieve the user's preferences using the `getPrefs()` method.  The user's session is set, assuming a pre-existing authenticated session.  Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/get-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.getPrefs()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscriber Logs in Kotlin\nDESCRIPTION: This snippet retrieves subscriber logs for a specific subscriber ID using the Appwrite Messaging service. The `subscriberId` parameter is required. An empty list is passed as `queries` parameter.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-subscriber-logs.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.listSubscriberLogs(\n    subscriberId = \"<SUBSCRIBER_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and an optional session.  The endpoint specifies the Appwrite server URL, and the project ID identifies the project to interact with. Setting the session authenticates the user.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/delete-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticatorType\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client with your project's endpoint, project ID, and API key. It sets up the client to communicate with the Appwrite server. The API key should be kept secret and managed securely.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/list-variables.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with your API endpoint, project ID, and API key. It's essential to configure the client before making any requests to the Appwrite API. Replace the placeholder values with your actual endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-password.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client in a Kotlin application. It sets the endpoint, project ID, and API key for authenticating with the Appwrite server. Make sure to replace the placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-subscriber.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. The client is configured to communicate with the Appwrite server and authenticate requests.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-smtp-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. It sets up the necessary configuration to interact with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with the endpoint and project ID. It also shows setting the session for authentication. Replace `<REGION>.cloud.appwrite.io` with your actual region and `<YOUR_PROJECT_ID>` with your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/list-sessions.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.listSessions()\n```\n\n----------------------------------------\n\nTITLE: Listing Function Variables in Kotlin\nDESCRIPTION: This snippet illustrates how to use the `listVariables` method from the `Functions` service to retrieve a list of variables for a given function ID. It uses a `CoroutineCallback` to handle the asynchronous response and prints the result or any errors encountered.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/list-variables.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfunctions.listVariables(\n    \"<FUNCTION_ID>\", // functionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It sets up the client to communicate with the Appwrite server. The endpoint should point to your Appwrite instance. Replace the placeholders with your actual project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-providers.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing User Targets in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Users service to list user targets for a specific user ID. It uses a CoroutineCallback to handle asynchronous results and print the output or any errors encountered.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/list-targets.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.listTargets(\n    \"<USER_ID>\", // userId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. These configurations are essential for authenticating and connecting to the Appwrite server. Make sure to replace placeholders with your actual Appwrite project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-smtp-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key. The client is then used to create a Databases service instance. This configuration is essential for interacting with Appwrite's database functionalities.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get-collection.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Updating User Labels with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the `Users` service to update the labels associated with a specified user ID. The `updateLabels` method takes the user ID and a list of labels as input.  A callback is used to handle the success or failure of the operation. The result or any errors are printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-labels.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateLabels(\n    \"<USER_ID>\", // userId\n    listOf(), // labels\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Replace placeholders with your actual values for proper functionality.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-sendgrid-provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Avatar Image - Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID, and then retrieves an image using the Avatars service. The getImage method takes a URL, width, and height as parameters. The width and height are optional parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-image.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval avatars = Avatars(client)\n\nval result = avatars.getImage(\n    url = \"https://example.com\",\n    width = 0, // optional\n    height = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: List Messaging Topics with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint, project ID, and API key, then uses the Messaging service to list topics. It demonstrates how to use the `listTopics` method with optional query parameters and a search term. Dependencies include the Appwrite Kotlin SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-topics.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.listTopics(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Index in Kotlin\nDESCRIPTION: This snippet creates a database index using the Appwrite Kotlin SDK. It requires the database ID, collection ID, key, index type, attributes, and optionally orders. It utilizes the CoroutineCallback to handle the asynchronous result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-index.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nDatabases databases = new Databases(client);\n\ndatabases.createIndex(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    IndexType.KEY, // type\n    listOf(), // attributes\n    listOf(), // orders (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update MFA Recovery Codes with Appwrite Users in Kotlin\nDESCRIPTION: This snippet demonstrates how to update a user's MFA recovery codes using the Appwrite Kotlin SDK. It requires the `io.appwrite` dependency. The code initializes the Appwrite client with the endpoint, project ID, and API key and then uses the `Users` service to update the recovery codes for a specific user ID. A callback is used to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateMfaRecoveryCodes(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting User Sessions with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to delete all user sessions using the Appwrite Kotlin SDK. It requires the io.appwrite dependency. It initializes the client with the Appwrite endpoint and project ID, then calls the `deleteSessions` method on the Account service. The session is deleted asynchronously using `CoroutineCallback`.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/delete-sessions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.deleteSessions(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Querying Database Attribute with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific attribute from a collection within a database using the Appwrite Kotlin SDK. It requires the database ID, collection ID, and the attribute key as input parameters. The result will contain the attribute data from the specified database and collection.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.getAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Account Identities in Kotlin\nDESCRIPTION: This snippet demonstrates how to list account identities using the Appwrite Kotlin SDK. It creates an `Account` service instance using the initialized client and then calls the `listIdentities` method with an optional list of queries.  No specific dependencies beyond the Appwrite Kotlin SDK are required.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/list-identities.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval account = Account(client)\n\nval response = account.listIdentities(\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Locale Service - Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. It then creates an instance of the Locale service using the initialized client. The endpoint should be the Appwrite instance URL, and the project ID should be the ID of your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-countries-phones.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval locale = Locale(client)\n\nval response = locale.listCountriesPhones()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key required to interact with the Appwrite server. The endpoint should point to your Appwrite instance, and the project ID and API key should be obtained from your Appwrite project settings.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-vonage-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials, including the endpoint, project ID, and API key. These are essential for authenticating and connecting to the Appwrite service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-phone-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.updatePhoneVerification(\n    userId = \"<USER_ID>\",\n    phoneVerification = false\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet shows how to initialize an Appwrite client instance in Kotlin. It sets the endpoint, project ID, and API key which are essential for authenticating and connecting to your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Updating User Labels in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Users service to update the labels for a specific user. It calls the `updateLabels` function with the user ID and a list of labels to be set.  In this case, an empty list is being passed, which effectively removes all labels.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-labels.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.updateLabels(\n    userId = \"<USER_ID>\",\n    labels = listOf()\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Account - Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID, and then initializes the Account service for interacting with user accounts. It requires the io.appwrite library as a dependency and the endpoint and project ID need to be properly configured.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-magic-u-r-l-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Getting Certificate Health in Kotlin\nDESCRIPTION: This code initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Health service to retrieve certificate information for a given domain. The domain parameter is optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-certificate.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getCertificate(\n    domain = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. These are essential for authenticating and connecting to the Appwrite server. Replace placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-string-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  These are required to authenticate and communicate with the Appwrite server. Replace placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-identities.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Delete Database in Kotlin\nDESCRIPTION: This snippet shows how to delete an Appwrite database using its ID.  It utilizes the `delete` method of the `Databases` service to remove the database from the Appwrite project.  The database ID is required as a parameter.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.delete(\n    databaseId = \"<DATABASE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Database Collections with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list collections within a database in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the required endpoint, project ID, and API key.  The listCollections method is then called on the Databases service, passing in the database ID, optional queries, and an optional search term. The results, either the list of collections or an error, are handled within a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/list-collections.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.listCollections(\n    \"<DATABASE_ID>\", // databaseId\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Appwrite SDK Dependency - Gradle\nDESCRIPTION: Adds the Appwrite SDK as a dependency to your project's Gradle build file. Replace '8.0.0' with the desired SDK version.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation(\"io.appwrite:sdk-for-kotlin:8.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It also shows how to set the session. Dependencies: io.appwrite.Client\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-password.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Messaging Topic with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the Messaging service's `getTopic` method to retrieve a messaging topic by its ID. The result or any error is handled within the CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/get-topic.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.getTopic(\n    \"<TOPIC_ID>\", // topicId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating User Status in Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client with the necessary credentials (endpoint, project ID, API key) and then use the Users service to update a specific user's status. It requires the io.appwrite library. The `updateStatus` method takes the user ID and the new status (boolean) as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-status.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.updateStatus(\n    userId = \"<USER_ID>\",\n    status = false\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Provider Logs with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet uses the Messaging service to list provider logs. Replace `<PROVIDER_ID>` with the actual provider ID. The `queries` parameter is optional.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-provider-logs.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.listProviderLogs(\n    providerId = \"<PROVIDER_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Kotlin\nDESCRIPTION: Initializes the Appwrite client with the endpoint, project ID, and API key.  This setup is required before using any Appwrite services. The client is configured to interact with a specific Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/delete-topic.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It also sets an empty session. Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/get-file-view.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Health Check in Kotlin\nDESCRIPTION: This Kotlin code snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it creates a Health service instance and calls the getDB() method to retrieve the database health status.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-d-b.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getDB()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and user session. It's a necessary first step to interact with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-prefs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It requires the io.appwrite library. Replace placeholders with your actual endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-textmagic-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Fetching Credit Card Avatar in Kotlin\nDESCRIPTION: This snippet uses the initialized Appwrite `Avatars` service to retrieve a credit card image. It calls the `getCreditCard` method with the credit card type (CreditCard.AMERICAN_EXPRESS) and optional width, height and quality parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-credit-card.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = avatars.getCreditCard(\n    code =  CreditCard.AMERICAN_EXPRESS,\n    width = 0, // optional\n    height = 0, // optional\n    quality = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Replace placeholders with actual values for the Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/get-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Account Information in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then creates an Account service instance and uses it to retrieve the current account information.  The endpoint and project ID must be replaced with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.get()\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client for making requests to the Appwrite API. The endpoint should be your Appwrite instance URL, the project ID is the ID of your Appwrite project, and the API key is a secure API key with necessary permissions. Ensure that you replace the placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-deletes.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueDeletes(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Using Appwrite Account Service in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a user session using the Appwrite Account service. It requires an initialized Appwrite client and the session ID to be deleted. Replace `<SESSION_ID>` with the actual session ID you want to remove.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/delete-session.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval account = Account(client)\n\nval response = account.deleteSession(\n    sessionId = \"<SESSION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating User Email Verification Status - Kotlin\nDESCRIPTION: This snippet demonstrates how to update a user's email verification status using the Appwrite Kotlin SDK. It calls the `updateEmailVerification` method on the Users service, passing the user ID and the desired verification status.  Replace `<USER_ID>` with the actual user ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-email-verification.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.updateEmailVerification(\n    userId = \"<USER_ID>\",\n    emailVerification = false\n)\n```\n\n----------------------------------------\n\nTITLE: Update Sendgrid Provider - Kotlin\nDESCRIPTION: This code snippet updates a Sendgrid provider using the Appwrite Messaging service in Kotlin.  It requires the Appwrite SDK for Kotlin.  It takes various parameters such as providerId, name, enabled, apiKey, fromName, fromEmail, replyToName, and replyToEmail to configure the Sendgrid provider.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/update-sendgrid-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.updateSendgridProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\", // optional\n    enabled = false, // optional\n    apiKey = \"<API_KEY>\", // optional\n    fromName = \"<FROM_NAME>\", // optional\n    fromEmail = \"email@example.com\", // optional\n    replyToName = \"<REPLY_TO_NAME>\", // optional\n    replyToEmail = \"<REPLY_TO_EMAIL>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: List Messaging Topic Logs - Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client and uses it to retrieve logs for a specified messaging topic. It sets the API endpoint, project ID, and API key. The `listTopicLogs` method of the `Messaging` service is then used to fetch the logs. An optional query list can be provided to filter the results.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-topic-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listTopicLogs(\n    \"<TOPIC_ID>\", // topicId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create PHPass User - Kotlin\nDESCRIPTION: This snippet creates a new user with a PHPass hashed password in Appwrite. It uses the `createPHPassUser` method of the `Users` service. Replace `<USER_ID>`, `email@example.com`, `password`, and `<NAME>` with appropriate values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-p-h-pass-user.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = users.createPHPassUser(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"password\",\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It sets up the client for subsequent API calls to the Appwrite server. Replace the placeholders with your actual Appwrite endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-webhooks.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueWebhooks(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key. The endpoint should point to your Appwrite instance, the project ID is the ID of your Appwrite project, and the API key is used for authentication. You need to replace the placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key. The API key should be kept secret and not exposed publicly.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Updating URL Attribute in Appwrite Database (Kotlin)\nDESCRIPTION: This snippet demonstrates how to update a URL attribute within an Appwrite database using the Kotlin SDK. It initializes the Appwrite client with endpoint, project ID, and API key. Then, it uses the `updateUrlAttribute` method to modify the attribute's properties, including its default value and the ability to rename it.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-url-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateUrlAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    \"https://example.com\", // default\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client to communicate with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-float-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appwrite Account Information - Kotlin\nDESCRIPTION: This Kotlin code snippet initializes an Appwrite client and retrieves account information using the `Account` service. It sets the endpoint, project ID, and an empty session. The `account.get()` method is then called with a callback to handle the result or any errors that occur during the process. The successful result (account information) is printed to the console, and any errors are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.get(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It's a necessary first step to interact with the Appwrite API.  The client is configured to use the provided endpoint, project ID and API key for authentication and authorization.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Creating FCM Provider with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet creates a new FCM provider using the Appwrite Messaging service. It takes parameters like provider ID, name, service account JSON, and enabled status to configure the FCM provider.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-fcm-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.createFcmProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    serviceAccountJSON = mapOf( \"a\" to \"b\" ), // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Messaging Subscriber with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates deleting a subscriber from a specified topic in Appwrite using the Messaging service. It requires the Appwrite Kotlin SDK and a valid Appwrite project with a configured messaging service. It takes topicId and subscriberId as input and prints the result or any error encountered during the deletion process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/delete-subscriber.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setJWT(\"<YOUR_JWT>\"); // Your secret JSON Web Token\n\nMessaging messaging = new Messaging(client);\n\nmessaging.deleteSubscriber(\n    \"<TOPIC_ID>\", // topicId\n    \"<SUBSCRIBER_ID>\", // subscriberId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing MFA Factors Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client with the endpoint, project ID, and API key. It then uses the `Users` service to list MFA factors for a given user ID. A `CoroutineCallback` is used to handle the result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/list-mfa-factors.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.listMfaFactors(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a User - Kotlin\nDESCRIPTION: Creates a new user using the Users service. Requires an initialized Appwrite client and the io.appwrite.ID import. The function expects an email, phone, password, and name as input.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval users = Users(client)\nval user = users.create(\n    user = ID.unique(),\n    email = \"email@example.com\",\n    phone = \"+123456789\",\n    password = \"password\",\n    name = \"Walter O'Brien\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Locale Service - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. It then instantiates the Locale service using the initialized client.  It requires the io.appwrite library to be included as a dependency. The endpoint and project ID need to be replaced with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-countries.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval locale = Locale(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration for interacting with the Appwrite API. Replace placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-phone.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Querying Database Index in Kotlin\nDESCRIPTION: This snippet demonstrates how to query a specific index within a database collection using the `getIndex` method of the Appwrite Databases service. It requires the database ID, collection ID, and the index key as parameters. Replace `<DATABASE_ID>` with the ID of your Appwrite database and `<COLLECTION_ID>` with the ID of your collection.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get-index.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.getIndex(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Database with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a database within Appwrite using the Kotlin SDK. It requires the Appwrite client to be initialized with the project's endpoint, project ID, and API key. The `delete` function of the `Databases` service is called with the database ID to be deleted and a callback to handle the asynchronous result.  The callback prints the result or the stacktrace of the error if the deletion fails.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.delete(\n    \"<DATABASE_ID>\", // databaseId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Messaging Targets in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Messaging service to list targets for a specific message ID. The `messageId` parameter specifies the message to retrieve targets for.  The `queries` parameter is an optional list of query parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-targets.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.listTargets(\n    messageId = \"<MESSAGE_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Listing MFA Factors with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to use the Appwrite Kotlin SDK to list multi-factor authentication factors associated with an account. It utilizes the previously initialized client and account service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/list-mfa-factors.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = account.listMfaFactors()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing User Logs in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials (endpoint, project ID, and API key) and then uses the Users service to list the logs for a specific user ID. It demonstrates how to set up the client and make a simple API call using the Appwrite Kotlin SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-logs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.listLogs(\n    userId = \"<USER_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Appwrite Client Initialization and Function Variable Update - Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key.  It then uses the `Functions` service to update a function variable. Requires the io.appwrite dependency. Expected inputs are functionId, variableId, key, and value.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/update-variable.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.updateVariable(\n    functionId = \"<FUNCTION_ID>\",\n    variableId = \"<VARIABLE_ID>\",\n    key = \"<KEY>\",\n    value = \"<VALUE>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and user session.  It sets the necessary credentials for interacting with the Appwrite API. Replace <REGION>, <YOUR_PROJECT_ID> with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/list.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Get Function Variable with Appwrite in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to get a variable associated with a function using the Appwrite Functions service. It initializes the Appwrite client with the endpoint, project ID, and API key and uses the `getVariable` method to fetch the desired variable. It requires the Appwrite Kotlin SDK as a dependency. The functionId and variableId must be replaced with the appropriate IDs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/get-variable.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.getVariable(\n    functionId = \"<FUNCTION_ID>\",\n    variableId = \"<VARIABLE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. The endpoint should point to your Appwrite instance, and the project ID should be the ID of your Appwrite project. Replace the placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Health Check using Appwrite Kotlin SDK\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Health service to check the storage health. The result is printed to the console. Requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-storage-local.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getStorageLocal(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Health Check with Appwrite Kotlin SDK\nDESCRIPTION: This code initializes the Appwrite client with the provided endpoint, project ID, and API key. It then uses the Health service to retrieve the antivirus status. The result is printed to the console or the error stacktrace is printed if an error occurs. Requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-antivirus.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getAntivirus(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Update Integer Attribute in Appwrite Database (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to update an integer attribute in an Appwrite database collection using the Appwrite Kotlin SDK. It initializes the client with the endpoint, project ID, and API key. It then calls the `updateIntegerAttribute` method on the `Databases` service, providing the database ID, collection ID, attribute key, required status, default value, minimum value, maximum value, and a callback function to handle the result or error. The callback prints the result or the stack trace of the error if any.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-integer-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateIntegerAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    0, // default\n    0, // min (optional)\n    0, // max (optional)\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Messaging Subscriber in Appwrite - Kotlin\nDESCRIPTION: This code snippet creates a new subscriber for a given topic in Appwrite using the Kotlin SDK. It requires the Appwrite client to be initialized with the endpoint, project ID, and JWT. The `createSubscriber` method is used to register the subscriber, taking the topic ID, subscriber ID, and target ID as parameters.  It includes error handling to catch and print any errors during the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-subscriber.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setJWT(\"<YOUR_JWT>\"); // Your secret JSON Web Token\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createSubscriber(\n    \"<TOPIC_ID>\", // topicId\n    \"<SUBSCRIBER_ID>\", // subscriberId\n    \"<TARGET_ID>\", // targetId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messaging Provider in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific messaging provider using its ID. The `getProvider` method of the `Messaging` service is called with the provider ID as a parameter.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.getProvider(\n    providerId = \"<PROVIDER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Appwrite SDK Dependency - Maven\nDESCRIPTION: Adds the Appwrite SDK as a dependency to your project's Maven pom.xml file. Replace '8.0.0' with the desired SDK version.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.appwrite</groupId>\n        <artifactId>sdk-for-kotlin</artifactId>\n        <version>8.0.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-float-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  The endpoint points to your Appwrite instance, the project ID identifies your project, and the API key authenticates the client.  Make sure to replace placeholders with your actual credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-collection.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating MFA Authenticator (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client with the endpoint, project ID, and user session. Then, it shows how to create an MFA authenticator using the TOTP type using the Account service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\nimport io.appwrite.enums.AuthenticatorType;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.createMfaAuthenticator(\n    AuthenticatorType.TOTP, // type\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Function Executions - Kotlin\nDESCRIPTION: This Kotlin code initializes the Appwrite client with the endpoint, project ID, and user session.  It then uses the `Functions` service to list function executions. The `listExecutions` method is called with parameters such as the function ID and optional queries and search terms.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/list-executions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval functions = Functions(client)\n\nval response = functions.listExecutions(\n    functionId = \"<FUNCTION_ID>\",\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Migrations with Appwrite in Kotlin\nDESCRIPTION: This code snippet uses the Appwrite Health service to check the queue migrations status. It initializes the Health service with the configured client and then calls the `getQueueMigrations` method with an optional threshold parameter.  The method returns a response containing the queue migrations information.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-migrations.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval health = Health(client)\n\nval response = health.getQueueMigrations(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with AppwriteException - Kotlin\nDESCRIPTION: Illustrates how to handle errors using a try-catch block to catch AppwriteException. The example demonstrates how to print the stack trace for debugging.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/README.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.ID\nimport io.appwrite.services.Users\n\nsuspend fun main() {\n    val users = Users(client)\n    try {\n        val user = users.create(\n            user = ID.unique(),\n            email = \"email@example.com\",\n            phone = \"+123456789\",\n            password = \"password\",\n            name = \"Walter O'Brien\"\n        )\n    } catch (e: AppwriteException) {\n        e.printStackTrace()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session.  The endpoint should point to your Appwrite instance, the project ID should be your Appwrite project's ID, and the session should contain the user's session data. It sets up the client for subsequent API calls.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/list-identities.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Listing Locale Codes with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to list available locale codes using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID, and then utilizes the Locale service to fetch and print the locale codes. An empty session is set. The `CoroutineCallback` handles the asynchronous response, printing the result or the stack trace in case of an error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nLocale locale = new Locale(client);\n\nlocale.listCodes(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Attribute in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete an attribute from a collection within a database using the Appwrite Kotlin SDK. It uses the `deleteAttribute` method of the `Databases` service. Replace placeholders with your database ID, collection ID, and attribute key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.deleteAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Execute GraphQL Query in Kotlin\nDESCRIPTION: This code snippet demonstrates initializing the Appwrite client with the endpoint, project ID, and API key. Then, it creates a GraphQL service instance and executes a sample query using the `query` method. The response from the query is then captured.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/graphql/query.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Graphql\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval graphql = Graphql(client)\n\nval response = graphql.query(\n    query = mapOf( \"a\" to \"b\" )\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Locale with Appwrite in Java\nDESCRIPTION: This snippet initializes the Appwrite client and uses the Locale service to retrieve the current user's locale information. It sets the endpoint, project ID, and session, then makes an asynchronous call to the `get()` method. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/get.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nLocale locale = new Locale(client);\n\nlocale.get(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Account MFA Status - Kotlin\nDESCRIPTION: This snippet demonstrates how to update the MFA status of an Appwrite account using the Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID, creates an Account service, and then calls the `updateMFA` method with a boolean parameter to disable MFA and a CoroutineCallback to handle the result asynchronously.\n\nDependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Account\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-m-f-a.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateMFA(\n    false, // mfa\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. The client is configured to connect to the Appwrite server and authenticate the requests. Replace placeholders with your actual endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/get-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.getPrefs(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Messaging Subscriber in Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a subscriber from an Appwrite Messaging topic using the Kotlin SDK. It requires the `io.appwrite` dependency. The snippet initializes the Appwrite client with the endpoint, project ID, and JWT. It then creates a Messaging service instance and calls the `deleteSubscriber` method with the topic ID and subscriber ID as parameters to remove the specified subscriber from the topic.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/delete-subscriber.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setJWT(\"<YOUR_JWT>\") // Your secret JSON Web Token\n\nval messaging = Messaging(client)\n\nval response = messaging.deleteSubscriber(\n    topicId = \"<TOPIC_ID>\",\n    subscriberId = \"<SUBSCRIBER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite Client and Database Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials (endpoint, project ID, and API key) and then creates an instance of the Databases service, which will be used to interact with the Appwrite Databases API. This setup is a prerequisite for performing database operations.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-float-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database by ID in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the `get` method of the `Databases` service to retrieve a specific database by its ID.  The `databaseId` parameter is required and should be replaced with the actual ID of the database you want to fetch.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.get(\n    databaseId = \"<DATABASE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Team Memberships - Kotlin\nDESCRIPTION: This snippet demonstrates initializing an Appwrite client, setting the endpoint and project ID, creating a Teams service instance, and calling the `listMemberships` method to retrieve a list of team memberships.  It requires the Appwrite Kotlin SDK as a dependency. The `teamId`, `queries`, and `search` parameters are used to filter the results.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/list-memberships.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n\nval response = teams.listMemberships(\n    teamId = \"<TEAM_ID>\",\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Topic by ID in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific topic from Appwrite's Messaging service using its unique ID. It depends on the initialized Appwrite client. Replace `<TOPIC_ID>` with the ID of the topic you wish to retrieve.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-topic.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval messaging = Messaging(client)\n\nval response = messaging.getTopic(\n    topicId = \"<TOPIC_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Teams Service in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID, and then creates an instance of the Teams service. The endpoint and project ID should be replaced with your specific Appwrite instance details. A user session can be set for authentication, but is initialized to an empty string in this example.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/update-membership-status.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving a User Target in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then retrieves a specific target associated with a user using the `getTarget` method of the `Users` service.  Replace `<REGION>.cloud.appwrite.io`, `<YOUR_PROJECT_ID>`, `<YOUR_API_KEY>`, `<USER_ID>`, and `<TARGET_ID>` with your actual Appwrite endpoint, project ID, API key, user ID, and target ID, respectively. The `io.appwrite` and `io.appwrite.services` libraries are required.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/get-target.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.getTarget(\n    userId = \"<USER_ID>\",\n    targetId = \"<TARGET_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Queue Logs in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary configurations (endpoint, project ID, API key) and then uses the `Health` service to retrieve the queue logs. It takes an optional threshold parameter for filtering the logs and uses a coroutine callback to handle the asynchronous response. The result is printed to the console, and any errors are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueLogs(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Flag Avatar using Appwrite (Kotlin)\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Kotlin SDK to fetch a flag avatar. It initializes an Appwrite client with the endpoint, project ID, and session. It then uses the `Avatars` service to fetch a flag by its code (e.g., `Flag.AFGHANISTAN`). Optional parameters for width, height, and quality can be provided. The result is handled in a `CoroutineCallback`.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-flag.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Avatars;\nimport io.appwrite.enums.Flag;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAvatars avatars = new Avatars(client);\n\navatars.getFlag(\n    Flag.AFGHANISTAN, // code\n    0, // width (optional)\n    0, // height (optional)\n    0, // quality (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Recovery Codes with Appwrite\nDESCRIPTION: This snippet demonstrates how to create MFA (Multi-Factor Authentication) recovery codes using the Appwrite Kotlin SDK. It initializes the Appwrite client, sets the API endpoint and project ID, and then calls the `createMfaRecoveryCodes` method on the `Account` service. The result, or any error, is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.createMfaRecoveryCodes(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. The client is then used to create an Account service instance for interacting with user accounts.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-phone-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating User (Kotlin)\nDESCRIPTION: This snippet initializes the Appwrite client with the project's endpoint, project ID, and API key. It then creates a Users service instance and uses it to create a new user with a specified user ID, email, password (hashed using SHA1), and optional name.  The API key should be treated as a secret and handled securely.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-s-h-a-user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.createSHAUser(\n    userId = \"<USER_ID>\",\n    email = \"email@example.com\",\n    password = \"password\",\n    passwordVersion = \"sha1\", // optional\n    name = \"<NAME>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Create APNs Provider with Appwrite in Kotlin\nDESCRIPTION: This snippet creates an APNs provider using the Appwrite Messaging service.  It requires the `providerId`, `name`, and optionally, `authKey`, `authKeyId`, `teamId`, `bundleId`, `sandbox`, and `enabled` parameters. Ensure that the placeholder values are replaced with the appropriate information for your APNs configuration.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-apns-provider.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.createApnsProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    authKey = \"<AUTH_KEY>\", // optional\n    authKeyId = \"<AUTH_KEY_ID>\", // optional\n    teamId = \"<TEAM_ID>\", // optional\n    bundleId = \"<BUNDLE_ID>\", // optional\n    sandbox = false, // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Account Session in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a new account session using the Appwrite Kotlin SDK. It requires a user ID and a secret for authentication. The response will contain session details if the creation is successful.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-session.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = account.createSession(\n    userId = \"<USER_ID>\",\n    secret = \"<SECRET>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Indexes in Kotlin\nDESCRIPTION: This snippet demonstrates how to list indexes from a specific database and collection using the Appwrite Databases service. It requires a pre-initialized Appwrite client and the database and collection IDs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/list-indexes.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval databases = Databases(client)\n\nval response = databases.listIndexes(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint, project ID, and API key. These configurations are necessary for authenticating and connecting to the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Deleting User Sessions Kotlin\nDESCRIPTION: This snippet uses the initialized Appwrite client to access the Account service and delete all user sessions. The `deleteSessions()` method is called on the Account object to perform the deletion.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/delete-sessions.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account = Account(client)\n\nval response = account.deleteSessions()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Storage Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It also creates an instance of the Storage service, which will be used to interact with Appwrite's storage functionality.  Ensure that `<REGION>`, `<YOUR_PROJECT_ID>`, and `<BUCKET_ID>` are replaced with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/create-file.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.models.InputFile\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n```\n\n----------------------------------------\n\nTITLE: Listing Messaging Providers in Kotlin\nDESCRIPTION: This snippet uses the initialized Appwrite Messaging service to list available messaging providers. It includes optional query parameters and a search term to filter the results.  The `queries` parameter is a list of query strings for filtering. The `search` parameter is a string to search for specific providers by name or other attributes.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-providers.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.listProviders(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. It sets the endpoint to a specified Appwrite Cloud region and the project ID to a specific project. The session is initialized as an empty string.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/list-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Update Appwrite User Target in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the provided endpoint, project ID, and API key. It then uses the `Users` service to update the target of a specific user. The `updateTarget` method takes parameters like userId, targetId, identifier, providerId, and name. A callback is used to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/update-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.updateTarget(\n    \"<USER_ID>\", // userId\n    \"<TARGET_ID>\", // targetId\n    \"<IDENTIFIER>\", // identifier (optional)\n    \"<PROVIDER_ID>\", // providerId (optional)\n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Get Queue Stats - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the provided endpoint, project ID, and API key. It then creates a Health service instance and calls the `getQueueStatsResources` method with a threshold of 0. The result or any error is printed to the console using a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-stats-resources.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueStatsResources(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Function Deployment with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then uses the Functions service to delete a specified deployment. The function ID and deployment ID are required parameters. A callback handles the result or any potential errors during the deletion process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/delete-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.deleteDeployment(\n    \"<FUNCTION_ID>\", // functionId\n    \"<DEPLOYMENT_ID>\", // deploymentId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Appwrite Function in Kotlin\nDESCRIPTION: This snippet demonstrates how to execute an Appwrite function using the Kotlin SDK. It initializes an Appwrite client with the endpoint and project ID, then creates a `Functions` service instance. The `createExecution` method is called to execute the function, passing parameters like function ID, body, async flag, path, method, headers, and scheduled time.  A CoroutineCallback is used to handle the result or error of the execution.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/create-execution.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nFunctions functions = new Functions(client);\n\nfunctions.createExecution(\n    \"<FUNCTION_ID>\", // functionId\n    \"<BODY>\", // body (optional)\n    false, // async (optional)\n    \"<PATH>\", // path (optional)\n    ExecutionMethod.GET, // method (optional)\n    mapOf( \"a\" to \"b\" ), // headers (optional)\n    \"\", // scheduledAt (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Countries List using Locale Service - Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Locale service to retrieve a list of countries. It calls the `listCountries()` method on the `locale` object.  It depends on the Appwrite client and Locale service being initialized.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-countries.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = locale.listCountries()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. The endpoint should point to your Appwrite instance, and you should replace placeholders with your actual project ID and API key.  These values are crucial for authenticating and connecting to your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-sessions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.listSessions(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Index in Appwrite using Kotlin\nDESCRIPTION: This snippet demonstrates how to delete an index in a specified database collection using the Appwrite Kotlin SDK. It utilizes the `deleteIndex` method of the `Databases` service.  Replace the placeholder values with your database ID, collection ID and index key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete-index.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.deleteIndex(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the provided endpoint, project ID, and API key. It sets up the client for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-index.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Update Phone Verification Status in Appwrite Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and uses it to update the phone verification status for a specific user. It requires the Appwrite endpoint, project ID, user ID and secret for verification. The result or any potential error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-phone-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updatePhoneVerification(\n    \"<USER_ID>\", // userId\n    \"<SECRET>\", // secret\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint and project ID, and optionally sets a user session. It's a prerequisite for interacting with Appwrite services.  Replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/update-recovery.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Checking Health in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary endpoint, project ID, and API key. It then creates a Health service instance and retrieves queue statistics resources using the getQueueStatsResources method. The threshold parameter is optional and can be used to filter the results.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-stats-resources.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueStatsResources(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client for making requests to the Appwrite API. The client configuration is essential for authenticating and connecting to the Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-subscriber-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Listing MFA Factors with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list MFA factors for an account using the Appwrite Kotlin SDK. It first initializes the client with the endpoint and project ID. Then, it creates an Account service and calls the listMfaFactors method using coroutines. The result is printed to the console, or the error stacktrace if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/list-mfa-factors.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.listMfaFactors(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. It sets up the client to interact with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/locale/list-countries-e-u.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Create Mailgun Provider with Appwrite Messaging Kotlin\nDESCRIPTION: This snippet demonstrates how to create a Mailgun provider in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the Messaging service to create a Mailgun provider, configuring various options like provider ID, name, API key, domain, region, sender details, reply-to details, and enabled status.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-mailgun-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n\nval response = messaging.createMailgunProvider(\n    providerId = \"<PROVIDER_ID>\",\n    name = \"<NAME>\",\n    apiKey = \"<API_KEY>\", // optional\n    domain = \"<DOMAIN>\", // optional\n    isEuRegion = false, // optional\n    fromName = \"<FROM_NAME>\", // optional\n    fromEmail = \"email@example.com\", // optional\n    replyToName = \"<REPLY_TO_NAME>\", // optional\n    replyToEmail = \"email@example.com\", // optional\n    enabled = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Update Float Attribute in Appwrite Database - Java\nDESCRIPTION: This Java code snippet demonstrates how to update a float attribute within a collection in an Appwrite database. It first initializes the Appwrite client with the endpoint, project ID, and API key. It then calls the `updateFloatAttribute` method on the `Databases` service, providing the database ID, collection ID, attribute key, required flag, default value, minimum value, maximum value, and a new key (optional). The snippet also includes a callback to handle the result or any errors that occur during the update operation. Make sure to replace placeholder values like `<DATABASE_ID>`, `<COLLECTION_ID>`, and `<YOUR_API_KEY>` with your actual Appwrite credentials and resource IDs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-float-attribute.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateFloatAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    0, // default\n    0, // min (optional)\n    0, // max (optional)\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Boolean Attribute in Appwrite using Kotlin\nDESCRIPTION: This code snippet demonstrates how to update a boolean attribute within an Appwrite database collection using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then calls the `updateBooleanAttribute` method with the database ID, collection ID, key, required flag, default value, new key (optional), and a `CoroutineCallback` to handle the asynchronous result. The `CoroutineCallback` prints the result or the stack trace if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-boolean-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateBooleanAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    false, // required\n    false, // default\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-sms.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Delete Appwrite Messaging Topic with Kotlin SDK\nDESCRIPTION: This snippet demonstrates deleting a messaging topic in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a `Messaging` service and calls `deleteTopic` with the topic ID and a callback function to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/delete-topic.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.deleteTopic(\n    \"<TOPIC_ID>\", // topicId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Databases in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and API key. Then, it uses the `Databases` service to list databases with optional query and search parameters. Ensure to replace placeholders with your actual Appwrite endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/list.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.list(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, setting the API endpoint, project ID, and API key. It prepares the client for subsequent calls to Appwrite services. Ensure that the endpoint, project ID, and API key are replaced with your actual Appwrite project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-vonage-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. It sets up the necessary configuration for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/get-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It establishes the connection to the Appwrite server and sets the necessary credentials for subsequent operations.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/create-integer-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Listing Function Specifications - Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client and then lists the available function specifications.  It requires the Appwrite Kotlin SDK.  The output prints the result or the error message to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/list-specifications.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.listSpecifications(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating String Attribute in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize an Appwrite client with your project's endpoint, ID, and API key. It then uses the client to create a string attribute in a specified database collection using the `createStringAttribute` method. The snippet requires the Appwrite Kotlin SDK as a dependency and assumes that the database and collection already exist.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create-string-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.createStringAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    size = 1,\n    required = false,\n    default = \"<DEFAULT>\", // optional\n    array = false, // optional\n    encrypt = false // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client for subsequent API calls.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-targets.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It configures the client to communicate with the Appwrite server. Replace placeholders with your actual credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Listing Functions with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to list functions using the Appwrite Kotlin SDK. It utilizes the `functions.list()` method with optional query parameters and a search term to filter the results. The `queries` parameter is an optional list of query strings, and the `search` parameter is an optional search term.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/list.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = functions.list(\n    queries = listOf(), // optional\n    search = \"<SEARCH>\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Create APNS Provider - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates an instance of the Messaging service and uses it to create an APNS provider with the specified parameters, including provider ID, name, authentication key details, bundle ID, and sandbox/enabled status. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-apns-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createApnsProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"<AUTH_KEY>\", // authKey (optional)\n    \"<AUTH_KEY_ID>\", // authKeyId (optional)\n    \"<TEAM_ID>\", // teamId (optional)\n    \"<BUNDLE_ID>\", // bundleId (optional)\n    false, // sandbox (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Account Recovery - Appwrite - Kotlin\nDESCRIPTION: This code snippet updates a user's account recovery settings in Appwrite. It initializes an Appwrite client with the endpoint, project ID, and session. It then calls the `updateRecovery` method of the `Account` service, passing in the user ID, secret, and optional password. A callback is used to handle the success or error response.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-recovery.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateRecovery(\n    \"<USER_ID>\", // userId\n    \"<SECRET>\", // secret\n    \"\", // password\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session ID. The endpoint specifies the Appwrite server URL, the project ID identifies the project, and the session is used for authentication.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/update-name.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Health Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a Health service instance using the configured client.  The API key provides authentication for accessing the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-cache.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getCache()\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. These are required for authenticating and connecting to your Appwrite project. Make sure to replace the placeholder values with your actual endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-apns-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration to interact with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-enum-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary endpoint, project ID, and API key. It sets up the client to interact with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Creating SMS Message with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates creating an SMS message using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it creates a Messaging service instance and calls the createSms method with the necessary parameters such as message ID, content, topics, users, targets, draft status, scheduled time, and a callback function to handle the result or error.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-sms.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createSms(\n    \"<MESSAGE_ID>\", // messageId\n    \"<CONTENT>\", // content\n    listOf(), // topics (optional)\n    listOf(), // users (optional)\n    listOf(), // targets (optional)\n    false, // draft (optional)\n    \"\", // scheduledAt (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Account Session with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint, project ID, and session. It then updates a user session using the `updateSession` method within the `Account` service. It handles success and error scenarios using a `CoroutineCallback`.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.updateSession(\n    \"<SESSION_ID>\", // sessionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Appwrite Function with Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to deploy a function using the Appwrite Kotlin SDK. It initializes the client with your Appwrite endpoint, project ID, and API key. It then uses the Functions service to create a new deployment, specifying the function ID, code file, activation status, entrypoint, and commands. The result or any error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/create-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.models.InputFile;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.createDeployment(\n    \"<FUNCTION_ID>\", // functionId\n    InputFile.fromPath(\"file.png\"), // code\n    false, // activate\n    \"<ENTRYPOINT>\", // entrypoint (optional)\n    \"<COMMANDS>\", // commands (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. These parameters are essential for authenticating and connecting to the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the necessary endpoint, project ID, and API key. The endpoint should point to your Appwrite instance, and the project ID and API key should be obtained from your Appwrite project settings.  It's crucial to replace the placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-argon2user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Create Phone Verification Request with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create a phone verification request using the Appwrite Kotlin SDK. It initializes the client, sets the endpoint and project ID, and then calls the `createPhoneVerification` method of the `Account` service. The `CoroutineCallback` handles the result or any errors that occur during the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-phone-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.createPhoneVerification(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It sets up the client to communicate with the Appwrite server. Replace placeholders with your actual endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-datetime-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. These parameters are essential for authenticating and connecting to the Appwrite server. Make sure to replace the placeholders with your actual credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-url-attribute.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. This setup is required before making any calls to the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary endpoint, project ID, and API key. It's a prerequisite for using any of the Appwrite services.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-message.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. The endpoint should point to your Appwrite instance, and the project ID and API key should match your Appwrite project credentials. This client instance will be used to interact with Appwrite services.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/create-bucket.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval storage = Storage(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the specified endpoint, project ID, and API key. It's a prerequisite for interacting with any Appwrite service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/list-indexes.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Updating Team Membership with Appwrite Kotlin SDK\nDESCRIPTION: This snippet updates a team membership using the `updateMembership` method of the `Teams` service. It requires the team ID, membership ID, and a list of roles. The roles list is empty in this case.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/update-membership.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = teams.updateMembership(\n    teamId = \"<TEAM_ID>\",\n    membershipId = \"<MEMBERSHIP_ID>\",\n    roles = listOf()\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration to communicate with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/list.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n```\n\n----------------------------------------\n\nTITLE: Updating Enum Attribute in Appwrite using Kotlin\nDESCRIPTION: This snippet demonstrates how to update an enum attribute within an Appwrite database collection. It uses the `updateEnumAttribute` method, specifying the database ID, collection ID, attribute key, enum elements, and other optional parameters such as `required`, `default`, and `newKey`.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-enum-attribute.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.updateEnumAttribute(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\",\n    key = \"\",\n    elements = listOf(),\n    required = false,\n    default = \"<DEFAULT>\",\n    newKey = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It is required before interacting with any Appwrite services.  Make sure to replace the placeholders with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-name.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It also sets an empty session. The Account service is then initialized using the client.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/list-mfa-factors.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet shows how to initialize the Appwrite client in a Kotlin application.  It requires setting the endpoint, project ID, and API key to connect to your Appwrite project.  Replace the placeholder values with your actual configuration details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-email-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Delete MFA Authenticator with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet shows how to delete a specific MFA authenticator (TOTP) for a user using the Appwrite Kotlin SDK. It requires setting the Appwrite endpoint, project ID, and API key. The `deleteMfaAuthenticator` function is called with the user ID and authenticator type to remove the MFA method.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\nimport io.appwrite.enums.AuthenticatorType\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.deleteMfaAuthenticator(\n    userId = \"<USER_ID>\",\n    type =  AuthenticatorType.TOTP\n)\n```\n\n----------------------------------------\n\nTITLE: Update SMTP Provider with Appwrite Messaging in Java\nDESCRIPTION: This code snippet updates an existing SMTP provider in Appwrite. It initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the Messaging service to update the SMTP provider with its ID and other configuration details such as host, port, username, password, encryption, mailer, from name/email, reply-to name/email, and enabled status. It uses a CoroutineCallback to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/update-smtp-provider.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.updateSmtpProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name (optional)\n    \"<HOST>\", // host (optional)\n    1, // port (optional)\n    \"<USERNAME>\", // username (optional)\n    \"<PASSWORD>\", // password (optional)\n    SmtpEncryption.NONE, // encryption (optional)\n    false, // autoTLS (optional)\n    \"<MAILER>\", // mailer (optional)\n    \"<FROM_NAME>\", // fromName (optional)\n    \"email@example.com\", // fromEmail (optional)\n    \"<REPLY_TO_NAME>\", // replyToName (optional)\n    \"<REPLY_TO_EMAIL>\", // replyToEmail (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration to communicate with the Appwrite server. Replace placeholders with your actual endpoint, project ID, and API key.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-migrations.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: List Message Logs with Appwrite Messaging in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with endpoint, project ID, and API key. It then utilizes the Messaging service to list message logs associated with a provided message ID.  The listMessageLogs function requires a message ID as input and an optional list of queries.  It uses a CoroutineCallback to handle the asynchronous response and prints the result or any encountered errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/list-message-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.listMessageLogs(\n    \"<MESSAGE_ID>\", // messageId\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Queue Database Health in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Then, it uses the Health service to retrieve the queue databases' health status. The getQueueDatabases method is called with optional parameters for filtering by name and specifying a threshold.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-databases.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueDatabases(\n    name = \"<NAME>\", // optional\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It also sets the session for authentication. Replace `<REGION>` with your Appwrite region and `<YOUR_PROJECT_ID>` with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/delete-sessions.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Deleting User Sessions with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates deleting all sessions for a given user in Appwrite. It requires the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key. The deleteSessions method is then called on the Users service, passing the user ID as a parameter. A CoroutineCallback is used to handle the asynchronous response, printing the result or any error that occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/delete-sessions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.deleteSessions(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Challenge with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create an MFA challenge using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID and then uses the Account service to create an MFA challenge, specifying the 'EMAIL' authentication factor. The `createMfaChallenge` function is part of the Appwrite Account service and sends an email with a one-time password for authentication.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-mfa-challenge.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticationFactor\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval response = account.createMfaChallenge(\n    factor =  AuthenticationFactor.EMAIL\n)\n```\n\n----------------------------------------\n\nTITLE: Create Email Token with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to create an email token for a user account using the Appwrite Kotlin SDK. It requires the `io.appwrite.Client`, `io.appwrite.coroutines.CoroutineCallback`, and `io.appwrite.services.Account` dependencies. The function takes a userId and email as input and creates an email token that's returned as a result.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-email-token.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createEmailToken(\n    \"<USER_ID>\", // userId\n    \"email@example.com\", // email\n    false, // phrase (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client for interacting with the Appwrite service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Preferences with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve user preferences from an Appwrite account using the Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID, creates an Account service instance, and then calls the getPrefs method with a CoroutineCallback to handle the asynchronous response. The result or error is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/get-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.getPrefs(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating an Appwrite Team in Kotlin\nDESCRIPTION: This snippet shows how to create a new team in Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and session. Then, it uses the `Teams` service to create a new team with a specified team ID and name. It also includes error handling to catch and print any exceptions that occur during the process. Dependencies include the Appwrite Kotlin SDK.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/teams/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nTeams teams = new Teams(client);\n\nteams.create(\n    \"<TEAM_ID>\", // teamId\n    \"<NAME>\", // name\n    listOf(), // roles (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get Function Deployment with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific deployment of an Appwrite function using the Appwrite Kotlin SDK. It requires the Appwrite client to be initialized with the correct endpoint, project ID, and API key. The function and deployment IDs are passed as parameters to the `getDeployment` method.  The result is then printed to the console or any errors are printed to the error stream.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/functions/get-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nFunctions functions = new Functions(client);\n\nfunctions.getDeployment(\n    \"<FUNCTION_ID>\", // functionId\n    \"<DEPLOYMENT_ID>\", // deploymentId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Message Logs in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Messaging service to list message logs.  It requires the Appwrite client to be initialized and a message ID to be provided.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-message-logs.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.listMessageLogs(\n    messageId = \"<MESSAGE_ID>\",\n    queries = listOf() // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Getting PubSub Health - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It then creates a Health service instance and uses it to retrieve the status of the PubSub service. Replace placeholders with actual values. The response contains information about the PubSub health status.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-pub-sub.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getPubSub()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Getting Execution in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and an empty session. Then, it uses the Functions service to retrieve a specific function execution based on the provided function ID and execution ID. The snippet requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/get-execution.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval functions = Functions(client)\n\nval response = functions.getExecution(\n    functionId = \"<FUNCTION_ID>\",\n    executionId = \"<EXECUTION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection from Appwrite Database in Kotlin\nDESCRIPTION: This snippet retrieves a collection from an Appwrite database using the `getCollection` method. It requires the database ID and collection ID as parameters. The result is a response containing the collection's data.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/get-collection.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = databases.getCollection(\n    databaseId = \"<DATABASE_ID>\",\n    collectionId = \"<COLLECTION_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Avatars Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. It then creates an instance of the `Avatars` service using the initialized client. The `getInitials` method is called to generate avatar initials, with optional parameters for name, width, height, and background.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-initials.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval avatars = Avatars(client)\n\nval result = avatars.getInitials(\n    name = \"<NAME>\", // optional\n    width = 0, // optional\n    height = 0, // optional\n    background = \"\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Appwrite Storage Health in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the provided endpoint, project ID, and API key, and then uses the `Health` service to retrieve the storage health status. It utilizes a `CoroutineCallback` to handle the asynchronous result and prints the result or error to the console. Ensure that you have the Appwrite Kotlin SDK imported.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-storage.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getStorage(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    System.out.println(result);\n}));\n```\n\n----------------------------------------\n\nTITLE: List Account Identities with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to list account identities using the Appwrite Kotlin SDK. It initializes the client with the endpoint and project ID, then uses the Account service's `listIdentities` method with an empty query list.  A CoroutineCallback is used to handle the asynchronous response, printing the result or the error to the console. Replace `<REGION>` and `<YOUR_PROJECT_ID>` with your actual Appwrite region and project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/list-identities.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.listIdentities(\n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Appwrite Kotlin SDK\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials and then executes a GraphQL query. It requires the Appwrite Kotlin SDK and a valid endpoint, project ID, and API key. The result of the query is printed to the console, and any errors are logged.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/graphql/query.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Graphql;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nGraphql graphql = new Graphql(client);\n\ngraphql.query(\n    mapOf( \"a\" to \"b\" ), // query\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Appwrite Database Relationship Attribute in Java\nDESCRIPTION: This snippet demonstrates how to update a relationship attribute in an Appwrite database using the Java SDK.\n\nIt requires the `io.appwrite` library.\n\nThe `updateRelationshipAttribute` method updates the specified relationship attribute in the given collection. It takes parameters like `databaseId`, `collectionId`, `key`, `onDelete`, and `newKey`.\n\nAn asynchronous callback is used to handle the result or any errors that occur during the operation.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update-relationship-attribute.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.updateRelationshipAttribute(\n    \"<DATABASE_ID>\", // databaseId\n    \"<COLLECTION_ID>\", // collectionId\n    \"\", // key\n    RelationMutate.CASCADE, // onDelete (optional)\n    \"\", // newKey (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create Textmagic Provider in Appwrite Messaging (Kotlin)\nDESCRIPTION: This code snippet demonstrates creating a Textmagic provider using the Appwrite Kotlin SDK. It initializes the Appwrite client with the necessary endpoint, project ID, and API key. It then uses the `createTextmagicProvider` method of the `Messaging` service to create a new provider.  A CoroutineCallback is used to handle the asynchronous result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/create-textmagic-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createTextmagicProvider(\n    \"<PROVIDER_ID>\", // providerId\n    \"<NAME>\", // name\n    \"+12065550100\", // from (optional)\n    \"<USERNAME>\", // username (optional)\n    \"<API_KEY>\", // apiKey (optional)\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create Appwrite Account Session Kotlin\nDESCRIPTION: This snippet demonstrates creating a new account session using the Appwrite Kotlin SDK. It requires the Appwrite SDK as a dependency. The snippet takes a userId and secret as input and uses a callback to handle the result or any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/create-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createSession(\n    \"<USER_ID>\", // userId\n    \"<SECRET>\", // secret\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Get Queue Functions\nDESCRIPTION: This snippet initializes an Appwrite client with the project's endpoint, project ID, and API key. It then uses the Health service to retrieve queue functions, passing in a threshold (0 in this case) and a callback to handle the result or any errors. The callback prints the result to the console or prints the stack trace if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/health/get-queue-functions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Health;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nHealth health = new Health(client);\n\nhealth.getQueueFunctions(\n    0, // threshold (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating JWT in Kotlin\nDESCRIPTION: This Kotlin code initializes the Appwrite client by setting the endpoint, project ID, and API key. It then uses the Users service to create a JWT. The `createJWT` function takes the user ID, optional session ID, and duration as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-j-w-t.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.createJWT(\n    userId = \"<USER_ID>\",\n    sessionId = \"<SESSION_ID>\", // optional\n    duration = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. The endpoint should point to your Appwrite instance, and the project ID should match the ID of your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-flag.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\nimport io.appwrite.enums.Flag\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating JWT in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID, then uses the `Account` service to create a JSON Web Token (JWT). It requires the `io.appwrite` library as a dependency. The `<REGION>` and `<YOUR_PROJECT_ID>` placeholders need to be replaced with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-j-w-t.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval response = account.createJWT()\n```\n\n----------------------------------------\n\nTITLE: Deleting MFA Authenticator with Appwrite Kotlin SDK\nDESCRIPTION: This snippet shows how to delete an MFA authenticator of a specific type (TOTP in this case) from an Appwrite account. It initializes the Appwrite client with the endpoint, project ID, and session. Then, it uses the `deleteMfaAuthenticator` method with the authenticator type. The result or error is handled in a callback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/delete-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\nimport io.appwrite.enums.AuthenticatorType;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.deleteMfaAuthenticator(\n    AuthenticatorType.TOTP, // type\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and user session. The endpoint should be a valid Appwrite instance URL, the project ID must match an existing Appwrite project, and session should represent the user's authentication.  It creates a client object and sets the necessary configurations for interacting with the Appwrite service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/avatars/get-q-r.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Session with Appwrite Kotlin SDK\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client and retrieve an account session using the `getSession` method.  It requires the Appwrite SDK for Kotlin as a dependency.  The `sessionId` parameter is the ID of the session to retrieve. The output is printed to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/get-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAccount account = new Account(client);\n\naccount.getSession(\n    \"<SESSION_ID>\", // sessionId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Messaging Provider in Kotlin with Appwrite\nDESCRIPTION: This code snippet demonstrates how to retrieve a messaging provider from Appwrite using the Kotlin SDK. It initializes the Appwrite client with the endpoint, project ID, and API key, then uses the Messaging service to retrieve a specific provider by its ID. A CoroutineCallback is used to handle the asynchronous response, printing the result or error to the console.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/messaging/get-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nMessaging messaging = new Messaging(client);\n\nmessaging.getProvider(\n    \"<PROVIDER_ID>\", // providerId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Messaging Topic Kotlin\nDESCRIPTION: Deletes a messaging topic using the Appwrite Kotlin SDK. Requires the Messaging service to be initialized and a valid topic ID. The topic ID must exist for the deletion to succeed.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/delete-topic.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval response = messaging.deleteTopic(\n    topicId = \"<TOPIC_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Credit Card Image using Appwrite Avatars in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Avatars service to retrieve a credit card image. It uses the `getCreditCard` method with the credit card type, width, height, and quality parameters. The result is printed to the console using a CoroutineCallback.\nParameters: CreditCard (credit card type), width, height, quality (optional image parameters).\nDependency: io.appwrite.enums.CreditCard, io.appwrite.coroutines.CoroutineCallback\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-credit-card.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\navatars.getCreditCard(\n    CreditCard.AMERICAN_EXPRESS, // code\n    0, // width (optional)\n    0, // height (optional)\n    0, // quality (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Appwrite Database in Kotlin\nDESCRIPTION: This snippet updates an Appwrite database. It initializes the Appwrite client, sets the endpoint, project ID, and API key. It then creates a Databases service instance and calls the `update` method with the database ID, name, and an optional enabled flag, handling the result or error using a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/databases/update.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nDatabases databases = new Databases(client);\n\ndatabases.update(\n    \"<DATABASE_ID>\", // databaseId\n    \"<NAME>\", // name\n    false, // enabled (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Magic URL Session with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet demonstrates how to update a magic URL session using the Appwrite Kotlin SDK. It initializes the Appwrite client with the endpoint and project ID, then uses the Account service to call the updateMagicURLSession method. The method requires the user ID and secret as parameters, and it uses a CoroutineCallback to handle the asynchronous response.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/account/update-magic-u-r-l-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateMagicURLSession(\n    \"<USER_ID>\", // userId\n    \"<SECRET>\", // secret\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get File Preview with Appwrite Storage in Kotlin\nDESCRIPTION: This code initializes the Appwrite client, sets the endpoint and project ID, and then uses the Storage service to get a file preview.\nIt calls the `getFilePreview` method with required bucketId and fileId, and optional parameters like width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background and output format.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/storage/get-file-preview.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval storage = Storage(client)\n\nval result = storage.getFilePreview(\n    bucketId = \"<BUCKET_ID>\",\n    fileId = \"<FILE_ID>\",\n    width = 0, // optional\n    height = 0, // optional\n    gravity = \"center\", // optional\n    quality = 0, // optional\n    borderWidth = 0, // optional\n    borderColor = \"\", // optional\n    borderRadius = 0, // optional\n    opacity = 0, // optional\n    rotation = -360, // optional\n    background = \"\", // optional\n    output = \"jpg\" // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It's a necessary first step to interact with the Appwrite API. The endpoint should point to your Appwrite instance, and you need to replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-telesign-provider.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Avatars Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and an optional session. It then creates an instance of the Avatars service, which is used to generate user initials. A CoroutineCallback is used to handle the asynchronous response, printing the result or handling any errors.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/avatars/get-initials.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Avatars;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\"); // The user session to authenticate with\n\nAvatars avatars = new Avatars(client);\n\navatars.getInitials(\n    \"<NAME>\", // name (optional)\n    0, // width (optional)\n    0, // height (optional)\n    \"\", // background (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. Replace placeholders with actual values to connect to your Appwrite instance. The client is then used to instantiate the Health service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-certificates.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Server Time with Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize an Appwrite client with the necessary configurations (endpoint, project ID, and API key) and then utilize the Health service to retrieve the server time. The `CoroutineCallback` allows asynchronous execution of the Appwrite SDK. Note: Replace placeholders with your actual credentials.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-time.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getTime()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It's a prerequisite for using any Appwrite services.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-message-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It is a prerequisite for using any Appwrite services. Replace `<REGION>.cloud.appwrite.io`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-topic.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Specifications in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the provided endpoint, project ID, and API key. It then creates a Functions service instance and calls the `listSpecifications()` method to retrieve a list of function specifications. This assumes that the Appwrite Kotlin SDK is properly installed and configured.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/list-specifications.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.listSpecifications()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/update-target.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It also creates an instance of the Health service using the initialized client. The client configuration is essential for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/health/get-queue-usage.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Health\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval health = Health(client)\n\nval response = health.getQueueUsage(\n    threshold = 0 // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Function Runtimes Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the provided endpoint, project ID, and API key. It then utilizes the `Functions` service to list the available function runtimes.  Ensure you replace the placeholder values with your actual Appwrite project details. No specific inputs are required for the `listRuntimes()` function.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/list-runtimes.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n\nval response = functions.listRuntimes()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It's a prerequisite for using any of the Appwrite services. The <REGION>, <YOUR_PROJECT_ID>, and <YOUR_API_KEY> placeholders need to be replaced with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-identity.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint and project ID. It also sets the session for authentication. Replace `<REGION>.cloud.appwrite.io/v1`, `<YOUR_PROJECT_ID>`, and the session string with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/delete-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. It sets up the necessary configuration for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/update-membership.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the necessary credentials, including the endpoint, project ID, and API key.  It sets up the client for subsequent API calls. Ensure to replace the placeholder values with your actual Appwrite project details. The endpoint should point to your Appwrite instance.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/get.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.get(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and session. The endpoint should point to your Appwrite instance, and the project ID should be your Appwrite project ID. A session can be set for authentication.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/get-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client for subsequent API calls. You need to replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/delete-index.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint URL, project ID, and user session. It sets the necessary configuration for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/teams/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet shows how to initialize the Appwrite client with the required endpoint, project ID, and API key. The client object is then used to instantiate the Functions service.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/functions/create-deployment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.models.InputFile\nimport io.appwrite.services.Functions\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval functions = Functions(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It sets up the necessary configurations to communicate with the Appwrite server. Ensure to replace placeholders with your actual values.  It is a prerequisite before using any Appwrite services.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-bcrypt-user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Appwrite Client Initialization - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. The endpoint should point to your Appwrite instance, and the project ID and API key should be configured for your project.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-p-h-pass-user.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. These values are required to connect to your Appwrite project.  Ensure to replace placeholders with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/create-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. Replace `<REGION>.cloud.appwrite.io` with your Appwrite instance's region and `<YOUR_PROJECT_ID>` with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-magic-u-r-l-token.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing User Memberships in Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client with the necessary endpoint, project ID, and API key. It then creates a Users service instance and calls the listMemberships function to retrieve the memberships associated with a specific user ID. Replace placeholders with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/list-memberships.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval users = Users(client)\n\nval response = users.listMemberships(\n    userId = \"<USER_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the necessary configuration to interact with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/create-fcm-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint, project ID, and session.  It sets the endpoint to the Appwrite Cloud URL, configures the project ID and sets session. It creates an instance of the Account service to be used for interacting with account-related functionalities.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/account/create-phone-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval account = Account(client)\n\nval response = account.createPhoneVerification()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Locale Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint and project ID, and creates an instance of the Locale service. It requires the io.appwrite library and demonstrates how to configure the client for use with the Appwrite API. The setSession is an empty string.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/locale/list-currencies.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setSession(\"\") // The user session to authenticate with\n\nval locale = Locale(client)\n\nval response = locale.listCurrencies()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client for subsequent requests to the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/databases/update-email-attribute.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving User Preferences in Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client with the endpoint, project ID, and API key. It then uses the `Users` service to retrieve user preferences for a specific user ID. A callback is used to handle the result or any errors that occur during the process.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/java/users/get-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Users;\n\nClient client = new Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\"); // Your secret API key\n\nUsers users = new Users(client);\n\nusers.getPrefs(\n    \"<USER_ID>\", // userId\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        System.out.println(result);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Message by ID in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a specific message from the Appwrite Messaging service using its unique ID. It requires an initialized Appwrite client and a valid message ID.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/get-message.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval messaging = Messaging(client)\n\nval response = messaging.getMessage(\n    messageId = \"<MESSAGE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It sets up the client to interact with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/users/delete-sessions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key. It's a prerequisite for interacting with Appwrite services.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/list-topic-logs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint, project ID, and API key.  It requires the `io.appwrite.Client` dependency. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<YOUR_API_KEY>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-kotlin/blob/main/docs/examples/kotlin/messaging/delete-provider.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client()\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n\nval messaging = Messaging(client)\n```"
  }
]