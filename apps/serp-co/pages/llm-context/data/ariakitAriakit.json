[
  {
    "owner": "ariakit",
    "repo": "ariakit",
    "content": "TITLE: Implementing Form Submission with Ariakit\nDESCRIPTION: Example showing how to handle form submission with Ariakit using the useSubmit hook. This demonstrates accessing form values, making an API request, and handling errors.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/form.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst form = useFormStore();\n\nform.useSubmit(async (state) => {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n    method: \"POST\",\n    body: JSON.stringify(state.values),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    },\n  });\n  if (!response.ok) {\n    form.setErrors(await response.json());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Ariakit Form Component API Structure\nDESCRIPTION: Overview of the Form component API structure, showing the component hierarchy and available components for building accessible forms in React.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/form.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseFormStore()\nuseFormContext()\n\n<FormProvider>\n  <Form>\n    <FormGroup>\n      <FormGroupLabel />\n      <FormLabel />\n      <FormControl />\n      <FormInput />\n      <FormCheckbox />\n      <FormDescription />\n      <FormError />\n      <FormPush />\n      <FormRemove />\n    </FormGroup>\n    <FormRadioGroup>\n      <FormRadio />\n    </FormRadioGroup>\n    <FormReset />\n    <FormSubmit />\n  </Form>\n</FormProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Grid with Ariakit in React TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a Select component with a grid-based popover using Ariakit in a React TypeScript environment. It showcases the usage of Select, SelectLabel, SelectPopover, and SelectItem components to create a bidimensional list of selectable items.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/select-grid/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"./index.react.tsx\" data-playground>Example</a>\n```\n\n----------------------------------------\n\nTITLE: Dialog Component API Overview in JSX\nDESCRIPTION: Shows the basic API structure for the Dialog component, including hooks, providers, and child components that make up the Dialog system.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/dialog.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseDialogStore()\nuseDialogContext()\n\n<DialogProvider>\n  <DialogDisclosure />\n  <Dialog>\n    <DialogDismiss />\n    <DialogHeading />\n    <DialogDescription />\n  </Dialog>\n</DialogProvider>\n```\n\n----------------------------------------\n\nTITLE: Menu Component API Structure in JSX\nDESCRIPTION: Demonstrates the complete component structure and hierarchy for the Ariakit Menu component, including providers, buttons, lists, and various menu item types.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/menu.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseMenuStore()\nuseMenuContext()\n\n<MenuProvider>\n  <MenuButton>\n    <MenuButtonArrow />\n  </MenuButton>\n  <MenuList />\n  <Menu>\n    <MenuArrow />\n    <MenuHeading />\n    <MenuDescription />\n    <MenuDismiss />\n    <MenuGroup>\n      <MenuGroupLabel />\n      <MenuItem />\n      <MenuItemCheckbox>\n        <MenuItemCheck />\n      </MenuItemCheckbox>\n      <MenuItemRadio>\n        <MenuItemCheck />\n      </MenuItemRadio>\n      <MenuSeparator />\n    </MenuGroup>\n  </Menu>\n</MenuProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog Component with Ariakit\nDESCRIPTION: Example React component showing how to create an accessible dialog (modal) using Ariakit components. It demonstrates state management with useState hook and the Dialog component with open/close functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Button, Dialog, DialogHeading } from \"@ariakit/react\";\n\nfunction App() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Button onClick={() => setOpen(true)}>Open dialog</Button>\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogHeading>Ariakit</DialogHeading>\n        <p>Welcome to Ariakit!</p>\n      </Dialog>\n    </>\n  );\n}\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Combobox Component Structure in React JSX\nDESCRIPTION: Demonstrates the complete component hierarchy and structure of the Combobox component, including providers, labels, popover, and item elements.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/combobox.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseComboboxStore()\nuseComboboxContext()\n\n<ComboboxProvider>\n  <ComboboxLabel />\n  <Combobox />\n  <ComboboxCancel />\n  <ComboboxDisclosure />\n  <ComboboxValue />\n  <ComboboxList />\n  <ComboboxPopover>\n    <ComboboxGroup>\n      <ComboboxGroupLabel />\n      <ComboboxRow>\n        <ComboboxItem>\n          <ComboboxItemCheck />\n          <ComboboxItemValue />\n        </ComboboxItem>\n        <ComboboxSeparator>\n      </ComboboxRow>\n    </ComboboxGroup>\n  </ComboboxPopover>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Component with Ariakit in React\nDESCRIPTION: This code snippet demonstrates the basic usage of the Tab component in Ariakit. It shows how to use the hook-based API and the component-based API to create a tabbed interface.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/tab.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseTabStore()\nuseTabContext()\n\n<TabProvider>\n  <TabList>\n    <Tab />\n  </TabList>\n  <TabPanel />\n</TabProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Menubar Component in React with Ariakit\nDESCRIPTION: Basic implementation of a Menubar component using Ariakit's hooks and components. Shows the essential structure including the store hook, context hook, and the provider wrapper pattern.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/menubar.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseMenubarStore()\nuseMenubarContext()\n\n<MenubarProvider>\n  <Menubar />\n</MenubarProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Toolbar Component Structure in React/JSX\nDESCRIPTION: Demonstrates the basic structure and components available in the Toolbar implementation. Shows the main store hooks, context hooks, and component hierarchy including the provider, main toolbar, container, input, items and separator components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/toolbar.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseToolbarStore()\nuseToolbarContext()\n\n<ToolbarProvider>\n  <Toolbar>\n    <ToolbarContainer />\n    <ToolbarInput />\n    <ToolbarItem />\n    <ToolbarSeparator />\n  </Toolbar>\n</ToolbarProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component Structure in JSX\nDESCRIPTION: Demonstrates the basic structure and components used to create a Select dropdown in Ariakit. It includes the SelectProvider, Select, SelectPopover, and various sub-components for creating a complete select interface.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/select.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseSelectStore()\nuseSelectContext()\n\n<SelectProvider>\n  <SelectLabel />\n  <Select>\n    <SelectValue />\n    <SelectArrow />\n  </Select>\n  <SelectPopover>\n    <SelectHeading />\n    <SelectDismiss />\n    <SelectList>\n      <SelectGroup>\n        <SelectGroupLabel />\n        <SelectRow>\n          <SelectItem>\n            <SelectItemCheck />\n          </SelectItem>\n          <SelectSeparator />\n        </SelectRow>\n      </SelectGroup>\n    </SelectList>\n  </SelectPopover>\n</SelectProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing CommandMenu with Ariakit Components in React\nDESCRIPTION: The underlying Ariakit component structure used to implement the CommandMenu, showing how Dialog, Tab, and Combobox components are combined.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog>\n  <ComboboxProvider>\n    <Combobox />\n    <DialogDismiss />\n    <TabList>\n      <Tab />\n    </TabList>\n    <TabPanel>\n      <ComboboxList>\n        <ComboboxGroup>\n          <ComboboxItem />\n        </ComboboxGroup>\n      </ComboboxList>\n    </TabPanel>\n  </ComboboxProvider>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tooltip Components in React\nDESCRIPTION: Core API implementation showing the main components and hooks needed to create a tooltip. Includes the tooltip provider, anchor, tooltip content, and optional arrow component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/tooltip.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseTooltipStore()\nuseTooltipContext()\n\n<TooltipProvider>\n  <TooltipAnchor />\n  <Tooltip>\n    <TooltipArrow />\n  </Tooltip>\n</TooltipProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Disclosure Components and Hooks in React\nDESCRIPTION: Basic API reference showing the core components and hooks for implementing the Disclosure pattern in React. This includes store hooks, context hooks, and the main components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/disclosure.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseDisclosureStore()\nuseDisclosureContext()\n\n<DisclosureProvider>\n  <Disclosure />\n  <DisclosureContent />\n</DisclosureProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating Extensible Custom Component in JSX\nDESCRIPTION: Demonstrates how to create a custom component that is open for extension, properly merging props, refs, styles, and event handlers.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { forwardRef, useRef } from \"react\";\nimport { mergeRefs } from \"react-merge-refs\";\n\nconst CustomButton = forwardRef(function CustomButton(props, forwardedRef) {\n  const internalRef = useRef(null);\n  return (\n    <button\n      {...props}\n      ref={mergeRefs([internalRef, forwardedRef])}\n      style={{\n        position: \"relative\",\n        ...props.style,\n      }}\n      onClick={(event) => {\n        props.onClick?.(event);\n        // ...\n      }}\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Form Component with React.useState\nDESCRIPTION: Demonstrates how to implement a fully controlled component store by connecting it with React's useState hook.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst [values, setValues] = React.useState({ name: \"\", email: \"\" });\nconst form = useFormStore({ values, setValues });\n```\n\n----------------------------------------\n\nTITLE: Implementing Ariakit Composite Component Structure in JSX\nDESCRIPTION: Demonstrates the component hierarchy and available hooks for implementing a composite widget. The structure includes provider, container components, group components, and interactive elements like hover and item components. Also shows the composite typeahead functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/composite.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseCompositeStore()\nuseCompositeContext()\n\n<CompositeProvider>\n  <Composite>\n    <CompositeGroup>\n      <CompositeGroupLabel />\n      <CompositeRow>\n        <CompositeHover />\n        <CompositeItem />\n        <CompositeSeparator />\n      </CompositeRow>\n    </CompositeGroup>\n  </Composite>\n  <CompositeTypeahead />\n</CompositeProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation with Ariakit Form\nDESCRIPTION: Example of implementing custom form validation using the useValidate hook. Shows how to create field-level validation that checks input length and sets appropriate error messages.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/form.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyForm() {\n  const form = useFormStore({ defaultValue: { name: \"\" } });\n  return (\n    <Form store={form}>\n      <NameInput store={form} name={form.names.name} />\n    </Form>\n  );\n}\n\nfunction NameInput({ store, name, ...props }) {\n  store.useValidate(() => {\n    const value = store.getValue(name);\n    if (value.length < 3) {\n      store.setError(name, \"Name must be at least 3 characters long\");\n    }\n  });\n  return <FormInput name={name} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Menu Component Structure in JSX\nDESCRIPTION: The basic API structure for a custom CommandMenu component, showing the parent-child relationship between components for a Raycast-style modal dialog.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-command-menu/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CommandMenu>\n  <CommandMenuInput />\n  <CommandMenuList>\n    <CommandMenuGroup>\n      <CommandMenuItem />\n    </CommandMenuGroup>\n  </CommandMenuList>\n</CommandMenu>\n```\n\n----------------------------------------\n\nTITLE: Using Ariakit Popover Components in JSX\nDESCRIPTION: This code snippet demonstrates the API structure for implementing an Ariakit Popover. It shows the available hooks (usePopoverStore and usePopoverContext) and the component hierarchy with PopoverProvider as the parent component and various child components for different parts of the popover functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/popover.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nusePopoverStore()\nusePopoverContext()\n\n<PopoverProvider>\n  <PopoverAnchor />\n  <PopoverDisclosure />\n  <Popover>\n    <PopoverArrow />\n    <PopoverHeading />\n    <PopoverDescription />\n    <PopoverDismiss />\n  </Popover>\n</PopoverProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Dialog with Framer Motion's AnimatePresence\nDESCRIPTION: This snippet shows how to wrap an Ariakit Dialog component with Framer Motion's AnimatePresence to animate it when mounting and unmounting. It applies opacity and scale animations to the dialog and opacity animations to the backdrop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-framer-motion/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AnimatePresence>\n  {mounted && (\n    <Ariakit.Dialog\n      store={dialog}\n      alwaysVisible\n      backdrop={\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        />\n      }\n      render={\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n        />\n      }\n    />\n  )}\n</AnimatePresence>\n```\n\n----------------------------------------\n\nTITLE: Combining Select, Combobox, and Tab Components in JSX\nDESCRIPTION: This snippet shows the component structure for creating a searchable tabbed select widget by combining Select, Combobox, and Tab components from Ariakit.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/select-combobox-tab/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider>\n  <SelectProvider>\n    <Select />\n    <SelectPopover>\n      <Combobox />\n      <TabProvider>\n        <TabList>\n          <Tab />\n        </TabList>\n        <TabPanel>\n          <ComboboxList>\n            <ComboboxItem />\n          </ComboboxList>\n        </TabPanel>\n      </TabProvider>\n    </SelectPopover>\n  </SelectProvider>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining Hovercard Component API in JSX\nDESCRIPTION: Demonstrates the complete API for the Hovercard component in Ariakit, including available hooks (useHovercardStore and useHovercardContext) and the component structure with HovercardProvider as the parent and various child components for different parts of the hovercard.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/hovercard.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseHovercardStore()\nuseHovercardContext()\n\n<HovercardProvider>\n  <HovercardAnchor />\n  <HovercardDisclosure />\n  <Hovercard>\n    <HovercardArrow />\n    <HovercardHeading />\n    <HovercardDescription />\n    <HovercardDismiss />\n  </Hovercard>\n</HovercardProvider>\n```\n\n----------------------------------------\n\nTITLE: Filtering Combobox Items with match-sorter\nDESCRIPTION: Example showing how to filter and render combobox items using the match-sorter library to sort and filter based on search value.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-filtering/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst matches = useMemo(() => {\n  return matchSorter(list, searchValue);\n}, [searchValue]);\n\nmatches.map((value) => <ComboboxItem key={value} value={value} />);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Combobox Store in React\nDESCRIPTION: Demonstrates how to instantiate a component store by calling the useComboboxStore hook within a React component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyCombobox() {\n  const combobox = useComboboxStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure for Radix Select with Ariakit Combobox Integration\nDESCRIPTION: The foundational structure for combining Radix UI Select with Ariakit Combobox components. This pattern wraps Radix Select elements with Ariakit Combobox components to enable search functionality in a dropdown.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix-select/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RadixSelect.Root>\n  <ComboboxProvider>\n    <RadixSelect.Trigger />\n    <RadixSelect.Content>\n      <Combobox />\n      <ComboboxList>\n        <RadixSelect.Item asChild>\n          <ComboboxItem />\n        </RadixSelect.Item>\n      </ComboboxList>\n    </RadixSelect.Content>\n  </ComboboxProvider>\n</RadixSelect.Root>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with React.startTransition in Ariakit Components\nDESCRIPTION: Using React.startTransition to optimize performance when changing tabs and filtering options. This ensures the UI remains responsive for users on low-end devices by making state updates non-blocking.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-tabs/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Ariakit.ComboboxProvider\n  setValue={(value) => {\n    React.startTransition(() => {\n      props.onSearch?.(value)\n    })\n  }}\n>\n  <Ariakit.TabProvider\n    setSelectedId={(id) => {\n      React.startTransition(() => {\n        props.onTabChange?.(id)\n      })\n    }}\n  >\n```\n\n----------------------------------------\n\nTITLE: Accessing Store with React Context\nDESCRIPTION: Shows how to use React Context to access a store in deeply nested components without prop drilling, using useFormContext.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useFormContext, FormInput } from \"@ariakit/react\";\n\nfunction RequiredInput(props) {\n  const form = useFormContext();\n\n  if (!form) {\n    throw new Error(\"RequiredInput must be used within a Form component\");\n  }\n\n  form.useValidate(() => {\n    if (!form.getValue(props.name)) {\n      form.setError(props.name, \"This field is required\");\n    }\n  });\n\n  return <FormInput {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Nested Dialogs with getPersistentElements\nDESCRIPTION: Example of identifying nested dialogs by referencing them in the getPersistentElements prop of the parent dialog. This approach allows dynamically selecting dialog elements that should be considered part of the parent dialog's tree.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-nested/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog getPersistentElements={() => document.querySelectorAll(\".dialog\")} />\n<Dialog className=\"dialog\" />\n```\n\n----------------------------------------\n\nTITLE: Structuring Combobox with Tabs in React using Ariakit\nDESCRIPTION: Basic structure showing how to combine Combobox with Tab components in Ariakit. The TabProvider is nested inside ComboboxPopover, allowing both modules to function together with the composite prop automatically assigned to the tab store.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-tabs/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider>\n  <Combobox />\n  <ComboboxPopover>\n    <TabProvider>\n      <TabList>\n        <Tab />\n      </TabList>\n      <TabPanel unmountOnHide>\n        <ComboboxList>\n          <ComboboxItem />\n        </ComboboxList>\n      </TabPanel>\n    </TabProvider>\n  </ComboboxPopover>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Rendering ComboboxItem Based on Search Matches in React\nDESCRIPTION: This snippet shows how to create a wrapper around Ariakit.ComboboxItem that conditionally renders based on whether the item's value appears in the matches array from context. This allows for automatic filtering of ComboboxItem components without changing their order in the DOM.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-filtering-integrated/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ComboboxItem(props) {\n  const context = useContext(ComboboxContext);\n  // ...\n  const isMatch = context.matches.includes(props.value);\n  // ...\n  return isMatch ? <Ariakit.ComboboxItem {...props} /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using State Setters with Form Store\nDESCRIPTION: Shows how to use state setters to respond to state changes in a component store, enabling features like onChange callbacks.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = useFormStore({\n  defaultValues: { name: \"\", email: \"\" },\n  setValues(values) {\n    console.log(values);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic TabPanel with Selected Tab ID\nDESCRIPTION: Demonstrates how to render a single TabPanel component that displays content based on the currently selected tab ID. Uses useStoreState hook to retrieve the current tab selection.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/tab-next-router/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst tabId = useStoreState(tab, \"selectedId\");\n\n<TabPanel tabId={tabId}>{props.children}</TabPanel>;\n```\n\n----------------------------------------\n\nTITLE: Composing Select and ToolbarItem in Ariakit\nDESCRIPTION: This snippet demonstrates how to combine a Select component with a ToolbarItem using the render prop pattern. This composition allows a select dropdown to be properly integrated into a toolbar interface.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/toolbar-select/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select render={<ToolbarItem />}>\n```\n\n----------------------------------------\n\nTITLE: Basic Radix-Ariakit Combobox Structure in JSX\nDESCRIPTION: Demonstrates the basic component structure for building a Combobox using Ariakit components within Radix UI's Popover components. Shows the essential wrapper hierarchy and component relationships.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RadixPopover.Root>\n  <ComboboxProvider>\n    <RadixPopover.Anchor asChild>\n      <Combobox />\n    </RadixPopover.Anchor>\n    <RadixPopover.Content asChild>\n      <ComboboxList>\n        <ComboboxItem />\n      </ComboboxList>\n    </RadixPopover.Content>\n  </ComboboxProvider>\n</RadixPopover.Root>\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Form Fields with CSS\nDESCRIPTION: CSS example showing how to style form fields that are in an invalid state by targeting the aria-invalid attribute that Ariakit automatically sets on invalid form controls.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/form.md#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.field[aria-invalid=\"true\"] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Components with a Store in JSX\nDESCRIPTION: Shows how to pass the store to Ariakit components to establish connections between different parts of the same widget.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox store={combobox} />\n\n<ComboboxPopover store={combobox}>\n  <ComboboxItem value=\"Apple\" />\n  <ComboboxItem value=\"Banana\" />\n  <ComboboxItem value=\"Orange\" />\n</ComboboxPopover>\n```\n\n----------------------------------------\n\nTITLE: Using ComboboxProvider in JSX\nDESCRIPTION: Demonstrates how to use ComboboxProvider to wrap Combobox and ComboboxPopover components, automatically connecting them to the same store.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-providers/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider>\n  <Combobox />\n  <ComboboxPopover>\n    <ComboboxItem value=\"Apple\" />\n    <ComboboxItem value=\"Banana\" />\n    <ComboboxItem value=\"Orange\" />\n  </ComboboxPopover>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Comparison of Prop Merging Approaches in JSX\nDESCRIPTION: Compares manual prop merging with using the Role component for safer and more efficient prop merging.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// ❌ Manually merging props\n<Tab\n  render={(props) => (\n    <Link\n      {...props}\n      ref={mergeRefs(props.ref, myRef)}\n      onClick={(event) => {\n        props.onClick?.(event);\n        handleClick();\n      }}\n    />\n  )}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// ✅ Better\n<Tab\n  render={\n    <Role.a\n      ref={myRef}\n      onClick={handleClick}\n      render={(props) => <Link {...props} />}\n    />\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Active Combobox Items with CSS\nDESCRIPTION: Shows how to style the active item in the combobox dropdown using the data-active-item attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/combobox.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.combobox-item[data-active-item] {\n  background-color: hsl(204 100% 40%);\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Specific State Properties from a Store\nDESCRIPTION: Shows how to read specific state properties from a store using useStoreState with a string parameter for optimized rendering.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = useStoreState(combobox, \"value\");\nconst isOpen = useStoreState(combobox, \"open\");\n```\n\n----------------------------------------\n\nTITLE: Controlling Popover State with React useState\nDESCRIPTION: Example demonstrating how to control an Ariakit Popover's open state using React.useState hook and PopoverProvider component. The state is managed through open and setOpen props passed to PopoverProvider.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/popover-lazy/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [open, setOpen] = React.useState(false);\n\n<PopoverProvider open={open} setOpen={setOpen}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Efficient Filtering with React.useDeferredValue and match-sorter\nDESCRIPTION: This code demonstrates how to use React.useDeferredValue to prevent UI blocking during typing, combined with the match-sorter library to filter and sort items. This approach ensures responsive typing even when filtering large lists of options.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-filtering-integrated/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst deferredValue = React.useDeferredValue(searchValue);\n\nconst matches = React.useMemo(() => {\n  return matchSorter(list, deferredValue);\n}, [list, deferredValue]);\n```\n\n----------------------------------------\n\nTITLE: Reading Entire Store State with useStoreState\nDESCRIPTION: Demonstrates how to read the entire state from a store and re-render the component whenever any part of the state changes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyCombobox() {\n  const combobox = useComboboxStore();\n  const state = useStoreState(combobox);\n\n  console.log(state.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit with yarn\nDESCRIPTION: Command to install the Ariakit React library using yarn package manager.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/100-getting-started/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value in SelectProvider\nDESCRIPTION: Shows how to set a default value for an uncontrolled SelectProvider component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-providers/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectProvider defaultValue=\"Banana\">\n```\n\n----------------------------------------\n\nTITLE: Linking Multiple Menu Stores in React\nDESCRIPTION: Demonstrates how to link multiple menu stores to a parent store using Ariakit's MenuProvider and useMenuStore hook. This allows multiple MenuButton components to control the same menu.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menubar-navigation/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Parent({ children }) {\n  return (\n    // Provides the parent menu store\n    <MenuProvider>\n      <Child />\n      <Child />\n      <Child />\n      <Menu />\n    </MenuProvider>\n  );\n}\n\nfunction Child() {\n  const parentStore = useMenuContext();\n  // Now the parent and child menu states are synced\n  const menu = useMenuStore({ store: parentStore });\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Item Focus Loss in ComboboxProvider in JSX\nDESCRIPTION: Setting includesBaseElement to false to maintain focus on the active item even when interacting with the combobox input.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-command-menu/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider includesBaseElement={false}>\n```\n\n----------------------------------------\n\nTITLE: Rendering Button as Summary Element in JSX\nDESCRIPTION: Illustrates using the render prop to replace the default button element of the Button component with a summary element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button render={<summary />}>Show modal</Button>\n```\n\n----------------------------------------\n\nTITLE: Accessing Combobox State with useStoreState in React\nDESCRIPTION: This snippet shows how to use the useStoreState hook to access the current value of a Combobox component, regardless of whether it's controlled or uncontrolled. This provides a consistent way to read the current input value.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-filtering-integrated/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst searchValue = useStoreState(combobox, \"value\");\n```\n\n----------------------------------------\n\nTITLE: Receiving Controlled Props in a Select Store\nDESCRIPTION: Shows how to pass controlled props from a parent component directly to a store, handling both controlled and uncontrolled usage.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst select = useSelectStore({\n  value: props.value,\n  setValue: props.onChange,\n  defaultValue: props.defaultValue,\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing Dialog Closure with Unsaved Changes in JSX\nDESCRIPTION: Code that demonstrates how to prevent a Dialog from closing when unsaved changes exist by using event.preventDefault() and displaying a warning dialog instead. This pattern checks for unsaved changes in the onClose handler.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-hide-warning/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [open, setOpen] = useState(false);\n\n<Dialog\n  open={open}\n  onClose={(event) => {\n    if (hasUnsavedChanges) {\n      event.preventDefault();\n      setWarningOpen(true);\n    } else {\n      setOpen(false);\n    }\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Submenus with Ariakit Menu Components in React\nDESCRIPTION: This snippet demonstrates how to create nested submenus using Ariakit's Menu components. It shows how to merge MenuButton and MenuItem into a single element using the render prop for creating submenus.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-nested/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuProvider>\n  <MenuButton>Edit</MenuButton>\n  <Menu>\n    <MenuItem>Undo</MenuItem>\n    <MenuItem>Redo</MenuItem>\n    <MenuProvider>\n      <MenuItem render={<MenuButton />}>Find</MenuItem>\n      <Menu>\n        <MenuItem>Find Next</MenuItem>\n        <MenuItem>Find Previous</MenuItem>\n      </Menu>\n    </MenuProvider>\n  </Menu>\n</MenuProvider>\n```\n\n----------------------------------------\n\nTITLE: Reading Checkbox State with useStoreState in React\nDESCRIPTION: This snippet demonstrates how to use the useStoreState hook to read the current value from a checkbox store and dynamically update the button text based on the checked state.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/checkbox-as-button/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst label = useStoreState(checkbox, (state) =>\n  state.value ? \"Checked\" : \"Unchecked\"\n);\n```\n\n----------------------------------------\n\nTITLE: Using Store-Specific State Setters\nDESCRIPTION: Demonstrates using specialized state setter methods provided by component stores as an alternative to setState.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst dialog = useDialogStore({ defaultOpen: false });\n\nfunction onClick() {\n  // Equivalent to dialog.setState(\"open\", true);\n  dialog.setOpen(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Context with Ariakit Components\nDESCRIPTION: Illustrates how to use Ariakit context hooks to access the nearest component store in the tree, creating a MenuButton that also behaves as a MenuItem when in a submenu.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-providers/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// A MenuButton that also behaves as a MenuItem when it's in a submenu\nfunction MenuButton(props) {\n  const menu = useMenuContext();\n  const render = menu?.parent ? <Ariakit.MenuItem /> : undefined;\n\n  return <Ariakit.MenuButton {...props} render={render} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog and Combobox Components Structure in JSX\nDESCRIPTION: The underlying component structure that leverages Ariakit's Dialog and Combobox components to create the command menu functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-command-menu/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog>\n  <ComboboxProvider>\n    <Combobox />\n    <DialogDismiss />\n    <ComboboxList>\n      <ComboboxGroup>\n        <ComboboxGroupLabel />\n        <ComboboxItem />\n      </ComboboxGroup>\n    </ComboboxList>\n  </ComboboxProvider>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Combining Menu and Combobox Components\nDESCRIPTION: Demonstrates how to wrap MenuProvider with ComboboxProvider to create a searchable dropdown menu. Uses ComboboxList instead of ComboboxPopover since Menu already functions as a popover.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-nested-combobox/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider>\n  <MenuProvider>\n    <MenuButton />\n    <Menu>\n      <Combobox />\n      <ComboboxList>\n        <ComboboxItem />\n      </ComboboxList>\n    </Menu>\n  </MenuProvider>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit with npm\nDESCRIPTION: Command to install the Ariakit React package using npm package manager.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Implementing Radix UI-like Dialog Component in React\nDESCRIPTION: This snippet shows the implementation of the Dialog component using Ariakit. It uses the Dialog.Root component and applies various props to mimic Radix UI behavior, including open state management and event handlers.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-radix/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function Dialog({\n  children,\n  open: openProp,\n  defaultOpen,\n  onOpenChange,\n  modal = true,\n  forceMount,\n  container,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onEscapeKeyDown,\n  onInteractOutside,\n}: DialogProps) {\n  const [open = false, setOpen] = useControllableState({\n    value: openProp,\n    defaultValue: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <Dialog.Root\n      open={open}\n      onClose={() => setOpen(false)}\n      modal={modal}\n      getPersistentElements={() => {\n        if (!container) return [];\n        return Array.from(container.querySelectorAll(\"[data-radix-focus-guard]\"));\n      }}\n    >\n      {(props) => (\n        <>\n          {children}\n          <DialogContent\n            {...props}\n            forceMount={forceMount}\n            container={container}\n            onOpenAutoFocus={onOpenAutoFocus}\n            onCloseAutoFocus={onCloseAutoFocus}\n            onEscapeKeyDown={onEscapeKeyDown}\n            onInteractOutside={onInteractOutside}\n          />\n        </>\n      )}\n    </Dialog.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Dialog and Combobox State in React\nDESCRIPTION: Code showing how to synchronize visibility state between Dialog and Combobox components using the dialog store and disclosure prop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst dialog = useDialogStore();\n\n<Dialog store={dialog}>\n  <ComboboxProvider disclosure={dialog}>\n```\n\n----------------------------------------\n\nTITLE: Preventing Popover Close on Interaction in JSX\nDESCRIPTION: Shows how to prevent Radix's PopoverContent from closing when interacting with the Combobox or ComboboxList by stopping event propagation in the onInteractOutside handler.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<RadixPopover.Content\n  onInteractOutside={(event) => {\n    const isCombobox = comboboxElement === event.target;\n    const inListbox = listboxElement?.contains(event.target);\n    if (isCombobox || inListbox) {\n      event.preventDefault();\n    }\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Configuring Enhanced Focus Navigation with focusShift in Combobox\nDESCRIPTION: Setting the focusShift prop on ComboboxProvider to improve navigation when items are grouped by allowing focus to move to the nearest item in the next row.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider focusShift>\n```\n\n----------------------------------------\n\nTITLE: Controlling Tab State with URL in Next.js App Router\nDESCRIPTION: Code demonstrating how to synchronize Ariakit Tab component state with browser history using Next.js router. This sets up a two-way binding between URL paths and selected tab IDs.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/tab-next-router/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst router = useRouter();\nconst pathname = usePathname();\n\n<TabProvider\n  selectedId={pathname}\n  setSelectedId={(id) => {\n    router.push(id || pathname)\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit with npm\nDESCRIPTION: Command to install the Ariakit React library using npm package manager.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/100-getting-started/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Rendering ComboboxItem as a Link in Ariakit\nDESCRIPTION: Demonstrates how to render a ComboboxItem component as a link using the render prop. This pattern allows for creating clickable links within a combobox dropdown while maintaining accessibility.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-links/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem\n  {...specificComboboxItemProps}\n  render={<a {...specificAnchorProps} />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit with Package Managers\nDESCRIPTION: Installation commands for adding the @ariakit/react package using different Node.js package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/ariakit/ariakit/blob/main/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/react\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ariakit/react\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Setting Default Focus on First Item in Combobox\nDESCRIPTION: Configuring the Combobox to automatically focus on the first item when opened using the autoSelect prop, improving usability.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox autoSelect=\"always\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog Component with Ariakit in Solid.js\nDESCRIPTION: This example demonstrates how to use Ariakit components in a Solid.js application. It creates a simple dialog that can be opened and closed using a button.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-solid/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Button, Dialog, DialogHeading } from \"@ariakit/solid\";\n\nfunction App() {\n  const [open, setOpen] = createSignal(false);\n  return (\n    <>\n      <Button onClick={() => setOpen(true)}>Open dialog</Button>\n      <Dialog open={open()} onClose={() => setOpen(false)}>\n        <DialogHeading>Ariakit</DialogHeading>\n        <p>Welcome to Ariakit!</p>\n      </Dialog>\n    </>\n  );\n}\n\nrender(() => <App />, document.getElementById(\"root\")!);\n```\n\n----------------------------------------\n\nTITLE: Controlling Tab State with React Router in JSX\nDESCRIPTION: This snippet demonstrates how to control the selected tab state using the selectedId prop of TabProvider, synchronizing it with the browser's location pathname.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-react-router/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst location = useLocation();\n\n<TabProvider selectedId={location.pathname}>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Items from User Input in JSX\nDESCRIPTION: This snippet demonstrates how to add custom items based on user input in a select component, allowing users to create new branches by typing into the combobox input.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/select-combobox-tab/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectItem\n  value={searchValue}\n  onClick={() => {\n    setData((data) => ({\n      ...data,\n      branches: [...data.branches, searchValue],\n    }));\n  }}\n>\n  Create branch {searchValue} from {value}\n</SelectItem>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation with Keyboard in React\nDESCRIPTION: Creating a keyboard handler for Tab and Shift+Tab navigation between tabs, using the tab store's previous and next methods.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst tab = useTabContext();\n\n<Combobox\n  onKeyDown={(event) => {\n    if (event.key !== \"Tab\") return;\n\n    const activeId = tab?.getState().selectedId;\n    const options = { activeId, focusLoop: false };\n    const nextId = event.shiftKey\n      ? tab?.previous(options)\n      : tab?.next(options);\n\n    if (!nextId) return;\n\n    event.preventDefault();\n    tab?.select(nextId);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Select Component with Combobox and Tabs in JSX\nDESCRIPTION: This snippet demonstrates an abstracted custom Select component that automatically renders a combobox and tabs based on the props and children passed to it.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/select-combobox-tab/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Select combobox={<input />}>\n  <SelectTabList>\n    <SelectTab />\n  </SelectTabList>\n  <SelectTabPanel>\n    <SelectList>\n      <SelectItem />\n    </SelectList>\n  </SelectTabPanel>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Setting Store State with setState Method\nDESCRIPTION: Demonstrates how to update state in a component store using the setState method within an event handler.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst dialog = useDialogStore({ defaultOpen: false });\n\nfunction onClick() {\n  dialog.setState(\"open\", true);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Radix SelectItem with Ariakit ComboboxItem\nDESCRIPTION: Strategy for combining Radix UI SelectItem with Ariakit ComboboxItem using the asChild prop. This approach ensures proper accessibility and behavior for both selection and searching.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix-select/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<RadixSelect.Item value=\"en\" asChild>\n  <ComboboxItem>\n    <RadixSelect.ItemText>English</RadixSelect.ItemText>\n  </ComboboxItem>\n</RadixSelect.Item>\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested SelectList in SelectPopover\nDESCRIPTION: This snippet demonstrates how to nest a SelectList component within a SelectPopover, allowing additional elements to be rendered inside the popover without breaking the accessibility tree.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectProvider>\n  <Select />\n  <SelectPopover>\n    <SelectHeading>Fruits</SelectHeading>\n    <SelectDismiss />\n    <SelectList>\n      <SelectItem value=\"Apple\" />\n      <SelectItem value=\"Banana\" />\n    </SelectList>\n  </SelectPopover>\n</SelectProvider>\n```\n\n----------------------------------------\n\nTITLE: Filtering Options Using match-sorter Library\nDESCRIPTION: Filtering dropdown options based on the search input using the match-sorter library. This example filters items by both label and value properties as the user types.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix-select/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst matches = useMemo(() => {\n  return matchSorter(languages, searchValue, {\n    keys: [\"label\", \"value\"],\n  });\n}, [languages, searchValue]);\n```\n\n----------------------------------------\n\nTITLE: Using Convenience Methods for State Updates\nDESCRIPTION: Demonstrates using convenience methods provided by component stores for common state update operations.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.show(); // dialog.setOpen(true)\ndialog.hide(); // dialog.setOpen(false)\ndialog.toggle(); // dialog.setOpen((open) => !open)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkbox Components with Ariakit\nDESCRIPTION: Basic implementation structure for Ariakit checkbox components showing the main hooks and component hierarchy.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/checkbox.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseCheckboxStore()\nuseCheckboxContext()\n\n<CheckboxProvider>\n  <Checkbox>\n    <CheckboxCheck />\n  </Checkbox>\n</CheckboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Menu State in React with Ariakit\nDESCRIPTION: Shows how to create a controlled menu component using Ariakit's useMenuStore hook with open and setOpen props for external state management.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-framer-motion/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Menu({ open, setOpen }) {\n  const menu = Ariakit.useMenuStore({ open, setOpen });\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Dialog State with React Router in JSX\nDESCRIPTION: This snippet shows how to control the Dialog component's open state using React Router. It demonstrates setting the open prop to true and using onClose to navigate back when the dialog is closed.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-react-router/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst navigate = useNavigate();\n\n<Dialog open onClose={() => navigate(\"/\")}>\n```\n\n----------------------------------------\n\nTITLE: Styling Button-based Checkbox with aria-checked in CSS\nDESCRIPTION: This CSS snippet shows how to style a button-based checkbox using the aria-checked attribute selector instead of the :checked pseudo-class, which isn't applicable to non-input elements.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/checkbox-as-button/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.button[aria-checked=\"true\"] {\n  background-color: hsl(204 100% 40%);\n  color: hsl(204 20% 100%);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Checked Checkbox with CSS\nDESCRIPTION: Shows how to style a checked Ariakit Checkbox component using the aria-checked attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.checkbox[aria-checked=\"true\"] {\n  background-color: hsl(204 100% 40%);\n  color: hsl(204 20% 100%);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Radio Component API in JSX\nDESCRIPTION: Shows the core API for implementing radio buttons using Ariakit, including hooks and components. The API consists of store/context hooks and a provider-based component structure.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/radio.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseRadioStore()\nuseRadioContext()\n\n<RadioProvider>\n  <RadioGroup>\n    <Radio />\n  </RadioGroup>\n</RadioProvider>\n```\n\n----------------------------------------\n\nTITLE: Rendering Combobox as Textarea in JSX\nDESCRIPTION: Demonstrates using the render prop to replace the default input element of Combobox with a textarea element, including specific textarea props.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox render={<textarea rows={5} />} />\n```\n\n----------------------------------------\n\nTITLE: Sharing State Between Ariakit and Radix UI Components\nDESCRIPTION: Implementation for sharing open/closed state between Ariakit ComboboxProvider and Radix UI Select. This enables both libraries to stay in sync when the dropdown is opened or closed.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix-select/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [open, setOpen] = useState(false);\n\n<RadixSelect.Root open={open} onOpenChange={setOpen}>\n  <ComboboxProvider open={open} setOpen={setOpen}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Group Component with Label in React/JSX\nDESCRIPTION: Demonstrates the basic usage of the Group component with a GroupLabel child component. This implementation follows WAI-ARIA guidelines for grouping related elements with proper accessibility markup.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/group.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Group>\n  <GroupLabel />\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Dialog and Combobox State in JSX\nDESCRIPTION: Code showing how to synchronize visibility state between Dialog and Combobox components using the dialog store and disclosure prop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-command-menu/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst dialog = useDialogStore();\n\n<Dialog store={dialog}>\n  <ComboboxProvider disclosure={dialog}>\n```\n\n----------------------------------------\n\nTITLE: Rendering Single TabPanel with Dynamic Content in JSX\nDESCRIPTION: This code shows how to render a single TabPanel component while controlling the selected tab using the tabId prop. It uses the Outlet component from React Router for dynamic content rendering.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-react-router/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst selectedId = useStoreState(tab, \"selectedId\");\n\n<TabPanel tabId={selectedId}>\n  <Outlet />\n</TabPanel>;\n```\n\n----------------------------------------\n\nTITLE: Setting Search Value with React startTransition\nDESCRIPTION: Implementation of search value management using ComboboxProvider and React.startTransition to maintain UI responsiveness during typing.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-filtering/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [searchValue, setSearchValue] = useState(\"\");\n\n<ComboboxProvider\n  setValue={(value) => {\n    startTransition(() => setSearchValue(value));\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Ariakit Dialog Component in JSX\nDESCRIPTION: Demonstrates how to apply inline styles and CSS classes to an Ariakit Dialog component using React props.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog\n  ref={dialogRef}\n  style={{ backgroundColor: \"white\" }}\n  className=\"dialog bg-white\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectItem as Next.js Link Component\nDESCRIPTION: Using the render prop to transform a SelectItem into a Next.js Link component, enabling native link features like opening in new tabs while maintaining the SelectItem behavior.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/select-next-router/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectItem render={<Link href=\"\" />} />\n```\n\n----------------------------------------\n\nTITLE: Nesting Dialogs in React Tree\nDESCRIPTION: Example of identifying nested dialogs by placing them directly in the React component tree hierarchy. This approach makes the parent-child relationship explicit in the structure of your components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-nested/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog>\n  <Dialog />\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Using State Setter in SelectProvider\nDESCRIPTION: Demonstrates how to use a state setter callback (setValue) with SelectProvider to log the new value when it changes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-providers/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectProvider\n  setValue={(value) => {\n    console.log(value);\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Using Computed Values with useStoreState\nDESCRIPTION: Demonstrates how to use a selector function with useStoreState to derive computed values from the store state and optimize re-renders.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyComboboxItem({ store, id }) {\n  // This component will only re-render when isActive becomes true or false,\n  // rather than on any activeId change.\n  const isActive = useStoreState(store, (state) => state.activeId === id);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Menu Items in Portal with React\nDESCRIPTION: Illustrates how to render menu items in a Portal component when the child menu is open, appending them to the parent Menu component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menubar-navigation/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst parentMenu = useStoreState(menu, \"contentElement\");\n\nif (open) {\n  return <Portal portalElement={parentMenu}>{children}</Portal>;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Dialog State with Next.js Router in JSX\nDESCRIPTION: Example showing how to control a Dialog component's open state using the Next.js router. It demonstrates setting the dialog to always be open and using onClose to navigate back when the dialog is closed.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/dialog-next-router/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst router = useRouter();\n\n<Dialog open onClose={() => router.push(\"/previews/dialog-next-router\")}>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Backdrop with Dialog in JSX\nDESCRIPTION: Shows how to use the render function to create a custom backdrop element that wraps the dialog but remains inside the dialog portal.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog\n  portal\n  backdrop={false}\n  render={(dialogProps) => (\n    // Renders a custom backdrop element that wraps the dialog, but is still\n    // inside the dialog portal.\n    <div className=\"backdrop\">\n      <div {...dialogProps} />\n    </div>\n  )}\n>\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip to be used as a label\nDESCRIPTION: Example showing how to configure a Tooltip to function as a label for an anchor element using the type prop on useTooltipStore.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nuseTooltipStore({ type: \"label\" });\n```\n\n----------------------------------------\n\nTITLE: Animating Menu with Framer Motion's AnimatePresence\nDESCRIPTION: Demonstrates how to wrap Ariakit's Menu component with Framer Motion's AnimatePresence for mount/unmount animations using motion.div as the render target.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-framer-motion/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AnimatePresence>\n  {mounted && (\n    <Ariakit.Menu store={menu} render={<motion.div />}>\n      {children}\n    </Ariakit.Menu>\n  )}\n</AnimatePresence>\n```\n\n----------------------------------------\n\nTITLE: Rendering Single TabPanel Based on Selected Tab ID\nDESCRIPTION: Using the selectedId state to dynamically determine which TabPanel to render, ensuring optimal React concurrent transitions and that ComboboxItem components are only rendered when necessary.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-tabs/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst selectedId = useStoreState(tab, \"selectedId\");\n\n<Ariakit.TabPanel tabId={selectedId}>\n```\n\n----------------------------------------\n\nTITLE: Context-based Item Rendering with SearchableContext\nDESCRIPTION: Shows how to implement context-based rendering to determine whether items should be rendered as ComboboxItem or MenuItem components using React Context.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-nested-combobox/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst SearchableContext = createContext(false);\n\nfunction Menu({ children, searchable }) {\n  return (\n    <Ariakit.Menu>\n      <SearchableContext.Provider value={searchable}>\n        {children}\n      </SearchableContext.Provider>\n    </Ariakit.Menu>\n  );\n}\n\nfunction Item() {\n  const searchable = useContext(SearchableContext);\n  return searchable ? <Ariakit.ComboboxItem /> : <Ariakit.MenuItem />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Component Implementation with Ariakit\nDESCRIPTION: Example React component demonstrating the usage of Ariakit's Dialog component with state management. Shows how to create a basic dialog with a heading that can be opened and closed using a button.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Button, Dialog, DialogHeading } from \"@ariakit/react\";\n\nfunction App() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Button onClick={() => setOpen(true)}>Open dialog</Button>\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogHeading>Ariakit</DialogHeading>\n        <p>Welcome to Ariakit!</p>\n      </Dialog>\n    </>\n  );\n}\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Overriding Composite State in React\nDESCRIPTION: Shows how to override the composite state for specific methods like 'next' in the composite store, allowing for custom navigation behavior.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst store = useCompositeStore({ defaultActiveId: \"item1\" });\nconst item3 = store.next({ activeId: \"item2\" });\n```\n\n----------------------------------------\n\nTITLE: Using useStoreState Hook in React\nDESCRIPTION: Demonstrates how to use the new useStoreState hook to access state from an Ariakit store, which is compatible with the new React Compiler and more flexible than store.useState.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = useComboboxStore();\nconst value = useStoreState(combobox, \"value\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Dialog Mounted State from Store\nDESCRIPTION: This code demonstrates how to access the 'mounted' state from the dialog store using useStoreState. This state is used to conditionally render the dialog component within AnimatePresence for animations.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-framer-motion/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst dialog = Ariakit.useDialogStore();\nconst mounted = Ariakit.useStoreState(dialog, \"mounted\");\n```\n\n----------------------------------------\n\nTITLE: Collection API Components and Hooks in JSX\nDESCRIPTION: This code snippet demonstrates the basic API of Ariakit's Collection components and hooks. It shows the collection hooks (useCollectionStore and useCollectionContext) and the component structure with CollectionProvider as the parent, Collection as the container, and CollectionItem as the individual tracked elements.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/collection.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseCollectionStore()\nuseCollectionContext()\n\n<CollectionProvider>\n  <Collection>\n    <CollectionItem />\n  </Collection>\n</CollectionProvider>\n```\n\n----------------------------------------\n\nTITLE: Styling Active Menu Items with CSS\nDESCRIPTION: Shows how to style the active menu item using the data-active-item attribute, demonstrating the styling capabilities for hover and keyboard navigation states.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/menu.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.menu-item[data-active-item] {\n  background-color: hsl(204 100% 40%);\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting SelectList within SelectPopover in React\nDESCRIPTION: Illustrates how to nest a SelectList component within a SelectPopover, allowing additional elements to be rendered inside the popover without breaking the accessibility tree.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectProvider>\n  <Select />\n  <SelectPopover>\n    <SelectHeading>Fruits</SelectHeading>\n    <SelectDismiss />\n    <SelectList>\n      <SelectItem value=\"Apple\" />\n      <SelectItem value=\"Banana\" />\n    </SelectList>\n  </SelectPopover>\n</SelectProvider>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Usage in React\nDESCRIPTION: Basic implementation example of the Ariakit Button component in React.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/button.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button />\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Combobox Component with Custom Value Props in React\nDESCRIPTION: This code demonstrates how to implement a controlled Combobox component by passing the value and onChange props to the useComboboxStore hook. This pattern allows the component to be used with standard form control patterns.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-filtering-integrated/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction Combobox({ value, onChange }) {\n  const combobox = useComboboxStore({ value, setValue: onChange });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ComboboxValue Component in React\nDESCRIPTION: Shows how to use the new ComboboxValue component to display the current value of a combobox input without rendering DOM elements, with an optional function as a child to customize the output.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider>\n  <Combobox />\n  <ComboboxValue>{(value) => `Current value: ${value}`}</ComboboxValue>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Combobox Popover Mounting with useDeferredValue\nDESCRIPTION: Using React.useDeferredValue on the combobox mounted state to make popover rendering non-blocking. This improves responsiveness by only rendering children when necessary.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-tabs/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst mounted = React.useDeferredValue(useStoreState(combobox, \"mounted\"));\n\n<Ariakit.ComboboxPopover hidden={!mounted}>\n  {mounted && props.children}\n</Ariakit.ComboboxPopover>;\n```\n\n----------------------------------------\n\nTITLE: Auto-Select Configuration for Combobox\nDESCRIPTION: Illustrates setting the autoSelect prop to 'always' for automatic focus behavior on the first enabled item.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox autoSelect=\"always\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Focus-Visible State with CSS\nDESCRIPTION: CSS snippet for styling the focus-visible state of the Button component using the data-focus-visible attribute. This approach works with both regular focus states and virtual focus in composite widgets.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/button.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.button[data-focus-visible] {\n  outline: 2px solid red;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Menu Structure with Render Prop\nDESCRIPTION: Illustrates how to create nested menus by combining MenuButton and MenuItem components using the render prop pattern.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-nested-combobox/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuProvider>\n  <MenuButton />\n  <Menu>\n    <MenuItem />\n    <MenuProvider>\n      <MenuItem render={<MenuButton />} />\n      <Menu>\n        <MenuItem />\n      </Menu>\n    </MenuProvider>\n  </Menu>\n</MenuProvider>\n```\n\n----------------------------------------\n\nTITLE: Styling Active Item in Select Component with CSS\nDESCRIPTION: Shows how to style the active item in the Select component using CSS. It targets the element with the data-active-item attribute to apply specific styles when an item is active or hovered.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/select.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.select-item[data-active-item] {\n  background-color: hsl(204 100% 40%);\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Combobox Popover Min Width with CSS Variable\nDESCRIPTION: Shows how to use the --popover-anchor-width CSS variable to set the minimum width of an Ariakit Combobox Popover component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.combobox-popover {\n  /* The combobox popover will have the combobox input width as its min width */\n  min-width: var(--popover-anchor-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Open Dialog with CSS\nDESCRIPTION: Shows how to apply a CSS animation to an open Ariakit Dialog component using the data-open attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.dialog[data-open] {\n  animation: fade-in 200ms;\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CommandMenu Component Structure in React\nDESCRIPTION: The basic structure for implementing a CommandMenu component with nested elements like input, tab list, tabs, panels, and menu items.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CommandMenu>\n  <CommandMenuInput />\n  <CommandMenuTabList>\n    <CommandMenuTab />\n  </CommandMenuTabList>\n  <CommandMenuTabPanel>\n    <CommandMenuList>\n      <CommandMenuGroup>\n        <CommandMenuItem />\n      </CommandMenuGroup>\n    </CommandMenuList>\n  </CommandMenuTabPanel>\n</CommandMenu>\n```\n\n----------------------------------------\n\nTITLE: Resetting Scroll Position for TabPanel in React\nDESCRIPTION: Shows how to reset the scroll position of a different scrollable element when changing tabs using the scrollRestoration and scrollElement props.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"overflow-auto\">\n  <TabPanel\n    scrollRestoration=\"reset\"\n    scrollElement={(panel) => panel.parentElement}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Popover Transform Origin in CSS\nDESCRIPTION: Shows usage of the --popover-transform-origin variable to control the transform origin point for popover animations relative to the anchor element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  transform-origin: var(--popover-transform-origin);\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Menus on Focus with React\nDESCRIPTION: Demonstrates how to expand menus when menubar items gain keyboard focus using the onFocusVisible prop on MenuButton.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menubar-navigation/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuButton\n  onFocusVisible={(event) => {\n    menu.setDisclosureElement(event.currentTarget);\n    menu.setAnchorElement(event.currentTarget);\n    menu.show();\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Transitioning Dialog Leave State with CSS\nDESCRIPTION: Shows how to apply a CSS transition to an Ariakit Dialog component when it leaves the visible state.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  transform: scale(1);\n  transition: transform 200ms;\n}\n\n.dialog[data-leave] {\n  transform: scale(0.9);\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing State Between Ariakit and Radix UI in JSX\nDESCRIPTION: Shows how to share state between Ariakit and Radix UI components using the useState hook. The open state is passed to both Radix's Root component and Ariakit's ComboboxProvider.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [open, setOpen] = useState(false);\n\n<RadixPopover.Root open={open} onOpenChange={setOpen}>\n  <ComboboxProvider open={open} setOpen={setOpen}>\n```\n\n----------------------------------------\n\nTITLE: Enabling Tab Panel Scroll Restoration\nDESCRIPTION: Example of using the scrollRestoration prop on TabPanel to restore the scroll position when switching tabs. This ensures the user returns to their previous scroll position when revisiting a tab.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Restores the scroll position of the tab panel element when switching tabs\n<TabPanel scrollRestoration />\n```\n\n----------------------------------------\n\nTITLE: Composing MenuButton with TooltipAnchor in React\nDESCRIPTION: Example demonstrating how to combine MenuButton and TooltipAnchor components to create a button that displays a tooltip on hover and opens a menu on click. Uses the render prop pattern for composition.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-tooltip/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TooltipAnchor render={<MenuButton />}>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Length for Combobox Options in JSX\nDESCRIPTION: Shows how to set a minimum input length before combobox options appear using the new showMinLength prop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox showMinLength={2} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Portal Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the Portal component in JSX. The Portal component is used to attach an element to a DOM node outside the parent component's hierarchy.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/portal.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Portal />\n```\n\n----------------------------------------\n\nTITLE: Preventing TabPanel Stacking with Absolute Positioning\nDESCRIPTION: CSS using the :not selector with [data-open] to set exiting tab panels to absolute position, preventing them from stacking on top of each other during transitions.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.tab-panel {\n  /* Transition setup */\n  transition-property: opacity, translate;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 300ms;\n\n  /* Default opacity/sliding effect (from/to the left) */\n  :has(> [data-was-open]) > & {\n    opacity: 0;\n    translate: -100%;\n  }\n\n  /* Sliding from/to the right */\n  :is([data-was-open], [data-open]) ~ & {\n    translate: 100%;\n  }\n\n  /* Enter state */\n  &[data-enter] {\n    opacity: 100%;\n    translate: 0;\n  }\n\n  /* Prevent stacking */\n  &:not([data-open]) {\n    position: absolute;\n    top: 0px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disclosure Component's Expanded State with CSS\nDESCRIPTION: CSS example showing how to target and style a disclosure component when it's in the expanded state using the aria-expanded attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/disclosure.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.disclosure[aria-expanded=\"true\"] {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Children with Rendered Element in JSX\nDESCRIPTION: Shows how children from the original component are passed to the rendered element, and how directly passed children override original children.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem render={<a />}>Ariakit</ComboboxItem>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a>Ariakit</a>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem render={<a>Ariakit.org</a>}>Ariakit</ComboboxItem>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a>Ariakit.org</a>\n```\n\n----------------------------------------\n\nTITLE: Retrieving TabPanel Object from Tab Store\nDESCRIPTION: Code to retrieve the current tab panel object from the tab store using the useStoreState hook, ensuring the component re-renders when the object changes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst panel = Ariakit.useStoreState(tab, () => tab?.panels.item(props.id));\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with ComboboxRow in React\nDESCRIPTION: Example of transforming a composite widget into a grid using the ComboboxRow component to wrap ComboboxItem elements.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxRow>\n  <ComboboxItem />\n  <ComboboxItem />\n</ComboboxRow>\n<ComboboxRow>\n  <ComboboxItem />\n  <ComboboxItem />\n</ComboboxRow>\n```\n\n----------------------------------------\n\nTITLE: Using Functional Updates with Store-Specific Setters\nDESCRIPTION: Shows how to use functional updates with store-specific state setter methods.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setOpen((open) => !open);\n```\n\n----------------------------------------\n\nTITLE: Setting autoSelect Prop on Combobox in JSX\nDESCRIPTION: Shows how to use the new 'always' value for the autoSelect prop on the Combobox component. This allows the first enabled item to automatically gain focus when the list shows up or when the input value changes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox autoSelect=\"always\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Nested Menu Status in JavaScript\nDESCRIPTION: Shows how to determine if a menu is nested using the new parent property on the menu store object returned by useMenuStore.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-core/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst menu = useMenuStore(props);\nconst isNested = Boolean(menu.parent);\n```\n\n----------------------------------------\n\nTITLE: Checking Nested Menu State\nDESCRIPTION: Example showing how to check if a menu is nested using the new parent property on the menu store object.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nconst menu = useMenuStore(props);\nconst isNested = Boolean(menu.parent);\n```\n\n----------------------------------------\n\nTITLE: Customizing Combobox Auto-Select Behavior in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the new 'getAutoSelectId' prop on the Combobox component to customize the auto-select behavior. It shows how to auto-select the first enabled item with a value.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox\n  autoSelect\n  getAutoSelectId={(items) => {\n    // Auto select the first enabled item with a value\n    const item = items.find((item) => {\n      if (item.disabled) return false;\n      if (!item.value) return false;\n      return true;\n    });\n    return item?.id;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled State with CSS\nDESCRIPTION: CSS example for styling the disabled state of a Button component using the aria-disabled attribute. This approach is necessary when the accessibleWhenDisabled prop is enabled.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/button.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.button[aria-disabled=\"true\"] {\n  opacity: 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Focusable ComboboxList Implementation\nDESCRIPTION: Shows how to make a ComboboxList focusable using composition with the Focusable component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxList render={<Focusable disabled />} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Ariakit Dialog with React-Toastify in JSX\nDESCRIPTION: This snippet shows how to set up an Ariakit Dialog component to work with React-Toastify notifications. It uses the getPersistentElements prop to ensure that toast notifications remain accessible even when the dialog is open.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-react-toastify/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog getPersistentElements={() => document.querySelectorAll(\".Toastify\")} />\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Role on SelectPopover in JSX\nDESCRIPTION: Shows the updated way to set roles for grid-based composite widgets. The SelectItem now requires an explicit role='gridcell' when its parent has role='grid'.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectPopover role=\"grid\">\n  <SelectRow>\n    <SelectItem role=\"gridcell\">\n```\n\n----------------------------------------\n\nTITLE: Creating a New Component in Ariakit\nDESCRIPTION: Template for creating a new component file with hook, component, and type definitions.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ElementType } from \"react\";\nimport { createElement, createHook, forwardRef } from \"../utils/system.tsx\";\nimport type { Options, Props } from \"../utils/types.ts\";\n\nconst TagName = \"div\" satisfies ElementType;\ntype TagName = typeof TagName;\n\n/**\n * Description for my component hook.\n * @see https://ariakit.org/components/my-component\n * @example\n * ```jsx\n * const props = useMyComponent();\n * <Role {...props} />\n * ```\n */\nexport const useMyComponent = createHook<TagName, MyComponentOptions>(\n  function useMyComponent({ customProp = \"My component\", ...props }) {\n    props = { children: customProp, ...props };\n    return props;\n  }\n);\n\n/**\n * Description for my component.\n * @see https://ariakit.org/components/my-component\n * @example\n * ```jsx\n * <MyComponent />\n * ```\n */\nexport const MyComponent = forwardRef(function MyComponent(\n  props: MyComponentProps,\n) {\n  const htmlProps = useMyComponent(props);\n  return createElement(TagName, htmlProps);\n});\n\nexport interface MyComponentOptions<_T extends ElementType = TagName>\n  extends Options {\n  /**\n   * Description for custom prop.\n   */\n  customProp?: string;\n};\n\nexport type MyComponentProps<T extends ElementType = TagName> = Props<\n  T,\n  MyComponentOptions<T>\n>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Component in React\nDESCRIPTION: Illustrates the new way to configure Popover component props after the breaking change in version 0.2.0, moving props from usePopoverStore to the Popover component itself.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-core/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst popover = usePopoverStore({ placement: \"bottom\" });\n\n<Popover\n  store={popover}\n  fixed\n  gutter={8}\n  shift={8}\n  flip\n  slide\n  overlap\n  sameWidth\n  fitViewport\n  arrowPadding={8}\n  overflowPadding={8}\n  getAnchorRect={(anchor) => anchor?.getBoundingClientRect()}\n  updatePosition={(props) => props.updatePosition()}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Styling Dialog Backdrop with CSS\nDESCRIPTION: Shows how to style all backdrop elements using the data-backdrop selector, which applies a semi-transparent background color.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/dialog.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[data-backdrop] {\n  background-color: hsl(0 0 0 / 0.1);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ScrollRestoration with TabPanel in React\nDESCRIPTION: Demonstrates how to enable scroll restoration for the TabPanel component, allowing control over how the scroll position is restored when switching tabs.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TabPanel scrollRestoration />\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Form Field with CSS\nDESCRIPTION: Demonstrates how to style an invalid Ariakit Form field component using the aria-invalid attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.input[aria-invalid=\"true\"] {\n  border-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Active Button with CSS\nDESCRIPTION: Shows how to style an active Ariakit Button component using both the :active pseudo-class and data-active attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.button:active,\n.button[data-active] {\n  background-color: #eee;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MenuProvider with Controlled Values in JSX\nDESCRIPTION: Example showing how to set up MenuProvider with controlled values using props. The values and setValues props are passed to control the checked state of menu items.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-item-checkbox/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuProvider values={props.values} setValues={props.onValuesChange}>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variable for Popover Transform Origin\nDESCRIPTION: This CSS snippet shows how to use the --popover-transform-origin CSS variable to set the transform-origin property for popover content elements in relation to the anchor element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  transform-origin: var(--popover-transform-origin);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Ariakit Base Layer in CSS\nDESCRIPTION: CSS code showing how to apply the Ariakit base layer using the @apply directive.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  @apply ak-layer-white dark:ak-layer-gray-950;\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Disclosure Content Height with CSS\nDESCRIPTION: This CSS snippet shows how to animate the height of the disclosure content using grid-template-rows. It utilizes the [data-enter] selector applied by Ariakit for the animation.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/disclosure-animated/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.content-wrapper {\n  display: grid;\n  transition: grid-template-rows 150ms;\n  grid-template-rows: 0fr;\n\n  /* This is equivalent to transitioning height from 0 to auto */\n  &[data-enter] {\n    grid-template-rows: 1fr;\n  }\n\n  /* The grid's direct children must have hidden overflow and no padding */\n  > * {\n    overflow: hidden;\n    padding: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining Item Focus on Mouse Movement in JSX\nDESCRIPTION: Configuration for ComboboxItem to ensure items maintain their focused state when the user moves the mouse cursor away.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-command-menu/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem focusOnHover blurOnHoverEnd={false} />\n```\n\n----------------------------------------\n\nTITLE: Setting Popover Max Height with CSS Variable\nDESCRIPTION: Demonstrates how to use the --popover-available-height CSS variable to set the maximum height of an Ariakit Popover component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  max-height: var(--popover-available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dialog and Combobox Components in JSX\nDESCRIPTION: This snippet demonstrates the changes in syntax for Dialog and Combobox components after the removal of deprecated features. It shows how to use the new 'backdrop' and 'render' props instead of the deprecated 'backdropProps', 'as', and render function children.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog backdrop={<div className=\"backdrop\" />} />\n<Combobox render={<textarea />} />\n<Combobox render={(props) => <textarea {...props} />} />\n```\n\n----------------------------------------\n\nTITLE: Reading Store State in Event Handlers\nDESCRIPTION: Shows how to read the current state directly from the store using getState() within event handlers without triggering re-renders.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = useComboboxStore();\n\nfunction handleKeyDown(event) {\n  const { value } = combobox.getState();\n  console.log(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tab with Next.js Link Component in JSX\nDESCRIPTION: Shows how to use the render prop to render the Tab component as a custom Link component from Next.js.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab render={<Link href=\"/new\" />}>New</Tab>\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Render Function in JSX\nDESCRIPTION: Demonstrates using a function as the render prop to have greater control over prop merging and composition with custom components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Button render={(htmlProps) => <summary {...htmlProps} />} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem render={(props) => <MyModal triggerProps={props} />} />\n```\n\n----------------------------------------\n\nTITLE: Styling Select Animation with CSS Transitions in Ariakit\nDESCRIPTION: CSS code that demonstrates how to animate a SelectPopover component using the data-enter and data-leave attributes. The example uses opacity transitions to create a fade effect when the popover appears and disappears.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/select-animated/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  opacity: 0;\n  transition: opacity 150ms;\n}\n\n.popover[data-enter] {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Button with CSS\nDESCRIPTION: Demonstrates how to style a disabled Ariakit Button component using the aria-disabled attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.button[aria-disabled=\"true\"] {\n  opacity: 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Overflow Padding in CSS\nDESCRIPTION: Demonstrates how to use the --popover-overflow-padding variable to create a responsive popover that fills viewport width while maintaining padding from edges.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  width: calc(100vw - var(--popover-overflow-padding) * 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Checkbox Checked State\nDESCRIPTION: CSS styling for the checkbox's checked state using aria-checked attribute selector to maintain accessibility.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/checkbox.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.checkbox[aria-checked=\"true\"] {\n  background-color: hsl(204 100% 40%);\n  color: hsl(204 20% 100%);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Dialog Backdrop with Ariakit\nDESCRIPTION: Shows how to implement a custom backdrop for a Dialog component by disabling the default backdrop and using the render prop to wrap the dialog with a custom backdrop element. The props are spread onto the inner div that becomes the actual dialog element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-backdrop-scrollable/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog\n  backdrop={false}\n  render={(dialogProps) => (\n    <div className=\"backdrop\">\n      <div {...dialogProps} />\n    </div>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Autofilled Select with CSS\nDESCRIPTION: Shows how to style an autofilled Ariakit Select component using the data-autofill attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.select[data-autofill] {\n  background-color: rgb(219 237 255);\n}\n```\n\n----------------------------------------\n\nTITLE: React Dialog Unmount Example\nDESCRIPTION: Comparison between conditional rendering and using unmountOnHide prop for Dialog component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nopen && <Dialog>\n\n<Dialog unmountOnHide>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Content in TabPanel Based on Selected Tab\nDESCRIPTION: Example of rendering different content in the TabPanel based on the selected tab ID using conditional rendering.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst [tabId, setTabId] = useState(\"tab1\");\n\n<CommandMenu defaultTab={tabId} onTabChange={setTabId}>\n  ...\n  <CommandMenuTabPanel>\n    {tabId === \"tab1\" && <TabPanelContent1 />}\n    {tabId === \"tab2\" && <TabPanelContent2 />}\n  </CommandMenuTabPanel>\n```\n\n----------------------------------------\n\nTITLE: Styling User Input in Combobox Item with CSS\nDESCRIPTION: Shows how to style the user's input within an Ariakit ComboboxItemValue component using the data-user-value attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n[data-user-value] {\n  background-color: #eee;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Menu with Framer Motion in JSX\nDESCRIPTION: Demonstrates composing the Menu component with Framer Motion's motion.div element using the render prop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu render={<motion.div animate={{ y: 100 }} />} />\n```\n\n----------------------------------------\n\nTITLE: Using Multi-selectable Combobox in JavaScript\nDESCRIPTION: Demonstrates how to use the new multi-selectable Combobox feature with the selectedValue prop. This allows for multiple selections in a Combobox component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-core/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider selectedValue={[\"option1\", \"option2\"]}>\n  {/* Combobox components */}\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Transitions for Dialog and Backdrop\nDESCRIPTION: CSS implementation for animating dialog and backdrop elements using data-enter attributes. The transitions affect opacity for the backdrop and scale transform for the dialog, with 200ms duration for smooth animations.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-animated/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.backdrop {\n  opacity: 0;\n  transition: opacity 200ms;\n}\n\n.backdrop[data-enter] {\n  opacity: 1;\n}\n\n.dialog {\n  transform: scale(0.95);\n  transition: transform 200ms;\n}\n\n.dialog[data-enter] {\n  transform: scale(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dialog Max Height with CSS Variable\nDESCRIPTION: Shows how to use the --dialog-viewport-height CSS variable to set the maximum height of an Ariakit Dialog component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  max-height: var(--dialog-viewport-height, 100dvh);\n}\n```\n\n----------------------------------------\n\nTITLE: Unmounting Nested Dialogs on Hide\nDESCRIPTION: Example of identifying nested dialogs by appending them to the body element after the parent dialog is opened. Uses the unmountOnHide prop to render the nested dialog only when needed.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-nested/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog />\n<Dialog unmountOnHide />\n```\n\n----------------------------------------\n\nTITLE: Updating Dialog Focus Props\nDESCRIPTION: Shows the renaming of Dialog component focus-related props and expanded support for HTMLElement.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- <Dialog initialFocusRef={initialFocusRef} finalFocusRef={finalFocusRef} />\n+ <Dialog initialFocus={initialFocusRef} finalFocus={finalFocusRef} />\n```\n\n----------------------------------------\n\nTITLE: Using the Role Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the Role component from Ariakit. The Role component is an abstract component that provides fundamental Ariakit features to any component, based on the WAI-ARIA RoleType Role.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/role.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Role />\n```\n\n----------------------------------------\n\nTITLE: Migrating from usePopoverStore props to Popover component (After)\nDESCRIPTION: Example of how to use the Popover component after the breaking change, with only placement passed to the store and positioning props passed directly to the Popover component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nconst popover = usePopoverStore({ placement: \"bottom\" });\n\n<Popover\n  store={popover}\n  fixed\n  gutter={8}\n  shift={8}\n  flip\n  slide\n  overlap\n  sameWidth\n  fitViewport\n  arrowPadding={8}\n  overflowPadding={8}\n  getAnchorRect={(anchor) => anchor?.getBoundingClientRect()}\n  updatePosition={(props) => props.updatePosition()}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Compensating for Scrollbar Width with CSS\nDESCRIPTION: Shows how to use the --scrollbar-width CSS variable to adjust padding on fixed elements when the dialog is open and the scrollbar is hidden.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/dialog.md#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.header {\n  padding-right: calc(16px + var(--scrollbar-width, 0));\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from usePopoverStore props to Popover component (Before)\nDESCRIPTION: Example of how to use the Popover component before the breaking change, where placement and positioning props are passed to the usePopoverStore hook.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nconst popover = usePopoverStore({\n  placement: \"bottom\",\n  fixed: true,\n  gutter: 8,\n  shift: 8,\n  flip: true,\n  slide: true,\n  overlap: true,\n  sameWidth: true,\n  fitViewport: true,\n  arrowPadding: 8,\n  overflowPadding: 8,\n  getAnchorRect: (anchor) => anchor?.getBoundingClientRect(),\n  renderCallback: (props) => props.defaultRenderCallback(),\n});\n\n<Popover store={popover} />;\n```\n\n----------------------------------------\n\nTITLE: Transitioning Dialog Enter State with CSS\nDESCRIPTION: Demonstrates how to apply a CSS transition to an Ariakit Dialog component when it enters the visible state.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  transform: scale(0.9);\n  transition: transform 200ms;\n}\n\n.dialog[data-enter] {\n  transform: scale(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fixed Header for Scrollbar Width in CSS\nDESCRIPTION: Demonstrates how to use the --scrollbar-width variable to adjust padding of fixed position elements when modal dialogs are open and scrollbar is hidden.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.header {\n  position: fixed;\n  padding-inline: 16px;\n  padding-inline-end: calc(16px + var(--scrollbar-width, 0));\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Menu and Select Store Integration\nDESCRIPTION: Shows the new approach to combining Combobox with Menu and Select components using store props.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst combobox = useComboboxState();\nconst menu = useMenuState(combobox);\nconst select = useSelectState(combobox);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst combobox = useComboboxStore();\nconst menu = useMenuStore({ combobox });\nconst select = useSelectStore({ combobox });\n```\n\n----------------------------------------\n\nTITLE: Basic Command Component Usage in JSX\nDESCRIPTION: Simple example of using the Command component in a React application. This component enables clickable actions with keyboard or mouse input based on the WAI-ARIA Command Role.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/command.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Command />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Theme Variables with Frame\nDESCRIPTION: Demonstrates using custom theme variables with ak-frame utility classes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-frame-container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Styling Expanded Disclosure with CSS\nDESCRIPTION: Shows how to style an expanded Ariakit Disclosure component using the aria-expanded attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.button[aria-expanded=\"true\"] {\n  background-color: #eee;\n}\n```\n\n----------------------------------------\n\nTITLE: Border Integration Example - Correct Usage\nDESCRIPTION: Shows correct way of combining ak-frame with border utilities using ak-frame-border.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-frame-xl/1 ak-frame-border\">Border</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Value Length for Combobox Options\nDESCRIPTION: This JSX snippet demonstrates the use of the new showMinLength prop on the Combobox component, which sets the minimum length of the value before combobox options appear.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox showMinLength={2} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Tab Selection in JSX\nDESCRIPTION: This snippet shows how to disable automatic tab selection when using arrow keys within a select dropdown with tabs.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/select-combobox-tab/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<TabProvider selectOnMove={false}>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Form Values in a Store\nDESCRIPTION: Demonstrates providing default state to a form store using the defaultValues property, which sets the initial values without controlling them.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = useFormStore({\n  defaultValues: { name: \"\", email: \"\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Styling the focus-visible State with CSS\nDESCRIPTION: Example of styling the focus-visible state using the data-focus-visible attribute. This approach supports composite widgets with virtualFocus functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/focusable.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.focusable[data-focus-visible] {\n  outline: 2px solid red;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Variables Definition\nDESCRIPTION: Shows how to define custom radius and spacing variables for use with ak-frame utilities.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n@theme {\n  --radius-container: var(--radius-xl);\n  --spacing-container: --spacing(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Active Composite Item with CSS\nDESCRIPTION: Demonstrates how to style an active item in Ariakit Composite components using the data-active-item attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.item[data-active-item] {\n  background-color: #eee;\n}\n```\n\n----------------------------------------\n\nTITLE: React Dialog Control Example\nDESCRIPTION: Example showing how to control a Dialog component with open state and onClose handler.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [open, setOpen] = useState(false);\n\n<Dialog\n  open={open}\n  onClose={() => setOpen(false)}\n>\n```\n\n----------------------------------------\n\nTITLE: Preventing Auto-Focus in Radix PopoverContent with JSX\nDESCRIPTION: Demonstrates how to prevent Radix UI's default auto-focus behavior when using it with Ariakit ComboboxList. This prevents focus shifting when the popover opens.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RadixPopover.Content\n  onOpenAutoFocus={(event) => event.preventDefault()}\n>\n```\n\n----------------------------------------\n\nTITLE: Writing Ariakit Component Documentation\nDESCRIPTION: Shows how to create a markdown file for component documentation, including a description and a link to the example that becomes a playground.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n# My component\n\n<div data-description>\n\nThis is my component.\n\n</div>\n\n<a href=\"../examples/my-component/index.react.tsx\" data-playground>Example</a>\n```\n\n----------------------------------------\n\nTITLE: Basic Focusable Component Usage in React\nDESCRIPTION: Basic implementation example of the Focusable component from Ariakit. This component standardizes focus behavior across different browsers.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/focusable.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Focusable />\n```\n\n----------------------------------------\n\nTITLE: Using ak-edge Border and Ring Classes in HTML\nDESCRIPTION: Demonstrates how to apply border and ring styles using ak-edge utilities on top of ak-layer components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-layer-canvas ak-edge/10 border\">Border</div>\n<div class=\"ak-layer-canvas ak-edge/10 ring\">Ring</div>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Transition Setup for TabPanel\nDESCRIPTION: CSS code setting up transitions for opacity and translation properties, with default sliding behavior from the left when a tab panel changes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.tab-panel {\n  /* Transition setup */\n  transition-property: opacity, translate;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 300ms;\n\n  /* Default opacity/sliding effect (from/to the left) */\n  :has(> [data-was-open]) > & {\n    opacity: 0;\n    translate: -100%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Select Component with useState\nDESCRIPTION: Setting up a controlled Select component using React's useState hook to manage the value state, which can then be passed to SelectProvider.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/select-next-router/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [value, setValue] = React.useState(\"\");\n\n<SelectProvider value={value} setValue={setValue}>\n```\n\n----------------------------------------\n\nTITLE: Rotating Disclosure Arrow Icon with CSS\nDESCRIPTION: This CSS snippet demonstrates how to animate the rotation of the arrow icon in the Disclosure component. It uses the [aria-expanded] selector and the rotate CSS property for the animation.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/disclosure-animated/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.button > svg {\n  transition: rotate 150ms;\n\n  [aria-expanded=\"true\"] > & {\n    rotate: 180deg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Tooltip Anchor with JSX\nDESCRIPTION: Demonstrates how to use the render prop pattern to customize the tooltip anchor element. This allows users to specify their own anchor element while maintaining the tooltip functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tooltip-framer-motion/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TooltipAnchor render={<a />} />\n```\n\n----------------------------------------\n\nTITLE: Using ak-text for Text Opacity and Readability\nDESCRIPTION: HTML example demonstrating how to use ak-text utilities for adjusting text opacity while maintaining readability based on the parent layer.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-layer-canvas ak-text/60\">\n  This text will be 60% opaque if supported. Otherwise, Ariakit will adjust it\n  for better readability.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Combobox Popover with CSS Transitions\nDESCRIPTION: This CSS snippet demonstrates how to add opacity transitions to a Combobox popover. It uses the data-enter attribute assigned by Ariakit to control the visibility of the popover during opening and closing animations.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-animated/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popover {\n  opacity: 0;\n  transition: opacity 150ms;\n}\n\n.popover[data-enter] {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Previous Tab Tracking with usePrevious Hook in React\nDESCRIPTION: A custom hook that maintains a reference to the previous value of a state variable, used to track the previously selected tab ID for animation purposes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef<T>();\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Reduced Motion Preferences in TabPanel Animation\nDESCRIPTION: CSS media query for prefers-reduced-motion to disable transitions entirely for users who have requested reduced motion in their system settings.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.tab-panel {\n  /* Transition setup */\n  transition-property: opacity, translate;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 300ms;\n\n  /* Default opacity/sliding effect (from/to the left) */\n  :has(> [data-was-open]) > & {\n    opacity: 0;\n    translate: -100%;\n  }\n\n  /* Sliding from/to the right */\n  :is([data-was-open], [data-open]) ~ & {\n    translate: 100%;\n  }\n\n  /* Enter state */\n  &[data-enter] {\n    opacity: 100%;\n    translate: 0;\n  }\n\n  /* Prevent stacking */\n  &:not([data-open]) {\n    position: absolute;\n    top: 0px;\n  }\n\n  /* Respect user's preference */\n  @media (prefers-reduced-motion) {\n    transition: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Tailwind CSS Utility Updates\nDESCRIPTION: Changelog entries documenting updates to various Tailwind CSS utility classes including ak-layer-pop, ak-layer-hover, ak-frame-overflow, and other layer-related utilities.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @ariakit/tailwind\n\n## 0.1.5\n\n- Adjusted `ak-edge` opacity calculation to be more accurate.\n\n## 0.1.4\n\n### `ak-layer-pop` and `ak-layer-hover`\n\nThe old `ak-layer-pop` behavior has been renamed to `ak-layer-hover` to better reflect its purpose. Now, `ak-layer-pop` works like the other `ak-layer-*` utilities, allowing you to combine `ak-layer-pop hover:ak-layer-hover`.\n\n### Other updates\n\n- Improved `ak-layer-*` utilities to accept bare values such as `ak-layer-0.5`.\n- Added `ak-frame-cover-start` and `ak-frame-cover-end` utilities to ensure the top and bottom cover edges are correctly applied when they aren't automatically detected.\n```\n\n----------------------------------------\n\nTITLE: Implementing Visually Hidden Labels for Accessibility in React\nDESCRIPTION: Demonstrates how to implement accessible checked states using visually hidden labels in a ComboboxItem component. This approach ensures consistent communication of checked states across different screen readers and assistive technologies.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-nested-combobox/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem>\n  Yellow\n  <VisuallyHidden>{checked ? \"checked\" : \"not checked\"}</VisuallyHidden>\n  <MenuItemCheck checked={checked} />\n</ComboboxItem>\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with rowId in React\nDESCRIPTION: Alternative approach to creating a grid layout by assigning row IDs to each composite item through the rowId prop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem rowId=\"row1\" />\n<ComboboxItem rowId=\"row1\" />\n<ComboboxItem rowId=\"row2\" />\n<ComboboxItem rowId=\"row2\" />\n```\n\n----------------------------------------\n\nTITLE: Re-triggering Focus with autoFocusOnShow in JSX\nDESCRIPTION: Code showing how to re-trigger the auto focus behavior on a Dialog component when a nested dialog closes. This ensures focus returns to the appropriate element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-hide-warning/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog autoFocusOnShow={!warningOpen}>\n```\n\n----------------------------------------\n\nTITLE: Accessing Tab State in Custom TabPanel Component\nDESCRIPTION: Code to access the current and previous selected tab IDs within a custom TabPanel component using Ariakit hooks.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TabPanel(props) {\n  const tab = Ariakit.useTabContext();\n  const selectedTabId = Ariakit.useStoreState(tab, \"selectedId\");\n  const previousTabId = usePrevious(selectedTabId);\n```\n\n----------------------------------------\n\nTITLE: Defining TabPanel Enter Transition State\nDESCRIPTION: CSS code using the [data-enter] selector to define the final state of the tab panel as it enters the viewport, with full opacity and centered position.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.tab-panel {\n  /* Transition setup */\n  transition-property: opacity, translate;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 300ms;\n\n  /* Default opacity/sliding effect (from/to the left) */\n  :has(> [data-was-open]) > & {\n    opacity: 0;\n    translate: -100%;\n  }\n\n  /* Sliding from/to the right */\n  :is([data-was-open], [data-open]) ~ & {\n    translate: 100%;\n  }\n\n  /* Enter state */\n  &[data-enter] {\n    opacity: 100%;\n    translate: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Props with Rendered Element in JSX\nDESCRIPTION: Demonstrates how props from the original component are passed to the rendered element, and how directly passed props override original props.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem id=\"item\" render={<a />} />\n```\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"item\">...</a>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem id=\"item\" render={<a id=\"link\" />} />\n```\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"link\">...</a>\n```\n\n----------------------------------------\n\nTITLE: Styling Dialog Backdrop with CSS\nDESCRIPTION: Demonstrates how to style the backdrop of all Ariakit Dialog components using the data-backdrop attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n[data-backdrop] {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Popover Max Width with CSS Variable\nDESCRIPTION: Shows how to use the --popover-available-width CSS variable to set the maximum width of an Ariakit Popover component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  max-width: var(--popover-available-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Select Store Combobox State Update\nDESCRIPTION: Shows the before and after code for accessing combobox state in select stores, replacing useState with direct property access.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = useComboboxStore();\nconst select = useSelectStore({ combobox });\nconst hasCombobox = select.useState(\"combobox\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = useComboboxStore();\nconst select = useSelectStore({ combobox });\nconst hasCombobox = Boolean(select.combobox);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic TabPanel in React\nDESCRIPTION: Creating a CommandMenuTabPanel component that automatically updates its tabId prop to match the selected tab ID.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CommandMenuTabPanel(props) {\n  const tab = useTabContext();\n  const tabId = useStoreState(tab, (state) => props.tabId ?? state?.selectedId);\n\n  return <TabPanel {...props} tabId={tabId} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Popover Props in React JSX\nDESCRIPTION: Demonstrates the change in how props are passed to the Popover component, moving several props from usePopoverStore to the Popover component itself. This affects all components using Popover underneath.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst popover = usePopoverStore({ placement: \"bottom\" });\n\n<Popover\n  store={popover}\n  fixed\n  gutter={8}\n  shift={8}\n  flip\n  slide\n  overlap\n  sameWidth\n  fitViewport\n  arrowPadding={8}\n  overflowPadding={8}\n  getAnchorRect={(anchor) => anchor?.getBoundingClientRect()}\n  updatePosition={(props) => props.updatePosition()}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Radio Types - Before\nDESCRIPTION: TypeScript example showing Radio component onChange event type before the change.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Radio onChange={(event: React.SyntheticEvent) => {}} />\n```\n\n----------------------------------------\n\nTITLE: Enabling Horizontal Focus Wrapping in Combobox\nDESCRIPTION: Using the focusWrap prop to enable horizontal focus wrapping, allowing focus to move to the first item in the next row when reaching the end of a row.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider focusWrap=\"horizontal\">\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit for Solid using Package Managers\nDESCRIPTION: This snippet demonstrates how to install the Ariakit package for Solid using different package managers: npm, pnpm, and Yarn.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-solid/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/solid\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ariakit/solid\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ariakit/solid\n```\n\n----------------------------------------\n\nTITLE: Passing Props to SelectProvider\nDESCRIPTION: Shows how to pass controlled props (value, onChange) and a default value from a parent component to SelectProvider.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-providers/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectProvider\n  value={props.value}\n  setValue={props.onChange}\n  defaultValue={props.defaultValue}\n>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabs within Combobox in JSX\nDESCRIPTION: Demonstrates how to structure Tab components inside a Combobox using Ariakit components. This snippet shows the seamless integration of Tab and Combobox components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider>\n  <Combobox />\n  <ComboboxPopover>\n    <TabProvider>\n      <TabList>\n        <Tab />\n      </TabList>\n      <TabPanel unmountOnHide>\n        <ComboboxList>\n          <ComboboxItem />\n        </ComboboxList>\n      </TabPanel>\n    </TabProvider>\n  </ComboboxPopover>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Migrating Combobox Filtering in Ariakit\nDESCRIPTION: Shows the transition from built-in filtering to custom filtering using external libraries like match-sorter.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst combobox = useComboboxState({ list });\n\ncombobox.matches.map((value) => <ComboboxItem key={value} value={value} />);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst combobox = useComboboxStore();\nconst value = combobox.useState(\"value\");\nconst matches = useMemo(() => matchSorter(list, value), [value]);\n\nmatches.map((value) => <ComboboxItem key={value} value={value} />);\n```\n\n----------------------------------------\n\nTITLE: Custom Dialog Backdrop in JSX\nDESCRIPTION: Demonstrates how to apply a custom backdrop to a specific dialog using the backdrop prop with a custom element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/dialog.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog backdrop={<div className=\"backdrop\" />} />\n```\n\n----------------------------------------\n\nTITLE: Styling Combobox with Active Item Data Attribute in CSS\nDESCRIPTION: This CSS snippet shows how to style a Combobox component differently when it's the only active item in the composite widget. It uses the new 'data-active-item' attribute to apply a thicker outline when the combobox input is focused.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.combobox[data-active-item] {\n  outline-width: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Border Integration Example - Incorrect Usage\nDESCRIPTION: Shows incorrect way of combining ak-frame with border utilities.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-frame-xl/1 border\">Border</div>\n```\n\n----------------------------------------\n\nTITLE: Using Component Store with SelectProvider\nDESCRIPTION: Demonstrates how to use a component store with SelectProvider for fine-grained control over the state.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-providers/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst select = useSelectStore({ defaultValue: \"Banana\" });\nconst value = useStoreState(select, \"value\");\n\n<SelectProvider store={select}>\n```\n\n----------------------------------------\n\nTITLE: Combobox with Tabs Integration Example\nDESCRIPTION: Shows how to integrate Tab components within a Combobox structure, demonstrating nested composite widget functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxProvider>\n  <Combobox />\n  <ComboboxPopover>\n    <TabProvider>\n      <TabList>\n        <Tab />\n      </TabList>\n      <TabPanel unmountOnHide>\n        <ComboboxList>\n          <ComboboxItem />\n        </ComboboxList>\n      </TabPanel>\n    </TabProvider>\n  </ComboboxPopover>\n</ComboboxProvider>\n```\n\n----------------------------------------\n\nTITLE: Component Hooks Import Path Updates\nDESCRIPTION: Demonstrates the new import paths for component hooks from @ariakit/react-core.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- import { useButton } from \"@ariakit/react\";\n+ import { useButton } from \"@ariakit/react-core/button/button\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of ak-text with Color\nDESCRIPTION: HTML example showing an incorrect way to use ak-text-color utility when it's applied to the same element as ak-layer.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- ❌ -->\n<div class=\"ak-layer-canvas ak-text-primary\">Primary text color</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Dialog Max Height with Inset and CSS Variable\nDESCRIPTION: Demonstrates how to use the --dialog-viewport-height CSS variable along with inset to set the maximum height of an Ariakit Dialog component with margins.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  --inset: 16px;\n  inset: var(--inset);\n  max-height: calc(var(--dialog-viewport-height, 100dvh) - var(--inset) * 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip as Label in React JSX\nDESCRIPTION: Shows how to configure a Tooltip component to act as a label for an anchor element using the useTooltipStore hook.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nuseTooltipStore({ type: \"label\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Ariakit Theming\nDESCRIPTION: CSS theme configuration for Ariakit Tailwind, defining custom colors, radii, and spacing variables that integrate with Ariakit's utilities.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@theme {\n  /**\n   * Any --color-* variable is automatically accessible in ak-layer, ak-text,\n   * ak-edge, and other color utilities. These names are recommended, but you\n   * can choose any names you prefer.\n   */\n  --color-canvas: #f1f1f1;\n  --color-primary: #007acc;\n  --color-secondary: #ec4899;\n\n  /**\n   * Any --radius-* and --spacing-* variable, including built-in ones like lg,\n   * xl, and numerical values, is automatically available in ak-frame utilities.\n   * Using the same name lets you omit the padding part of the utility.\n   * For example, ak-frame-container applies both --radius-container and\n   * --spacing-container.\n   */\n  --radius-container: var(--radius-xl);\n  --spacing-container: --spacing(1);\n\n  --radius-field: var(--radius-xl);\n  --spacing-field: --spacing(2);\n}\n\n/* Dark theme */\n:root {\n  @variant dark {\n    --color-canvas: #0e0e11;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Focus on First Item with Combobox in JSX\nDESCRIPTION: Using the autoSelect prop to automatically focus on the first combobox item when the dialog opens, improving usability.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-command-menu/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox autoSelect=\"always\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog positioning with CSS after backdrop structure change\nDESCRIPTION: CSS styles to position a Dialog in the center of the screen after the breaking change that makes the backdrop a sibling rather than a parent of the dialog.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  position: fixed;\n  inset: 1rem;\n  margin: auto;\n  height: fit-content;\n  max-height: calc(100vh - 2 * 1rem);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering CompositeItem as Input Element\nDESCRIPTION: This JSX snippet shows how to render a CompositeItem component as an input element using the render prop, a new feature that replaces the experimental CompositeInput component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<CompositeItem render={<input />} />\n```\n\n----------------------------------------\n\nTITLE: Using VisuallyHidden Component in JSX\nDESCRIPTION: Basic usage example of the VisuallyHidden component which hides content visually while keeping it accessible to assistive technologies.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/visually-hidden.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<VisuallyHidden />\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation\nDESCRIPTION: Documentation structure for implementing a Select with Combobox component, including tags, description, and related example links.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/select-combobox/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntags:\n  - Select\n  - Combobox\n  - Concurrent React\n  - Search\n  - Dropdowns\n  - Form controls\n---\n\n# Select with Combobox\n\n<div data-description>\n\nCombining [Select](/components/select) and [Combobox](/components/combobox) to create a dropdown with a search field that can be used to filter items.\n\n</div>\n\n<div data-tags></div>\n\n<a href=\"./index.react.tsx\" data-playground>Example</a>\n\n## Related examples\n\n<div data-cards=\"examples\">\n\n- [](/examples/select-combobox-tab)\n- [](/examples/menu-combobox)\n- [](/examples/menu-nested-combobox)\n- [](/examples/combobox-tabs)\n- [](/examples/dialog-combobox-tab-command-menu)\n- [](/examples/dialog-combobox-command-menu)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Focusable Component with CSS\nDESCRIPTION: Demonstrates how to style an Ariakit Focusable component when it has keyboard focus using the data-focus-visible attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.button[data-focus-visible] {\n  outline: 2px solid #007acc;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Menu Mounted State from Store\nDESCRIPTION: Shows how to access the mounted state from the Ariakit menu store using useStoreState hook for conditional rendering.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menu-framer-motion/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst menu = Ariakit.useMenuStore({ open, setOpen });\nconst mounted = Ariakit.useStoreState(menu, \"mounted\");\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Grid Role Composite Widget - Before\nDESCRIPTION: Example showing how composite widgets with grid role worked before the breaking change, where role assignments were automatic.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectPopover role=\"grid\">\n  <SelectRow> {/* Automatically gets role=\"row\" */}\n    <SelectItem> {/* Automatically gets role=\"gridcell\" */\n```\n\n----------------------------------------\n\nTITLE: Nesting SelectItem in Grid Role Structure in JSX\nDESCRIPTION: Illustrates how to nest a SelectItem within a grid role structure, allowing for different roles without manual adjustments.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectPopover role=\"grid\">\n  <SelectRow>\n    <div role=\"gridcell\">\n      <SelectItem render={<button />}>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in a Component Example\nDESCRIPTION: Updated example file that imports a CSS file and applies the defined class to the component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./style.css\";\nimport { MyComponent } from \"@ariakit/react-core/my-component/my-component\";\n\nexport default function Example() {\n  return <MyComponent className=\"my-component\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Dialog for Full Height with CSS Variable\nDESCRIPTION: Demonstrates how to use the --dialog-viewport-height CSS variable to ensure a dialog always fits within the visual viewport, considering space taken by virtual keyboards on mobile devices.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  max-height: var(--dialog-viewport-height, 100dvh);\n}\n```\n\n----------------------------------------\n\nTITLE: Composing ComboboxList with Focusable in JSX\nDESCRIPTION: Demonstrates how to use composition to render ComboboxList as a Focusable component, allowing the use of Focusable props like disabled. This is the new recommended approach after ComboboxList is no longer directly focusable.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxList render={<Focusable disabled />} />\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Radio Types - After\nDESCRIPTION: Updated TypeScript example showing new Radio component onChange event type.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Radio onChange={(event: React.ChangeEvent) => {}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering ComboboxItem as Anchor Link in JSX\nDESCRIPTION: Shows how to use the render prop to render the ComboboxItem component as an anchor element with specific link properties.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboboxItem\n  hideOnClick\n  focusOnHover\n  render={<a href=\"https://google.com\" />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating from State Hooks to Component Stores\nDESCRIPTION: Demonstrates the transition from state hooks to component stores pattern for state management.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst combobox = useComboboxState({ defaultValue: \"value\" });\nconst value = combobox.value;\n\n<Combobox state={combobox} />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst combobox = useComboboxStore({ defaultValue: \"value\" });\nconst value = combobox.useState(\"value\");\n\n<Combobox store={combobox} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Ariakit Changeset for Versioning\nDESCRIPTION: Shows how to create a changeset file for version bumping when adding new features or fixing bugs. This example demonstrates bumping the minor version for @ariakit/react and patch for @ariakit/react-core.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\"@ariakit/react\": minor\n\"@ariakit/react-core\": patch\n---\n\nAdded `MyComponent` component.\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Viewport Height CSS Variable\nDESCRIPTION: Example CSS using the --dialog-viewport-height variable to ensure dialogs fit within the visual viewport, accounting for virtual keyboards on mobile devices.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  max-height: var(--dialog-viewport-height, 100dvh);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting data-was-open Attribute Based on Previous Tab State\nDESCRIPTION: Code determining if the current tab panel was previously open by comparing tab IDs and setting the data-was-open attribute accordingly.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst wasPanelOpen = panel?.tabId && previousTabId === panel.tabId;\n\n<Ariakit.TabPanel data-was-open={wasPanelOpen || undefined} />\n```\n\n----------------------------------------\n\nTITLE: Light and Dark Mode Variants\nDESCRIPTION: Shows how to use ak-light and ak-dark variants for conditional styling based on parent layer appearance.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-layer-canvas\">\n  <div class=\"ak-light:ak-layer-2\">Light mode only</div>\n\n  <div class=\"ak-dark:ak-layer-2\">Dark mode only</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode\nDESCRIPTION: Command to run tests for a specific component in watch mode.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test watch my-component\n```\n\n----------------------------------------\n\nTITLE: Changelog for @ariakit/solid-core\nDESCRIPTION: Markdown formatted version history showing package updates and dependency changes\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-solid-core/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @ariakit/solid-core\n\n## 0.1.1\n\n- Updated dependencies: `@ariakit/core@0.4.15`\n\n## 0.1.0\n\n- Initial release.\n```\n\n----------------------------------------\n\nTITLE: Rendering CompositeItem as Input Element\nDESCRIPTION: Demonstrates how to render a CompositeItem component as an input element using the render prop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<CompositeItem render={<input />} />\n```\n\n----------------------------------------\n\nTITLE: React Store Synchronization with FlushSync\nDESCRIPTION: Example showing how to opt into synchronous flushing of controlled store updates using ReactDOM.flushSync.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst [open, setOpen] = useState(false);\n\nuseDialogStore({\n  open,\n  setOpen(open) {\n    ReactDOM.flushSync(() => setOpen(open));\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Frame Components with Relative Sizing\nDESCRIPTION: Shows how to create nested components with relative border radii and padding using ak-frame utilities.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-frame-xl/1\">\n  <div class=\"ak-frame-2xl/4\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Structuring Disclosure Content Markup in JSX\nDESCRIPTION: This snippet demonstrates how to structure the JSX markup for the Disclosure component to enable height animation. It uses nested divs to allow for proper CSS grid animation.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/disclosure-animated/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisclosureContent className=\"content-wrapper\">\n  <div>\n    <div className=\"content\">\n```\n\n----------------------------------------\n\nTITLE: Using ak-layer to Create Nested Layers\nDESCRIPTION: HTML example demonstrating how to create nested layers with ak-layer utility classes for progressive lightening effects.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ak-layer-canvas\">\n  <div class=\"ak-layer\">Subtly lighter canvas tone</div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Deprecated Features - After\nDESCRIPTION: Updated example showing new way to achieve the same functionality after removal of deprecated features.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog backdrop={<div className=\"backdrop\" />} />\n<Combobox render={<textarea />} />\n<Combobox render={(props) => <textarea {...props} />} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Edge and Shadow Colors with ak-layer\nDESCRIPTION: HTML example showing how to combine ak-layer with Tailwind utilities like border, ring, and shadow to display edge and shadow colors.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-layer border\">Border</div>\n<div class=\"ak-layer ring\">Ring</div>\n<div class=\"ak-layer shadow-xl\">Shadow</div>\n```\n\n----------------------------------------\n\nTITLE: Naming Functions in React.forwardRef\nDESCRIPTION: Shows the correct way to name functions when using React.forwardRef to ensure proper component naming in React DevTools without requiring displayName.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/900-coding-guidelines/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad\nexport const Combobox = React.forwardRef<HTMLInputElement, Props>(\n  (props, ref) => {\n    // ...\n  }\n);\n\n// ❌ Bad\nCombobox.displayName = \"Combobox\";\n\n// ✅ Good\nexport const Combobox = React.forwardRef<HTMLInputElement, Props>(\n  function Combobox(props, ref) {\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Linking to Button Example in Ariakit\nDESCRIPTION: This HTML snippet creates a link to a button example in the Ariakit project. It uses a relative path and includes a data-playground attribute, likely for interactive functionality.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/blog/first-post.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"../examples/button/index.react.tsx\" data-playground>Example</a>\n```\n\n----------------------------------------\n\nTITLE: Updated Radio onChange Event Type in TypeScript\nDESCRIPTION: Demonstrates the updated TypeScript type for the onChange prop on Radio components. The event type has changed from React.SyntheticEvent to React.ChangeEvent.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Radio onChange={(event: React.ChangeEvent) => {}} />\n```\n\n----------------------------------------\n\nTITLE: Ariakit Import Patterns\nDESCRIPTION: Demonstrates preferred import patterns for Ariakit components, using namespace imports for multiple components and direct imports for single components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/900-coding-guidelines/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Bad (for documentation, but fine for app code)\nimport {\n  Combobox,\n  ComboboxCancel,\n  ComboboxDisclosure,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxItem,\n  ComboboxItemValue,\n} from \"@ariakit/react\";\n\n// ✅ Good\nimport * as Ariakit from \"@ariakit/react\";\n\n// ✅ Good\nimport { Checkbox } from \"@ariakit/react\";\n```\n\n----------------------------------------\n\nTITLE: Styling Autocomplete Suggestion in Combobox Item with CSS\nDESCRIPTION: Demonstrates how to style the autocomplete suggestion within an Ariakit ComboboxItemValue component using the data-autocomplete-value attribute selector.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/200-styling/readme.md#2025-04-17_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n[data-autocomplete-value] {\n  color: #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions\nDESCRIPTION: Commands to verify the installed versions of Node.js and npm, which should be Node.js v18+ and npm v7+.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Conditional Framework Rendering with SolidJS Show Component\nDESCRIPTION: Demonstrates conditional rendering of framework-specific examples using SolidJS Show component to toggle between React and Solid implementations.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/site/src/examples/separator/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Show } from \"solid-js\";\nimport ReactExample from \"./index.react.tsx\";\nimport SolidExample from \"./index.solid.tsx\";\n\n<Show when={props.framework === \"react\"}>\n  <ReactExample client:load />\n</Show>\n\n<Show when={props.framework === \"solid\"}>\n  <SolidExample client:load />\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Interface vs Type for Component Props\nDESCRIPTION: Demonstrates the preferred approach of using TypeScript interfaces over type aliases for component props, showing how interfaces better handle type extension and error detection.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/900-coding-guidelines/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad, produces an invalid type without error\ntype CheckboxProps = React.ComponentPropsWithoutRef<\"input\"> & {\n  onChange?: (value: boolean) => void;\n}\n\n// ❗ Interface immediately detects the error\ninterface CheckboxProps extends React.ComponentPropsWithoutRef<\"input\"> {\n  onChange?: (value: boolean) => void;\n}\n\n// ✅ Good, fixed\ninterface CheckboxProps\n  extends Omit<React.ComponentPropsWithoutRef<\"input\">, \"onChange\"> {\n  onChange?: (value: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Applying the Ariakit Base Layer in HTML\nDESCRIPTION: HTML code showing how to apply the Ariakit base layer to a body element, with light and dark mode support.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ak-layer-white dark:ak-layer-gray-950\">\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit with pnpm\nDESCRIPTION: Command to install the Ariakit React library using pnpm package manager.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/100-getting-started/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Styling Dialog Component in CSS\nDESCRIPTION: CSS styles to position a Dialog component in the center of its container, accounting for the change in backdrop rendering.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  position: fixed;\n  inset: 1rem;\n  margin: auto;\n  height: fit-content;\n  max-height: calc(100vh - 2 * 1rem);\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Role Structure with SelectPopover and SelectRow in JSX\nDESCRIPTION: Example of the updated approach for rendering composite widgets with grid role. This shows how SelectItem components now need an explicit role=\"gridcell\" when used within a grid.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-core/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectPopover role=\"grid\">\n  <SelectRow> {/* Still gets role=\"row\" */}\n    <SelectItem role=\"gridcell\">\n```\n\n----------------------------------------\n\nTITLE: Styling a Component Example with Tailwind CSS\nDESCRIPTION: CSS file using Tailwind's @apply directive to style a component with responsive and dark mode support.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.my-component {\n  @apply\n    bg-red-600\n    text-white\n    dark:bg-red-800\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Parent Dialog from Warning Dialog in JSX\nDESCRIPTION: Implementation of a DialogDismiss component that saves changes and manually closes the parent dialog. This handler is used within the warning confirmation dialog.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-hide-warning/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DialogDismiss\n  onClick={() => {\n    saveChanges();\n    setOpen(false);\n  }}\n>\n  Save\n</DialogDismiss>\n```\n\n----------------------------------------\n\nTITLE: React Dialog Event Handler Example\nDESCRIPTION: Example showing how to handle Escape key events in Dialog component by stopping propagation.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog\n  hideOnEscape={(event) => {\n    event.stopPropagation();\n    return true;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Nesting SelectItem Inside Gridcell in JSX\nDESCRIPTION: Example showing how to nest a SelectItem within a div with role=\"gridcell\", which is a common pattern when using the grid role. The SelectItem can maintain its natural role.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-core/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectPopover role=\"grid\">\n  <SelectRow>\n    <div role=\"gridcell\">\n      <SelectItem render={<button />}>\n```\n\n----------------------------------------\n\nTITLE: Writing Tests for a Component Example\nDESCRIPTION: Test file using @ariakit/test to verify the component renders correctly.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { q } from \"@ariakit/test\";\n\ntest(\"my component\", () => {\n  expect(q.text(\"My component\")).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Base Layer to Use Custom Colors\nDESCRIPTION: Diff showing how to update the base layer class to use custom theme colors instead of default ones.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <body class=\"ak-layer-white dark:ak-layer-gray-950\">\n+ <body class=\"ak-layer-canvas\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Popover Documentation in Markdown\nDESCRIPTION: Markdown documentation for implementing a responsive popover component, including references to Ariakit's Popover component and its updatePosition prop for custom positioning on small screens.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/popover-responsive/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntags:\n  - Popover\n  - Dropdowns\n---\n\n# Responsive Popover\n\n<div data-description>\n\nOverwriting the default [Popover](/components/popover) positioning styles on small screens using the [`updatePosition`](/reference/popover#updateposition) prop.\n\n</div>\n\n<div data-tags></div>\n\n<a href=\"./index.react.tsx\" data-playground>Example</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Example for a Component\nDESCRIPTION: Basic example file that demonstrates the usage of a newly created component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyComponent } from \"@ariakit/react-core/my-component/my-component\";\n\nexport default function Example() {\n  return <MyComponent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Menu Open State in React\nDESCRIPTION: Shows how to determine if a child menu is open by checking the anchorElement state against the current button element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menubar-navigation/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst open = useStoreState(\n  menu,\n  (state) => state.mounted && state.anchorElement === button,\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ak-text with Color\nDESCRIPTION: HTML example showing the correct way to use ak-text-color utility as a child of an element with an ak-layer class.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- ✅ -->\n<div class=\"ak-layer-canvas\">\n  <div class=\"ak-text-primary\">Primary text color</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Ariakit Repository Directly (Organization Members)\nDESCRIPTION: Command for organization members to clone the Ariakit repository directly.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ariakit/ariakit.git\n```\n\n----------------------------------------\n\nTITLE: Using Force Parameter with Frame Components\nDESCRIPTION: Demonstrates how to override parent frame settings using the ak-frame-force utility.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ak-frame-xl/1\">\n  <div class=\"ak-frame-force-xl/4\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Project with Basic Template\nDESCRIPTION: This command uses npm to create a new Astro project using the basic template. It's the initial step to set up an Astro project with fundamental features.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/site/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit with pnpm\nDESCRIPTION: Command to install the Ariakit React package using pnpm package manager.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Panel Scroll Reset with Custom Element\nDESCRIPTION: Example of using scrollRestoration=\"reset\" with a custom scrollElement on TabPanel to reset the scroll position of a parent element when switching tabs.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Resets the scroll position of a different scrollable element\n<div className=\"overflow-auto\">\n  <TabPanel\n    scrollRestoration=\"reset\"\n    scrollElement={(panel) => panel.parentElement}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing @ariakit/solid-core Package with npm\nDESCRIPTION: Command to install the @ariakit/solid-core package using npm. This package is an internal dependency of Ariakit and does not follow semantic versioning.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-solid-core/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/solid-core\n```\n\n----------------------------------------\n\nTITLE: Updating Ariakit Example Import\nDESCRIPTION: Shows how to update the import declaration in an example file to use the newly promoted component from @ariakit/react instead of @ariakit/react-core.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./style.css\";\nimport * as Ariakit from \"@ariakit/react\";\n\nexport default function Example() {\n  return <Ariakit.MyComponent className=\"my-component\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Single vs Multi-Select Mode\nDESCRIPTION: Using useSelectContext and useStoreState hooks to determine if the Select component is in multi-select mode by checking if the value is an array, which allows for conditional rendering.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/select-next-router/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst select = useSelectContext();\nconst isMultiSelect = useStoreState(\n  select,\n  (state) => Array.isArray(state.value),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Ariakit via CDN in HTML\nDESCRIPTION: HTML template for using Ariakit directly in the browser via a CDN. This setup includes React, ReactDOM, and Babel for development purposes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/100-getting-started/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Ariakit</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <!-- Babel -->\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n    <!-- Usage -->\n    <script type=\"text/babel\" data-type=\"module\">\n      import * as React from \"https://esm.sh/react\";\n      import { createRoot } from \"https://esm.sh/react-dom\";\n      import { Button } from \"https://esm.sh/@ariakit/react\";\n\n      function App() {\n        return <Button>Button</Button>;\n      }\n\n      createRoot(document.getElementById(\"root\")).render(<App />);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: CSS for TabPanel Sliding from the Right\nDESCRIPTION: CSS selectors using subsequent-sibling combinator to make tab panels slide from or to the right based on their position relative to the previously opened panel.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/tab-panel-animated/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.tab-panel {\n  /* Transition setup */\n  transition-property: opacity, translate;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 300ms;\n\n  /* Default opacity/sliding effect (from/to the left) */\n  :has(> [data-was-open]) > & {\n    opacity: 0;\n    translate: -100%;\n  }\n\n  /* Sliding from/to the right */\n  :is([data-was-open], [data-open]) ~ & {\n    translate: 100%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Name Updates\nDESCRIPTION: Shows the transition to scoped package names under @ariakit namespace.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG-035.md#2025-04-17_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- npm i ariakit\n+ npm i @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Controlled State in SelectProvider with React.useState\nDESCRIPTION: Illustrates how to implement a controlled SelectProvider component using React.useState hook.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-providers/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst [value, setValue] = React.useState(\"Banana\");\n\n<SelectProvider value={value} setValue={setValue}>\n```\n\n----------------------------------------\n\nTITLE: Importing Ariakit Tailwind in CSS\nDESCRIPTION: CSS import statements to include Tailwind CSS and Ariakit Tailwind in your project.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@ariakit/tailwind\";\n```\n\n----------------------------------------\n\nTITLE: Adding Auto Focus to Textarea with Focusable in JSX\nDESCRIPTION: Example of using the Focusable component to render a textarea with auto focus capabilities. This helps manage focus when the dialog opens.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-hide-warning/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Focusable autoFocus render={<textarea />} />\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit Tailwind\nDESCRIPTION: Command to install the Ariakit Tailwind package using npm.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-tailwind/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/tailwind\n```\n\n----------------------------------------\n\nTITLE: Setting Dialog Z-Index with CSS\nDESCRIPTION: Demonstrates how to adjust the z-index of a dialog when the portal prop is set to false or when other elements have z-index applied.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/dialog.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.dialog {\n  z-index: 100;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit Test Package via NPM\nDESCRIPTION: Command to install the experimental @ariakit/test package using npm package manager.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-test/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/test\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variable for Popover Transform Origin\nDESCRIPTION: Demonstrates how to use the new --popover-transform-origin CSS variable to set the transform-origin property for popover content elements in relation to the anchor element.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  transform-origin: var(--popover-transform-origin);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit React Core package with npm\nDESCRIPTION: Command to install the @ariakit/react-core package using npm. Note that this package is an internal dependency and doesn't follow semantic versioning, so using @ariakit/react is recommended instead.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/react-core\n```\n\n----------------------------------------\n\nTITLE: Resetting Default Styles for Details Element in CSS\nDESCRIPTION: This CSS snippet resets the default browser styles applied to the details element, specifically targeting the button within it. It removes the default appearance and hides the marker for a cleaner, custom look.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-details/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.button {\n  appearance: none;\n}\n\n.button::marker,\n.button::-webkit-details-marker {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Ariakit Repository with Git\nDESCRIPTION: Commands for forking and cloning the Ariakit repository to begin contributing to the project.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/ariakit.git\n```\n\n----------------------------------------\n\nTITLE: Overriding Composite State for Navigation Methods\nDESCRIPTION: Example of passing a custom state object to composite store navigation methods like next() to override the current state for that specific method call without modifying the store state.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst store = useCompositeStore({ defaultActiveId: \"item1\" });\nconst item3 = store.next({ activeId: \"item2\" });\n```\n\n----------------------------------------\n\nTITLE: Using PopoverArrow with Box Shadow Border\nDESCRIPTION: Example of using the PopoverArrow component with the borderWidth prop to define the border width explicitly when using box-shadow as a border.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PopoverArrow borderWidth={1} />\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Transitions to Menu\nDESCRIPTION: Shows how to apply CSS transitions to the menu wrapper element when its position is adjusted, using the data-enter attribute to prevent transitioning on initial render.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/menubar-navigation/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.menu-wrapper:has([data-enter]) {\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Playwright End-to-End Test for Ariakit Component\nDESCRIPTION: Demonstrates how to write an end-to-end test using Playwright for an Ariakit component. This test checks if the component is visible on the page.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect } from \"@playwright/test\";\nimport { test } from \"../test-utils.ts\";\n\ntest(\"my component\", async ({ page }) => {\n  const element = await page.getByText(\"My component\");\n  await expect(element).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Comparison of Nesting Approaches in JSX\nDESCRIPTION: Compares nested and flat approaches to rendering child components, demonstrating the preferred flat structure.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/300-composition/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// ❌ Nesting inside render\n<MenuItem\n  render={\n    <Menu label=\"File\">\n      <MenuItem>New Tab</MenuItem>\n      <MenuItem>New Window</MenuItem>\n    </Menu>\n  }\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// ✅ Better\n<MenuItem render={<Menu label=\"File\" />}>\n  <MenuItem>New Tab</MenuItem>\n  <MenuItem>New Window</MenuItem>\n</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Writing Ariakit Example Documentation\nDESCRIPTION: Demonstrates how to create a readme.md file for documenting additional examples, including a description, playground link, and code snippet showing usage.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n# My component with `customProp`\n\n<div data-description>\n\nThis is my component using `customProp`.\n\n</div>\n\n<a href=\"./index.tsx\" data-playground>Example</a>\n\nNote that we're passing the `customProp` prop to the component:\n\n```tsx\n<MyComponent className=\"my-component\" customProp=\"Hello world\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Ariakit Main Package Exports\nDESCRIPTION: Demonstrates how to update the main index.ts file to export the newly promoted component, making it available for import from @ariakit/react.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport * from \"./my-component.ts\";\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with Next.js Router\nDESCRIPTION: Using React.useTransition and React.useOptimistic to create responsive UI updates when changing the select value, ensuring the UI updates immediately before waiting for navigation to complete.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/select-next-router/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst router = useRouter();\n\nconst [isPending, startTransition] = React.useTransition();\nconst [optimisticValue, setOptimisticValue] = React.useOptimistic(props.value);\n\n<SelectProvider\n  value={optimisticValue}\n  setValue={(value) => {\n    startTransition(() => {\n      // Instant update\n      setOptimisticValue(value);\n      // Depends on network conditions\n      router.push(...);\n    });\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Updating Search Value with React.startTransition for Smooth UI\nDESCRIPTION: Using React.startTransition to update the search value state without blocking the UI. This approach allows for typing to feel responsive while filtering happens in a non-blocking way.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/combobox-radix-select/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [searchValue, setSearchValue] = useState(\"\");\n\n<ComboboxProvider\n  setValue={(value) => {\n    React.startTransition(() => {\n      setSearchValue(value);\n    });\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Promoting Ariakit Component to Main Package\nDESCRIPTION: Shows how to promote a component from @ariakit/react-core to @ariakit/react by re-exporting the component and its types. This is done when a component is stable enough for the main package.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport { MyComponent } from \"@ariakit/react-core/my-component/my-component\";\n\nexport type {\n  MyComponentProps,\n  MyComponentOptions,\n} from \"@ariakit/react-core/my-component/my-component\";\n```\n\n----------------------------------------\n\nTITLE: Managing Focus on Dialog Hide with autoFocusOnHide in JSX\nDESCRIPTION: Implementation of focus management when a dialog is closed, using the autoFocusOnHide prop. This example shows how to handle focus restoration when a user navigates directly to a modal URL.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/dialog-next-router/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst pathname = usePathname();\n\n<Dialog\n  autoFocusOnHide={(element) => {\n    if (!element) {\n      document.querySelector(`[href=\"${pathname}\"]`)?.focus();\n    }\n    return true;\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Parsing Search Parameters with Zod in Next.js\nDESCRIPTION: Using Zod to safely parse and validate the searchParams prop from Next.js App Router, which helps remove invalid values from URL parameters before using them in the component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/select-next-router/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { z } from \"zod\";\n\nconst schema = z.object({\n  value: z.string().optional(),\n});\n\nexport default function Page({ searchParams }) {\n  const { value } = schema.parse(searchParams);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles in Ariakit Custom Component\nDESCRIPTION: Demonstrates how to import CSS styles from other examples in Ariakit, specifically for a custom component. It shows how to apply additional styles using Tailwind CSS classes.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"../my-component/style.css\");\n\n.my-component {\n  @apply\n    p-4\n}\n```\n\n----------------------------------------\n\nTITLE: Setting rowId for CommandMenuTab Based on Grid Context\nDESCRIPTION: Logic for setting the rowId prop for CommandMenuTab components based on whether the combobox includes any items with a rowId prop.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst combobox = useComboboxContext();\nconst isGrid = useStoreState(\n  combobox,\n  (state) => !!state?.items.find((item) => !!item.rowId),\n);\nconst rowId = isGrid ? \"tabs\" : undefined;\n\n<Tab rowId={rowId} />\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Navigation with setValueOnClick\nDESCRIPTION: Customizing the select item click behavior to prevent default link navigation when the item is clicked normally, while still allowing special actions like opening in new tabs.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/website/app/(examples)/previews/select-next-router/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectItem\n  render={<Link href=\"\" />}\n  setValueOnClick={(event) => {\n    event.preventDefault();\n    return true;\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Calculating rowId for CommandMenuItem in Grid Layout\nDESCRIPTION: Logic for automatically calculating rowId for CommandMenuItem components based on the number of columns, group context, and item index.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-combobox-tab-command-menu/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst cols = useContext(CommandMenuGridColsContext);\nconst group = useContext(CommandMenuGroupContext);\nconst rowId = getRowId(cols, props.index, group);\n\n<ComboboxItem rowId={rowId} />\n```\n\n----------------------------------------\n\nTITLE: Importing Ariakit Dialog Components in React\nDESCRIPTION: This snippet shows the import statements for Ariakit components used to create a Radix UI-like Dialog. It includes Dialog, Disclosure, Portal, and Role components.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-radix/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  Dialog,\n  DialogBackdrop,\n  DialogDismiss,\n  DialogHeading,\n  Disclosure,\n  Portal,\n  Role,\n} from \"ariakit\";\n```\n\n----------------------------------------\n\nTITLE: Creating an Additional Example with Custom Props\nDESCRIPTION: Another example file that demonstrates using a component with specific custom props.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./style.css\";\nimport { MyComponent } from \"@ariakit/react-core/my-component/my-component\";\n\nexport default function Example() {\n  return <MyComponent className=\"my-component\" customProp=\"Hello world\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ariakit Example with Custom Prop\nDESCRIPTION: Demonstrates how to update another example file to use the promoted component with a custom prop, showing how to pass additional properties to the component.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./style.css\";\nimport * as Ariakit from \"@ariakit/react\";\n\nexport default function Example() {\n  return (\n    <Ariakit.MyComponent className=\"my-component\" customProp=\"Hello world\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit with Yarn\nDESCRIPTION: Command to install the Ariakit React package using Yarn package manager.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ariakit/react\n```\n\n----------------------------------------\n\nTITLE: Styling Checkbox Disabled State\nDESCRIPTION: CSS styling for the checkbox's disabled state using aria-disabled attribute selector for accessibility-friendly disabled states.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/checkbox.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.checkbox[aria-disabled=\"true\"] {\n  opacity: 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ariakit Core Package via npm\nDESCRIPTION: Command to install the @ariakit/core package using npm. Note that this is an internal dependency that doesn't follow semantic versioning.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-core/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ariakit/core\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Deprecated Features - Before\nDESCRIPTION: Example showing usage of deprecated features including backdropProps and as props.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog backdropProps={{ className: \"backdrop\" }} />\n<Combobox as=\"textarea\" />\n<Combobox>\n  {(props) => <textarea {...props} />}\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: Using nvm to Set Node.js Version\nDESCRIPTION: Command to use nvm (Node Version Manager) to set the correct Node.js version for the project.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnvm use\n```\n\n----------------------------------------\n\nTITLE: Grid Role with Nested Elements\nDESCRIPTION: Example of valid grid role usage with nested elements and button rendering.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectPopover role=\"grid\">\n  <SelectRow>\n    <div role=\"gridcell\">\n      <SelectItem render={<button />}>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all project dependencies using npm.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Functional Updates with setState\nDESCRIPTION: Shows how to update state based on previous values using a functional update with setState.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/guide/400-component-stores/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setState(\"open\", (open) => !open);\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Grid Role Composite Widget - After\nDESCRIPTION: Updated example showing how to manually specify gridcell role after the breaking change.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectPopover role=\"grid\">\n  <SelectRow> {/* Still gets role=\"row\" */}\n    <SelectItem role=\"gridcell\">\n```\n\n----------------------------------------\n\nTITLE: Defining Radix UI-like Dialog Props in TypeScript\nDESCRIPTION: This code defines the props interface for the Radix UI-like Dialog component. It includes various optional props that mimic the Radix UI API, such as open, defaultOpen, onOpenChange, and modal.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/examples/dialog-radix/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DialogProps {\n  children: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  modal?: boolean;\n  forceMount?: boolean;\n  container?: HTMLElement | null;\n  onOpenAutoFocus?: (event: Event) => void;\n  onCloseAutoFocus?: (event: Event) => void;\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  onInteractOutside?: (event: Event) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Store Props in Component Stores\nDESCRIPTION: Example showing support for dynamic store prop updates in component store hooks, allowing the store prop to change between renders.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-react-core/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// props.store can change between renders now\nconst checkbox = useCheckboxStore({ store: props.store });\n```\n\n----------------------------------------\n\nTITLE: Displaying Astro Project Structure\nDESCRIPTION: This snippet shows the basic folder structure of an Astro project. It includes the public directory for static assets, src directory for source files, and the package.json file.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/site/README.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the local development server for the Ariakit project.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/contributing.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Overriding Composite State for Specific Methods in JavaScript\nDESCRIPTION: Example showing how to override the composite state for a specific method call without modifying the store's state. The code demonstrates passing a different activeId to the next() method.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/packages/ariakit-core/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = useCompositeStore({ defaultActiveId: \"item1\" });\nconst item3 = store.next({ activeId: \"item2\" });\n```\n\n----------------------------------------\n\nTITLE: Using Heading Component in JSX\nDESCRIPTION: Demonstrates the basic usage of the Heading component within a HeadingLevel wrapper. This structure allows for automatic hierarchy in page contents, making navigation easier for users.\nSOURCE: https://github.com/ariakit/ariakit/blob/main/components/heading.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HeadingLevel>\n  <Heading />\n</HeadingLevel>\n```"
  }
]