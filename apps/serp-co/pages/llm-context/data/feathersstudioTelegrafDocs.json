[
  {
    "owner": "feathers-studio",
    "repo": "telegraf-docs",
    "content": "TITLE: Complete Telegram Bot Implementation with Telegraf\nDESCRIPTION: A complete example showing the entire bot implementation, including imports, initialization, command handling, and launching the bot.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/001-your-first-bot.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Telegraf } from \"telegraf\";\n\nconst bot = new Telegraf(process.env.BOT_TOKEN);\n\nbot.start(ctx => {\n  return ctx.reply(`Hello ${ctx.update.message.from.first_name}!`);\n});\n\nbot.launch();\n```\n\n----------------------------------------\n\nTITLE: Initializing Telegraf Bot Instance in TypeScript\nDESCRIPTION: Code to import the Telegraf library and create a new bot instance using an environment variable for the bot token.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/001-your-first-bot.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Telegraf } from \"telegraf\";\n\nconst bot = new Telegraf(process.env.BOT_TOKEN);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Logging Telegraf Context for Telegram Bot in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Telegraf bot, log the entire context object for each update, and enable graceful stopping. It's useful for exploring the structure of different updates.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Telegraf } from \"telegraf\";\n\nconst bot = new Telegraf(process.env.BOT_TOKEN); // Your bot token \n\nbot.use(ctx => {\n  console.log(ctx);\n});\n\nbot.launch();\n\n// Enable graceful stop\nprocess.once('SIGINT', () => bot.stop('SIGINT'));\nprocess.once('SIGTERM', () => bot.stop('SIGTERM'));\n```\n\n----------------------------------------\n\nTITLE: Launching the Telegraf Bot\nDESCRIPTION: Command to start the bot and listen for updates from Telegram using long-polling.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/001-your-first-bot.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbot.launch();\n```\n\n----------------------------------------\n\nTITLE: Handling the /start Command in Telegraf\nDESCRIPTION: Implementation of a handler for the /start command that replies with a personalized greeting using the user's first name.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/001-your-first-bot.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Remember, this should ideally be written before `bot.launch()`!\n\nbot.start(ctx => {\n  return ctx.reply(`Hello ${ctx.update.message.from.first_name}!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic update listening in Telegraf with TypeScript\nDESCRIPTION: Demonstrates how to listen for different types of updates (messages, callback queries, and chat join requests) using Telegraf's event handling system. Each handler receives a context object that contains the specific update data.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/002-listen-and-respond.md#2025-04-19_snippet_0\n\nLANGUAGE: TS\nCODE:\n```\nbot.on(\"message\", ctx => {\n\t// Use ctx.message\n});\n\nbot.on(\"callback_query\", ctx => {\n\t// Use ctx.callbackQuery\n});\n\nbot.on(\"chat_join_request\", ctx => {\n\t// Use ctx.chatJoinRequest\n});\n```\n\n----------------------------------------\n\nTITLE: Responding to updates with Telegraf\nDESCRIPTION: Shows how to reply to a received message using the context object's sendMessage method. This is a basic pattern for responding to user interactions in the same chat where the update was received.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/002-listen-and-respond.md#2025-04-19_snippet_3\n\nLANGUAGE: TS\nCODE:\n```\nbot.on(message(\"text\"), async ctx => {\n\tawait ctx.sendMessage(\"Hello!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Session Middleware in Telegraf\nDESCRIPTION: Shows how to import and use the built-in session middleware in Telegraf. This adds the session object to the context, allowing data to be stored between user interactions.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Telegraf, session } from \"telegraf\";\n\nconst bot = new Telegraf(token);\nbot.use(session());\n\n// session is ready to use!\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Sessions with Redis in Telegraf\nDESCRIPTION: Shows how to configure persistent sessions using Redis as a storage backend with @telegraf/session package. This prevents session data loss when the bot restarts.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Redis } from \"@telegraf/session/redis\";\n\nconst store = Redis({\n\t// this assumes you're using a locally installed Redis daemon running at 6379\n\turl: \"redis://127.0.0.1:6379\",\n});\n\n// pass the store to session\nbot.use(session({ store }));\n```\n\n----------------------------------------\n\nTITLE: Extending Context Type with Session in TypeScript\nDESCRIPTION: Demonstrates how to augment the Telegraf Context type to include session data with TypeScript. This allows for type checking and autocompletion when working with session data.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Telegraf, session, type Context } from \"telegraf\";\nimport type { Update } from \"telegraf/types\";\n\ninterface MyContext <U extends Update = Update> extends Context<U> {\n\tsession: {\n\t\tcount: number\n\t},\n};\n\n// Telegraf constructor accepts a custom Context type\nconst bot = new Telegraf<MyContext>(token);\n// we can also set a default value for session:\nbot.use(session({ defaultSession: () => ({ count: 0 }) }));\n\nbot.use(ctx => {\n\t// ctx.session is available\n});\n```\n\n----------------------------------------\n\nTITLE: Example .env File Configuration for Telegraf\nDESCRIPTION: Sample .env file format for storing environment variables used by Telegraf bots, including port, webhook domain, and bot token. This file should be added to .gitignore to prevent credential leakage.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# .env\nPORT=3000\nWEBHOOK_DOMAIN=bot.example.com\nBOT_TOKEN=123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fmt Helper in Telegraf\nDESCRIPTION: Demonstrates the recommended approach using the fmt helper to format messages with bold, italic, and underline styles without needing to escape characters.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fmt, bold, italic, underline } from \"telegraf/format\";\n\n// Inside a handler\nctx.sendMessage(fmt`\n${bold`Bold`}, ${italic`italic`}, and ${underline`underline`}!\n`);\n```\n\n----------------------------------------\n\nTITLE: Using HTML Formatting in Telegraf\nDESCRIPTION: Shows how to send HTML formatted messages in Telegraf, both from within a handler context and directly using the bot.telegram object.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Inside a handler\nctx.replyWithHTML(\"`<b>`Bold</b>, <i>italic</i>, and <u>underlines</u>!\");\n\n// Anywhere\nbot.telegram.sendMessage(\"`<b>`Bold</b>, <i>italic</i>, and <u>underlines</u>!\", { parse_mode: \"HTML\" });\n```\n\n----------------------------------------\n\nTITLE: Advanced Nested Formatting with fmt in Telegraf\nDESCRIPTION: Shows how to use nested formatting with the fmt helper, including mentions and links.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fmt, bold, italics, mention } from \"telegraf/format\";\n\n// Inside a handler\nctx.reply(fmt`\nGround control to ${bold`${mention(\"Major Tom\", ctx.from.id)}`}\n${bold`Lock your ${italic`Soyuz hatch`}`}\nAnd ${italic`put your helmet on`}\n— ${link(\"David Bowie\", \"https://en.wikipedia.org/wiki/David_Bowie\")}\n`);\n```\n\n----------------------------------------\n\nTITLE: Base Structure of Telegraf Context Object in TypeScript\nDESCRIPTION: This code block illustrates the fundamental structure of the Context object in Telegraf, including the update, telegram, botInfo, and state properties. These properties are present in every update.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  {\n    update: {\n      update_id: number\n    },\n    telegram: {\n      token: string,\n      response: undefined /* differs based on the configuration */,\n      options: {\n        apiRoot: 'https://api.telegram.org',\n        apiMode: 'bot',\n        webhookReply: boolean,\n        agent: [Agent],\n        attachmentAgent: undefined /* differs based on the configuration */,\n        testEnv: boolean\n      }\n    },\n    botInfo: {\n      id: number /* Your bot unique id */ ,\n      is_bot: true,\n      first_name: string,\n      username: string,\n      can_join_groups: boolean,\n      can_read_all_group_messages: boolean,\n      supports_inline_queries: boolean\n    },\n    state: {}\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Telegraf filters for specific update types\nDESCRIPTION: Shows how to import and use Telegraf filters to handle specific types of messages, callback queries, and channel posts. Filters allow for more granular control over which updates are processed by each handler.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/002-listen-and-respond.md#2025-04-19_snippet_1\n\nLANGUAGE: TS\nCODE:\n```\n// import filters\nimport { message, callbackQuery, channelPost } from \"telegraf/filters\"\n\nbot.on(message(\"text\"), ctx => {\n\t// Use ctx.message.text\n});\n\nbot.on(callbackQuery(\"data\"), ctx => {\n\t// Use ctx.callbackQuery.data\n});\n\nbot.on(channelPost(\"video\"), ctx => {\n\t// Use ctx.channelPost.video\n});\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownV2 Formatting in Telegraf\nDESCRIPTION: Shows how to send Markdown formatted messages in Telegraf, both from within a handler context and directly using the bot.telegram object.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Inside a handler\nctx.replyWithMarkdownV2(\"*Bold*, _italic_, and __underlines__\\\\!\");\n\n// Anywhere\nbot.telegram.sendMessage(\"*Bold*, _italic_, and __underlines__\\\\!\", { parse_mode: \"MarkdownV2\" });\n```\n\n----------------------------------------\n\nTITLE: Complex filtering in Telegraf for combined conditions\nDESCRIPTION: Demonstrates how to filter updates based on multiple conditions simultaneously, such as forwarded text messages or photos that are part of a media group. This allows for precise handling of specific update scenarios.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/002-listen-and-respond.md#2025-04-19_snippet_2\n\nLANGUAGE: TS\nCODE:\n```\n// Listen for text messages that were forwarded\nbot.on(message(\"forward_from\", \"text\"), ctx => {\n\t// These properties are accessible:\n\tctx.message.text;\n\tctx.message.forward_from.first_name;\n});\n\n// Listen for photos messages that are part of an album (media group)\nbot.on(message(\"photo\", \"media_group_id\"), ctx => {\n\t// These properties are accessible:\n\tctx.message.photo;\n\tctx.message.media_group_id;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown for Telegraf Bots in TypeScript\nDESCRIPTION: Code to ensure that Telegraf bots gracefully close connections before the process is terminated. This should be added to the end of the bot's entry file to handle SIGINT and SIGTERM signals properly.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.once(\"SIGINT\", () => bot.stop(\"SIGINT\"));\nprocess.once(\"SIGTERM\", () => bot.stop(\"SIGTERM\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling Webhook Reply for Session Safety\nDESCRIPTION: Shows how to disable webhookReply when using Telegraf in webhook mode to ensure session safety. This is a required configuration for webhook deployments.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst bot = new Telegraf(token, { telegram: { webhookReply: false } })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Telegraf Bots in TypeScript\nDESCRIPTION: Code for safely accessing environment variables needed for Telegraf bot configuration, including port, bot token, and webhook domain. This ensures secrets are not hardcoded and validates required parameters before bot initialization.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// default to port 3000 if PORT is not set\nconst port = Number(process.env.PORT) || 3000;\n\n// assert and refuse to start bot if token or webhookDomain is not passed\nif (!process.env.BOT_TOKEN) throw new Error('\"BOT_TOKEN\" env var is required!');\nif (!process.env.WEBHOOK_DOMAIN) throw new Error('\"WEBHOOK_DOMAIN\" env var is required!');\n```\n\n----------------------------------------\n\nTITLE: Handling API Calls Safely with Sessions\nDESCRIPTION: Demonstrates proper and improper ways to handle asynchronous API calls when using sessions. Always await or return async API calls to avoid race conditions.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(\"message\", async ctx => {\n\t// ❌ BAD! You did not await ctx.reply()\n\tctx.reply(\"Hello there!\");\n\n\t// ✅ Good, you awaited your requests.\n\tawait ctx.reply(\"Hello there!\");\n\n\t// Also applies to any other async calls you may make:\n\tconst res = await fetch(API_URL);\n\n\t// Returning calls is also okay, because the promise will be returned\n\treturn ctx.sendAnimation(GOOD_MORNING_GIF);\n});\n```\n\n----------------------------------------\n\nTITLE: Session Updates Across Multiple Middlewares\nDESCRIPTION: Shows how changes to session data are managed across multiple middlewares. Updates from all middlewares will be persisted when the middleware chain completes.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.use(async (ctx, next) => {\n\tctx.session.count++; // increment once\n\treturn next(); // pass control to next middleware\n});\n\nbot.on(\"message\", async (ctx, next) => {\n\tctx.session.count++; // increment again\n});\n\n// all middleware have run. ctx.session will be written back to store\n```\n\n----------------------------------------\n\nTITLE: Session Behavior with Errors in Middleware\nDESCRIPTION: Illustrates how session data is still written even when a middleware throws an error. If rollback is needed, errors must be caught and handled explicitly.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.use(async (ctx, next) => {\n\tctx.session.count++; // increment count\n\tawait functionThatThrows();\n\treturn next();\n});\n\n// incremented count will still be written to store\n```\n\n----------------------------------------\n\nTITLE: Avoiding Race Conditions When Updating Session Data\nDESCRIPTION: Demonstrates how to properly update session data to avoid race conditions. Warns against using stale values that might have been modified by parallel requests.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/session.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(message(\"text\"), async ctx => {\n\t// reading value from session\n\tconst count = ctx.session.count;\n\n\tconst response = await fetch(API_URL, { body: count });\n\n\t// ⚠️ WARNING! You wrote stale value to session.\n\t// Another request may have updated session while you awaited fetch, be careful of that\n\tctx.session.count = count + 1;\n\n\t// ✅ Good, you wrote immediately after reading\n\tctx.session.count = ctx.session.count + 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Telegram Web App Script in HTML\nDESCRIPTION: This snippet shows how to include the Telegram Web App script in an HTML file before your own JavaScript to enable the window.Telegram.WebApp API.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/README.md#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://telegram.org/js/telegram-web-app.js\"></script>\n<script src=\"./my-script.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in MarkdownV2\nDESCRIPTION: Demonstrates how to escape special characters in Markdown formatted messages by using backslashes.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Inside a handler\nctx.replyWithMarkdownV2(\"Sending an asterisk: \\\\*\"); // sends \"Sending an asterisk: *\"\n```\n\n----------------------------------------\n\nTITLE: Using fmt with Photo Captions in Telegraf\nDESCRIPTION: Shows different ways to use fmt helpers with photo captions, demonstrating flexibility in usage patterns.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Inside a handler, different variants of using fmt and bold\nctx.replyWithPhoto(file.id, { caption: fmt`File name: ${bold(fileName)}` });\nctx.replyWithPhoto(file.id, { caption: bold`File name: ${fileName}` });\nctx.replyWithPhoto(file.id, { caption: bold(fileName) });\n```\n\n----------------------------------------\n\nTITLE: Importing Format Helpers in Telegraf\nDESCRIPTION: Shows how to import formatting helpers from the telegraf/format module.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fmt, bold } from \"telegraf/format\";\n```\n\n----------------------------------------\n\nTITLE: Sending initData for Validation in Web App\nDESCRIPTION: This JavaScript code demonstrates how to send the initData from a Mini App to a server for validation using a fetch request.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/README.md#2025-04-19_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.addEventListener(\"ready\", async function () {\n\tconst data = await fetch(\n\t\t\"/validate-init\",\n\t\t{ method: \"POST\", body: app.initData },\n\t).then(res => res.json());\n});\n```\n\n----------------------------------------\n\nTITLE: Using code Helper for Monospaced Text in Telegraf\nDESCRIPTION: Shows how to format text as inline monospaced code using the code helper.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// As a tagged template literal, allows string interpolation.\ncode`Hello, ${name}`;\n\n// As a function, accepts a single string, and does not support nesting\ncode(\"Hello, \" + name);\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Links with link Helper in Telegraf\nDESCRIPTION: Shows how to create inline links similar to HTML anchor tags using the link helper function.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nlink(\"Link text\", URL);\n```\n\n----------------------------------------\n\nTITLE: Using Text Style Helpers in Telegraf\nDESCRIPTION: Demonstrates the usage of text style helpers like bold, italic, underline, etc. both as tagged template literals and functions.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// As a tagged template literal, allows string interpolation and nested formatting\n\n// Here, only `name` is underlined\nfmt`Hello, ${underline`${name}`}`;\n\n// The entire text is bold, but `name` is also italic\nbold`Hello, ${italic`${name}`}`;\n\n// As a function, accepts a single string, and does not support nesting\nbold(\"Hello, \" + name);\n```\n\n----------------------------------------\n\nTITLE: Creating User Mentions with mention Helper in Telegraf\nDESCRIPTION: Demonstrates how to create mentions linked to a user ID using the mention helper function.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nmention(\"User\", userId);\n```\n\n----------------------------------------\n\nTITLE: Sticker Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This code snippet shows the structure of a sticker message within the Context object. It includes properties such as dimensions, emoji, set name, and file information.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  sticker: {\n    \"width\": number,\n    \"height\": number,\n    \"emoji\": string /* e.g. \"😂\" */,\n    \"set_name\": string /* The sticker pack name */,\n    \"is_animated\": boolean,\n    \"is_video\": boolean,\n    \"type\": string /* e.g. \"regular\" etc. */,\n    \"thumbnail\": {\n      \"file_id\": string /* e.g. \"AAMCBAADGQEAAgNdZRqJ2Kq_XCeyHHLUwUadueLpqc4AAhoRAAKVjflQoYfb2mrP1ZoBAAdtAAMwBA\"*/,\n      \"file_unique_id\": string /* e.g. \"AQADGhEAApWN-VBy\" */,\n      \"file_size\": number,\n      \"width\": number,\n      \"height\": number\n    },\n    \"thumb\": {\n      \"file_id\": string,\n      \"file_unique_id\": string,\n      \"file_size\": number,\n      \"width\": number,\n      \"height\": number\n    },\n    \"file_id\": string,\n    \"file_unique_id\": string,\n    \"file_size\": number\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Serverless Commands for Telegraf Bot\nDESCRIPTION: Available npm commands for managing the Telegraf bot deployment including serverless execution, release management, purging, and webhook setup.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/functions/aws-lambda/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serverless # alias for the serverless binary\nnpm run release\nnpm run purge\nnpm run set-webhook\n```\n\n----------------------------------------\n\nTITLE: Audio Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This snippet demonstrates the structure of an audio message in the Context object. It includes properties such as duration, file name, MIME type, title, and thumbnail information.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  audio: {\n    \"duration\": number /* In seconds */,\n    \"file_name\": string,\n    \"mime_type\": string /* e.g. \"audio/mpeg\" */,\n    \"title\": string,\n    \"thumbnail\": {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"thumb\": {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"file_id\": string,\n    \"file_unique_id\": string,\n    \"file_size\": number,\n  }\n```\n\n----------------------------------------\n\nTITLE: Voice Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This code block illustrates the structure of a voice message in the Context object. It includes properties such as duration, MIME type, and file identifiers.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  voice: {\n    \"duration\": number /* In seconds */,\n    \"mime_type\": string /* e.g. \"audio/mpeg\" */,\n    \"file_id\": string,\n    \"file_unique_id\": string,\n    \"file_size\": number,\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Webhook for AWS Lambda\nDESCRIPTION: Command to configure the webhook URL for the Telegram bot after deployment to AWS Lambda, using Telegraf helper function.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/functions/aws-lambda/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run set-webhook -- -t $BOT_TOKEN -D '{ \"url\": $FULL_URL_TO_FUNCTION }'\n```\n\n----------------------------------------\n\nTITLE: Photo Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This snippet shows the structure of a photo message in the Context object. It includes an array of photo objects with different sizes, representing thumbnails and the original image.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n  photo: [\n    {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Video Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This code block demonstrates the structure of a video message in the Context object. It includes properties such as duration, dimensions, file name, MIME type, and thumbnail information.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n video: {\n    \"duration\": number /* In seconds */,\n    \"width\": number,\n    \"height\": number,\n    \"file_name\": string,\n    \"mime_type\": string /* e.g. \"video/mp4\" */,\n    \"thumbnail\": {\n        \"file_id\": string ,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"thumb\": {\n        \"file_id\": string ,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"file_id\": string ,\n    \"file_unique_id\": string,\n    \"file_size\": number,\n  }\n```\n\n----------------------------------------\n\nTITLE: Text Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This snippet shows the structure of a text message in the Context object when a user interacts with the bot in a private chat. It includes message details, sender information, and chat data.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n  {\n    message: {\n      message_id: number,\n      from: {\n        \"id\": number /* User Telegram number id */,\n        \"is_bot\": boolean,\n        \"first_name\": string,\n        \"username\": string /* User Telegram id that starts with @ */,\n        \"language_code\": string /* e.g. \"en\" */\n      },\n      chat: {\n        \"id\": number,\n        \"first_name\": string,\n        \"username\": string /* User Telegram id that starts with @ */,\n        \"type\": string /* e.g. \"private\" */\n      },\n      date: number /* Unix/Epoch based date */,\n      text: string /* The message that your user sent */\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Forwarded Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This code block illustrates the structure of a forwarded message in the Context object when a user forwards a message from another user to the bot in a private chat. It includes original sender information and forwarding details.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n  {\n    message: {\n      message_id: number,\n      from: [Object] /* Stays the same in this scenario */,\n      chat: [Object] /* Stays the same in this scenario */,\n      date: number /* Unix/Epoch based date */,\n      forward_from: {\n        \"id\": number,\n        \"is_bot\": boolean,\n        \"first_name\": string,\n        \"last_name\": string,\n        \"username\": string /* User Telegram id that starts with @ */\n      },\n      forward_date: number /* Unix/Epoch based date of the message when it originally was sent */,\n      text: string,\n      entities: [\n        {\n            \"offset\": number,\n            \"length\": number,\n            \"type\": string /* e.g. \"code\" etc. */\n        }\n      ] /* Entities will only be received in case of a: mention, code etc. and are not specific to forwarding messages */\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Parsing User-Forwarded Channel Text Message Structure in Telegram Bot API\nDESCRIPTION: Illustrates the message object structure when a user forwards a text message from a channel to a Telegram bot. Contains details about the original message source, forward metadata, and text content with possible entities.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    message: {\n      message_id: number,\n      from: [Object] /* Stays the same in this scenario */,\n      chat: [Object] /* Stays the same in this scenario */,\n      date: number /* Unix/Epoch based date */,\n      forward_from_chat: {\n        \"id\": number /* Channel unique id */,\n        \"title\": string,\n        \"username\": string /* Channel id that starts with @ */,\n        \"type\": string /* e.g. \"channel\" etc. */\n      },\n      forward_from_message_id: number /* Original id of the message in the channel */,\n      forward_signature: string /* Optional: Will only be received if the channel had admins signature turned on when posting this message */,\n      forward_date: number /* Original Unix/Epoch based date of the message */,\n      text: string,\n      entities: [\n        {\n            \"offset\": number,\n            \"length\": number,\n            \"type\": string\n        }\n      ] /* Entities will only be received in case of a: mention, code etc... */\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: GIF Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This snippet illustrates the structure of a GIF message in the Context object. It includes both animation and document properties, containing details about the file and its thumbnail.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  // A GIf has both of these properties available\n\n  animation: {\n    \"mime_type\": string /* e.g. \"video/mp4\" */,\n    \"duration\": number,\n    \"width\": number,\n    \"height\": number,\n    \"thumbnail\": {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"thumb\": {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"file_id\": string,\n    \"file_unique_id\": string,\n    \"file_size\": number\n  },\n  document: {\n    \"mime_type\": string,\n    \"thumbnail\": {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"thumb\": {\n        \"file_id\": string,\n        \"file_unique_id\": string,\n        \"file_size\": number,\n        \"width\": number,\n        \"height\": number\n    },\n    \"file_id\": string,\n    \"file_unique_id\": string,\n    \"file_size\": number\n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing User-Forwarded Channel Audio Message Structure in Telegram Bot API\nDESCRIPTION: Demonstrates the message structure when a user forwards an audio message from a channel. Due to Telegram's implementation, forwarding audio messages does not retain forward-related fields like forward_from_chat or forward_date.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    message: {\n      audio: [Object] /* refer to ## Specific Telegram message objects based on the type of the message */\n      message_id: number,\n      from: [Object] /* Stays the same in this scenario */,\n      chat: [Object] /* Stays the same in this scenario */,\n      date: number /* Unix/Epoch based date */,\n      caption: string,\n      caption_entities: [Array]\n    }  \n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing User-Forwarded Channel Voice Message Structure in Telegram Bot API\nDESCRIPTION: Shows the message structure when a user forwards a voice message from a channel. Unlike audio messages, voice messages retain forward metadata including the original channel, message ID, and forward date.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    message: {\n      message_id: number,\n      from: [Object] /* Stays the same in this scenario */,\n      chat: [Object] /* Stays the same in this scenario */,\n      date: number /* Unix/Epoch based date */,\n      forward_from_chat: [Object] /* Stays the same in this scenario */ ,\n      forward_from_message_id: number /* Original id of the message in the channel */,\n      forward_signature: string /* Optional: Will only be received if the channel had admins signature turned on when posting this message */,\n      forward_date: number /* Original Unix/Epoch based date of the message */,\n      voice: [Object] /* refer to ## Specific Telegram message objects based on the type of the message */,\n      caption: string,\n      caption_entities: [Array] /* Entities will only be received in case of a: mention, code etc... */\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: File/Document Message Structure in Telegraf Context for Telegram Bot\nDESCRIPTION: This code block shows the structure of a file or document message in the Context object. It includes properties such as file name, MIME type, and file identifiers.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n  document: {\n    \"file_name\": string,\n    \"mime_type\": string /* e.g. \"application/zip\" */,\n    \"file_id\": string,\n    \"file_unique_id\": string,\n    \"file_size\": number,\n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing User-Forwarded Channel File Message Structure in Telegram Bot API\nDESCRIPTION: Details the message structure when a user forwards a file/document from a channel. Contains forward metadata along with the document object and optional caption information.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    message: {\n      message_id: number,\n      from: [Object] /* Stays the same in this scenario */,\n      chat: [Object] /* Stays the same in this scenario */,\n      date: number /* Unix/Epoch based date */,\n      forward_from_chat: [Object] /* Stays the same in this scenario */,\n      forward_from_message_id: number /* Original id of the message in the channel */,\n      forward_signature: string /* Optional: Will only be received if the channel had admins signature turned on when posting this message */,\n      forward_date: number /* Original Unix/Epoch based date of the message */,\n      text: string,\n      document: [Object] /* refer to ## Specific Telegram message objects based on the type of the message */,\n      caption: string /* Optional: Will only be received if the file has a description/caption */,\n      caption_entities: [Array] /* Entities will only be received in case of a: mention, code etc... */\n    } \n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Bot Channel Admin Initial Join Event in Telegram Bot API\nDESCRIPTION: Shows the event structure when a bot is first added as an administrator to a channel. Contains detailed information about the channel, the user who added the bot, and the permissions granted to the bot.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    my_chat_member: {\n      chat: {\n        \"id\": number /* Channel unique number id */,\n        \"title\": string /* Channel title/name */,\n        \"type\": string /* e.g. \"channel\" */\n      },\n      from: {\n        \"id\": number,\n        \"is_bot\": boolean,\n        \"first_name\": string,\n        \"username\": string,\n        \"language_code\": string /* e.g. \"en\" */\n      },\n      date: number /* Unix/Epoch based date */\n      old_chat_member: {\n        \"user\": {\n          \"id\": number,\n          \"is_bot\": boolean,\n          \"first_name\": string,\n          \"username\": string\n        },\n        \"status\": string /* e.g. \"left\" */\n      },\n      new_chat_member: {\n        \"user\": {\n          \"id\": number,\n          \"is_bot\": boolean,\n          \"first_name\": string,\n          \"username\": string\n        },\n        \"status\": string /* e.g. \"administrator\" */,\n        \"can_be_edited\": boolean,\n        \"can_manage_chat\": boolean,\n        \"can_change_info\": boolean,\n        \"can_post_messages\": boolean,\n        \"can_edit_messages\": boolean,\n        \"can_delete_messages\": boolean,\n        \"can_invite_users\": boolean,\n        \"can_restrict_members\": boolean,\n        \"can_promote_members\": boolean,\n        \"can_manage_video_chats\": boolean,\n        \"can_post_stories\": boolean,\n        \"can_edit_stories\": boolean,\n        \"can_delete_stories\": boolean,\n        \"is_anonymous\": boolean,\n        \"can_manage_voice_chats\": boolean\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using pre Helper for Code Blocks in Telegraf\nDESCRIPTION: Demonstrates how to create pre-formatted code blocks with language specification using the pre helper.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/formatting.md#2025-04-19_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// As a tagged template literal, allows string interpolation.\npre(\"TypeScript\")`Hello, ${name}`;\n\n// As a function, accepts a single string, and does not support nesting\npre(\"TS\")(\"Hello, \" + name);\n```\n\n----------------------------------------\n\nTITLE: Receiving Channel Text Message as Bot Admin in Telegram Bot API\nDESCRIPTION: Illustrates the structure of a channel_post event when a new text message is posted to a channel where the bot is an admin. May include an optional author_signature if 'Sign messages' is enabled in channel settings.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    channel_post: {\n      author_signature: string /* Optional */,\n      message_id: number,\n      sender_chat: {\n        \"id\": number,\n        \"title\": string,\n        \"type\": string\n      },\n      chat: [Object] /* Stays the same */,,\n      date: number /* Unix/Epoch based date */,\n      text: string\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Receiving Channel Media Post as Bot Admin in Telegram Bot API\nDESCRIPTION: Shows the structure of a channel_post event for media content in a channel where the bot is an admin. For multi-media posts, each item generates a separate event with a shared media_group_id to identify related content.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    channel_post: {\n      /* Everything stays the same as above but with possible additional properties like a photo, video or audio field; These fields types and properties are available in ## Specific Telegram message objects based on the type of the message */,\n      caption: string, /* Only present if the media has a caption/description */\n      media_group_id: string /* Only present if it's a multi-media post; e.g. \"13569976556660260\" */,\n    }  \n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing User-Forwarded Message That's Also a Forward in Telegram Bot API\nDESCRIPTION: Shows the message structure when a user forwards content that was already forwarded from another channel. Note that the forward_signature field will be lost in this scenario, even if the original message had it.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/context-shapes-overview.md#2025-04-19_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n  {\n    message: {\n      message_id: number,\n      from: [Object] /* Stays the same in this scenario */,\n      chat: [Object] /* Stays the same in this scenario */,\n      date: number /* Unix/Epoch based date */,\n      forward_from_chat: [Object],\n      forward_from_message_id: number /* Original message id */,\n      forward_date: number /* Unix/Epoch based date */,\n      photo: [Array] /* This forwarded message contained photos */,\n      caption: string,\n      caption_entities: [Array]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Sending Channel Message with Telegraf Bot\nDESCRIPTION: Example showing how to send a message to a Telegram channel using the Telegraf bot API. The bot must be added as an admin to the channel first.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/broadcasting.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbot.telegram.sendMessage(channelId, message);\n```\n\n----------------------------------------\n\nTITLE: Telegram Rate Limit Error Response\nDESCRIPTION: Example JSON response object received when hitting Telegram's rate limits. Contains error code 429, description, and retry_after parameter indicating wait time in seconds.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/broadcasting.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"ok\": false,\n \"error_code\": 429,\n \"description\": \"Too Many Requests: retry after 3\",\n \"parameters\": { \"retry_after\": 3 }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Telegram Web App in TypeScript\nDESCRIPTION: This example demonstrates how to use the window.Telegram.WebApp API to initialize and expand the web app within Telegram.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/README.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst app = window.Telegram.WebApp;\n\n// Call as soon as your page is ready for the user to see\napp.ready();\n\n// Expand your web app to full screen\napp.expand();\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf for Test Server in TypeScript\nDESCRIPTION: This snippet shows how to set up Telegraf to use a test server token for development purposes, enabling HTTP URLs for testing.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/README.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst bot = new Telegraf(testServerToken, { telegram: { testEnv: true } });\n```\n\n----------------------------------------\n\nTITLE: Handling Web App Data in Telegraf Bot\nDESCRIPTION: This code demonstrates how to handle data sent from a Mini App using app.sendData() in a Telegraf bot, parsing both JSON and plaintext data.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/README.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.on(message(\"web_app_data\", async ctx => {\n\t// assuming sendData was called with a JSON string\n\tconst data = ctx.webAppData.data.json();\n\t// or if sendData was called with plaintext\n\tconst text = ctx.webAppData.data.text();\n}));\n```\n\n----------------------------------------\n\nTITLE: Answering Web App Query in Telegraf\nDESCRIPTION: This snippet shows how to use answerWebAppQuery to respond to a Mini App query using the query_id from validated initData.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/README.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nbot.telegram.answerWebAppQuery(validatedData.query_id, {\n\tid: \"0\",\n\ttype: \"article\",\n\ttitle: \"Hello Mini App!\",\n\tinput_message_content: {\n\t\tmessage_text: \"This message was sent from answerWebAppQuery\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Validating initData on Server in TypeScript\nDESCRIPTION: This server-side TypeScript code validates the initData received from a Mini App by computing and comparing HMAC-SHA256 hashes.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/README.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createHmac } from \"node:crypto\";\n\nfunction HMAC_SHA256(key: string | Buffer, secret: string) {\n  return createHmac(\"sha256\", key).update(secret);\n}\n\nfunction getCheckString(data: URLSearchParams) {\n\tconst items: [k: string, v: string][] = [];\n\n\t// remove hash\n\tfor (const [k, v] of data.entries()) if (k !== \"hash\") items.push([k, v]);\n\n\treturn items.sort(([a], [b]) => a.localeCompare(b)) // sort keys\n\t\t.map(([k, v]) => `${k}=${v}`) // combine key-value pairs\n\t\t.join(\"\\n\");\n}\n\napp.post(\"/validate-init\", (req, res) => {\n\tconst data = new URLSearchParams(req.body);\n\n\tconst data_check_string = getCheckString(data);\n\tconst secret_key = HMAC_SHA256(\"WebAppData\", process.env.BOT_TOKEN!).digest();\n\tconst hash = HMAC_SHA256(secret_key, data_check_string).digest(\"hex\");\n\n\tif (hash === data.get(\"hash\"))\n\t\t// validated!\n\t\treturn res.json(Object.fromEntries(data.entries()));\n\n\treturn res.status(401).json({});\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Serving Telegram Mini App Example\nDESCRIPTION: Commands for installing dependencies and serving the Telegram Mini App example locally using pnpm package manager.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/examples/mini-apps/serve/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npnpm install\npnpm serve\n```\n\n----------------------------------------\n\nTITLE: Setting up a Telegram Bot Project with npm\nDESCRIPTION: Commands to create a new project folder, initialize dependencies, and install Telegraf and TypeScript for a Telegram bot project.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/001-your-first-bot.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# create folder\nmkdir my-first-bot\n\n# enter folder\ncd my-first-bot\n\n# install Telegraf\nnpm install telegraf\n\n# install typescript as a dev-dependency (optional, but recommended)\nnpm install --dev typescript\n\n# initialise a typescript config\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Running the Telegram Bot\nDESCRIPTION: Commands to compile TypeScript code and run the bot using Node.js.\nSOURCE: https://github.com/feathers-studio/telegraf-docs/blob/master/guide/001-your-first-bot.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Compile first, if you're using TS\nnpx tsc\n\n# Run the bot\nnode index.js\n```"
  }
]