[
  {
    "owner": "spring-projects",
    "repo": "spring-statemachine",
    "content": "TITLE: Running Project Tests\nDESCRIPTION: Gradle commands to clean and build the project, running all tests before submitting a pull request.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd spring-statemachine\n./gradlew clean build\n```\n\n----------------------------------------\n\nTITLE: Visualizing State Machine Workflow with ASCII Diagram\nDESCRIPTION: This ASCII diagram represents a state machine workflow, possibly for a task execution system. It includes states like READY, TASKS (with subtasks T1, T2, T3), CHOICE, and ERROR handling states. The diagram shows transitions between states, including forks and joins for parallel task execution.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/tasks/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n+----------------------------------------------------------------------------+\n|                                      SM                                    |\n+----------------------------------------------------------------------------+\n|                                                                            |\n|                                  +---------------------------+             |\n|                          FORK    |           TASKS           |    JOIN     |\n|                           |      +---------------------------+     |       |\n|      +-------------+ RUN  |      |      +------------+       |     |       |\n|  *-->|    READY    |----->|----->|  *-->|     T1     |-->X   |---->|----+  |\n|      +-------------+      |      |      +------------+       |     |    |  |\n|          ^    ^           |      |===========================|     |    |  |\n|          |    |                  |      +------------+       |          |  |\n|          |    |                  |  *-->|     T2     |-->X   |          |  |\n|          |    |                  |      +------------+       |          |  |\n|          |    |                  |===========================|          |  |\n|          |    |                  |      +------------+       |          |  |\n|          |    |                  |  *-->|     T3     |-->X   |          |  |\n|          |    |                  |      +------------+       |          |  |\n|          |    |                  +---------------------------+          |  |\n|          |    |                                                         |  |\n|          |    |                    [OK]  +------------+                 |  |\n|          |    +--------------------------|   CHOICE   |<----------------+  |\n|          |                               +------------+                    |\n|          |                                      |                          |\n|          |                                      | [ERROR]                  |\n|          |                                      v                          |\n|          |             +-----------------------------------------------+   |\n|          |             |                      ERROR                    |   |\n|          |             +-----------------------------------------------+   |\n|          |  CONTINUE   |     +-------------+ FALLBACK +-------------+  |   |\n|          +-------------| *-->|  AUTOMATIC  |--------->|    MANUAL   |  |   |\n|                        |     |             |          |             |  |   |\n|                        |     |             |          |     FIX     |  |   |\n|                        |     |             |          |   +-----+   |  |   |\n|                        |     |             |          |   |     |   |  |   |\n|                        |     |             |          |   |     v   |  |   |\n|                        |     +-------------+          +-------------+  |   |\n|                        +-----------------------------------------------+   |\n|                                                                            |\n+----------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Documenting Media Playback Events - Video.js - Markdown\nDESCRIPTION: This snippet shows Markdown documentation for core Video.js player events, each with a brief description of when it fires (e.g., playback starting or pausing) and source code references. Dependencies include familiarity with Video.js event architecture and access to referenced source files. It documents expected event lifecycles as used in custom player integrations or extensions, and outlines which component or player action triggers each event.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n### loadedmetadata `EVENT`\n> Fired when the player has initial duration and dimension information\n\n_defined in_: [src/js/player.js#L404](https://github.com/videojs/video.js/blob/master/src/js/player.js#L404)\n\n---\n\n### loadstart `EVENT`\n> Fired when the user agent begins looking for media data\n\n_defined in_: [src/js/player.js#L360](https://github.com/videojs/video.js/blob/master/src/js/player.js#L360)\n\n---\n\n### pause `EVENT`\n> Fired whenever the media has been paused\n\n_defined in_: [src/js/player.js#L482](https://github.com/videojs/video.js/blob/master/src/js/player.js#L482)\n\n---\n\n### play `EVENT`\n> Fired whenever the media begins or resumes playback\n\n_defined in_: [src/js/player.js#L422](https://github.com/videojs/video.js/blob/master/src/js/player.js#L422)\n\n---\n\n### progress `EVENT`\n> Fired while the user agent is downloading media data\n\n_defined in_: [src/js/player.js#L500](https://github.com/videojs/video.js/blob/master/src/js/player.js#L500)\n\n---\n\n### resize `EVENT`\n> Fired when the width and/or height of the component changes\n\n_inherited from_: [src/js/component.js#L863](https://github.com/videojs/video.js/blob/master/src/js/component.js#L863)\n\n---\n\n### seeked `EVENT`\n> Fired when the player has finished jumping to a new time\n\n_defined in_: [src/js/player.js#L455](https://github.com/videojs/video.js/blob/master/src/js/player.js#L455)\n\n---\n\n### seeking `EVENT`\n> Fired whenever the player is jumping to a new time\n\n_defined in_: [src/js/player.js#L447](https://github.com/videojs/video.js/blob/master/src/js/player.js#L447)\n\n---\n\n### timeupdate `EVENT`\n> Fired when the current playback position has changed\n> \n> During playback this is fired every 15-250 milliseconds, depnding on the\n> playback technology in use.\n\n_defined in_: [src/js/player.js#L494](https://github.com/videojs/video.js/blob/master/src/js/player.js#L494)\n\n---\n\n### volumechange `EVENT`\n> Fired when the volume changes\n\n_defined in_: [src/js/player.js#L545](https://github.com/videojs/video.js/blob/master/src/js/player.js#L545)\n\n---\n\n### waiting `EVENT`\n> Fired whenever the media begins wating\n\n_defined in_: [src/js/player.js#L431](https://github.com/videojs/video.js/blob/master/src/js/player.js#L431)\n\n---\n\n```\n\n----------------------------------------\n\nTITLE: ASCII State Machine Diagram\nDESCRIPTION: ASCII art diagram depicting a state machine with two states and bidirectional transitions. Shows STATE1 and STATE2 connected by EVENT1 (forward) and EVENT2 (backward) transitions, with entry/exit points indicated for each state.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/docs/src/statecharts/statechart0.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n+----------------------------------------+\n|                    SM                  |\n+----------------------------------------+\n|                                        |\n|     +----------+          +----------+ |\n| *-->|  STATE1  |          |  STATE2  | |\n|     +----------+          +----------+ |\n|     | entry/   |          | entry/   | |\n|     | exit/    |          | exit/    | |\n|     |          |--EVENT1->|          | |\n|     |          |          |          | |\n|     |          |<-EVENT2--|          | |\n|     |          |          |          | |\n|     +----------+          +----------+ |\n|                                        |\n+----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining State Machine Structure in UML-like Diagram\nDESCRIPTION: This diagram defines a state machine structure using a UML-like notation. It includes states, transitions, entry/exit actions, and conditional transitions. The machine has a hierarchical structure with nested states and complex transition logic.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: uml\nCODE:\n```\n+-----------------------------------------------------------------------------------------------+\n|                                                 S0                                            |\n+-----------------------------------------------------------------------------------------------+\n|  entry/                                                                                       |\n|  exit/                                                                                        |\n|  H/[foo.equals(0)];                                                                           |\n|                                                                                               |\n|            +--------------------------+      +--------------------------------------------+   |\n|        *-->|            S1            |      |                     S2                     |   |\n|            +--------------------------+      +--------------------------------------------+   |\n|            | entry/                   |  C   | entry/                                     |   |\n|      D     | exit/                    |----->| exit/                                      |   |\n|<-----------| H/                       |      | H/[foo.equals(1)];                         |   |\n|            |                          |      |                                            |   |\n|            |     +----------------+   |  K   |      +------------------------------+      |   |\n|            | *-->|      S11       |   |<-----|  *-->|             S21              |      |   |\n|            |     +----------------+   |      |      +------------------------------+      |   |\n|            |     | entry/         |   |  F   |      | entry/                       |      |   |\n|            |     | exit/          |<---------|      | exit/                        |      |   |\n|            |     |                |   |      |      |       +--------------+       |      |   |\n|            |  B  |                |   |      |      |   *-->|     s211     |       |      |   |\n|            |---->|       J        |   |      |   F  |       +--------------+   G   |      |   |\n|            |     |   +-------+    |   |-------------------->| entry/       |----------------->|\n|            |  +--|   |       |    |   |      |   G  |       | exit/        |       |      |   |\n|            |  |  |   |       v    |------------------------>|              |       |  E   |   |\n|            |  |  +----------------+   |      |      |   B   |              |<-----------------||\n|            |  |                       |      |      |------>|              |       |      |   |\n|            |  |  +----------------+   |      |      |       |              |   D   |      |   |\n|            | I|  |      S12       |   |      |      |    +--|              |------>|      |   |\n|            |  |  +----------------+   |      |      |    |  +--------------+       |      |   |\n|            |  |  | entry/         |   |      |      |    |                         |      |   |\n|            |  |  |   distAction() |   |      |      |   I|  +--------------+       |      |   |\n|            |  |  | exit/          |   |      |      |    |  |     s212     |       |      |   |\n|            |  +->|                |   |      |      |    |  +--------------+       |      |   |\n|         +--|     |                |   |      |      |    +->| entry/       |       |      |   |\n|         |  |     |                |   |  I   |      |       | exit/        |       |      |   |\n|         |  |     |                |------------------------>|              |       |      |   |\n|        A|  |     |                |   |      |      |       +--------------+       |      |   |\n|         |  |     |                |   |      |      |                              |      |   |\n|         |  |     +----------------+   |      |      +------------------------------+      |   |\n|         +->|                          |      |                                            |   |\n|            +--------------------------+      +--------------------------------------------+   |\n| A[foo.equals(1)];                                                                             |\n+-----------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Washing Machine State Diagram - ASCII Art Representation\nDESCRIPTION: Visual representation of a hierarchical state machine showing the main states (RUNNING, POWEROFF) and nested states (WASHING, RINSING, DRYING) of a washing machine control system. Includes transitions for RINSE, DRY, CUTPOWER, RESTOREPOWER events and a history state for state preservation.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/washer/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+--------------------------------------------------------------------------------------+\n|                                                                                      |\n+--------------------------------------------------------------------------------------+\n|                                                                                      |\n|      +--------------------------------------------------------------------+ STOP     |\n|  *-->|                               RUNNING                              |------>X  |\n|      +--------------------------------------------------------------------+          |\n|      |                                                                    |          |\n|      |      +-------------+       +-------------+       +-------------+   |          |\n|      |  *-->|   WASHING   | RINSE |   RINSING   |  DRY  |   DRYING    |   |          |\n|      |      |             |------>|             |------>|             |   |          |\n|      |      |             |       |             |       |             |   |          |\n|      |      +-------------+       +-------------+       +-------------+   |          |\n|      |                                                                    |          |\n|      |           +-------+                                                |          |\n|      |           |HISTORY|                                                |          |\n|      |           +-------+                                                |          |\n|      |            ^                                                       |          |\n|      +------------|-------------------------------------------------------+          |\n|                   |                  |                                               |\n|                   |RESTOREPOWER      |CUTPOWER                                       |\n|                   |                  |                                               |\n|            +-------------+           |                                               |\n|            |  POWEROFF   |           |                                               |\n|            |             |<----------+                                               |\n|            |             |                                                           |\n|            +-------------+                                                           |\n|                                                                                      |\n+--------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Video.js Plugin\nDESCRIPTION: Example of a basic Video.js plugin that logs a message when playback starts. The plugin takes an options object as parameter and uses the player instance as context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction examplePlugin(options) {\n  this.on('play', function(e) {\n    console.log('playback has started!');\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: State Machine Diagram in ASCII Art\nDESCRIPTION: An ASCII art representation of a state machine with states S0 through S3 and transitions triggered by events A, B, C, E. The diagram includes the initial state marked with an asterisk, and shows both forward transitions and some return paths labeled with event C.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/security/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+--------------------------------------------------------------------------+\n|                                   SM                                     |\n+--------------------------------------------------------------------------+\n|                                                                          |\n|     +-----------+   A   +-----------+   B   +--------+   E   +--------+  |\n| *-->|    S0     |------>|    S1     |------>|   S2   |------>|   S3   |  |\n|     |           |       |           |       |        |       |        |  |\n|     |     D     |       |     F     |       |        |       |        |  |\n|     | +-------+ |       | +-------+ |       |        |       |        |  |\n|     | |       | |       | |       | |       |        |       |        |  |\n|     | |       v |       | |       v |       |        |       |        |  |\n|     +-----------+       +-----------+       +--------+       +--------+  |\n|        ^    ^                                    |                |      |\n|        |    |                C                   |                |      |\n|        |    +------------------------------------+                |      |\n|        |                              C                           |      |\n|        +----------------------------------------------------------+      |\n|                                                                          |\n+--------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Video.js Data Setup Configuration\nDESCRIPTION: Setting video player options using the data-setup attribute with JSON format.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video data-setup='{ \"controls\": true, \"autoplay\": false, \"preload\": \"auto\" }'...>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Git commands for configuring user name and email globally or locally for the repository.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.name \"First Last\"\ngit config --global user.email user@mail.com\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd spring-statemachine\ngit config user.name \"First Last\"\ngit config user.email user@mail.com\n```\n\n----------------------------------------\n\nTITLE: Initializing Video.js Player in JavaScript\nDESCRIPTION: Demonstrates how to create a new Video.js player instance using the vjs function. This is the primary way to initialize a player in Video.js.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myPlayer = vjs('my_video_id');\n```\n\n----------------------------------------\n\nTITLE: Adding Timed Text Tracks to Video.js - HTML\nDESCRIPTION: This HTML snippet demonstrates attaching various video sources and a timed text track (captions) to a Video.js player. It requires loading the Video.js library and a correctly formatted WebVTT file at the provided URL. Key parameters include multiple <source> elements for video formats and a <track> element where 'kind', 'src', 'srclang', 'label', and 'default' attributes configure the captions. Inputs are the media and track URLs; the output is a video element with captions support on compatible browsers. All elements must be properly nested, and the 'track' tag should appear after sources. This setup is constrained by browser and Video.js implementation support for track formats.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/tracks.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video id=\\\"example_video_1\\\" class=\\\"video-js vjs-default-skin\\\"  \\n  controls preload=\\\"auto\\\" width=\\\"640\\\" height=\\\"264\\\"  \\n  data-setup='{\"example_option\":true}'>  \\n <source src=\\\"https://vjs.zencdn.net/oceans-clip.mp4\\\" type='video/mp4' />  \\n <source src=\\\"https://vjs.zencdn.net/oceans-clip.webm\\\" type='video/webm' />  \\n <source src=\\\"https://vjs.zencdn.net/oceans-clip.ogv\\\" type='video/ogg' />  \\n\\n <track kind=\\\"captions\\\" src=\\\"https://example.com/path/to/captions.vtt\\\" srclang=\\\"en\\\" label=\\\"English\\\" default>\\n\\n</video>\n```\n\n----------------------------------------\n\nTITLE: Default Video.js Component Structure\nDESCRIPTION: Shows the complete default component hierarchy of a Video.js player, including all controls and their nested relationships.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/components.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPlayer\n    PosterImage\n    TextTrackDisplay\n    LoadingSpinner\n    BigPlayButton\n    ControlBar\n        PlayToggle\n        FullscreenToggle\n        CurrentTimeDisplay\n        TimeDivider\n        DurationDisplay\n        RemainingTimeDisplay\n        ProgressControl\n            SeekBar\n              LoadProgressBar\n              PlayProgressBar\n              SeekHandle\n        VolumeControl\n            VolumeBar\n                VolumeLevel\n                VolumeHandle\n        MuteToggle\n```\n\n----------------------------------------\n\nTITLE: Adding Child Components to Video.js Player\nDESCRIPTION: Shows how to add a new control component to a Video.js player instance using the addChild method.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/components.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmyPlayer.addChild('BigPlayButton');\n```\n\n----------------------------------------\n\nTITLE: Connecting to STOMP broker over WebSocket\nDESCRIPTION: Creates a STOMP client connection to a broker using a WebSocket connection by specifying the WebSocket URL.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = Stomp.overWS('ws://localhost:61614');\n```\n\n----------------------------------------\n\nTITLE: Setting Video Source in Video.js\nDESCRIPTION: Demonstrates different ways to set video sources including single URL, source object with type information, and array of source objects for cross-browser compatibility.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmyPlayer.src(\"https://www.example.com/path/to/video.mp4\");\n\nmyPlayer.src({ type: \"video/mp4\", src: \"https://www.example.com/path/to/video.mp4\" });\n\nmyPlayer.src([\n  { type: \"video/mp4\", src: \"https://www.example.com/path/to/video.mp4\" },\n  { type: \"video/webm\", src: \"https://www.example.com/path/to/video.webm\" },\n  { type: \"video/ogg\", src: \"https://www.example.com/path/to/video.ogv\" }\n]);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Video.js Initialization\nDESCRIPTION: JavaScript code for manually initializing Video.js player when video elements are loaded dynamically.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/setup.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvideojs(\"example_video_1\", {}, function(){\n  // Player (this) is initialized and ready.\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideojs(document.getElementById('example_video_1'), {}, function() {\n  // This is functionally the same as the previous example.\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideojs(document.getElementsByClassName('awesome_video_class')[0], {}, function() {\n  // You can grab an element by class if you'd like, just make sure\n  // if it's an array that you pick one (here we chose the first).\n});\n```\n\n----------------------------------------\n\nTITLE: Shopping State Machine ASCII Diagram\nDESCRIPTION: ASCII art representation of a state machine showing shopping workflow states and transitions. Shows states for HOME, ITEMS, CART and PAYMENT with transitions for viewing (VIEW_I, VIEW_C, VIEW_P), item management (ADD, DEL), payment (PAY) and reset functionality.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/eventservice/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+---------------------------------------------------------------------------------------------------------------------+\n|                                                     SM                                                              |\n+---------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                     |\n|     +------------------+  VIEW_I  +------------------+  VIEW_C  +------------------+  VIEW_P  +------------------+  |\n| *-->|       HOME       |--------->|       ITEMS      |--------->|       CART       |--------->|      PAYMENT     |  |\n|     |                  |          |                  |          |                  |          |                  |  |\n|     |                  |          |       ADD        |          |       DEL        |          |       PAY        |  |\n|     |                  |          |  +------------+  |          |  +------------+  |          |  +------------+  |  |\n|     |                  |  RESET   |  |            |  |  VIEW_I  |  |            |  |  VIEW_C  |  |            |  |  |\n|     |                  |<---------|  |            v  |<---------|  |            v  |<---------|  |            v  |  |\n|     +------------------+          +------------------+          +------------------+          +------------------+  |\n|          ^       ^                              ^                     |                             |       |       |\n|          |       |              RESET           |                     |                             |       |       |\n|          |       +----------------------------------------------------+                             |       |       |\n|          |                                      |                           VIEW_I                  |       |       |\n|          |             RESET                    +---------------------------------------------------+       |       |\n|          +--------------------------------------------------------------------------------------------------+       |\n|                                                                                                                     |\n+---------------------------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Connecting to STOMP broker over TCP\nDESCRIPTION: Creates a STOMP client connection to a broker using a TCP socket by specifying host and port.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = Stomp.overTCP('localhost', 61613);\n```\n\n----------------------------------------\n\nTITLE: Handling Events on Video.js Components\nDESCRIPTION: Shows how to add event listeners to components and trigger custom events. Components in Video.js are event emitters.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Component.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbutton.on('click', function(){\n  console.log('Button Clicked!');\n});\n\nbutton.trigger('customevent');\n```\n\n----------------------------------------\n\nTITLE: Adding Child Components with Options in Video.js\nDESCRIPTION: Demonstrates how to add a child component with custom options, including nested child components and their options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Component.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Video.js Player with JavaScript\nDESCRIPTION: Creates a Video.js player instance by referencing an existing video element by its ID.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar myPlayer = videojs('example_video_1');\n```\n\n----------------------------------------\n\nTITLE: Extending Video.js Component Classes\nDESCRIPTION: Demonstrates the inheritance chain for Video.js UI components, showing how Control, Button, and PlayToggle classes extend from the base Component class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/components.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvideojs.Control = videojs.Component.extend();\nvideojs.Button = videojs.Control.extend();\nvideojs.PlayToggle = videojs.Button.extend();\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper for Spring Statemachine Testing\nDESCRIPTION: Sample Zookeeper configuration file (zoo.cfg) for setting up a distributed cluster across 5 nodes. The configuration defines the Zookeeper ensemble with tickTime, limits, data directory, client port, and server information.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/jepsen/spring-statemachine-jepsen/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/var/lib/zookeeper\nclientPort=2181\nserver.1=0.0.0.0:2888:3888\nserver.2=n2:2888:3888\nserver.3=n3:2888:3888\nserver.4=n4:2888:3888\nserver.5=n5:2888:3888\n```\n\n----------------------------------------\n\nTITLE: Defining Default API Methods for MediaTechController in Video.js\nDESCRIPTION: This code snippet defines a list of default API methods that should be implemented by any MediaTechController in Video.js. These methods are essential for controlling media playback and interacting with the media source.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.media.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nApiMethods\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Muted State in JavaScript\nDESCRIPTION: This method gets the current muted state or turns mute on or off. It returns a boolean when getting the state and the player instance when setting.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// get\nvar isVolumeMuted = myPlayer.muted();\n\n// set\nmyPlayer.muted(true); // mute the volume\n```\n\n----------------------------------------\n\nTITLE: Specifying Playback Technology Order via HTML data-setup Attribute\nDESCRIPTION: Demonstrates how to configure the preferred order of playback technologies (e.g., HTML5, Flash, custom ones) directly within the HTML `<video>` tag using the `data-setup` attribute. This attribute takes a JSON string where the `techOrder` property is an array listing technology names in order of preference.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/tech.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video data-setup='{\"techOrder\": [\"html5\", \"flash\", \"other supported tech\"]}'\n```\n\n----------------------------------------\n\nTITLE: Defining Video Sources with Prioritized RTMP for Flash Streaming in HTML\nDESCRIPTION: Provides an example of using multiple `<source>` tags within a `<video>` element to define different video formats and delivery methods. It demonstrates how to include an RTMP streaming source (`type=\"rtmp/mp4\"`) and place it *before* standard HTTP progressive download sources (`type=\"video/mp4\"`, `type=\"video/webm`) to force the Flash player to use streaming playback. The RTMP `src` attribute requires specific formatting, separating the connection and stream strings, often with an `&`.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/tech.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<source src=\"rtmp://your.streaming.provider.net/cfx/st/&mp4:path/to/video.mp4\" type=\"rtmp/mp4\">\n<source src=\"https://your.static.provider.net/path/to/video.mp4\" type=\"video/mp4\">\n<source src=\"https://your.static.provider.net/path/to/video.webm\" type=\"video/webm\">\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Class Extension in JavaScript using CoreObject\nDESCRIPTION: Demonstrates basic class inheritance by extending the CoreObject class to create Animal and Horse classes.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CoreObject.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Animal = CoreObject.extend();\nvar Horse = Animal.extend();\n```\n\n----------------------------------------\n\nTITLE: Configuring Playback Technology Order via Video.js JavaScript API\nDESCRIPTION: Shows how to set the playback technology order programmatically using the `videojs` function when initializing a player instance. The second argument passed to the function is an options object, where the `techOrder` property specifies the preferred technologies as an array of strings. \"videoID\" should be replaced with the actual ID of the target video element.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/tech.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvideojs(\"videoID\", {\n  techOrder: [\"html5\", \"flash\", \"other supported tech\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Media Player State Machine Diagram using ASCII Art\nDESCRIPTION: This diagram depicts a hierarchical state machine for a media player with two main states: BUSY and IDLE. The BUSY state contains PLAYING and PAUSED sub-states, while the IDLE state contains CLOSED and OPEN sub-states. Transitions between states are triggered by events like PLAY, PAUSE, STOP, EJECT, and LOAD.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/cdplayer/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+-------------------------------------------------------------------------------+\n|                                        SM                                     |\n+-------------------------------------------------------------------------------+\n|                                                                               |\n|        +---------------------------+           +---------------------------+  |\n|        |           BUSY            |       *-->|           IDLE            |  |\n|        +---------------------------+           +---------------------------+  |\n|        | entry/                    |           | entry/                    |  |\n|        | exit/                     |           | exit/                     |  |\n|        |        +------------+     |           |        +------------+     |  |\n|        |    *-->|  PLAYING   |     |           |    *-->|  CLOSED    |     |  |\n|        |        +------------+     |   STOP    |        +------------+     |  |\n|        |        | entry/     |     |---------->|        | entry/     |     |  |\n|        |        | exit/      |     |           |  PLAY  | exit/      |     |  |\n|        |        |            |     |           |  +---->|            |     |  |\n|        |        |         +--|     |           |  |     |            |     |  |\n|        |        |         |  |     |           |  |     |            |     |  |\n|        |        | timer/1s|  |     |           |  |     |            |     |  |\n|        |        |         |  |     |           |  |     |            |     |  |\n|        |        |         +->|     |           |  |     |            |     |  |\n|        |        |            |     |           |  |     |            |     |  |\n|        |     +--|            |<-+  |           |  |  +--|            |<-+  |  |\n|        |     |  +------------+  |  |           |  |  |  +------------+  |  |  |\n|        |     |                  |  |   PLAY    |  |  |                  |  |  |\n|        |     |PAUSE             |  |<----------|  |  |EJECT             |  |  |\n|        |     |                  |  |           |  |  |                  |  |  |\n|        |     |             PAUSE|  |           |  |  |             EJECT|  |  |\n|        |     |                  |  |           |  |  |                  |  |  |\n|        |     |  +------------+  |  |           |  |  |  +------------+  |  |  |\n|        |     |  |  PAUSED    |  |  |           |  |  |  |  OPEN      |  |  |  |\n|        |     |  +------------+  |  |           |  |  |  +------------+  |  |  |\n|        |     |  | entry/     |  |  |           |  |  |  | entry/     |  |  |  |\n|        |     +->| exit/      |--+  |           |  |  +->| exit/      |--+  |  |\n|        |        |            |     |           |  |     |            |     |  |\n|        |        |            |     |           |  |     |         +--|     |  |\n|        |        |            |     |           |  |     |         |  |     |  |\n|        |        |            |     |           |  +-----|     LOAD|  |     |  |\n|        |        |            |     |           |        |         |  |     |  |\n|        |        |            |     |           |        |         +->|     |  |\n|        |        |            |     |           |        |            |     |  |\n|        |        +------------+     |           |        +------------+     |  |\n|        |                           |           |                           |  |\n|        +---------------------------+           +---------------------------+  |\n|                                                                               |\n+-------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Basic Video.js Player Implementation\nDESCRIPTION: Standard HTML5 video tag setup with Video.js classes and attributes for basic player functionality.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/setup.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video id=\"example_video_1\" class=\"video-js vjs-default-skin\"\n  controls preload=\"auto\" width=\"640\" height=\"264\"\n  poster=\"https://vjs.zencdn.net/oceans-clip.png\"\n  data-setup='{\"example_option\":true}'>\n <source src=\"https://vjs.zencdn.net/oceans-clip.mp4\" type='video/mp4' />\n <source src=\"https://vjs.zencdn.net/oceans-clip.webm\" type='video/webm' />\n <source src=\"https://vjs.zencdn.net/oceans-clip.ogv\" type='video/ogg' />\n <p class=\"vjs-no-js\">To view this video please enable JavaScript, and consider upgrading to a web browser that <a href=\"https://videojs.com/html5-video-support/\" target=\"_blank\">supports HTML5 video</a></p>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Initializing Video.js Player with HTML\nDESCRIPTION: Sets up a video element with the data-setup attribute to tell Video.js to automatically create a player instance when the library loads.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video id=\"example_video_1\" data-setup='{}' controls>\n  <source src=\"my-source.mp4\" type=\"video/mp4\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Video.js Player Control Examples\nDESCRIPTION: Shows usage examples of basic video player controls like checking pause state and getting current poster image.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = myPlayer.paused();\nvar isPlaying = !myPlayer.paused();\n\nvar currentPoster = myPlayer.poster();\nmyPlayer.poster('https://example.com/myImage.jpg');\n```\n\n----------------------------------------\n\nTITLE: Merging Options for Child Components in Video.js - JavaScript\nDESCRIPTION: Demonstrates the use of the options() method to deeply merge option objects for Video.js components, particularly helpful for configuring child components. Shows how object properties are recursively merged and how a child can be disabled by passing null. Requires the Video.js framework and the vjs.obj.deepMerge utility. Takes an object of option values and returns a new merged result.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuButton.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\\n  children: {\\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\\n    'childTwo': {},\\n    'childThree': {}\\n  }\\n}\\nnewOptions = {\\n  children: {\\n    'childOne': { 'foo': 'baz', 'abc': '123' }\\n    'childTwo': null,\\n    'childFour': {}\\n  }\\n}\\n\\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Text Track Activation Method\nDESCRIPTION: Method to activate cue tracking for text tracks that are either showing or hidden.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nactivate()\n> Turn on cue tracking. Tracks that are showing OR hidden are active.\n```\n\n----------------------------------------\n\nTITLE: Initializing Control Listeners in Video.js Media Component\nDESCRIPTION: Sets up click and touch listeners for the playback element. Handles different interactions for desktop and mobile devices, toggling playback and controls visibility based on user activity.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ninitControlsListeners()\n```\n\n----------------------------------------\n\nTITLE: Initializing Video.js Player in JavaScript\nDESCRIPTION: This snippet demonstrates how to reference a Video.js player object using the video tag's ID. It's essential for accessing the player's API functions.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar myPlayer = videojs('example_video_1');\n```\n\n----------------------------------------\n\nTITLE: Executing Code When Video.js Player is Ready\nDESCRIPTION: This code shows how to use the player's 'ready' function to ensure API calls are made only after the player is fully initialized. It includes an example of starting video playback.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvideojs(\"example_video_1\").ready(function(){\n  var myPlayer = this;\n\n  // EXAMPLE: Start playing the video.\n  myPlayer.play();\n\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Attribute Usage\nDESCRIPTION: Example of correct way to set boolean attributes in HTML5 video tag.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<video controls ...>\n```\n\n----------------------------------------\n\nTITLE: Initializing Control Listeners for Video Playback in JavaScript\nDESCRIPTION: Sets up click and touch listeners for video playback and control toggling. Handles different behaviors for desktop and mobile devices, including inactivity timeouts.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Flash.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ninitControlsListeners()\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Component Options in VideoJS\nDESCRIPTION: Demonstrates how to merge component options deeply, allowing for easy override of child component options while preserving default values.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Component.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Events on a Video.js Component - JavaScript\nDESCRIPTION: Demonstrates how to manually fire an event on a Video.js component using the trigger() method. Accepts a string event type or an event object with a type property. Useful for custom event handling and integration with other systems. Calls return the component instance (for chaining).\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuButton.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyComponent.trigger('eventName');\\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Creating Components with Child Arrays in Video.js\nDESCRIPTION: Demonstrates how to create a component instance with an array of child components, either as string names or objects with additional options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Component.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Media Controller in Video.js\nDESCRIPTION: Initialization method for the HTML5 media controller. It takes a player instance, options object, and a ready callback function.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninit( player, options, ready )\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in VideoJS Component\nDESCRIPTION: Example showing how to add an event listener to a VideoJS player component. The listener function is called with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Button.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding a Button Component in Video.js\nDESCRIPTION: Demonstrates how to add a button component as a child of the player. Shows the JavaScript code to create the button and the resulting HTML structure.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Component.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// adding a button to the player\nvar button = player.addChild('button');\nbutton.el(); // -> button element\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"video-js\">\n  <div class=\"vjs-button\">Button</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Triggering Events on Video.js Components (JavaScript)\nDESCRIPTION: Shows how to trigger a custom event on a Video.js component's element. Two usage examples are provided: one with an event type string and one with an event object containing a type. Requires a component instance; input can be a string, object with a 'type' key, or an Event. Triggers an event handler associated with the specified type. Returns the component instance, supporting method chaining.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Slider.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyComponent.trigger('eventName');\\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in VideoJS\nDESCRIPTION: The parse method converts a JSON string into a JavaScript object or array. It accepts the JSON string to parse and an optional reviver function that can transform the parsing results.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.JSON.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nparse( text, [reviver] )\n```\n\n----------------------------------------\n\nTITLE: Triggering Events with vjs.Component#trigger in JavaScript\nDESCRIPTION: Shows how to trigger an event on a vjs.Component instance using the `trigger` method. Events can be triggered by passing either the event name as a string or an event object with a `type` attribute. This method requires the event identifier (String or Object) as a parameter and returns the component instance (`self`).\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackMenuItem.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Fullscreen Mode in JavaScript\nDESCRIPTION: This method checks if the player is in fullscreen mode or sets the fullscreen state. It returns a boolean when getting the state and the player instance when setting.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// get\nvar fullscreenOrNot = myPlayer.isFullscreen();\n\n// set\nmyPlayer.isFullscreen(true); // tell the player it's in fullscreen\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Video.js Component\nDESCRIPTION: Adds an event listener to the component's element. Requires 'type' (string, e.g., 'click') and 'fn' (function) parameters. The context ('this') inside the listener function will be the component itself. Inherited from the base Component class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options for JavaScript Component\nDESCRIPTION: Performs a deep merge of a provided options object with the component's existing options (`this.options_`). If a property is an object in both sources, they are merged recursively using `vjs.obj.deepMerge`. This is useful for overriding specific child component options without redefining all defaults. Setting a child option to `null` disables it. Inherited from `src/js/component.js`.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeMenuButton.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n\nRESULT\n\n{\n  children: {\n    'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\n    'childTwo': null, // Disabled. Won't be initialized.\n    'childThree': {},\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Child Components in Video.js\nDESCRIPTION: Demonstrates how to define and initialize default child components for a custom Video.js component using the `children` option. Children can be defined on the component's prototype or passed during instantiation, specified either as an object mapping names to options or an array of names/option objects.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// when an instance of MyComponent is created, all children in options\n// will be added to the instance by their name strings and options\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Video.js Plugin\nDESCRIPTION: Shows how to register a plugin with Video.js to make it available globally. The plugin is added to the Video.js prototype.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvjs.plugin('examplePlugin', examplePlugin);\n```\n\n----------------------------------------\n\nTITLE: Exiting Fullscreen Mode in JavaScript\nDESCRIPTION: This method returns the video to its normal size after being in full screen mode. It returns the player instance for chaining.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyPlayer.exitFullscreen();\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events on Video.js Slider in JavaScript\nDESCRIPTION: Handles click events on the Slider component. This method is called when the slider is clicked.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Slider.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nonClick( event )\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The context of the callback function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuItem.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Getting Video Duration in JavaScript\nDESCRIPTION: This method retrieves the length of the video in seconds. Note that the video must have started loading before the duration can be known, and in Flash, it may not be known until the video starts playing.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar lengthOfVideo = myPlayer.duration();\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Animate with npm\nDESCRIPTION: JavaScript code to add ngAnimate as a dependency in an Angular application when installed via npm.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular-animate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nangular.module('myApp', [require('angular-animate')]);\n```\n\n----------------------------------------\n\nTITLE: Adding Language Support via JavaScript API\nDESCRIPTION: Example showing how to add language support using the videojs.addLanguage API in the HTML head element.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/languages.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n<script>\n  videojs.options.flash.swf = '../node_modules/videojs-swf/dist/video-js.swf';\n  videojs.addLanguage('es', {\n    \"Play\": \"Juego\",\n    \"Pause\": \"Pausa\",\n    \"Current Time\": \"Tiempo Actual\",\n    \"Duration Time\": \"Tiempo de Duracion\",\n    \"Remaining Time\": \"Tiempo Restante\",\n    \"Stream Type\": \"Tipo de Transmision\",\n    \"LIVE\": \"En Vivo\",\n    \"Loaded\": \"Cargado\",\n    \"Progress\": \"Progreso\",\n    \"Fullscreen\": \"Pantalla Completa\",\n    \"Non-Fullscreen\": \"No Pantalla Completa\",\n    \"Mute\": \"Mudo\",\n    \"Unmuted\": \"Activar sonido\",\n    \"Playback Rate\": \"Reproduccion Cambio\",\n    \"Subtitles\": \"Subtitulos\",\n    \"subtitles off\": \"subtitulos fuera\",\n    \"Captions\": \"Subtitulos\",\n    \"captions off\": \"subtitulos fuera\",\n    \"Chapters\": \"Capitulos\",\n    \"You aborted the video playback\": \"Ha anulado la reproduccion de video\",\n    \"A network error caused the video download to fail part-way.\": \"Un error en la red hizo que la descarga de video falle parte del camino.\",\n    \"The video could not be loaded, either because the server or network failed or because the format is not supported.\": \"El video no se puede cargar, ya sea porque el servidor o la red fracasaron o porque el formato no es compatible.\",\n    \"The video playback was aborted due to a corruption problem or because the video used features your browser did not support.\": \"La reproduccion de video se ha cancelado debido a un problema de corrupcion o porque el video utilizado cuenta con su navegador no soporta.\",\n    \"No compatible source was found for this video.\": \"Ninguna fuente compatible se encontro para este video.\"\n  });\n</script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Initializing Video.js Plugin During Player Creation\nDESCRIPTION: Demonstrates how to initialize a plugin when creating a new Video.js player instance, including passing plugin options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvjs('vidId', {\n  plugins: {\n    examplePlugin: {\n      exampleOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Video Properties in Video.js vs HTML5\nDESCRIPTION: This snippet compares setting a video property (currentTime) using the native HTML5 video element and the Video.js player API. It illustrates the difference in syntax between the two approaches.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// setting a property on a bare HTML5 video element\nmyVideoElement.currentTime = \"120\";\n\n// setting a property on a Video.js player\nmyPlayer.currentTime(120);\n```\n\n----------------------------------------\n\nTITLE: Using addChild Method in Video.js Components\nDESCRIPTION: Example of how to add a child component inside a parent component in Video.js, including passing options to the child component and its children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuButton.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\n// Pass in options for child constructors and options for children of the child\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Video.js Slider Component in JavaScript\nDESCRIPTION: Initializes a new Slider component instance with the given player and options. This method is called when creating a new Slider.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Slider.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n```\n\n----------------------------------------\n\nTITLE: JavaScript Client Heartbeat Configuration Example\nDESCRIPTION: Example of configuring the STOMP client's heartbeat settings. It shows how to set the outgoing heartbeat interval to 20000ms and disable incoming heartbeats by setting the value to 0.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/RELEASE_NOTES.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclient.heartbeat.outgoing = 20000 // client will send heartbeats every 20000ms\nclient.heartbeat.incoming = 0 // client does not want to receive heartbeats\n                             // from the server\n```\n\n----------------------------------------\n\nTITLE: Initializing Video.js Plugin After Player Creation\nDESCRIPTION: Shows how to initialize a plugin on an existing Video.js player instance by calling the plugin setup function directly.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.examplePlugin({ exampleOption: true });\n```\n\n----------------------------------------\n\nTITLE: Linking Required Scripts and Styles for AngularJS-Toaster\nDESCRIPTION: HTML snippet showing how to include the required CSS and JavaScript files for AngularJS-Toaster, including Angular core and Angular-animate dependencies.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/angularjs-toaster/0.4.9/toaster.min.css\" rel=\"stylesheet\" />\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js\" ></script>\n<script src=\"https://code.angularjs.org/1.2.0/angular-animate.min.js\" ></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/angularjs-toaster/0.4.9/toaster.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding One-Time Event Listener in Video.js Component\nDESCRIPTION: Adds an event listener that will be triggered only once and then removed automatically.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\none( type, fn )\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options Objects in Video.js\nDESCRIPTION: Shows how to merge configuration options for child components using the options method. Demonstrates deep merging of nested objects while preserving default values.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayProgressBar.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Content in Markdown\nDESCRIPTION: Detailed version history documentation showing changes, improvements, and fixes across multiple releases from version 1.0 to 2.2.1. Includes information about UI components, dependency updates, and architectural changes.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/flat-ui/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 2.2.1\n\n  * Fixed issue with dropdowns border-top-radius\n  * Fixed conflict issue of jquery-ui and bootstrap button.js\n  * Added holder.js library\n  * Added test case for typeahead component\n  * Typeahead: fixed form-control styling\n  * Various small bugfixes and improvements\n```\n\n----------------------------------------\n\nTITLE: Configuring a Button with Options in Video.js\nDESCRIPTION: Example demonstrating how to create a button with text and child components using the addChild method with configuration options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Button.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using OnHideCallback for Toast Chaining\nDESCRIPTION: JavaScript code showing how to use the onHideCallback option to chain toast notifications.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntoaster.pop({\n            title: 'A toast',\n\t\t    body: 'with a callback',\n\t\t\tonHideCallback: function () { \n\t\t\t    toaster.pop({\n\t\t\t        title: 'A toast',\n\t\t\t\t    body: 'invoked as a callback'\n\t\t\t\t});\n\t\t\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Language Support in Video.js\nDESCRIPTION: Shows how to add language support to Video.js at runtime using the addLanguage method. This is useful for extending language support dynamically.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvjs.addLanguage('es', {'Hello':'Hola'});\n```\n\n----------------------------------------\n\nTITLE: Defining Default Child Components in Video.js\nDESCRIPTION: Shows how to define default child components in the options object of a custom component class. These children will be automatically created when the component is instantiated.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Component.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to JavaScript Component\nDESCRIPTION: Attaches an event listener function to the component's element for a specified event type. The context (`this`) within the listener function will be the component instance itself. Inherited from `src/js/component.js`.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeMenuButton.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Triggering Events on Video.js Component\nDESCRIPTION: Triggers a specified event on the component's element. The 'event' parameter can be a string representing the event type or an event object with a 'type' attribute. Inherited from the base Component class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Performs a deep merge of options objects. Used for merging options for child components, allowing easy override of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Using addChild Method in Video.js Components\nDESCRIPTION: Example showing how to add child components to a Video.js component, including passing options and nested children configurations.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ProgressControl.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Self-hosted Video.js Setup\nDESCRIPTION: HTML and JavaScript code for self-hosted Video.js setup including Flash SWF file configuration.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/setup.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"//example.com/path/to/video-js.css\" rel=\"stylesheet\">\n<script src=\"//example.com/path/to/video.js\"></script>\n<script>\n  videojs.options.flash.swf = \"https://example.com/path/to/video-js.swf\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The listener function is called with the component as its context when the event is fired.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ProgressControl.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Event Listener Example in VideoJS\nDESCRIPTION: Demonstrates how to add an event listener to a VideoJS component with proper context binding. The listener function receives the component instance as 'this'.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.FullscreenToggle.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Options Merging Example in Video.js\nDESCRIPTION: Shows how to merge component options objects deeply, allowing child component options to be overridden while preserving defaults. Used for configuring child components.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekHandle.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Child Components via Component Options in Video.js\nDESCRIPTION: Example showing how to configure default child components in options when creating a Video.js component instance, with both object and array patterns for specifying children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuButton.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// when an instance of MyComponent is created, all children in options\n// will be added to the instance by their name strings and options\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// The children option can also be an Array of child names or\n// child options objects (that also include a 'name' key).\n\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Example in Video.js\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component with the 'on' method. The listener function receives the component context as 'this'.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayProgressBar.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Methods and Properties to CoreObject Extension\nDESCRIPTION: Demonstrates adding multiple methods and properties when extending CoreObject, including constructor initialization.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CoreObject.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar Animal = CoreObject.extend({\n  init: function(name){\n    this.name = name;\n  },\n  getName: function(){\n    return this.name;\n  },\n  sound: '...'\n});\n```\n\n----------------------------------------\n\nTITLE: Using Toaster Controller in HTML View\nDESCRIPTION: HTML markup showing how to call the toaster controller method on a button click event.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div ng-controller=\"myController\">\n    <button ng-click=\"pop()\">Show a Toaster</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in VideoJS Component (JavaScript)\nDESCRIPTION: Demonstrates how to add an event listener to a VideoJS component. The context of the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PosterImage.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Component in JavaScript\nDESCRIPTION: This method adds an event listener to the component's element. The context will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Initializing LoadProgressBar Component in Video.js\nDESCRIPTION: Method that initializes the LoadProgressBar component with a player instance and options. This is the constructor method for the component that shows loading progress in the Video.js player.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.LoadProgressBar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninit( player, options )\n\n##### PARAMETERS: \n* __player__ \n* __options__ \n\n_defined in_: [src/js/control-bar/progress-control.js#L119](https://github.com/videojs/video.js/blob/master/src/js/control-bar/progress-control.js#L119)\n```\n\n----------------------------------------\n\nTITLE: Merging Options Objects in JavaScript\nDESCRIPTION: Performs a deep merge of options objects, useful for merging child component options. Allows easy override of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Flash.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Preload Option Example\nDESCRIPTION: Setting preload option in HTML and JSON format with options for auto, metadata, or none.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<video preload ...>\n```\n\n----------------------------------------\n\nTITLE: Triggering Event on Component in JavaScript\nDESCRIPTION: Triggers an event on the component's element. The event can be specified as a string or an event object with a type attribute.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ntrigger( event )\n```\n\n----------------------------------------\n\nTITLE: Event Listener Addition in Video.js\nDESCRIPTION: Shows how to add event listeners to a component with the component as the context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Menu.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in VideoJS Component\nDESCRIPTION: Example of adding an event listener to a VideoJS player component. The listener function receives the component context as 'this'.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Component.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component in Video.js\nDESCRIPTION: The addChild method adds a child component inside the current component. It accepts the child component as a string or instance and optional options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeBar.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\naddChild( child, [options] )\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component in Video.js\nDESCRIPTION: Example showing how to create a Video.js button component by adding a child to an existing component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Button.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example in Video.js\nDESCRIPTION: Demonstrates how to add a child component to a Video.js component including setting options and handling nested children. Shows both basic and advanced usage with configuration options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Flash.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Video.js via CDN\nDESCRIPTION: HTML markup for including Video.js CSS and JavaScript files from CDN hosting.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/setup.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"//vjs.zencdn.net/4.7/video-js.css\" rel=\"stylesheet\">\n<script src=\"//vjs.zencdn.net/4.7/video.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Listener with vjs.Component#on in JavaScript\nDESCRIPTION: Demonstrates how to add an event listener to a vjs.Component instance using the `on` method. The provided function (`myFunc`) will be executed when the specified event (`eventName`) is fired on the component (`myPlayer`). The context (`this`) within the listener function will refer to the component itself. This method requires the event type (String) and the listener function (Function) as parameters and returns the component instance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackMenuItem.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Initializing MediaTechController in video.js\nDESCRIPTION: Shows the initialization signature for the MediaTechController class. This is the core method that sets up a media technology controller with player, options, and ready callback.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninit( player, options, ready )\n```\n\n----------------------------------------\n\nTITLE: Merging Component Options in Video.js\nDESCRIPTION: Demonstrates deep merging of options objects for child components, allowing selective override of individual options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener from Component in JavaScript\nDESCRIPTION: Removes an event listener from the component's element. Can remove all listeners or specific listeners based on event type and function.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\noff( [type], [fn] )\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic AngularJS Controller with Toaster\nDESCRIPTION: JavaScript code showing how to set up an AngularJS controller that uses the toaster service to display notifications.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Display an info toast with no title\nangular.module('main', ['toaster', 'ngAnimate'])\n\t.controller('myController', function($scope, toaster) {\n\t    $scope.pop = function(){\n\t        toaster.pop('success', \"title\", \"text\");\n\t    };\n\t});\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Shows how to deep merge options objects for child components in Video.js. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ProgressControl.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Shows how to deep merge options objects for child components in Video.js. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesButton.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Autoplay Option Example\nDESCRIPTION: Setting autoplay option in HTML and JSON format. Note: Not supported on iOS devices.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<video autoplay ...>\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component in Video.js\nDESCRIPTION: Adds a child component to the current component. It can accept either a string (class name) or an instance of vjs.Component. Options can be passed for child constructors and their children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeControl.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\naddChild( child, [options] )\n> Adds a child component inside this component\n> \n>     myComponent.el();\n>     // -> <div class='my-component'></div>\n>     myComonent.children();\n>     // [empty array]\n> \n>     var myButton = myComponent.addChild('MyButton');\n>     // -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n>     // -> myButton === myComonent.children()[0];\n> \n> Pass in options for child constructors and options for children of the child\n> \n>     var myButton = myComponent.addChild('MyButton', {\n>       text: 'Press Me',\n>       children: {\n>         buttonChildExample: {\n>           buttonChildOption: true\n>         }\n>       }\n>     });\n\n##### PARAMETERS: \n* __child__ `String|vjs.Component` The class name or instance of a child to add\n* __options__ `Object` _(OPTIONAL)_ Options, including options to be passed to children of the child.\n\n##### RETURNS: \n* `vjs.Component` The child component (created by this process if a string was used)\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a VideoJS Menu\nDESCRIPTION: Adds a menu item component to a VideoJS Menu. This method allows adding either a component instance or a component type as a child to the menu.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Menu.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddItem( component )\n> Add a menu item to the menu\n\n##### PARAMETERS: \n* __component__ `Object|String` Component or component type to add\n\n_defined in_: [src/js/menu.js#L18](https://github.com/videojs/video.js/blob/master/src/js/menu.js#L18)\n```\n\n----------------------------------------\n\nTITLE: Component Event Trigger Example - JavaScript\nDESCRIPTION: Example showing different ways to trigger events on a Video.js component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.LoadingSpinner.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Requiring STOMP.js in Node.js\nDESCRIPTION: Code snippet showing how to import the STOMP.js module in a Node.js application.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Stomp = require('stompjs');\n```\n\n----------------------------------------\n\nTITLE: Adding Child Components in VideoJS\nDESCRIPTION: Adds a child component inside a parent component. This inherited method allows for nested component hierarchies with options for both the child and its children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Menu.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naddChild( child, [options] )\n> Adds a child component inside this component\n> \n>     myComponent.el();\n>     // -> <div class='my-component'></div>\n>     myComonent.children();\n>     // [empty array]\n> \n>     var myButton = myComponent.addChild('MyButton');\n>     // -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n>     // -> myButton === myComonent.children()[0];\n> \n> Pass in options for child constructors and options for children of the child\n> \n>     var myButton = myComponent.addChild('MyButton', {\n>       text: 'Press Me',\n>       children: {\n>         buttonChildExample: {\n>           buttonChildOption: true\n>         }\n>       }\n>     });\n\n##### PARAMETERS: \n* __child__ `String|vjs.Component` The class name or instance of a child to add\n* __options__ `Object` _(OPTIONAL)_ Options, including options to be passed to children of the child.\n\n##### RETURNS: \n* `vjs.Component` The child component (created by this process if a string was used)\n\n_inherited from_: [src/js/component.js#L356](https://github.com/videojs/video.js/blob/master/src/js/component.js#L356)\n```\n\n----------------------------------------\n\nTITLE: Example of Using addChild Method in VideoJS Component\nDESCRIPTION: Shows how to add a child component to a parent component, including passing options to the child constructor and configuring child components further.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ControlBar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\n// Pass in options for child constructors and options for children of the child\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Options Objects for Component in JavaScript\nDESCRIPTION: Performs a deep merge of options objects. Used for merging options for child components, allowing easy override of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions( obj )\n```\n\n----------------------------------------\n\nTITLE: Merging Component Options with vjs.Component#options in JavaScript\nDESCRIPTION: Illustrates how to perform a deep merge of options objects for a vjs.Component using the `options` method. This is useful for overriding specific default options of child components without redefining all options. The example shows merging `newOptions` into the existing `Parent.prototype.options_`. Properties that are objects in both are recursively merged, `null` values disable components, and new properties are added. The method takes the new options object (`obj`) as input and returns a new object representing the merged options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackMenuItem.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// RESULT\n{\n  children: {\n    'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\n    'childTwo': null, // Disabled. Won't be initialized.\n    'childThree': {},\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML5 Video Controls Configuration\nDESCRIPTION: Example of setting basic video player options using standard HTML5 video tag attributes.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video controls autoplay preload=\"auto\" ...>\n```\n\n----------------------------------------\n\nTITLE: Merging Component Options with Deep Merge in Video.js - JavaScript\nDESCRIPTION: Shows how the options method can be used to deeply merge configuration objects for Video.js components, allowing selective overriding of child properties without rewriting defaults. This pattern depends on vjs.obj.deepMerge and is useful for extending components. It takes a new options object, merges it with any existing configuration, and returns a new merged options object. Null values for children disable them, preventing initialization.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeControl.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' },\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Component Children Configuration in Video.js\nDESCRIPTION: Shows how to configure default child components through the options object when creating new component instances. Demonstrates both object and array-based children configuration approaches.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Flash.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button', \n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ChaptersTrackMenuItem in JavaScript\nDESCRIPTION: This method initializes the ChaptersTrackMenuItem component with a player and options. It is called when creating a new instance of the component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrackMenuItem.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n```\n\n----------------------------------------\n\nTITLE: Initializing TextTrackDisplay Component in JavaScript\nDESCRIPTION: This method initializes the TextTrackDisplay component with the player, options, and a ready callback. It sets up the component for displaying text track cues.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackDisplay.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options, ready )\n```\n\n----------------------------------------\n\nTITLE: Component Options Merging Example in VideoJS\nDESCRIPTION: Demonstrates deep merging of component options objects, allowing easy override of individual child component options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekBar.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Ready State Listener to Component in JavaScript\nDESCRIPTION: Binds a listener to the component's ready state. If the ready event has already occurred, it will trigger the function immediately.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nready( fn )\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Video.js Components (JavaScript)\nDESCRIPTION: Demonstrates attaching an event listener to a Video.js component using the on method. The snippet shows the function signature, usage pattern, and the context in which the function is executed. Requires a Video.js component instance. Expected inputs are the event type (string) and a callback function. Returns the component instance for chaining. Listeners are bound to the component's element, and the callback context is the component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Slider.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\\n  var myPlayer = this;\\n  // Do something when the event is fired\\n};\\n\\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Handling Click Event on Media Element in JavaScript\nDESCRIPTION: Handles a click event on the media element. By default, it will play or pause the media.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nonClick( event )\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example\nDESCRIPTION: Example showing how to add a child component to a Video.js component, including options for child constructors and nested children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekBar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options in Video.js Components\nDESCRIPTION: Shows how the options method performs deep merging of options objects. This is particularly useful for configuring child components without overwriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CaptionsTrack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Shows how to deep merge options objects for child components in Video.js. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.LoadProgressBar.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: VideoJS Component Initialization with Children Options\nDESCRIPTION: Examples showing how to add and initialize default child components from options when creating VideoJS components.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.BigPlayButton.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// when an instance of MyComponent is created, all children in options\n// will be added to the instance by their name strings and options\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// The children option can also be an Array of child names or\n// child options objects (that also include a 'name' key).\n\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Events on JavaScript Component\nDESCRIPTION: Manually triggers a specified event on the component's element. The event can be specified either by its type string or by an event object containing a `type` attribute. Returns the component instance for chaining. Inherited from `src/js/component.js`.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeMenuButton.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Component Options Merging Example in Video.js\nDESCRIPTION: Demonstrates deep merging of component options objects, showing how child component options can be overridden while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.BigPlayButton.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding One-Time Event Listener to Component in JavaScript\nDESCRIPTION: Adds an event listener that will be triggered only once and then removed automatically.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\none( type, fn )\n```\n\n----------------------------------------\n\nTITLE: Triggering Events on Video.js Components - JavaScript\nDESCRIPTION: Demonstrates programmatically triggering an event from a Video.js component element using the 'trigger' method. Events can be fired by passing a string for the type or an object with a type attribute. This enables custom UI workflows and internal communication between components. Only requires a component instance and event data to be passed as input; returns the component itself to allow method chaining. Example covers both string and object event triggers.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeLevel.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Component Children Definition - JavaScript\nDESCRIPTION: Shows how to define and initialize default child components using options in a Video.js component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.FullscreenToggle.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// Using array syntax\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Example in Video.js\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component using the 'on' method. The listener function receives the component instance as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackButton.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Options with Deep Merging\nDESCRIPTION: Example demonstrating how to merge component options objects, allowing for targeted overrides of specific settings while preserving default values for others.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CaptionsButton.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Initializing Component Children in JavaScript\nDESCRIPTION: Example showing how to initialize child components when creating a new component instance, including both object and array syntax for children configuration.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// when an instance of MyComponent is created, all children in options\n// will be added to the instance by their name strings and options\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// Array syntax\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options on Video.js Components - JavaScript\nDESCRIPTION: Shows how to deep merge new options into an existing Video.js component using the 'options' method. When option values are objects, properties are recursively merged; null disables children or features. This supports easy partial overrides when configuring nested components. Requires component inheritance and deep merge support (vjs.obj.deepMerge). The method accepts an object of options and returns a new merged object. Output illustrates how overlapping children settings are combined without overwriting unrelated properties.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeLevel.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' },\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n\n// RESULT\n// {\n//   children: {\n//     'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\n//     'childTwo': null, // Disabled. Won't be initialized.\n//     'childThree': {},\n//     'childFour': {}\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Initializing VolumeMenuButton Component in JavaScript\nDESCRIPTION: This method initializes the VolumeMenuButton component with the given player and options. It sets up the component's behavior and appearance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeMenuButton.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Video.js Components - JavaScript\nDESCRIPTION: Demonstrates how to add a persistent event listener to a Video.js component, with the function executed in the context of the component object. Listeners can be attached using event type strings and are removable by reference. Requires the Video.js library and an initialized player component. Takes the event type as a string and a callback function; returns the component itself for chaining. Listeners added this way must be removed by providing the same function reference.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeControl.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Initializing Component Children in Video.js\nDESCRIPTION: Shows how to add and initialize default child components from options. Demonstrates different ways to specify children, either as an object or an array of names/objects.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CaptionsTrack.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// when an instance of MyComponent is created, all children in options\n// will be added to the instance by their name strings and options\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Event in Video.js Media Component\nDESCRIPTION: Handles a tap on the media element. By default, it toggles the user activity state, which shows or hides the controls.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nonTap()\n```\n\n----------------------------------------\n\nTITLE: Initializing Control Listeners for Video Playback in JavaScript\nDESCRIPTION: Sets up click and touch listeners for the video playback element. Handles different behaviors for desktop and mobile devices, including toggling playback and controls visibility.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ninitControlsListeners()\n```\n\n----------------------------------------\n\nTITLE: Creating Toast with Custom ID for Clear Function\nDESCRIPTION: JavaScript code showing how to create a toast with custom toasterId and toastId for use with the clear function.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar _toaster = {\n                    type:      null,\n                    title:     null,\n                    body:      null,\n                    timeout:   null,\n                    toasterId: 'CategoryMenu',\n                    toastId:   'CategoryMenuAlert'\n                }\n```\n\n----------------------------------------\n\nTITLE: Component Options Deep Merge in Video.js\nDESCRIPTION: Demonstrates deep merging of component options objects, useful for configuring child components while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Menu.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options for Video.js Component in JavaScript\nDESCRIPTION: Illustrates the usage of the `options` method for deep merging configuration objects in a Video.js component. It shows how existing default options (`Parent.prototype.options_`) are combined with new options (`newOptions`), allowing specific child component settings to be overridden or added without rewriting the entire structure. Setting a child option to `null` disables it. The method returns a new merged object.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SliderHandle.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Listener to a Video.js Component - JavaScript\nDESCRIPTION: Illustrates how to bind a function as an event listener to a Video.js component using its on() method. The listener function is invoked in the context of the component upon event firing. Accepts event type and callback as parameters, returning the component for chaining. Requires Video.js library and a component instance. The event type must be a string, and the callback a function. The context within the callback is the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuButton.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\\n  var myPlayer = this;\\n  // Do something when the event is fired\\n};\\n\\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Triggering Ready Listeners for Component in JavaScript\nDESCRIPTION: Triggers the ready listeners attached to the component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ntriggerReady()\n```\n\n----------------------------------------\n\nTITLE: Merging Options in VideoJS Component (JavaScript)\nDESCRIPTION: Shows how to deep merge options objects for child components in VideoJS. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ControlBar.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners from JavaScript Component\nDESCRIPTION: Removes an event listener previously attached to the component's element using the `on` method. Optionally removes all listeners of a specific type, or all listeners entirely if no arguments are provided. Inherited from `src/js/component.js`.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeMenuButton.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.off(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Text Track Component Example\nDESCRIPTION: Example showing how to add child components to a text track component with configuration options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The method 'on' is used to attach an event listener, with the component as the context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrackMenuItem.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Changing Toast Display Position\nDESCRIPTION: HTML snippet showing how to change the display position of toast notifications.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<toaster-container toaster-options=\"{'position-class': 'toast-top-full-width'}\"></toaster-container>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Component DOM Element in JavaScript\nDESCRIPTION: This method gets the component's DOM element. It is inherited from the component.js file.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Player.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar domEl = myComponent.el();\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example in JavaScript\nDESCRIPTION: Example showing how to add a child component to a Video.js component with options for child constructors.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuItem.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component in JavaScript\nDESCRIPTION: Adds a child component inside this component. It can accept a string class name or an instance of a child component, along with optional configuration options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PosterImage.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\naddChild( child, [options] )\n```\n\n----------------------------------------\n\nTITLE: Using addChild in video.js Components\nDESCRIPTION: Demonstrates how to add child components to a video.js component. The method allows adding children with customized options and nested child components.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\n// Pass in options for child constructors and options for children of the child\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in VideoJS Component\nDESCRIPTION: Method for adding an event listener to a VideoJS component with the component as the context. This allows handling events on the component's element.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CaptionsButton.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies\nDESCRIPTION: Command to install the necessary Node.js dependencies for development, testing, and building the project.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Output Type Per Toast\nDESCRIPTION: JavaScript code showing how to configure the body output type for an individual toast notification.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntoaster.pop({\n            type: 'error',\n            title: 'Title text',\n            body: 'Body text',\n            bodyOutputType: 'trustedHtml'\n});\n```\n\n----------------------------------------\n\nTITLE: Result of Deep Merging Child Component Options in Video.js - JavaScript\nDESCRIPTION: Shows the output object after merging existing child options with new options using the options() method. Child options are deeply merged, disabled if set to null, or added if not present before. Demonstrates the importance of merging for flexible component configuration.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuButton.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  children: {\\n    'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\\n    'childTwo': null, // Disabled. Won't be initialized.\\n    'childThree': {},\\n    'childFour': {}\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options Objects in Video.js\nDESCRIPTION: Example demonstrating how to merge options objects for child components in Video.js, allowing easy override of individual options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayToggle.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding, Removing, and Managing Event Listeners in Video.js Components - JavaScript\nDESCRIPTION: These snippets illustrate how to register, deregister, or manage event listeners on Video.js component elements. The 'on' and 'one' methods attach event handlers, with 'one' ensuring the handler is triggered only once. Listeners can be removed entirely or selectively by passing appropriate arguments. Dependencies include a Video.js component instance and optionally, event type and handler function parameters. The methods return the component instance for chaining. Examples demonstrate assigning and removing event handlers for player-based events.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeLevel.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Using addChild Method in Video.js Component\nDESCRIPTION: Example showing how to add a child component inside a parent component in Video.js, demonstrating both basic usage and passing options to child constructors.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SliderHandle.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Child Component in Video.js\nDESCRIPTION: Example demonstrating how to add a child component to a Video.js component, including passing options for child constructors and nested children configurations.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayToggle.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\n// Pass in options for child constructors and options for children of the child\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Centered Play Button Video.js Setup\nDESCRIPTION: Video.js implementation with centered play button using additional CSS class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/setup.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<video id=\"example_video_1\" class=\"video-js vjs-default-skin vjs-big-play-centered\"\n  controls preload=\"auto\" width=\"640\" height=\"264\"\n  poster=\"https://vjs.zencdn.net/oceans-clip.png\"\n  data-setup='{\"example_option\":true}'>\n  ...\n</video>\n```\n\n----------------------------------------\n\nTITLE: Initializing VolumeControl Component in Video.js\nDESCRIPTION: Initializes the VolumeControl component with a player instance and options. This method is called when creating a new VolumeControl instance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeControl.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n\n##### PARAMETERS: \n* __player__ \n* __options__\n```\n\n----------------------------------------\n\nTITLE: Adding Language Support via Player Configuration\nDESCRIPTION: Example showing how to add language support during Video.js player instantiation using the data-setup attribute.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/languages.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<video id=\"example_video_1\" class=\"video-js vjs-default-skin\"  \n  controls preload=\"auto\" width=\"640\" height=\"264\"  \n  data-setup='{\"languages\":{\"es\":{\"Play\":\"Juego\"}}}'>\n <source src=\"https://vjs.zencdn.net/oceans-clip.mp4\" type='video/mp4' />  \n <source src=\"https://vjs.zencdn.net/oceans-clip.webm\" type='video/webm' />  \n <source src=\"https://vjs.zencdn.net/oceans-clip.ogv\" type='video/ogg' />  \n\n <track kind=\"captions\" src=\"https://example.com/path/to/captions.vtt\" srclang=\"en\" label=\"English\" default>\n\n</video>\n```\n\n----------------------------------------\n\nTITLE: Event Listener Example in Video.js\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js player component. The listener function is called with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeBar.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Prototype in CoreObject\nDESCRIPTION: Shows how to add methods directly to the prototype after class definition.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CoreObject.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAnimal.prototype.makeSound = function(){\n  alert(this.sound);\n};\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options in Video.js Components\nDESCRIPTION: Shows how to merge configuration options for child components while preserving default values and allowing selective overrides.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.RemainingTimeDisplay.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Options Deep Merge\nDESCRIPTION: Shows how to merge component options deeply, allowing individual option overrides while preserving default values.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrack.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example in JavaScript\nDESCRIPTION: Example demonstrating how to add a child component to a parent component with optional configuration parameters.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CurrentTimeDisplay.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language in Video.js Player\nDESCRIPTION: Example showing how to set a default language for a Video.js player instance using the data-setup attribute.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/languages.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<video id=\"example_video_1\" class=\"video-js vjs-default-skin\"  \n  controls preload=\"auto\" width=\"640\" height=\"264\"  \n  data-setup='{\"language\":\"es\"}'>  \n <source src=\"https://vjs.zencdn.net/oceans-clip.mp4\" type='video/mp4' />  \n <source src=\"https://vjs.zencdn.net/oceans-clip.webm\" type='video/webm' />  \n <source src=\"https://vjs.zencdn.net/oceans-clip.ogv\" type='video/ogg' />  \n\n <track kind=\"captions\" src=\"https://example.com/path/to/captions.vtt\" srclang=\"en\" label=\"English\" default>\n\n</video>\n```\n\n----------------------------------------\n\nTITLE: Initializing VolumeBar Component in Video.js\nDESCRIPTION: The init method initializes the VolumeBar component with the player and options. It is defined in the volume-control.js file.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeBar.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Component Options in Video.js\nDESCRIPTION: Shows how to merge nested configuration options for child components using the options method. Demonstrates deep merging behavior for overlapping properties.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackButton.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Component Children Array Configuration\nDESCRIPTION: Example showing how to configure child components using an array format with names and options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuItem.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Child Components to TextTrackDisplay in JavaScript\nDESCRIPTION: This inherited method adds a child component to the TextTrackDisplay. It's useful for adding sub-components that handle specific aspects of text track display.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackDisplay.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\naddChild( child, [options] )\n```\n\n----------------------------------------\n\nTITLE: Triggering Events on Video.js Component in JavaScript\nDESCRIPTION: Shows two ways to trigger an event on a Video.js component using the `trigger` method. An event can be triggered by passing either the event name as a string (e.g., 'eventName') or an event object with a `type` attribute (e.g., {'type':'eventName'}). The method returns the component instance (`this`) for chaining.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SliderHandle.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Child Component Options Configuration\nDESCRIPTION: Example showing how to pass options when adding a child component including nested child configurations.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeHandle.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Method Example - addChild Usage in Video.js\nDESCRIPTION: Shows how to add a child component and set options for both the child and its descendants.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TimeDivider.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TextTrackMenuItem Component in JavaScript\nDESCRIPTION: Initializes a new TextTrackMenuItem component with the given player and options. This method is called when creating a new instance of the component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackMenuItem.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n\n##### PARAMETERS: \n* __player__ \n* __options__\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Items for VolumeMenuButton in JavaScript\nDESCRIPTION: This inherited method creates the list of menu items specific to the VolumeMenuButton component. It is intended to be overridden by subclasses to customize the menu items.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeMenuButton.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateItems()\n```\n\n----------------------------------------\n\nTITLE: Component Children Configuration in Video.js\nDESCRIPTION: Demonstrates how to configure child components using both object and array notation when initializing a Video.js component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ProgressControl.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Component Options in Video.js\nDESCRIPTION: Shows how to merge component options deeply, allowing for easy override of individual child component options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesTrack.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The context of the listener function will be set to the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.LoadProgressBar.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example - JavaScript\nDESCRIPTION: Example showing how to add child components inside a component with optional configuration options for the child constructor and nested children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.RemainingTimeDisplay.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component in JavaScript\nDESCRIPTION: This inherited method adds a child component to the ChaptersTrackMenuItem. It demonstrates how to create and add child elements dynamically.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrackMenuItem.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\naddChild( child, [options] )\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Adds an event listener to the component's element. The context of the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Component Children Configuration Example\nDESCRIPTION: Example demonstrating how to configure child components when creating a new component instance using options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuItem.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Controls Option Example\nDESCRIPTION: Demonstration of setting the controls option in both HTML and JSON format.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<video controls ...>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The context for the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesButton.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Using Event Listeners in Video.js Components\nDESCRIPTION: Demonstrates how to add an event listener to a component. The context ('this') within the event handler will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CaptionsTrack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Handling Component Child Management in VideoJS\nDESCRIPTION: Example showing how to add a child component to a VideoJS component, with options for child constructors and their children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.BigPlayButton.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\n// Pass in options for child constructors and options for children of the child\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Options Objects in Video.js Component\nDESCRIPTION: Performs a deep merge of a provided options object ('obj') into the component's existing options (`this.options_`). If a property is an object on both, they are merged recursively. This is useful for overriding specific child component options without redefining all defaults. Setting a child option to `null` disables it. Inherited from the base Component class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nRESULT\n\n{\n  children: {\n    'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\n    'childTwo': null, // Disabled. Won't be initialized.\n    'childThree': {},\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VolumeLevel Component in JavaScript\nDESCRIPTION: Initializes the VolumeLevel component with a player and options. This method is called when creating a new instance of the component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeLevel.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n\n##### PARAMETERS: \n* __player__ \n* __options__\n```\n\n----------------------------------------\n\nTITLE: Event Listener Example in VideoJS\nDESCRIPTION: Example showing how to add an event listener to a VideoJS player component. The listener function is called with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekBar.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Component Options Merging Example in Video.js\nDESCRIPTION: Shows how to merge options objects for child components, allowing easy override of individual options while maintaining default values for others.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeBar.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Toast Animations with ngAnimate\nDESCRIPTION: JavaScript code showing how to enable animations for toast notifications by injecting ngAnimate.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Inject ngAnimate to enable animations\nangular.module('main', ['toaster', 'ngAnimate']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Close Button Visibility\nDESCRIPTION: HTML snippet showing how to globally configure the visibility of close buttons on all toast notifications.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<toaster-container toaster-options=\"'close-button': true\"></toaster-container>\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Items for SubtitlesButton in Video.js\nDESCRIPTION: Creates the list of menu items specific to the SubtitlesButton component. This method is inherited from the parent class and is meant to be overridden in subclasses.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesButton.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateItems()\n```\n\n----------------------------------------\n\nTITLE: Initializing ChaptersButton Component in VideoJS\nDESCRIPTION: Method to initialize the ChaptersButton component with player, options, and ready callback. This is the constructor method for the ChaptersButton component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersButton.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options, ready )\n\n##### PARAMETERS: \n* __player__ \n* __options__ \n* __ready__ \n\n_defined in_: [src/js/tracks.js#L910](https://github.com/videojs/video.js/blob/master/src/js/tracks.js#L910)\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Component Element in VideoJS\nDESCRIPTION: Creates the DOM element for a Menu component with appropriate HTML structure. This method builds the menu container element with proper classes and attributes.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Menu.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateEl( [tagName], [attributes] )\n> Create the component's DOM element\n\n##### PARAMETERS: \n* __tagName__ `String` _(OPTIONAL)_ Element's node type. e.g. 'div'\n* __attributes__ `Object` _(OPTIONAL)_ An object of element attributes that should be set on the element\n\n_defined in_: [src/js/menu.js#L26](https://github.com/videojs/video.js/blob/master/src/js/menu.js#L26)\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example - JavaScript\nDESCRIPTION: Example demonstrating how to add a child component inside a Video.js component with optional configuration.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.FullscreenToggle.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Example - JavaScript\nDESCRIPTION: Example showing how to add an event listener to a Video.js component with proper context binding.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.LoadingSpinner.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Removing Control Listeners in JavaScript\nDESCRIPTION: Removes the listeners used for click and tap controls. This is needed when toggling to controls disabled state.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nremoveControlsListeners()\n```\n\n----------------------------------------\n\nTITLE: Text Track Element Creation\nDESCRIPTION: Method to create the basic div element that will hold the cue text content.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateEl()\n> Create basic div to hold cue text\n\n##### RETURNS: \n* `Element`\n```\n\n----------------------------------------\n\nTITLE: Child Component Options Example\nDESCRIPTION: Example demonstrating how to add a child component with nested options and child configurations.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekHandle.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Video.js MuteToggle Component Initialization\nDESCRIPTION: The init method for the MuteToggle component that initializes the component with player and options parameters.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MuteToggle.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninit( player, options )\n\n##### PARAMETERS: \n* __player__ \n* __options__\n```\n\n----------------------------------------\n\nTITLE: Event Listener Example in Video.js\nDESCRIPTION: Example showing how to add an event listener to a Video.js player component with proper context binding.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.BigPlayButton.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Merging Component Options in Video.js (JavaScript)\nDESCRIPTION: Illustrates deep merging of options objects for Video.js component configuration. Child component options can be overridden or disabled by passing a new options object to the options method. Requires Parent.prototype.options_ and a newOptions object; merges are handled by vjs.obj.deepMerge. Supports granular modifications without redefining all default options. Output is a new merged options object, demonstrating how null disables a child and new entries can be added.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Slider.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\\n  children: {\\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\\n    'childTwo': {},\\n    'childThree': {}\\n  }\\n}\\nnewOptions = {\\n  children: {\\n    'childOne': { 'foo': 'baz', 'abc': '123' }\\n    'childTwo': null,\\n    'childFour': {}\\n  }\\n}\\n\\nthis.options(newOptions);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  children: {\\n    'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },\\n    'childTwo': null, // Disabled. Won't be initialized.\\n    'childThree': {},\\n    'childFour': {}\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Video.js Component Children Initialization\nDESCRIPTION: Demonstrates how to initialize child components using options and different configuration approaches\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TimeDivider.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The context of the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MuteToggle.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Child Component Configuration Example - JavaScript\nDESCRIPTION: Example of configuring child components through the options object when creating a new component instance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.RemainingTimeDisplay.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// Using array syntax\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Video.js Skin Styles with CSS\nDESCRIPTION: Example showing how to override the default skin's play progress bar color using CSS selectors.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/skins.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.vjs-default-skin .vjs-play-progress { background: #900; }\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example\nDESCRIPTION: Example showing how to add a child component inside a parent component with optional configuration.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekHandle.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Example in Video.js\nDESCRIPTION: Example showing how to add an event listener to a Video.js player component. The listener function is called with the component as the context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayToggle.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Setting Poster for Media Component in JavaScript\nDESCRIPTION: Provides a default setPoster method for techs. Poster support for techs is optional to prevent breaking if a tech doesn't have a way to set a poster.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetPoster()\n```\n\n----------------------------------------\n\nTITLE: Event Listener Example in Video.js\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component with the 'on' method. The listener function is called with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekHandle.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example\nDESCRIPTION: Example showing how to add a child component to a Video.js component, including passing options to both the child and its children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackButton.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Example of adding an event listener to a Video.js player component. The listener function is called with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.DurationDisplay.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTP Server for STOMP WebSocket Examples\nDESCRIPTION: This command starts a local HTTP server using Node.js to run the STOMP over WebSocket examples.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/example/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ node server.js\n```\n\n----------------------------------------\n\nTITLE: Merging Options in VideoJS Component (JavaScript)\nDESCRIPTION: Shows how to deep merge options objects for child components in VideoJS. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PosterImage.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Rendering State Machine Diagram in ASCII\nDESCRIPTION: This ASCII art represents a state machine diagram with multiple states (S0, S1, S2) and sub-states (S11, S12, S21, s211, s212). It shows transitions between states, entry and exit actions, and conditional transitions based on a 'foo' variable.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/showcase/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n+----------------------------------------------------------------------------------------------+\n|                                                S0                                            |\n+----------------------------------------------------------------------------------------------+\n|  entry/                                                                                      |\n|  exit/                                                                                       |\n|  H/[foo.equals(0)];                                                                          |\n|                                                                                              |\n|            +-------------------------+      +--------------------------------------------+   |\n|        *-->|            S1           |      |                     S2                     |   |\n|            +-------------------------+      +--------------------------------------------+   |\n|            | entry/                  |  C   | entry/                                     |   |\n|      D     | exit/                   |----->| exit/                                      |   |\n|<-----------| H/                      |      | H/[foo.equals(1)];                         |   |\n|            |                         |      |                                            |   |\n|            |     +---------------+   |  C   |      +------------------------------+      |   |\n|            | *-->|      S11      |   |<-----|  *-->|             S21              |      |   |\n|            |     +---------------+   |      |      +------------------------------+      |   |\n|            |     | entry/        |   |  F   |      | entry/                       |      |   |\n|            |     | exit/         |<---------|      | exit/                        |      |   |\n|            |     |               |   |      |      |       +--------------+       |      |   |\n|            |  B  |               |   |      |      |   *-->|     s211     |       |      |   |\n|            |---->|               |   |      |   F  |       +--------------+   G   |      |   |\n|            |     |               |   |-------------------->| entry/       |----------------->|\n|            |  +--|               |   |      |   G  |       | exit/        |       |      |   |\n|            |  |  |               |------------------------>|              |       |  E   |   |\n|            |  |  +---------------+   |      |      |   B   |              |<-----------------||\n|            |  |                      |      |      |------>|              |       |      |   |\n|            |  |  +---------------+   |      |      |       |              |   D   |      |   |\n|            | I|  |      S12      |   |      |      |    +--|              |------>|      |   |\n|            |  |  +---------------+   |      |      |    |  +--------------+       |      |   |\n|            |  |  | entry/        |   |      |      |    |                         |      |   |\n|            |  |  | exit/         |   |      |      |   I|  +--------------+       |      |   |\n|            |  |  |               |   |      |      |    |  |     s212     |       |      |   |\n|            |  +->|               |   |      |      |    |  +--------------+       |      |   |\n|         +--|     |               |   |      |      |    +->| entry/       |       |      |   |\n|         |  |     |               |   |  I   |      |       | exit/        |       |      |   |\n|         |  |     |               |------------------------>|              |       |      |   |\n|        A|  |     |               |   |      |      |       +--------------+       |      |   |\n|         |  |     |               |   |      |      |                              |      |   |\n|         |  |     +---------------+   |      |      +------------------------------+      |   |\n|         +->|                         |      |                                            |   |\n|            +-------------------------+      +--------------------------------------------+   |\n| A[foo.equals(1)];                                                                            |\n+----------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Class from Component in JavaScript\nDESCRIPTION: Removes a CSS class name from the component's element.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nremoveClass( classToRemove )\n```\n\n----------------------------------------\n\nTITLE: Component Children Options Configuration\nDESCRIPTION: Example demonstrating how to configure child components using options during component initialization.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekBar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// Using array syntax\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a MyComponent Instance with Child Components in Video.js\nDESCRIPTION: Example showing how to create a component instance with child components using different configuration approaches, including using an object with child options or an array of child names.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayToggle.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// when an instance of MyComponent is created, all children in options\n// will be added to the instance by their name strings and options\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// The children option can also be an Array of child names or\n// child options objects (that also include a 'name' key).\n\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: VideoJS Component Children Configuration\nDESCRIPTION: Example showing how to configure child components when creating a new VideoJS component instance using both object and array syntax.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CurrentTimeDisplay.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Properties in CoreObject Subclass\nDESCRIPTION: Demonstrates property overriding in subclasses and instance creation with inherited methods.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CoreObject.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar Horse = Animal.extend({\n  sound: 'Neighhhhh!'\n});\n\nvar horsey = Horse.create('Horsey');\nhorsey.getName(); // -> Horsey\nhorsey.makeSound(); // -> Alert: Neighhhhh!\n```\n\n----------------------------------------\n\nTITLE: Building CSS Class for VolumeMenuButton in JavaScript\nDESCRIPTION: This inherited method allows sub-components to stack CSS class names. It is used to generate the appropriate CSS classes for the VolumeMenuButton component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeMenuButton.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbuildCSSClass()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Component Name in JavaScript\nDESCRIPTION: Gets the component's name, which is often used to reference the component. Returns a string representing the component name.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nname()\n```\n\n----------------------------------------\n\nTITLE: Getting Component Name in JavaScript\nDESCRIPTION: Retrieves the name string of a Video.js component, often used for referencing the component. This method is inherited from the base Component class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = myComponent.name();\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Element for Component in JavaScript\nDESCRIPTION: Creates the component's DOM element with optional tag name and attributes. This method is inherited from the parent component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PosterImage.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateEl( [tagName], [attributes] )\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The context of the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersButton.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Event Listener Example in Video.js\nDESCRIPTION: Example showing how to add an event listener to a Video.js component with the proper context binding.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TimeDivider.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Getting a Component's ID in Video.js\nDESCRIPTION: Method to retrieve a component's unique identifier. This method is inherited from the component.js file and returns the ID of the component as a string.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CaptionsTrack.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = myComponent.id();\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor with Init Property in CoreObject\nDESCRIPTION: Shows how to define a constructor using the init property when extending CoreObject.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CoreObject.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Animal = CoreObject.extend({\n  init: function(name, sound){\n    this.name = name;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Component ID in JavaScript\nDESCRIPTION: Retrieves the unique identifier string for a Video.js component instance. This method is inherited from the base Component class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = myComponent.id();\n```\n\n----------------------------------------\n\nTITLE: Loop Option Example\nDESCRIPTION: Setting loop option in HTML and JSON format.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<video loop ...>\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Shows how to deep merge options objects for child components in Video.js. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.OffTextTrackMenuItem.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Initializing LoadingSpinner Component in Video.js\nDESCRIPTION: Method to initialize a new LoadingSpinner instance with player and options parameters. This is the constructor method for the LoadingSpinner component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.LoadingSpinner.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninit( player, options )\n\n##### PARAMETERS: \n* __player__ \n* __options__\n```\n\n----------------------------------------\n\nTITLE: Initializing PosterImage Component in JavaScript\nDESCRIPTION: Initializes the PosterImage component with a player and options. This method is called when creating a new instance of the component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PosterImage.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n```\n\n----------------------------------------\n\nTITLE: Flat UI Project Structure\nDESCRIPTION: Directory structure showing the organization of files and assets in the Flat UI project, including compiled CSS, JS, fonts, and documentation\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/flat-ui/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nflat-ui/\n├── dist/\n|   ├── css/\n|   |   ├── vendors/\n│   |   ├── flat-ui.css\n│   |   └── flat-ui.min.css\n|   ├── js/\n|   |   ├── vendors/\n│   |   ├── flat-ui.js\n│   |   └── flat-ui.min.js\n|   ├── fonts/\n|   |   ├── lato/\n|   |   └── glyphicons/\n|   |        ├── flat-ui-icons-regular.eot\n|   |        ├── flat-ui-icons-regular.svg\n|   |        ├── flat-ui-icons-regular.ttf\n|   |        ├── flat-ui-icons-regular.woff\n|   |        └── selection.json\n|   ├── img/\n|   └── index.html\n├── docs/\n|   ├── examples/\n|   ├── components.html\n|   ├── getting-started.html\n|   └── template.html\n├── fonts/\n|   ├── glyphicons/\n|   └── lato/\n├── img/\n├── js/\n└── less/\n    ├── mixins/\n    ├── modules/\n    ├── flat-ui.less\n    ├── mixins.less\n    └── variables.less\n```\n\n----------------------------------------\n\nTITLE: Building CSS Class for SubtitlesButton in Video.js\nDESCRIPTION: Builds the CSS class name for the SubtitlesButton component. This method allows sub-components to stack CSS class names and is inherited from the parent class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesButton.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbuildCSSClass()\n```\n\n----------------------------------------\n\nTITLE: Triggering Events on Video.js Components - JavaScript\nDESCRIPTION: Illustrates how to manually trigger an event on a Video.js component using either an event type string or an event object with a type attribute. This allows users to programmatically fire events, which can be handled by previously registered listeners. Requires a component instance and accepts event type strings or event-like objects. Returns the component for chaining.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeControl.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Width Option Example\nDESCRIPTION: Setting video width in HTML and JSON format.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"640\" ...>\n```\n\n----------------------------------------\n\nTITLE: Poster Option Example\nDESCRIPTION: Setting poster image option in HTML and JSON format.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<video poster=\"myPoster.jpg\" ...>\n```\n\n----------------------------------------\n\nTITLE: Height Option Example\nDESCRIPTION: Setting video height in HTML and JSON format.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<video height=\"480\" ...>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player Instance for Component in JavaScript\nDESCRIPTION: Returns the component's player instance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nplayer()\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Example in Video.js\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component with proper context binding.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.RemainingTimeDisplay.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in VideoJS Component (JavaScript)\nDESCRIPTION: Demonstrates how to add an event listener to a VideoJS component. The context of the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ControlBar.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Component Name in JavaScript\nDESCRIPTION: Gets the name of a component, which is often used for reference. Returns a string value representing the component's name.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Flash.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar name = myComponent.name();\n```\n\n----------------------------------------\n\nTITLE: Initializing Component Children in Video.js\nDESCRIPTION: Shows how to initialize child components in Video.js with different configuration options. Demonstrates both object and array syntax for defining children.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesTrack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// Using array syntax\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Video.js ChaptersTrack Usage Example\nDESCRIPTION: Example showing how to add a child component in Video.js\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrack.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Event on Media Element in JavaScript\nDESCRIPTION: Handles a tap event on the media element. By default, it toggles the user activity state, which affects the visibility of controls.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nonTap()\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of CoreObject Class\nDESCRIPTION: Example of creating an instance of a CoreObject-extended class using the create method.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CoreObject.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar fluffy = Animal.create('Fluffy');\nfluffy.getName(); // -> Fluffy\n```\n\n----------------------------------------\n\nTITLE: Subtitle Track Font Size Adjustment\nDESCRIPTION: Adjusts the font size of subtitle text when entering/exiting fullscreen mode. Method is inherited from TextTrack.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesTrack.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadjustFontSize() {\n  if (this.player_.isFullScreen) {\n    // Increase font size for fullscreen\n    this.el_.style.fontSize = '2em';\n  } else {\n    // Reset font size for normal mode\n    this.el_.style.fontSize = '1em';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting or Getting Component Width in JavaScript\nDESCRIPTION: Sets or gets the width of the component using CSS values. Only works with pixel values for setting video tag dimensions. Some percent values can be used, but may not return actual computed width.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nwidth( [num], skipListeners )\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener in JavaScript\nDESCRIPTION: Removes an event listener from the component's element. Can remove all listeners for a specific event type or all listeners entirely.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Flash.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyComponent.off(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Video.js Components\nDESCRIPTION: Example of adding an event listener to a Video.js player component. The listener function is called with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaLoader.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Shows how to deep merge options objects for child components in Video.js. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersButton.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Element for TextTrackDisplay in JavaScript\nDESCRIPTION: This inherited method creates the component's DOM element. It can be customized to create specific elements for the TextTrackDisplay.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackDisplay.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateEl( [tagName], [attributes] )\n```\n\n----------------------------------------\n\nTITLE: Setting Component Dimensions in JavaScript\nDESCRIPTION: Sets both width and height of the component at the same time. This method is inherited from the parent component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PosterImage.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndimensions( width, height )\n```\n\n----------------------------------------\n\nTITLE: Event Listener Removal in Video.js\nDESCRIPTION: Demonstrates removing event listeners from a component. Can remove specific listener functions or all listeners for an event type.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Menu.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyComponent.off(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: VideoJS Component Options Merging Example\nDESCRIPTION: Shows how to merge component options objects deeply, allowing child component options to be overridden while preserving defaults. Useful for component configuration inheritance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.FullscreenToggle.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Component Options in Video.js\nDESCRIPTION: Example showing how to merge component options deeply, allowing for easy override of individual child component options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.DurationDisplay.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Volume Handle Element\nDESCRIPTION: Code example showing how to create a component's DOM element with specified tag name and attributes.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeHandle.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateEl: function(tagName, attributes) {\n  return vjs.Component.prototype.createEl.call(this, 'div', {\n    className: 'vjs-volume-handle'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DurationDisplay Component in Video.js\nDESCRIPTION: Initialization method for the DurationDisplay component that takes player and options parameters. This is part of the control bar's time display functionality.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.DurationDisplay.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n\n##### PARAMETERS: \n* __player__ \n* __options__ \n\n_defined in_: [src/js/control-bar/time-display.js#L45](https://github.com/videojs/video.js/blob/master/src/js/control-bar/time-display.js#L45)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Video.js Component in JavaScript\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component using the `on` method. The provided function (`myFunc`) will be executed when the specified event (`eventName`) is fired on the component (`myPlayer`), with the component instance as the context (`this`). Requires a `vjs.Component` instance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SliderHandle.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners from Video.js Component\nDESCRIPTION: Removes an event listener from the component's element. Accepts optional 'type' (string) and 'fn' (function) parameters. If 'type' is omitted, all listeners are removed. If 'fn' is omitted, all listeners for the specified 'type' are removed. Inherited from the base Component class.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrack.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.off(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Video.js ChaptersTrack Options Example\nDESCRIPTION: Example showing how to pass options when adding child components\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrack.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing OffTextTrackMenuItem Component in Video.js\nDESCRIPTION: Initializes the OffTextTrackMenuItem component with player and options parameters. This component is used to create a menu item that allows users to turn off specific text track types.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.OffTextTrackMenuItem.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options )\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Element for ChaptersTrackMenuItem in JavaScript\nDESCRIPTION: This inherited method creates the component's DOM element. It can specify a tag name and attributes for the element.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrackMenuItem.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateEl( [tagName], [attributes] )\n```\n\n----------------------------------------\n\nTITLE: Defining RTMP Source using Slash Separator in HTML\nDESCRIPTION: Illustrates an alternative syntax for structuring the RTMP source URL within an HTML `<source>` tag. Instead of using `&` as the separator between the RTMP connection string and the stream string, the last forward slash (`/`) can optionally be used. This format is also valid for specifying RTMP sources intended for Flash streaming playback.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/tech.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<source src=\"rtmp://your.streaming.provider.net/cfx/st/mp4:video.mp4\" type=\"rtmp/mp4\">\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Video.js Components\nDESCRIPTION: Demonstrates how to add and handle events in Video.js components, including one-time event listeners and event removal.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesTrack.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Starting a new feature branch with contribflow\nDESCRIPTION: Contribflow command to create a new feature branch for developing new functionality or fixing non-urgent bugs in Video.js.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncontrib feature start\n```\n\n----------------------------------------\n\nTITLE: Spanish Language Dictionary Structure in JSON\nDESCRIPTION: Example JSON structure showing Spanish language translations for Video.js player interface elements.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/languages.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Play\": \"Juego\",\n  \"Pause\": \"Pausa\",\n  \"Current Time\": \"Tiempo Actual\",\n  \"Duration Time\": \"Tiempo de Duracion\",\n  \"Remaining Time\": \"Tiempo Restante\",\n  \"Stream Type\": \"Tipo de Transmision\",\n  \"LIVE\": \"En Vivo\",\n  \"Loaded\": \"Cargado\",\n  \"Progress\": \"Progreso\",\n  \"Fullscreen\": \"Pantalla Completa\",\n  \"Non-Fullscreen\": \"No Pantalla Completa\",\n  \"Mute\": \"Mudo\",\n  \"Unmuted\": \"Activar sonido\",\n  \"Playback Rate\": \"Reproduccion Cambio\",\n  \"Subtitles\": \"Subtitulos\",\n  \"subtitles off\": \"subtitulos fuera\",\n  \"Captions\": \"Subtitulos\",\n  \"captions off\": \"subtitulos fuera\",\n  \"Chapters\": \"Capitulos\",\n  \"You aborted the video playback\": \"Ha anulado la reproduccion de video\",\n  \"A network error caused the video download to fail part-way.\": \"Un error en la red hizo que la descarga de video falle parte del camino.\",\n  \"The video could not be loaded, either because the server or network failed or because the format is not supported.\": \"El video no se puede cargar, ya sea porque el servidor o la red fracasaron o porque el formato no es compatible.\",\n  \"The video playback was aborted due to a corruption problem or because the video used features your browser did not support.\": \"La reproduccion de video se ha cancelado debido a un problema de corrupcion o porque el video utilizado cuenta con su navegador no soporta.\",\n  \"No compatible source was found for this video.\": \"Ninguna fuente compatible se encontro para este video.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Close Button Per Individual Toast\nDESCRIPTION: JavaScript code showing how to configure close button visibility for an individual toast notification.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntoaster.pop({\n                type: 'error',\n                title: 'Title text',\n                body: 'Body text',\n                showCloseButton: true\n            });\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Element for TextTrackMenuItem in JavaScript\nDESCRIPTION: Creates the component's DOM element. This method is inherited from the parent MenuItem class and can be overridden to customize the element creation.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackMenuItem.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateEl( [tagName], [attributes] )\n\n##### PARAMETERS: \n* __tagName__ `String` _(OPTIONAL)_ Element's node type. e.g. 'div'\n* __attributes__ `Object` _(OPTIONAL)_ An object of element attributes that should be set on the element\n```\n\n----------------------------------------\n\nTITLE: Configuring Close Button Per Toast Type\nDESCRIPTION: HTML snippet showing how to configure close button visibility based on toast types like warning or error.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<toaster-container toaster-options=\"\n    {'close-button':{ 'toast-warning': true, 'toast-error': false } }\">\n</toaster-container>\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Video.js Components\nDESCRIPTION: Demonstrates how to add, remove and trigger events on Video.js components including one-time event listeners.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n\n// Remove event listener\nmyComponent.off(\"eventName\", myFunc);\n\n// Trigger event\nmyComponent.trigger('eventName');\nmyComponent.trigger({'type':'eventName'});\n```\n\n----------------------------------------\n\nTITLE: Displaying BCP 47 Language Codes in an HTML Table\nDESCRIPTION: This HTML code defines a multi-column table structure used to display a list of BCP 47 language codes alongside their corresponding language names. Each row represents a language, with the first cell containing the two-letter code and the second cell containing the full language name. The main list is distributed across multiple inner tables nested within a parent table for layout.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/tracks.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellspacing=\"5\" cellpadding=\"5\">\n  <tr>\n    <td>\n\n      <table>\n        <tr><th>ab<th><td>Abkhazian</td></tr>\n        <tr><th>aa<th><td>Afar</td></tr>\n        <tr><th>af<th><td>Afrikaans</td></tr>\n        <tr><th>sq<th><td>Albanian</td></tr>\n        <tr><th>am<th><td>Amharic</td></tr>\n        <tr><th>ar<th><td>Arabic</td></tr>\n        <tr><th>an<th><td>Aragonese</td></tr>\n        <tr><th>hy<th><td>Armenian</td></tr>\n        <tr><th>as<th><td>Assamese</td></tr>\n        <tr><th>ay<th><td>Aymara</td></tr>\n        <tr><th>az<th><td>Azerbaijani</td></tr>\n        <tr><th>ba<th><td>Bashkir</td></tr>\n        <tr><th>eu<th><td>Basque</td></tr>\n        <tr><th>bn<th><td>Bengali (Bangla)</td></tr>\n        <tr><th>dz<th><td>Bhutani</td></tr>\n        <tr><th>bh<th><td>Bihari</td></tr>\n        <tr><th>bi<th><td>Bislama</td></tr>\n        <tr><th>br<th><td>Breton</td></tr>\n        <tr><th>bg<th><td>Bulgarian</td></tr>\n        <tr><th>my<th><td>Burmese</td></tr>\n        <tr><th>be<th><td>Byelorussian (Belarusian)</td></tr>\n        <tr><th>km<th><td>Cambodian</td></tr>\n        <tr><th>ca<th><td>Catalan</td></tr>\n        <tr><th>zh<th><td>Chinese (Simplified)</td></tr>\n        <tr><th>zh<th><td>Chinese (Traditional)</td></tr>\n        <tr><th>co<th><td>Corsican</td></tr>\n        <tr><th>hr<th><td>Croatian</td></tr>\n        <tr><th>cs<th><td>Czech</td></tr>\n        <tr><th>da<th><td>Danish</td></tr>\n        <tr><th>nl<th><td>Dutch</td></tr>\n        <tr><th>en<th><td>English</td></tr>\n        <tr><th>eo<th><td>Esperanto</td></tr>\n        <tr><th>et<th><td>Estonian</td></tr>\n        <tr><th>fo<th><td>Faeroese</td></tr>\n        <tr><th>fa<th><td>Farsi</td></tr>\n        <tr><th>fj<th><td>Fiji</td></tr>\n        <tr><th>fi<th><td>Finnish</td></tr>\n      </table>\n      \n    </td>\n    <td>\n      \n      <table>\n        <tr><th>fr<th><td>French</td></tr>\n        <tr><th>fy<th><td>Frisian</td></tr>\n        <tr><th>gl<th><td>Galician</td></tr>\n        <tr><th>gd<th><td>Gaelic (Scottish)</td></tr>\n        <tr><th>gv<th><td>Gaelic (Manx)</td></tr>\n        <tr><th>ka<th><td>Georgian</td></tr>\n        <tr><th>de<th><td>German</td></tr>\n        <tr><th>el<th><td>Greek</td></tr>\n        <tr><th>kl<th><td>Greenlandic</td></tr>\n        <tr><th>gn<th><td>Guarani</td></tr>\n        <tr><th>gu<th><td>Gujarati</td></tr>\n        <tr><th>ht<th><td>Haitian Creole</td></tr>\n        <tr><th>ha<th><td>Hausa</td></tr>\n        <tr><th>he<th><td>Hebrew</td></tr>\n        <tr><th>hi<th><td>Hindi</td></tr>\n        <tr><th>hu<th><td>Hungarian</td></tr>\n        <tr><th>is<th><td>Icelandic</td></tr>\n        <tr><th>io<th><td>Ido</td></tr>\n        <tr><th>id<th><td>Indonesian</td></tr>\n        <tr><th>ia<th><td>Interlingua</td></tr>\n        <tr><th>ie<th><td>Interlingue</td></tr>\n        <tr><th>iu<th><td>Inuktitut</td></tr>\n        <tr><th>ik<th><td>Inupiak</td></tr>\n        <tr><th>ga<th><td>Irish</td></tr>\n        <tr><th>it<th><td>Italian</td></tr>\n        <tr><th>ja<th><td>Japanese</td></tr>\n        <tr><th>jv<th><td>Javanese</td></tr>\n        <tr><th>kn<th><td>Kannada</td></tr>\n        <tr><th>ks<th><td>Kashmiri</td></tr>\n        <tr><th>kk<th><td>Kazakh</td></tr>\n        <tr><th>rw<th><td>Kinyarwanda (Ruanda)</td></tr>\n        <tr><th>ky<th><td>Kirghiz</td></tr>\n        <tr><th>rn<th><td>Kirundi (Rundi)</td></tr>\n        <tr><th>ko<th><td>Korean</td></tr>\n        <tr><th>ku<th><td>Kurdish</td></tr>\n        <tr><th>lo<th><td>Laothian</td></tr>\n        <tr><th>la<th><td>Latin</td></tr>\n      </table>\n      \n    </td>\n    <td>\n      \n      <table>\n        <tr><th>lv<th><td>Latvian (Lettish)</td></tr>\n        <tr><th>li<th><td>Limburgish ( Limburger)</td></tr>\n        <tr><th>ln<th><td>Lingala</td></tr>\n        <tr><th>lt<th><td>Lithuanian</td></tr>\n        <tr><th>mk<th><td>Macedonian</td></tr>\n        <tr><th>mg<th><td>Malagasy</td></tr>\n        <tr><th>ms<th><td>Malay</td></tr>\n        <tr><th>ml<th><td>Malayalam</td></tr>\n        <tr><th>mt<th><td>Maltese</td></tr>\n        <tr><th>mi<th><td>Maori</td></tr>\n        <tr><th>mr<th><td>Marathi</td></tr>\n        <tr><th>mo<th><td>Moldavian</td></tr>\n        <tr><th>mn<th><td>Mongolian</td></tr>\n        <tr><th>na<th><td>Nauru</td></tr>\n        <tr><th>ne<th><td>Nepali</td></tr>\n        <tr><th>no<th><td>Norwegian</td></tr>\n        <tr><th>oc<th><td>Occitan</td></tr>\n        <tr><th>or<th><td>Oriya</td></tr>\n        <tr><th>om<th><td>Oromo (Afan, Galla)</td></tr>\n        <tr><th>ps<th><td>Pashto (Pushto)</td></tr>\n        <tr><th>pl<th><td>Polish</td></tr>\n        <tr><th>pt<th><td>Portuguese</td></tr>\n        <tr><th>pa<th><td>Punjabi</td></tr>\n        <tr><th>qu<th><td>Quechua</td></tr>\n        <tr><th>rm<th><td>Rhaeto-Romance</td></tr>\n        <tr><th>ro<th><td>Romanian</td></tr>\n        <tr><th>ru<th><td>Russian</td></tr>\n        <tr><th>sm<th><td>Samoan</td></tr>\n        <tr><th>sg<th><td>Sangro</td></tr>\n        <tr><th>sa<th><td>Sanskrit</td></tr>\n        <tr><th>sr<th><td>Serbian</td></tr>\n        <tr><th>sh<th><td>Serbo-Croatian</td></tr>\n        <tr><th>st<th><td>Sesotho</td></tr>\n        <tr><th>tn<th><td>Setswana</td></tr>\n        <tr><th>sn<th><td>Shona</td></tr>\n        <tr><th>ii<th><td>Sichuan Yi</td></tr>\n        <tr><th>sd<th><td>Sindhi</td></tr>\n      </table>\n      \n    </td>\n    <td>\n      \n      <table>\n        <tr><th>si<th><td>Sinhalese</td></tr>\n        <tr><th>ss<th><td>Siswati</td></tr>\n        <tr><th>sk<th><td>Slovak</td></tr>\n        <tr><th>sl<th><td>Slovenian</td></tr>\n        <tr><th>so<th><td>Somali</td></tr>\n        <tr><th>es<th><td>Spanish</td></tr>\n        <tr><th>su<th><td>Sundanese</td></tr>\n        <tr><th>sw<th><td>Swahili (Kiswahili)</td></tr>\n        <tr><th>sv<th><td>Swedish</td></tr>\n        <tr><th>tl<th><td>Tagalog</td></tr>\n        <tr><th>tg<th><td>Tajik</td></tr>\n        <tr><th>ta<th><td>Tamil</td></tr>\n        <tr><th>tt<th><td>Tatar</td></tr>\n        <tr><th>te<th><td>Telugu</td></tr>\n        <tr><th>th<th><td>Thai</td></tr>\n        <tr><th>bo<th><td>Tibetan</td></tr>\n        <tr><th>ti<th><td>Tigrinya</td></tr>\n        <tr><th>to<th><td>Tonga</td></tr>\n        <tr><th>ts<th><td>Tsonga</td></tr>\n        <tr><th>tr<th><td>Turkish</td></tr>\n        <tr><th>tk<th><td>Turkmen</td></tr>\n        <tr><th>tw<th><td>Twi</td></tr>\n        <tr><th>ug<th><td>Uighur</td></tr>\n        <tr><th>uk<th><td>Ukrainian</td></tr>\n        <tr><th>ur<th><td>Urdu</td></tr>\n        <tr><th>uz<th><td>Uzbek</td></tr>\n        <tr><th>vi<th><td>Vietnamese</td></tr>\n        <tr><th>vo<th><td>Volapük</td></tr>\n        <tr><th>wa<th><td>Wallon</td></tr>\n        <tr><th>cy<th><td>Welsh</td></tr>\n        <tr><th>wo<th><td>Wolof</td></tr>\n        <tr><th>xh<th><td>Xhosa</td></tr>\n        <tr><th>yi<th><td>Yiddish</td></tr>\n        <tr><th>yo<th><td>Yoruba</td></tr>\n        <tr><th>zu<th><td>Zulu</td></tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Adding upstream remote to Git repository\nDESCRIPTION: Git command to add the original Video.js repository as a remote named 'upstream' to facilitate pulling future updates from the main project.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/videojs/video.js.git\n```\n\n----------------------------------------\n\nTITLE: Running the WebWorker STOMP Example Server\nDESCRIPTION: Command to start the Node.js server that hosts the WebWorker STOMP example. Run this command in the 'example' parent directory to start the server, then access the example at '/webworker/' on localhost port 8080.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/example/webworker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ node server.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Body Output Type\nDESCRIPTION: HTML snippet showing how to globally configure the body output type for all toast notifications.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<toaster-container toaster-options=\"'body-output-type': 'template'\"></toaster-container>\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener in Video.js Component\nDESCRIPTION: Removes an event listener from the component's element. Can remove all listeners for a specific event type or all listeners entirely.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyComponent.off(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Resulting DOM Structure Example\nDESCRIPTION: Illustrates the HTML structure generated when adding a BigPlayButton component to the player.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/components.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n    <!-- Player Element -->\n    <div class=\"video-js\">\n      <!-- BigPlayButton Element -->\n      <div class=\"vjs-big-play-button\"></div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Video.js directory\nDESCRIPTION: Command to change directory to the newly cloned Video.js repository folder for beginning development work.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd video.js\n```\n\n----------------------------------------\n\nTITLE: Running tests\nDESCRIPTION: Command to execute the test suite for the STOMP.js library using Cake build tool.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cake test\n```\n\n----------------------------------------\n\nTITLE: Building CSS Class in Video.js Component\nDESCRIPTION: The buildCSSClass method allows sub-components to stack CSS class names. It returns the constructed class name as a string.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeBar.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbuildCSSClass()\n```\n\n----------------------------------------\n\nTITLE: Component Options Merging Example - JavaScript\nDESCRIPTION: Example demonstrating deep merging of component options objects, showing how child component options can be selectively overridden while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.LoadingSpinner.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Child Component in JavaScript\nDESCRIPTION: Removes a child component from the component's list of children and removes the child component's element from the component's element.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nremoveChild( component )\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example\nDESCRIPTION: Example demonstrating how to add a child component to a parent component with optional configuration.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeHandle.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n```\n\n----------------------------------------\n\nTITLE: Submitting Pull Request with Contrib\nDESCRIPTION: Command to submit a pull request using the contrib tool while in a feature branch.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncontrib feature submit\n```\n\n----------------------------------------\n\nTITLE: Installing STOMP.js via npm\nDESCRIPTION: Command to install the STOMP.js library via npm package manager for Node.js applications.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install stompjs\n```\n\n----------------------------------------\n\nTITLE: Installing AngularJS via bower\nDESCRIPTION: Command to install AngularJS package using bower package manager\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbower install angular\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class in Video.js Component\nDESCRIPTION: The addClass method adds a CSS class name to the component's element. It returns the component instance for chaining.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeBar.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\naddClass( classToAdd )\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component to VolumeLevel in JavaScript\nDESCRIPTION: Adds a child component inside the VolumeLevel component. This method is inherited from the base Component class and allows for nested component structures.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeLevel.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\naddChild( child, [options] )\n\n##### PARAMETERS: \n* __child__ `String|vjs.Component` The class name or instance of a child to add\n* __options__ `Object` _(OPTIONAL)_ Options, including options to be passed to children of the child.\n\n##### RETURNS: \n* `vjs.Component` The child component (created by this process if a string was used)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js dependencies\nDESCRIPTION: NPM command to install all required Node.js modules defined in the package.json file for the Video.js project.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Flat UI Free via Bower\nDESCRIPTION: Command to install Flat UI using the Bower package manager\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/flat-ui/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install flat-ui\n```\n\n----------------------------------------\n\nTITLE: Handling Click Event in Video.js Media Component\nDESCRIPTION: Handles a click on the media element. By default, it will play/pause the media.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nonClick( event )\n```\n\n----------------------------------------\n\nTITLE: Including AngularJS script from bower\nDESCRIPTION: HTML script tag to include AngularJS from bower_components directory after bower installation\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/bower_components/angular/angular.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Video.js Component HTML Element Creation\nDESCRIPTION: Shows HTML element structure created by the PlayProgressBar component in the Video.js player control bar.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayProgressBar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class='my-component'></div>\n<div class='my-component'><div class=\"my-button\">myButton<div></div>\n```\n\n----------------------------------------\n\nTITLE: State Machine ASCII Diagram\nDESCRIPTION: ASCII art diagram showing a state machine with three states (S0, S1, S2) and transitions labeled A, B, and C. The diagram includes an initial state marker (*), forward transitions (A, B), and a backward transition (C) forming a loop.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/scope/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+---------------------------------------------------+\n|                        SM                         |\n+---------------------------------------------------+\n|                                                   |\n|     +--------+   A   +--------+   B   +--------+  |\n| *-->|   S0   |------>|   S1   |------>|   S2   |  |\n|     +--------+       +--------+       +--------+  |\n|         ^                                  |      |\n|         |                 C                |      |\n|         +----------------------------------+      |\n|                                                   |\n+---------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Running Karma tests for Video.js\nDESCRIPTION: Grunt command to run QUnit tests using Karma, which allows testing in real browsers instead of just headless browsers like PhantomJS.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngrunt karma:dev\n```\n\n----------------------------------------\n\nTITLE: Pulling updates from upstream Video.js repository\nDESCRIPTION: Git commands to update your local master branch with the latest changes from the main Video.js repository. This ensures your fork stays current.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Installing Flat UI Free via Git Clone\nDESCRIPTION: Command to clone the Flat UI repository from GitHub\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/flat-ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/designmodo/Flat-UI.git\n```\n\n----------------------------------------\n\nTITLE: Subtitle Track Activation Control\nDESCRIPTION: Controls the activation state of subtitle tracks, managing whether they are showing or hidden. Inherited method.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesTrack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nactivate() {\n  // Turn on cue tracking for showing/hidden tracks\n  this.mode = 'showing';\n  this.processCues();\n}\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be added to files to apply the Apache License 2.0, with placeholder fields for copyright year and owner information.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/docs/src/info/license.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Installing AngularJS-Toaster with Bower\nDESCRIPTION: Command to install the AngularJS-Toaster library using Bower package manager.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbower install --save angularjs-toaster\n```\n\n----------------------------------------\n\nTITLE: Installing contribflow globally on Unix systems\nDESCRIPTION: Command to install the contribflow package globally on Unix-based systems using npm with superuser privileges. Contribflow is a git workflow tool for managing feature/hotfix branches.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g contribflow\n```\n\n----------------------------------------\n\nTITLE: Getting Component Name in Video.js\nDESCRIPTION: Retrieves the component's name, which is often used to reference the component. Returns a string representing the name.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Html5.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar name = myComponent.name();\n```\n\n----------------------------------------\n\nTITLE: Deleting Hotfix Branch\nDESCRIPTION: Command to clean up and remove hotfix branch both locally and remotely using contrib tool.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncontrib hotfix delete\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Element for Subtitle Track\nDESCRIPTION: Creates a basic div element to contain subtitle cue text. This is an inherited method from the TextTrack component.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesTrack.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateEl() {\n  return vjs.Component.prototype.createEl('div', {\n    className: 'vjs-subtitles'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Git Changes in Pull Requests\nDESCRIPTION: Example of using git force push command to update an existing pull request with reworked commits.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Animate with bower\nDESCRIPTION: JavaScript code to add ngAnimate as a dependency in an Angular application when installed via bower.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular-animate/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nangular.module('myApp', ['ngAnimate']);\n```\n\n----------------------------------------\n\nTITLE: Installing grunt-cli globally on Windows\nDESCRIPTION: Command to install the grunt-cli package globally on Windows systems using npm. This is required for building and testing Video.js.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g grunt-cli\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Branch\nDESCRIPTION: Command to clean up and remove feature branch both locally and remotely using contrib tool.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncontrib feature delete\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Element for SeekHandle\nDESCRIPTION: Method to create the component's DOM element for the seek handle, extending the base createEl method.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SeekHandle.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateEl( [tagName], [attributes] ) {\n  // Create the component's DOM element\n  // @param {String} tagName - Element's node type. e.g. 'div'\n  // @param {Object} attributes - An object of element attributes\n}\n```\n\n----------------------------------------\n\nTITLE: State Machine ASCII Diagram\nDESCRIPTION: ASCII art diagram showing a state machine with two states (LOCKED and UNLOCKED) and their transitions based on PUSH and COIN events. The diagram includes entry/exit action placeholders and directional arrows showing state transitions.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/zookeeper/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+----------------------------------------------------------------+\n|                              SM                                |\n+----------------------------------------------------------------+\n|                                                                |\n|         +----------------+          +----------------+         |\n|     *-->|     LOCKED     |          |    UNLOCKED    |         |\n|         +----------------+          +----------------+         |\n|     +---| entry/         |          | entry/         |---+     |\n|     |   | exit/          |          | exit/          |   |     |\n|     |   |                |          |                |   |     |\n| PUSH|   |                |---COIN-->|                |   |COIN |\n|     |   |                |          |                |   |     |\n|     |   |                |          |                |   |     |\n|     |   |                |<--PUSH---|                |   |     |\n|     +-->|                |          |                |<--+     |\n|         |                |          |                |         |\n|         +----------------+          +----------------+         |\n|                                                                |\n+----------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Visualizing Local vs External State Transitions in ASCII Art\nDESCRIPTION: This ASCII diagram illustrates the difference between local and external transitions in a state machine. It shows how transitions flow between states in both scenarios, with arrows indicating the direction of state changes.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/docs/src/statecharts/statechart4.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+---------------------------------------------------------+\n|                                                         |\n|           LOCAL                        EXTERNAL         |\n|   +-------------------+        +-------------------+    |\n|   |      +----------+ |        |      +----------+ |    |\n|   |      |          | |     +-------->|          | |    |\n|   |----->|          | |     |  |      |          | |    |\n|   |      |          | |     +--|      |          | |    |\n|   |      +----------+ |        |      +----------+ |    |\n|   +-------------------+        +-------------------+    |\n|                                                         |\n|                                                         |\n|   +-------------------+        +-------------------+    |\n|   |      +----------+ |        |      +----------+ |    |\n|   |      |          | |     +---------|          | |    |\n|   |<-----|          | |     |  |      |          | |    |\n|   |      |          | |     +->|      |          | |    |\n|   |      +----------+ |        |      +----------+ |    |\n|   +-------------------+        +-------------------+    |\n|                                                         |\n+---------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Showing Component Element in JavaScript\nDESCRIPTION: Shows the component element if it was previously hidden.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nshow()\n```\n\n----------------------------------------\n\nTITLE: Checking Out Feature Branch\nDESCRIPTION: Command to switch to a specific feature or issue branch before cleanup.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout (branchname)\n```\n\n----------------------------------------\n\nTITLE: Initializing MediaLoader Component in Video.js\nDESCRIPTION: Initializes the MediaLoader component with player, options, and ready callback. This method is called when creating a new instance of MediaLoader.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaLoader.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options, ready )\n\n##### PARAMETERS: \n* __player__ \n* __options__ \n* __ready__ \n\n_defined in_: [src/js/media/loader.js#L9](https://github.com/videojs/video.js/blob/master/src/js/media/loader.js#L9)\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Codes and Names in HTML Tables\nDESCRIPTION: This HTML snippet defines two adjacent tables (nested within a parent table structure not fully shown) containing lists of languages and their corresponding two-letter codes (likely ISO 639-1). Each row (`<tr>`) represents a language, with the code placed in a header cell (`<th>`) and the full language name in a data cell (`<td>`). This structure is suitable for presenting reference data clearly.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/languages.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n        <tr><th>li<th><td>Limburgish ( Limburger)</td></tr>\\n        <tr><th>ln<th><td>Lingala</td></tr>\\n        <tr><th>lt<th><td>Lithuanian</td></tr>\\n        <tr><th>mk<th><td>Macedonian</td></tr>\\n        <tr><th>mg<th><td>Malagasy</td></tr>\\n        <tr><th>ms<th><td>Malay</td></tr>\\n        <tr><th>ml<th><td>Malayalam</td></tr>\\n        <tr><th>mt<th><td>Maltese</td></tr>\\n        <tr><th>mi<th><td>Maori</td></tr>\\n        <tr><th>mr<th><td>Marathi</td></tr>\\n        <tr><th>mo<th><td>Moldavian</td></tr>\\n        <tr><th>mn<th><td>Mongolian</td></tr>\\n        <tr><th>na<th><td>Nauru</td></tr>\\n        <tr><th>ne<th><td>Nepali</td></tr>\\n        <tr><th>no<th><td>Norwegian</td></tr>\\n        <tr><th>oc<th><td>Occitan</td></tr>\\n        <tr><th>or<th><td>Oriya</td></tr>\\n        <tr><th>om<th><td>Oromo (Afan, Galla)</td></tr>\\n        <tr><th>ps<th><td>Pashto (Pushto)</td></tr>\\n        <tr><th>pl<th><td>Polish</td></tr>\\n        <tr><th>pt<th><td>Portuguese</td></tr>\\n        <tr><th>pa<th><td>Punjabi</td></tr>\\n        <tr><th>qu<th><td>Quechua</td></tr>\\n        <tr><th>rm<th><td>Rhaeto-Romance</td></tr>\\n        <tr><th>ro<th><td>Romanian</td></tr>\\n        <tr><th>ru<th><td>Russian</td></tr>\\n        <tr><th>sm<th><td>Samoan</td></tr>\\n        <tr><th>sg<th><td>Sangro</td></tr>\\n        <tr><th>sa<th><td>Sanskrit</td></tr>\\n        <tr><th>sr<th><td>Serbian</td></tr>\\n        <tr><th>sh<th><td>Serbo-Croatian</td></tr>\\n        <tr><th>st<th><td>Sesotho</td></tr>\\n        <tr><th>tn<th><td>Setswana</td></tr>\\n        <tr><th>sn<th><td>Shona</td></tr>\\n        <tr><th>ii<th><td>Sichuan Yi</td></tr>\\n        <tr><th>sd<th><td>Sindhi</td></tr>\\n      </table>\\n      \\n    </td>\\n    <td>\\n      \\n      <table>\\n        <tr><th>si<th><td>Sinhalese</td></tr>\\n        <tr><th>ss<th><td>Siswati</td></tr>\\n        <tr><th>sk<th><td>Slovak</td></tr>\\n        <tr><th>sl<th><td>Slovenian</td></tr>\\n        <tr><th>so<th><td>Somali</td></tr>\\n        <tr><th>es<th><td>Spanish</td></tr>\\n        <tr><th>su<th><td>Sundanese</td></tr>\\n        <tr><th>sw<th><td>Swahili (Kiswahili)</td></tr>\\n        <tr><th>sv<th><td>Swedish</td></tr>\\n        <tr><th>tl<th><td>Tagalog</td></tr>\\n        <tr><th>tg<th><td>Tajik</td></tr>\\n        <tr><th>ta<th><td>Tamil</td></tr>\\n        <tr><th>tt<th><td>Tatar</td></tr>\\n        <tr><th>te<th><td>Telugu</td></tr>\\n        <tr><th>th<th><td>Thai</td></tr>\\n        <tr><th>bo<th><td>Tibetan</td></tr>\\n        <tr><th>ti<th><td>Tigrinya</td></tr>\\n        <tr><th>to<th><td>Tonga</td></tr>\\n        <tr><th>ts<th><td>Tsonga</td></tr>\\n        <tr><th>tr<th><td>Turkish</td></tr>\\n        <tr><th>tk<th><td>Turkmen</td></tr>\\n        <tr><th>tw<th><td>Twi</td></tr>\\n        <tr><th>ug<th><td>Uighur</td></tr>\\n        <tr><th>uk<th><td>Ukrainian</td></tr>\\n        <tr><th>ur<th><td>Urdu</td></tr>\\n        <tr><th>uz<th><td>Uzbek</td></tr>\\n        <tr><th>vi<th><td>Vietnamese</td></tr>\\n        <tr><th>vo<th><td>Volapük</td></tr>\\n        <tr><th>wa<th><td>Wallon</td></tr>\\n        <tr><th>cy<th><td>Welsh</td></tr>\\n        <tr><th>wo<th><td>Wolof</td></tr>\\n        <tr><th>xh<th><td>Xhosa</td></tr>\\n        <tr><th>yi<th><td>Yiddish</td></tr>\\n        <tr><th>yo<th><td>Yoruba</td></tr>\\n        <tr><th>zu<th><td>Zulu</td></tr>\\n      </table>\\n      \\n    </td>\\n  </tr>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Eclipse Project for Spring Statemachine Jepsen Tests\nDESCRIPTION: Commands for importing a Clojure Leiningen project into Eclipse by first generating a Maven POM file and then creating an Eclipse project configuration.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/jepsen/spring-statemachine-jepsen/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# lein pom\n# mvn eclipse:eclipse\n```\n\n----------------------------------------\n\nTITLE: Setting up a local development server\nDESCRIPTION: Commands to create a testing sandbox and start a Connect server via Grunt for local development and testing of Video.js.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncp sandbox/index.html.example sandbox/index.html\ngrunt connect\nopen http://localhost:9999/sandbox/index.html\n```\n\n----------------------------------------\n\nTITLE: Initializing SubtitlesButton Component in Video.js\nDESCRIPTION: Initializes the SubtitlesButton component with player, options, and ready callback. This method is called when creating a new instance of the SubtitlesButton.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesButton.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit( player, options, ready )\n```\n\n----------------------------------------\n\nTITLE: Adding Apache License Header\nDESCRIPTION: Standard Apache 2.0 license header template that must be included at the top of all new Java source files in the project.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage ...;\n```\n\n----------------------------------------\n\nTITLE: Component Options Merging Example\nDESCRIPTION: Demonstrates deep merging of component options objects, showing how child component options can be overridden while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TimeDivider.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a local sandbox for testing\nDESCRIPTION: Commands to copy the example index file to create a sandbox environment for testing Video.js changes in a browser.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncp sandbox/index.html.example sandbox/index.html\nopen sandbox/index.html\n```\n\n----------------------------------------\n\nTITLE: Creating VolumeLevel DOM Element in JavaScript\nDESCRIPTION: Creates the component's DOM element. This method is inherited from the base Component class and can be overridden to customize the element creation.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeLevel.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateEl( [tagName], [attributes] )\n\n##### PARAMETERS: \n* __tagName__ `String` _(OPTIONAL)_ Element's node type. e.g. 'div'\n* __attributes__ `Object` _(OPTIONAL)_ An object of element attributes that should be set on the element\n\n##### RETURNS: \n* `Element`\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Example in Video.js\nDESCRIPTION: Example showing how to add an event listener to a Video.js player component. The listener function is executed with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CurrentTimeDisplay.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Resize Event Documentation from Component System\nDESCRIPTION: Documents a resize EVENT that triggers when a component's width or height dimensions are modified. This event functionality is inherited from the component.js file at line 863.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.SubtitlesTrack.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nEVENT: 'resize'\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Options Example in Video.js\nDESCRIPTION: Example demonstrating how to merge component options deeply, allowing for easy override of individual child component options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.CurrentTimeDisplay.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Resize Event Handler - JavaScript\nDESCRIPTION: The resize event is fired automatically when the width and/or height of a component changes. This event is inherited from the component.js base file path shown in the reference.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrack.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nEVENT['resize']\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Video.js Skin with HTML\nDESCRIPTION: Example showing how to apply a custom skin class to the video element instead of using the default skin.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/skins.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video class=\"video-js my-custom-skin\" ...>\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Shows how to deep merge options objects for child components in Video.js. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MuteToggle.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Committing and pushing changes to Git\nDESCRIPTION: Git commands to add changes, commit them with a descriptive message, and push them to the remote repository during Video.js development.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -av\ngit push\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Git Repository\nDESCRIPTION: Command to push local changes to the remote repository origin.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Merging Options in Video.js Component\nDESCRIPTION: Illustrates the deep merging of options objects in Video.js components. This is used for merging options for child components, allowing easy override of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.ChaptersTrackMenuItem.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Installing grunt-cli globally on Unix systems\nDESCRIPTION: Command to install the grunt-cli package globally on Unix-based systems using npm with superuser privileges. This is required for building and testing Video.js.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g grunt-cli\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Attribute Usage\nDESCRIPTION: Example of incorrect way to set boolean attributes in HTML5 video tag.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video controls=\"true\" ...>\n```\n\n----------------------------------------\n\nTITLE: Installing contribflow globally on Windows\nDESCRIPTION: Command to install the contribflow package globally on Windows systems using npm. Contribflow is a git workflow tool for managing feature/hotfix branches.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g contribflow\n```\n\n----------------------------------------\n\nTITLE: State Machine Flow Diagram for Task Processing System in ASCII\nDESCRIPTION: This ASCII diagram depicts a complex state machine for processing tasks. It shows the flow from READY state to task execution via a FORK pattern, followed by a JOIN to a CHOICE state that handles success or error conditions. Error handling includes both AUTOMATIC and MANUAL recovery paths, with the ability to CONTINUE back to the READY state.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/docs/src/statecharts/statechart9.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n+----------------------------------------------------------------------------+\n|                                      SM                                    |\n+----------------------------------------------------------------------------+\n|                                                                            |\n|                                  +---------------------------+             |\n|                          FORK    |           TASKS           |    JOIN     |\n|                           |      +---------------------------+     |       |\n|      +-------------+ RUN  |      |     +-------------------+ |     |       |\n|  *-->|    READY    |----->|----->| *-->|  TASK_id_INITIAL  | |---->|----+  |\n|      +-------------+      |      |     +-------------------+ |     |    |  |\n|          ^    ^           |      |              |            |     |    |  |\n|          |    |                  |              v            |          |  |\n|          |    |                  |     +-------------------+ |          |  |\n|          |    |                  |     |      TASK_id      | |          |  |\n|          |    |                  |     +-------------------+ |          |  |\n|          |    |                  |===========================|          |  |\n|          |    |                  |     +-------------------+ |          |  |\n|          |    |                  | *-->|  TASK_id_INITIAL  | |          |  |\n|          |    |                  |     +-------------------+ |          |  |\n|          |    |                  |              |            |          |  |\n|          |    |                  |              v            |          |  |\n|          |    |                  |     +-------------------+ |          |  |\n|          |    |                  |     |      TASK_id      | |          |  |\n|          |    |                  |     +-------------------+ |          |  |\n|          |    |                  +---------------------------+          |  |\n|          |    |                                                         |  |\n|          |    |                    [OK]  +------------+                 |  |\n|          |    +--------------------------|   CHOICE   |<----------------+  |\n|          |                               +------------+                    |\n|          |                                      |                          |\n|          |                                      | [ERROR]                  |\n|          |                                      v                          |\n|          |             +-----------------------------------------------+   |\n|          |             |                      ERROR                    |   |\n|          |             +-----------------------------------------------+   |\n|          |  CONTINUE   |     +-------------+ FALLBACK +-------------+  |   |\n|          +-------------| *-->|  AUTOMATIC  |--------->|    MANUAL   |  |   |\n|                        |     |             |          |             |  |   |\n|                        |     |             |          |     FIX     |  |   |\n|                        |     |             |          |   +-----+   |  |   |\n|                        |     |             |          |   |     |   |  |   |\n|                        |     |             |          |   |     v   |  |   |\n|                        |     +-------------+          +-------------+  |   |\n|                        +-----------------------------------------------+   |\n|                                                                            |\n+----------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Merging Options Objects in Video.js Component\nDESCRIPTION: Shows how to deep merge options objects for child components in Video.js. This allows easy overriding of individual options without rewriting all default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MenuItem.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n\nthis.options(newOptions);\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript from CoffeeScript\nDESCRIPTION: Command to build JavaScript files from the CoffeeScript source code using Cake build tool.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cake build\n```\n\n----------------------------------------\n\nTITLE: Visualizing Order Processing State Machine with ASCII Diagram\nDESCRIPTION: This ASCII diagram represents a state machine for order processing. It shows four states: PLACED, PROCESSING, SENT, and DELIVERED. The diagram illustrates the transitions between these states, including PROCESS, SEND, and DELIVER actions.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/persist/src/main/resources/statechartmodel.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n+---------------------------------------------------------------+\n|                            SM                                 |\n+---------------------------------------------------------------+\n|                                                               |\n|      +----------------+           +----------------+          |\n|  *-->|     PLACED     |           |   PROCESSING   |          |\n|      +----------------+  PROCESS  +----------------+ SEND     |\n|      |                |---------->|                |-----+    |\n|      +----------------+           +----------------+     |    |\n|                                                          |    |\n|                                                          |    |\n|      +----------------+           +----------------+     |    |\n|      |      SENT      |           |   DELIVERED    |     |    |\n|      +----------------+  DELIVER  +----------------+     |    |\n|      |                |<----------|                |<----+    |\n|      +----------------+           +----------------+          |\n|                                                               |\n+---------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Component Options in Video.js\nDESCRIPTION: Example showing how to merge configuration options for child components, allowing for easy override of individual options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaLoader.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Angular Animate Script\nDESCRIPTION: HTML script tag to include the Angular Animate library in the application when installed via bower.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular-animate/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/bower_components/angular-animate/angular-animate.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Container Directive in HTML\nDESCRIPTION: HTML snippet showing how to add the toaster-container directive to your AngularJS application template.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<toaster-container></toaster-container>\n```\n\n----------------------------------------\n\nTITLE: Adding Child Component Example in JavaScript\nDESCRIPTION: Demonstrates how to add a child component to a Video.js component with configuration options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.PlayProgressBar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyComponent.el();\n// -> <div class='my-component'></div>\nmyComonent.children();\n// [empty array]\n\nvar myButton = myComponent.addChild('MyButton');\n// -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n// -> myButton === myComonent.children()[0];\n\nvar myButton = myComponent.addChild('MyButton', {\n  text: 'Press Me',\n  children: {\n    buttonChildExample: {\n      buttonChildOption: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Animate with npm\nDESCRIPTION: Command to install the angular-animate package using npm package manager.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular-animate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install angular-animate\n```\n\n----------------------------------------\n\nTITLE: Installing AngularJS-Toaster with NPM\nDESCRIPTION: Command to install the AngularJS-Toaster library using NPM package manager.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angularjs-toaster/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save angularjs-toaster\n```\n\n----------------------------------------\n\nTITLE: Installing AngularJS via npm\nDESCRIPTION: Command to install AngularJS package using npm package manager\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install angular\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Component Options in VideoJS\nDESCRIPTION: Example demonstrating how to merge component options objects deeply, allowing for easy override of individual child component options while preserving defaults.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Button.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in JavaScript\nDESCRIPTION: Adds an event listener to the component's element. The context of the callback function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.Flash.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding HTML5 Shiv for Video Elements\nDESCRIPTION: JavaScript code to create HTML5 video elements for older IE browsers that don't natively support them.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/setup.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\">\n  document.createElement('video');document.createElement('audio');document.createElement('track');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Event Listener Example in VideoJS\nDESCRIPTION: Example showing how to add an event listener to a VideoJS player component. The listener function receives the player instance as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeHandle.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Options Merging Example in VideoJS\nDESCRIPTION: Demonstrates deep merging of component options objects, showing how child component options can be overridden without rewriting default options.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.VolumeHandle.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including AngularJS script from npm\nDESCRIPTION: HTML script tag to include AngularJS from node_modules directory after npm installation\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/node_modules/angular/angular.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Animate with bower\nDESCRIPTION: Command to install the angular-animate package using bower package manager.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/angular-animate/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbower install angular-animate\n```\n\n----------------------------------------\n\nTITLE: Video.js JavaScript Initialization\nDESCRIPTION: Initializing video player with options using JavaScript setup function.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/guides/options.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvideojs(\"example_video_1\", { \"controls\": true, \"autoplay\": false, \"preload\": \"auto\" });\n```\n\n----------------------------------------\n\nTITLE: Component Options Merging Example in Video.js\nDESCRIPTION: Demonstrates deep merging of component options objects, showing how child component options can be overridden while preserving default values.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackDisplay.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParent.prototype.options_ = {\n  children: {\n    'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },\n    'childTwo': {},\n    'childThree': {}\n  }\n}\nnewOptions = {\n  children: {\n    'childOne': { 'foo': 'baz', 'abc': '123' }\n    'childTwo': null,\n    'childFour': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Example in Video.js\nDESCRIPTION: Example showing how to add an event listener to a Video.js player component. The listener function is called with the component as its context.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackDisplay.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Component Children Definition Example\nDESCRIPTION: Demonstrates how to define default child components through options when creating a new component instance.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.TextTrackButton.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.prototype.options_.children = {\n  myChildComponent: {\n    myChildOption: true\n  }\n}\n\n// Or when creating the component\nvar myComp = new MyComponent(player, {\n  children: {\n    myChildComponent: {\n      myChildOption: true\n    }\n  }\n});\n\n// Using array syntax\nvar myComp = new MyComponent(player, {\n  children: [\n    'button',\n    {\n      name: 'button',\n      someOtherOption: true\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Video.js Component\nDESCRIPTION: Demonstrates how to add an event listener to a Video.js component. The context of the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.OffTextTrackMenuItem.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myFunc = function(){\n  var myPlayer = this;\n  // Do something when the event is fired\n};\n\nmyPlayer.on(\"eventName\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Component in JavaScript\nDESCRIPTION: Adds an event listener to the component's element. The context of the listener function will be the component itself.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/docs/api/vjs.MediaTechController.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\non( type, fn )\n```\n\n----------------------------------------\n\nTITLE: Building Video.js and running tests\nDESCRIPTION: Grunt commands to build a local copy of Video.js and run the test suite to verify functionality.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngrunt\ngrunt test\n```\n\n----------------------------------------\n\nTITLE: Cloning forked Video.js repository\nDESCRIPTION: Git command to clone your forked Video.js repository to your local machine, creating a copy of the codebase for development.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/videojs/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/video.js.git\n```\n\n----------------------------------------\n\nTITLE: Running All Jepsen Tests for Spring Statemachine\nDESCRIPTION: Command to execute all Jepsen tests for Spring Statemachine using Leiningen.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/jepsen/spring-statemachine-jepsen/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# lein test\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Jepsen Test for Spring Statemachine\nDESCRIPTION: Command to run a specific Jepsen test case for Spring Statemachine, demonstrating how to isolate test execution to a single test function.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/jepsen/spring-statemachine-jepsen/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlein test :only spring-statemachine-jepsen.core-test/send-isolated-event\n```\n\n----------------------------------------\n\nTITLE: Watching for changes during development\nDESCRIPTION: Command to continuously run tests when source files change, useful during development.\nSOURCE: https://github.com/spring-projects/spring-statemachine/blob/main/spring-statemachine-samples/web/src/main/resources/static/lib/stomp/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ cake watch\n```"
  }
]