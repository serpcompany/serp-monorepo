[
  {
    "owner": "rodydavis",
    "repo": "signals.dart",
    "content": "TITLE: Implementing Flutter App with Signals State Management\nDESCRIPTION: A complete Flutter application example that demonstrates using signals for managing theme mode and counter state. The code shows how to use signal and computed values for state management, along with the Watch widget for reactive UI updates.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nfinal brightness = signal(Brightness.light);\nfinal themeMode = computed(() {\n  if (brightness() == Brightness.dark) {\n    return ThemeMode.dark;\n  } else {\n    return ThemeMode.light;\n  }\n});\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: Colors.deepPurple,\n          brightness: Brightness.light,\n        ),\n        brightness: Brightness.light,\n        useMaterial3: true,\n      ),\n      darkTheme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: Colors.deepPurple,\n          brightness: Brightness.dark,\n        ),\n        brightness: Brightness.dark,\n        useMaterial3: true,\n      ),\n      themeMode: themeMode.watch(context),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  final counter = signal(0);\n\n  void _incrementCounter() {\n    counter.value++;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n        actions: [\n          Watch((_) {\n            final isDark = brightness() == Brightness.dark;\n            return IconButton(\n              onPressed: () {\n                brightness.value = isDark ? Brightness.light : Brightness.dark;\n              },\n              icon: Icon(isDark ? Icons.light_mode : Icons.dark_mode),\n            );\n          }),\n        ],\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\n              'You have pushed the button this many times:',\n            ),\n            Watch((context) {\n              return Text(\n                '$counter',\n                style: Theme.of(context).textTheme.headlineMedium!,\n              );\n            }),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Reading a Signal in Dart\nDESCRIPTION: Demonstrates how to create a signal, read its value, and update it. Signals are containers for values that can change over time.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/signal.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal counter = signal(0);\n\n// Read value from signal, logs: 0\nprint(counter.value);\n\n// Write to a signal\ncounter.value = 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Example with SignalProvider in Flutter\nDESCRIPTION: A complete example showing how to create a counter application using SignalProvider. It demonstrates creating a Counter signal class, setting up SignalProvider, and consuming the signal in various widgets with and without listening to changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/signal-provider.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\nimport 'package:flutter/material.dart';\n\nclass Counter extends FlutterSignal<int> {\n  Counter([super.value = 0]);\n\n  void increment() => value++;\n}\n\nclass Example extends StatelessWidget {\n  const Example({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return SignalProvider<Counter>(\n      create: () => Counter(0),\n      child: Scaffold(\n        appBar: AppBar(\n          backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n          title: const Text('Counter'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              const Text(\n                'You have pushed the button this many times:',\n              ),\n              Builder(builder: (context) {\n                final counter = SignalProvider.of<Counter>(context);\n                return Text(\n                  '$counter',\n                  style: Theme.of(context).textTheme.headlineMedium,\n                );\n              }),\n            ],\n          ),\n        ),\n        floatingActionButton: Builder(builder: (context) {\n          final counter = SignalProvider.of<Counter>(context, listen: false)!;\n          return FloatingActionButton(\n            onPressed: counter.increment,\n            tooltip: 'Increment',\n            child: const Icon(Icons.add),\n          );\n        }),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Computed Signal Usage in Dart\nDESCRIPTION: Demonstrates creating computed signals that derive values from other signals using the computed() function. Shows how updates flow through computed signals when dependencies change.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/computed.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\n\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\nprint(fullName.value);\n\n// Updates flow through computed, but only if someone\n// subscribes to it. More on that later.\nname.value = \"John\";\n// Logs: \"John Doe\"\nprint(fullName.value);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Signal with ValueNotifierSignalMixin in Dart\nDESCRIPTION: Shows how to create a custom signal that extends Signal and uses the ValueNotifierSignalMixin to integrate with Flutter's ValueNotifier system.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/signal.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nclass MySignal extends Signal<int> with ValueNotifierSignalMixin<int> {\n  MySignal(int value) : super(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Signals as Streams in Dart\nDESCRIPTION: Demonstrates how to test signals by converting them to streams and using stream matchers. Includes examples of testing signal updates and overriding initial values.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/signal.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntest('test as stream', () {\n  final s = signal(0);\n  final stream = s.toStream(); // create a stream of values\n\n  s.value = 1;\n  s.value = 2;\n  s.value = 3;\n\n  expect(stream, emitsInOrder([0, 1, 2, 3]));\n});\n\ntest('test with override', () {\n  final s = signal(0).overrideWith(-1);\n\n  final stream = s.toStream();\n\n  s.value = 1;\n  s.value = 2;\n  s.value = 3;\n\n  expect(stream, emitsInOrder([-1, 1, 2, 3]));\n});\n```\n\n----------------------------------------\n\nTITLE: Using Signals in Flutter Widgets\nDESCRIPTION: This snippet shows how to use signals in a Flutter StatefulWidget, demonstrating the creation of signals and computed values, and their use in the widget's build method.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nclass Counter extends StatefulWidget {\n  @override\n  _CounterState createState() => _CounterState();\n}\n\nclass _CounterState extends State<Counter> with SignalsMixin {\n  late final counter = createSignal(0);\n  late final isEven = createComputed(() => counter.value.isEven);\n  late final isOdd = createComputed(() => counter.value.isOdd);\n\n  @override\n  Widget build(BuildContext context) {\n\treturn Column(\n\t  children: [\n\t\tText('Counter: $counter'), // <- No need to use .value since .toString() is overridden to return the value\n\t\tText('Is Even: $isEven'),\n\t\tText('Is Odd: $isOdd'),\n\t\tElevatedButton(\n\t\t  onPressed: () => counter.value++,\n\t\t  child: Text('Increment'),\n\t\t),\n\t  ],\n\t);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Signals in Flutter\nDESCRIPTION: This snippet demonstrates how to use global signals in a Flutter application. It creates a global signal for a counter and uses it directly in the widget tree without any specific dependency injection mechanism.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/dependency-injection.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\nimport 'package:flutter/material.dart';\n\nfinal counter = signal(0);\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Signals with Global Signal'),\n        ),\n        body: Center(\n          child: Watch((context) => Text('Value: $counter')),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          child: Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Effects with Signals in Dart\nDESCRIPTION: This snippet demonstrates how to use effects with signals, showing how effects are triggered when signal values change and how to dispose of effects.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\neffect(() => print(fullName.value));\n\n// Updating one of its dependencies will automatically trigger\n// the effect above, and will print \"John Doe\" to the console.\nname.value = \"John\";\n\n// Logs: \"Jane Doe\"\nfinal dispose = effect(() => print(fullName.value));\n\n// Destroy effect and subscriptions\ndispose();\n\n// Update does nothing, because no one is subscribed anymore.\n// Even the computed `fullName` signal won't change, because it knows\n// that no one listens to it.\nsurname.value = \"Doe 2\";\n```\n\n----------------------------------------\n\nTITLE: Optimizing Rebuilds with Builder Widget in Flutter\nDESCRIPTION: This snippet demonstrates how to optimize rebuilds by using the Builder widget to isolate signal watching. It shows how only the Builder widget is rebuilt when the signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/watch.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = signal(10);\n...\n@override\nWidget build(BuildContext context) {\n  // Called once\n  return Column(\n    children: [\n      Builder(\n        builder: (context) {\n          // Called every time the signal changes\n          final count = signal.watch(context);\n          return Text('$count');\n        },\n      ),\n      Text('Not rebuilt'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Signals in Flutter Widgets\nDESCRIPTION: Shows how to use signals in a Flutter StatefulWidget with automatic disposal when the widget is removed from the tree. Uses SignalsMixin for automatic signal management.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/signal.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nclass CounterWidget extends StatefulWidget {\n  @override\n  _CounterWidgetState createState() => _CounterWidgetState();\n}\n\nclass _CounterWidgetState extends State<CounterWidget> with SignalsMixin {\n  late final counter = createSignal(0);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text('Counter: $counter'),\n            ElevatedButton(\n              onPressed: () => counter.value++,\n              child: Text('Increment'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Signal's Select Method for Computed Values in Flutter\nDESCRIPTION: This snippet demonstrates how to use the select method directly on a signal to create a computed value. It provides an alternative way to create selectors for signals.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/watch.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = signal((a: 1, b: 2));\nfinal computed = signal.select((s) => s.value.a);\n...\n@override\nWidget build(BuildContext context) {\n  return Watch((_) => Text('$computed'));\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Signal Hook Example in Flutter\nDESCRIPTION: Demonstrates a complete example of using signals in a HookWidget, including signal creation, computed values, and effects. Shows counter implementation with UI elements.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  const Example({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final count = useSignal(0);\n    final countStr = useComputed(() => count.value.toString());\n    useSignalEffect(() {\n      debugPrint('count: $countStr');\n    });\n    return Scaffold(\n      body: Center(\n        child: Text('Count: $count'),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () => count.value++,\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Signals with Multiple Interfaces in Dart\nDESCRIPTION: Shows how to create a custom Signal that extends Signal, ValueNotifier, and Stream interfaces, providing flexibility and compatibility with various Dart and Flutter APIs.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nclass CustomSignal<T> extends Signal<T> with\n  ValueNotifierSignalMixin<T>,\n  SinkSignalMixin<T>,\n  StreamSignalMixin<T> {\n    CustomSignal(T value) : super(value);\n}\n\nclass Counter extends CustomSignal<int> {\n    Counter(int value) : super(value);\n}\n\nvoid main() {\n    final counter = Counter(0);\n\n    assert(counter is Signal<int>);\n    assert(counter is ValueNotifier<int>);\n    assert(counter is Stream<int>);\n\n    // Listen to the stream\n    counter.listen((value) {\n         print('stream: $value');\n    });\n\n    // Subscribe in an effect\n    effect(() {\n        print('effect: $counter');\n    });\n\n    counter.add(1);\n    print(counter.value); // 1\n\n    counter.value = 2;\n    print(counter.value); // 2\n    \n    counter.close();\n    print(counter.disposed); // true\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing ValueNotifier and Signal Initialization in Dart\nDESCRIPTION: Shows the similarity in syntax between ValueNotifier and Signal initialization, highlighting the familiarity for developers transitioning to Signals.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Value Notifier\nfinal count = ValueNotifier(0);\n\n// Signals\nfinal count = signal(0);\n```\n\n----------------------------------------\n\nTITLE: Auto-Disposing Signals in Dart\nDESCRIPTION: Shows how to create an auto-disposing signal that destroys itself when there are no more listeners. Includes checking if a signal is disposed.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/signal.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = signal(0, autoDispose: true);\ns.onDispose(() => print('Signal destroyed'));\nfinal dispose = s.subscribe((_) {});\ndispose();\nfinal value = s.value; // 0\n// prints: Signal destroyed\n\nfinal s = signal(0);\nprint(s.disposed); // false\ns.dispose();\nprint(s.disposed); // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Fine-Grained Rebuilding with Watch Widget in Flutter\nDESCRIPTION: This snippet demonstrates how to use the Watch widget in combination with signals to achieve fine-grained rebuilding of sub-widgets in a Flutter counter application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nclass Counter extends StatefulWidget {\n  @override\n  _CounterState createState() => _CounterState();\n}\n\nclass _CounterState extends State<Counter> {\n  final counter = signal(0);\n\n  @override\n  Widget build(BuildContext context) {\n\treturn Column(\n\t  children: [\n\t\tWatch((context) => Text('Counter: $counter')),\n\t\tElevatedButton(\n\t\t  onPressed: () => counter.value++,\n\t\t  child: Text('Increment'),\n\t\t),\n\t  ],\n\t);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using signal.peek() in Dart Effects\nDESCRIPTION: This snippet shows how to use signal.peek() to read a signal's previous value without subscribing to it, useful in effects that write to other signals.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal counter = signal(0);\nfinal effectCount = signal(0);\n\neffect(() {\n\tprint(counter.value);\n\n\t// Whenever this effect is triggered, increase `effectCount`.\n\t// But we don't want this signal to react to `effectCount`\n\teffectCount.value = effectCount.peek() + 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Signals with Provider in Flutter\nDESCRIPTION: This snippet shows how to use Signals with the Provider package for dependency injection in a Flutter app. It creates a simple counter application using a signal provided through Provider.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/dependency-injection.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\nimport 'package:provider/provider.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    Provider(\n      create: (_) => signal(0),\n      dispose: (_, instance) => instance.dispose(),\n      child: MyApp(),\n    ),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final counter = context.read<Signal<int>>();\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Signals with Provider'),\n        ),\n        body: Center(\n          child: Watch((context) => Text('Value: $signal')),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          child: Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Batch Updates with Signals in Dart\nDESCRIPTION: This snippet demonstrates how to use batch updates with signals, combining multiple signal writes into a single update triggered at the end of the batch.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\neffect(() => print(fullName.value));\n\n// Combines both signal writes into one update. Once the callback\n// returns the `effect` will trigger and we'll log \"Foo Bar\"\nbatch(() {\n\tname.value = \"Foo\";\n\tsurname.value = \"Bar\";\n});\n```\n\n----------------------------------------\n\nTITLE: Using WatchBuilder with Child Widget in Flutter\nDESCRIPTION: This snippet demonstrates the use of WatchBuilder when you need to pass an optional child widget. It allows for more complex widget structures while still watching signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/watch.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = signal(10);\n...\n@override\nWidget build(BuildContext context) {\n  return WatchBuilder(\n    builder: (context, child) {\n      return InkWell(\n        onTap: () => signal.value++,\n        child: Row(\n          children: [\n            Text('$signal: '),\n            child!,\n          ],\n        ),\n      );\n    },\n    child: const Icon(Icons.add),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ValueNotifier to Signal\nDESCRIPTION: Shows the code changes needed to replace a ValueNotifier with a Signal while maintaining the same API functionality. Demonstrates listener management, value updates, and disposal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/value-notifier.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import 'package:flutter/foundation.dart';\n+ import 'package:signals/signals_flutter.dart';\n- final count = ValueNotifier(0);\n+ final count = signal(0);\n\ncount.addListener(() => print(count.value));\ncount.value = 1;\nprint(count.value);\ncount.notifyListeners();\ncount.dispose();\n```\n\n----------------------------------------\n\nTITLE: Using computed() for Derived Data\nDESCRIPTION: Shows how to combine multiple signals into a new computed signal that automatically updates when dependencies change.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/preact_signals/README.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:preact_signals/preact_signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\n\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\nprint(fullName.value);\n\n// Updates flow through computed, but only if someone\n// subscribes to it. More on that later.\nname.value = \"John\";\n// Logs: \"John Doe\"\nprint(fullName.value);\n```\n\n----------------------------------------\n\nTITLE: Using Signals with InheritedWidget in Flutter\nDESCRIPTION: This example demonstrates how to use Signals with Flutter's InheritedWidget for dependency injection. It uses the SignalProvider to provide a signal throughout the widget tree.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/dependency-injection.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\nimport 'package:signals/signals_flutter_extended.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: SignalProvider.value(\n        value: 0,\n        child: MyApp(),\n      ),\n    ),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final counter = SignalProvider.of<int>(context);\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Signals with InheritedWidget'),\n        ),\n        body: Center(\n          child: Watch((context) => Text('Value: $counter')),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          child: Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Application Example with Persisted Signals\nDESCRIPTION: Complete example showing how to use persisted signals in a Flutter application for theme management.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/persisted-signals.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass AppTheme {\n  final sourceColor = ColorSignal(\n    Colors.blue,\n    'sourceColor',\n );\n  final themeMode = EnumSignal(\n    ThemeMode.system,\n    'themeMode',\n    ThemeMode.values,\n );\n\n  static AppTheme instance = AppTheme();\n\n  Future<void> init() async {\n    await Future.wait([\n      sourceColor.init(),\n      themeMode.init(),\n    ]);\n  }\n}\n\nvoid main() async{\n    final theme = AppTheme.instance;\n    await theme.init();\n    runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final theme = AppTheme.instance;\n    return MaterialApp(\n      theme: ThemeData.light().copyWith(\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: theme.sourceColor.watch(context),\n          brightness: Brightness.light,\n        ),\n      ),\n      darkTheme: ThemeData.dark().copyWith(\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: theme.sourceColor.watch(context),\n          brightness: Brightness.dark,\n        ),\n      ),\n      themeMode: theme.themeMode.watch(context),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Persisted Signals'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              ElevatedButton(\n                onPressed: () {\n                  theme.sourceColor.value = Colors.red;\n                },\n                child: Text('Change Color'),\n              ),\n              ElevatedButton(\n                onPressed: () {\n                  theme.themeMode.value = ThemeMode.dark;\n                },\n                child: Text('Change Theme'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Values with Signals in Flutter\nDESCRIPTION: Demonstrates the simplified approach of implementing computed values using Signals in Flutter, showcasing improved efficiency and readability.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nclass MyWidget extends ... {\nfinal count1 = signal(0);\nfinal count2 = signal(0);\nfinal total = computed(() => count1.value + count2.value);\nfinal isEven = computed(() => total.value.isEven);\nfinal isOdd = computed(() => total.value.isOdd);\n\n@override\nWidget build(BuildContext context) {\n    // If using setState\n    return Text('${total.watch(context)} even=${isEven.watch(context)} odd=${isOdd.watch(context)}');\n\n    // Or if you are using with Watch\n    return Watch((context) {\n        return Text('$total even=$isEven odd=$isOdd');\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Computed Signals in Dart\nDESCRIPTION: This snippet shows how to create and use computed signals, which derive their value from other signals and update automatically when dependencies change.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\n\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\nprint(fullName.value);\n\n// Updates flow through computed, but only if someone\n// subscribes to it. More on that later.\nname.value = \"John\";\n// Logs: \"John Doe\"\nprint(fullName.value);\n```\n\n----------------------------------------\n\nTITLE: Preventing Signal Subscriptions with Untracked in Dart\nDESCRIPTION: Example showing how to use untracked() to prevent signal subscriptions within effects. Demonstrates creating signals for a counter and effect count, then using untracked to execute a function without creating new subscriptions.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/untracked.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal counter = signal(0);\nfinal effectCount = signal(0);\nfinal fn = () => effectCount.value + 1;\n\neffect(() {\n\tprint(counter.value);\n\n\t// Whenever this effect is triggered, run `fn` that gives new value\n\teffectCount.value = untracked(fn);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Signal from ValueNotifier\nDESCRIPTION: Shows how to create a mutable signal from an existing ValueNotifier using the toSignal extension method. The resulting signal and notifier stay synchronized.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/value-notifier.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal notifier = ValueNotifier(10);\nfinal signal = notifier.toSignal();\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal with ValueNotifier Features\nDESCRIPTION: Demonstrates how Signals 6.0.0+ implements ValueNotifier functionality by default when using the flutter import. Shows type assertions for both Signal and ValueNotifier interfaces.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/value-notifier.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nfinal count = signal(0);\nassert(count is Signal<int>);\nassert(count is ValueNotifier<int>);\n```\n\n----------------------------------------\n\nTITLE: Testing Computed Signals as Streams\nDESCRIPTION: Shows how to test computed signals by converting them to streams and using stream matchers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/computed.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntest('test as stream', () {\n    final a = signal(0);\n    final s = computed(() => a());\n    final stream = s.toStream();\n\n    a.value = 1;\n    a.value = 2;\n    a.value = 3;\n\n    expect(stream, emitsInOrder([0, 1, 2, 3]));\n});\n```\n\n----------------------------------------\n\nTITLE: Using StreamSignalMixin with StreamBuilder in Flutter\nDESCRIPTION: This example demonstrates how to use a Signal with StreamSignalMixin in a Flutter application. It creates a counter Signal and uses StreamBuilder to reactively update the UI when the counter value changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/stream.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nclass Counter extends Signal<int> with StreamSignalMixin<int> {\n  Counter(int value) : super(value);\n}\n\nvoid main() {\n  final counter = Counter(0);\n\n  runApp(\n    MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('StreamSignalMixin Example'),\n        ),\n        body: Center(\n          child: StreamBuilder<int>(\n            stream: counter,\n            builder: (context, snapshot) {\n              return Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  Text('You have pushed the button this many times:'),\n                  Text(\n                    '${snapshot.data}',\n                    style: Theme.of(context).textTheme.headline4,\n                  ),\n                ],\n              );\n            },\n          ),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          tooltip: 'Increment',\n          child: Icon(Icons.add),\n        ),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter Counter App with Signals\nDESCRIPTION: A complete Flutter application that demonstrates the use of signals for state management. Features include a counter that can be incremented and a theme switcher that toggles between light and dark modes. Uses the signals_flutter package for reactive state management.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nfinal brightness = signal(Brightness.light);\nfinal themeMode = computed(() {\n  if (brightness() == Brightness.dark) {\n    return ThemeMode.dark;\n  } else {\n    return ThemeMode.light;\n  }\n});\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: Colors.deepPurple,\n          brightness: Brightness.light,\n        ),\n        brightness: Brightness.light,\n        useMaterial3: true,\n      ),\n      darkTheme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: Colors.deepPurple,\n          brightness: Brightness.dark,\n        ),\n        brightness: Brightness.dark,\n        useMaterial3: true,\n      ),\n      themeMode: themeMode.watch(context),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  final counter = signal(0);\n\n  void _incrementCounter() {\n    counter.value++;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n        actions: [\n          Watch((_) {\n            final isDark = brightness() == Brightness.dark;\n            return IconButton(\n              onPressed: () {\n                brightness.value = isDark ? Brightness.light : Brightness.dark;\n              },\n              icon: Icon(isDark ? Icons.light_mode : Icons.dark_mode),\n            );\n          }),\n        ],\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\n              'You have pushed the button this many times:',\n            ),\n            Watch((context) {\n              return Text(\n                '$counter',\n                style: Theme.of(context).textTheme.headlineMedium!,\n              );\n            }),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Async Computed Signal with computedAsync in Dart\nDESCRIPTION: Demonstrates how to use computedAsync to create an asynchronous computed signal that fetches a movie based on a movie ID. The computed signal will re-evaluate when the movieId signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/computed.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal movieId = signal('id');\nlate final movie = computedAsync(() => fetchMovie(movieId()));\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Signals in Dart\nDESCRIPTION: Demonstrates how to create a custom signal by extending the Signal class. Custom signals can be enhanced with various mixins for additional functionality.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/signal.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> {\n  MySignal(int value) : super(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Effect Usage in Dart\nDESCRIPTION: Demonstrates how to create and use effects with signals to perform reactive operations. Shows how updating signal dependencies automatically triggers the effect.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/effect.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\neffect(() => print(fullName.value));\n\n// Updating one of its dependencies will automatically trigger\n// the effect above, and will print \"John Doe\" to the console.\nname.value = \"John\";\n```\n\n----------------------------------------\n\nTITLE: Proper Effect Creation in Dart\nDESCRIPTION: Demonstrates the correct way to create effects using SignalsMixin within the initState method of a StatefulWidget.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/signals-mixin.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyState extends State<MyWidget> with SignalsMixin {\n  @override\n  void initState() {\n    super.initState();\n    createEffect(() => print('Effect created'));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Signal Dependencies\nDESCRIPTION: Shows how to explicitly declare signal dependencies for tracking across async operations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/future.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal count = signal(0);\nfinal s = futureSignal(\n    () async => count.value,\n    dependencies: [count],\n);\ns.value; // state with count 0\ncount.value = 1; // resets the future\ns.value; // state with count 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Signals with Riverpod in Flutter\nDESCRIPTION: This code snippet shows how to use Signals in conjunction with Riverpod for state management in a Flutter app. It defines a signal provider and uses it in a ConsumerWidget.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/dependency-injection.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:riverpod_annotation/riverpod_annotation.dart';\nimport 'package:flutter/material.dart';\n\npart 'main.g.dart';\n\n@riverpod\nSignal<int> counter() => signal(0);\n\nvoid main() {\n  runApp(ProviderScope(child: MyApp()));\n}\n\nclass MyApp extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final counter = ref.read(counterProvider);\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Signals with Riverpod'),\n        ),\n        body: Center(\n          child: Watch((context) => Text('Value: $counter')),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          child: Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Computed Signal in Flutter Hook Widget\nDESCRIPTION: Demonstrates creating a computed signal that depends on another signal's value. The computed value updates automatically when dependencies change.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/README.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  @override\n  Widget build(BuildContext context) {\n    final count = useSignal(0);\n    final countStr = useComputed(() => count.toString());\n    return Text('Count: $countStr');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using .watch(context) Extension for Signal Changes in Flutter\nDESCRIPTION: This snippet shows how to use the .watch(context) extension method to map a signal to a widget property. It infers the type and subscribes to the signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/watch.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal fontSize = signal(10);\n...\n@override\nWidget build(BuildContext context) {\n  return Text('Hello World',\n    style: TextStyle(fontSize:fontSize.watch(context)),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Watch.builder as a Replacement for Builder in Flutter\nDESCRIPTION: This snippet shows how to replace the standard Builder widget with Watch.builder to observe signal changes. It provides a drop-in replacement that allows for signal watching.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/watch.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nfinal signal = signal(10);\n...\n@override\nWidget build(BuildContext context) {\n-  return Builder(\n+  return Watch.builder(\n    builder: (context) => Text('$signal'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Usage in Flutter Hook Widget\nDESCRIPTION: Shows how to create and use a basic signal in a HookWidget. The widget automatically rebuilds when the signal value changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  @override\n  Widget build(BuildContext context) {\n    final count = useSignal(0);\n    return Text('Count: $count');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Signals in Flutter Widget\nDESCRIPTION: Demonstrates the simplified approach of using Signals in a Flutter widget, reducing boilerplate and improving readability compared to ValueNotifiers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nclass MyWidget extends ... {\nfinal count1 = signal(0);\nfinal count2 = signal(0);\n\n@override\nWidget build(BuildContext context) {\n    // If using setState\n    return Text('${count1.watch(context)} - ${count2.watch(context)}');\n\n    // Or if you are using with Watch\n    return Watch((context) => Text('$count1 - $count2'));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Signals in Dart\nDESCRIPTION: This snippet demonstrates how to create a signal, read its value, and write to it. It shows the basic usage of the signal function.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal counter = signal(0);\n\n// Read value from signal, logs: 0\nprint(counter.value);\n\n// Write to a signal\ncounter.value = 1;\n```\n\n----------------------------------------\n\nTITLE: Auto-Disposing Computed Signals\nDESCRIPTION: Example of creating auto-disposing computed signals that clean up when no listeners remain.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/computed.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = computed(() => 0, autoDispose: true);\ns.onDispose(() => print('Signal destroyed'));\nfinal dispose = s.subscribe((_) {});\ndispose();\nfinal value = s.value; // 0\n// prints: Signal destroyed\n```\n\n----------------------------------------\n\nTITLE: Creating MapSignal in Dart\nDESCRIPTION: Demonstrates two ways to create a MapSignal: using the mapSignal function and the toSignal() extension method on a Map.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/map.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = mapSignal({'a': 1, 'b': 2, 'c': 3});\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = {'a': 1, 'b': 2, 'c': 3}.toSignal();\n```\n\n----------------------------------------\n\nTITLE: Converting ValueListenable to Signal in Dart\nDESCRIPTION: Demonstrates how to create a readonly signal from a ValueListenable using the toSignal extension method. This allows for seamless integration of existing ValueListenable objects into a signals-based reactive system.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/value-listenable.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal ValueListenable listenable = ValueNotifier(10);\nfinal signal = listenable.toSignal();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Future Signal\nDESCRIPTION: Demonstrates refreshing a future signal while maintaining its current state but setting isLoading to true.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/future.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = futureSignal(() => Future(() => 1));\ns.refresh();\nprint(s.value.isLoading); // true\n```\n\n----------------------------------------\n\nTITLE: Using Existing Signal in Flutter Hook Widget\nDESCRIPTION: Demonstrates how to use an existing signal within a HookWidget. Useful for passing signals as parameters and maintaining state across widgets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/README.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  final Signal<int> count;\n\n  Example(this.count);\n\n  @override\n  Widget build(BuildContext context) {\n    final counter = useExistingSignal(count);\n    return Text('Count: $counter');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Computed Signals with Value Override\nDESCRIPTION: Demonstrates testing computed signals by overriding their initial values for specific test scenarios.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/computed.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntest('test with override', () {\n    final a = signal(0);\n    final s = computed(() => a()).overrideWith(-1);\n\n    final stream = s.toStream();\n\n    a.value = 1;\n    a.value = 2;\n    a.value = 2; // check if skipped\n    a.value = 3;\n\n    expect(stream, emitsInOrder([-1, 1, 2, 3]));\n});\n```\n\n----------------------------------------\n\nTITLE: Using Watch.builder as a Replacement for Builder in Flutter\nDESCRIPTION: This code diff shows how to replace the Builder widget with Watch.builder for signal-based rebuilding in Flutter.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- Builder(builder: (context) {\n+ Watch.builder(builder: (context) {\n  return Text('Counter: $counter');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Computed Signals as Selectors in Flutter\nDESCRIPTION: This snippet shows how to create a computed signal that acts as a selector, deriving its value from the original signal. It demonstrates an alternative to the 'select' method used in other state management solutions.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/watch.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = signal((a: 1, b: 2));\nfinal computed = computed(() => signal.value.a);\n...\n@override\nWidget build(BuildContext context) {\n  return Watch((_) => Text('$computed'));\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pull-based Updates with Signals in Dart\nDESCRIPTION: This snippet illustrates how signals use a pull-based update system, where changes only propagate when values are read. It shows how computed signals optimize updates by caching values and only recomputing when dependencies change.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/overview.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal a = signal(0);\nfinal b = signal(0);\n\nfinal c = computed(() => a.value + b.value);\nfinal d = computed(() => c.value + 1);\nfinal e = computed(() => d.value + 1);\n\n// All the callbacks will be called\nprint(e.value); // 2\n\n// None of the callbacks will be called because the\n// value is cached at each node\nprint(e.value); // 2\n\n// Only the callbacks that need to be updated\n// will be called\nb.value = 1;\nprint(e.value); // 3\n```\n\n----------------------------------------\n\nTITLE: Using Signals with GetIt in Flutter\nDESCRIPTION: This example demonstrates how to integrate Signals with the GetIt service locator in a Flutter application. It sets up a global signal for a counter and uses it throughout the app.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/dependency-injection.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\nimport 'package:get_it/get_it.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  GetIt.I.registerSingleton<Signal<int>>(signal(0));\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final counter = GetIt.I.get<Signal<int>>();\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Signals with GetIt'),\n        ),\n        body: Center(\n          child: Watch((context) => Text('Value: $signal')),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          child: Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using peek() Method with Signals in Dart\nDESCRIPTION: Shows how to use the peek() method to read a signal's previous value without subscribing to it. Useful for effects that write to another signal based on the previous value.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/signal.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal counter = signal(0);\nfinal effectCount = signal(0);\n\neffect(() {\n\tprint(counter.value);\n\n\t// Whenever this effect is triggered, increase `effectCount`.\n\t// But we don't want this signal to react to `effectCount`\n\teffectCount.value = effectCount.peek() + 1;\n});\n```\n\n----------------------------------------\n\nTITLE: SetSignal Operations and Mutations\nDESCRIPTION: Demonstrates common Set operations and mutations on a SetSignal including adding, removing elements, and accessing Set properties and methods.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/set.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal s1 = setSignal({1, 2, 3});\n\n// mutations\ns1.add(4);\ns1.remove(2);\n\n// expose common Dart Set interfaces\ns1.length;                   // 3\ns1.contains(3);              // true\ns1.intersection({6, 2, 1});  // {1}\n```\n\n----------------------------------------\n\nTITLE: Using ValueListenableBuilder with Signals in Flutter\nDESCRIPTION: Demonstrates how to use a Signal with ValueListenableBuilder in a Flutter widget to reactively update the UI based on signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/value-listenable.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nfinal counter = signal(0);\n\nclass MyWidget extends StatelessWidget { \n  @override\n  Widget build(BuildContext context) {\n    return ValueListenableBuilder<int>(\n      valueListenable: counter,\n      builder: (context, value, child) {\n        return Text('Count: $value');\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TrackedSignalMixin in Dart\nDESCRIPTION: Demonstrates how to implement TrackedSignalMixin with a Signal class to track initial and previous values. The example shows creating a custom Signal class with the mixin and demonstrates value changes while maintaining history. Note that this only works effectively with immutable values or values that are copied when changed.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/tracked.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> with TrackedSignalMixin<int> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal(0);\n  \n  signal.value = 1;\n  print(signal.initialValue); // 0\n  print(signal.previousValue); // null\n\n  signal.value = 2;\n  print(signal.initialValue); // 0\n  print(signal.previousValue); // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signals with SignalsMixin in Dart\nDESCRIPTION: Demonstrates how to create different types of signals (basic signal, computed signal, and list signal) using SignalsMixin in a StatefulWidget state class.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/signals-mixin.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyState extends State<MyWidget> with SignalsMixin {\n  late final count = createSignal(0);\n  late final isEven = createComputed(() => signal.value.isEven);\n  late final list = createListSignal(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Async Computed Signal with computedFrom in Dart\nDESCRIPTION: Shows how to use computedFrom to create an asynchronous computed signal that fetches a movie based on a list of input signals. This method allows for safer async operations as dependencies are passed as arguments.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/computed.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal movieId = signal('id');\nlate final movie = computedFrom([movieId], (args) => fetchMovie(args.first));\n```\n\n----------------------------------------\n\nTITLE: Using Watch Widget for Signal Changes in Flutter\nDESCRIPTION: This snippet demonstrates how to use the Watch widget to observe changes in a signal and update a Text widget accordingly. It only rebuilds the specific widget method, not the entire widget tree.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/watch.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = signal(10);\n...\n@override\nWidget build(BuildContext context) {\n  return Watch((context) => Text('$signal'));\n}\n```\n\n----------------------------------------\n\nTITLE: Using batch() for Combined Updates\nDESCRIPTION: Demonstrates how to combine multiple signal updates into a single update using batch(), including nested batches and computed signal handling.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/preact_signals/README.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:preact_signals/preact_signals.dart';\n\nfinal counter = signal(0);\nfinal _double = computed(() => counter.value * 2);\nfinal _triple = computed(() => counter.value * 3);\n\neffect(() => print(_double.value, _triple.value));\n\nbatch(() {\n    counter.value = 1;\n    // Logs: 2, despite being inside batch, but `triple`\n    // will only update once the callback is complete\n    print(_double.value);\n});\n// Now we reached the end of the batch and call the effect\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Batching in Dart\nDESCRIPTION: Demonstrates how to use the batch function to combine multiple signal writes into a single update. Shows updating name and surname signals together to trigger one fullName computed update.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/batch.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\neffect(() => print(fullName.value));\n\n// Combines both signal writes into one update. Once the callback\n// returns the `effect` will trigger and we'll log \"Foo Bar\"\nbatch(() {\n\tname.value = \"Foo\";\n\tsurname.value = \"Bar\";\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Dependencies\nDESCRIPTION: Demonstrates how signals automatically track dependencies in the callback.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/future.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal count = signal(0);\nfinal s = futureSignal(() async => count.value);\n\nawait s.future; // 0\ncount.value = 1;\nawait s.future; // 1\n```\n\n----------------------------------------\n\nTITLE: Extending FlutterSignal Directly in Dart\nDESCRIPTION: Demonstrates an alternative approach to creating a custom signal by directly extending the FlutterSignal class, which already incorporates ValueNotifier functionality.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/signal.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nclass MySignal extends FlutterSignal<int> {\n  MySignal(int value) : super(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListSignalMixin in Dart\nDESCRIPTION: Demonstrates how to implement ListSignalMixin with a Signal class to create a reactive list. Shows basic list operations like adding and removing elements, and using effects to react to changes in the list length.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/list.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<List<int>>\n    with IterableSignalMixin<int, List<int>>, ListSignalMixin<int, List<int>> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal([1, 2, 3]);\n  \n  effect(() {\n    print(signal.length);\n  });\n\n  signal.add(4);\n  signal.remove(1);\n\n  print(signal.contains(2)); // true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Streams to a Connector in Dart\nDESCRIPTION: This example demonstrates how to add multiple streams to a connector using the 'from' method. Two streams with values 1 and 2 are added to the connector.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/connect.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = signal(0);\nfinal c = connect(s);\n\nfinal s1 = Stream.value(1);\nfinal s2 = Stream.value(2);\n\nc.from(s1).from(s2); // These can be chained\n```\n\n----------------------------------------\n\nTITLE: Using untracked with ValueListenableSignalMixin in Dart\nDESCRIPTION: Shows how to use the untracked function to prevent automatic dependency tracking when reading signal values inside a listener callback.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/value-listenable.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = MySignal(0);\nfinal dep = signal(0);\nfinal listener = () {\n    untracked(() {\n        print(signal.value);\n        print(dep.value);\n    });\n};\nsignal.addListener(listener);\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableSignalMixin with Signal class in Dart\nDESCRIPTION: Demonstrates how to create a custom Signal class that implements IterableSignalMixin to handle Iterable<int> values. Shows usage with an effect to track the signal's length property reactively.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/iterable.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<Iterable<int>>\n    with IterableSignalMixin<int, Iterable<int>> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal([1, 2, 3]);\n  \n  effect(() {\n    print(signal.length);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using effect() for Reactive Updates\nDESCRIPTION: Demonstrates creating reactive effects that automatically run when their signal dependencies change, including cleanup via dispose function.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/preact_signals/README.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:preact_signals/preact_signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\nfinal dispose = effect(() => print(fullName.value));\n\n// Destroy effect and subscriptions\ndispose();\n\n// Update does nothing, because no one is subscribed anymore.\n// Even the computed `fullName` signal won't change, because it knows\n// that no one listens to it.\nsurname.value = \"Doe 2\";\n```\n\n----------------------------------------\n\nTITLE: Accessing StreamSignal value using .value and .peek() in Dart\nDESCRIPTION: Demonstrates how to access the value of a StreamSignal using the .value getter. It returns an AsyncState<T> that can handle various states. The .peek() method can be used to avoid subscribing in an effect.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal stream = (int value) async* {\n    yield value;\n};\nfinal s = streamSignal(() => stream);\nfinal value = s.value.value; // 1 or null\n```\n\n----------------------------------------\n\nTITLE: Tracking StreamSignal dependencies across async gaps in Dart\nDESCRIPTION: Shows how to use the dependencies parameter when creating a StreamSignal to track signals across async gaps. This ensures the stream resets every time any signal in the dependency array changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal count = signal(0);\nfinal s = streamSignal(\n    () async* {\n        final value = count();\n        yield value;\n    },\n    dependencies: [count],\n);\ns.value; // state with count 0\ncount.value = 1; // resets the future\ns.value; // state with count 1\n```\n\n----------------------------------------\n\nTITLE: Utilizing .watch(context) Extension Method for Signal-based Rebuilding in Flutter\nDESCRIPTION: This snippet demonstrates how to use the .watch(context) extension method to rebuild a widget when a signal changes in a Flutter counter application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n...\nfinal counter = signal(0);\n...\n@override\nWidget build(BuildContext context) {\n  return Column(\n\tchildren: [\n\t  Text('Counter: ${counter.watch(context)}'),\n\t  ElevatedButton(\n\t\tonPressed: () => counter.value++,\n\t\tchild: Text('Increment'),\n\t  ),\n\t],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Future Signal\nDESCRIPTION: Shows how to reset a future signal to its initial state for re-evaluation.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/future.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = futureSignal(() => Future(() => 1));\ns.reset();\n```\n\n----------------------------------------\n\nTITLE: Force Recomputation of Computed Signals\nDESCRIPTION: Shows how to manually trigger re-evaluation of a computed signal using the recompute() method.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/computed.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\nfullName.recompute(); // Re-runs the computed callback\n```\n\n----------------------------------------\n\nTITLE: Using ValueListenableBuilder with Signals in Flutter\nDESCRIPTION: Demonstrates how to use a Signal with ValueListenableBuilder in a Flutter widget to reactively update the UI based on signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/value-notifier.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nfinal counter = signal(0);\n\nclass MyWidget extends StatelessWidget { \n  @override\n  Widget build(BuildContext context) {\n    return ValueListenableBuilder<int>(\n      valueListenable: counter,\n      builder: (context, value, child) {\n        return Text('Count: $value');\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using untracked() for Preventing Subscriptions\nDESCRIPTION: Demonstrates using untracked() to prevent signal subscriptions when reading values, useful when receiving callbacks that shouldn't create dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/preact_signals/README.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal counter = signal(0);\nfinal effectCount = signal(0);\nfinal fn = () => effectCount.value + 1;\n\neffect(() {\n    print(counter.value);\n\n    // Whenever this effect is triggered, run `fn` that gives new value\n    effectCount.value = untracked(fn);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Undo/Redo Signal in Dart\nDESCRIPTION: Example showing basic implementation of a Signal class with undo/redo functionality using ChangeStackSignalMixin. Demonstrates creating a signal, changing its value, and performing undo/redo operations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/change-stack.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> with ChangeStackSignalMixin<int> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal(0);\n  \n  signal.value = 1;\n  print(signal.canUndo); // true\n  signal.undo();\n  print(signal.value); // 0\n  print(signal.canUndo); // false\n  signal.redo();\n  print(signal.value); // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings with SignalContainer and SharedPreferences in Dart\nDESCRIPTION: Demonstrates a practical example of using SignalContainer with SharedPreferences to manage app settings. It includes signal creation, value updates, and cleanup.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/utilities/container.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Settings {\n  final SharedPreferences prefs;\n  EffectCleanup? _cleanup;\n  Settings(this.prefs) {\n    _cleanup = effect(() {\n      for (final entry in setting.store.entries) {\n        final value = entry.value.peek();\n        if (prefs.getString(entry.key.$1) != value) {\n          prefs.setString(entry.key.$1, value).ignore();\n        }\n      }\n    });\n  }\n  late final setting = signalContainer<String, (String, String)>(\n    (val) => signal(prefs.getString(val.$1) ?? val.$2),\n    cache: true,\n  );\n  Signal<String> get darkMode => setting(('dark-mode', 'false'));\n  void dispose() {\n    _cleanup?.call();\n    setting.dispose();\n  }\n}\n\nvoid main() {\n  // Load or find instance\n  late final SharedPreferences prefs = ...;\n\n  // Create settings\n  final settings = Settings(prefs);\n\n  // Get value\n  print('dark mode: ${settings.darkMode}');\n\n  // Update value\n  settings.darkMode.value = 'true';\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ValueNotifier to Signal in Dart\nDESCRIPTION: Shows how to convert existing ValueNotifiers to Signals for incremental migration, maintaining compatibility with existing code.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal notifier = ValueNotifier(0);\nfinal ValueListenable listenable = ...;\n\nfinal notifierSignal = notifier.toSignal();\n// Will update notifier when the value is set\nnotifierSignal.value = 1; // calls notifier.value = 1;\n\n// React to changes to listenable\nfinal listenableSignal = listenable.toSignal();\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating FlutterSignal in Dart\nDESCRIPTION: Demonstrates how to import the signals_flutter package and create a signal that extends ValueNotifier. It also shows various type assertions to confirm the signal's compatibility.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/signal.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nfinal count = signal(0);\n\nassert(count is Signal<int>);\nassert(count is FlutterSignal<int>);\nassert(count is FlutterReadonlySignal<int>);\nassert(count is ValueNotifier<int>);\n```\n\n----------------------------------------\n\nTITLE: Creating IterableSignal using toSignal() extension method in Dart\nDESCRIPTION: This snippet shows an alternative way to create an IterableSignal using the toSignal() extension method on a synchronous generator function. It converts the iterable directly into a signal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/iterable.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal iterable = () sync* {...};\n\nfinal s = iterable.toSignal();\n```\n\n----------------------------------------\n\nTITLE: Integrating Signals with Lite Ref in Flutter\nDESCRIPTION: This snippet illustrates how to use Signals with the Lite Ref package for dependency injection in Flutter. It creates a scoped reference for a signal and uses it in the widget tree.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/dependency-injection.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal counterRef = Ref.scoped(\n  (_) => signal(0),\n  dispose: (instance) => instance.dispose(),\n);\n\nvoid main() {\n  runApp(LiteRefScope(child: MyApp()));\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final counter = counterRef.of(context);\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Signals with Zones'),\n        ),\n        body: Center(\n          child: Watch((context) => Text('Value: $counter')),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          child: Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Infinite Loops in Bi-directional Data Flow with Signals in Dart\nDESCRIPTION: This snippet demonstrates how to use the 'untracked' method to prevent infinite loops when implementing bi-directional data flow with Signals in Dart.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/bi-directional-data-flow.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal a = signal(0);\nfinal b = signal(0);\n\neffect(() {\n  b.value = untracked(() => a.value + 1);\n});\n\neffect(() {\n  a.value = untracked(() => b.value + 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing QueueSignalMixin with Signal class in Dart\nDESCRIPTION: Demonstrates how to create a custom Signal class with QueueSignalMixin for handling Queue<int> operations. Shows initialization and usage of queue operations like addFirst and addLast with reactive effects tracking.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/queue.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<Queue<int>>\n    with QueueSignalMixin<int, Queue<int>> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final q = Queue<int>();\n  a.addFirst(1);\n  final signal = MySignal(q);\n  \n  effect(() {\n    print(signal.length);\n  });\n\n  signal.addLast(4);\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing Subscriptions in Dart\nDESCRIPTION: This snippet shows how to dispose of all subscriptions associated with a connector. It demonstrates two ways of adding streams and then calls the 'dispose' method to cancel all subscriptions.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/connect.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = signal(0);\nfinal c = connect(s);\n\nfinal s1 = Stream.value(1);\nfinal s2 = Stream.value(2);\n\nc.from(s1).from(s2);\n// or\nc << s1 << s2\n\nc.dispose(); // This will cancel all subscriptions\n```\n\n----------------------------------------\n\nTITLE: Creating StreamSignal using toSignal() extension method in Dart\nDESCRIPTION: Shows how to create a StreamSignal using the toSignal() extension method on a stream. It initializes a stream that yields a single value and converts it to a signal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal stream = () async* {\n    yield 1;\n};\nfinal s = stream.toSignal();\n```\n\n----------------------------------------\n\nTITLE: Implementing SinkSignalMixin in Dart\nDESCRIPTION: Demonstrates how to create a Signal class that implements the Sink interface using SinkSignalMixin. Shows basic usage including adding values and closing the signal. The example illustrates value updates and disposal state checking.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/sink.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> with SinkSignalMixin<int> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal(0);\n  signal.add(1);\n  print(signal.value); // 1\n  signal.close();\n  print(signal.disposed); // true\n}\n```\n\n----------------------------------------\n\nTITLE: Awaiting AsyncSignal Values with Future\nDESCRIPTION: Shows how to await a signal value using the .future getter until completion.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.loading());\ns.value = AsyncState.data(1);\nawait s.future; // Waits until data or error is set\n```\n\n----------------------------------------\n\nTITLE: Nested Batch Operations\nDESCRIPTION: Illustrates how nested batch operations work, with updates being flushed only when the outermost batch completes. Shows counter signal updates within nested batch calls.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/batch.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal counter = signal(0);\neffect(() => print(counter.value));\n\nbatch(() {\n\tbatch(() {\n\t\t// Signal is invalidated, but update is not flushed because\n\t\t// we're still inside another batch\n\t\tcounter.value = 1;\n\t});\n\n\t// Still not updated...\n});\n// Now the callback completed and we'll trigger the effect.\n```\n\n----------------------------------------\n\nTITLE: Signal Creation Snippets for Dart\nDESCRIPTION: Collection of code snippets for creating different types of signals in Dart/Flutter applications. Includes basic signals, computed signals, iterable signals, list signals, map signals, and more.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/editors/vscode/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsig     -> signal()\ncomp    -> computed(() => ...)\nitrsig  -> iterableSignal<T>()\nlstsig  -> listSignal<T>()\nmpsig   -> mapSignal<K, V>()\nstsig   -> setSignal<T>()\nundosig -> changeStack()\nasig    -> asyncSignal()\nascomp  -> computedAsync(() async => ...)\nfusig   -> futureSignal<T>(() async => ...)\nstsig   -> streamSignal<T>(() async* => ...)\nsigcon  -> signalContainer<T, A>(() => ...)\nrsigcon -> readonlySignalContainer<T, A>(() => ...)\nvalsig  -> ValueSignal<T>\nwatch   -> Watch((context) => ...)\nwatchb  -> Watch.builder(builder: (context) => ...)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ValueListenable Implementation in Signals 6.0.0\nDESCRIPTION: Shows how Computed signals automatically implement ValueListenable interface in Signals 6.0.0 when using the flutter import. This allows for easier integration with Flutter widgets expecting ValueListenable.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/value-listenable.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nfinal count = computed(() => 0);\nassert(count is Computed<int>);\nassert(count is ValueListenable<int>);\n```\n\n----------------------------------------\n\nTITLE: Creating a Readonly SignalContainer in Dart\nDESCRIPTION: Demonstrates how to create a readonly signal container and use it to create multiple signals based on input arguments.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/utilities/container.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = readonlySignalContainer<Cache, String>((e) {\n  return signal(Cache(e));\n});\nfinal cacheA = container('cache-a');\nfinal cacheB = container('cache-b');\nfinal cacheC = container('cache-c');\n```\n\n----------------------------------------\n\nTITLE: Preventing Signal Effect Cycles in Dart\nDESCRIPTION: Illustrates an example of how not to use effects to prevent infinite loops when mutating signals.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/effect.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:signals/signals.dart';\n\nFuture<void> main() async {\n  final completer = Completer<void>();\n  final age = signal(0);\n\n  effect(() {\n    print('You are ${age.value} years old');\n    age.value++; // <-- This will throw a cycle error\n  });\n\n  await completer.future;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SetSignalMixin in Dart\nDESCRIPTION: Example demonstrating how to implement SetSignalMixin with a Signal class that handles a Set of integers. Shows creation of a custom Signal class, initialization with a Set value, and usage of reactive Set operations like add(), remove(), and contains().\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/set.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<Set<int>>\n    with IterableSignalMixin<int, Set<int>>, SetSignalMixin<int, Set<int>> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal({1, 2, 3});\n  \n  effect(() {\n    print(signal.length);\n  });\n\n  signal.add(4);\n  signal.remove(1);\n\n  print(signal.contains(2)); // true\n}\n```\n\n----------------------------------------\n\nTITLE: ListSignal Operations and Modifications\nDESCRIPTION: Demonstrates various list operations and modifications on a ListSignal, including index-based assignments, length queries, and list interface methods. Shows how ListSignal maintains Dart List interface compatibility.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/list.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal s1 = listSignal([1, 2, 3]);\n\n// by index\ns1[0] = -1;\nprint(s1.length); // 3\n\n// expose common Dart List interfaces\ns1.addAll([4, 5, 6]);\ns1.first = 1;\n\n// extended operators\nfinal s2 = s1 & [3, 4, 5];\n```\n\n----------------------------------------\n\nTITLE: Implementing EventSinkSignalMixin in Dart\nDESCRIPTION: Demonstrates how to create and use a Signal class with EventSinkSignalMixin. Shows usage of add(), addError(), and close() methods with their effects on the signal's state.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/event-sink.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<AsyncState<int>> with EventSinkSignalMixin<int> {\n  MySignal(int value) : super(AsyncState.data(value));\n}\n\nvoid main() {\n  final signal = MySignal(0);\n  signal.add(1);\n  print(signal.value.hasValue); // true\n  print(signal.value.value); // 1\n  signal.addError('error');\n  print(signal.value.hasError); // true\n  print(signal.value.error); // error\n  signal.close();\n  print(signal.disposed); // true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyValueStore Interface in Dart\nDESCRIPTION: Abstract class defining the interface for key-value storage operations with async methods for setting, getting, and removing items.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/persisted-signals.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class KeyValueStore {\n  Future<void> setItem(String key, String value);\n  Future<String?> getItem(String key);\n  Future<void> removeItem(String key);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AsyncSignal Errors\nDESCRIPTION: Shows how to access error information from AsyncSignal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.error('error', null));\nprint(s.error); // 'error' or null\n```\n\n----------------------------------------\n\nTITLE: Initializing AsyncSignal States in Dart\nDESCRIPTION: Demonstrates basic AsyncSignal creation and state manipulation including loading, data, and error states.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal(AsyncState.data(1));\ns.value = AsyncState.loading(); // or AsyncLoading();\ns.value = AsyncState.error('Error', null); // or AsyncError();\n```\n\n----------------------------------------\n\nTITLE: Using ChangeStackSignal with Limited Stack Size in Dart\nDESCRIPTION: This example shows the usage of ChangeStackSignal with a limit of 2. It demonstrates how the limit affects the undo and redo operations, and checks the canUndo property.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/change-stack.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = ChangeStackSignal(0, limit: 2);\ns.value = 1;\ns.value = 2;\ns.value = 3;\nprint(s.value); // 3\ns.undo();\ns.undo();\nprint(s.value); // 1\nprint(s.canUndo); // false\ns.redo();\nprint(s.value); // 2\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple ValueNotifiers in Flutter Widget\nDESCRIPTION: Illustrates the complexity of managing multiple ValueNotifiers in a Flutter widget, including listener setup, disposal, and UI updates.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyWidget extends ... {\nfinal count1 = ValueNotifier(0);\nfinal count2 = ValueNotifier(0);\n\n// React to count 1 changing\ncount1.addListener(() {\n    if (mounted) setState(() {});\n});\n\n// React to count 2 changing\ncount2.addListener(() {\n    if (mounted) setState(() {});\n});\n\n@override\nvoid dispose() {\n    super.dispose();\n    count1.dispose();\n    count2.dispose();\n}\n\n@override\nWidget build(BuildContext context) {\n    // If using setState\n    return Text('${count1.value} - ${count2.value}');\n\n    // Or if you are using with ValueListenableBuilder\n    return ValueListenableBuilder(\n        valueListenable: count1,\n        builder: (context, count1Val, child) {\n            // React when count 1 changes\n            return ValueListenableBuilder(\n                valueListenable: count2,\n                builder: (context, count2Val, child) {\n                    // React when count 2 changes\n                    return Text('$count1Val - $count2Val');\n                },\n            );\n        },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Cycles in Dart Effects\nDESCRIPTION: This snippet shows a warning about creating infinite loops by mutating signals inside effects and how to prevent it using untracked.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:signals/signals.dart';\n\nFuture<void> main() async {\n  final completer = Completer<void>();\n  final age = signal(0);\n\n  effect(() {\n    print('You are ${age.value} years old');\n    age.value++; // <-- This will throw a cycle error\n  });\n\n  await completer.future;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping AsyncSignal States\nDESCRIPTION: Shows how to handle different AsyncSignal states using the map function.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = asyncSignal<int>(AsyncState.data(1));\nsignal.value.map(\n data: (value) => 'Value: $value',\n error: (error, stackTrace) => 'Error: $error',\n loading: () => 'Loading...',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating ListSignal Using Constructor\nDESCRIPTION: Demonstrates how to create a list signal using the listSignal constructor method. This creates a signal that wraps a list of integers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/list.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = listSignal([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Using Signals with Zones in Flutter\nDESCRIPTION: This example shows how to use Signals with Dart Zones for dependency injection in Flutter. It uses the scoped_deps package to integrate Zones with Signals easily.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/dependency-injection.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\nimport 'package:scoped_deps/scoped_deps.dart';\nimport 'package:flutter/material.dart';\n\nfinal counter = create(() => signal(0));\n\nvoid main() {\n  runScoped(() => MyApp(), values: {counter});\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final counter = read(counter);\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Signals with Zones'),\n        ),\n        body: Center(\n          child: Watch((context) => Text('Value: $counter')),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => counter.value++,\n          child: Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Implementation After Watch Wrapper\nDESCRIPTION: Example of a StatelessWidget implementation after adding the Watch wrapper for automatic rebuilding on signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/README.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Widget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Watch((context) => Text(\n        'Hello World',\n        style: TextStyle(\n          color: Colors.black,\n        ),\n      ));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ChangeStackSignal in Dart\nDESCRIPTION: This snippet demonstrates how to create and use a ChangeStackSignal with a limit of 5. It shows setting values, undoing, and redoing changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/change-stack.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = ChangeStackSignal(0, limit: 5);\ns.value = 1;\ns.value = 2;\ns.value = 3;\nprint(s.value); // 3\ns.undo();\nprint(s.value); // 2\ns.redo();\nprint(s.value); // 3\n```\n\n----------------------------------------\n\nTITLE: Color Signal Implementation for Flutter\nDESCRIPTION: Specialized implementation of PersistedSignal for handling Color values in Flutter applications.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/persisted-signals.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ColorSignal extends PersistedSignal<Color> {\n  ColorSignal(super.val, String key)\n      : super(\n          key: key,\n          store: SharedPreferencesStore(),\n        );\n\n  @override\n  String encode(Color value) => value.value.toString();\n\n  @override\n  Color decode(String value) => Color(int.parse(value));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking AsyncSignal Error Status\nDESCRIPTION: Demonstrates error state checking in AsyncSignal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.loading());\nprint(s.hasError); // false\ns.value = AsyncState.error('error', null);\nprint(s.hasError); // true\n```\n\n----------------------------------------\n\nTITLE: Providing Signals as ValueListenable in Dart\nDESCRIPTION: Demonstrates how Signals can be used as ValueListenable or ValueNotifier, allowing for seamless integration with existing Flutter widgets and libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nfinal count = signal(0);\nfinal isEven = computed(() => count.value.isEven);\n\nfinal ValueNotifier<int> countNotifier = count;\n// Will call count.value when countNotifier is set\ncountNotifier.value = 1; // calls count.value = 1;\n\n// React to changes from the host signal\nfinal ValueListenable<bool> countListenable = isEven;\n```\n\n----------------------------------------\n\nTITLE: Managing StreamSignal dependencies in Dart\nDESCRIPTION: Demonstrates how to handle dependencies in StreamSignal. By default, the callback is called once and the stream is cached unless a signal is read in the callback. The example shows how the stream value updates when a dependent signal changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal count = signal(0);\nfinal s = streamSignal(() async* {\n    final value = count();\n    yield value;\n});\n\nawait s.future; // 0\ncount.value = 1;\nawait s.future; // 1\n```\n\n----------------------------------------\n\nTITLE: Disposing Signal Effects in Dart\nDESCRIPTION: Shows how to destroy an effect and unsubscribe from all signals it was subscribed to using the dispose function.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/effect.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal name = signal(\"Jane\");\nfinal surname = signal(\"Doe\");\nfinal fullName = computed(() => name.value + \" \" + surname.value);\n\n// Logs: \"Jane Doe\"\nfinal dispose = effect(() => print(fullName.value));\n\n// Destroy effect and subscriptions\ndispose();\n\n// Update does nothing, because no one is subscribed anymore.\n// Even the computed `fullName` signal won't change, because it knows\n// that no one listens to it.\nsurname.value = \"Doe 2\";\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Signal with ValueListenableSignalMixin in Dart\nDESCRIPTION: This snippet shows how to create a custom signal that extends Computed and uses the ValueListenableSignalMixin to implement ValueListenable functionality.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/computed.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nclass MySignal extends Computed<int> with ValueListenableSignalMixin<int> {\n  MySignal(int Function() cb) : super(cb);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unstable Signals Package in YAML\nDESCRIPTION: This snippet demonstrates how to add the unstable version of the Signals package from GitHub to a Dart or Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/install.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  signals:\n    git:\n      url: https://github.com/rodydavis/signals.dart\n      ref: main\n      path: packages/signals\n```\n\n----------------------------------------\n\nTITLE: Dependency Resolution in Batched Updates\nDESCRIPTION: Shows how signals accessed within a batch callback are immediately updated while other invalidated signals wait until the batch completes. Demonstrates with counter, double, and triple computed values.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/batch.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal counter = signal(0);\nfinal _double = computed(() => counter.value * 2);\nfinal _triple = computed(() => counter.value * 3);\n\neffect(() => print(_double.value, _triple.value));\n\nbatch(() {\n\tcounter.value = 1;\n\t// Logs: 2, despite being inside batch, but `triple`\n\t// will only update once the callback is complete\n\tprint(_double.value);\n});\n// Now we reached the end of the batch and call the effect\n```\n\n----------------------------------------\n\nTITLE: Creating a Signal and Connector in Dart\nDESCRIPTION: This snippet shows how to create a signal and use the 'connect' method to create a connector. The signal is initialized with a value of 0.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/connect.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = signal(0);\nfinal c = connect(s);\n```\n\n----------------------------------------\n\nTITLE: Enum Signal Implementation in Dart\nDESCRIPTION: Specialized implementation of PersistedSignal for handling enum values with custom encoding/decoding.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/persisted-signals.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass EnumSignal<T extends Enum> extends PersistedSignal<T> {\n  EnumSignal(super.val, String key, this.values)\n      : super(\n          key: key,\n          store: SharedPreferencesStore(),\n        );\n\n  final List<T> values;\n\n  @override\n  T decode(String value) => values.firstWhere((e) => e.name == value);\n\n  @override\n  String encode(T value) => value.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StreamSignal using streamSignal function in Dart\nDESCRIPTION: Demonstrates how to create a StreamSignal using the streamSignal function. It initializes a stream that yields a single value and converts it into a signal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal stream = () async* {\n    yield 1;\n};\nfinal s = streamSignal(() => stream);\n```\n\n----------------------------------------\n\nTITLE: Using Signal.peek() for Previous Values\nDESCRIPTION: Shows how to use signal.peek() to read a signal's previous value without creating a subscription, useful for effects that need to write to other signals.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/preact_signals/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal counter = signal(0);\nfinal effectCount = signal(0);\n\neffect(() {\n    print(counter.value);\n\n    // Whenever this effect is triggered, increase `effectCount`.\n    // But we don't want this signal to react to `effectCount`\n    effectCount.value = effectCount.peek() + 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Required AsyncSignal Values\nDESCRIPTION: Shows how to force unwrap an AsyncSignal value with error handling.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.data(1));\nprint(s.requireValue); // 1\n```\n\n----------------------------------------\n\nTITLE: Checking AsyncSignal Refresh Status\nDESCRIPTION: Shows how to check if an AsyncSignal is in a refreshing state with loading flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.loading());\nprint(s.isRefreshing); // false\ns.value = AsyncState.error('error', null, isLoading: true);\nprint(s.isRefreshing); // true\ns.value = AsyncData(1, isLoading: true);\nprint(s.isRefreshing); // true\n```\n\n----------------------------------------\n\nTITLE: Reloading StreamSignal value in Dart\nDESCRIPTION: Shows how to use the .reload() method to reload the StreamSignal value. It sets the state to AsyncLoading and passes in the value or error as data.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal stream = (int value) async* {\n    yield value;\n};\nfinal s = streamSignal(() => stream);\ns.reload();\nprint(s.value is AsyncLoading); // true\n```\n\n----------------------------------------\n\nTITLE: Using Signals in Pure Dart Applications\nDESCRIPTION: Illustrates how Signals can be used in non-Flutter Dart applications, providing reactive programming capabilities across different platforms and environments.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nvoid main() {\n    final count1 = signal(0);\n    final count2 = signal(0);\n    final total = computed(() => count1.value +     count2.value);\n    final isEven = computed(() => total.value.isEven);\n    final isOdd = computed(() => total.value.isOdd);\n    \n    effect(() {\n        print('$total even=$isEven odd=$isOdd');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StreamSignalMixin for Signal in Dart\nDESCRIPTION: This snippet shows how to create a custom Signal class with StreamSignalMixin and use it in a simple Dart program. It demonstrates the basic usage of the mixin and its Stream-like behavior.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/stream.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> with StreamSignalMixin<int> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal(1);\n  \n  assert(signal is Signal<int>);\n  assert(signal is Stream<int>);\n\n  signal.listen((value) {\n    print(value);\n  });\n\n  signal.value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Signals Package via Flutter CLI\nDESCRIPTION: This command adds the Signals package to a Flutter project using the Flutter command-line interface.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/install.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub add signals\n```\n\n----------------------------------------\n\nTITLE: Signal Effect in Flutter Hook Widget\nDESCRIPTION: Shows how to create a signal effect that runs when signal values change. Useful for side effects like logging or external updates.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/README.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  @override\n  Widget build(BuildContext context) {\n    final count = useSignal(0);\n    useSignalEffect(() {\n        print('count: $count');\n    });\n    return Text('Count: $countStr');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ListSignal Using Extension Method\nDESCRIPTION: Shows how to create a list signal using the toSignal() extension method on an existing list.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/list.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = [1, 2, 3].toSignal();\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutable SignalContainer in Dart\nDESCRIPTION: Shows how to create a mutable signal container using signalContainer and modify the values of the created signals.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/utilities/container.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal counters = signalContainer<int, int>((e) {\n  return signal(e);\n});\nfinal counterA = counters(1);\nfinal counterB = counters(2);\nfinal counterC = counters(3);\ncounterA.value = 2;\ncounterB.value = 3;\ncounterC.value = 4;\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueListenableSignalMixin in Dart\nDESCRIPTION: Demonstrates how to create a custom Signal class using ValueListenableSignalMixin and shows basic usage including adding and removing listeners.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/value-listenable.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> with ValueListenableSignalMixin<int> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal(0);\n  assert(signal is ReadonlySignal<int>);\n  assert(signal is ValueListenable<int>);\n  final listener = () => print(signal.value);\n  signal.addListener(listener);\n  signal.value = 1;\n  signal.removeListener(listener);\n  signal.value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Integration with Computed Signals\nDESCRIPTION: Demonstrates using computed signals in Flutter with automatic disposal when widgets are removed from the tree.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/computed.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:signals/signals_flutter.dart';\n\nclass CounterWidget extends StatefulWidget {\n  @override\n  _CounterWidgetState createState() => _CounterWidgetState();\n}\n\nclass _CounterWidgetState extends State<CounterWidget> with SignalsMixin {\n  late final counter = createSignal(0);\n  late final isEven = createComputed(() => counter.value.isEven);\n  late final isOdd = createComputed(() => counter.value.isOdd);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text('Counter: even=$isEven, odd=$isOdd'),\n            ElevatedButton(\n              onPressed: () => counter.value++,\n              child: Text('Increment'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Signals in SignalContainer in Dart\nDESCRIPTION: Illustrates how to enable caching in a SignalContainer to return the same signal instance for identical inputs.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/utilities/container.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = readonlySignalContainer<Cache, String>((e) {\n  return signal(Cache(e));\n}, cache: true);\nfinal cacheA = container('cache-a');\nfinal cacheB = container('cache-a');\nprint(cacheA == cacheB); // true\n```\n\n----------------------------------------\n\nTITLE: Creating and Asserting FlutterComputed Signal in Dart\nDESCRIPTION: This snippet demonstrates how to create a FlutterComputed signal and assert its types. It shows that the signal is an instance of Signal, FlutterComputed, FlutterReadonlySignal, and ValueListenable.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/computed.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nfinal count = computed(() => 0);\n\nassert(count is Signal<int>);\nassert(count is FlutterComputed<int>);\nassert(count is FlutterReadonlySignal<int>);\nassert(count is ValueListenable<int>);\n```\n\n----------------------------------------\n\nTITLE: Extending FlutterComputed for Custom Signal in Dart\nDESCRIPTION: This snippet demonstrates an alternative way to create a custom signal by directly extending the FlutterComputed class.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/flutter/computed.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nclass MySignal extends FlutterComputed<int> {\n  MySignal(int Function() cb) : super(cb);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Future Signal\nDESCRIPTION: Shows two methods to create a future signal - using futureSignal function or toSignal extension method.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/future.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = futureSignal(() async => 1);\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = Future(() => 1).toSignal();\n```\n\n----------------------------------------\n\nTITLE: Running Linter Setup Commands\nDESCRIPTION: Series of Flutter commands to clean project, get dependencies, and run custom lint.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter clean\nflutter pub get\ndart run custom_lint\n```\n\n----------------------------------------\n\nTITLE: Accessing Future Signal Value\nDESCRIPTION: Demonstrates how to access the value of a future signal using the value property which returns AsyncState<T>.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/future.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = futureSignal(() => Future(() => 1));\nfinal value = s.value.value; // 1 or null\n```\n\n----------------------------------------\n\nTITLE: Initializing SetSignal using Constructor\nDESCRIPTION: Creates a new SetSignal instance using the setSignal constructor with an initial set of integers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/set.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = setSignal({1, 2, 3});\n```\n\n----------------------------------------\n\nTITLE: Creating SetSignal using Extension Method\nDESCRIPTION: Converts an existing Set to a SetSignal using the toSignal() extension method.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/set.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = {1, 2, 3}.toSignal();\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueNotifierSignalMixin in Dart\nDESCRIPTION: Demonstrates how to create a custom Signal class that implements ValueNotifier using the ValueNotifierSignalMixin. It shows basic usage including listener management and value updates.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/value-notifier.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> with ValueNotifierSignalMixin<int> {\n  MySignal(super.internalValue);\n}\n\nvoid main() {\n  final signal = MySignal(0);\n  assert(signal is ReadonlySignal<int>);\n  assert(signal is ValueNotifier<int>);\n  final listener = () => print(signal.value);\n  signal.addListener(listener);\n  signal.value = 1;\n  signal.removeListener(listener);\n  signal.value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Computed Signal Class\nDESCRIPTION: Shows how to create a custom computed signal by extending the Computed class.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/computed.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComputed extends Computed<int> {\n  MyComputed() : super(() => 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Maybe Mapping AsyncSignal States\nDESCRIPTION: Demonstrates partial state handling with maybeMap function and default cases.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = asyncSignal<int>(AsyncState.data(1));\nsignal.value.maybeMap(\n data: (value) => 'Value: $value',\n orElse: () => 'Loading...',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining SignalsObserver Abstract Class in Dart\nDESCRIPTION: Abstract class definition for SignalsObserver that defines methods for tracking signal and computed value creation and updates. Includes a static instance property for global access.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/utilities/observer.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class SignalsObserver {\n  void onSignalCreated(Signal instance, dynamic value);\n  void onSignalUpdated(Signal instance, dynamic value);\n  void onComputedCreated(Computed instance);\n  void onComputedUpdated(Computed instance, dynamic value);\n  static SignalsObserver? instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying MapSignal in Dart\nDESCRIPTION: Shows various methods to modify a MapSignal, including direct key assignment, using addAll() method, and remove() method. It also demonstrates accessing values and properties of the MapSignal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/map.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal s1 = mapSignal({'a': 1, 'b': 2, 'c': 3});\n\n// by key\ns1['a'] = -1;\ns1['d'] = 7;\ns1['d'];         // 7\n\n// expose common Dart Map interfaces\ns1.addAll({'e': 6, 'f': 7});\ns1.remove('b');\ns1.keys.length;  // 5\n```\n\n----------------------------------------\n\nTITLE: Importing Signals Package in Flutter\nDESCRIPTION: This import statement is used to include the Signals package specifically for Flutter projects.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/install.mdx#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Store in Dart\nDESCRIPTION: Implementation of KeyValueStore interface using an in-memory Map for testing purposes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/persisted-signals.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass InMemoryStore implements KeyValueStore {\n  final Map<String, String> _store = {};\n\n  @override\n  Future<String?> getItem(String key) async {\n    return _store[key];\n  }\n\n  @override\n  Future<void> removeItem(String key) async {\n    _store.remove(key);\n  }\n\n  @override\n  Future<void> setItem(String key, String value) async {\n    _store[key] = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build with CMake\nDESCRIPTION: Configures CMake build settings for a Flutter Windows desktop application. Sets up the executable target with required source files, applies standard build settings, defines version information, and configures dependencies including Flutter libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\") \ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Checking AsyncSignal Reload Status\nDESCRIPTION: Demonstrates how to check if an AsyncSignal is in a reloading state.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.loading());\nprint(s.isReloading); // false\ns.value = AsyncState.loading(data: 1);\nprint(s.isReloading); // true\ns.value = AsyncState.loading(error: ('error', null));\nprint(s.isReloading); // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Values with ValueNotifier in Flutter\nDESCRIPTION: Shows the complexity of implementing computed values using ValueNotifiers in Flutter, including manual state management and UI updates.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyWidget extends ... {\nfinal count1 = ValueNotifier(0);\nfinal count2 = ValueNotifier(0);\n\n// React to count 1 changing\ncount1.addListener(() {\n    if (mounted) setState(() {});\n});\n\n// React to count 2 changing\ncount2.addListener(() {\n    if (mounted) setState(() {});\n});\n\nint get total => count1.value + count2.value;\nint get isEven => total.isEven;\nint get isOdd => total.isOdd;\n\n@override\nvoid dispose() {\n    super.dispose();\n    count1.dispose();\n    count2.dispose();\n}\n\n@override\nWidget build(BuildContext context) {\n    // If using setState\n    return Text('$total even=$isEven odd=$isOdd');\n\n    // Or if you are using with ValueListenableBuilder\n    return ValueListenableBuilder(\n        valueListenable: count1,\n        builder: (context, count1Val, child) {\n            // React when count 1 changes\n            return ValueListenableBuilder(\n                valueListenable: count2,\n                builder: (context, count2Val, child) {\n                    // React when count 2 changes\n                    return Text('$total even=$isEven odd=$isOdd');\n                },\n            );\n        },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using untracked with ValueNotifierSignalMixin in Dart\nDESCRIPTION: Shows how to use the untracked function to prevent automatic dependency tracking when reading signal values within a listener callback.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/value-notifier.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = MySignal(0);\nfinal dep = signal(0);\nfinal listener = () {\n    untracked(() {\n        print(signal.value);\n        print(dep.value);\n    });\n};\nsignal.addListener(listener);\n```\n\n----------------------------------------\n\nTITLE: Persisted Signal Implementation with JSON Encoding\nDESCRIPTION: Implementation of PersistedSignal class and mixin with JSON encoding/decoding capabilities for data persistence.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/persisted-signals.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nabstract class PersistedSignal<T> extends FlutterSignal<T>\n    with PersistedSignalMixin<T> {\n  PersistedSignal(\n    super.internalValue, {\n    super.autoDispose,\n    super.debugLabel,\n    required this.key,\n    required this.store,\n  });\n\n  @override\n  final String key;\n\n  @override\n  final KeyValueStore store;\n}\n\nmixin PersistedSignalMixin<T> on Signal<T> {\n  String get key;\n  KeyValueStore get store;\n\n  bool loaded = false;\n\n  Future<void> init() async {\n    try {\n      final val = await load();\n      super.value = val;\n    } catch (e) {\n      debugPrint('Error loading persisted signal: $e');\n    } finally {\n      loaded = true;\n    }\n  }\n\n  @override\n  T get value {\n    if (!loaded) init().ignore();\n    return super.value;\n  }\n\n  @override\n  set value(T value) {\n    super.value = value;\n    save(value).ignore();\n  }\n\n  Future<T> load() async {\n    final val = await store.getItem(key);\n    if (val == null) return value;\n    return decode(val);\n  }\n\n  Future<void> save(T value) async {\n    final str = encode(value);\n    await store.setItem(key, str);\n  }\n\n  T decode(String value) => jsonDecode(value);\n\n  String encode(T value) => jsonEncode(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Effect Cleanup Callback in Dart\nDESCRIPTION: Demonstrates how to implement a cleanup function that gets called when the effect is destroyed.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/effect.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal s = signal(0);\n\nfinal dispose = effect(() {\n  print(s.value);\n  return () => print('Effect destroyed');\n});\n\n// Destroy effect and subscriptions\ndispose();\n```\n\n----------------------------------------\n\nTITLE: Creating IterableSignal using iterableSignal function in Dart\nDESCRIPTION: This snippet demonstrates how to create an IterableSignal using the iterableSignal function. It takes a synchronous generator function as an argument and returns an IterableSignal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/value/iterable.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal iterable = () sync* {...};\n\nfinal s = iterableSignal(iterable);\n```\n\n----------------------------------------\n\nTITLE: Checking AsyncSignal Completion Status\nDESCRIPTION: Demonstrates how to check if an AsyncSignal has completed with a value or error.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.loading());\ns.value = AsyncState.data(1);\nprint(s.isCompleted); // true\n```\n\n----------------------------------------\n\nTITLE: Enabling Signal Observation in Dart\nDESCRIPTION: Example of enabling signal observation by setting the SignalsObserver instance at application startup. Shows how to use the built-in LoggingSignalsObserver.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/utilities/observer.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n    SignalsObserver.instance = LoggingSignalsObserver(); // or custom observer\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build\nDESCRIPTION: Sets up the CMake build configuration for a Flutter Windows desktop application. Defines the executable target with required source files, applies standard build settings, adds version definitions, and configures necessary dependencies and libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Version Changes and Feature Additions in Markdown\nDESCRIPTION: Lists version changes including a dependency update to flutter_hooks and additions of new signal-related hooks like useSignal, useComputed, useSignalEffect, and useExistingSignal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n- bump flutter_hooks to 0.20.0\n\n## 0.1.0\n\n- Add useSignal\n- Add useComputed\n- Add useSignalEffect\n- Add useExistingSignal\n```\n\n----------------------------------------\n\nTITLE: Importing Signals Package in Dart\nDESCRIPTION: This import statement is used to include the Signals package in a Dart file.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/install.mdx#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n```\n\n----------------------------------------\n\nTITLE: Initializing Signals and ValueListenable in Dart\nDESCRIPTION: Demonstrates how Signals implement ValueListenable and ValueNotifier interfaces in Flutter, allowing for easy integration with existing code.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/value-notifier.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals_flutter.dart';\n\nfinal count = signal(0);\nassert(count is ValueListenable<int>);\nassert(count is Signal<int>);\n\nfinal isEven = computed(() => count.value.isEven);\nassert(isEven is ValueListenable<bool>);\nassert(isEven is Computed<bool>);\n```\n\n----------------------------------------\n\nTITLE: SharedPreferences Store Implementation in Dart\nDESCRIPTION: Implementation of KeyValueStore interface using SharedPreferences for persistent storage.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/persisted-signals.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass SharedPreferencesStore implements KeyValueStore {\n  SharedPreferencesStore();\n\n  SharedPreferences? prefs;\n\n  Future<SharedPreferences> init() async {\n    prefs ??= await SharedPreferences.getInstance();\n    return prefs!;\n  }\n\n  @override\n  Future<String?> getItem(String key) async {\n    final prefs = await init();\n    return prefs.getString(key);\n  }\n\n  @override\n  Future<void> removeItem(String key) async {\n    final prefs = await init();\n    prefs.remove(key);\n  }\n\n  @override\n  Future<void> setItem(String key, String value) async {\n    final prefs = await init();\n    prefs.setString(key, value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Effect Creation Example in Dart\nDESCRIPTION: Shows an incorrect way of creating effects using late field variables, which should be avoided as they won't be evaluated.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/signals-mixin.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyState extends State<MyWidget> with SignalsMixin {\n  late final effect = createEffect(() => print('Effect created'));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Undo History Limit in Signal\nDESCRIPTION: Shows how to set a maximum limit on the number of changes that can be undone by overriding the limit property in the Signal class.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/mixins/change-stack.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MySignal extends Signal<int> with ChangeStackSignalMixin<int> {\n  MySignal(int value) : super(value);\n\n  @override\n  int limit = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking AsyncSignal Value Status\nDESCRIPTION: Shows how to verify if an AsyncSignal has a value set regardless of state.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.loading());\nprint(s.hasValue); // false\ns.value = AsyncState.data(1);\nprint(s.hasValue); // true\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching AsyncSignal States\nDESCRIPTION: Shows how to use Dart switch expressions for handling AsyncSignal states.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal signal = asyncSignal<int>(AsyncState.data(1));\nfinal value = switch (signal.value) {\n    AsyncData<int> data => 'value: ${data.value}',\n    AsyncError<int> error => 'error: ${error.error}',\n    AsyncLoading<int>() => 'loading',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Application Build in CMake\nDESCRIPTION: Defines the CMake configuration for building a Flutter application on Windows. It specifies the executable target, source files, applies standard build settings, adds preprocessor definitions for versioning, links necessary libraries, and configures include directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Signals Package via Dart CLI\nDESCRIPTION: This command adds the Signals package to a Dart project using the Dart command-line interface.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/install.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndart pub add signals\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List with Preact Signals in Dart\nDESCRIPTION: This snippet showcases a complete todo list application using Preact Signals for reactive state management. It includes task creation, filtering, and dynamic UI updates based on state changes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/html_todo_app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:html';\nimport 'package:preact_signals/preact_signals.dart';\n\ntypedef Task = ({String title, bool completed});\n\nvoid main() {\n  final todoForm = document.getElementById(\"todoForm\")!;\n  final todoInput = document.getElementById(\"todoInput\") as InputElement;\n  final todoList = document.getElementById(\"todoList\")!;\n  final taskFilter = document.getElementById(\"taskFilter\")!;\n  final taskCounter = document.getElementById(\"taskCounter\")!;\n\n  final tasks = <Task>[].toSignal();\n  final filter = signal(\"all\");\n\n  final filteredTasks = computed(() {\n    final currentFilter = filter.value;\n    final currentTasks = tasks;\n    if (currentFilter == \"all\") {\n      return currentTasks.toList();\n    } else if (currentFilter == \"active\") {\n      return currentTasks.where((task) => !task.completed).toList();\n    } else {\n      return currentTasks.where((task) => task.completed).toList();\n    }\n  });\n\n  final taskCount = computed(() {\n    return tasks.length;\n  });\n\n  final activeTaskCount = computed(() {\n    return tasks.where((task) => !task.completed).length;\n  });\n\n  final completedTaskCount = computed(() {\n    // we use taskCount.peek() instead of taskCount.value\n    // because this will recompute when activeTaskCount changes\n    // thus, we can avoid an unnecessary subscription\n    return taskCount.peek() - activeTaskCount.value;\n  });\n\n  todoForm.addEventListener(\"submit\", (event) {\n    event.preventDefault();\n    final taskTitle = todoInput.value?.trim();\n    if (taskTitle != null) {\n      final newTask = (title: taskTitle, completed: false);\n      tasks.add(newTask);\n      todoInput.value = \"\";\n    }\n  });\n\n  taskFilter.addEventListener(\"change\", (event) {\n    final target = event.target as InputElement;\n    filter.value = target.value ?? '';\n  });\n\n  effect(() {\n    final currentTasks = filteredTasks.value;\n    todoList.innerHtml = \"\";\n    for (var index = 0; index < currentTasks.length; index++) {\n      final task = currentTasks[index];\n      final listItem = document.createElement(\"li\");\n      final label = document.createElement(\"label\");\n      final checkbox = document.createElement(\"input\") as InputElement;\n      checkbox.type = \"checkbox\";\n      checkbox.checked = task.completed;\n      checkbox.addEventListener(\"change\", (e) {\n        tasks[index] = (\n          title: tasks[index].title,\n          completed: checkbox.checked ?? false,\n        );\n      });\n      label.append(checkbox);\n      label.append(Text(\" ${task.title}\"));\n      listItem.append(label);\n      todoList.append(listItem);\n    }\n  });\n\n  effect(() {\n    taskCounter.text = '''\n    Total: ${taskCount.value}, \n    Active: ${activeTaskCount.value}, \n    Completed: ${completedTaskCount.value}\n    ''';\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Generation for Flutter Project\nDESCRIPTION: Command to run build_runner for generating code in a Flutter project that uses code generation. The command includes the flag to delete conflicting outputs for clean generation.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub run build_runner build --delete-conflicting-outputs\n```\n\n----------------------------------------\n\nTITLE: Resetting StreamSignal to initial state in Dart\nDESCRIPTION: Shows how to use the .reset() method to reset the StreamSignal to its initial state. This allows recalling the stream on the next evaluation.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal stream = (int value) async* {\n    yield value;\n};\nfinal s = streamSignal(() => stream);\ns.reset();\n```\n\n----------------------------------------\n\nTITLE: Accessing AsyncSignal Stack Traces\nDESCRIPTION: Demonstrates accessing stack trace information from AsyncSignal errors.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.error('error', StackTrace(...)));\nprint(s.stackTrace); // StackTrace(...) or null\n```\n\n----------------------------------------\n\nTITLE: Reloading Future Signal\nDESCRIPTION: Shows how to reload a future signal by setting its state to AsyncLoading.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/future.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = futureSignal(() => Future(() => 1));\ns.reload();\nprint(s.value is AsyncLoading); // true\n```\n\n----------------------------------------\n\nTITLE: Accessing Optional AsyncSignal Values\nDESCRIPTION: Demonstrates accessing optional current value in AsyncSignal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/state.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal s = asyncSignal<int>(AsyncState.data(1));\nprint(s.value); // 1 or null\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Linux Application\nDESCRIPTION: Comprehensive CMake configuration for building a Flutter application on Linux. It includes project setup, compiler options, dependencies, build targets, and installation instructions, with specific handling for different build types and proper resource bundling.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"node_based_editor\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.node_based_editor\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build in CMake\nDESCRIPTION: This CMake script sets up the necessary configurations and build steps for a Flutter Windows application. It defines the Flutter library, wrapper libraries for plugins and the app, and sets up custom build commands for the Flutter tool backend.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry v6.0.2\nDESCRIPTION: Latest version changes documenting fixes for cycle errors and addition of new async state classes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_core/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.0.2\n\n- Fix cycle error with TrackedSignalMixin and Computed\n- Add `AsyncErrorReloading`, `AsyncErrorRefreshing`, `AsyncDataReloading`, `AsyncDataRefreshing`\n```\n\n----------------------------------------\n\nTITLE: Refreshing StreamSignal value in Dart\nDESCRIPTION: Demonstrates how to use the .refresh() method to refresh the StreamSignal value. It sets isLoading to true while maintaining the current state (AsyncData, AsyncLoading, AsyncError).\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/async/stream.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal stream = (int value) async* {\n    yield value;\n};\nfinal s = streamSignal(() => stream);\ns.refresh();\nprint(s.value.isLoading); // true\n```\n\n----------------------------------------\n\nTITLE: Disabling Signal Observation in Dart\nDESCRIPTION: Code example showing how to disable signal observation by setting the SignalsObserver instance to null.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/utilities/observer.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  SignalsObserver.instance = null;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Signal Updates in Dart\nDESCRIPTION: Demonstrates how to force an update for a signal using the set() method with force: true. This triggers all effects and marks all computed as dirty.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/signal.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal counter = signal(0);\ncounter.set(1, force: true);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bi-directional Data Flow with Signals in Dart\nDESCRIPTION: This snippet shows an example of bi-directional data flow between two signals that can lead to an infinite loop and throw a EffectCycleDetectionError.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/guides/bi-directional-data-flow.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal a = signal(0);\nfinal b = signal(0);\n\neffect(() {\n  b.value = a.value + 1;\n});\n\neffect(() {\n  a.value = b.value + 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Application Build Settings in CMake\nDESCRIPTION: Complete CMake configuration file for building a Flutter application on Linux. It defines project settings, compilation options, dependencies, and installation instructions for proper application packaging and execution.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"animations_example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.animations_example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Signals in Dart\nDESCRIPTION: Demonstrates basic signal creation, reading and writing values using the signal() function. Shows how to create a container for values that can change over time.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/preact_signals/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:preact_signals/preact_signals.dart';\n\nfinal counter = signal(0);\n\n// Read value from signal, logs: 0\nprint(counter.value);\n\n// Write to a signal\ncounter.value = 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter, GTK Dependencies, and Application Target\nDESCRIPTION: Sets up Flutter library and tool build rules, defines system-level dependencies like GTK, and configures the application target with source files and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend and Assembly Target in CMake\nDESCRIPTION: This snippet sets up a custom command and target to invoke the Flutter tool backend during the build process. It creates dependencies that ensure Flutter assets and libraries are properly assembled before the application is built.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Version 5.0.0 Changelog Entry\nDESCRIPTION: Release notes introducing a new linting rule for signal creation in build methods and updating signals dependency.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.0\n\n- add `signals_avoid_create_in_build_method` to show a warning for signals created in the build method\n- Bump `signals` to 5.0.0\n```\n\n----------------------------------------\n\nTITLE: Handling Cycles in Effects\nDESCRIPTION: Shows an example of an infinite loop caused by mutating a signal inside an effect, which should be avoided.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/preact_signals/README.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:preact_signals/preact_signals.dart';\n\nFuture<void> main() async {\n  final completer = Completer<void>();\n  final age = signal(0);\n\n  effect(() {\n    print('You are ${age.value} years old');\n    age.value++; // <-- This will throw a cycle error\n  });\n\n  await completer.future;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Minimal Updates with Signals in Dart\nDESCRIPTION: This snippet shows how signals optimize computations by only computing values when they are read. It demonstrates that if a signal is never read, its dependencies are not computed.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/overview.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal a = signal(0);\nfinal b = computed(() => a.value + 1);\nfinal c = computed(() => b.value + 1);\nfinal d = computed(() => c.value + 1);\n\n// if you never read `d` then none of the callbacks will be called\n\n// All the callbacks will be called\nprint(d.value); // 3\n\n// None of the callbacks will be called because the \n// value is cached at each node\nprint(d.value); // 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake for Windows\nDESCRIPTION: Sets up the Flutter library and header files for Windows builds. It defines the paths to the Flutter DLL, ICU data file, and necessary header files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Widget Implementation Before Watch Wrapper\nDESCRIPTION: Example of a StatelessWidget implementation before adding the Watch wrapper for signal reactivity.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/README.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Widget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      'Hello World',\n      style: TextStyle(\n        color: Colors.black,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Windows Application\nDESCRIPTION: Sets up installation rules for the executable, Flutter ICU data, Flutter library, plugin libraries, native assets, and AOT library. It also configures the installation of Flutter assets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend integration with custom commands and targets for assembling Flutter components.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding DartPad Example in HTML\nDESCRIPTION: This code snippet embeds a DartPad example into the documentation page. It demonstrates the usage of Signals.dart in an interactive environment.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://dartpad.dev/?id=1b2f58d30c33ee2ee5c5a159b8867861?theme=dark\" style=\"width: 100%; height: 600px;\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry v6.0.1\nDESCRIPTION: Bug fix release addressing StreamSignal initialization issue.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_core/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.0.1\n\n- Fix issue with StreamSignal `_stream not initialized`\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: This CMake script sets up the build configuration for a Flutter application on Windows. It defines the executable target, specifies source files, applies build settings, adds preprocessor definitions, and sets up dependencies including Flutter libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Basic Dart Usage Example\nDESCRIPTION: A simple code sample demonstrating basic package usage with a string constant declaration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/dart_mappable_example/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst like = 'sample';\n```\n\n----------------------------------------\n\nTITLE: Standard Build Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 support, warning flags, and optimization options for different build types.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries\nDESCRIPTION: Sets up the Flutter wrapper libraries for plugins and applications, including source files, compilation settings, and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter DevTools Extension in Development Mode\nDESCRIPTION: Command to run the Flutter DevTools extension in Chrome with simulated environment enabled\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_devtools_extension/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome --dart-define=use_simulated_environment=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Target and Dependencies\nDESCRIPTION: Defines the main application executable target and links required dependencies including Flutter and GTK.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: Creates a function to apply standard compilation settings to targets including C++17 support, warning levels, and exception handling configuration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library in CMake for Windows\nDESCRIPTION: This snippet sets up the Flutter library and its headers for use in a Windows application. It defines the library path, headers, and creates an interface library target.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry v6.0.0\nDESCRIPTION: Major version release detailing core implementation changes, new mixins, and significant API updates.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_core/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.0.0\n\n- Switching to **preact_signals** package for core implementation\n- Removing old deprecated methods\n- Add new mixins: EventSinkSignalMixin, SinkSignalMixin, StreamSignalMixin, SetSignalMixin, ListSignalMixin, MapSignalMixin, QueueSignalMixin, ChangeStackSignalMixin, IterableSignalMixin\n- Update AsyncSignal to implement EventSink\n- Removing previous/initial value from Signal and Computed in favor of TrackedSignal, TrackedSignalMixin and trackedSignal()\n- Update SignalsObserver to include value for signal created (instead of peek())\n- Updated examples\n- Remove callback to signal\n- Remove toSignal extension method (causing unintended casts) in favor of .$ for Object/Object?\n```\n\n----------------------------------------\n\nTITLE: Building Flutter DevTools Extension Package\nDESCRIPTION: Multi-step command to build the DevTools extension and copy it to the signals project directory. Includes dependency installation and extension compilation\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_devtools_extension/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get &&\ndart run devtools_extensions build_and_copy \\\n    --source=. \\\n    --dest=../signals/extension/devtools \n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration in CMake\nDESCRIPTION: Sets up the Flutter library configuration including system dependencies, library paths, and header files. Configures GTK, GLIB, and GIO dependencies using pkg-config.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds\nDESCRIPTION: Installs the Ahead-of-Time (AOT) compiled library for Profile and Release builds only, optimizing the application for production use.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers and Interface Library\nDESCRIPTION: Defines the list of Flutter library headers, prepends the ephemeral directory path to each header, and creates an interface library for Flutter with appropriate include directories and link libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/linux/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Building a Dart Web App for Production\nDESCRIPTION: Command to create a production-ready build of a Dart web application for deployment.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/html_canvas/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwebdev build\n```\n\n----------------------------------------\n\nTITLE: Astro Project Directory Structure\nDESCRIPTION: Overview of the default directory structure for an Astro + Starlight project showing key folders and configuration files\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers and configures them for inclusion in the build process.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules in CMake\nDESCRIPTION: Sets up installation rules for the application bundle including executables, libraries, and assets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Flutter Build Custom Command\nDESCRIPTION: Defines a custom build command that runs the Flutter tool backend script to generate necessary build artifacts. Uses a phantom target to ensure the command runs on every build.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Plugin Build Rules for Windows Application\nDESCRIPTION: Adds the Flutter library and tool build rules, sets up the application build, and includes generated plugin build rules.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers in CMake\nDESCRIPTION: Defines the list of Flutter library headers needed for the build and prepends the appropriate path prefix to each header using the custom list_prepend function.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Bundle Creation in CMake for Flutter\nDESCRIPTION: Sets up the installation process, including bundle creation, file copying, and handling of assets and libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Dependencies in CMake\nDESCRIPTION: Configures system-level dependencies required by the Flutter engine on Linux using pkg-config, including GTK, GLIB, and GIO libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Analysis Options for Signals Linter\nDESCRIPTION: YAML configuration to enable custom lint plugin in analysis_options.yaml file.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  plugins:\n    - custom_lint\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Windows Flutter Application\nDESCRIPTION: Sets up the CMake project with minimum required version and project name. It also defines the binary name and configures build options.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(node_based_editor LANGUAGES CXX)\n\nset(BINARY_NAME \"node_based_editor\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Bundle Creation\nDESCRIPTION: Sets up the installation process, including bundle directory creation, file copying, and asset management for the Flutter application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Libraries and System Dependencies for Linux Application\nDESCRIPTION: Adds Flutter managed directory, includes system-level dependencies like GTK, and defines the application ID. This sets up the core dependencies required for a Flutter Linux application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Custom Command\nDESCRIPTION: Sets up a custom build command for the Flutter tool backend to generate necessary files and libraries during the build process.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Effect Disposal Callback in Dart\nDESCRIPTION: Shows how to use the onDispose callback parameter to handle effect disposal.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/core/effect.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:signals/signals.dart';\n\nfinal s = signal(0);\n\nfinal dispose = effect(() {\n  print(s.value);\n}, onDispose: () => print('Effect destroyed'));\n\n// Destroy effect and subscriptions\ndispose();\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Linux Application\nDESCRIPTION: Sets default build type to Debug if not specified otherwise, with options for Profile and Release builds. This enables different optimization levels based on the build purpose.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries in CMake\nDESCRIPTION: Sets up the Flutter wrapper libraries for plugins and the main application. It defines the source files and compilation settings for these wrapper libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules\nDESCRIPTION: Configures installation rules for the application bundle including executables, libraries, and assets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Setup in CMake\nDESCRIPTION: Configures system dependencies required for Flutter on Linux, sets up library paths, and defines header files needed for the Flutter engine.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Information in Markdown Table\nDESCRIPTION: This code snippet shows a markdown table listing related packages and their corresponding Pub version badges. It provides quick access to package information and version status.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_core/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package           | Pub                                                                                                              |\n|-------------------|------------------------------------------------------------------------------------------------------------------|\n| `signals`         | [![signals](https://img.shields.io/pub/v/signals.svg)](https://pub.dev/packages/signals)                         |\n| `signals_flutter` | [![signals_flutter](https://img.shields.io/pub/v/signals_flutter.svg)](https://pub.dev/packages/signals_flutter) |\n| `signals_lint`    | [![signals_lint](https://img.shields.io/pub/v/signals_lint.svg)](https://pub.dev/packages/signals_lint)          |\n```\n\n----------------------------------------\n\nTITLE: Installing Signals Linter Dependencies\nDESCRIPTION: Command to add signals_lint and custom_lint dev dependencies to a Flutter project.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub add -d signals_lint custom_lint\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Windows Application\nDESCRIPTION: Complete CMake configuration that defines project settings, build modes, compilation options, and installation rules for a Flutter Windows application. It handles various aspects like Unicode support, C++17 standard, Flutter library integration, and asset management.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(infinite_scroll LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"infinite_scroll\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Plugin Build Rules for Flutter Linux Application\nDESCRIPTION: Includes the generated plugins file to manage building and adding plugins to the application. This ensures all Flutter plugins are properly integrated into the build.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper Library in CMake\nDESCRIPTION: Creates and configures the static library for Flutter application wrappers. Sets target properties, dependencies, and include directories needed for the Flutter application runner.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Settings\nDESCRIPTION: Configures CMake policies, sets installation paths, and defines cross-building settings if a sysroot is specified.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Defines a custom function to prepend a prefix to each element in a list. This function serves as a substitute for list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows CMake Configuration\nDESCRIPTION: The complete CMakeLists.txt file that configures Flutter build settings for Windows platform. It sets up ephemeral directories, configures the Flutter Windows library, creates wrapper libraries for plugins and the app, and establishes the Flutter tool backend connection.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path and Publishing Variables to Parent Scope\nDESCRIPTION: Sets the path to the Flutter library and publishes various paths to the parent scope for use in the install step, including ICU data file, build directory, and AOT library paths.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Main Application Target in CMake\nDESCRIPTION: Configures the main application executable target with source files and applies build settings and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Application Target Configuration\nDESCRIPTION: Configures the main application target including source files and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets and Flutter Assets in CMake\nDESCRIPTION: Configures the installation of native Windows assets and Flutter assets. It handles copying native assets from all packages and ensures that Flutter assets are refreshed on each build to avoid stale files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets and Flutter Assets\nDESCRIPTION: Sets up installation rules for native assets provided by build.dart and Flutter assets, ensuring assets are fully refreshed on each build.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version Requirement and Ephemeral Directory Setup for Flutter Linux\nDESCRIPTION: Sets the minimum required CMake version and defines the ephemeral directory path where Flutter generates temporary build files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake for Flutter Linux\nDESCRIPTION: A utility function that prepends a prefix to each element in a list. This function provides equivalent functionality to list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Types for Flutter Windows Application\nDESCRIPTION: Configures build types (Debug, Profile, Release) based on whether the generator supports multiple configurations. Sets default build type to Debug if not specified.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Dependencies for Linux\nDESCRIPTION: Sets up system-level dependencies for the Flutter library using pkg-config. It defines the Flutter library path and publishes variables to the parent scope for the install step.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components\nDESCRIPTION: Defines installation rules for the application binary, Flutter ICU data file, Flutter library, and bundled plugin libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Integration in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for generating necessary files. It creates a phony output to ensure the command runs every time and establishes a custom target 'flutter_assemble' that depends on the Flutter library and headers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the basic CMake project configuration, including the project name, languages, and executable name. It also defines the GTK application identifier.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Configuration Flags in CMake\nDESCRIPTION: Defines linker and compiler flags for the Profile build mode by copying settings from Release mode. Ensures Profile builds have optimized performance for profiling.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Windows Application\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 standard, warning levels, and exception handling.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets for Windows Application\nDESCRIPTION: Sets up installation of Flutter assets, ensuring they are fresh on each build by removing any previous versions. These assets are crucial for the application's UI and functionality.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Version 4.2.0 Changelog Entry\nDESCRIPTION: Release notes for signals dependency update.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.0\n\n- Bump `signals` to 4.2.0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake for Windows\nDESCRIPTION: This snippet configures the Flutter tool backend for Windows. It creates a custom command to generate necessary files and a custom target for assembling Flutter components.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: A custom CMake function that prepends a prefix to each element in a list. It serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function that applies standard compilation settings to targets, including C++17 standard, warning levels, exception handling, and debug configurations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Standard Build Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings to build targets, including C++14 standard and optimization flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Windows Flutter Application\nDESCRIPTION: Sets up installation directory settings and makes installation the default step. Configures where the application and its dependencies will be installed.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Support and Standard Compilation Settings in CMake\nDESCRIPTION: Adds Unicode support for all projects and defines a function to apply standard compilation settings to targets. The function configures C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Settings\nDESCRIPTION: Configures CMake policies, sets installation paths, and defines root filesystem settings for cross-building if applicable.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Plugin Build Rules for Windows Application\nDESCRIPTION: Adds subdirectories for Flutter managed files and the runner application. It also includes generated plugin build rules.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Windows\nDESCRIPTION: Creates a function to apply standard compilation settings to targets. Sets C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: This CMake script sets up the build configuration for a Flutter application on Windows. It defines the executable target, specifies source files, applies build settings, adds preprocessor definitions, and configures dependencies including Flutter libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings in CMake\nDESCRIPTION: Configures the Profile build mode settings by inheriting flags from the Release configuration. This ensures that Profile builds have optimized performance while still allowing for profiling capabilities.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: A custom function that prepends a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...), which isn't available in CMake 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the CMake project with minimum version requirement and project name. It also defines the executable name and configures build types.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components for Flutter Linux Application\nDESCRIPTION: Installs the binary, ICU data, Flutter library, and bundled libraries to their respective locations. This ensures all required components are available at runtime.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting up C++ Wrapper Sources in CMake\nDESCRIPTION: Prepares the C++ wrapper source files for the Flutter plugin and application integration. Organizes source files into core, plugin, and app categories and transforms their paths.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Windows CMake Configuration\nDESCRIPTION: Sets up the basic CMake configuration for a Flutter Windows project, including minimum CMake version, ephemeral directory, and configuration inclusion.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Setup in CMake\nDESCRIPTION: Configures system-level dependencies and sets up the Flutter library for Linux. It finds required packages using pkg_check_modules and sets the path to the Flutter library.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library in CMake\nDESCRIPTION: Creates a static library for Flutter application wrappers, including core and app-specific wrapper sources. Configures it to link against the Flutter library and include necessary headers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/flutter/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter managed directory, sets up system-level dependencies like GTK, and defines the application target with its source files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Settings for Flutter Windows Application in CMake\nDESCRIPTION: Initializes the CMake project with C++ language, sets the binary name, and configures build types (Debug, Profile, Release). It defines compilation standards and Unicode settings for Windows development.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(eval_calculator LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"eval_calculator\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Configuration Options in CMake\nDESCRIPTION: Defines build configuration types (Debug/Profile/Release) and handles multi-configuration generators.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Build with CMake\nDESCRIPTION: This CMake script sets up the necessary configuration for building Flutter applications on Linux. It defines system dependencies, sets up the Flutter library, and configures the build process.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\n\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries for Windows\nDESCRIPTION: Sets up the Flutter wrapper libraries for plugins and the main application. It defines source files, creates static libraries, and configures their properties and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Windows Flutter Application\nDESCRIPTION: This CMake script sets up the project configuration for a Windows Flutter application. It defines the executable target, specifies source files, applies build settings, adds preprocessor definitions, and sets up dependencies and include directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up the installation rules for the application bundle, including binary, libraries, and assets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build\nDESCRIPTION: CMake configuration that sets up a Windows desktop Flutter application build. It defines the executable target with required source files, sets compiler definitions for version information, configures dependencies, and links necessary libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\") \ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the initial CMake project configuration with minimum version requirements and project languages. Defines the binary name for the application executable.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(animations_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"animations_example\")\n```\n\n----------------------------------------\n\nTITLE: Flutter Build Command Configuration in CMake\nDESCRIPTION: Sets up custom build commands and targets for Flutter tool backend. Creates a _phony_ target to ensure the build command runs every time, configuring the Flutter library and headers generation.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Application Build\nDESCRIPTION: Configures CMake build settings for a Windows Flutter application. Sets up the executable target with required source files, applies standard build settings, adds version definitions, and configures dependencies including Flutter libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Signals.dart Version History in Markdown\nDESCRIPTION: A markdown document detailing the version history and changes made to the signals.dart package. Includes major feature additions, deprecations, and bug fixes across multiple releases.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.5.5\n\n- Adding `reloading` state to AsyncSignal\n- Adding `reload` to AsyncSignal\n\n## 1.5.4\n\n- Fixing pubspec Dart filters on pub.dev\n- Adding `map` and `maybeMap` to `AsyncSignal`\n- Adding `listen` to signal extensions for Flutter\n- Adding `listenSignal` for Flutter\n\n## 1.5.3\n\n- Adding `SignalsObserver` and `LoggingSignalsObserver`\n- Updating `signal_devtools` to 0.0.2 with graph view and reactive values\n\n## 1.5.2\n\n- Migrating `TimerSignal` to `AsyncSignal`\n- Fixing `watch(context)` calls inside `Watch` widget\n\n## 1.5.1\n\n- Adding `isCompleted` and `future` to `AsyncSignal` to async methods to wait for a signal to complete\n\n## 1.5.0\n\n- Adding `AsyncSignal` with helpers `asyncSignalFromFuture` and `asyncSignalFromStream`\n- Adding async example\n- Adding `previousValue` to signal\n- Adding `reloading` state to `FutureSignal` and `StreamSignal`\n- Deprecating `FutureSignal` and `StreamSignal` in favor of `AsyncSignal`\n- Moving `forceUpdate` to `ValueSignal`\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the basic CMake project configuration, including minimum required version, project name, and language.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(shopping_cart LANGUAGES CXX)\n\nset(BINARY_NAME \"shopping_cart\")\n\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds in Windows Flutter App\nDESCRIPTION: Configures installation of the Ahead-Of-Time (AOT) compiled Dart library for Profile and Release builds only. This improves performance in production builds.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build in CMake\nDESCRIPTION: This CMake script configures the build process for a Flutter application's Windows runner. It defines the executable target with necessary source files, applies standard settings, adds version information through preprocessor definitions, and sets up required dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake\nDESCRIPTION: Sets up the Flutter library and its headers for use in the project. It defines the location of the Flutter DLL, ICU data file, and necessary header files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Serving a Dart Web App with webdev\nDESCRIPTION: Commands to install the webdev tool globally and start a development server for a Dart web application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/html_canvas/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate webdev\nwebdev serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers in CMake\nDESCRIPTION: Defines a list of Flutter library headers, prepends the ephemeral directory path to each header, and sets up the Flutter library interface with include directories and link libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runner Executable in CMake for Flutter Application\nDESCRIPTION: This CMake script defines the configuration for building a Flutter application's Windows runner executable. It specifies source files, applies build settings, adds version definitions, handles Windows macro conflicts, and links required dependencies like flutter and dwmapi.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Flutter Windows Runner\nDESCRIPTION: Links required libraries to the Flutter Windows runner executable, including the Flutter engine, wrapper app, and Windows Desktop Window Manager API. Also sets up include directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/runner/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up the custom command to run the Flutter tool backend for generating necessary files. It defines the outputs and the command to execute the Flutter tool.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command Configuration\nDESCRIPTION: Configures the custom build command for Flutter tool backend, generating necessary libraries and headers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Custom Command in CMake\nDESCRIPTION: Defines a custom command that invokes the Flutter tool backend script to generate the Flutter library and headers. It uses a _phony_ output to ensure the command runs on every build.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Project with CMake\nDESCRIPTION: A comprehensive CMake configuration file for building a Flutter desktop application on Linux. It defines the project setup, compilation settings, dependencies, build rules, and installation procedures needed to compile and package the application properly.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"benchmark\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.benchmark\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: This CMake script sets up the build configuration for a Flutter Windows application. It defines the executable target with its source files, applies standard build settings, adds version preprocessor definitions, and configures dependencies including Flutter libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper Library in CMake\nDESCRIPTION: Creates and configures the static library for Flutter plugin wrappers. Sets target properties, dependencies, and include directories required for plugin integration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Windows\nDESCRIPTION: Sets up installation directories and rules for the Flutter application on Windows, ensuring it can run in place rather than as a bundle.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend for Linux Build\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend script, which generates necessary files for the build process. It also creates a custom target for assembling Flutter dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and GTK Dependencies\nDESCRIPTION: Adds the Flutter managed directory, finds system-level dependencies like GTK, and defines the main application target with its source files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Build Configuration for Flutter Linux Application\nDESCRIPTION: Configures cross-building environment when a sysroot is provided by Flutter. This allows targeting different Linux systems from a single build environment.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Stable Signals Package in YAML\nDESCRIPTION: This snippet shows how to add the stable version of the Signals package to a Dart or Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/src/content/docs/reference/install.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  signals: latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake for Windows\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every time.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and Application Build Rules\nDESCRIPTION: Configures the Flutter library, application build directories, and includes generated plugin build rules.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Dependencies for Flutter Linux\nDESCRIPTION: Configures the required system dependencies for Flutter Linux integration. Uses pkg_config to find GTK, GLIB, and GIO which are needed for Flutter's Linux target.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Settings\nDESCRIPTION: Configures CMake policies, sets the installation RPATH, and handles cross-building settings if a sysroot is specified.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Application Build in CMake\nDESCRIPTION: Sets up the Flutter managed directory, adds the Flutter library subdirectory, and configures the application build by adding the runner subdirectory. Also includes generated plugin build rules.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library and Include Directories in CMake\nDESCRIPTION: This snippet configures the Flutter library interface by setting the library path, adding header files, and configuring include directories. It creates an INTERFACE library that client code can link against to use Flutter functionality.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper\nDESCRIPTION: Sets up the Flutter wrapper library for plugins with core implementations and plugin registrar sources.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings\nDESCRIPTION: Sets up installation directories and rules for copying build artifacts, including Flutter assets and runtime components.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake\nDESCRIPTION: Creates a custom function to prepend a prefix to each element in a list, mimicking the functionality of list(TRANSFORM ... PREPEND ...) for CMake versions that don't support it.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake\nDESCRIPTION: Sets up the basic project configuration including minimum CMake version, project name, and binary name for the Flutter application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"auth_flow\")\nset(APPLICATION_ID \"com.example.auth_flow\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend for Windows\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend, which generates necessary files for the build. It also creates a custom target 'flutter_assemble' that depends on the generated files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Library and Headers\nDESCRIPTION: Configures the Flutter library paths, headers, and creates the flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types and Flags\nDESCRIPTION: Defines build configurations (Debug/Profile/Release) and sets compiler flags for different build modes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list. Provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake versions that don't support it.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Behaviors and Build Types\nDESCRIPTION: Configures modern CMake behaviors and defines build configuration options. Sets up Debug, Profile, and Release build types with appropriate flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Source Lists in CMake\nDESCRIPTION: Defines lists of C++ wrapper source files for core functionality, plugins, and application components. These sources provide the C++ bindings for Flutter.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library for Linux Build in CMake\nDESCRIPTION: This snippet sets up the Flutter library for Linux builds. It finds required system packages, sets paths for Flutter libraries and data files, and configures include directories and link libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Windows Build Configuration in CMake\nDESCRIPTION: Sets up the basic configuration for building Flutter projects on Windows. It includes the generated config, defines the Flutter library, and sets up important paths and variables.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Rules for Flutter Windows Application\nDESCRIPTION: Specifies installation rules for the application binary, Flutter ICU data, Flutter library, bundled libraries, native assets, and AOT library.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros that Conflict with C++ Standard Library\nDESCRIPTION: Adds a compile definition to disable Windows MIN/MAX macros that could conflict with standard C++ library functions.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/runner/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project configuration including version requirements, project name, and build types.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(get_it_signals_example LANGUAGES CXX)\nset(BINARY_NAME \"get_it_signals_example\")\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Configuration\nDESCRIPTION: Configures the Flutter tool backend build process with custom commands and dependencies for generating necessary files and libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration for Linux GTK Applications\nDESCRIPTION: Configures system-level dependencies required for Flutter Linux applications including GTK, GLIB, and GIO. It also sets up the Flutter library path and publishes variables to the parent scope for the install step.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Application Project with CMake for Linux\nDESCRIPTION: Comprehensive CMake configuration for a Linux-targeted Flutter application. Defines project name, executable properties, build settings, dependencies, and installation rules required for proper Linux deployment of a Flutter app.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"infinite_scroll\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.infinite_scroll\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and build types.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\nset(BINARY_NAME \"example\")\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment\nDESCRIPTION: Sets up the basic CMake configuration and includes required Flutter configuration files. Defines the ephemeral directory and wrapper root paths.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the basic CMake project configuration including required CMake version, project name, language, and executable name.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(flutter_async LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"flutter_async\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper\nDESCRIPTION: Sets up the Flutter wrapper library for the main application with core implementations and app-specific sources.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Dependencies Setup\nDESCRIPTION: Configures system-level dependencies for the Flutter Linux library using pkg-config, including GTK3, GLib, and GIO packages.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake for Windows Flutter Application\nDESCRIPTION: Sets up initial project configuration with minimum CMake version and project name. Defines the binary name for the application executable.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(drift_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"drift_example\")\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Starlight Template\nDESCRIPTION: Command to create a new Astro project using the Starlight template via npm\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/website/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Project Settings\nDESCRIPTION: Sets up basic project configuration including executable name, build types, and Unicode support. Defines CMake version requirements and project language settings.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\nset(BINARY_NAME \"example\")\ncmake_policy(VERSION 3.14...3.25)\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake for Flutter\nDESCRIPTION: A custom function that prepends a prefix to each element in a list, serving the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Application Build\nDESCRIPTION: Configures the CMake build system for a Windows Flutter application. Sets up the executable target with required source files, applies standard build settings, defines version information, and establishes necessary library dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Version Compile Definitions for Flutter Windows Runner\nDESCRIPTION: Adds preprocessor definitions for the Flutter version information, making version details available to the C++ code at compile time.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/runner/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Windows Runner Project in CMake\nDESCRIPTION: Sets up the CMake project configuration for the Flutter Windows runner executable, including version requirements and language specifications.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Windows Flutter Application\nDESCRIPTION: This CMake script sets up the build configuration for a Flutter application on Windows. It defines the executable target, adds source files, applies standard settings, and sets up necessary dependencies and include directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Command\nDESCRIPTION: Configures the custom command that runs the Flutter tool backend for building the Flutter library and generating necessary files. Uses a _phony_ target to ensure the command runs on each build.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter App Wrapper Configuration\nDESCRIPTION: Sets up the Flutter application wrapper library with core implementations and app-specific sources for the runner.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds of Flutter Linux Application\nDESCRIPTION: Installs the Ahead-of-Time compilation library for non-Debug builds only. This optimizes release versions of the application for better performance.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build in CMake\nDESCRIPTION: This CMake script sets up the build configuration for a Flutter application on Windows. It defines the executable target, adds source files, applies standard settings, sets preprocessor definitions, and configures dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Build Environment with CMake\nDESCRIPTION: Sets up the basic CMake configuration for a Flutter Linux project, including minimum CMake version, ephemeral directory, and generated config inclusion.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Flutter Plugin Wrapper Configuration\nDESCRIPTION: Configures and builds the static library for Flutter plugin wrapper, including core implementations and plugin registrar sources.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration in CMake\nDESCRIPTION: Configures the Flutter library settings including system dependencies, library headers, and interface targets. Sets up GTK, GLIB, and GIO dependencies required for Flutter Linux applications.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Flutter Wrapper Plugin Configuration\nDESCRIPTION: Sets up the Flutter wrapper plugin library with core and plugin sources, including configuration for position-independent code and visibility settings.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Dependencies Configuration\nDESCRIPTION: Configures system-level dependencies for Flutter using pkg-config, including GTK3, GLib, and GIO requirements.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library in CMake\nDESCRIPTION: Defines the Flutter library settings, exports necessary variables to the parent scope, and configures the Flutter interface library with required headers and include directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Target and Dependencies\nDESCRIPTION: Sets up the main application target with source files and links required libraries including Flutter and GTK dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter iOS Project\nDESCRIPTION: Command to open the iOS portion of a Flutter project in Xcode for launch screen asset customization\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Utility Function for List Prepending in CMake\nDESCRIPTION: This function serves as a replacement for list(TRANSFORM ... PREPEND ...) which is not available in CMake 3.10. It prepends a prefix to each element of a given list.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies for Flutter Linux\nDESCRIPTION: Finds the required system-level dependencies using pkg-config, including GTK, GLIB, and GIO libraries which are needed for Flutter Linux applications.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries in CMake for Windows\nDESCRIPTION: Sets up the Flutter wrapper libraries for plugins and the main application. It defines the source files and configurations for both the plugin wrapper and the app wrapper.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Windows App\nDESCRIPTION: Sets up installation directories and rules for the application binary, Flutter ICU data, libraries, and assets. Includes special handling for native assets and AOT library based on build configuration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and Plugin Build Rules for Windows Application\nDESCRIPTION: Sets up the Flutter library build rules and includes generated plugin build rules for the application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Integration in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend script that generates the Flutter library and headers. It creates a phony target to ensure the command runs every time, and establishes dependencies for the flutter_assemble target.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Compilation Settings\nDESCRIPTION: Sets the default build type to Debug and defines a function to apply standard compilation settings to targets, including C++14 support and warning flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 support and compiler options.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Flutter Windows Application\nDESCRIPTION: Defines settings for the Profile build mode, enables Unicode support, and sets up standard compilation settings for most targets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Windows Application\nDESCRIPTION: Sets up installation rules for the application binary, Flutter ICU data, Flutter library, plugin libraries, and assets. It also handles AOT library installation for non-Debug builds.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Interface Library in CMake\nDESCRIPTION: Creates an interface library for Flutter and configures its include directories and dependencies, linking it with the Flutter library and required system libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project and Application Settings in CMake for Flutter Linux\nDESCRIPTION: Initializes the CMake project with C++ language and configures the basic application settings including executable name and application ID for GTK integration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"get_it_signals_example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.get_it_signals_example\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Windows Application\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 support, warning levels, and exception handling configuration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application, including copying runtime components, assets, and AOT library.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules\nDESCRIPTION: Configures installation rules for the application bundle, including executable, ICU data, Flutter library, and asset files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every time.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Settings for Flutter Linux Application in CMake\nDESCRIPTION: Sets up the basic project configuration for a Flutter Linux application including project name, executable name, and application ID. These settings define the core identity of the application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"persist_shared_preferences\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.persist_shared_preferences\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function APPLY_STANDARD_SETTINGS that applies consistent compilation settings to targets. Sets C++17 standard, warning levels, exception handling, and debug configurations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the CMake project with minimum version requirement and project name. It also defines the executable name and configures build options.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(crud_dio LANGUAGES CXX)\n\nset(BINARY_NAME \"crud_dio\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the CMake project with minimum required version and project name. It also defines the binary name and configures build types.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(persist_shared_preferences LANGUAGES CXX)\n\nset(BINARY_NAME \"persist_shared_preferences\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Flutter Windows Application\nDESCRIPTION: Sets up the installation process for the application, including copying support files, libraries, and assets to the appropriate directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Linux Application\nDESCRIPTION: Sets up installation rules for the application bundle, including the executable, ICU data, Flutter library, plugin libraries, and assets. It also handles AOT library installation for non-Debug builds.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and binary name for the Flutter application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\nset(BINARY_NAME \"drift_example\")\nset(APPLICATION_ID \"com.example.drift_example\")\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++17 support and compiler options.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets for Windows Flutter Application\nDESCRIPTION: Configures installation of native assets provided by the build.dart from all packages. These assets are installed to the application's library directory.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds in CMake\nDESCRIPTION: Configures the installation of the Ahead-of-Time (AOT) compiled library, but only for Profile and Release builds. This optimization improves application startup time and performance in production releases.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for the Flutter application, including executable, data files, and libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function for Flutter Linux Application\nDESCRIPTION: Creates a function to apply standard compilation settings including C++14 standard, compiler warnings, and optimization flags. This function provides consistent build settings across targets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application in C++\nDESCRIPTION: Sets up the basic CMake project configuration for a Flutter application. It defines the project name, language, and executable name.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"eval_calculator\")\nset(APPLICATION_ID \"com.example.eval_calculator\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows Build Environment with CMake\nDESCRIPTION: This CMake script configures the Flutter Windows build environment, setting up paths, libraries, and build targets. It includes configurations for Flutter library headers, wrapper sources, and establishes dependencies between components.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Windows Flutter Application\nDESCRIPTION: Sets up installation rules to place executable, Flutter library, and resource files in the correct locations for Windows executables. Ensures proper bundling of assets and native libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter library, sets up system-level dependencies like GTK, and defines the main application target.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment in CMake\nDESCRIPTION: Sets up the basic CMake configuration for a Flutter Windows application, including minimum CMake version and ephemeral directory configuration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration in CMake\nDESCRIPTION: Sets up the Flutter Windows DLL and associated header files. Configures include directories and links the Flutter library interface.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Windows Application\nDESCRIPTION: Sets up the installation process for the Flutter application on Windows. It defines the bundle directory, installation prefixes, and configures the installation of the main executable, ICU data, Flutter library, and plugin libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment\nDESCRIPTION: Sets up the base configuration and environment variables for Flutter Windows builds including minimum CMake version and ephemeral directory paths.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Library for App Runners in CMake\nDESCRIPTION: This snippet builds a static library containing the C++ wrapper code needed for Flutter application runners. It includes core implementations and app-specific sources required to embed Flutter in a Windows application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries for Plugins in CMake\nDESCRIPTION: This snippet builds a static library containing the C++ wrapper code needed for Flutter plugins. It configures source files, compiler settings, and dependencies required for plugin development on Windows.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter C++ Wrapper Libraries\nDESCRIPTION: Sets up the C++ wrapper sources for plugins and application, creating static libraries for both plugin and app wrappers with appropriate compilation settings.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Windows Flutter Application\nDESCRIPTION: Sets up the installation process for the Flutter application, including copying support files, libraries, and assets to the appropriate directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command Configuration\nDESCRIPTION: Sets up custom build commands for the Flutter tool backend. Creates a phony target to ensure the command runs every time since there's no way to get a full input/output list from the flutter tool.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries in CMake for Windows\nDESCRIPTION: This snippet defines and configures the Flutter wrapper libraries for plugins and the main application. It sets up the source files, include directories, and linkage to the Flutter library.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Integration\nDESCRIPTION: Configures the Flutter tool backend integration with custom commands and targets for assembling Flutter components. Creates a phony target to ensure proper rebuilding.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library for Windows\nDESCRIPTION: Sets up the Flutter library, including paths to the DLL, ICU data file, and AOT library. It also configures the Flutter library headers and creates an interface library.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application, including executable, data files, libraries and assets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Libraries and Project Components\nDESCRIPTION: Sets up paths for Flutter managed directories and includes necessary subdirectories for the Flutter library, runner application, and plugins.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings to Flutter Windows Runner\nDESCRIPTION: Applies standard build settings to the Flutter Windows runner executable. This is a reusable configuration that establishes common build parameters.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/runner/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Configuration\nDESCRIPTION: Configures Flutter library paths, headers, and interface library. Sets up include directories and dependencies for the main Flutter library.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Library Configuration\nDESCRIPTION: Configures the core Flutter library settings including paths, headers, and interface library setup for Windows builds.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Linux Application Bundle\nDESCRIPTION: Sets up the installation process to create a relocatable bundle, including copying necessary files like ICU data, Flutter library, plugin libraries, native assets, and Flutter assets to appropriate directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and Application Build Rules in CMake\nDESCRIPTION: Adds the Flutter library directory and application runner directory to the build process. Includes generated plugin build rules to manage plugin dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Compilation Settings Function\nDESCRIPTION: Defines a function for applying standard compilation settings including C++14 support, warning flags, and optimization options.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Wrapper Libraries in CMake\nDESCRIPTION: Configures the Flutter wrapper libraries for plugins and the main application. It sets up source files, creates static libraries, and applies standard settings.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for building necessary components. Creates a phony output to ensure the command runs every time and defines a custom target for Flutter assembly.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/flutter/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Bundle Creation\nDESCRIPTION: Sets up the installation process, including bundle directory creation, file copying, and handling of assets and libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Settings in CMake for Flutter Windows Application\nDESCRIPTION: Sets up the initial project configuration, defining the project name, executable name, and build configuration options. It establishes the foundation for compiling the Flutter application for Windows.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(clean_architecture LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"clean_architecture\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Build Environment with CMake\nDESCRIPTION: Sets up the necessary configuration for building a Flutter Linux application. It includes package checks, library configurations, and custom commands for the Flutter tool backend.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\n\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment in CMake\nDESCRIPTION: This CMake script sets up the necessary configuration for building Flutter applications on Windows. It defines paths, libraries, and build steps required for compiling and linking Flutter projects.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up installation rules for the application bundle including assets, libraries, and runtime components.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Settings in CMake\nDESCRIPTION: Initializes the CMake project with basic configuration settings including project name, executable name, and build configurations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(auth_flow LANGUAGES CXX)\nset(BINARY_NAME \"auth_flow\")\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command Configuration\nDESCRIPTION: Configures custom build commands for Flutter tool backend. Sets up dependencies and ensures the build command runs every time using a phantom target.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Windows Runner Executable Target in CMake\nDESCRIPTION: Defines the Windows application target with all required source files for the Flutter runner. Includes core C++ files, Window handling code, and manifest configurations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/runner/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Flags for Flutter Windows Application\nDESCRIPTION: Configures linker and compiler flags for the Profile build mode, inheriting settings from the Release mode.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the CMake project with minimum version requirement and project name. It also defines the binary name and configures build types.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(benchmark LANGUAGES CXX)\n\nset(BINARY_NAME \"benchmark\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. Used as a replacement for list(TRANSFORM) which isn't available in CMake 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency in CMake\nDESCRIPTION: Ensures the Flutter tool portions of the build run before building the Windows executable. This critical step processes Flutter assets and generates necessary code.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/runner/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings for Flutter Windows Application\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++17 support, warning levels, and exception handling.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types and Flags\nDESCRIPTION: Defines build configurations (Debug/Profile/Release) and sets compiler flags for different build modes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Windows Application\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 support, warning levels, and exception handling.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings including C++17 support and compiler options.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types for Flutter Windows Application\nDESCRIPTION: Defines build configuration options, including Debug, Profile, and Release modes. It sets up multi-configuration generators and default build type.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Settings for Flutter Windows Application\nDESCRIPTION: Defines settings for the Profile build mode, including linker flags and compiler flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Standard Build Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 support and optimization flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Settings in CMake\nDESCRIPTION: Configures build types (Debug, Profile, Release) and handles multi-configuration generators.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the basic CMake project configuration, including the project name, languages, and executable name. It also defines the GTK application identifier.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Compilation Settings\nDESCRIPTION: Sets the default build type to Debug and defines a function to apply standard compilation settings to targets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Build Modes\nDESCRIPTION: Defines CMake policy versions and sets up Debug, Profile, and Release build configurations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 standard, warning levels, and exception handling configurations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Compilation Settings\nDESCRIPTION: Sets the default build type to Debug and defines a function to apply standard compilation settings to targets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Linux Application\nDESCRIPTION: Sets the default build type to Debug if not specified and defines standard compilation settings function to be applied to targets, including C++14 standard and compiler warnings.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Mode for Flutter Windows Application\nDESCRIPTION: Defines settings specific to the Profile build mode, inheriting flags from the Release configuration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Version 1.1.0 Changelog Entry\nDESCRIPTION: Release notes for signals dependency update to version 2.0.0.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0\n\n- Bump `signals` to 2.0.0\n```\n\n----------------------------------------\n\nTITLE: List Prepend Helper Function for CMake\nDESCRIPTION: Defines a helper function that prepends a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Version 1.0.0 Changelog Entry\nDESCRIPTION: Initial release notes introducing the 'Wrap with Watch' fix feature.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_lint/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0\n\n- Add 'Wrap with Watch' fix\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the CMake project with C++ language support, defines the binary name and application ID for a shopping cart application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"shopping_cart\")\nset(APPLICATION_ID \"com.example.shopping_cart\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Plugin Build Rules\nDESCRIPTION: Configures Flutter library and tool build rules, adds the runner subdirectory, and includes generated plugin build rules.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Windows Flutter Application\nDESCRIPTION: Defines settings for the Profile build mode, sets Unicode for all projects, and establishes standard compilation settings for most targets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Path for Flutter Linux Application\nDESCRIPTION: Sets CMake policies for modern behaviors and configures the installation RPATH to load libraries from a relative path. This ensures proper library loading at runtime.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Application Target Definition and Dependencies\nDESCRIPTION: Defines the main application executable target and its source files. Links required libraries including Flutter and GTK dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list. Serves as a replacement for list(TRANSFORM ... PREPEND ...) for CMake versions below 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Compilation Settings in CMake\nDESCRIPTION: Sets the default build type to Debug and defines a function to apply standard compilation settings to targets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets for Flutter Linux Application\nDESCRIPTION: Copies native assets provided by build.dart from all packages to the lib directory. This ensures platform-specific resources are properly bundled.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter managed directory, sets up system-level dependencies like GTK, and defines the application target.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Windows Application\nDESCRIPTION: Sets up installation parameters for the application, including bundle directory, data files, libraries, and assets. It also handles AOT library installation for non-Debug builds.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration\nDESCRIPTION: Sets up the Flutter Linux library configuration including system dependencies using pkg-config, defining library paths, and setting up build variables.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Interface Library in CMake\nDESCRIPTION: Sets up the Flutter interface library with headers, include directories, and linkage to the Flutter DLL. This provides the core Flutter functionality to the application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets for Linux Application\nDESCRIPTION: Handles installation of Flutter assets by removing any stale files and copying fresh assets to the bundle. This ensures the application has access to all required resources.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Settings in CMake\nDESCRIPTION: Initializes the CMake project and sets basic configuration variables including the binary name and application ID.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake\nDESCRIPTION: A custom function that prepends a prefix to each element in a list. This serves as a replacement for list(TRANSFORM ... PREPEND ...) functionality which isn't available in CMake 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for iOS Asset Management\nDESCRIPTION: Command to open the Flutter project's Xcode workspace to manage launch screen assets through the Xcode interface.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for configuring launch screen assets through the Xcode interface.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Build Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings including C++14 support and compiler warnings.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Cross-Building Configuration\nDESCRIPTION: Sets up system root and find root paths for cross-building support when targeting specific platforms.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines and configures the Flutter library headers list and sets up the flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and System Dependencies in CMake\nDESCRIPTION: Adds the Flutter library, sets up system-level dependencies like GTK, and defines the main application target.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Cross-building Root Filesystem Configuration\nDESCRIPTION: Configuration for cross-building support, setting up system root and find root paths when targeting specific platforms.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Paths\nDESCRIPTION: Sets CMake policies, defines installation paths, and configures cross-building settings if a target platform sysroot is specified.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installation Rules Configuration\nDESCRIPTION: Defines installation rules for the application bundle, including asset copying, library installation, and AOT compilation artifacts for release builds.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Flutter Headers Configuration in CMake\nDESCRIPTION: Defines and configures the Flutter library headers. It creates a list of header files, prepends the ephemeral directory path to each, and configures the Flutter interface library with appropriate include directories and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend command and assembly target for building the Flutter application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Using untracked in Dart Effects\nDESCRIPTION: This snippet demonstrates how to use untracked to prevent subscriptions when reading signals in a callback within an effect.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/README.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal counter = signal(0);\nfinal effectCount = signal(0);\nfinal fn = () => effectCount.value + 1;\n\neffect(() {\n\tprint(counter.value);\n\n\t// Whenever this effect is triggered, run `fn` that gives new value\n\teffectCount.value = untracked(fn);\n});\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list. Used as an alternative to list(TRANSFORM) for CMake 3.10 compatibility.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and Plugin Build Rules for Windows Application\nDESCRIPTION: Sets up the Flutter library build rules and includes generated plugin build rules for the Windows application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Custom Command for Flutter Tool Backend in CMake\nDESCRIPTION: This snippet creates a custom command to run the Flutter tool backend. It generates the Flutter library and headers, ensuring they are up-to-date for each build.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_counter/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Dependencies with CMake\nDESCRIPTION: Configures system-level dependencies for the Flutter library using pkg-config, including GTK, GLIB, and GIO. Sets up the Flutter library path and publishes variables to the parent scope.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers and Interface Library\nDESCRIPTION: Lists Flutter library headers, prepends the ephemeral directory path, and creates an interface library for Flutter. It sets up include directories and links necessary libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake\nDESCRIPTION: Defines the Flutter library headers, creates an interface library for Flutter, and sets up include directories and link libraries.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration for Linux\nDESCRIPTION: Creates a list of Flutter library headers and prepends the ephemeral directory path to each. The headers are then used to configure an interface library target with appropriate include directories and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the iOS portion of a Flutter project in Xcode for launch screen asset customization.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Application Target Definition\nDESCRIPTION: Defines the main application executable target and its source files.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration in CMake\nDESCRIPTION: Configures the Flutter library interface with necessary headers and dependencies for Linux GTK implementation. Sets up system dependencies using PkgConfig and defines library paths.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake\nDESCRIPTION: Configures a custom command to run the Flutter tool backend for generating necessary files. Creates a custom target 'flutter_assemble' that depends on the generated Flutter library and headers.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/linux/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Custom Command and Target\nDESCRIPTION: Creates a custom command to run the Flutter tool backend script for generating the Flutter library and headers. This command runs on every build due to the _phony_ target which forces execution.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/node_based_editor/linux/flutter/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: Creates a function to apply standard compilation settings including C++17 support and compiler options.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Modes and Flags\nDESCRIPTION: Configures build types (Debug/Profile/Release) and sets corresponding compiler flags. Defines profile build settings to match release configuration.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules\nDESCRIPTION: Configures installation rules for the Flutter application including executable, ICU data, libraries, and assets. Handles both debug and release configurations.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals/example/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components in CMake for Windows Flutter App\nDESCRIPTION: Sets up installation rules for the application binary, ICU data file, Flutter library, and bundled plugin libraries. These components are essential for the application to run.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Build Components in CMake\nDESCRIPTION: Adds the Flutter managed directory, runner directory, and includes generated plugin build rules. This connects the native Windows application with the Flutter framework and plugins.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/eval_calculator/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Settings for Flutter Windows Application\nDESCRIPTION: Defines settings specific to the Profile build mode, including linker flags and compiler flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Plugin Build Rules for Windows Application\nDESCRIPTION: Configures the Flutter library and tool build rules, adds subdirectories for Flutter managed code and runner, and includes generated plugin build rules.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Flags in CMake\nDESCRIPTION: Configures compiler and linker flags for the Profile build mode, using Release-mode flags as a base.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library References in CMake\nDESCRIPTION: Defines the Flutter library paths and publishes them to parent scope. Sets up the Flutter library DLL reference and ICU data file location.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library in CMake\nDESCRIPTION: Creates a static library for Flutter plugin wrappers, including core and plugin-specific wrapper sources. Configures it with position-independent code and proper visibility settings.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/windows/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake\nDESCRIPTION: Sets up the basic project configuration including minimum CMake version, project name, and executable name.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows Build Environment in CMake\nDESCRIPTION: This CMake script configures the build environment for Flutter applications on Windows. It sets minimum CMake version, defines paths for the ephemeral directory, configures Flutter libraries, and sets up wrapper libraries for plugins and the application runner.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Tool Backend in CMake\nDESCRIPTION: Configures custom commands to run the Flutter tool backend for building Flutter components. Creates a phony output to ensure the command runs every time and defines the flutter_assemble target with its dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration in CMake\nDESCRIPTION: Configures the Flutter library paths, headers, and interface library target with necessary dependencies and include directories.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Compilation Settings\nDESCRIPTION: Sets the default build type to Debug and defines a function to apply standard compilation settings to targets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Bundle Creation\nDESCRIPTION: Sets up installation rules for the application bundle, including copying necessary libraries and assets.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/shopping_cart/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cross-building Root Filesystem Configuration\nDESCRIPTION: Configures the root filesystem settings for cross-building when targeting specific platforms.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Build Root Filesystem Settings\nDESCRIPTION: Configures system root settings for cross-building, including root path modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target for Flutter Linux Application\nDESCRIPTION: Defines the executable target with source files and applies standard settings and dependencies. This creates the actual application binary that will be executed.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Linux Application\nDESCRIPTION: Sets up the installation directory structure and ensures clean installation on each build. This defines where the application will be installed and how its components will be organized.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/persist_shared_preferences/linux/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Project Configuration and Basic Settings in CMake\nDESCRIPTION: Initial project setup including version requirements, executable name, and GTK application identifier configuration. Sets up core CMake policies and installation paths.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n\ncmake_policy(SET CMP0063 NEW)\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the initial CMake project configuration, including the project name, languages, and executable details. It also defines the GTK application identifier.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/clean_architecture/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"clean_architecture\")\nset(APPLICATION_ID \"com.example.clean_architecture\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Build Settings Function in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 support, wall warnings, and optimization flags.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/drift_example/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and Installation Paths for Flutter Linux\nDESCRIPTION: Configures CMake policies for modern CMake behaviors and sets up proper installation paths for the application, including support for cross-building with a custom sysroot.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/get_it_signals/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Paths\nDESCRIPTION: Sets CMake policies, defines installation paths, and configures cross-building settings if a sysroot is specified for the Flutter target platform.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/packages/signals_hooks/example/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Core Settings\nDESCRIPTION: Initializes the CMake project and configures basic application settings including binary name and GTK application identifier.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"flutter_async\")\nset(APPLICATION_ID \"com.example.flutter_async\")\n\ncmake_policy(SET CMP0063 NEW)\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Project CMake Configuration\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and executable name. Defines core application identifiers and modern CMake behaviors.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/crud_dio/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"crud_dio\")\nset(APPLICATION_ID \"com.example.crud_dio\")\n\ncmake_policy(SET CMP0063 NEW)\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Build\nDESCRIPTION: Sets up the CMake project with minimum required version and includes the generated configuration file. It also defines a custom function for list prepending.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/flutter_async/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Utility function that prepends a prefix to each element in a list. This serves as a replacement for list(TRANSFORM ... PREPEND ...) functionality for CMake versions below 3.10.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/benchmark/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Integration in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend which generates the necessary binary files for the Flutter engine. Creates a phony dependency to ensure the command runs on each build.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/auth_flow/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers and sets up the Flutter interface library with proper include directories and dependencies.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/infinite_scroll/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library and Dependencies\nDESCRIPTION: Defines the Flutter interface library, sets its include directories, links it with required libraries, and adds build dependencies. This establishes the core Flutter engine integration for Linux builds.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Sets up the Flutter library headers by creating a list of all required header files and prepending their paths. These headers are needed for interfacing with the Flutter engine in a Linux application.\nSOURCE: https://github.com/rodydavis/signals.dart/blob/main/examples/animations_example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```"
  }
]