[
  {
    "owner": "vedantm1",
    "repo": "decaide",
    "content": "TITLE: Initializing a Basic Express.js Server in JavaScript\nDESCRIPTION: This code initializes a simple web server using Express.js that listens on port 3000 and responds with 'Hello World' when the root URL ('/') is accessed. It requires the 'express' package as a dependency, which must be installed via npm. The primary parameter is the port number (3000) used by app.listen; the server responds to HTTP GET requests at the root route using req and res objects. The expected input is an HTTP GET request to '/', and the output is a plain text \"Hello World\" response.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst express = require('express')\nconst app = express()\n\napp.get('/', function (req, res) {\n  res.send('Hello World')\n})\n\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Calling Azure OpenAI Chat Completion API in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to set up the OpenAI Node SDK for Azure endpoints, overriding the base path, providing the API key, and specifying headers as needed. It shows how to create a chat completion request using a deployment name (as Azure requires) instead of a model name, and how to retrieve the AI-generated response. Requires the openai npm package and environment variables for AZURE_OPENAI_ENDPOINT and AZURE_OPENAI_KEY. Inputs include system and user prompts; the output is the generated content from the model. Make sure to install the correct SDK version that supports Azure, and handle required API parameters and deployment names.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { OpenAIApi, Configuration } = require(\"openai\");\nconst config = new Configuration({\n  basePath: process.env.AZURE_OPENAI_ENDPOINT, // e.g. \"https://<resource>.openai.azure.com/\",\n  apiKey: process.env.AZURE_OPENAI_KEY\n});\n// Override the default basePath to include the API version and deployment name\nconfig.baseOptions = { headers: { 'api-key': config.apiKey } }; \nconst openai = new OpenAIApi(config);\n// When calling, include the deployment and api-version query param in the request path\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst completion = await openai.createChatCompletion({\n  model: \"gpt-4\", // or your deployment name\n  messages: [ {role: \"system\", content: systemPrompt}, {role: \"user\", content: userPrompt} ]\n});\nconst result = completion.data.choices[0].message.content;\n```\n\n----------------------------------------\n\nTITLE: Serving a downloadable file using content-disposition in Node.js\nDESCRIPTION: This comprehensive example demonstrates setting up a basic Node.js HTTP server that serves a specific file (`plans.pdf`) for download. It uses the `content-disposition` module to set the correct header, ensuring the browser prompts the user to save the file. It also utilizes `fs` for reading the file, `http` for the server, `destroy` and `on-finished` for proper stream cleanup. Dependencies include `content-disposition`, `destroy`, and `on-finished`, which need to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-disposition/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar contentDisposition = require('content-disposition')\nvar destroy = require('destroy')\nvar fs = require('fs')\nvar http = require('http')\nvar onFinished = require('on-finished')\n\nvar filePath = '/path/to/public/plans.pdf'\n\nhttp.createServer(function onRequest (req, res) {\n  // set headers\n  res.setHeader('Content-Type', 'application/pdf')\n  res.setHeader('Content-Disposition', contentDisposition(filePath))\n\n  // send file\n  var stream = fs.createReadStream(filePath)\n  stream.pipe(res)\n  onFinished(res, function () {\n    destroy(stream)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Stripe Subscription Management Endpoints in Express (TypeScript)\nDESCRIPTION: Implements routes to create subscriptions, cancel, and fetch subscription status, as well as to handle webhook events using Stripe's Node SDK. Depends on proper setup of STRIPE_SECRET_KEY and price IDs in environment variables. Adheres to Stripe-recommended endpoint structure and expectation of async webhook responses.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Pseudocode outline:\n// POST /create-subscription (calls Stripe, saves status)\n// POST /cancel-subscription (calls Stripe, updates DB)\n// GET /subscription (returns user sub. status)\n// POST /webhook (Stripe event handler, updates user tier)\n```\n\n----------------------------------------\n\nTITLE: Defining FastAPI Security Utilities for JWT and Session Management in Python\nDESCRIPTION: This Python code defines security-related functions for a FastAPI application. It includes utilities for creating JWT session tokens (`create_session_token`), decoding JWT tokens (`decode_token`), validating user sessions using both OAuth2 bearer tokens and cookies (`validate_session`), and retrieving an optional authenticated user (`get_optional_user`). Dependencies include `jwt`, `fastapi`, `datetime`, `typing`, `app.models.user`, and `app.core.config`. The `validate_session` function demonstrates dependency injection with `Depends` and `Cookie`, handles authentication errors, and returns a mock `UserResponse`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nfrom fastapi import Depends, HTTPException, status, Cookie\nfrom fastapi.security import OAuth2PasswordBearer\nfrom datetime import datetime, timedelta\nfrom typing import Optional, Dict, Any\n\nfrom app.models.user import UserResponse\nfrom app.core.config import settings\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\", auto_error=False)\n\ndef create_session_token(session_data: Dict[str, Any]) -> str:\n    \"\"\"Create a JWT session token\"\"\"\n    payload = {\n        \"sub\": str(session_data.get(\"user\").get(\"id\")),\n        \"exp\": datetime.utcnow() + timedelta(days=1),\n        \"iat\": datetime.utcnow(),\n        \"session_id\": session_data.get(\"session_id\")\n    }\n    return jwt.encode(payload, settings.SECRET_KEY, algorithm=\"HS256\")\n\ndef decode_token(token: str) -> Dict[str, Any]:\n    \"\"\"Decode a JWT token\"\"\"\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[\"HS256\"])\n        return payload\n    except jwt.PyJWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\nasync def validate_session(\n    token: Optional[str] = Depends(oauth2_scheme),\n    decade_session: Optional[str] = Cookie(None)\n) -> UserResponse:\n    \"\"\"Validate the user session and return the current user\"\"\"\n    if not token:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Not authenticated\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    \n    payload = decode_token(token)\n    \n    if not decade_session:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"DecA(I)de session expired or invalid\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    \n    # Here you would validate the session with DecA(I)de\n    # For simplicity, we'll just trust the JWT claims\n    user_id = payload.get(\"sub\")\n    if not user_id:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid token\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    \n    # Mock user for demonstration, in real implementation\n    # you would fetch this from DecA(I)de API\n    return UserResponse(\n        id=int(user_id),\n        username=\"example_user\",\n        email=\"user@example.com\",\n        subscription_tier=\"standard\"\n    )\n\nasync def get_optional_user(\n    token: Optional[str] = Depends(oauth2_scheme),\n    decade_session: Optional[str] = Cookie(None)\n) -> Optional[UserResponse]:\n    \"\"\"Get the current user if authenticated, otherwise None\"\"\"\n    if not token or not decade_session:\n        return None\n    \n    try:\n        return await validate_session(token, decade_session)\n    except HTTPException:\n        return None\n```\n\n----------------------------------------\n\nTITLE: Making Chat Completion Request with Azure OpenAI in Python\nDESCRIPTION: Demonstrates making a chat completion request to Azure OpenAI using the configured Python `openai` library. It calls the `ChatCompletion.create` method, passing the Azure deployment name via the `engine` parameter (or `deployment_id`) and the conversation history in the `messages` parameter (containing system and user prompts). The generated response content is then extracted from the 'choices' list in the returned dictionary.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742626139423.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = openai.ChatCompletion.create(\n    engine=\"gpt-4\",  # use your deployment name\n    messages=[{\"role\": \"system\", \"content\": system_prompt}, {\"role\": \"user\", \"content\": user_prompt}]\n)\nresult = response['choices'][0]['message']['content']\n```\n\n----------------------------------------\n\nTITLE: Setting up Passport Authentication with Local Strategy in TypeScript\nDESCRIPTION: This TypeScript module (`auth.ts`) configures user authentication for an Express application using Passport.js and the local (username/password) strategy. It initializes `express-session` and Passport middleware, defines the local strategy logic (verifying credentials against stored user data using hypothetical `storage` and `hashHelper` modules), configures user serialization/deserialization, and sets up API routes for user registration (`/api/register`), login (`/api/login`), and logout (`/api/logout`). It depends on `passport`, `passport-local`, `express-session`, and requires a `SESSION_SECRET` environment variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport passport from 'passport';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport session from 'express-session';\nimport { Express } from 'express';\nimport { createHash, compareHash } from './hashHelper'; // hypothetical\nimport { storage } from './storage';\n\nexport function setupAuth(app: Express) {\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'somefallbacksecret',\n    resave: false,\n    saveUninitialized: false,\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(new LocalStrategy(async (username, password, done) => {\n    try {\n      const user = await storage.getUserByUsername(username);\n      if (!user) return done(null, false, { message: 'User not found.' });\n      const valid = await compareHash(password, user.password);\n      if (!valid) return done(null, false, { message: 'Wrong password.' });\n      return done(null, user);\n    } catch (err) {\n      return done(err);\n    }\n  }));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUserById(id);\n      done(null, user);\n    } catch (err) {\n      done(err);\n    }\n  });\n\n  // Routes\n  app.post('/api/register', async (req, res) => {\n    const { username, password } = req.body;\n    const existing = await storage.getUserByUsername(username);\n    if (existing) return res.status(400).json({ message: 'Username exists' });\n    const hashed = await createHash(password);\n    const newUser = await storage.createUser({ username, password: hashed });\n    res.json(newUser);\n  });\n\n  app.post('/api/login', passport.authenticate('local'), (req, res) => {\n    res.json(req.user);\n  });\n\n  app.post('/api/logout', (req, res) => {\n    req.logout(err => {\n      if (err) return res.status(500).json({ error: err });\n      res.sendStatus(200);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication API Endpoints in FastAPI (Python)\nDESCRIPTION: Implements authentication-related API endpoints in `app/api/endpoints/auth.py` using FastAPI's `APIRouter`. It defines routes for user registration (`/register`), login (`/login`), logout (`/logout`), and retrieving the current user's information (`/me`). The login endpoint interacts with a `DecadeClient` to authenticate against the DecA(I)de platform, creates a local session token using `app.core.security`, sets an HTTP-only cookie containing the DecA(I)de session ID, and returns the local token and user data. The `/me` endpoint uses a dependency (`validate_session`) to ensure the user is authenticated.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, HTTPException, Depends, Response, Cookie\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfrom app.clients.decade_client import DecadeClient\nfrom app.models.user import UserCreate, UserLogin, UserResponse, TokenResponse\nfrom app.core.security import create_session_token, validate_session\n\nrouter = APIRouter()\ndecade_client = DecadeClient()\n\n@router.post(\"/register\", response_model=UserResponse)\nasync def register(user_data: UserCreate):\n    \"\"\"Register a new user in the DecA(I)de system\"\"\"\n    try:\n        user = await decade_client.register_user(\n            username=user_data.username,\n            password=user_data.password,\n            email=user_data.email,\n            event_format=user_data.eventFormat,\n            event_code=user_data.eventCode,\n            event_type=user_data.eventType,\n            instructional_area=user_data.instructionalArea\n        )\n        return user\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@router.post(\"/login\", response_model=TokenResponse)\nasync def login(user_data: UserLogin, response: Response):\n    \"\"\"Login to the DecA(I)de system and get a session token\"\"\"\n    try:\n        session_data = await decade_client.login_user(\n            username=user_data.username,\n            password=user_data.password\n        )\n        \n        # Create a session token for your FastAPI service\n        token = create_session_token(session_data)\n        \n        # Set the DecA(I)de session cookie for future requests\n        response.set_cookie(\n            key=\"decade_session\",\n            value=session_data.get(\"session_id\"),\n            httponly=True,\n            secure=True,\n            samesite=\"strict\"\n        )\n        \n        return {\n            \"access_token\": token,\n            \"token_type\": \"bearer\",\n            \"user\": session_data.get(\"user\")\n        }\n    except Exception as e:\n        raise HTTPException(status_code=401, detail=f\"Authentication failed: {str(e)}\")\n\n@router.post(\"/logout\")\nasync def logout(response: Response, decade_session: str = Cookie(None)):\n    \"\"\"Logout from the DecA(I)de system\"\"\"\n    try:\n        if decade_session:\n            await decade_client.logout_user(decade_session)\n        \n        # Clear cookies\n        response.delete_cookie(key=\"decade_session\")\n        return {\"message\": \"Logout successful\"}\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@router.get(\"/me\", response_model=UserResponse)\nasync def get_current_user(current_user = Depends(validate_session)):\n    \"\"\"Get the current authenticated user\"\"\"\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Initializing the Main FastAPI Application (Python)\nDESCRIPTION: Sets up the core FastAPI application in `app/main.py`. It initializes the FastAPI instance with metadata, configures CORS middleware based on settings, includes API routers from `app.api.endpoints` for different functional areas (authentication, AI features, chat, data access), defines a basic `/health` check endpoint, and includes a Uvicorn runner for starting the development server.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Depends, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom app.api.endpoints import auth, ai, chat, data\nfrom app.core.config import settings\n\napp = FastAPI(\n    title=\"DecA(I)de Integration API\",\n    description=\"FastAPI integration with DecA(I)de's AI educational platform\",\n    version=\"1.0.0\",\n)\n\n# Configure CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.CORS_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Include routers\napp.include_router(auth.router, prefix=\"/auth\", tags=[\"authentication\"])\napp.include_router(ai.router, prefix=\"/ai\", tags=[\"ai-features\"])\napp.include_router(chat.router, prefix=\"/chat\", tags=[\"chat-features\"])\napp.include_router(data.router, prefix=\"/data\", tags=[\"data-access\"])\n\n@app.get(\"/health\")\ndef health_check():\n    return {\"status\": \"healthy\"}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"app.main:app\", host=settings.API_HOST, port=settings.API_PORT, reload=settings.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Managing Azure OpenAI Client and Generating DECA Roleplay Scenarios - Azure SDK TypeScript\nDESCRIPTION: Defines a singleton initializer for the Azure OpenAI client and a function for generating formatted DECA roleplay scenarios based on user-supplied parameters. It checks for presence of required environment variables, constructs prompts, makes GPT model calls using the Azure SDK, and parses AI responses as JSON. Dependencies include '@azure/openai', suitable credentials, and valid Azure service access, which must be configured in environment variables. Inputs include instructional area, performance indicators, difficulty level, and optional business type, with outputs as structured scenario JSON. Contains error handling for missing env variables and API failures.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// server/services/azureOpenai.ts\nimport { OpenAIClient, AzureKeyCredential } from \"@azure/openai\";\n\nlet openaiClient: OpenAIClient | null = null;\n\n/**\n * Get or create an Azure OpenAI client instance\n */\nexport function getOpenAIClient(): OpenAIClient {\n  if (!openaiClient) {\n    if (!process.env.AZURE_OPENAI_KEY) {\n      throw new Error(\"AZURE_OPENAI_KEY environment variable is required\");\n    }\n    \n    if (!process.env.AZURE_OPENAI_ENDPOINT) {\n      throw new Error(\"AZURE_OPENAI_ENDPOINT environment variable is required\");\n    }\n    \n    const credential = new AzureKeyCredential(process.env.AZURE_OPENAI_KEY);\n    openaiClient = new OpenAIClient(process.env.AZURE_OPENAI_ENDPOINT, credential);\n  }\n  \n  return openaiClient;\n}\n\n/**\n * Generate a roleplay scenario using Azure OpenAI\n */\nexport async function generateRoleplay(params: {\n  instructionalArea: string;\n  performanceIndicators: string[];\n  difficultyLevel: string;\n  businessType?: string;\n}) {\n  const client = getOpenAIClient();\n  const deploymentId = process.env.AZURE_OPENAI_DEPLOYMENT || \"gpt-4o-mini\";\n  \n  const prompt = `\n  Create a realistic DECA roleplay scenario for a ${params.difficultyLevel} difficulty level. \n  The scenario should focus on the instructional area of \"${params.instructionalArea}\" \n  and include the following performance indicators: ${params.performanceIndicators.join(\", \") }.\n  The scenario should involve a ${params.businessType || \"retail business\"}.\n\n  Format your response as a JSON object with the following properties:\n  - title: A catchy title for the roleplay\n  - scenario: A 2-3 paragraph description of the business situation\n  - performanceIndicators: An array of the provided performance indicators\n  - difficulty: The difficulty level provided\n  - businessType: The type of business involved\n  - meetWith: The title/role of the person the student will be meeting with in the roleplay\n  `;\n  \n  try {\n    const response = await client.getChatCompletions(\n      deploymentId,\n      [\n        { role: \"system\", content: \"You are a DECA roleplay scenario generator. Create realistic, challenging, and educational DECA roleplay scenarios for high school students.\" },\n        { role: \"user\", content: prompt }\n      ],\n      {\n        temperature: 0.7,\n        maxTokens: 800,\n        responseFormat: { type: \"json_object\" }\n      }\n    );\n    \n    const roleplay = JSON.parse(response.choices[0].message?.content || \"{}\" );\n    return roleplay;\n    \n  } catch (error) {\n    console.error(\"Error generating roleplay:\", error);\n    throw error;\n  }\n}\n\n// Additional AI generation functions...\n\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping App Entry with React Query and Root Rendering (TypeScript TSX)\nDESCRIPTION: This main entry point demonstrates setting up a React application with QueryClientProvider for stateful API requests via React Query. It initializes the QueryClient with stale time and retry logic, then renders the root-level <App/> within React.StrictMode, wrapped to provide global API state management. Dependencies include @tanstack/react-query and proper Tailwind and app-based imports.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/main.tsx\\nimport React from 'react'\\nimport ReactDOM from 'react-dom/client'\\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\\nimport App from './App.tsx'\\nimport './index.css'\\n\\nconst queryClient = new QueryClient({\\n  defaultOptions: {\\n    queries: {\\n      staleTime: 5 * 60 * 1000, // 5 minutes\\n      retry: 1,\\n    },\\n  },\\n})\\n\\nReactDOM.createRoot(document.getElementById('root')!).render(\\n  <React.StrictMode>\\n    <QueryClientProvider client={queryClient}>\\n      <App />\\n    </QueryClientProvider>\\n  </React.StrictMode>,\\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting React Frontend to Backend API with Fetch - JavaScript\nDESCRIPTION: This JavaScript snippet defines an asynchronous helper function for making a POST request from your React frontend to a protected backend endpoint. It serializes the chosen event type and a list of performance indicators as the request body, using JSON format, and handles the response by returning the parsed JSON data. Dependencies include a configured backend route at '/api/generateRoleplay' (such as an Azure Function or Node/Express API), proper CORS policy if cross-origin, and the Fetch API (available in browsers or via polyfill). Inputs are eventType (string) and PIs (array), and the output is an object matching the server's JSON response. Handle errors gracefully and adapt the endpoint as needed for your deployment environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742624126265.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function generateRoleplay(eventType, PIs) {\n  const res = await fetch('/api/generateRoleplay', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ eventType, performanceIndicators: PIs })\n  });\n  return res.json(); // assuming your endpoint returns JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AI-Powered Roleplay Generation Page (TypeScript TSX)\nDESCRIPTION: This page-level component leverages useAuth for auth state and useMutation for API-driven AI roleplay creation, handling local state for form fields and result display. The user can submit instructional area, PIs, difficulty, and business type; the form interacts with aiApi.generateRoleplay and presents the response. It includes methods to manage dynamic PI fields and expects dependencies on React Query and contextual providers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/pages/RoleplayPage.tsx\\nimport { useState } from 'react'\\nimport { useMutation } from '@tanstack/react-query'\\nimport { aiApi } from '../lib/api'\\nimport { useAuth } from '../contexts/AuthContext'\\n\\nconst RoleplayPage = () => {\\n  const { user } = useAuth()\\n  const [formData, setFormData] = useState({\\n    instructionalArea: '',\\n    performanceIndicators: [''],\\n    difficultyLevel: 'medium',\\n    businessType: '',\\n  })\\n  const [roleplay, setRoleplay] = useState(null)\\n  \\n  const roleplayMutation = useMutation({\\n    mutationFn: (data: any) => aiApi.generateRoleplay(data),\\n    onSuccess: (response) => {\\n      setRoleplay(response.data)\\n    },\\n  })\\n  \\n  const handleSubmit = (e: React.FormEvent) => {\\n    e.preventDefault()\\n    roleplayMutation.mutate(formData)\\n  }\\n  \\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\\n    const { name, value } = e.target\\n    setFormData(prev => ({ ...prev, [name]: value }))\\n  }\\n  \\n  const handlePIChange = (index: number, value: string) => {\\n    const updatedPIs = [...formData.performanceIndicators]\\n    updatedPIs[index] = value\\n    setFormData(prev => ({ ...prev, performanceIndicators: updatedPIs }))\\n  }\\n  \\n  const addPI = () => {\\n    setFormData(prev => ({\\n      ...prev,\\n      performanceIndicators: [...prev.performanceIndicators, '']\\n    }))\\n  }\\n  \\n  const removePI = (index: number) => {\\n    const updatedPIs = [...formData.performanceIndicators]\\n    updatedPIs.splice(index, 1)\\n    setFormData(prev => ({ ...prev, performanceIndicators: updatedPIs }))\\n  }\\n  \\n  // JSX rendering code...\\n  \\n  return (\\n    <div className=\\\"container mx-auto px-4 py-8\\\">\\n      <h1 className=\\\"text-3xl font-bold mb-6\\\">Generate DECA Roleplay</h1>\\n      \\n      {/* Form to generate roleplay */}\\n      <form onSubmit={handleSubmit} className=\\\"mb-8\\\">\\n        {/* Form fields */}\\n      </form>\\n      \\n      {/* Display generated roleplay */}\\n      {roleplay && (\\n        <div className=\\\"bg-white p-6 rounded-lg shadow-lg\\\">\\n          {/* Roleplay display */}\\n        </div>\\n      )}\\n    </div>\\n  )\\n}\\n\\nexport default RoleplayPage\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Webhooks in TypeScript\nDESCRIPTION: This server-side Express route handler in TypeScript processes incoming Stripe webhooks. It uses `express.raw` middleware to parse the raw request body, verifies the webhook signature using the `stripe-signature` header and the `STRIPE_WEBHOOK_SECRET` environment variable, and constructs the Stripe event object. It includes basic error handling for invalid signatures or other issues. Event handling logic (e.g., for 'customer.subscription.created') should be added where indicated.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Webhook\nrouter.post('/webhook', express.raw({ type: 'application/json' }), async (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  try {\n    const event = stripe.webhooks.constructEvent(\n      req.body,\n      sig!,\n      process.env.STRIPE_WEBHOOK_SECRET!\n    );\n    // handle event.type e.g. 'customer.subscription.created'\n    res.json({ received: true });\n  } catch (err) {\n    res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Basic Express Server Definition and Endpoint - JavaScript\nDESCRIPTION: Defines a minimal working Express server with a root ('/') GET endpoint returning 'Hello World!'. The server listens on all network interfaces (0.0.0.0), as required for deployment. Dependencies: 'express' must be installed. Key parameters include 'PORT' (configurable via environment variable), and the response is a plain string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-To-address-the-issue-of-the-app-not-running-and-to-fix-any-errors-reported-in-the-Console-I-will-fo-1742642783064.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\napp.get('/', (req, res) => {\n    res.send('Hello World!');\n});\napp.listen(PORT, '0.0.0.0', () => {\n    console.log(`Server running on http://0.0.0.0:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading .env Variables with dotenv.config() in JavaScript\nDESCRIPTION: Demonstrates the basic usage of `dotenv.config()` to load environment variables from a default `.env` file into `process.env`. It captures the return value, checks for potential errors, and logs the parsed key-value pairs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst result = dotenv.config()\n\nif (result.error) {\n  throw result.error\n}\n\nconsole.log(result.parsed)\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Feature API Endpoints in Python using FastAPI\nDESCRIPTION: Creates FastAPI endpoints using APIRouter for AI-related functionalities: checking status (`/status`), generating roleplays (`/roleplay`), generating tests (`/test`), and getting written feedback (`/written-feedback`). It interacts with a `DecadeClient`, uses Pydantic models from `app.models.ai` for data validation, secures endpoints using `Depends(validate_session)`, and handles potential errors with HTTPException.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, HTTPException, Depends, Query\nfrom typing import List, Optional\n\nfrom app.clients.decade_client import DecadeClient\nfrom app.models.ai import (\n    RoleplayRequest, RoleplayResponse,\n    TestRequest, TestResponse,\n    WrittenFeedbackRequest, WrittenFeedbackResponse\n)\nfrom app.core.security import validate_session\n\nrouter = APIRouter()\ndecade_client = DecadeClient()\n\n@router.get(\"/status\")\nasync def ai_status():\n    \"\"\"Check if the AI system is operational\"\"\"\n    try:\n        status = await decade_client.check_ai_status()\n        return status\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error checking AI status: {str(e)}\")\n\n@router.post(\"/roleplay\", response_model=RoleplayResponse)\nasync def generate_roleplay(\n    request: RoleplayRequest,\n    current_user = Depends(validate_session)\n):\n    \"\"\"Generate a DECA roleplay scenario\"\"\"\n    try:\n        roleplay = await decade_client.generate_roleplay(\n            user_id=current_user.id,\n            instructional_area=request.instructional_area,\n            performance_indicators=request.performance_indicators,\n            difficulty_level=request.difficulty_level,\n            business_type=request.business_type\n        )\n        return roleplay\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error generating roleplay: {str(e)}\")\n\n@router.post(\"/test\", response_model=TestResponse)\nasync def generate_test(\n    request: TestRequest,\n    current_user = Depends(validate_session)\n):\n    \"\"\"Generate DECA practice test questions\"\"\"\n    try:\n        test = await decade_client.generate_test(\n            user_id=current_user.id,\n            test_type=request.test_type,\n            categories=request.categories,\n            num_questions=request.num_questions\n        )\n        return test\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error generating test: {str(e)}\")\n\n@router.post(\"/written-feedback\", response_model=WrittenFeedbackResponse)\nasync def get_written_feedback(\n    request: WrittenFeedbackRequest,\n    current_user = Depends(validate_session)\n):\n    \"\"\"Get feedback on a written DECA event submission\"\"\"\n    try:\n        feedback = await decade_client.get_written_feedback(\n            user_id=current_user.id,\n            event_type=request.event_type,\n            content=request.content,\n            sections=request.sections\n        )\n        return feedback\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error getting written feedback: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a FastAPI Endpoint with Fallback to Direct Azure OpenAI in Python\nDESCRIPTION: This Python snippet defines a FastAPI POST endpoint `/roleplay/direct` using `APIRouter`. It takes a `RoleplayRequest`, uses `BackgroundTasks` for asynchronous operations, and depends on `validate_session` for user authentication. The endpoint first attempts to generate a roleplay scenario via `DecadeClient`. If this fails and Azure OpenAI settings are configured, it falls back to a direct call using `get_azure_openai_client`, formatting a prompt and parsing the JSON response. Usage (direct or indirect) is recorded in the background via `record_usage`. It requires `fastapi`, `typing`, `app.clients.decade_client`, `app.models.ai`, `app.core.security`, `app.services.azure_openai`, and potentially `json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, HTTPException, Depends, BackgroundTasks\nfrom typing import Optional, List\n\nfrom app.clients.decade_client import DecadeClient\nfrom app.models.ai import RoleplayRequest, RoleplayResponse\nfrom app.core.security import validate_session\nfrom app.services.azure_openai import get_azure_openai_client\n\nrouter = APIRouter()\ndecade_client = DecadeClient()\n\n@router.post(\"/roleplay/direct\", response_model=RoleplayResponse)\nasync def generate_roleplay_direct(\n    request: RoleplayRequest,\n    background_tasks: BackgroundTasks,\n    current_user = Depends(validate_session)\n):\n    \"\"\"Generate a roleplay scenario directly through Azure OpenAI if available\"\"\"\n    # First try to use DecA(I)de API\n    try:\n        roleplay = await decade_client.generate_roleplay(\n            user_id=current_user.id,\n            instructional_area=request.instructional_area,\n            performance_indicators=request.performance_indicators,\n            difficulty_level=request.difficulty_level,\n            business_type=request.business_type\n        )\n        \n        # Record usage in background\n        background_tasks.add_task(\n            record_usage,\n            user_id=current_user.id,\n            activity_type=\"roleplay_generation\",\n            details={\"direct\": False}\n        )\n        \n        return roleplay\n    except Exception as primary_error:\n        # If DecA(I)de API fails and direct access is configured, try Azure OpenAI directly\n        if not all([settings.AZURE_OPENAI_KEY, settings.AZURE_OPENAI_ENDPOINT, settings.AZURE_OPENAI_DEPLOYMENT]):\n            raise HTTPException(status_code=500, detail=f\"Error generating roleplay: {str(primary_error)}\")\n        \n        try:\n            # Get Azure OpenAI client\n            client = get_azure_openai_client()\n            \n            # Format the prompt similar to how DecA(I)de does it\n            system_message = \"You are a DECA roleplay scenario generator. Create realistic, challenging, and educational DECA roleplay scenarios for high school students.\"\n            \n            prompt = f\"\"\"\n            Create a realistic DECA roleplay scenario for a {request.difficulty_level} difficulty level. \n            The scenario should focus on the instructional area of \\\"{request.instructional_area}\\\" \n            and include the following performance indicators: {', '.join(request.performance_indicators)}.\n            The scenario should involve a {request.business_type or 'retail business'}.\n            \n            Format your response as a JSON object with the following properties:\n            - title: A catchy title for the roleplay\n            - scenario: A 2-3 paragraph description of the business situation\n            - performanceIndicators: An array of the provided performance indicators\n            - difficulty: The difficulty level provided\n            - businessType: The type of business involved\n            - meetWith: The title/role of the person the student will be meeting with in the roleplay\n            \"\"\"\n            \n            response = await client.get_chat_completions(\n                messages=[\n                    {\"role\": \"system\", \"content\": system_message},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"}\n            )\n            \n            # Parse the response\n            roleplay_json = json.loads(response.choices[0].message.content)\n            \n            # Record direct usage in background\n            background_tasks.add_task(\n                record_usage,\n                user_id=current_user.id,\n                activity_type=\"roleplay_generation\",\n                details={\"direct\": True}\n            )\n            \n            return roleplay_json\n            \n        except Exception as direct_error:\n            # If both methods fail, report the original error\n            raise HTTPException(\n                status_code=500, \n                detail=f\"Error generating roleplay. Primary error: {str(primary_error)}. Direct error: {str(direct_error)}\"\n            )\n\nasync def record_usage(user_id: int, activity_type: str, details: Dict[str, Any]):\n    \"\"\"Record user activity in the background\"\"\"\n    try:\n        # Implementation would depend on your logging/analytics system\n        pass\n    except Exception as e:\n        # Log the error but don't fail the main request\n        print(f\"Error recording usage: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Diego Chat Endpoint with Azure OpenAI in Express TypeScript\nDESCRIPTION: This snippet defines a function `setupChatRoutes` that configures chat-related endpoints for an Express application. It specifically implements a POST endpoint `/api/chat/diego`. This endpoint receives a `message` in the request body, validates its presence, and then interacts with Azure OpenAI using a client obtained from `getOpenAIClient()`. It uses a specific deployment (defaulting to 'gpt-4o-mini') and provides a system prompt defining the AI persona 'Diego', a DECA assistant. The user's message is sent, and the AI's response is returned in a JSON object, along with flags `isUnrelated` and `shouldExit`. Error handling covers missing messages and potential issues during the OpenAI API call.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// server/routes/chatRoutes.ts\nimport { Express } from \"express\";\nimport { getOpenAIClient } from \"../services/azureOpenai\";\n\nexport function setupChatRoutes(app: Express) {\n  // Diego chat endpoint\n  app.post(\"/api/chat/diego\", async (req, res) => {\n    const { message } = req.body;\n    \n    if (!message) {\n      return res.status(400).json({ error: \"Message is required\" });\n    }\n    \n    try {\n      const client = getOpenAIClient();\n      const deployment = process.env.AZURE_OPENAI_DEPLOYMENT || \"gpt-4o-mini\";\n      \n      // Diego's system prompt\n      const systemMessage = `You are Diego, a friendly dolphin AI assistant specialized in helping high school students prepare for DECA competitions.\n      \n      // Additional system instructions...`;\n      \n      const response = await client.getChatCompletions(\n        deployment,\n        [\n          { role: \"system\", content: systemMessage },\n          { role: \"user\", content: message }\n        ]\n      );\n      \n      res.json({\n        response: response.choices[0].message?.content || \"I'm not sure how to respond to that right now.\",\n        isUnrelated: false,\n        shouldExit: false\n      });\n    } catch (error) {\n      console.error(\"Error in chat:\", error);\n      res.status(500).json({ error: \"Error processing your message\" });\n    }\n  });\n  \n  // Additional chat endpoints...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with dotenv and Node Polyfills (JavaScript)\nDESCRIPTION: Example `webpack.config.js` demonstrating how to configure Webpack for a front-end project using `dotenv`. It includes loading `.env` variables, using `NodePolyfillPlugin` to provide Node.js core module polyfills, and injecting specific environment variables into the client-side bundle using `webpack.DefinePlugin`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_38\n\nLANGUAGE: js\nCODE:\n```\nrequire('dotenv').config()\n\nconst path = require('path');\nconst webpack = require('webpack')\n\nconst NodePolyfillPlugin = require('node-polyfill-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.ts',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  plugins: [\n    new NodePolyfillPlugin(),\n    new webpack.DefinePlugin({\n      'process.env': {\n        HELLO: JSON.stringify(process.env.HELLO)\n      }\n    }),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Core and Development Dependencies for DecA(I)de (Bash)\nDESCRIPTION: This Bash snippet uses the Node Package Manager (npm) to install project dependencies. The first command installs essential runtime dependencies for the server, including the Express web framework, TypeScript and its execution environment (`ts-node`), environment variable management (`dotenv`), the Drizzle ORM with the PostgreSQL driver (`pg`), Azure SDKs for OpenAI and Identity, and libraries for handling authentication (`passport`, `passport-local`, `express-session`). The second command installs development-only dependencies (`-D`), such as type definitions for Node and installed packages, a development server (`ts-node-dev`), and Drizzle ORM tooling (`drizzle-kit`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Install core dependencies\nnpm install express typescript ts-node dotenv drizzle-orm pg @azure/openai @azure/identity passport passport-local express-session\n\n# Install development dependencies\nnpm install -D @types/node @types/express @types/pg typescript ts-node-dev drizzle-kit @types/passport @types/passport-local @types/express-session\n```\n```\n\n----------------------------------------\n\nTITLE: Server Project Structure in Express.js\nDESCRIPTION: Outlines the directory structure for the Express.js backend application (server). It includes the main server entry point (`index.ts`), API route definitions (`routes.ts`), authentication logic (`auth.ts`), database connection setup (`db.ts`), storage interface implementation (`storage.ts`), various service implementations (like Azure OpenAI integration in `services/azureOpenai.ts`), and utility functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nserver/\n├── index.ts              # Main server entry point\n├── routes.ts             # API route definitions\n├── auth.ts               # Authentication logic\n├── db.ts                 # Database connection\n├── storage.ts            # Storage interface implementation\n├── services/             # Service implementations\n│   ├── azureOpenai.ts    # Azure OpenAI integration\n│   └── ...              \n└── utils/                # Utility functions\n```\n\n----------------------------------------\n\nTITLE: Defining Chat and Feedback Data Models in Python using Pydantic\nDESCRIPTION: Specifies Pydantic models (ChatMessage, ChatResponse, RoleplayFeedbackRequest, RoleplayFeedbackResponse, PIExplanationRequest, PIExplanationResponse) for handling chat interactions and feedback requests/responses within the application. These models ensure data consistency and validation for features like the main chat interface, roleplay feedback, and performance indicator explanations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, List, Any, Union\n\nclass ChatMessage(BaseModel):\n    message: str\n\nclass ChatResponse(BaseModel):\n    response: str\n    is_unrelated: bool = False\n    should_exit: bool = False\n\nclass RoleplayFeedbackRequest(BaseModel):\n    roleplay_id: str\n    user_response: str\n\nclass RoleplayFeedbackResponse(BaseModel):\n    feedback: str\n\nclass PIExplanationRequest(BaseModel):\n    indicator: str\n    category: Optional[str] = None\n\nclass PIExplanationResponse(BaseModel):\n    explanation: str\n```\n\n----------------------------------------\n\nTITLE: Managing Database Migrations with Drizzle ORM\nDESCRIPTION: Outlines the recommended process for managing database schema changes when using Drizzle ORM. Developers should first update the schema definition file (`shared/schema.ts`), then apply these changes to the database using the `npm run db:push` command (which attempts non-destructive updates). If data loss is anticipated, manual data migration steps are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Update the schema in `shared/schema.ts`\n2. Use `npm run db:push` to apply changes without data loss\n3. If data loss is expected, either modify the schema to avoid it or manually handle data migration\n```\n\n----------------------------------------\n\nTITLE: Integrating and Generating Roleplay Scenarios with Azure OpenAI (TypeScript)\nDESCRIPTION: Sets up Azure OpenAI client integration and provides an async function that generates structured roleplay scenarios for DECA events. Requires Azure OpenAI credentials in environment variables and schema constants for event context. The function submit prompts, parses AI responses for scenario components, and returns a structured object including scoring criteria. Inputs require event details, user background, and performance indicators; the output is a detailed object for downstream use. Relies on utility functions for extracting parts of the AI response, and assumes required Azure packages are installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIClient, AzureKeyCredential, ChatCompletionsOptions } from \"@azure/openai\";\nimport { DECA_EVENTS, EVENT_TYPE_GROUPS, PI_CATEGORIES } from \"@shared/schema\";\n\nif (!process.env.AZURE_OPENAI_KEY || !process.env.AZURE_OPENAI_ENDPOINT || !process.env.AZURE_OPENAI_DEPLOYMENT) {\n  throw new Error(\"Missing required Azure OpenAI configuration.\");\n}\n\nexport function getOpenAIClient(): OpenAIClient {\n  const endpoint = process.env.AZURE_OPENAI_ENDPOINT!;\n  const azureApiKey = process.env.AZURE_OPENAI_KEY!;\n  return new OpenAIClient(endpoint, new AzureKeyCredential(azureApiKey));\n}\n\nexport async function generateRoleplayScenario(params: {\n  eventType: string;\n  eventCode: string;\n  performanceIndicators: string[];\n  userBackground?: string;\n}): Promise<{ title: string; scenario: string; customerProfile: string; judgeInstructions: string; performanceIndicators: string[]; scoringCriteria: { id: string; name: string; description: string; points: number }[]; }> {\n  const client = getOpenAIClient();\n  const deployment = process.env.AZURE_OPENAI_DEPLOYMENT!;\n  const eventName = DECA_EVENTS[params.eventCode]?.name || params.eventCode;\n  const eventTypeGroup = EVENT_TYPE_GROUPS.find(group => group.types.includes(params.eventType));\n  const formattedPIs = params.performanceIndicators.map((pi, i) => `${i+1}. ${pi}`).join('\\n');\n  const systemPrompt = `You are a DECA judge specializing in ${eventName} scenarios. Create a realistic roleplay that tests the following performance indicators:\\n${formattedPIs}\\nFormat the response with sections.`;\n  const userPrompt = `Generate a complete roleplay scenario package with sections: TITLE, SCENARIO (300-400 words), CUSTOMER PROFILE, JUDGE INSTRUCTIONS, PERFORMANCE INDICATORS (as a bullet list), and SCORING CRITERIA (total 21-30 points). ${params.userBackground ? `Consider this background: ${params.userBackground}` : ''}`;\n  const options: ChatCompletionsOptions = {\n    messages: [\n      { role: \"system\", content: systemPrompt },\n      { role: \"user\", content: userPrompt }\n    ],\n    temperature: 0.7,\n    maxTokens: 2500,\n    topP: 0.95,\n    frequencyPenalty: 0.0,\n    presencePenalty: 0.0,\n  };\n  const result = await client.getChatCompletions(deployment, options);\n  const content = result.choices[0].message?.content || \"\";\n  // Parsing functions extractTitle, extractSection, extractBulletPoints should be implemented\n  const title = extractTitle(content);\n  const scenario = extractSection(content, \"SCENARIO\", \"CUSTOMER PROFILE\");\n  const customerProfile = extractSection(content, \"CUSTOMER PROFILE\", \"JUDGE INSTRUCTIONS\");\n  const judgeInstructions = extractSection(content, \"JUDGE INSTRUCTIONS\", \"PERFORMANCE INDICATORS\");\n  const performanceIndicators = extractBulletPoints(extractSection(content, \"PERFORMANCE INDICATORS\", \"SCORING CRITERIA\"));\n  const scoringCriteriaText = extractSection(content, \"SCORING CRITERIA\", null);\n  const scoringCriteria = scoringCriteriaText.split('\\n').filter(line => line.trim().length > 0).map((line, index) => {\n    const parts = line.split(':');\n    const name = parts[0].trim().replace(/^\\d+\\.\\s*/, '');\n    const descParts = parts.slice(1).join(':').split('(');\n    const description = descParts[0].trim();\n    const pointsMatch = descParts[1]?.match(/(\\d+)\\s*points/i);\n    const points = pointsMatch ? parseInt(pointsMatch[1]) : 5;\n    return { id: `criterion_${index+1}`, name, description, points };\n  });\n  return { title, scenario, customerProfile, judgeInstructions, performanceIndicators, scoringCriteria };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enforcing Required Properties with Required<T> in TypeScript\nDESCRIPTION: This example defines a `ContactForm` interface with optional properties (`email`, `message`). The `submitContactForm` function uses `Required<ContactForm>` in its parameter type to ensure that any object passed to it must have both `email` and `message` defined, demonstrating how `Required<T>` makes all properties of a type mandatory. Calling the function without all properties results in a TypeScript error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ninterface ContactForm {\n\t\temail?: string;\n\t\tmessage?: string;\n}\n\nfunction submitContactForm(formData: Required<ContactForm>) {\n\t\t// Send the form data to the server.\n}\n\nsubmitContactForm({\n\t\temail: 'ex@mple.com',\n\t\tmessage: 'Hi! Could you tell me more about…',\n});\n\n// TypeScript error: missing property 'message'\nsubmitContactForm({\n\t\temail: 'ex@mple.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cached Prototype References to Prevent Userland Breakage - JavaScript\nDESCRIPTION: This snippet demonstrates the robust pattern of using cached references to built-in prototype methods, particularly Array.prototype.filter, retrieved from @sinonjs/commons. This approach ensures that even if a user mocks or replaces global prototypes (e.g., via Sinon), the library's internal logic remains reliable. Required dependencies are Sinon and @sinonjs/commons. It highlights managing side-effect-free method invocation in shared codebases. The expected output is the correct filtered value instead of the spoofed one.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/commons/lib/prototypes/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in userland, the library user needs to replace the filter method on\n// Array.prototype\nvar array = [1, 2, 3];\nsinon.replace(array, \"filter\", sinon.fake.returns(2));\n\n// in a sinon module, the library author needs to use the filter method\n// get a reference to the original Array.prototype.filter\nvar filter = require(\"@sinonjs/commons\").prototypes.array.filter;\nvar someArray = [\"a\", \"b\", 42, \"c\"];\nvar answer = filter(someArray, function (v) {\n    return v === 42;\n});\n\nconsole.log(answer);\n// => 42\n```\n\n----------------------------------------\n\nTITLE: Parsing an HTTP Cookie Header (JavaScript)\nDESCRIPTION: Uses the 'cookie.parse' function to turn a raw 'Cookie' HTTP header string into an object mapping cookie names to values. This example demonstrates parsing a header with multiple cookies, including decoding URL-encoded values. Parameters include the header string, and options can customize decoding behavior. The result is a JavaScript object of cookie name-value pairs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');\n// { foo: 'bar', equation: 'E=mc^2' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI SDK Client in Python\nDESCRIPTION: This snippet configures the OpenAI Python SDK to use Azure OpenAI services by setting the relevant API type, base endpoint, version, and API key. It requires the 'openai' Python package, and assumes required values are sourced from environment variables. Inputs are the Azure endpoint and key, while output is a configured SDK ready for inference requests. Make sure environment variables are set ('AZURE_OPENAI_ENDPOINT', 'AZURE_OPENAI_KEY'), and the Python process has import access for os and openai modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport openai\nopenai.api_type = \"azure\"\nopenai.api_base = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\nopenai.api_version = \"2024-05-01-preview\"  # or the version your resource requires\nopenai.api_key = os.getenv(\"AZURE_OPENAI_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Attaching a Callback to HTTP Request Completion in Node.js\nDESCRIPTION: Demonstrates using `onFinished` to attach a listener callback to an HTTP request object (`req`). This callback is invoked once when the request stream ends (all data received) or errors out. It receives an optional error object (`err`) and the request object (`req`). The example context shows accumulating request data using standard event listeners (`'data'`) before the `onFinished` callback is triggered.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/on-finished/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = ''\n\nreq.setEncoding('utf8')\nreq.on('data', function (str) {\n  data += str\n})\n\nonFinished(req, function (err, req) {\n  // data is read unless there is err\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Server with Passport and Route Registration - Node.js/Express TypeScript\nDESCRIPTION: Defines the Express server entry in TypeScript, configuring environment variables, middleware for JSON and session handling, initializing Passport authentication, setting up authentication hooks, and dynamically registering all routes. The code expects dotenv, express-session, and passport to be installed, and requires environmental variables like PORT and SESSION_SECRET. It serves as the centralized entry point from which all other backend logic is registered and the server started. Required modules (auth and routes) must be accessible for correct operation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// server/index.ts\nimport express from \"express\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport dotenv from \"dotenv\";\nimport { setupAuth } from \"./auth\";\nimport { registerRoutes } from \"./routes\";\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\n\n// Setup session management\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"your-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  })\n);\n\n// Initialize Passport\napp.use(passport.initialize());\napp.use(passport.session());\n\n// Setup authentication\nsetupAuth(app);\n\n// Register API routes\nregisterRoutes(app);\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Enforcing Subscription Tier Access in Node.js/Express Backend\nDESCRIPTION: This JavaScript snippet, intended for a Node.js/Express backend API route (e.g., `/api/generateDetailedReport`), shows how to implement backend enforcement for feature gating based on user subscription tiers. It checks the 'plan' property of the authenticated user object. If the user's plan is not 'Pro', it denies access by returning a 403 Forbidden status and a JSON error message. This ensures that features restricted to specific subscription tiers cannot be accessed even if the frontend UI is bypassed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742626139423.txt#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif(user.plan !== 'Pro') { return res.status(403).json({error: \"Upgrade required\"}); }\n```\n\n----------------------------------------\n\nTITLE: Loading .env Variables using ES6 import (JavaScript)\nDESCRIPTION: JavaScript code showing how to load `.env` variables using the ES6 module syntax. Importing `dotenv/config` automatically invokes the `config()` method, loading the variables into `process.env`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'dotenv/config'\n```\n\n----------------------------------------\n\nTITLE: Making Chat Completion Request with Azure OpenAI in Node.js\nDESCRIPTION: Shows how to make an asynchronous call to the Azure OpenAI service using the configured `openai` client to generate text based on provided system and user prompts. It uses the `createChatCompletion` method, specifying the deployment name (as `model`) and the conversation messages. The generated text content is then extracted from the response structure. This snippet assumes prior initialization as shown in the previous example.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742626139423.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst completion = await openai.createChatCompletion({\n  model: \"gpt-4\", // or your deployment name\n  messages: [ {role: \"system\", content: systemPrompt}, {role: \"user\", content: userPrompt} ]\n});\nconst result = completion.data.choices[0].message.content;\n```\n\n----------------------------------------\n\nTITLE: Loading .env Variables using require (JavaScript)\nDESCRIPTION: JavaScript code demonstrating the basic usage of `dotenv`. It requires the package and calls the `config()` method early in the application lifecycle to load variables from the `.env` file into `process.env`. Includes a `console.log` for verification purposes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\nconsole.log(process.env) // remove this after you've confirmed it is working\n```\n\n----------------------------------------\n\nTITLE: Defining Application Configuration with Pydantic (Python)\nDESCRIPTION: Creates a `Settings` class in `app/core/config.py` using Pydantic's `BaseSettings` to manage application configuration. It loads values from environment variables defined in a `.env` file, providing type hints and validation for settings like API host/port, debug status, secret keys, DecA(I)de API details, CORS origins, and optional Azure OpenAI configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseSettings\nfrom typing import List\n\nclass Settings(BaseSettings):\n    API_HOST: str = \"0.0.0.0\"\n    API_PORT: int = 8000\n    DEBUG: bool = False\n    SECRET_KEY: str\n\n    # DecA(I)de API settings\n    DECADE_API_BASE_URL: str\n    DECADE_API_SECRET: str\n\n    # CORS settings\n    CORS_ORIGINS: List[str] = [\"*\"]\n\n    # Optional direct Azure OpenAI settings\n    AZURE_OPENAI_KEY: str = None\n    AZURE_OPENAI_ENDPOINT: str = None\n    AZURE_OPENAI_DEPLOYMENT: str = None\n\n    class Config:\n        env_file = \".env\"\n        case_sensitive = True\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Azure OpenAI via OpenAI SDK in Node.js\nDESCRIPTION: This snippet demonstrates how to configure the OpenAI Node SDK to use Azure OpenAI endpoints by setting basePath, apiKey, and overriding headers for authentication. Required dependencies include the 'openai' npm package. It shows how to instantiate the OpenAIApi client and notes that requests need the api-version and deployment model in the request path. Inputs include Azure connection secrets via environment variables, and outputs are Chat Completions from the OpenAI service.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { OpenAIApi, Configuration } = require(\"openai\");\nconst config = new Configuration({\n  basePath: process.env.AZURE_OPENAI_ENDPOINT, // e.g. \"https://<resource>.openai.azure.com/\",\n  apiKey: process.env.AZURE_OPENAI_KEY\n});\n// Override the default basePath to include the API version and deployment name\nconfig.baseOptions = { headers: { 'api-key': config.apiKey } }; \nconst openai = new OpenAIApi(config);\n// When calling, include the deployment and api-version query param in the request path\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI SDK Configuration in Node.js\nDESCRIPTION: Demonstrates configuring the official OpenAI Node.js SDK to communicate with an Azure OpenAI service endpoint. It requires the 'openai' npm package and uses environment variables (AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_KEY). The Configuration class sets the Azure endpoint URL and API key, overriding base options to include the 'api-key' header required by Azure. An OpenAIApi instance is then created with this configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742626139423.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { OpenAIApi, Configuration } = require(\"openai\");\nconst config = new Configuration({\n  basePath: process.env.AZURE_OPENAI_ENDPOINT, // e.g. \"https://<resource>.openai.azure.com/\",\n  apiKey: process.env.AZURE_OPENAI_KEY\n});\n// Override the default basePath to include the API version and deployment name\nconfig.baseOptions = { headers: { 'api-key': config.apiKey } }; \nconst openai = new OpenAIApi(config);\n// When calling, include the deployment and api-version query param in the request path\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous DecA(I)de API Client in Python Using httpx\nDESCRIPTION: This Python code defines an asynchronous client for the DecA(I)de API, leveraging the httpx library to perform common operations like user authentication, AI-driven roleplay generation, test generation, chat, and data retrieval. It requires the httpx library for HTTP operations and access to application configuration via app.core.config.settings. Key parameters include base_url, API secret keys from settings, user/session identification, and data payloads for each API operation. Expected inputs vary per method, typically consisting of user credentials, identifiers, content data, or query/filter options, while the outputs are parsed JSON responses from the API; error handling is built-in for HTTP failures. This class assumes it runs in an async event loop and is intended for use within larger async Python web backends or utilities.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nimport json\nfrom typing import Dict, List, Optional, Any, Union\nfrom app.core.config import settings\n\nclass DecadeClient:\n    \"\"\"Client for interacting with the DecA(I)de API\"\"\"\n    \n    def __init__(self):\n        self.base_url = settings.DECADE_API_BASE_URL\n        self.api_secret = settings.DECADE_API_SECRET\n        self.headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-API-Secret\": self.api_secret\n        }\n    \n    async def _request(\n        self, \n        method: str, \n        endpoint: str, \n        data: Optional[Dict[str, Any]] = None,\n        session_id: Optional[str] = None,\n        params: Optional[Dict[str, Any]] = None\n    ) -> Any:\n        \"\"\"Make a request to the DecA(I)de API\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        headers = self.headers.copy()\n        if session_id:\n            headers[\"Cookie\"] = f\"connect.sid={session_id}\"\n        \n        async with httpx.AsyncClient() as client:\n            if method == \"GET\":\n                response = await client.get(url, headers=headers, params=params)\n            elif method == \"POST\":\n                response = await client.post(url, headers=headers, json=data, params=params)\n            elif method == \"PUT\":\n                response = await client.put(url, headers=headers, json=data, params=params)\n            elif method == \"DELETE\":\n                response = await client.delete(url, headers=headers, params=params)\n            else:\n                raise ValueError(f\"Unsupported HTTP method: {method}\")\n            \n            if response.status_code >= 400:\n                try:\n                    error_detail = response.json()\n                    error_message = error_detail.get(\"error\", \"Unknown error\")\n                except:\n                    error_message = response.text\n                raise Exception(f\"API error ({response.status_code}): {error_message}\")\n                \n            return response.json()\n    \n    # Authentication Methods\n    \n    async def register_user(\n        self,\n        username: str,\n        password: str,\n        email: Optional[str] = None,\n        event_format: Optional[str] = None,\n        event_code: Optional[str] = None,\n        event_type: Optional[str] = None,\n        instructional_area: Optional[str] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Register a new user\"\"\"\n        data = {\n            \"username\": username,\n            \"password\": password,\n            \"email\": email,\n            \"eventFormat\": event_format,\n            \"eventCode\": event_code,\n            \"eventType\": event_type,\n            \"instructionalArea\": instructional_area\n        }\n        \n        return await self._request(\"POST\", \"/auth/register\", data=data)\n    \n    async def login_user(self, username: str, password: str) -> Dict[str, Any]:\n        \"\"\"Login a user and get their session\"\"\"\n        data = {\n            \"username\": username,\n            \"password\": password\n        }\n        \n        return await self._request(\"POST\", \"/auth/login\", data=data)\n    \n    async def logout_user(self, session_id: str) -> Dict[str, Any]:\n        \"\"\"Logout a user\"\"\"\n        return await self._request(\"POST\", \"/auth/logout\", session_id=session_id)\n    \n    # AI Methods\n    \n    async def check_ai_status(self) -> Dict[str, Any]:\n        \"\"\"Check if the AI system is operational\"\"\"\n        return await self._request(\"GET\", \"/api/ai/status\")\n    \n    async def generate_roleplay(\n        self,\n        user_id: int,\n        instructional_area: str,\n        performance_indicators: List[str],\n        difficulty_level: str,\n        business_type: Optional[str] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Generate a roleplay scenario\"\"\"\n        data = {\n            \"instructionalArea\": instructional_area,\n            \"performanceIndicators\": performance_indicators,\n            \"difficultyLevel\": difficulty_level\n        }\n        \n        if business_type:\n            data[\"businessType\"] = business_type\n            \n        return await self._request(\"POST\", \"/api/ai/generate-roleplay\", data=data)\n    \n    async def generate_test(\n        self,\n        user_id: int,\n        test_type: str,\n        categories: List[str],\n        num_questions: int\n    ) -> Dict[str, Any]:\n        \"\"\"Generate a practice test\"\"\"\n        data = {\n            \"testType\": test_type,\n            \"categories\": categories,\n            \"numQuestions\": num_questions\n        }\n            \n        return await self._request(\"POST\", \"/api/ai/generate-test\", data=data)\n    \n    async def get_written_feedback(\n        self,\n        user_id: int,\n        event_type: str,\n        content: str,\n        sections: Optional[Dict[str, str]] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Get feedback on a written event\"\"\"\n        data = {\n            \"eventType\": event_type,\n            \"content\": content\n        }\n        \n        if sections:\n            data[\"sections\"] = sections\n            \n        return await self._request(\"POST\", \"/api/ai/written-event-feedback\", data=data)\n    \n    # Chat Methods\n    \n    async def chat_with_diego(\n        self,\n        message: str,\n        user_id: Optional[int] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Chat with Diego assistant\"\"\"\n        data = {\"message\": message}\n        return await self._request(\"POST\", \"/api/chat/diego\", data=data)\n    \n    async def get_roleplay_feedback(\n        self,\n        user_id: int,\n        roleplay_id: str,\n        user_response: str\n    ) -> Dict[str, Any]:\n        \"\"\"Get feedback on a roleplay response\"\"\"\n        data = {\n            \"roleplayId\": roleplay_id,\n            \"userResponse\": user_response\n        }\n        return await self._request(\"POST\", \"/api/chat/roleplay-feedback\", data=data)\n    \n    async def explain_pi(\n        self,\n        indicator: str,\n        category: Optional[str] = None,\n        user_id: Optional[int] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Get an explanation for a performance indicator\"\"\"\n        data = {\"indicator\": indicator}\n        \n        if category:\n            data[\"category\"] = category\n            \n        return await self._request(\"POST\", \"/api/chat/explain-pi\", data=data)\n    \n    # Data Access Methods\n    \n    async def get_deca_events(self) -> Dict[str, Any]:\n        \"\"\"Get all DECA events data\"\"\"\n        return await self._request(\"GET\", \"/api/deca-events\")\n    \n    async def get_subscription_tiers(self) -> Dict[str, Any]:\n        \"\"\"Get all subscription tiers\"\"\"\n        return await self._request(\"GET\", \"/api/subscription-tiers\")\n    \n    async def get_performance_indicators(\n        self,\n        user_id: int,\n        category: Optional[str] = None\n    ) -> List[Dict[str, Any]]:\n        \"\"\"Get performance indicators for a user\"\"\"\n        params = {}\n        if category:\n            params[\"category\"] = category\n            \n        return await self._request(\"GET\", \"/api/performance-indicators\", params=params)\n    \n    async def get_user_stats(self, user_id: int) -> Dict[str, Any]:\n        \"\"\"Get statistics for a user\"\"\"\n        return await self._request(\"GET\", \"/api/user/stats\")\n    \n    async def get_user_activities(self, user_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Get learning activities for a user\"\"\"\n        return await self._request(\"GET\", \"/api/user/activities\")\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using Once to Wrap Callbacks in JavaScript\nDESCRIPTION: Demonstrates how to use the 'once' module to wrap a callback function so it can only be executed a single time. The snippet includes a file loader where the callback is passed to both 'load' and 'error' events, preventing duplicate executions from multiple sources. This pattern ensures reliability of asynchronous event handling and requires the 'once' module as a dependency. Key parameters include the file to load and the callback to be protected.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/once/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar once = require('once')\\n\\nfunction load (file, cb) {\\n  cb = once(cb)\\n  loader.load('file')\\n  loader.once('load', cb)\\n  loader.once('error', cb)\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Applying Route-Specific body-parser Middleware in Express (JavaScript)\nDESCRIPTION: This snippet demonstrates adding body-parser middleware only to routes needing body parsing, which helps prevent unnecessary parsing for endpoints that do not require it. It requires 'express' and 'body-parser' as dependencies. The code creates specialized middleware instances (jsonParser and urlencodedParser) and applies them to specific routes: POST /login expects URL-encoded data and responds with a personalized message, while POST /api/users expects JSON data (presumably to create a user from the provided body). Expected input: proper Content-Type headers and formatted body for each route. Output: a welcome message or business logic handling (user creation). Limitation: the snippets do not include error checking or validation for the parsed data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/body-parser/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// create application/json parser\\nvar jsonParser = bodyParser.json()\\n\\n// create application/x-www-form-urlencoded parser\\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\\n\\n// POST /login gets urlencoded bodies\\napp.post('/login', urlencodedParser, function (req, res) {\\n  res.send('welcome, ' + req.body.username)\\n})\\n\\n// POST /api/users gets JSON bodies\\napp.post('/api/users', jsonParser, function (req, res) {\\n  // create user in req.body\\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Functionality using ES Modules\nDESCRIPTION: This JavaScript snippet showcases the ES module import syntax. It uses `import { ajax } from 'node:utils';` to import only the specific `ajax` function needed from the 'node:utils' module. This enables Rollup's tree-shaking optimization, as unused parts of the module will not be included in the final bundle, leading to smaller and faster code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import the ajax function with an ES import statement\nimport { ajax } from 'node:utils';\n\nvar query = 'Rollup';\n// call the ajax function\najax('https://api.example.com?search=' + query).then(handleResponse);\n```\n\n----------------------------------------\n\nTITLE: Transforming Index HTML in Express Middleware with Vite - JavaScript\nDESCRIPTION: Demonstrates using Vite to transform the index.html file in middleware mode inside an Express.js app. The code reads raw HTML, passes it through Vite's transformIndexHtml method, and serves the processed HTML. Key dependencies are Express, Node.js fs and path modules, and a Vite server instance. Inputs are the HTTP request and file location; output is the transformed HTML response. Proper error handling is modeled for production setups.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\napp.get('/', async (req, res, next) => {\\n  try {\\n    let html = fs.readFileSync(path.resolve(root, 'index.html'), 'utf-8')\\n\\n    // Transform HTML using Vite plugins.\\n    html = await viteServer.transformIndexHtml(req.url, html)\\n\\n    res.send(html)\\n  } catch (e) {\\n    return next(e)\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with React Plugin - JavaScript\nDESCRIPTION: Demonstrates the basic setup of a Vite configuration file using @vitejs/plugin-react. It imports the necessary modules, defines the config with defineConfig, and sets the React plugin in the plugins array to enable Fast Refresh, the automatic JSX runtime, and other React-specific enhancements. Dependencies include Vite and @vitejs/plugin-react; the export is expected for vite.config.js, with plugins as the main parameter.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// vite.config.js\\nimport { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\nexport default defineConfig({\\n  plugins: [react()],\\n})\n```\n\n----------------------------------------\n\nTITLE: Defining API Client and Endpoints with Axios for React Query (TypeScript TSX)\nDESCRIPTION: This snippet creates an Axios instance with predefined settings for internal API communication and organizes domain-specific API calls into objects (authApi, aiApi, chatApi, and dataApi). It's intended as a centralized location for all frontend API interactions, supporting authentication, AI operations, chat workflows, and user data retrieval. This approach enforces maintainable, testable HTTP methods suitable for React Query integration, and requires Axios as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/lib/api.ts\\nimport axios from 'axios'\\n\\nconst api = axios.create({\\n  baseURL: '/api',\\n  withCredentials: true,\\n})\\n\\n// Auth API\\nexport const authApi = {\\n  login: (username: string, password: string) => \\n    api.post('/auth/login', { username, password }),\\n  register: (userData: any) => \\n    api.post('/auth/register', userData),\\n  logout: () => \\n    api.post('/auth/logout'),\\n  getCurrentUser: () => \\n    api.get('/auth/user'),\\n}\\n\\n// AI API\\nexport const aiApi = {\\n  checkStatus: () => \\n    api.get('/ai/status'),\\n  generateRoleplay: (params: any) => \\n    api.post('/ai/generate-roleplay', params),\\n  generateTest: (params: any) => \\n    api.post('/ai/generate-test', params),\\n  getWrittenFeedback: (params: any) => \\n    api.post('/ai/written-event-feedback', params),\\n}\\n\\n// Chat API\\nexport const chatApi = {\\n  chatWithDiego: (message: string) => \\n    api.post('/chat/diego', { message }),\\n  getRoleplayFeedback: (roleplayId: string, userResponse: string) => \\n    api.post('/chat/roleplay-feedback', { roleplayId, userResponse }),\\n  explainPI: (indicator: string, category?: string) => \\n    api.post('/chat/explain-pi', { indicator, category }),\\n}\\n\\n// Data API\\nexport const dataApi = {\\n  getSubscriptionTiers: () => \\n    api.get('/subscription-tiers'),\\n  getDecaEvents: () => \\n    api.get('/deca-events'),\\n  getUserStats: () => \\n    api.get('/user/stats'),\\n  getUserActivities: () => \\n    api.get('/user/activities'),\\n}\\n\\nexport default api\n```\n\n----------------------------------------\n\nTITLE: Using tslib for Helper Injection - TypeScript\nDESCRIPTION: Shows how TypeScript output references tslib's version of a helper (__assign) instead of emitting it per-file when --importHelpers is enabled. Replaces inline helper logic with tslib_1.__assign import, thereby reducing code duplication. Inputs: exported objects; Output: y is a shallow copy of x. Depends on tslib being installed and imported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar tslib_1 = require(\"tslib\");\nexports.x = {};\nexports.y = tslib_1.__assign({}, exports.x);\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Properties with Pick<T, K> in TypeScript\nDESCRIPTION: This example defines an `Article` interface with multiple properties. It then uses `Pick<Article, 'title' | 'thumbnail'>` to create a new type `ArticlePreview` containing only the `title` and `thumbnail` properties from the original `Article` interface. This demonstrates how `Pick<T, K>` can be used to create a new type by selecting a specific subset of properties from an existing type, useful for functions like `renderArticlePreviews` that only require partial data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ninterface Article {\n\t\ttitle: string;\n\t\tthumbnail: string;\n\t\tcontent: string;\n}\n\n// Creates new type out of the `Article` interface composed\n// from the Articles' two properties: `title` and `thumbnail`.\n// `ArticlePreview = {title: string; thumbnail: string}`\ntype ArticlePreview = Pick<Article, 'title' | 'thumbnail'>;\n\n// Render a list of articles using only title and description.\nfunction renderArticlePreviews(previews: ArticlePreview[]): HTMLElement {\n\t\tconst articles = document.createElement('div');\n\n\t\tfor (const preview of previews) {\n\t\t\t\t// Append preview to the articles.\n\t\t}\n\n\t\treturn articles;\n}\n\nconst articles = renderArticlePreviews([\n\t\t{\n\t\t\ttitle: 'TypeScript tutorial!',\n\t\t\tthumbnail: '/assets/ts.jpg'\n\t\t}\n]);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Stripe Subscription in TypeScript\nDESCRIPTION: This server-side Express route handler, written in TypeScript, cancels a user's active Stripe subscription. It requires user authentication (`ensureAuthenticated` middleware), checks if the user has a stored Stripe subscription ID, uses the Stripe SDK to delete the subscription, updates the user's subscription status in local storage/database (`storage.updateUserSubscription`), and returns the cancelled subscription object. Includes basic error handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.post('/cancel-subscription', ensureAuthenticated, async (req, res) => {\n  try {\n    const user = req.user;\n    if (!user?.stripeSubscriptionId) return res.json({ message: 'No active subscription' });\n\n    const subscription = await stripe.subscriptions.del(user.stripeSubscriptionId);\n    await storage.updateUserSubscription(user.id, null, 'standard');\n    res.json(subscription);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Arguments and Handling Aliases in Node.js with Arg\nDESCRIPTION: Provides a complete example of specifying argument types, aliases, and how to parse command-line input with the arg package. It demonstrates mapping between long/short flag names, collecting repeated options, and managing positional parameters. The output object reflects all parsed values, including extra arguments under the _ key, and demonstrates the effect of declaring option types and aliases in the spec object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// hello.js\nconst arg = require('arg');\n\nconst args = arg({\n\t// Types\n\t'--help':    Boolean,\n\t'--version': Boolean,\n\t'--verbose': arg.COUNT,   // Counts the number of times --verbose is passed\n\t'--port':    Number,      // --port <number> or --port=<number>\n\t'--name':    String,      // --name <string> or --name=<string>\n\t'--tag':     [String],    // --tag <string> or --tag=<string>\n\n\t// Aliases\n\t'-v':        '--verbose',\n\t'-n':        '--name',    // -n <string>; result is stored in --name\n\t'--label':   '--name'     // --label <string> or --label=<string>;\n\t                              //     result is stored in --name\n});\n\nconsole.log(args);\n/*\n{\n\t_: [\"foo\", \"bar\", \"--foobar\"],\n\t'--port': 1234,\n\t'--verbose': 4,\n\t'--name': \"My name\",\n\t'--tag': [\"qux\", \"qix\"]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Extracting Constructor Parameters for Instance Creation - TypeScript\nDESCRIPTION: This snippet demonstrates retrieving constructor arguments using the ConstructorParameters utility in a generic caching class. The InstanceCache generic class receives a constructor and allows creation/retrieval of instances using extractable argument types. It uses calculateArgumentsHash for caching, and InstanceType to manage comprehensive type relationships. The dependencies include understanding of generics, class constructors, maps, and advanced TypeScript utilities. The getInstance method type-checks inputs and returns an instance, caching by argument hash, while developer must provide unique constructors for correct behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ArticleModel {\n\ttitle: string;\n\tcontent?: string;\n\n\tconstructor(title: string) {\n\t\tthis.title = title;\n\t}\n}\n\nclass InstanceCache<T extends (new (...args: any[]) => any)> {\n\tprivate ClassConstructor: T;\n\tprivate cache: Map<string, InstanceType<T>> = new Map();\n\n\tconstructor (ctr: T) {\n\t\tthis.ClassConstructor = ctr;\n\t}\n\n\tgetInstance (...args: ConstructorParameters<T>): InstanceType<T> {\n\t\tconst hash = this.calculateArgumentsHash(...args);\n\n\t\tconst existingInstance = this.cache.get(hash);\n\t\tif (existingInstance !== undefined) {\n\t\t\treturn existingInstance;\n\t\t}\n\n\t\treturn new this.ClassConstructor(...args);\n\t}\n\n\tprivate calculateArgumentsHash(...args: any[]): string {\n\t\t// Calculate hash.\n\t\treturn 'hash';\n\t}\n}\n\nconst articleCache = new InstanceCache(ArticleModel);\nconst amazonArticle = articleCache.getInstance('Amazon forests burining!');\n```\n\n----------------------------------------\n\nTITLE: Merging Objects with deepmerge in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the deepmerge library to deeply merge two JavaScript objects, including nested structures and arrays. The merge function creates a new object by combining enumerable properties from both source objects, leaving the originals unmodified. The output object contains merged key-value pairs, with array values concatenated by default. Requires the 'deepmerge' module (CommonJS).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst x = {\n\tfoo: { bar: 3 },\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}]\n}\n\nconst y = {\n\tfoo: { baz: 4 },\n\tquux: 5,\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}]\n}\n\nconst output = {\n\tfoo: {\n\t\tbar: 3,\n\t\tbaz: 4\n\t},\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}, {\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}],\n\tquux: 5\n}\n\nmerge(x, y) // => output\n```\n\n----------------------------------------\n\nTITLE: Example: Closing File Stream on Response Finish using 'on-finished'\nDESCRIPTION: Provides a complete Node.js HTTP server example demonstrating a common use case for `on-finished`. It streams a file (`package.json`) to the client. The `onFinished` function is used on the response object (`res`) to ensure that the file stream (`stream`) is properly destroyed (closed) using the `destroy` module after the response has finished sending, regardless of success or error, preventing potential file descriptor leaks. Dependencies include `http`, `fs`, `on-finished`, and `destroy` modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/on-finished/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar destroy = require('destroy')\nvar fs = require('fs')\nvar http = require('http')\nvar onFinished = require('on-finished')\n\nhttp.createServer(function onRequest (req, res) {\n  var stream = fs.createReadStream('package.json')\n  stream.pipe(res)\n  onFinished(res, function () {\n    destroy(stream)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using semver Functions in JavaScript - Node.js\nDESCRIPTION: Illustrates how to import the 'semver' library and use its core validation and comparison functions. Examples include version validation, cleaning, range satisfaction, version comparison (gt/lt), minimum version detection, and coercion. Requires the 'semver' npm package; valid version strings must conform to semantic versioning rules, and improper inputs return 'null' or equivalent fallback values as shown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\nsemver.minVersion('>=1.0.0') // '1.0.0'\nsemver.valid(semver.coerce('v2')) // '2.0.0'\nsemver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'\n```\n\n----------------------------------------\n\nTITLE: Managing Authentication State Using React Context (TypeScript TSX)\nDESCRIPTION: This snippet sets up an AuthContext using React's Context API in TypeScript, managing logged-in user state and asynchronous authentication flows with React Query-compatible APIs. It provides a custom hook and provider, handling registration, login, logout, and persistent auth checks via useEffect. The context exposes user state, loading status, and CRUD auth methods and expects the 'authApi' module as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/contexts/AuthContext.tsx\\nimport { createContext, useContext, useState, useEffect } from 'react'\\nimport { authApi } from '../lib/api'\\n\\ntype User = {\\n  id: number\\n  username: string\\n  email: string | null\\n  subscriptionTier: string\\n} | null\\n\\ntype AuthContextType = {\\n  user: User\\n  isLoading: boolean\\n  login: (username: string, password: string) => Promise<void>\\n  register: (userData: any) => Promise<void>\\n  logout: () => Promise<void>\\n}\\n\\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\\n\\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\\n  const [user, setUser] = useState<User>(null)\\n  const [isLoading, setIsLoading] = useState(true)\\n  \\n  useEffect(() => {\\n    // Check if user is already logged in\\n    authApi.getCurrentUser()\\n      .then(response => {\\n        setUser(response.data)\\n      })\\n      .catch(() => {\\n        setUser(null)\\n      })\\n      .finally(() => {\\n        setIsLoading(false)\\n      })\\n  }, [])\\n  \\n  const login = async (username: string, password: string) => {\\n    setIsLoading(true)\\n    try {\\n      const response = await authApi.login(username, password)\\n      setUser(response.data)\\n    } finally {\\n      setIsLoading(false)\\n    }\\n  }\\n  \\n  const register = async (userData: any) => {\\n    setIsLoading(true)\\n    try {\\n      await authApi.register(userData)\\n      // Auto-login after registration\\n      await login(userData.username, userData.password)\\n    } finally {\\n      setIsLoading(false)\\n    }\\n  }\\n  \\n  const logout = async () => {\\n    setIsLoading(true)\\n    try {\\n      await authApi.logout()\\n      setUser(null)\\n    } finally {\\n      setIsLoading(false)\\n    }\\n  }\\n  \\n  return (\\n    <AuthContext.Provider value={{ user, isLoading, login, register, logout }}>\\n      {children}\\n    </AuthContext.Provider>\\n  )\\n}\\n\\nexport function useAuth() {\\n  const context = useContext(AuthContext)\\n  if (context === undefined) {\\n    throw new Error('useAuth must be used within an AuthProvider')\\n  }\\n  return context\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Generic JSON and URL-Encoded Parsers with Express body-parser Middleware (JavaScript)\nDESCRIPTION: This example demonstrates how to add both a JSON and a URL-encoded parser to an Express app using the body-parser middleware as top-level middleware, affecting all incoming requests. The snippet requires the 'express' and 'body-parser' npm packages as dependencies. It shows how to use app.use() to register bodyParser.urlencoded() for URL-encoded parsing and bodyParser.json() for JSON parsing, followed by a response handler that echoes the parsed request body back to the client. The configuration parameter 'extended: false' disables rich objects/arrays for URL-encoded bodies. Expected input is HTTP requests with JSON or URL-encoded bodies; output is plaintext echo of parsed body. Limitation: all incoming bodies will be parsed regardless of route, which might not be optimal for all scenarios.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/body-parser/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// parse application/x-www-form-urlencoded\\napp.use(bodyParser.urlencoded({ extended: false }))\\n\\n// parse application/json\\napp.use(bodyParser.json())\\n\\napp.use(function (req, res) {\\n  res.setHeader('Content-Type', 'text/plain')\\n  res.write('you posted:\\\\n')\\n  res.end(JSON.stringify(req.body, null, 2))\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring importHelpers in tsconfig.json - JSON\nDESCRIPTION: Shows how to enable the importHelpers option in a TypeScript project's tsconfig.json. This option instructs the TypeScript compiler to import helper functions from tslib. No parameters beyond setting importHelpers to true; necessary for bundle optimization and reduced code size.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"importHelpers\": true\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Native HTTP Server - JavaScript\nDESCRIPTION: This example creates an HTTP server using Node.js core modules and uses 'serve-static' to serve files from the 'public/ftp' directory. If a matching file is not found or an error occurs, 'finalhandler' ensures the request is properly finalized. The 'index' option prioritizes 'index.html' and 'index.htm'. Listens on port 3000 by default and requires the 'serve-static' and 'finalhandler' modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/serve-static/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\n// Serve up public/ftp folder\nvar serve = serveStatic('public/ftp', { index: ['index.html', 'index.htm'] })\n\n// Create server\nvar server = http.createServer(function onRequest (req, res) {\n  serve(req, res, finalhandler(req, res))\n})\n\n// Listen\nserver.listen(3000)\n\n```\n\n----------------------------------------\n\nTITLE: Using pg-pool with async/await and co (Node.js)\nDESCRIPTION: Demonstrates integration of Pool with async/await and co for highly readable asynchronous code. Acquires a client, runs a query, handles errors, and ensures client release. Intended for codebases using ES2017+ syntax or generator-based flows. Dependencies: 'pg-pool', and optionally 'co'. Key parameters: SQL statement and values; outputs: query results printed to console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// with async/await\n(async () => {\n  var pool = new Pool()\n  var client = await pool.connect()\n  try {\n    var result = await client.query('select $1::text as name', ['brianc'])\n    console.log('hello from', result.rows[0])\n  } finally {\n    client.release()\n  }\n})().catch(e => console.error(e.message, e.stack))\n\n// with co\nco(function * () {\n  var client = yield pool.connect()\n  try {\n    var result = yield client.query('select $1::text as name', ['brianc'])\n    console.log('hello from', result.rows[0])\n  } finally {\n    client.release()\n  }\n}).catch(e => console.error(e.message, e.stack))\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure OpenAI Using OpenAI SDK in Node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure and instantiate the OpenAI SDK in a Node.js backend to communicate with Azure OpenAI endpoints. It sets the basePath to the Azure resource, uses an API key from environment variables, and prepares the SDK client for subsequent chat completion API calls. Required dependencies: the official 'openai' npm package and access to Azure OpenAI keys and endpoint. Key parameters are 'basePath' (your Azure OpenAI endpoint) and 'apiKey' (the Azure credential). The code is designed for use within an Express handler or any backend Node.js controller interacting with OpenAI.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { OpenAIApi, Configuration } = require(\"openai\");\\nconst config = new Configuration({\\n  basePath: process.env.AZURE_OPENAI_ENDPOINT, // e.g. \"https://<resource>.openai.azure.com/\",\\n  apiKey: process.env.AZURE_OPENAI_KEY\\n});\\n// Override the default basePath to include the API version and deployment name\\nconfig.baseOptions = { headers: { 'api-key': config.apiKey } }; \\nconst openai = new OpenAIApi(config);\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationOptions Type (TypeScript)\nDESCRIPTION: This TypeScript type definition outlines the structure of the `validationOptions` object passed to the `validate` function. It includes optional fields for customizing validation behavior, such as comments, conditions, deprecation handling, error reporting, example configuration, recursion control, and titles for messages. The `exampleConfig` is the only required field.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ValidationOptions = {\n  comment?: string;\n  condition?: (option: unknown, validOption: unknown) => boolean;\n  deprecate?: (\n    config: Record<string, unknown>,\n    option: string,\n    deprecatedOptions: DeprecatedOptions,\n    options: ValidationOptions,\n  ) => boolean;\n  deprecatedConfig?: DeprecatedOptions;\n  error?: (\n    option: string,\n    received: unknown,\n    defaultValue: unknown,\n    options: ValidationOptions,\n    path?: Array<string>,\n  ) => void;\n  exampleConfig: Record<string, unknown>;\n  recursive?: boolean;\n  recursiveBlacklist?: Array<string>;\n  recursiveDenylist?: Array<string>;\n  title?: Title;\n  unknown?: (\n    config: Record<string, unknown>,\n    exampleConfig: Record<string, unknown>,\n    option: string,\n    options: ValidationOptions,\n    path?: Array<string>,\n  ) => void;\n};\n\ntype Title = {\n  deprecation?: string;\n  error?: string;\n  warning?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Request Body in Express Middleware with raw-body in JavaScript\nDESCRIPTION: Demonstrates integrating raw-body as Express middleware to read the raw HTTP request body, validate it against size and encoding constraints, and attach the result as req.text. Dependencies include express, content-type, and raw-body; the code extracts charset from Content-Type, sets content-length, and applies a 1mb limit. Handles asynchronous parsing and forwards errors to the next middleware as necessary.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\nvar contentType = require('content-type')\\nvar express = require('express')\\nvar getRawBody = require('raw-body')\\n\\nvar app = express()\\n\\napp.use(function (req, res, next) {\\n  getRawBody(req, {\\n    length: req.headers['content-length'],\\n    limit: '1mb',\\n    encoding: contentType.parse(req).parameters.charset\\n  }, function (err, string) {\\n    if (err) return next(err)\\n    req.text = string\\n    next()\\n  })\\n})\\n\\n// now access req.text\\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing a Content-Disposition header string in Node.js\nDESCRIPTION: This code uses the `contentDisposition.parse()` method to parse a raw `Content-Disposition` header string, including extended parameters (like `filename*`). It returns an object containing the parsed `type` (e.g., 'attachment') and `parameters` (e.g., `{filename: \"€ rates.txt\"}`). Requires the `contentDisposition` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-disposition/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar disposition = contentDisposition.parse('attachment; filename=\"EURO rates.txt\"; filename*=UTF-8\\'\\'%e2%82%ac%20rates.txt')\n```\n\n----------------------------------------\n\nTITLE: Preloading dotenv with Configuration via Environment Variables (Bash)\nDESCRIPTION: Command illustrating setting `dotenv` configuration options via environment variables when using the `-r` preload flag. Options like `DOTENV_CONFIG_PATH` or `DOTENV_CONFIG_DEBUG` can be set in the shell environment before running the node command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ DOTENV_CONFIG_<OPTION>=value node -r dotenv/config your_script.js\n```\n\n----------------------------------------\n\nTITLE: Creating Immutable Properties with Readonly<T> in TypeScript\nDESCRIPTION: This snippet illustrates the use of `Readonly<T>`. A `Logger` class takes a `LoggerConfig` object in its constructor and stores it in a `config` property typed as `Readonly<LoggerConfig>`. This prevents compile-time assignment to the properties of `logger.config`. `Object.freeze` is also used to provide runtime immutability for the `config` object itself. Note that the original `config` variable passed to the constructor remains mutable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nenum LogLevel {\n\t\tOff,\n\t\tDebug,\n\t\tError,\n\t\tFatal\n};\n\ninterface LoggerConfig {\n\t\tname: string;\n\t\tlevel: LogLevel;\n}\n\nclass Logger {\n\t\tconfig: Readonly<LoggerConfig>;\n\n\t\tconstructor({name, level}: LoggerConfig) {\n\t\t\t\tthis.config = {name, level};\n\t\t\t\tObject.freeze(this.config);\n\t\t}\n}\n\nconst config: LoggerConfig = {\n\tname: 'MyApp',\n\tlevel: LogLevel.Debug\n};\n\nconst logger = new Logger(config);\n\n// TypeScript Error: cannot assign to read-only property.\nlogger.config.level = LogLevel.Error;\n\n// We are able to edit config variable as we please.\nconfig.level = LogLevel.Error;\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Natural Sort on Array (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates a simple case-sensitive natural sort on an array of strings using the `String.naturalCompare` method directly with the built-in `Array.prototype.sort()` function. The result shows the array sorted in natural order.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Simple case sensitive example\nvar a = [\"z1.doc\", \"z10.doc\", \"z17.doc\", \"z2.doc\", \"z23.doc\", \"z3.doc\"];\na.sort(String.naturalCompare);\n// [\"z1.doc\", \"z2.doc\", \"z3.doc\", \"z10.doc\", \"z17.doc\", \"z23.doc\"]\n```\n\n----------------------------------------\n\nTITLE: Using cross-spawn for Async and Sync Process Spawning in Node.js\nDESCRIPTION: Demonstrates how to use the `cross-spawn` module in Node.js as a drop-in replacement for the built-in `spawn` and `spawnSync`. It shows requiring the module and then using it to asynchronously spawn an `npm list` command and synchronously spawn the same command, both inheriting stdio.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cross-spawn/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst spawn = require('cross-spawn');\n\n// Spawn NPM asynchronously\nconst child = spawn('npm', ['list', '-g', '-depth', '0'], { stdio: 'inherit' });\n\n// Spawn NPM synchronously\nconst result = spawn.sync('npm', ['list', '-g', '-depth', '0'], { stdio: 'inherit' });\n```\n\n----------------------------------------\n\nTITLE: Finding the First Existing File with p-locate in JavaScript\nDESCRIPTION: This JavaScript example demonstrates using `p-locate` to asynchronously search an array of potential file paths (`files`). It requires the `path-exists` and `p-locate` modules. The `tester` function uses `path-exists` to check if a file exists on disk. `pLocate` returns a promise that resolves with the first file path found ('rainbow.png' in this example) or `undefined` if none satisfy the tester.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-locate/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pathExists = require('path-exists');\nconst pLocate = require('p-locate');\n\nconst files = [\n\t'unicorn.png',\n\t'rainbow.png', // Only this one actually exists on disk\n\t'pony.png'\n];\n\n(async () => {\n\tconst foundPath = await pLocate(files, file => pathExists(file));\n\n\tconsole.log(foundPath);\n\t//=> 'rainbow'\n})();\n```\n\n----------------------------------------\n\nTITLE: Strongly Typing Emittery Events in TypeScript\nDESCRIPTION: Shows how to use TypeScript generics with the Emittery class to enforce type safety for event names and their corresponding data payloads. By providing a type map `{ [eventName]: undefined | <eventArg> }`, TypeScript can validate `emit` calls and listener signatures, preventing type errors during compilation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport Emittery = require('emittery');\n\nconst emitter = new Emittery<\n\t// Pass `{[eventName]: undefined | <eventArg>}` as the first type argument for events that pass data to their listeners.\n\t// A value of `undefined` in this map means the event listeners should expect no data, and a type other than `undefined` means the listeners will receive one argument of that type.\n\t{\n\t\topen: string,\n\t\tclose: undefined\n\t}\n>();\n\n// Typechecks just fine because the data type for the `open` event is `string`.\nemitter.emit('open', 'foo\\n');\n\n// Typechecks just fine because `close` is present but points to undefined in the event data type map.\nemitter.emit('close');\n\n// TS compilation error because `1` isn't assignable to `string`.\nemitter.emit('open', 1);\n\n// TS compilation error because `other` isn't defined in the event data type map.\nemitter.emit('other');\n```\n\n----------------------------------------\n\nTITLE: Defining User and Authentication Models with Pydantic (Python)\nDESCRIPTION: Defines Pydantic models in `app/models/user.py` to structure and validate user-related data for API requests and responses. Includes `UserBase`, `UserCreate` (for registration payload), `UserLogin` (for login payload), `UserResponse` (for user data returned by the API), and `TokenResponse` (for the authentication token and user details upon successful login). `orm_mode = True` allows compatibility with ORM objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional, List, Dict, Any\n\nclass UserBase(BaseModel):\n    username: str\n    email: Optional[EmailStr] = None\n    \nclass UserCreate(UserBase):\n    password: str\n    eventFormat: Optional[str] = None\n    eventCode: Optional[str] = None\n    eventType: Optional[str] = None\n    instructionalArea: Optional[str] = None\n    \nclass UserLogin(BaseModel):\n    username: str\n    password: str\n    \nclass UserResponse(UserBase):\n    id: int\n    subscription_tier: str = Field(default=\"standard\")\n    ui_theme: str = Field(default=\"aquaBlue\")\n    color_scheme: str = Field(default=\"memphis\")\n    theme: str = Field(default=\"light\")\n    points: int = 0\n    \n    class Config:\n        orm_mode = True\n        \nclass TokenResponse(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n    user: UserResponse\n```\n\n----------------------------------------\n\nTITLE: Posting Data Using a File as Blob with node-fetch - JavaScript\nDESCRIPTION: This snippet illustrates how to post file data with node-fetch by creating a Blob from a local file and submitting it in the request body. It uses fileFromSync from node-fetch to create a blob, specifies a MIME type, and sends it via a POST request, then parses the JSON response. Dependencies include node-fetch v3+, and a readable input file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch, {\\n  Blob,\\n  blobFrom,\\n  blobFromSync,\\n  File,\\n  fileFrom,\\n  fileFromSync,\\n} from 'node-fetch'\\n\\nconst mimetype = 'text/plain'\\nconst blob = fileFromSync('./input.txt', mimetype)\\nconst url = 'https://httpbin.org/post'\\n\\nconst response = await fetch(url, { method: 'POST', body: blob })\\nconst data = await response.json()\\n\\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Parsing a Glob Pattern with picomatch.parse (JavaScript)\nDESCRIPTION: Demonstrates how to call the `picomatch.parse` method with a glob pattern (represented by the variable `pattern`) and optional options. This method parses the pattern and returns an object containing information about the pattern's structure and components needed for regex generation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\nconst result = picomatch.parse(pattern[, options]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle ORM Project Settings in TypeScript\nDESCRIPTION: This configuration snippet sets up Drizzle ORM project settings by exporting a default configuration object validated against the drizzle-kit schema. It imports dotenv to load environment variables, targets the PostgreSQL driver, and specifies paths for schema and migration output. It requires a DATABASE_URL in the environment, and the output is used by Drizzle ORM CLI tooling for generation and migrations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// drizzle.config.ts\nimport type { Config } from \"drizzle-kit\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport default {\n  schema: \"./shared/schema.ts\",\n  out: \"./drizzle\",\n  driver: \"pg\",\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL || \"\",\n  },\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Killing a Child Process with SIGTERM and SIGKILL - JavaScript\nDESCRIPTION: Exemplifies controlled shutdown of a child process: first a graceful SIGTERM is sent, and if the process doesn’t terminate within 2 seconds, it is forcibly killed with SIGKILL. The snippet utilizes Execa's .kill() method and forceKillAfterTimeout option. Useful for resource cleanup and handling stubborn processes; Node.js and Execa must be present.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst subprocess = execa('node');\n\nsetTimeout(() => {\n\tsubprocess.kill('SIGTERM', {\n\t\tforceKillAfterTimeout: 2000\n\t});\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Ensuring Export Default Async Function Yields FunctionDeclaration - Babylon - JavaScript\nDESCRIPTION: This snippet demonstrates the correct way to export an async function as default, parsing it as a FunctionDeclaration in Babylon, not a FunctionExpression. The snippet illustrates the change in AST node type resulting from this syntax. Dependencies include the latest Babylon parser with support for async functions. Input is an ES export default statement with an async function; output is proper parsing as a FunctionDeclaration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default async function bar() {};\n```\n\n----------------------------------------\n\nTITLE: Using Partial<T> for Optional Configuration Updates in TypeScript\nDESCRIPTION: This snippet demonstrates the `Partial<T>` utility type. It defines a `NodeConfig` interface and a `NodeAppBuilder` class. The `config` method accepts a `Partial<NodeConfig>`, allowing users to provide only the configuration properties they wish to change, making the configuration update process more flexible. It iterates through the provided partial config and updates the internal `configuration` object using the `updateConfig` helper method.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ninterface NodeConfig {\n\t\tappName: string;\n\t\tport: number;\n}\n\nclass NodeAppBuilder {\n\t\tprivate configuration: NodeConfig = {\n\t\t\t\tappName: 'NodeApp',\n\t\t\t\tport: 3000\n\t\t};\n\n\t\tprivate updateConfig<Key extends keyof NodeConfig>(key: Key, value: NodeConfig[Key]) {\n\t\t\t\tthis.configuration[key] = value;\n\t\t}\n\n\t\tconfig(config: Partial<NodeConfig>) {\n\t\t\t\ttype NodeConfigKey = keyof NodeConfig;\n\n\t\t\t\tfor (const key of Object.keys(config) as NodeConfigKey[]) {\n\t\t\t\t\t\tconst updateValue = config[key];\n\n\t\t\t\t\t\tif (updateValue === undefined) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.updateConfig(key, updateValue);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t}\n}\n\n// `Partial<NodeConfig>`` allows us to provide only a part of the\n// NodeConfig interface.\nnew NodeAppBuilder().config({appName: 'ToDoApp'});\n```\n\n----------------------------------------\n\nTITLE: Serving Directory Indexes with Custom Directory Listing - Node.js JavaScript\nDESCRIPTION: Creates an HTTP server that serves files from a directory using the 'send' library, disabling default directory index, and uses a custom handler to render directory listings as plain text. The 'directory' event invokes a user-defined function that lists directory contents and responds with a newline-separated list. Utilizes 'fs' for directory reading.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http')\nvar fs = require('fs')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Transfer arbitrary files from within /www/example.com/public/*\n// with a custom handler for directory listing\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, { index: false, root: '/www/public' })\n    .once('directory', directory)\n    .pipe(res)\n})\n\nserver.listen(3000)\n\n// Custom directory handler\nfunction directory (res, path) {\n  var stream = this\n\n  // redirect to trailing slash for consistent url\n  if (!stream.hasTrailingSlash()) {\n    return stream.redirect(path)\n  }\n\n  // get directory list\n  fs.readdir(path, function onReaddir (err, list) {\n    if (err) return stream.error(err)\n\n    // render an index for the directory\n    res.setHeader('Content-Type', 'text/plain; charset=UTF-8')\n    res.end(list.join('\\n') + '\\n')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Domain-Specific API and Health Endpoints - Express Routing TypeScript\nDESCRIPTION: Registers modular route handlers for AI, chat, and data management, as well as static endpoints for subscription tier information, DECA events data, and server health status. Assumes that imported route setup functions and data constants (e.g., SUBSCRIPTION_LIMITS) are defined elsewhere and available at runtime. This snippet should be attached to an Express application instance and will expose various endpoints for consuming clients. Requires only Express and the imported route/data modules as dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// server/routes.ts\nimport { Express } from \"express\";\nimport { setupAIRoutes } from \"./routes/aiRoutes\";\nimport { setupChatRoutes } from \"./routes/chatRoutes\";\nimport { setupDataRoutes } from \"./routes/dataRoutes\";\n\nexport function registerRoutes(app: Express) {\n  // API routes\n  setupAIRoutes(app);\n  setupChatRoutes(app);\n  setupDataRoutes(app);\n\n  // Subscription info endpoint\n  app.get(\"/api/subscription-tiers\", (req, res) => {\n    res.json(SUBSCRIPTION_LIMITS);\n  });\n\n  // DECA events data endpoint\n  app.get(\"/api/deca-events\", (req, res) => {\n    res.json({\n      categories: DECA_CATEGORIES,\n      events: DECA_EVENTS,\n      eventTypeGroups: EVENT_TYPE_GROUPS\n    });\n  });\n\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"healthy\" });\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Specialized Custom Error Inheriting from Another in JavaScript\nDESCRIPTION: This snippet shows how to define a new error type (SpecializedError) that inherits from a previously defined CustomError using makeError. The new error is then thrown with a parameter. This approach preserves the prototype chain and allows for logical error hierarchies. Required dependency: make-error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-error/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar SpecializedError = makeError(\"SpecializedError\", CustomError);\n\nthrow new SpecializedError(42);\n```\n\n----------------------------------------\n\nTITLE: Using isMatch for Matching (minimatch Migration) in Micromatch (JavaScript)\nDESCRIPTION: Illustrates how to replace minimatch with micromatch.isMatch for checking string matches. The snippet provides example checks, demonstrating output for matching and non-matching patterns. Dependencies include the installed micromatch module, and the output is boolean.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(micromatch.isMatch('foo', 'b*')); //=> false\n```\n\n----------------------------------------\n\nTITLE: Cloning Express.js Repo and Installing for Examples in Console\nDESCRIPTION: These two commands use git to clone the official Express.js repository and npm to install its dependencies. Git must be installed and accessible in your shell. The '--depth 1' parameter does a shallow clone for faster download. After cloning, you change into the 'express' directory and run 'npm install' to set up the environment for running project examples.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/expressjs/express.git --depth 1\n$ cd express\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Checking for Level Up in Gamification System (TypeScript)\nDESCRIPTION: This TypeScript function `checkLevelUp` determines if a user has enough experience points (XP) to advance to the next level. It calculates the required XP for the next level using `xpThresholdForLevel` and compares it to the user's current XP. If the threshold is met or exceeded, it increments the user's level directly within the passed `stats` object and returns `true`, otherwise `false`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nfunction checkLevelUp(stats: UserStats) {\n  const xpForNext = xpThresholdForLevel(stats.level + 1);\n  if (stats.xp >= xpForNext) {\n    stats.level += 1;\n    return true;\n  }\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Color Themes in TypeScript\nDESCRIPTION: Defines a TypeScript function `applyTheme` within `theme-controller.ts` to manage application-wide color themes based on DECA clusters (e.g., business, finance). It uses a `colorMap` to define primary, secondary, accent, and badge colors for each cluster and dynamically applies the selected colors to CSS custom properties (`--color-primary`, etc.) on the root element. It also handles toggling the 'dark' class for dark mode.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// (1) Add or refine a colorMap (for standard DECA clusters):\nexport function applyTheme(appearance: AppearanceSettings): AppearanceSettings {\n  // your existing code, e.g. reading localStorage or applying theme mode...\n  \n  const colorMap = {\n    business: {\n      primary: '#F59E0B', // amber-500\n      secondary: '#FCD34D', // amber-300\n      accent: '#B45309', // amber-800\n      badge: '#F59E0B'\n    },\n    finance: {\n      primary: '#10B981', // emerald-500\n      secondary: '#6EE7B7', // emerald-300\n      accent: '#047857', // emerald-800\n      badge: '#10B981'\n    },\n    hospitality: {\n      primary: '#3B82F6', // blue-500\n      secondary: '#93C5FD', // blue-300\n      accent: '#1E40AF', // blue-800\n      badge: '#3B82F6'\n    },\n    marketing: {\n      primary: '#EF4444', // red-500\n      secondary: '#FCA5A5', // red-300\n      accent: '#B91C1C', // red-800\n      badge: '#EF4444'\n    },\n    entrepreneurship: {\n      primary: '#6B7280', // gray-500\n      secondary: '#D1D5DB', // gray-300\n      accent: '#374151', // gray-800\n      badge: '#6B7280'\n    },\n    admin: {\n      primary: '#4F46E5', // indigo-600\n      secondary: '#A5B4FC', // indigo-300\n      accent: '#3730A3', // indigo-800\n      badge: '#4F46E5'\n    },\n    default: {\n      primary: '#06B6D4', // cyan-500\n      secondary: '#67E8F9', // cyan-300\n      accent: '#0E7490', // cyan-800\n      badge: '#06B6D4'\n    }\n  };\n\n  const colors = colorMap[appearance.colorScheme] || colorMap.default;\n\n  // Assign to CSS variables\n  document.documentElement.style.setProperty('--color-primary', colors.primary);\n  document.documentElement.style.setProperty('--color-secondary', colors.secondary);\n  document.documentElement.style.setProperty('--color-accent', colors.accent);\n  document.documentElement.style.setProperty('--color-badge', colors.badge);\n\n  // (2) if you also have dark mode logic, handle it here\n  if (appearance.theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n\n  return appearance;\n}\n```\n\n----------------------------------------\n\nTITLE: User Authentication with Passport & Express Sessions (TypeScript)\nDESCRIPTION: Sets up routes and utility functions for local authentication (register, login, logout), session validation, and password hashing using crypto.scrypt. Middleware secures endpoints by enforcing req.isAuthenticated(). Requires Node.js, Express, Passport.js, and an Express session store; assumes user data stored in a database.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Pseudocode outline:\n// passport.use(local-strategy)\n// POST /api/register - hashes password, creates user\n// POST /api/login - authenticates, creates session\n// POST /api/logout - terminates session\n// Middleware: req.isAuthenticated(), session store setup\n```\n\n----------------------------------------\n\nTITLE: Making an Azure OpenAI Chat Completion Request - JavaScript\nDESCRIPTION: Demonstrates how to issue a chat completion request to the Azure OpenAI service using the OpenAIClient library in JavaScript. This code requires dependencies such as the '@azure/openai' npm package and a properly initialized client object with valid environment variables (`AZURE_OPENAI_DEPLOYMENT`, etc.). The parameters include deployment name, an array of prompt objects (system and user), along with options like temperature and maxTokens. Expects a Promise-based response, with output containing the AI-generated results or error if the request fails. Proper environment setup is essential or the call will result in authentication/deployment errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/AZURE_OPENAI_INTEGRATION.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await client.getChatCompletions(\n  AZURE_OPENAI_DEPLOYMENT,\n  [\n    { role: \"system\", content: systemPrompt },\n    { role: \"user\", content: userPrompt }\n  ],\n  {\n    temperature: 0.7,\n    maxTokens: 2000\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Requesting a Chat Completion from Azure OpenAI Using Node.js (JavaScript)\nDESCRIPTION: This code demonstrates calling Azure OpenAI's chat completion endpoint using the configured OpenAI SDK client in Node.js. The model parameter can be set to your Azure deployment name, and messages consist of system and user prompts. The function returns the content of the top message in the response. Ensure that the endpoint, API key, correct deployment/model name, and API version are properly set. Used in backend logic to generate dynamic AI responses to user queries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst completion = await openai.createChatCompletion({\\n  model: \"gpt-4\", // or your deployment name\\n  messages: [ {role: \"system\", content: systemPrompt}, {role: \"user\", content: userPrompt} ]\\n});\\nconst result = completion.data.choices[0].message.content;\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with Drizzle ORM in TypeScript\nDESCRIPTION: This code provides an executable migration script that utilizes Drizzle ORM's migration and connection modules to run pending database migrations. It loads environment variables using dotenv, connects via pg.Pool, and handles process lifecycle with asynchronous control and logging. It expects a migrations folder and a properly configured DATABASE_URL, terminating on errors and closing connections gracefully.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// scripts/migrate.ts\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { migrate } from \"drizzle-orm/node-postgres/migrator\";\nimport { Pool } from \"pg\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nasync function main() {\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n  });\n\n  const db = drizzle(pool);\n\n  console.log(\"Running migrations...\");\n  await migrate(db, { migrationsFolder: \"drizzle\" });\n  console.log(\"Migrations completed!\");\n\n  await pool.end();\n}\n\nmain().catch((e) => {\n  console.error(\"Migration failed:\", e);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating DECA Roleplay Scenario using Azure OpenAI in TypeScript\nDESCRIPTION: This asynchronous function generates a DECA roleplay scenario by interacting with the Azure OpenAI service. It obtains a client using `getOpenAIClient`, constructs a detailed prompt based on provided instructional area and performance indicators, calls the chat completions API (`getChatCompletions`) requesting a JSON response format, and parses the generated scenario content. It uses environment variables for the deployment ID and falls back to 'gpt-4o-mini' if not set.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MASTER_PROMPT.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function generateRoleplay(params) {\n  const client = getOpenAIClient();\n  const deploymentId = process.env.AZURE_OPENAI_DEPLOYMENT || \"gpt-4o-mini\";\n  \n  const prompt = `\n  Create a realistic DECA roleplay scenario focusing on ${params.instructionalArea}\n  with these performance indicators: ${params.performanceIndicators.join(\", \")}.\n  ...\n  `;\n  \n  const response = await client.getChatCompletions(\n    deploymentId,\n    [\n      { role: \"system\", content: \"You are a DECA roleplay scenario generator...\" },\n      { role: \"user\", content: prompt }\n    ],\n    {\n      temperature: 0.7,\n      maxTokens: 800,\n      responseFormat: { type: \"json_object\" }\n    }\n  );\n  \n  return JSON.parse(response.choices[0].message?.content || \"{}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Documents to an Azure Search Index in JavaScript\nDESCRIPTION: This snippet demonstrates uploading multiple documents to an Azure Search index in a single batch operation using the `@azure/search-documents` library. A `SearchClient` is initialized, and the `uploadDocuments` method is called with an array of document objects (represented as empty JSON objects `{}` for brevity, but should match the index schema). The code iterates through the results to check the status of each uploaded document.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const uploadResult = await client.uploadDocuments([\n    // JSON objects matching the shape of the client's index\n    {},\n    {},\n    {},\n  ]);\n  for (const result of uploadResult.results) {\n    console.log(`Uploaded ${result.key}; succeeded? ${result.succeeded}`);\n  }\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching and Printing Plain Text or HTML - JavaScript\nDESCRIPTION: Shows how to fetch a web page (e.g., https://github.com/) as plain text or HTML and print its body to the console. Demonstrates using await for asynchronous requests and the response.text() method for decoding the HTTP body as a string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nconst response = await fetch('https://github.com/');\nconst body = await response.text();\n\nconsole.log(body);\n```\n\n----------------------------------------\n\nTITLE: Testing Azure OpenAI API Connectivity in Node.js/Express\nDESCRIPTION: This snippet demonstrates how to load essential Azure OpenAI authentication data from environment variables in a Node.js backend, then initialize and call the OpenAI API (configured for Azure) with a basic prompt to test connectivity. Dependencies include the openai npm package. Required secrets are accessed using process.env. The script expects AZURE_OPENAI_KEY, AZURE_OPENAI_ENDPOINT, and AZURE_OPENAI_MODEL to be set as environment variables in Replit. It tests the OpenAI integration by generating a trivial completion and outputs the response or error to validate access to Azure OpenAI.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { OpenAI } = require(\"openai\");\n\nconst openai = new OpenAI({\n  apiKey: process.env.AZURE_OPENAI_KEY, // API Key from environment\n  baseURL: process.env.AZURE_OPENAI_ENDPOINT, // Endpoint from environment\n  defaultModel: process.env.AZURE_OPENAI_MODEL // Model deployment name\n});\n\n(async () => {\n  try {\n    const response = await openai.completions.create({\n      model: process.env.AZURE_OPENAI_MODEL,\n      prompt: \"Say hello from Azure OpenAI API!\",\n      max_tokens: 10\n    });\n    console.log(response.choices[0].text);\n  } catch (err) {\n    console.error(\"Azure OpenAI API connection failed:\", err);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat and Feedback API Endpoints in Python using FastAPI\nDESCRIPTION: Defines FastAPI endpoints for chat functionalities: interacting with the 'Diego' assistant (`/diego`), getting feedback on roleplay responses (`/roleplay-feedback`), and explaining performance indicators (`/explain-pi`). It uses `APIRouter`, interfaces with `DecadeClient`, utilizes Pydantic models from `app.models.chat`, handles optional user authentication with `Depends(get_optional_user)`, and implements error handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, HTTPException, Depends, Query\nfrom typing import Optional\n\nfrom app.clients.decade_client import DecadeClient\nfrom app.models.chat import (\n    ChatMessage, ChatResponse,\n    RoleplayFeedbackRequest, RoleplayFeedbackResponse,\n    PIExplanationRequest, PIExplanationResponse\n)\nfrom app.core.security import get_optional_user\n\nrouter = APIRouter()\ndecade_client = DecadeClient()\n\n@router.post(\"/diego\", response_model=ChatResponse)\nasync def chat_with_diego(\n    message: ChatMessage,\n    current_user = Depends(get_optional_user)\n):\n    \"\"\"Chat with Diego, the dolphin assistant\"\"\"\n    try:\n        response = await decade_client.chat_with_diego(\n            message=message.message,\n            user_id=current_user.id if current_user else None\n        )\n        return response\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error chatting with Diego: {str(e)}\")\n\n@router.post(\"/roleplay-feedback\", response_model=RoleplayFeedbackResponse)\nasync def get_roleplay_feedback(\n    request: RoleplayFeedbackRequest,\n    current_user = Depends(get_optional_user)\n):\n    \"\"\"Get feedback on a roleplay response\"\"\"\n    if not current_user:\n        raise HTTPException(status_code=401, detail=\"Authentication required\")\n        \n    try:\n        feedback = await decade_client.get_roleplay_feedback(\n            user_id=current_user.id,\n            roleplay_id=request.roleplay_id,\n            user_response=request.user_response\n        )\n        return feedback\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error getting roleplay feedback: {str(e)}\")\n\n@router.post(\"/explain-pi\", response_model=PIExplanationResponse)\nasync def explain_performance_indicator(\n    request: PIExplanationRequest,\n    current_user = Depends(get_optional_user)\n):\n    \"\"\"Get an explanation for a performance indicator\"\"\"\n    try:\n        explanation = await decade_client.explain_pi(\n            indicator=request.indicator,\n            category=request.category,\n            user_id=current_user.id if current_user else None\n        )\n        return explanation\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error explaining performance indicator: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Parsing multipart/form-data and Other Body Types with node-fetch/Response - JavaScript\nDESCRIPTION: This code, for use in a Node.js HTTP server context, shows how to create a Response from an incoming request stream, extract form data fields, and work with uploaded file parts. It also demonstrates alternative consumption of the request as JSON, plain text, arrayBuffer, or blob. This exposes the versatility of node-fetch's Response methods for body parsing in server-side applications. Requires Node.js 'http' and 'node-fetch' dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport http from 'node:http'\\nimport { Response } from 'node-fetch'\\n\\nhttp.createServer(async function (req, res) {\\n  const formData = await new Response(req, {\\n    headers: req.headers // Pass along the boundary value\\n  }).formData()\\n  const allFields = [...formData]\\n\\n  const file = formData.get('uploaded-files')\\n  const arrayBuffer = await file.arrayBuffer()\\n  const text = await file.text()\\n  const whatwgReadableStream = file.stream()\\n\\n  // other was to consume the request could be to do:\\n  const json = await new Response(req).json()\\n  const text = await new Response(req).text()\\n  const arrayBuffer = await new Response(req).arrayBuffer()\\n  const blob = await new Response(req, {\\n    headers: req.headers // So that `type` inherits `Content-Type`\\n  }.blob()\\n})\n```\n\n----------------------------------------\n\nTITLE: Generating, Setting, and Validating Source Maps with @jridgewell/gen-mapping - TypeScript\nDESCRIPTION: Demonstrates using @jridgewell/gen-mapping to create a source map, associate original sources, add mappings for generated code, and validate outputs. Prerequisites: @jridgewell/gen-mapping and assertion library (e.g., Node's assert module). Parameters include mapping objects (with generated/original location, source, and name). Outputs include decoded and encoded source maps; uses assert.deepEqual for verification. Input is source file and mapping definitions; output is a validated source map. Constraints: lines start at 1, columns at 0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/gen-mapping/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenMapping, addMapping, setSourceContent, toEncodedMap, toDecodedMap } from '@jridgewell/gen-mapping';\n\nconst map = new GenMapping({\n  file: 'output.js',\n  sourceRoot: 'https://example.com/',\n});\n\nsetSourceContent(map, 'input.js', `function foo() {}`);\n\naddMapping(map, {\n  // Lines start at line 1, columns at column 0.\n  generated: { line: 1, column: 0 },\n  source: 'input.js',\n  original: { line: 1, column: 0 },\n});\n\naddMapping(map, {\n  generated: { line: 1, column: 9 },\n  source: 'input.js',\n  original: { line: 1, column: 9 },\n  name: 'foo',\n});\n\nassert.deepEqual(toDecodedMap(map), {\n  version: 3,\n  file: 'output.js',\n  names: ['foo'],\n  sourceRoot: 'https://example.com/',\n  sources: ['input.js'],\n  sourcesContent: ['function foo() {}'],\n  mappings: [\n    [ [0, 0, 0, 0], [9, 0, 0, 9, 0] ]\n  ],\n});\n\nassert.deepEqual(toEncodedMap(map), {\n  version: 3,\n  file: 'output.js',\n  names: ['foo'],\n  sourceRoot: 'https://example.com/',\n  sources: ['input.js'],\n  sourcesContent: ['function foo() {}'],\n  mappings: 'AAAA,SAASA',\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Negative Number Ranges with fill-range (JavaScript)\nDESCRIPTION: Demonstrates the capability of `fill-range` to generate ranges that include negative numbers. Input values are strings, and the output is an array of strings representing the numbers in the specified range. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ]\nconsole.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ]\n```\n\n----------------------------------------\n\nTITLE: Looking Up MIME Types with mime.lookup - JavaScript\nDESCRIPTION: This set of code examples uses 'mime.lookup' to retrieve the MIME content-type for various file names, extensions, or paths. The method returns the matching string or false if no type is found. The input parameter is typically a file extension, a filename or its extension, and its output is either the MIME type string or false for unknown types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-types/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmime.lookup('json') // 'application/json'\nmime.lookup('.md') // 'text/markdown'\nmime.lookup('file.html') // 'text/html'\nmime.lookup('folder/file.js') // 'application/javascript'\nmime.lookup('folder/.htaccess') // false\n\nmime.lookup('cats') // false\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend API Call Function in JavaScript\nDESCRIPTION: Provides an example of an asynchronous JavaScript function (`generateRoleplay`) designed to communicate with a backend API endpoint (`/api/generateRoleplay`). It uses the `fetch` API to send a POST request with JSON data (event type and PIs) and returns the parsed JSON response. This facilitates interaction between the React frontend and the backend logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function generateRoleplay(eventType, PIs) {\n  const res = await fetch('/api/generateRoleplay', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ eventType, performanceIndicators: PIs })\n  });\n  return res.json(); // assuming your endpoint returns JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Objects with merge.all in JavaScript\nDESCRIPTION: This snippet uses the merge.all method from deepmerge to merge an array of JavaScript objects into a single deeply merged result. Each object in the input array is combined in order, and nested structures are merged recursively. Requires deepmerge and works with any number of input objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foobar = { foo: { bar: 3 } }\nconst foobaz = { foo: { baz: 4 } }\nconst bar = { bar: 'yay!' }\n\nmerge.all([ foobar, foobaz, bar ]) // => { foo: { bar: 3, baz: 4 }, bar: 'yay!' }\n```\n\n----------------------------------------\n\nTITLE: Joining SourceNode Children in JavaScript\nDESCRIPTION: Shows the `join` prototype method, which concatenates the children of a `SourceNode` into a new `SourceNode`, inserting a specified separator string between each child. This is analogous to `Array.prototype.join` but operates on `SourceNode` children.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar lhs = new SourceNode(1, 2, \"a.rs\", \"my_copy\");\nvar operand = new SourceNode(3, 4, \"a.rs\", \"=\");\nvar rhs = new SourceNode(5, 6, \"a.rs\", \"orig.clone()\");\n\nvar node = new SourceNode(null, null, null, [ lhs, operand, rhs ]);\nvar joinedNode = node.join(\" \");\n```\n\n----------------------------------------\n\nTITLE: Tracking Gamification States and Triggering Achievements - TypeScript\nDESCRIPTION: This code example structures a gamification utility in TypeScript to manage states such as XP, levels, achievements, and streaks. It provides functions to add XP, check for level-ups, unlock achievements, and trigger animation effects (like confetti) upon user progression. Typically imported by user-interaction logic, it may depend on additional animation libraries for visuals.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Gamification state\\nexport const gamification = {\\n  xp: 0,\\n  level: 1,\\n  achievements: [],\\n  streak: 0,\\n};\\n\\nexport function addXP(amount: number) {\\n  gamification.xp += amount;\\n  if (gamification.xp >= requiredXP(gamification.level)) {\\n    gamification.level++;\\n    gamification.xp = 0;\\n    unlockAchievement('Level Up');\\n    showConfetti();\\n  }\\n}\\n\\nfunction requiredXP(level: number) {\\n  return 100 * level;\\n}\\n\\nfunction unlockAchievement(name: string) {\\n  gamification.achievements.push(name);\\n  // Trigger animation\\n}\\n\\nfunction showConfetti() {\\n  // Render confetti animation\\n}\n```\n\n----------------------------------------\n\nTITLE: Using parse-json for JSON Parsing with Enhanced Errors - JavaScript\nDESCRIPTION: This snippet shows how to use the parse-json Node.js package to parse a JSON string and handle parse errors with human-readable error messages. First, it demonstrates the built-in JSON.parse, which gives a less informative error. Then, parseJson provides a more detailed error with a code frame. The snippet also illustrates how to specify a filename in the error context, either directly or by setting the fileName property in a caught JSONError.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/parse-json/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parseJson = require('parse-json');\n\nconst json = '{\\n\\t\"foo\": true,\\n}';\n\n// Using built-in JSON.parse (throws generic error)\nJSON.parse(json);\n/*\nundefined:3\n}\n^\nSyntaxError: Unexpected token }\n*/\n\n// Using parseJson for improved error reporting\nparseJson(json);\n/*\nJSONError: Unexpected token } in JSON at position 16 while parsing near '{      \"foo\": true,}'\n\n  1 | {\n  2 |   \"foo\": true,\n> 3 | }\n    | ^\n*/\n\n// Parsing with filename for enhanced errors\nparseJson(json, 'foo.json');\n/*\nJSONError: Unexpected token } in JSON at position 16 while parsing near '{      \"foo\": true,}' in foo.json\n\n  1 | {\n  2 |   \"foo\": true,\n> 3 | }\n    | ^\n*/\n\n// Dynamically attaching filename to error after catching\ntry {\n\tparseJson(json);\n} catch (error) {\n\tif (error instanceof parseJson.JSONError) {\n\t\terror.fileName = 'foo.json';\n\t}\n\n\tthrow error;\n}\n/*\nJSONError: Unexpected token } in JSON at position 16 while parsing near '{      \"foo\": true,}' in foo.json\n\n  1 | {\n  2 |   \"foo\": true,\n> 3 | }\n    | ^\n*/\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple .env Files with dotenv.config() in JavaScript\nDESCRIPTION: Demonstrates loading environment variables from multiple files specified as an array in the `path` option of `dotenv.config()`. Files are parsed in order; the first value set wins unless `override` is true, in which case the last value wins.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nrequire('dotenv').config({ path: ['.env.local', '.env'] })\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Validation Policies with TypeSystem in TypeScript\nDESCRIPTION: This snippet shows how to modify the default validation behavior of the TypeSystem by setting global policy flags. `TypeSystem.AllowArrayObjects = true` permits arrays to be validated against object types, mimicking TypeScript's structural typing. `TypeSystem.AllowNaN = true` allows `NaN`, positive infinity, and negative infinity as valid number values, also aligning with TypeScript behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n// Allow arrays to validate as object types (default is false)\n//\n// const A: {} = [] - allowed in TS\n\nTypeSystem.AllowArrayObjects = true                  \n\n// Allow numeric values to be NaN or + or - Infinity (default is false)\n//\n// const A: number = NaN - allowed in TS\n\nTypeSystem.AllowNaN = true                      \n```\n\n----------------------------------------\n\nTITLE: Omitting a Property from Object Schema using TypeBox and JSON Schema - TypeScript/JSON\nDESCRIPTION: These snippets demonstrate how to omit (remove) a specified property from an object schema using TypeBox's Omit utility, TypeScript's Omit, and the resulting JSON Schema. Dependencies include TypeBox, TypeScript, and a JSON Schema validator. The 'x' property is removed; only 'y' is required in the output schema/type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Omit(\n  Type.Object({\n    x: Type.Number(),\n    y: Type.Number()\n  }), ['x']\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = Omit<{\n  x: number,\n  y: number\n}, 'x'>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"y\"],\n  \"properties\": {\n    \"y\": {\n      \"type\": \"number\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Keys to Types with Record<K, T> in TypeScript\nDESCRIPTION: This snippet defines a `MemberPosition` union type ('intern', 'developer', 'tech-lead') and an `Employee` interface. It uses `Record<MemberPosition, Employee[]>` to create the `team` object type. This ensures that the `team` object must have keys corresponding to each value in `MemberPosition`, and each key's value must be an array of `Employee` objects (`Employee[]`). It demonstrates how `Record<K, T>` enforces a structure where a specific set of keys (`K`) map to values of a specific type (`T`), ensuring all positions are initialized.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// Positions of employees in our company.\ntype MemberPosition = 'intern' | 'developer' | 'tech-lead';\n\n// Interface describing properties of a single employee.\ninterface Employee {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t\tyearsOfExperience: number;\n}\n\n// Create an object that has all possible `MemberPosition` values set as keys.\n// Those keys will store a collection of Employees of the same position.\nconst team: Record<MemberPosition, Employee[]> = {\n\t\tintern: [],\n\t\tdeveloper: [],\n\t\t'tech-lead': [],\n};\n\n// Our team has decided to help John with his dream of becoming Software Developer.\nteam.intern.push({\n\tfirstName: 'John',\n\tlastName: 'Doe',\n\tyearsOfExperience: 0\n});\n\n// `Record` forces you to initialize all of the property keys.\n// TypeScript Error: \"tech-lead\" property is missing\nconst teamEmpty: Record<MemberPosition, null> = {\n\t\tintern: null,\n\t\tdeveloper: null,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Sectioned Source Maps with AnyMap Helper - TypeScript\nDESCRIPTION: Shows how to use the AnyMap helper from @jridgewell/trace-mapping in TypeScript to handle sectioned (concatenated) source maps. Constructs an AnyMap instance with section arrays, then traces an original position using originalPositionFor to get corresponding mapping information. Dependencies: @jridgewell/trace-mapping, TypeScript, and assert modules. Inputs are sectioned source map definitions; output is the matched trace information.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/trace-mapping/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnyMap } from '@jridgewell/trace-mapping';\nconst fooOutput = 'foo';\nconst barOutput = 'bar';\nconst output = [fooOutput, barOutput].join('\\n');\n\nconst sectioned = new AnyMap({\n  version: 3,\n  sections: [\n    {\n      // 0-base line and column\n      offset: { line: 0, column: 0 },\n      // fooOutput's sourcemap\n      map: {\n        version: 3,\n        sources: ['foo.js'],\n        names: ['foo'],\n        mappings: 'AAAAA',\n      },\n    },\n    {\n      // barOutput's sourcemap will not affect the first line, only the second\n      offset: { line: 1, column: 0 },\n      map: {\n        version: 3,\n        sources: ['bar.js'],\n        names: ['bar'],\n        mappings: 'AAAAA',\n      },\n    },\n  ],\n});\n\nconst traced = originalPositionFor(sectioned, {\n  line: 2,\n  column: 0,\n});\n\nassert.deepEqual(traced, {\n  source: 'bar.js',\n  line: 1,\n  column: 0,\n  name: 'bar',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing postgres-bytea with npm in Shell\nDESCRIPTION: This snippet provides the command to install the 'postgres-bytea' package using npm in a shell environment. The command must be run in the terminal within your Node.js project directory. Ensure that you have npm installed before executing this command. The expected output is that 'postgres-bytea' will be added to your project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-bytea/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save postgres-bytea\n```\n\n----------------------------------------\n\nTITLE: Using the 'which' Library Programmatically in Javascript\nDESCRIPTION: Demonstrates various ways to use the 'which' Javascript library to find an executable (e.g., 'node') in the system PATH. It covers asynchronous usage with callbacks, Promises, synchronous usage with `which.sync()`, handling cases where the executable is not found (using `nothrow: true`), and overriding the default PATH environment variable using an options object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/which/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar which = require('which')\n\n// async usage\nwhich('node', function (er, resolvedPath) {\n  // er is returned if no \"node\" is found on the PATH\n  // if it is found, then the absolute path to the exec is returned\n})\n\n// or promise\nwhich('node').then(resolvedPath => { ... }).catch(er => { ... not found ... })\n\n// sync usage\n// throws if not found\nvar resolved = which.sync('node')\n\n// if nothrow option is used, returns null if not found\nresolved = which.sync('node', {nothrow: true})\n\n// Pass options to override the PATH and PATHEXT environment vars.\nwhich('node', { path: someOtherPath }, function (er, resolved) {\n  if (er)\n    throw er\n  console.log('found at %j', resolved)\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Variables with dotenv.parse() in JavaScript\nDESCRIPTION: Demonstrates using `dotenv.parse()` to parse a Buffer (containing environment variables in `KEY=value` format) into a JavaScript object. This function does not modify `process.env` and is useful for manual processing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n----------------------------------------\n\nTITLE: Using getChangedFilesForRoots with lastCommit/withAncestor Options in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates importing and using the `getChangedFilesForRoots` function from the `jest-changed-files` module. It calls the function with a root path array and options indicating to check changes since the last commit (`lastCommit: true`) and potentially including ancestor commits (`withAncestor: true`). The function returns a Promise that resolves with an object containing sets of changed files and repository paths.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-changed-files/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {getChangedFilesForRoots} from 'jest-changed-files';\n\ngetChangedFilesForRoots(['/path/to/test'], {\n  lastCommit: true,\n  withAncestor: true,\n}).then(files => {\n  /*\n  {\n    repos: [],\n    changedFiles: []\n  }\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Using require-directory Directly in app.js (JavaScript)\nDESCRIPTION: Shows an alternative pattern where the main application file (`app.js`) directly uses `require-directory` to load modules from a target directory (e.g., './routes'). This avoids the need for an intermediate `index.js` file within the target directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory');\nvar routes = requireDirectory(module, './routes');\n```\n\n----------------------------------------\n\nTITLE: Encoding URL for HTTP Redirect Header in Node.js (JavaScript)\nDESCRIPTION: This example shows a Node.js HTTP server that parses an incoming request URL, modifies it (changing host and protocol), formats it back into a string, and then uses 'encodeurl' to safely encode the resulting URL. This encoded URL is then used in the 'Location' header for an HTTP 301 redirect response. 'escape-html' is used to safely display the redirect URL in the response body.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/encodeurl/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\nvar url = require('url')\n\nhttp.createServer(function onRequest (req, res) {\n  // parse inbound url\n  var href = url.parse(req)\n\n  // set new host for redirect\n  href.host = 'localhost'\n  href.protocol = 'https:'\n  href.slashes = true\n\n  // create location header\n  var location = encodeUrl(url.format(href))\n\n  // create html message\n  var body = '<p>Redirecting to new site: ' + escapeHtml(location) + '</p>'\n\n  // send a 301\n  res.statusCode = 301\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\n  res.setHeader('Location', location)\n  res.end(body, 'utf-8')\n})\n```\n\n----------------------------------------\n\nTITLE: Yargs CLI Implementation in Deno - TypeScript\nDESCRIPTION: Demonstrates using Yargs in a Deno environment with TypeScript, showing how to import Yargs and define a 'download' command that accepts a variable list of file arguments. Dependencies are external URLs for Yargs and argument typings compatible with Deno. Inputs are command-line arguments (files); outputs are printed argument objects. Supports strict command parsing with demand for at least one command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport yargs from 'https://deno.land/x/yargs/deno.ts'\\nimport { Arguments } from 'https://deno.land/x/yargs/deno-types.ts'\\n\\nyargs(Deno.args)\\n  .command('download <files...>', 'download a list of files', (yargs: any) => {\\n    return yargs.positional('files', {\\n      describe: 'a list of files to do something with'\\n    })\\n  }, (argv: Arguments) => {\\n    console.info(argv)\\n  })\\n  .strictCommands()\\n  .demandCommand(1)\\n  .parse()\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser-Based Character Diffing with jsdiff\nDESCRIPTION: Client-side JavaScript code for use in a web browser. It initializes two strings, uses `JsDiff.diffChars` to compute the differences, and then iterates through the resulting change objects. For each part, it dynamically creates a `<span>` element, sets its text color based on whether the part was added (green), removed (red), or unchanged (grey), adds the text content, and appends the span to a document fragment. Finally, the entire fragment is appended to the HTML element with the ID 'display', visually rendering the diff. Requires the `diff.js` library and the corresponding HTML structure (a `<pre id=\"display\">` element).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nvar one = 'beep boop',\n    other = 'beep boob blah',\n    color = '',\n    span = null;\n\nvar diff = JsDiff.diffChars(one, other),\n    display = document.getElementById('display'),\n    fragment = document.createDocumentFragment();\n\ndiff.forEach(function(part){\n  // green for additions, red for deletions\n  // grey for common parts\n  color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  span = document.createElement('span');\n  span.style.color = color;\n  span.appendChild(document\n    .createTextNode(part.value));\n  fragment.appendChild(span);\n});\n\ndisplay.appendChild(fragment);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Prompt in JavaScript\nDESCRIPTION: Example configuration object for an interactive 'select' prompt using the `prompts` library. It defines the prompt type, name, message, available choices (including titles, descriptions, values, and disabled status), and sets the initially selected item by its index.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'select',\n  name: 'value',\n  message: 'Pick a color',\n  choices: [\n    { title: 'Red', description: 'This option has a description', value: '#ff0000' },\n    { title: 'Green', value: '#00ff00', disabled: true },\n    { title: 'Blue', value: '#0000ff' }\n  ],\n  initial: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Azure OpenAI API Connectivity with OpenAI SDK in JavaScript\nDESCRIPTION: This script demonstrates how to verify connectivity to Azure's OpenAI service from a Node.js backend using the openai package. It requires the OpenAI SDK pre-installed (npm install openai) and expects environment variables for the Azure OpenAI key, endpoint, and deployment name. The script sends a basic completion request to the deployed GPT model and logs the response, helping ensure credentials and networking are configured correctly. Inputs are fetched from process.env, and outputs are logged API responses.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Ensure you have installed the OpenAI SDK:\n// npm install openai\n\nconst { OpenAI } = require(\"openai\");\n\nconst openai = new OpenAI({\n  apiKey: process.env.AZURE_OPENAI_KEY,\n  baseURL: `${process.env.AZURE_OPENAI_ENDPOINT}/openai/deployments/${process.env.AZURE_OPENAI_MODEL}`,\n  // For Azure-specific config, may require adjustments\n});\n\nasync function testCompletion() {\n  try {\n    const result = await openai.completions.create({\n      prompt: \"Say hello world\",\n      max_tokens: 5\n    });\n    console.log(result);\n  } catch (err) {\n    console.error(\"Azure OpenAI test failed:\", err);\n  }\n}\n\ntestCompletion();\n```\n\n----------------------------------------\n\nTITLE: Initializing PWA Features with Workbox in TypeScript\nDESCRIPTION: This TypeScript function `initializePWA` sets up Progressive Web App functionalities. It checks for service worker support in the browser, initializes Workbox (`workbox-window`) to manage the service worker (`/sw.js`), listens for waiting service workers (indicating an update is ready), and registers the service worker. It also adds event listeners to handle the PWA installation prompt (`beforeinstallprompt`) and track successful installation (`appinstalled`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Workbox } from 'workbox-window';\n\nexport function initializePWA() {\n  if ('serviceWorker' in navigator) {\n    const wb = new Workbox('/sw.js');\n    wb.addEventListener('waiting', () => {\n      // new version waiting\n      // prompt user to update or auto update\n    });\n    wb.register();\n  }\n\n  window.addEventListener('beforeinstallprompt', e => {\n    e.preventDefault();\n    // store e for custom install UI\n  });\n\n  window.addEventListener('appinstalled', () => {\n    console.log('PWA installed');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI SDK in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to instantiate the official OpenAI Node SDK for communicating with Azure OpenAI, specifying the service endpoint and API key from environment variables. It sets up the necessary configuration so that further API calls use Azure’s deployment details, and customizes request headers for authentication. Dependencies: openai npm package. Required: AZURE_OPENAI_ENDPOINT and AZURE_OPENAI_KEY as environment variables. Outputs: an instance of OpenAIApi ready for Azure calls.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { OpenAIApi, Configuration } = require(\"openai\");\\nconst config = new Configuration({\\n  basePath: process.env.AZURE_OPENAI_ENDPOINT, // e.g. \"https://<resource>.openai.azure.com/\",\\n  apiKey: process.env.AZURE_OPENAI_KEY\\n});\\n// Override the default basePath to include the API version and deployment name\\nconfig.baseOptions = { headers: { 'api-key': config.apiKey } }; \\nconst openai = new OpenAIApi(config);\n```\n\n----------------------------------------\n\nTITLE: Converting Time Strings to Milliseconds using ms in JavaScript\nDESCRIPTION: Demonstrates how to use the ms package to convert various string-based time formats (e.g., '2 days', '10h', '1y') to their equivalent value in milliseconds. The ms function accepts strings representing durations and outputs their numerical representation in milliseconds. No special environment is required beyond installing the ms package; the snippets are suitable for both Node.js and browser contexts. Inputs are time strings, and outputs are numbers representing milliseconds.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ms/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\n```\n\n----------------------------------------\n\nTITLE: Blacklisting Modules with RegExp using require-directory (JavaScript)\nDESCRIPTION: Shows how to use the `exclude` option with a Regular Expression to prevent specific modules from being loaded. Files whose full path matches the RegExp (e.g., ending with `dontinclude.js`) will be excluded from the resulting hash.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  blacklist = /dontinclude\\.js$/,\n  hash = requireDirectory(module, {exclude: blacklist});\n```\n\n----------------------------------------\n\nTITLE: Animating Dolphin Profile in React with Framer Motion (TypeScript)\nDESCRIPTION: This snippet implements a SideProfileDolphin React functional component in TypeScript, using Framer Motion for advanced SVG-based animation. It combines animation variants for dolphin parts, handles prop-driven variant switching (e.g., between idle and swimming states), and renders gradients and filters for visual enhancements. Dependencies include React, framer-motion, and CSS (for classes like 'absolute'). Required parameters include 'dimensions', 'targetPosition', and animation control props like 'swimming'. The component outputs an animated SVG dolphin, optional overlay text, and a wave animation beneath.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648135014.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// SideProfileDolphinWithWave.tsx\nimport React from \"react\";\nimport { motion, Variants } from \"framer-motion\";\n\n// Define props for our composite component\ninterface SideProfileDolphinProps {\n  dimensions: { width: number; height: number };\n  targetPosition?: { x: number; y: number };\n  swimming?: boolean;\n  pointDirection?: 'left' | 'right';\n  onArrival?: () => void;\n  showTextBox?: boolean;\n}\n\n// Define animation variants for the dolphin container\nconst dolphinVariants: Variants = {\n  idle: {\n    x: 0,\n    y: 0,\n    transition: { type: \"spring\", stiffness: 50, damping: 10 }\n  },\n  swimming: (target: { x: number; y: number } | undefined) => ({\n    x: target ? target.x : 0,\n    y: target ? target.y : 0,\n    transition: { type: \"tween\", duration: 5, ease: \"easeInOut\" }\n  })\n};\n\n// Variants for individual dolphin parts (customize these as needed)\nconst bodyVariants: Variants = {\n  idle: { y: 0 },\n  swimming: { y: [0, -2, 0, 2, 0], transition: { repeat: Infinity, duration: 2, ease: \"easeInOut\" } }\n};\n\nconst tailVariants: Variants = {\n  idle: { rotate: 0 },\n  swimming: { rotate: [0, 8, 0, -5, 0], transition: { repeat: Infinity, duration: 1.2, ease: \"easeInOut\" } }\n};\n\nconst finVariants: Variants = {\n  idle: { rotate: 0 },\n  swimming: { rotate: [0, 10, 0, -10, 0], transition: { repeat: Infinity, duration: 1.8, ease: \"easeInOut\" } }\n};\n\n// The main composite component\nexport default function SideProfileDolphin({\n  dimensions,\n  targetPosition,\n  swimming = false,\n  pointDirection = 'right',\n  onArrival,\n  showTextBox = false\n}: SideProfileDolphinProps) {\n  return (\n    <motion.div\n      initial=\"idle\"\n      animate={swimming ? \"swimming\" : \"idle\"}\n      custom={targetPosition}\n      variants={dolphinVariants}\n      onAnimationComplete={() => { if (onArrival) onArrival(); }}\n      style={{ width: dimensions.width, height: dimensions.height, position: \"relative\" }}\n    >\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        viewBox=\"0 0 120 80\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <defs>\n          <linearGradient id=\"sideBodyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#4FD1C5\" />\n            <stop offset=\"50%\" stopColor=\"#35A0DE\" />\n            <stop offset=\"100%\" stopColor=\"#3182CE\" />\n          </linearGradient>\n          <linearGradient id=\"sideBellyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"#79C3F1\" />\n            <stop offset=\"100%\" stopColor=\"#A7D8FF\" />\n          </linearGradient>\n          <linearGradient id=\"sideFinGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#2D8BC7\" />\n            <stop offset=\"100%\" stopColor=\"#1A5F9E\" />\n          </linearGradient>\n          <filter id=\"sideGlow\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feGaussianBlur stdDeviation=\"0.8\" result=\"blur\" />\n            <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n          </filter>\n          <filter id=\"shineEffect\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feGaussianBlur stdDeviation=\"0.5\" result=\"blur\" />\n            <feSpecularLighting in=\"blur\" specularConstant=\"1\" specularExponent=\"20\" lightingColor=\"white\">\n              <fePointLight x=\"50\" y=\"10\" z=\"40\" />\n            </feSpecularLighting>\n            <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\" />\n          </filter>\n        </defs>\n        \n        {/* Enhanced dolphin body with fluid curvature and undulating motion */}\n        <motion.path\n          d=\"M95 35C95 46 85 60 70 65C55 70 40 65 30 60C20 55 10 45 5 40C0 35 0 30 5 25C10 20 20 15 30 10C40 5 55 5 70 10C85 15 95 24 95 35Z\"\n          fill=\"url(#sideBodyGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={bodyVariants}\n        />\n        \n        {/* Enhanced belly with gradient and subtle shine */}\n        <path\n          d=\"M60 40C45 45 30 45 20 40C10 35 15 30 25 25C35 20 50 20 65 25C80 30 75 35 60 40Z\"\n          fill=\"url(#sideBellyGradient)\"\n          filter=\"url(#shineEffect)\"\n        />\n        \n        {/* Enhanced dorsal fin with better shape and subtle steering motion */}\n        <motion.path\n          d=\"M60 10C63 6 68 5 70 11C70 15 65 17 60 14C58 12 58 10 60 10Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          animate={{\n            rotate: [0, 3, 0, -3, 0],\n            originX: 0.5,\n            originY: 1,\n            transition: { repeat: Infinity, duration: 1.5, ease: \"easeInOut\" }\n          }}\n        />\n        \n        {/* Enhanced tail with fluid side-to-side propulsion */}\n        <motion.path\n          d=\"M10 35C5 32 0 36 0 40C0 44 5 47 10 45C15 43 15 37 10 35Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={tailVariants}\n        />\n        \n        {/* Enhanced pectoral flipper with steering adjustments */}\n        <motion.path\n          d=\"M45 45C40 48 35 53 40 55C45 57 50 50 45 45Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={finVariants}\n        />\n        \n        {/* Enhanced eye with depth and shine */}\n        <circle cx=\"85\" cy=\"30\" r=\"4\" fill=\"white\" />\n        <circle cx=\"85\" cy=\"30\" r=\"2\" fill=\"black\" />\n        <circle cx=\"84\" cy=\"29\" r=\"0.8\" fill=\"white\" filter=\"url(#sideGlow)\" />\n        \n        {/* Enhanced smile with glow effect */}\n        <path\n          d=\"M85 40C85 40 80 43 75 40\"\n          stroke=\"white\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          filter=\"url(#sideGlow)\"\n        />\n      </svg>\n      {showTextBox && (\n        <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 mt-2 px-3 py-1 bg-white rounded shadow text-sm\">\n          I'm swimming over!\n        </div>\n      )}\n      <WaveTransition targetPosition={targetPosition} />\n    </motion.div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using `safeDump` with Custom Styles and Sorting\nDESCRIPTION: Provides an example of calling `js-yaml.safeDump` with an options object. It demonstrates how to customize the output format for null values using the `styles` option and how to sort the keys of the output object using the `sortKeys` option.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsafeDump (object, {\n  'styles': {\n    '!!null': 'canonical' // dump null as ~\n  },\n  'sortKeys': true        // sort object keys\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Server Port Binding in Node.js - JavaScript\nDESCRIPTION: Demonstrates setting up an Express server in Node.js to listen on all interfaces (0.0.0.0), making it accessible beyond localhost. This is especially important for environments like Docker or remote servers. Dependencies: 'express' package must be installed. The 'PORT' variable uses an environment variable or defaults to 3000. This ensures incoming connections from outside localhost are accepted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-To-address-the-issue-of-the-app-not-running-and-to-fix-any-errors-reported-in-the-Console-I-will-fo-1742642783064.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, '0.0.0.0', () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Accept Header with Curl for Node.js Server - Shell\nDESCRIPTION: This shell snippet shows how to use curl to send an HTTP request with an Accept header to test the Node.js server's content negotiation. The -I flag requests headers only, and the -H flag sets \"Accept: text/html\". Requires curl to be installed and the server running on localhost:3000.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/accepts/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I -H'Accept: text/html' http://localhost:3000/\n```\n\n----------------------------------------\n\nTITLE: Duplicate Named Export Error with Destructuring in JavaScript\nDESCRIPTION: Demonstrates a JavaScript parsing error that occurs when destructuring exports would result in duplicate identifiers being exported. No external dependencies. Inputs include two export statements, one declaring 'foo' as a function and another as a destructured property; outputs an error pointing to the duplicate export.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_30\n\nLANGUAGE: js\nCODE:\n```\n// `foo` has already been exported. Exported identifiers must be unique. (2:20)\\nexport function foo() {};\\nexport const { a: [{foo}] } = bar;\n```\n\n----------------------------------------\n\nTITLE: Using minimatch for Basic Glob Matching in JavaScript\nDESCRIPTION: Demonstrates importing the `minimatch` library and using its main function to test if a string (file path) matches a glob pattern. It shows examples of successful and failed matches, and how to enable debug output using the options object. Dependencies include the `minimatch` npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/minimatch/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar minimatch = require(\"minimatch\")\n\nminimatch(\"bar.foo\", \"*.foo\") // true!\nminimatch(\"bar.foo\", \"*.bar\") // false!\nminimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy!\n```\n\n----------------------------------------\n\nTITLE: Comparing Multiline Strings with diffStringsUnified() in JavaScript\nDESCRIPTION: Illustrates using `diffStringsUnified` to compare two multiline strings character-by-character. It uses `diff-sequences` for comparison, cleans up small common substrings (chaff), and formats the output using `chalk` similar to GitHub's unified diff view, highlighting changes within lines. Requires `jest-diff`. Input: two strings (`a`, `b`). Output: a unified difference string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 'common\\nchanged from';\nconst b = 'common\\nchanged to';\n\nconst difference = diffStringsUnified(a, b);\n```\n\n----------------------------------------\n\nTITLE: Querying Facets with Azure Search Client in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the @azure/search-documents JavaScript SDK to execute a search query with facet configurations, allowing results to be refined and bucketed by custom properties (such as category and rooms/baseRate). It uses facet syntax to specify count and interval options, and prints the resulting facet distribution for client-side consumption. Requires the @azure/search-documents package, valid endpoint and indexName strings, and an Azure API key. Inputs are the search query (e.g., 'WiFi') and facet configurations; outputs are the facet breakdowns in the searchResults.facets property.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const searchResults = await client.search(\"WiFi\", {\n    facets: [\"category,count:3,sort:count\", \"rooms/baseRate,interval:100\"],\n  });\n  console.log(searchResults.facets);\n  // Output will look like:\n  // {\n  //   'rooms/baseRate': [\n  //     { count: 16, value: 0 },\n  //     { count: 17, value: 100 },\n  //     { count: 17, value: 200 }\n  //   ],\n  //   category: [\n  //     { count: 5, value: 'Budget' },\n  //     { count: 5, value: 'Luxury' },\n  //     { count: 5, value: 'Resort and Spa' }\n  //   ]\n  // }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters for RegExp using escape-string-regexp - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates importing the escape-string-regexp package and using it to escape special characters in a string before embedding it into a regular expression. The main functionality is encapsulated in the escapeStringRegexp function, which takes an input string, escapes any characters that would otherwise be interpreted specially by RegExp, and returns the escaped result. This ensures safe construction of dynamic regular expressions, preventing errors or unintended behavior. The dependencies are Node.js and the escape-string-regexp package. The expected input is the string to be escaped; the output is its escaped form, suitable for use in RegExp constructors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escape-string-regexp/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst escapeStringRegexp = require('escape-string-regexp');\n\nconst escapedString = escapeStringRegexp('How much $ for a 🦄?');\n//=> 'How much \\\\$ for a 🦄\\\\?'\n\nnew RegExp(escapedString);\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Long-Form Time Strings using ms in JavaScript\nDESCRIPTION: Shows how to use the ms package with the 'long: true' option to output long-form human-readable strings (e.g., '2 minutes') instead of abbreviated formats. The ms function receives a millisecond value and an option object, returning a descriptive string such as '10 hours'. This feature is useful for improving clarity in user interfaces by avoiding ambiguous abbreviations; output is always a full-text string representation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ms/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n----------------------------------------\n\nTITLE: Using jest-worker with Bound Workers Based on Filename in JavaScript\nDESCRIPTION: This script (`parent.js`) demonstrates bound worker usage with `jest-worker`. It initializes a worker farm using a `computeWorkerKey` function that maps tasks to workers based on the filename parameter provided to the worker methods. This ensures that subsequent calls to `transform` with the same filename are routed to the same worker, allowing the worker to potentially use cached results. The example calls `transform` twice for the same file, expecting the second call to benefit from the worker's cache.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {Worker as JestWorker} from 'jest-worker';\n\nasync function main() {\n  const myWorker = new JestWorker(require.resolve('./worker'), {\n    computeWorkerKey: (method, filename) => filename,\n  });\n\n  // Transform the given file, within the first available worker.\n  console.log(await myWorker.transform('/tmp/foo.js'));\n\n  // Wait a bit.\n  await sleep(10000);\n\n  // Transform the same file again. Will immediately return because the\n  // transformed file is cached in the worker, and `computeWorkerKey` ensures\n  // the same worker that processed the file the first time will process it now.\n  console.log(await myWorker.transform('/tmp/foo.js'));\n\n  const {forceExited} = await myWorker.end();\n  if (forceExited) {\n    console.error('Workers failed to exit gracefully');\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Wave Transition in React with Framer Motion (TypeScript)\nDESCRIPTION: This snippet defines a WaveTransition functional component in TypeScript, rendering an animated SVG wave below the dolphin using Framer Motion for smooth entrance, exit, and infinite motion effects. It creates a visually pleasing wave background with elements like gradient fills and animated bubbles. The component receives an optional target position and is styled absolutely to align beneath its parent; dependencies include React, framer-motion, and CSS for positioning.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648135014.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// WaveTransition Component\ninterface WaveTransitionProps {\n  targetPosition?: { x: number; y: number };\n}\n\nfunction WaveTransition({ targetPosition }: WaveTransitionProps) {\n  // Variants for entrance/exit wave animation\n  const waveVariants: Variants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 1, ease: \"easeOut\" }\n    },\n    exit: { opacity: 0, y: -20, transition: { duration: 1, ease: \"easeIn\" } }\n  };\n\n  return (\n    <motion.svg\n      viewBox=\"0 0 120 20\"\n      className=\"absolute bottom-0 left-0 w-full\"\n      variants={waveVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"exit\"\n    >\n      <defs>\n        <linearGradient id=\"waveGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n          <stop offset=\"0%\" stopColor=\"#4FD1C5\" />\n          <stop offset=\"50%\" stopColor=\"#35A0DE\" />\n          <stop offset=\"100%\" stopColor=\"#3182CE\" />\n        </linearGradient>\n      </defs>\n      {/* A curved wave path */}\n      <motion.path\n        d=\"M0,10 C30,0 90,20 120,10 L120,20 L0,20 Z\"\n        fill=\"url(#waveGradient)\"\n        animate={{\n          x: [0, -10, 0, 10, 0],\n          transition: { repeat: Infinity, duration: 6, ease: \"easeInOut\" }\n        }}\n      />\n      {/* Optional bubbles/splashes */}\n      <motion.circle\n        cx=\"30\"\n        cy=\"5\"\n        r=\"1.5\"\n        fill=\"white\"\n        opacity=\"0.8\"\n        animate={{\n          y: [0, -5, 0],\n          opacity: [0.8, 0.2, 0.8],\n          transition: { repeat: Infinity, duration: 3, ease: \"easeInOut\" }\n        }}\n      />\n      <motion.circle\n        cx=\"80\"\n        cy=\"8\"\n        r=\"1\"\n        fill=\"white\"\n        opacity=\"0.7\"\n        animate={{\n          y: [0, -3, 0],\n          opacity: [0.7, 0.3, 0.7],\n          transition: { repeat: Infinity, duration: 2.5, ease: \"easeInOut\" }\n        }}\n      />\n    </motion.svg>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure After Creation - Shell\nDESCRIPTION: Displays the directory tree structure after running the JavaScript snippet that creates directories. This command helps verify the effects of using make-dir, showing the nested directories now exist.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ tree\n.\n└── unicorn\n    └── rainbow\n        └── cake\n```\n\n----------------------------------------\n\nTITLE: Using arg.COUNT and [Boolean] for Flag Counting in Node.js\nDESCRIPTION: Explains the use of arg.COUNT and array types ([Boolean]) for counting the number of times a flag is set. The snippet parses repeated flags and differentiates between counting and value accumulation. Requires importing the arg package and passing a suitable spec. The parsed output object shows counts and arrays corresponding to usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst arg = require('arg');\n\nconst argv = ['-AAAA', '-BBBB'];\n\nconst args = arg({\n\t'-A': arg.COUNT,\n\t'-B': [Boolean]\n}, {\n\targv\n});\n\nconsole.log(args);\n/*\n{\n\t_: [],\n\t'-A': 4,\n\t'-B': [true, true, true, true]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Examples of typeis(request, types) Function (JavaScript)\nDESCRIPTION: Illustrates various ways to use the `typeis(req, types)` function to check if a request's Content-Type (assumed 'application/json' here) matches different type patterns, including extensions, full mime types, and wildcards. It returns the matching type string or `false` if no match is found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-is/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// req.headers.content-type = 'application/json'\n\ntypeis(req, ['json']) // => 'json'\ntypeis(req, ['html', 'json']) // => 'json'\ntypeis(req, ['application/*']) // => 'application/json'\ntypeis(req, ['application/json']) // => 'application/json'\n\ntypeis(req, ['html']) // => false\n```\n\n----------------------------------------\n\nTITLE: Capturing Matches from a String using a Glob Pattern with Micromatch in JavaScript\nDESCRIPTION: Demonstrates the `mm.capture` function from the 'micromatch' library. It attempts to match an input string against a glob pattern and returns an array of captured segments if successful. Requires the 'micromatch' library. Takes a glob pattern string, an input string, and optional options. Returns an array of captures or `null` if the pattern doesn't match.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst mm = require('micromatch');\n// mm.capture(pattern, string[, options]);\n\nconsole.log(mm.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(mm.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n----------------------------------------\n\nTITLE: Converting Time Strings to Milliseconds using ms in JavaScript\nDESCRIPTION: Shows how to use the `ms` JavaScript function to convert time duration strings (e.g., '2 days', '1d', '10h', '1y', '-3 days') into the corresponding number of milliseconds. Handles various units (days, hours, minutes, seconds, years) and also plain numbers representing milliseconds.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/ms/readme.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n```\n\n----------------------------------------\n\nTITLE: Converting V8 Coverage to Istanbul with v8-to-istanbul in Node.js\nDESCRIPTION: Demonstrates the complete process for converting a V8 coverage report to Istanbul's format using the v8-to-istanbul Node.js package. It requires the package as a dependency, expects the path to the instrumented source file, and assumes V8 coverage data as input. The converter loads the file asynchronously, applies coverage data using applyCoverage, and finally outputs the Istanbul-compatible JSON result. Key parameters include the file path and an array of V8 coverage objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-to-istanbul/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst v8toIstanbul = require('v8-to-istanbul')\\n// the path to the original source-file is required, as its contents are\\n// used during the conversion algorithm.\\nconst converter = v8toIstanbul('./path-to-instrumented-file.js')\\nawait converter.load() // this is required due to async file reading.\\n// provide an array of coverage information in v8 format.\\nconverter.applyCoverage([\\n  {\\n    \"functionName\": \"\",\\n    \"ranges\": [\\n      {\\n        \"startOffset\": 0,\\n        \"endOffset\": 520,\\n        \"count\": 1\\n      }\\n    ],\\n    \"isBlockCoverage\": true\\n  },\\n  // ...\\n])\\n// output coverage information in a form that can\\n// be consumed by Istanbul.\\nconsole.info(JSON.stringify(converter.toIstanbul()))\n```\n\n----------------------------------------\n\nTITLE: Integrating Animation Engine with React Client - TypeScript (animation-engine.ts)\nDESCRIPTION: This snippet places animation-engine.ts in client/src/lib/ and replaces old animation invocations with a new playAnimation API. The exposed playAnimation function supports parameters such as { type: 'confetti' }, simplifying celebratory or gamification effects on user actions. Dependencies may include an animation library or custom logic; ensure cleanup to avoid memory leaks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// animation-engine.ts\nexport function playAnimation(options: { type: string }): void {\n  if (options.type === 'confetti') {\n    // trigger confetti animation (implementation-specific)\n    // ...\n  }\n  // add other animation types as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Imports with resolve-pkg-maps (TypeScript)\nDESCRIPTION: This TypeScript code shows how to resolve import specifiers defined in package.json's `imports` field, using the resolve-pkg-maps library. The `resolveImports` function resolves conditionally mapped entries (e.g., '#supports-color') to the correct file path based on the supplied conditions array, such as ['node']. The output is an array of resolved paths. This snippet assumes access to a `getPackageJson` function and the resolve-pkg-maps package, with key input parameters being the imports object, the import specifier, and a list of resolution conditions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveImports } from 'resolve-pkg-maps'\n\nconst resolvedPaths: string[] = resolveImports(\n    getPackageJson('.').imports,\n    '#supports-color',\n    ['node', ...otherConditions]\n)\n// => ['./index.js']\n```\n\n----------------------------------------\n\nTITLE: Using findRepos to Locate Git/Hg Repositories in JavaScript\nDESCRIPTION: This JavaScript example illustrates the use of the `findRepos` function from the `jest-changed-files` module. It takes an array of root paths as input and returns a Promise. The Promise resolves to an object containing two sets: one for Git repository paths (`git`) and one for Mercurial repository paths (`hg`) found within the specified roots.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-changed-files/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {findRepos} from 'jest-changed-files';\n\nfindRepos(['/path/to/test']).then(repos => {\n  /*\n  {\n    git: Set<Path>,\n    hg: Set<Path>\n  }\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects Ignoring Indentation with diffLinesUnified2() in JavaScript\nDESCRIPTION: Demonstrates using `diffLinesUnified2` along with `pretty-format` to compare two JavaScript objects while ignoring differences solely due to indentation. It compares line-by-line representations serialized *without* indentation (`aLinesCompare`, `bLinesCompare`) using `diff-sequences` but displays the corresponding lines from representations serialized *with* indentation (`aLinesDisplay`, `bLinesDisplay`) using `chalk`. Requires `jest-diff` and `pretty-format`. Input: four arrays of strings representing display and comparison versions of the objects. Output: a unified difference string showing semantic differences.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {format} from 'pretty-format';\n\nconst a = {\n  text: 'Ignore indentation in serialized object',\n  time: '2019-09-19T12:34:56.000Z',\n  type: 'CREATE_ITEM',\n};\nconst b = {\n  payload: {\n    text: 'Ignore indentation in serialized object',\n    time: '2019-09-19T12:34:56.000Z',\n  },\n  type: 'CREATE_ITEM',\n};\n\nconst difference = diffLinesUnified2(\n  // serialize with indentation to display lines\n  format(a).split('\\n'),\n  format(b).split('\\n'),\n  // serialize without indentation to compare lines\n  format(a, {indent: 0}).split('\\n'),\n  format(b, {indent: 0}).split('\\n'),\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Keyword Color and Styles with Chalk in JavaScript\nDESCRIPTION: This snippet shows how to apply a foreground color using CSS color keywords (e.g., 'orange') and optionally chain style methods like `.bold()` using the Chalk library. Requires the 'chalk' npm package. The input is a keyword string and the text to style; the output is an ANSI-escaped string for terminal display.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.keyword('orange')('Some orange text')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.keyword('orange').bold('Orange!')\n```\n\n----------------------------------------\n\nTITLE: Proxying WebSocket Connections with https-proxy-agent in TypeScript\nDESCRIPTION: Shows how to establish a WebSocket connection through an HTTP proxy using `HttpsProxyAgent` and the `ws` library. An agent is created pointing to the proxy server, and this agent is provided in the `WebSocket` constructor options. Event handlers for 'open' and 'message' demonstrate sending data and closing the connection upon receiving a message.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport WebSocket from 'ws';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\nconst agent = new HttpsProxyAgent('http://168.63.76.32:3128');\nconst socket = new WebSocket('ws://echo.websocket.org', { agent });\n\nsocket.on('open', function () {\n  console.log('\"open\" event!');\n  socket.send('hello world');\n});\n\nsocket.on('message', function (data, flags) {\n  console.log('\"message\" event! %j %j', data, flags);\n  socket.close();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Visualization Utilities with Chart.js/Recharts - TypeScript\nDESCRIPTION: Provides utility functions for formatting dates, calculating chart dimensions, and generating color scales specifically for use with visualization libraries like Chart.js and Recharts. Requires Chart.js, Recharts or compatible visualization libraries to be installed. Key parameters include input datasets, date objects, and custom color palette definitions. Outputs processed data, formatted date strings, computed chart sizes, and color arrays. Constraints may arise from browser rendering limits and the visualization library’s API.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Utilities for formatting dates, calculating chart dimensions, and generating color scales for data visualization\n// Dependencies: Chart.js or Recharts must be installed in the project\n\nexport function formatDate(date: Date, format: string): string {\n  // Format date as per required visualization display\n  // ...\n  return '...';\n}\n\nexport function calculateChartDimensions(containerWidth: number, containerHeight: number) {\n  // Calculate and return appropriate chart dimensions\n  // ...\n  return { width: containerWidth, height: containerHeight };\n}\n\nexport function generateColorScale(count: number, baseColors: string[]): string[] {\n  // Generate an array of color hexes/scales based on input count\n  // ...\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Parameter Interface in TypeScript\nDESCRIPTION: Defines the `AnimationParams` TypeScript interface used to configure animations within the DecA(I)de system. It specifies optional properties like animation type, duration, particle details (count, type, colors, spread, velocity, decay), timing function, target HTML element, and an optional message overlay, allowing for flexible animation customization. Defaults are expected to be merged with user-provided overrides using a helper function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-consolidated-requirements-and-implementation-blueprint-for-building-out-the-DecA-I-de-Ani-1742703787972.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AnimationParams {\n  type?: AnimationType;\n  duration?: number;\n  particleCount?: number;\n  particleType?: ParticleType;\n  colors?: string[];\n  colorScheme?: ColorScheme;\n  spread?: number;\n  startVelocity?: number;\n  decay?: number;\n  timingFunction?: TimingFunction;\n  element?: HTMLElement; // Target element for DOM-based animations\n  message?: string;      // Optional message overlay with animation\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI SDK Configuration in Python\nDESCRIPTION: Configures the `openai` Python library for use with Azure OpenAI. It imports the necessary library ('openai', 'os'), sets `openai.api_type` to \"azure\", and assigns the Azure endpoint URL (`AZURE_OPENAI_ENDPOINT`), API version, and API key (`AZURE_OPENAI_KEY`) using values retrieved from environment variables via `os.getenv`. This setup prepares the library to route API calls to the specified Azure resource.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742626139423.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport openai\nimport os\nopenai.api_type = \"azure\"\nopenai.api_base = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\nopenai.api_version = \"2024-05-01-preview\"  # or the version your resource requires\nopenai.api_key = os.getenv(\"AZURE_OPENAI_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Theme for React (JavaScript)\nDESCRIPTION: This JavaScript snippet configures the Tailwind CSS framework to scan relevant source directories, define a custom theme with extended color palettes and fonts, and prepare for project-specific animation utilities. Required for integrating Tailwind into a Vite-React-TS setup, its output adapts styles according to the given file structure and conventions. 'plugins' is left empty, inviting future extensions with additional Tailwind plugins as needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// client/tailwind.config.js\\n/** @type {import('tailwindcss').Config} */\\nexport default {\\n  content: [\\n    \\\"./index.html\\\",\\n    \\\"./src/**/*.{js,ts,jsx,tsx}\\\",\\n  ],\\n  theme: {\\n    extend: {\\n      colors: {\\n        primary: {\\n          DEFAULT: '#0ea5e9',\\n          50: '#f0f9ff',\\n          // ... other shades\\n        },\\n        // Other color definitions\\n      },\\n      fontFamily: {\\n        sans: ['Inter', 'sans-serif'],\\n        display: ['Lexend', 'sans-serif'],\\n      },\\n      animation: {\\n        // Custom animations\\n      },\\n    },\\n  },\\n  plugins: [],\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Themed CSS Variables Dynamically (TypeScript)\nDESCRIPTION: The `applyTheme` function in `client/src/lib/theme-controller.ts` takes `AppearanceSettings` and updates CSS custom properties (`--color-*`) on the document's root element based on the selected `colorScheme`. It defines color palettes for different DECA themes (business, finance, etc.) and a default theme, applying the corresponding colors. It also adjusts contrast and light/dark variables based on the dark mode status.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function applyTheme(appearance: AppearanceSettings): AppearanceSettings {\n  const colorSystems = {\n    business: {\n      primary: '#F59E0B', // amber-500\n      secondary: '#FCD34D', // amber-300\n      accent: '#B45309', // amber-800\n      light: '#FFFBEB',\n      medium: '#FEF3C7',\n      dark: '#D97706',\n      contrast: '#1F2937',\n      badge: '#F59E0B'\n    },\n    finance: {\n      primary: '#10B981', // emerald-500\n      secondary: '#6EE7B7', // emerald-300\n      accent: '#047857', // emerald-800\n      light: '#ECFDF5',\n      medium: '#D1FAE5',\n      dark: '#059669',\n      contrast: '#1F2937',\n      badge: '#10B981'\n    },\n    // ... (other themes: hospitality, marketing, entrepreneurship, admin)\n    default: {\n      primary: '#06B6D4', // cyan-500\n      secondary: '#67E8F9', // cyan-300\n      accent: '#0E7490', // cyan-800\n      light: '#ECFEFF',\n      medium: '#CFFAFE',\n      dark: '#0891B2',\n      contrast: '#1F2937',\n      badge: '#06B6D4'\n    }\n  };\n\n  const colors = colorSystems[appearance.colorScheme as keyof typeof colorSystems] || colorSystems.default;\n  \n  Object.entries(colors).forEach(([key, value]) => {\n    document.documentElement.style.setProperty(`--color-${key}`, value);\n  });\n  \n  // For dark mode, override contrast if needed.\n  // Assuming 'isDarkMode' is defined elsewhere, e.g., based on system preference or user setting\n  const isDarkMode = document.documentElement.classList.contains('dark'); // Example check\n  if (isDarkMode) {\n    document.documentElement.style.setProperty('--color-light', colors.dark);\n    document.documentElement.style.setProperty('--color-contrast', '#ffffff');\n  } else {\n    // Ensure light mode uses the theme's intended light color\n    document.documentElement.style.setProperty('--color-light', colors.light); \n    document.documentElement.style.setProperty('--color-contrast', colors.contrast);\n  }\n  \n  return appearance;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Theme Color Mapping in TypeScript\nDESCRIPTION: Demonstrates how to dynamically apply theme colors based on `appearance.colorScheme` within an `applyTheme` function in TypeScript. It defines a `colorMap` object containing different color palettes (business, finance, default) and sets CSS custom properties (`--color-primary`, `--color-secondary`, etc.) on the document's root element using `document.documentElement.style.setProperty`. This ensures UI elements reflect the selected color scheme.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// In theme-controller.ts\nexport function applyTheme(appearance: AppearanceSettings): AppearanceSettings {\n  // existing code...\n  \n  const colorMap = {\n    business: {\n      primary: '#F59E0B', // amber-500\n      secondary: '#FCD34D', // amber-300\n      accent: '#B45309',    // amber-800\n      badge: '#F59E0B'\n    },\n    finance: {\n      primary: '#10B981', // emerald-500\n      secondary: '#6EE7B7', // emerald-300\n      accent: '#047857',    // emerald-800\n      badge: '#10B981'\n    },\n    // ...other clusters...\n    default: {\n      primary: '#06B6D4', // cyan-500\n      secondary: '#67E8F9', // cyan-300\n      accent: '#0E7490',    // cyan-800\n      badge: '#06B6D4'\n    }\n  };\n  \n  const colors = colorMap[appearance.colorScheme] || colorMap.default;\n  \n  document.documentElement.style.setProperty('--color-primary', colors.primary);\n  document.documentElement.style.setProperty('--color-secondary', colors.secondary);\n  document.documentElement.style.setProperty('--color-accent', colors.accent);\n  document.documentElement.style.setProperty('--color-badge', colors.badge);\n  \n  // rest of existing code...\n  return appearance;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Engine Types and Functions in TypeScript\nDESCRIPTION: Defines TypeScript types (`AnimationType`, `ParticleType`, `AnimationParams`) for the DecA(I)de animation system. Includes helper functions (`mergeParams`, `getColors`) for parameter handling and color selection. Implements `playConfetti` and `playAchievementAnimation` using the `canvas-confetti` library, allowing customization through parameters. The `playAchievementAnimation` also adds CSS class manipulation for overlay effects and message display, requiring corresponding CSS definitions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-solution-for-your-DecA-I-de-Animation-System-that-meets-the-requirements-an-1742703767915.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// animation-engine.ts\n\nimport confetti from 'canvas-confetti';\nimport { motion, Variants } from 'framer-motion';\n\n// Animation types from your existing code structure\nexport type AnimationType =\n  | 'confetti' | 'stars' | 'circles' | 'fireworks' | 'random'\n  | 'sparkles' | 'bubbles' | 'waves' | 'dolphin' | 'tropical'\n  | 'achievement' | 'celebrate' | 'success' | 'levelUp' | 'rewardUnlocked'\n  | 'rainbowTrail' | 'glitter' | 'paperPlane' | 'floatingNumbers'\n  | 'flipCard' | 'rotate3D' | 'bounce' | 'fadeScale' | 'slideSwing'\n  | 'popIn' | 'rollOut' | 'blinkFade' | 'wiggle' | 'tremble'\n  | 'heartbeat' | 'pulse' | 'flash' | 'tada' | 'jello' | 'rubber'\n  | 'swing' | 'wobble' | 'shake' | 'flip' | 'flipInX' | 'flipInY'\n  | 'fadeIn' | 'fadeInUp' | 'fadeInDown' | 'zoomIn' | 'jackInTheBox'\n  | 'lightSpeedIn' | 'rotateIn' | 'rollIn' | 'slideInUp' | 'slideInDown';\n\nexport type ParticleType =\n  | 'circle' | 'star' | 'square' | 'triangle' | 'diamond' | 'heart'\n  | 'dolphin' | 'palm' | 'wave' | 'coin' | 'note' | 'check' | 'trophy'\n  | 'sparkle' | 'dot' | 'line' | 'ring' | 'spiral' | 'zigzag';\n\nexport interface AnimationParams {\n  type?: AnimationType;\n  duration?: number;\n  particleCount?: number;\n  particleType?: ParticleType;\n  colors?: string[];\n  colorScheme?: string; // or a custom type for your color schemes\n  spread?: number;\n  startVelocity?: number;\n  decay?: number;\n  timingFunction?: string; // e.g., 'easeInOut'\n  element?: HTMLElement; // Target element for DOM-based animations\n  message?: string; // Optional message to display with animation\n}\n\n// Helper: merge default parameters with provided ones\nconst mergeParams = (params: AnimationParams): AnimationParams => {\n  const defaults: AnimationParams = {\n    duration: 2,\n    particleCount: 100,\n    spread: 60,\n    startVelocity: 45,\n    decay: 0.9,\n    timingFunction: 'easeInOut',\n    type: 'confetti'\n  };\n  return { ...defaults, ...params };\n};\n\n// Helper: determine colors to use\nconst getColors = (params: AnimationParams): string[] => {\n  if (params.colors && params.colors.length > 0) return params.colors;\n  switch (params.colorScheme) {\n    case 'vibrant':\n      return ['#4FD1C5', '#35A0DE', '#3182CE'];\n    default:\n      return ['#4FD1C5', '#35A0DE', '#3182CE'];\n  }\n};\n\n// Existing confetti function for particle effects\nexport const playConfetti = (params: AnimationParams = {}): void => {\n  const mergedParams = mergeParams(params);\n  const colors = getColors(mergedParams);\n  confetti({\n    particleCount: mergedParams.particleCount,\n    spread: mergedParams.spread,\n    startVelocity: mergedParams.startVelocity,\n    decay: mergedParams.decay,\n    gravity: 1,\n    ticks: 200,\n    origin: { y: 0.6 },\n    colors: colors,\n  });\n};\n\n// Immediate fix: Implement playAchievementAnimation\nexport const playAchievementAnimation = (params: AnimationParams = {}): void => {\n  // Merge default achievement parameters\n  const mergedParams = mergeParams({\n    ...params,\n    type: 'achievement',\n    particleCount: 150,\n    spread: 100,\n    startVelocity: 55,\n    duration: 2.5,\n  });\n\n  // Trigger confetti with enhanced parameters for achievements\n  confetti({\n    particleCount: mergedParams.particleCount,\n    spread: mergedParams.spread,\n    startVelocity: mergedParams.startVelocity,\n    decay: mergedParams.decay,\n    gravity: 1.2,\n    ticks: 250,\n    origin: { y: 0.5 },\n    colors: getColors(mergedParams),\n  });\n\n  // If an element is provided, apply a custom overlay animation (e.g., trophy floating effect)\n  if (mergedParams.element) {\n    mergedParams.element.classList.add(\"animate-achievement-overlay\");\n    // Remove the animation class after the duration completes\n    setTimeout(() => {\n      mergedParams.element.classList.remove(\"animate-achievement-overlay\");\n    }, mergedParams.duration * 1000);\n  }\n\n  // Optionally, display a temporary achievement message if provided\n  if (mergedParams.message && mergedParams.element) {\n    const messageEl = document.createElement(\"div\");\n    messageEl.className = \"achievement-message\";\n    messageEl.textContent = mergedParams.message;\n    mergedParams.element.appendChild(messageEl);\n    setTimeout(() => {\n      if (mergedParams.element.contains(messageEl)) {\n        mergedParams.element.removeChild(messageEl);\n      }\n    }, mergedParams.duration * 1000);\n  }\n};\n\n// Additional animation functions for other types can be implemented similarly...\n```\n\n----------------------------------------\n\nTITLE: Initializing body-parser Middleware in Node.js (JavaScript)\nDESCRIPTION: Shows how to import the body-parser package into your Node.js application using require(), typically for use with Express or similar frameworks. This initialization step is required before you can invoke any of the parser functions such as bodyParser.json(), bodyParser.urlencoded(), etc. Make sure body-parser is installed in your project; 'bodyParser' in this context is an object exposing various middleware factory methods. No input is required for this statement; it simply exposes the setup object for further use.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/body-parser/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar bodyParser = require('body-parser')\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Dynamic Prompt Example - Prompts Library - JavaScript\nDESCRIPTION: Demonstrates an advanced prompt configuration where the next question is conditionally shown based on the previous answer. The 'type' property is a function that determines, at runtime, if the prompt should appear. Uses prior collected answers and dynamic messages, supporting branching flows in interactive CLI sessions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: prev => prev > 3 ? 'confirm' : null,\n  name: 'confirm',\n  message: (prev, values) => `Please confirm that you eat ${values.dish} times ${prev} a day?`\n}\n```\n\n----------------------------------------\n\nTITLE: Global Exception Handling for Logging - FastAPI Python\nDESCRIPTION: Defines a FastAPI exception handler that captures all uncaught exceptions, logs them with traceback via the logger, and returns a generic 500 Internal Server Error JSON response. This ensures that errors are systematically logged and users are shielded from internal stack traces. Relies on FastAPI's @app.exception_handler mechanism, the logger instance, and the 'JSONResponse' object. Intended for robust observability and reliable error reporting in backend services.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n@app.exception_handler(Exception)\\nasync def global_exception_handler(request: Request, exc: Exception):\\n    \"\"\"Log all unhandled exceptions\"\"\"\\n    logger.error(f\\\"Unhandled exception: {str(exc)}\\\", exc_info=True)\\n    return JSONResponse(\\n        status_code=500,\\n        content={\\\"detail\\\": \\\"Internal server error\\\"}\\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Test Cases using each.test in JavaScript\nDESCRIPTION: This snippet shows how to define multiple parameterized tests using 'each.test', specifying a dynamic test title that injects parameter values. It requires a test runner like Jest and the 'each' utility. Each test computes the sum of 'a' and 'b' and checks if it equals 'expected'. The framework expects a table of input values and produces pass/fail results per row.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Access API Endpoints in Python using FastAPI\nDESCRIPTION: Sets up FastAPI GET endpoints for retrieving various application data: DECA events (`/deca-events`), subscription tiers (`/subscription-tiers`), user-specific performance indicators (`/performance-indicators`), user statistics (`/user/stats`), and user activities (`/user/activities`). It uses `APIRouter`, calls methods on `DecadeClient` for data fetching, secures user-specific endpoints with `Depends(validate_session)`, and includes error handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, HTTPException, Depends, Query\nfrom typing import Optional, List, Dict, Any\n\nfrom app.clients.decade_client import DecadeClient\nfrom app.core.security import validate_session, get_optional_user\n\nrouter = APIRouter()\ndecade_client = DecadeClient()\n\n@router.get(\"/deca-events\")\nasync def get_deca_events():\n    \"\"\"Get all DECA events data\"\"\"\n    try:\n        events = await decade_client.get_deca_events()\n        return events\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error fetching DECA events: {str(e)}\")\n\n@router.get(\"/subscription-tiers\")\nasync def get_subscription_tiers():\n    \"\"\"Get all available subscription tiers\"\"\"\n    try:\n        tiers = await decade_client.get_subscription_tiers()\n        return tiers\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error fetching subscription tiers: {str(e)}\")\n\n@router.get(\"/performance-indicators\")\nasync def get_performance_indicators(\n    category: Optional[str] = None,\n    current_user = Depends(validate_session)\n):\n    \"\"\"Get performance indicators for the current user\"\"\"\n    try:\n        indicators = await decade_client.get_performance_indicators(\n            user_id=current_user.id,\n            category=category\n        )\n        return indicators\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error fetching performance indicators: {str(e)}\")\n\n@router.get(\"/user/stats\")\nasync def get_user_stats(current_user = Depends(validate_session)):\n    \"\"\"Get statistics for the current user\"\"\"\n    try:\n        stats = await decade_client.get_user_stats(user_id=current_user.id)\n        return stats\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error fetching user stats: {str(e)}\")\n\n@router.get(\"/user/activities\")\nasync def get_user_activities(current_user = Depends(validate_session)):\n    \"\"\"Get learning activities for the current user\"\"\"\n    try:\n        activities = await decade_client.get_user_activities(user_id=current_user.id)\n        return activities\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error fetching user activities: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Name-Tracking HTTP Server Using cookie and Node.js Core (JavaScript)\nDESCRIPTION: Implements an HTTP server that utilizes the 'cookie' package alongside 'escape-html', the Node.js 'http' and 'url' modules to track a user's name via cookies. It parses incoming query strings and cookies, sets a new 'name' cookie as needed (with HttpOnly and maxAge options), and serves an HTML form or greets a returning user. Dependencies: 'cookie', 'escape-html', and Node.js core modules. Inputs are HTTP requests possibly containing cookies and query parameters; outputs are HTTP responses with optional 'Set-Cookie' and HTML content. Demonstrates integration and practical usage of cookie management in a web server.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar cookie = require('cookie');\nvar escapeHtml = require('escape-html');\nvar http = require('http');\nvar url = require('url');\n\nfunction onRequest(req, res) {\n  // Parse the query string\n  var query = url.parse(req.url, true, true).query;\n\n  if (query && query.name) {\n    // Set a new cookie with the name\n    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 7 // 1 week\n    }));\n\n    // Redirect back after setting cookie\n    res.statusCode = 302;\n    res.setHeader('Location', req.headers.referer || '/');\n    res.end();\n    return;\n  }\n\n  // Parse the cookies on the request\n  var cookies = cookie.parse(req.headers.cookie || '');\n\n  // Get the visitor name set in the cookie\n  var name = cookies.name;\n\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n\n  if (name) {\n    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');\n  } else {\n    res.write('<p>Hello, new visitor!</p>');\n  }\n\n  res.write('<form method=\"GET\">');\n  res.write('<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">');\n  res.end('</form>');\n}\n\nhttp.createServer(onRequest).listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Defining an API Helper Function in React (JavaScript)\nDESCRIPTION: Provides an example of an asynchronous JavaScript function (`generateRoleplay`) designed to interact with a backend API endpoint. It sends a POST request to `/api/generateRoleplay` with specified parameters (`eventType`, `PIs`) in the request body and expects a JSON response containing the generated roleplay data. This pattern helps encapsulate API interactions within the frontend application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function generateRoleplay(eventType, PIs) {\n  const res = await fetch('/api/generateRoleplay', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ eventType, performanceIndicators: PIs })\n  });\n  return res.json(); // assuming your endpoint returns JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Pool Clients using Promises (Node.js)\nDESCRIPTION: Illustrates how to acquire a client from a Pool instance using promises, execute a query, and properly release the client regardless of query outcome. Demonstrates idiomatic async resource management—important for preventing resource leaks in production. Dependencies: 'pg-pool'. Inputs: any SQL statement and parameters; outputs: client query results via promise resolution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\npool.connect().then(client => {\n  client.query('select $1::text as name', ['pg-pool']).then(res => {\n    client.release()\n    console.log('hello from', res.rows[0].name)\n  })\n  .catch(e => {\n    client.release()\n    console.error('query error', e.message, e.stack)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Async Iterators for Event Consumption in Emittery - JavaScript\nDESCRIPTION: Displays how to use the events() API to create an async iterator, buffering emissions and allowing async consumption of events. Covers direct .next() usage and for-await style async iteration. Dependencies: emittery, async/await support, Node.js. Input: event names, output: buffered event data in sequence, with .return() to revoke subscription.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\nconst iterator = emitter.events('🦄');\n\nemitter.emit('🦄', '🌈1'); // Buffered\nemitter.emit('🦄', '🌈2'); // Buffered\n\niterator\n\t.next()\n\t.then(({value, done}) => {\n\t\t// done === false\n\t\t// value === '🌈1'\n\t\treturn iterator.next();\n\t})\n\t.then(({value, done}) => {\n\t\t// done === false\n\t\t// value === '🌈2'\n\t\t// Revoke subscription\n\t\treturn iterator.return();\n\t})\n\t.then(({done}) => {\n\t\t// done === true\n\t});\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv package using npm (Bash)\nDESCRIPTION: Command to install the `dotenv` Node.js package locally as a project dependency using npm. This is the recommended way to add `dotenv` to your project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install locally (recommended)\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Defining Standard TypeBox and JSON Types - TypeScript\nDESCRIPTION: This table represents the syntax and schema definitions for various basic types in TypeBox, alongside their equivalent TypeScript and JSON Schema forms. It demonstrates how each TypeBox function call (e.g., Type.Number()) corresponds to both a static TypeScript type and a JSON Schema Draft 6 specification. Users must have the TypeBox library and a TypeScript project; no external JSON Schema validator is required for static definitions, but runtime validation would require an implementation. The snippet includes syntax for any, unknown, string, number, integer, boolean, null, literal, array, object, tuple, enum, and key-of patterns, specifying the object shapes and constraints for each.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\\n│                                │                             │   type: 'string'               │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\\n│                                │                             │   type: 'number'               │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\\n│                                │                             │   type: 'integer'              │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\\n│                                │                             │   type: 'boolean'              │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\\n│                                │                             │   type: 'null'                 │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\\n│                                │                             │   const: 42,                   │\\n│                                │                             │   type: 'number'               │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\\n│   Type.Number()                │                             │   type: 'array',               │\\n│ )                              │                             │   items: {                     │\\n│                                │                             │     type: 'number'             │\\n│                                │                             │   }                            │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\\n│ })                             │ }                           │   properties: {                │\\n│                                │                             │     x: {                       │\\n│                                │                             │       type: 'number'           │\\n│                                │                             │     }, {                       │\\n│                                │                             │       type: 'number'           │\\n│                                │                             │     }                          │\\n│                                │                             │   }                            │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\\n│   Type.Number(),               │                             │   type: 'array',               │\\n│   Type.Number()                │                             │   items: [{                    │\\n│ ])                             │                             │      type: 'number'            │\\n│                                │                             │   }, {                         │\\n│                                │                             │     type: 'number'             │\\n│                                │                             │   }],                          │\\n│                                │                             │   additionalItems: false,      │\\n│                                │                             │   minItems: 2,                 │\\n│                                │                             │   maxItems: 2                  │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\\n│   A,                           │   A,                        │   anyOf: [{                    │\\n│   B                            │   B                         │     type: 'number',            │\\n│ }                              │ }                           │     const: 0                   │\\n│                                │                             │   }, {                         │\\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\\n│                                │                             │     const: 1                   │\\n│                                │                             │   }]                           │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\\n│   })                           │                             │   }, {                         │\\n│ )                              │                             │     type: 'string',            │\\n│                                │                             │     const: 'y'                 │\\n│                                │                             │   }]                           │\\n│                                │                             │ }                              │\\n│                                │                             │                                │\\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\\n│   Type.String(),               │                             │   anyOf: [{                    │\n```\n\n----------------------------------------\n\nTITLE: Gating Backend API Endpoints by User Subscription Plan in Express (JavaScript)\nDESCRIPTION: This code snippet demonstrates backend enforcement of feature access using plan-based authorization logic in a Node.js/Express API route. After extracting the user's subscription plan from their token or database record, the backend checks if the required tier ('Pro') is met before fulfilling the request. If the user does not have the adequate plan, a 403 response is returned. This pattern should be used to secure all protected API endpoints to prevent circumvention of frontend checks. Dependencies include Express, JWT middleware (e.g., express-jwt), and user plan data in the decoded JWT or database.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nif(user.plan !== 'Pro') {\n  return res.status(403).json({error: \"Upgrade required\"});\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Azure OpenAI Service for Content Generation in TypeScript\nDESCRIPTION: This TypeScript service (`azureOpenai.ts`) provides functionality to generate DECA roleplay scenarios using the Azure OpenAI API. It requires Azure credentials (Endpoint, Key, Deployment Name) set as environment variables. The `generateRoleplayScenario` function takes an event code and performance indicators, constructs system and user prompts, calls the `getChatCompletions` method of the `OpenAIClient` from `@azure/openai`, and returns the generated text content.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIClient, AzureKeyCredential, ChatCompletionsOptions } from '@azure/openai';\n\n// Environment variables needed:\n// AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_KEY, AZURE_OPENAI_DEPLOYMENT\nif (!process.env.AZURE_OPENAI_ENDPOINT || !process.env.AZURE_OPENAI_KEY || !process.env.AZURE_OPENAI_DEPLOYMENT) {\n  throw new Error(\"Missing Azure OpenAI environment variables.\");\n}\n\nfunction getClient(): OpenAIClient {\n  return new OpenAIClient(\n    process.env.AZURE_OPENAI_ENDPOINT,\n    new AzureKeyCredential(process.env.AZURE_OPENAI_KEY)\n  );\n}\n\nexport async function generateRoleplayScenario(eventCode: string, performanceIndicators: string[]): Promise<string> {\n  const client = getClient();\n  const deployment = process.env.AZURE_OPENAI_DEPLOYMENT!;\n  const systemPrompt = `You are a DECA roleplay generator. The eventCode is ${eventCode}. The performance indicators are: ${performanceIndicators.join(', ')}`;\n  const userPrompt = `Generate a realistic scenario... (rest of your user instructions)`;\n\n  const opts: ChatCompletionsOptions = {\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ],\n    maxTokens: 1500,\n    temperature: 0.7,\n  };\n  \n  const result = await client.getChatCompletions(deployment, opts);\n  const content = result.choices[0].message?.content ?? \"\";\n\n  return content;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Pools and Configuring Clients with pg-pool (Node.js)\nDESCRIPTION: Demonstrates how to instantiate Pool objects with default and custom configurations using pg-pool. Includes setting database connection parameters, maximum pool size, idle/connection timeouts, maxUses, and custom Client implementations (e.g., native or pg-native clients). Appropriate for initializing pools that manage PostgreSQL connections in scalable Node.js apps. Dependencies: 'pg-pool', 'pg', 'pg-native' and optionally 'node-pool'. Key parameters: user, password, host, port, database, max, idleTimeoutMillis, connectionTimeoutMillis, maxUses. Outputs Pool instances configured for varied connection and pooling needs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Pool = require('pg-pool')\n\n// by default the pool uses the same\n// configuration as whatever `pg` version you have installed\nvar pool = new Pool()\n\n// you can pass properties to the pool\n// these properties are passed unchanged to both the node-postgres Client constructor\n// and the node-pool (https://github.com/coopernurse/node-pool) constructor\n// allowing you to fully configure the behavior of both\nvar pool2 = new Pool({\n  database: 'postgres',\n  user: 'brianc',\n  password: 'secret!',\n  port: 5432,\n  ssl: true,\n  max: 20, // set pool max size to 20\n  idleTimeoutMillis: 1000, // close idle clients after 1 second\n  connectionTimeoutMillis: 1000, // return an error after 1 second if connection could not be established\n  maxUses: 7500, // close (and replace) a connection after it has been used 7500 times (see below for discussion)\n})\n\n//you can supply a custom client constructor\n//if you want to use the native postgres client\nvar NativeClient = require('pg').native.Client\nvar nativePool = new Pool({ Client: NativeClient })\n\n//you can even pool pg-native clients directly\nvar PgNativeClient = require('pg-native')\nvar pgNativePool = new Pool({ Client: PgNativeClient })\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Based App Navigation with Lazy Loading (TypeScript TSX)\nDESCRIPTION: This React App component sets up client-side routing with react-router-dom, leverages React.lazy and Suspense for code-splitting, and arranges nested routes for various application pages. It encapsulates the structure within a shared Layout component and shows a loading spinner during lazy loads. Dependencies include react-router-dom, React Suspense/lazy, and several custom components or pages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/App.tsx\\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\\nimport { Suspense, lazy } from 'react'\\nimport Layout from './components/Layout'\\nimport LoadingSpinner from './components/LoadingSpinner'\\n\\n// Lazy-loaded pages\\nconst HomePage = lazy(() => import('./pages/HomePage'))\\nconst LoginPage = lazy(() => import('./pages/LoginPage'))\\nconst RegisterPage = lazy(() => import('./pages/RegisterPage'))\\nconst DashboardPage = lazy(() => import('./pages/DashboardPage'))\\nconst RoleplayPage = lazy(() => import('./pages/RoleplayPage'))\\nconst TestPage = lazy(() => import('./pages/TestPage'))\\nconst PIExplanationPage = lazy(() => import('./pages/PIExplanationPage'))\\n\\nfunction App() {\\n  return (\\n    <Router>\\n      <Layout>\\n        <Suspense fallback={<LoadingSpinner />}>\\n          <Routes>\\n            <Route path=\\\"/\\\" element={<HomePage />} />\\n            <Route path=\\\"/login\\\" element={<LoginPage />} />\\n            <Route path=\\\"/register\\\" element={<RegisterPage />} />\\n            <Route path=\\\"/dashboard\\\" element={<DashboardPage />} />\\n            <Route path=\\\"/roleplay\\\" element={<RoleplayPage />} />\\n            <Route path=\\\"/test\\\" element={<TestPage />} />\\n            <Route path=\\\"/pi-explanation\\\" element={<PIExplanationPage />} />\\n          </Routes>\\n        </Suspense>\\n      </Layout>\\n    </Router>\\n  )\\n}\\n\\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Invoking Chat Completions with Azure OpenAI using Node.js SDK\nDESCRIPTION: This snippet shows how to call the Azure OpenAI chat completion API from Node.js using the OpenAIApi instance, specifying the model (deployment name) and providing system and user prompts in the payload. The result is extracted from 'completion.data.choices[0].message.content'. This requires proper client initialization and uses async/await for API interaction. Output is the generated AI response string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst completion = await openai.createChatCompletion({\n  model: \"gpt-4\", // or your deployment name\n  messages: [ {role: \"system\", content: systemPrompt}, {role: \"user\", content: userPrompt} ]\n});\nconst result = completion.data.choices[0].message.content;\n```\n\n----------------------------------------\n\nTITLE: Defining the Paths Matcher Function Signature\nDESCRIPTION: Shows the function signature for the matcher function returned by `createPathsMatcher`. This function, named `pathsMatcher` in the example context, takes a single argument `specifier` (string), which is the import path to resolve. It returns an array of strings (`string[]`), representing the possible paths to check based on the `compilerOptions.paths` mappings in the provided tsconfig.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pathsMatcher(specifier: string): string[]\n```\n\n----------------------------------------\n\nTITLE: Handling Accessibility Features (reduce-motion, high-contrast, large-text, focus traps) in TypeScript\nDESCRIPTION: This code snippet manages accessibility-related features, such as reduced motion, high contrast, and large-text modes, by toggling classes on the HTML element and providing utility functions for screen reader announcements and focus management. Dependencies may include ARIA live region utilities or a focus-trap library. The snippet expects the presence of user preference indicators or toggles, and manipulates the document's class list accordingly, enhancing accessibility for diverse audiences.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Accessibility utilities\\nexport function setAccessibilityMode(option: 'reduce-motion' | 'high-contrast' | 'large-text', enabled: boolean): void {\\n  const htmlElement = document.documentElement;\\n  const className = option;\\n  if (enabled) {\\n    htmlElement.classList.add(className);\\n  } else {\\n    htmlElement.classList.remove(className);\\n  }\\n}\\n\\nexport function announce(message: string): void {\\n  const liveRegion = document.getElementById('accessibility-live-region');\\n  if (liveRegion) {\\n    liveRegion.textContent = message;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Basic Esprima Usage in Node.js for Tokenization and Parsing\nDESCRIPTION: This snippet demonstrates the fundamental usage of the Esprima library within a Node.js REPL (Read-Eval-Print Loop). It shows how to import the library using `require('esprima')`, define a simple JavaScript code string, and then use `esprima.tokenize()` to perform lexical analysis (breaking the code into tokens) and `esprima.parseScript()` to perform syntactic analysis (generating an Abstract Syntax Tree representation). This requires the `esprima` npm package to be installed in the Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/esprima/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n> var esprima = require('esprima');\n> var program = 'const answer = 42';\n\n> esprima.tokenize(program);\n[ { type: 'Keyword', value: 'const' },\n  { type: 'Identifier', value: 'answer' },\n  { type: 'Punctuator', value: '=' },\n  { type: 'Numeric', value: '42' } ]\n  \n> esprima.parseScript(program);\n{ type: 'Program',\n  body:\n   [ { type: 'VariableDeclaration',\n       declarations: [Object],\n       kind: 'const' } ],\n  sourceType: 'script' }\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Global Fetch in Node.js - JavaScript\nDESCRIPTION: Describes how to patch the Node.js global object to provide a fetch API (and related classes) globally, mimicking browser behavior. After importing node-fetch and dependencies, fetch and associated constructs are assigned to globalThis, so they can be used anywhere without explicit import.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fetch-polyfill.js\nimport fetch, {\n  Blob,\n  blobFrom,\n  blobFromSync,\n  File,\n  fileFrom,\n  fileFromSync,\n  FormData,\n  Headers,\n  Request,\n  Response,\n} from 'node-fetch'\n\nif (!globalThis.fetch) {\n  globalThis.fetch = fetch\n  globalThis.Headers = Headers\n  globalThis.Request = Request\n  globalThis.Response = Response\n}\n\n// index.js\nimport './fetch-polyfill'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating API Helper Function for Backend Communication in React (JavaScript)\nDESCRIPTION: This snippet defines an asynchronous helper function, generateRoleplay, that sends a POST request to a backend API endpoint to generate a roleplay scenario for a selected DECA event and specified Performance Indicators (PIs). Dependencies include the browser Fetch API and a backend route '/api/generateRoleplay' that expects a JSON payload with eventType and performanceIndicators. Inputs: eventType (string) and PIs (array). Output: a JSON response from the backend. Limitations: assumes API route exists, returns JSON, and error handling must be managed by the calling component.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742626139423.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function generateRoleplay(eventType, PIs) {\n  const res = await fetch('/api/generateRoleplay', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ eventType, performanceIndicators: PIs })\n  });\n  return res.json(); // assuming your endpoint returns JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Using the slash package to convert paths in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the 'slash' package. It first requires the built-in Node.js 'path' module and the installed 'slash' module. It then constructs a platform-dependent path string using `path.join()` and finally uses the `slash()` function to ensure the path uses forward slashes, regardless of the operating system (Unix or Windows).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/slash/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst slash = require('slash');\n\nconst string = path.join('foo', 'bar');\n// Unix    => foo/bar\n// Windows => foo\\\\bar\n\nslash(string);\n// Unix    => foo/bar\n// Windows => foo/bar\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTTP Errors - http-errors - JavaScript\nDESCRIPTION: Shows how to generate a 404 HTTP error using the 'http-errors' module, assigning a custom error message for a missing resource scenario. This snippet requires the 'http-errors' module and can be used in any Node.js context where resource presence needs to be validated before continuing execution. The main input is the intended status code and error message; output is an error object with HTTP error semantics suitable for propagation via middleware or logging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-errors/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar err = createError(404, 'This video does not exist!')\n```\n\n----------------------------------------\n\nTITLE: Using res.vary() for Vary Header Manipulation in Express.js\nDESCRIPTION: Introduces the `res.vary()` method in Express.js. This method adds fields to the 'Vary' response header, which is crucial for HTTP caching mechanisms to determine if a cached response can be used based on request header values (e.g., 'Accept-Encoding', 'User-Agent').\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nres.vary()\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Test Suites using each.describe in JavaScript\nDESCRIPTION: This repeated snippet again illustrates the use of 'each.describe' to define a suite of related parameterized tests, where test cases verify both result correctness and argument immutability. Requires a compatible test runner and uses the same table-driven pattern.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Achievement Animation with Confetti in TypeScript\nDESCRIPTION: Provides the implementation for the `playAchievementAnimation` function using the `canvas-confetti` library within `animation-engine.ts`. It merges default and provided parameters using `mergeParams` and `getColors`, triggers a confetti effect with configurable properties (particle count, spread, velocity, decay, shapes, etc.), and optionally displays a message overlay using a basic DOM manipulation helper function `showMessageOverlay`. This function is intended to fix a missing implementation and provide a basic particle-based celebration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-consolidated-requirements-and-implementation-blueprint-for-building-out-the-DecA-I-de-Ani-1742703787972.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// animation-engine.ts (partial code)\n\n// Import external dependencies\nimport confetti from 'canvas-confetti';\n// ...other imports...\n\n// Add this function to fix the runtime error\nexport const playAchievementAnimation = (params: AnimationParams = {}): void => {\n  const mergedParams = mergeParams(params);\n  const colors = getColors(mergedParams);\n\n  // Example: a trophy particle-based effect plus confetti\n  confetti({\n    particleCount: mergedParams.particleCount ?? 50,\n    spread: mergedParams.spread ?? 70,\n    startVelocity: mergedParams.startVelocity ?? 25,\n    decay: mergedParams.decay ?? 0.9,\n    gravity: 1,\n    ticks: 200,\n    origin: { y: 0.6 },\n    colors: colors,\n    scalar: 1.2,\n    shapes: ['circle', 'star', 'square'], // can mix shapes\n  });\n\n  // Optionally show a trophy element or message overlay\n  if (mergedParams.message) {\n    showMessageOverlay(mergedParams.message, {\n      duration: mergedParams.duration ?? 2000,\n    });\n  }\n};\n\n// Utility function to show a pop-up message (can implement how you wish)\nfunction showMessageOverlay(message: string, options?: { duration: number }) {\n  // You can implement a React portal or a floating DOM element\n  const overlay = document.createElement('div');\n  overlay.innerText = message;\n  overlay.style.position = 'fixed';\n  overlay.style.top = '50%';\n  overlay.style.left = '50%';\n  overlay.style.transform = 'translate(-50%, -50%)';\n  overlay.style.fontSize = '1.5rem';\n  overlay.style.padding = '1rem';\n  overlay.style.backgroundColor = 'rgba(0,0,0,0.7)';\n  overlay.style.color = 'white';\n  overlay.style.borderRadius = '8px';\n  overlay.style.zIndex = '9999';\n  document.body.appendChild(overlay);\n\n  setTimeout(() => {\n    document.body.removeChild(overlay);\n  }, options?.duration ?? 2000);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Success Animation Component Props in TypeScript\nDESCRIPTION: This TypeScript interface specifies the properties for the `SuccessAnimation` React component. It includes a boolean `trigger` flag to activate the animation, an optional `onComplete` callback, an optional `type` to select the animation effect (e.g., 'confetti', 'stars'), an optional `message` string to display, and an optional `duration` in milliseconds for the animation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SuccessAnimationProps {\n  trigger: boolean;\n  onComplete?: () => void;\n  type?: 'confetti' | 'stars' | 'circles' | 'fireworks' | 'random';\n  message?: string;\n  duration?: number; // milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Options with @azure/core-client CommonClientOptions in TypeScript\nDESCRIPTION: This snippet demonstrates the structure of a client options interface (`SearchClientOptions`) when using the newer `@azure/core-client` and `@azure/core-rest-pipeline` libraries. It extends `CommonClientOptions`, the standard base options interface in the newer core libraries. This represents the target structure for updated client libraries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-http-compat/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SearchClientOptions extends CommonClientOptions {\n  apiVersion?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting ES6 Types with type-detect (JavaScript)\nDESCRIPTION: Demonstrates `type-detect`'s capability to identify various ECMAScript 2015 (ES6) types, including Map, WeakMap, Set, WeakSet, Symbol, Promise, Typed Arrays (Int8Array, Uint8Array, etc.), ArrayBuffer, and DataView. It uses `assert` to verify the expected string representation for each type. Requires the `type-detect` library, an assertion library, and an environment supporting these ES6 features. Note: The original code snippet contains syntax errors in several assertion lines (e.g., `assert(type(new Map() === 'Map')`) which should ideally be `assert(type(new Map()) === 'Map')`, and assumes variables like `callback` and `arrayBuffer` are defined.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type(new Map() === 'Map');\nassert(type(new WeakMap()) === 'WeakMap');\nassert(type(new Set()) === 'Set');\nassert(type(new WeakSet()) === 'WeakSet');\nassert(type(Symbol()) === 'symbol');\nassert(type(new Promise(callback) === 'Promise');\nassert(type(new Int8Array()) === 'Int8Array');\nassert(type(new Uint8Array()) === 'Uint8Array');\nassert(type(new UInt8ClampedArray()) === 'Uint8ClampedArray');\nassert(type(new Int16Array()) === 'Int16Array');\nassert(type(new Uint16Array()) === 'Uint16Array');\nassert(type(new Int32Array()) === 'Int32Array');\nassert(type(new UInt32Array()) === 'Uint32Array');\nassert(type(new Float32Array()) === 'Float32Array');\nassert(type(new Float64Array()) === 'Float64Array');\nassert(type(new ArrayBuffer()) === 'ArrayBuffer');\nassert(type(new DataView(arrayBuffer)) === 'DataView');\n```\n\n----------------------------------------\n\nTITLE: Detecting Number Types with type-detect (JavaScript)\nDESCRIPTION: Demonstrates detecting primitive number types (including integers, floats, Infinity, NaN) and `Number` wrapper objects using `type-detect`. It uses `assert` to verify `type()` returns 'number' for primitives and 'Number' (capitalized) for the wrapper object. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type(1) === 'number');\nassert(type(1.234) === 'number');\nassert(type(-1) === 'number');\nassert(type(-1.234) === 'number');\nassert(type(Infinity) === 'number');\nassert(type(NaN) === 'number');\nassert(type(new Number(1)) === 'Number'); // note - the object version has a capital N\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Entities with escape-html in JavaScript\nDESCRIPTION: Demonstrates how to import the escape-html module in JavaScript, pass a string containing special characters, and return a safely-escaped HTML string. Requires the escape-html npm package to be installed as a dependency (npm install escape-html). Accepts any string as input and returns a string where HTML-sensitive characters are replaced with their escaped entities. This snippet safeguards against HTML injection and rendering issues.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escape-html/Readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar escape = require('escape-html');\nvar html = escape('foo & bar');\n// -> foo &amp; bar\n```\n\n----------------------------------------\n\nTITLE: Defining Commands and Options with Yargs - JavaScript\nDESCRIPTION: Illustrates a more complex Node.js CLI using Yargs with support for custom commands and options. The example shows how to define a 'serve' command with a positional 'port' parameter (default 5000), and an option '--verbose'. Requires 'yargs', Node.js, and an application-specific 'serve' function. Inputs are command strings and flags; outputs are informational logs and the invocation of the 'serve' function within the handler.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\\nconst yargs = require('yargs/yargs')\\nconst { hideBin } = require('yargs/helpers')\\n\\nyargs(hideBin(process.argv))\\n  .command('serve [port]', 'start the server', (yargs) => {\\n    return yargs\\n      .positional('port', {\\n        describe: 'port to bind on',\\n        default: 5000\\n      })\\n  }, (argv) => {\\n    if (argv.verbose) console.info(`start server on :${argv.port}`)\\n    serve(argv.port)\\n  })\\n  .option('verbose', {\\n    alias: 'v',\\n    type: 'boolean',\\n    description: 'Run with verbose logging'\\n  })\\n  .parse()\\n\n```\n\n----------------------------------------\n\nTITLE: Converting Parsed ConnectionOptions to ClientConfig using pg-connection-string in TypeScript\nDESCRIPTION: This snippet shows how to first parse a PostgreSQL connection URL into a ConnectionOptions object and then convert it to ClientConfig using toClientConfig. This is applicable when you require direct access to the parsed interface before converting it for use with the pg (node-postgres) library. Both parse and toClientConfig are imported from pg-connection-string, and ClientConfig is imported from pg. The result is a ClientConfig object ready for client initialization. Prerequisites are the pg and pg-connection-string npm packages, and the snippet must be run in a TypeScript environment. It is important to ensure the compatibility of option fields.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-connection-string/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ClientConfig } from 'pg';\nimport { parse, toClientConfig } from 'pg-connection-string';\n\nconst config = parse('postgres://someuser:somepassword@somehost:381/somedatabase')\nconst clientConfig: ClientConfig = toClientConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Retrieving generated position using SourceMapConsumer - JavaScript\nDESCRIPTION: Shows how to use generatedPositionFor to map an original source position to the generated file's line and column. Requires a SourceMapConsumer instance (consumer) and an object with 'source', 'line', and 'column'. Returns an object with the corresponding generated line and column, or null values if not found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.generatedPositionFor({ source: \"example.js\", line: 2, column: 10 })\n// { line: 1,\n//   column: 56 }\n```\n\n----------------------------------------\n\nTITLE: Expanding Ranges in Glob Patterns with fill-range and Picomatch (JavaScript)\nDESCRIPTION: Illustrates customizing brace pattern expansion using a user-supplied expandRange function and the fill-range library. A regex is generated to match folders with zero-padded numbers in a path using pm.makeRe. Inputs are minimum and maximum bounds, and output is a regex that matches the specified range with correct formatting. Requires 'fill-range' and picomatch (as 'pm'), intended for Node.js environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fill = require('fill-range');\\nconst regex = pm.makeRe('foo/{01..25}/bar', {\\n  expandRange(a, b) {\\n    return `(${fill(a, b, { toRegex: true })})`;\\n  }\\n});\\n\\nconsole.log(regex);\\n//=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/\\n\\nconsole.log(regex.test('foo/00/bar'))  // false\\nconsole.log(regex.test('foo/01/bar'))  // true\\nconsole.log(regex.test('foo/10/bar')) // true\\nconsole.log(regex.test('foo/22/bar')) // true\\nconsole.log(regex.test('foo/25/bar')) // true\\nconsole.log(regex.test('foo/26/bar')) // false\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Express - JavaScript\nDESCRIPTION: This snippet illustrates integrating 'serve-static' as middleware into an Express application. It serves static files from 'public/ftp', serves either 'default.html' or 'default.htm' for directory requests, and listens on port 3000. Dependencies include 'express' and 'serve-static'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/serve-static/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar express = require('express')\nvar serveStatic = require('serve-static')\n\nvar app = express()\n\napp.use(serveStatic('public/ftp', { index: ['default.html', 'default.htm'] }))\napp.listen(3000)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Application Setup\nDESCRIPTION: This block outlines the necessary environment variables for configuring the DecA(I)de application. It includes settings for database connection (`DATABASE_URL`), Azure OpenAI API access (`AZURE_OPENAI_KEY`, `AZURE_OPENAI_ENDPOINT`, `AZURE_OPENAI_DEPLOYMENT`), session management (`SESSION_SECRET`), and Stripe payment integration (`STRIPE_SECRET_KEY`, `STRIPE_PUBLISHABLE_KEY`). These variables must be set in the environment for the application to function correctly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MASTER_PROMPT.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Database Configuration\nDATABASE_URL=postgresql://username:password@localhost:5432/decade_db\n\n# Azure OpenAI Configuration\nAZURE_OPENAI_KEY=your_azure_openai_key\nAZURE_OPENAI_ENDPOINT=https://your-instance.openai.azure.com/\nAZURE_OPENAI_DEPLOYMENT=gpt-4o-mini\n\n# Session Configuration\nSESSION_SECRET=your_session_secret\n\n# Stripe Configuration\nSTRIPE_SECRET_KEY=your_stripe_secret_key\nSTRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure OpenAI Connection (bash/.env) - Bash\nDESCRIPTION: This snippet shows the required environment variables for DecA(I)de to authenticate and connect with Azure OpenAI. Users must add these variables to their .env configuration file by replacing placeholder values with their Azure API key, resource endpoint, and deployment name. Proper configuration of these variables is necessary for successful integration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_OPENAI_SETUP.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_OPENAI_KEY=your-azure-openai-key\\nAZURE_OPENAI_ENDPOINT=https://your-resource-name.openai.azure.com/\\nAZURE_OPENAI_DEPLOYMENT=gpt-4o-mini\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Path with dotenv.config() in JavaScript\nDESCRIPTION: Shows how to use the `path` option within `dotenv.config()` to load environment variables from a file located at a specific custom path instead of the default `.env` in the current working directory. This requires the `dotenv` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nrequire('dotenv').config({ path: '/custom/path/to/.env' })\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example for to-regex-range in JavaScript\nDESCRIPTION: This snippet demonstrates the fundamental usage of the 'to-regex-range' library. It shows how to require the library and use its output directly within the `new RegExp()` constructor to create a regular expression object that matches numbers between 15 and 95.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst toRegexRange = require('to-regex-range');\nconst regex = new RegExp(toRegexRange('15', '95'));\n```\n\n----------------------------------------\n\nTITLE: Calling Backend API Endpoint from React API Helper - JavaScript\nDESCRIPTION: This JavaScript snippet defines an asynchronous helper function to generate a roleplay scenario by posting event type and selected PIs to the backend API. It uses fetch to POST JSON-encoded data to the /api/generateRoleplay endpoint and returns the parsed JSON response expected from the backend. Key dependencies are the browser's fetch API and a configured backend route, with eventType and PIs as input parameters, and the function returns a Promise resolving to the result object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function generateRoleplay(eventType, PIs) {\\n  const res = await fetch('/api/generateRoleplay', {\\n    method: 'POST',\\n    headers: { 'Content-Type': 'application/json' },\\n    body: JSON.stringify({ eventType, performanceIndicators: PIs })\\n  });\\n  return res.json(); // assuming your endpoint returns JSON\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Tailwind CSS in a React Project\nDESCRIPTION: Installs Tailwind CSS along with its peer dependencies (postcss, autoprefixer) using npm, initializes its configuration file, and includes the necessary Tailwind directives in the main CSS file (e.g., index.css) to enable base styles, components, and utilities. This setup is essential for using Tailwind's utility classes throughout the React application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss postcss autoprefixer\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss init\n```\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Basic Encoding/Decoding with iconv-lite in JavaScript\nDESCRIPTION: Demonstrates the fundamental usage of the `iconv-lite` library for converting between JavaScript strings and encoded Buffers. It shows how to decode a Buffer using a specific encoding (win1251), encode a string into a Buffer with a given encoding, and check if an encoding is supported by the library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/iconv-lite/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(Buffer.from([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Search with Vector Search in JavaScript\nDESCRIPTION: This snippet shows how to perform a vector search on text embeddings using the `@azure/search-documents` library. It initializes a `SearchClient` and calls the `search` method with a wildcard query ('*'). The `vectorSearchOptions` parameter specifies the vector query details, including the query vector itself, the target vector field(s) in the index ('descriptionVector'), and the desired number of nearest neighbors (`kNearestNeighborsCount`). Results represent documents closest to the query vector in the embedding space.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst searchClient = new SearchClient(\n  \"<endpoint>\",\n  \"<indexName>\",\n  new AzureKeyCredential(\"<apiKey>\")\n);\n\nasync function main() {\n  const queryVector = [...];\n  const searchResults = await searchClient.search(\"*\", {\n    vectorSearchOptions: {\n      queries: [\n        {\n          kind: \"vector\",\n          vector: queryVector,\n          fields: [\"descriptionVector\"],\n          kNearestNeighborsCount: 3,\n        },\n      ],\n    },\n  });\n  for await (const result of searchResults.results) {\n    // These results are the nearest neighbors to the query vector\n    console.log(result);\n  }\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserslist in .browserslistrc (Browserslist, YAML)\nDESCRIPTION: This snippet demonstrates setting Browserslist queries in a .browserslistrc configuration file using YAML-like syntax. It enables consistent environment targeting for multiple tools by listing browser queries on separate lines. Each line represents a criteria string, and there are no explicit input/output parameters—results are interpreted by Browserslist-aware tooling. Requires that the file is placed at project root with tool support for .browserslistrc files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/browserslist/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Browsers that we support\n\ndefaults and fully supports es6-module\nmaintained node versions\n```\n\n----------------------------------------\n\nTITLE: Overriding Merge Behavior by Property with customMerge in deepmerge (JavaScript)\nDESCRIPTION: This snippet illustrates how to override the merge behavior for specific object properties using the customMerge option in deepmerge. It defines a function that customizes how the 'name' property is merged, combining 'first' names into a string while other properties use the default merging logic. This allows per-key merge strategies and is useful for complex object schemas. Requires deepmerge.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst alex = {\n\tname: {\n\t\tfirst: 'Alex',\n\t\tlast: 'Alexson'\n\t},\n\tpets: ['Cat', 'Parrot']\n}\n\nconst tony = {\n\tname: {\n\t\tfirst: 'Tony',\n\t\tlast: 'Tonison'\n\t},\n\tpets: ['Dog']\n}\n\nconst mergeNames = (nameA, nameB) => `${nameA.first} and ${nameB.first}`\n\nconst options = {\n\tcustomMerge: (key) => {\n\t\tif (key === 'name') {\n\t\t\treturn mergeNames\n\t\t}\n\t}\n}\n\nconst result = merge(alex, tony, options)\n\nresult.name // => 'Alex and Tony'\nresult.pets // => ['Cat', 'Parrot', 'Dog']\n```\n\n----------------------------------------\n\nTITLE: Using createFileMatcher for File Inclusion Check\nDESCRIPTION: Provides an example of using the `createFileMatcher` function. It first retrieves the tsconfig result using `getTsconfig`. If a tsconfig is found, `createFileMatcher` is called with the result to create a `fileMatcher` function. This matcher is then used to check if a specific file path (`/path/to/file.ts`) falls under the scope defined by the tsconfig's `include`, `exclude`, and `files` properties, returning the config object on match or undefined otherwise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst tsconfig = getTsconfig()\nconst fileMatcher = tsconfig && createFileMatcher(tsconfig)\n\n/*\n * Returns tsconfig.json if it matches the file,\n * undefined if not\n */\nconst configForFile = fileMatcher?.('/path/to/file.ts')\nconst distCode = compileTypescript({\n    code: sourceCode,\n    tsconfig: configForFile\n})\n```\n\n----------------------------------------\n\nTITLE: Graceful Pool Shutdown with Await (Node.js)\nDESCRIPTION: Illustrates how to gracefully terminate all idle client connections by calling pool.end(), using async/await. Ensures that database resources are released when the application is finished, especially in scripts or controlled shutdowns. Dependencies: 'pg-pool'. Should be called after all work is done with the pool.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\nvar client = await pool.connect()\nconsole.log(await client.query('select now()'))\nclient.release()\nawait pool.end()\n```\n\n----------------------------------------\n\nTITLE: Using Router.all() Method in Express.js\nDESCRIPTION: Introduces the `Router.all()` method in the Express.js router. This method allows defining middleware or route handlers that apply to all HTTP methods for a given path pattern within that router instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nRouter.all()\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Theming with CSS Variables in JavaScript\nDESCRIPTION: This JavaScript snippet dynamically applies color themes to the web application based on user appearance settings. It selects a color palette from a predefined `colorSystems` object based on the `appearance.colorScheme` (defaulting if not found) and sets corresponding CSS custom properties (`--color-*`) on the root HTML element. It also toggles a 'dark' class on the root element based on the `appearance.theme` setting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n      contrast: '#1F2937', badge: '#EF4444'\n    },\n    // ...other clusters...\n    default: {\n      primary: '#06B6D4', secondary: '#67E8F9', accent: '#0E7490',\n      light: '#ECFEFF', medium: '#CFFAFE', dark: '#0891B2',\n      contrast: '#1F2937', badge: '#06B6D4'\n    }\n  };\n\n  const colors = colorSystems[appearance.colorScheme] || colorSystems.default;\n\n  Object.entries(colors).forEach(([key, value]) => {\n    document.documentElement.style.setProperty(`--color-${key}`, value);\n  });\n\n  // handle dark vs. light\n  if (appearance.theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n\n  return appearance;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing a Strongly-Typed Search with TypeScript in Azure Search\nDESCRIPTION: This TypeScript snippet shows how to use a generic `SearchClient<Hotel>` to perform strongly-typed searches against an Azure Search index. It defines an interface `Hotel` representing the document schema. The `search` method uses the `select` option to specify which fields to retrieve, allowing TypeScript to provide type checking and autocompletion for the returned document properties. Different ways to declare the `select` array are shown for type safety.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { SearchClient, AzureKeyCredential, SelectFields } from \"@azure/search-documents\";\n\n// An example schema for documents in the index\ninterface Hotel {\n  hotelId?: string;\n  hotelName?: string | null;\n  description?: string | null;\n  descriptionVector?: Array<number>;\n  parkingIncluded?: boolean | null;\n  lastRenovationDate?: Date | null;\n  rating?: number | null;\n  rooms?: Array<{\n    beds?: number | null;\n    description?: string | null;\n  }>;\n}\n\nconst client = new SearchClient<Hotel>(\n  \"<endpoint>\",\n  \"<indexName>\",\n  new AzureKeyCredential(\"<apiKey>\")\n);\n\nasync function main() {\n  const searchResults = await client.search(\"wifi -luxury\", {\n    // Only fields in Hotel can be added to this array.\n    // TS will complain if one is misspelled.\n    select: [\"hotelId\", \"hotelName\", \"rooms/beds\"],\n  });\n\n  // These are other ways to declare the correct type for `select`.\n  const select = [\"hotelId\", \"hotelName\", \"rooms/beds\"] as const;\n  // This declaration lets you opt out of narrowing the TypeScript type of your documents,\n  // though the AI Search service will still only return these fields.\n  const selectWide: SelectFields<Hotel>[] = [\"hotelId\", \"hotelName\", \"rooms/beds\"];\n  // This is an invalid declaration. Passing this to `select` will result in a compiler error\n  // unless you opt out of including the model in the client constructor.\n  const selectInvalid = [\"hotelId\", \"hotelName\", \"rooms/beds\"];\n\n  for await (const result of searchResults.results) {\n    // result.document has hotelId, hotelName, and rating.\n    // Trying to access result.document.description would emit a TS error.\n    console.log(result.document.hotelName);\n  }\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a SourceMapGenerator from a SourceMapConsumer - JavaScript\nDESCRIPTION: Illustrates the use of SourceMapGenerator.fromSourceMap to generate a new source map generator using an existing consumer and custom options. This function copies mappings and supports advanced options such as ignoring invalid mappings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar generator = sourceMap.SourceMapGenerator.fromSourceMap(consumer, {\n  ignoreInvalidMapping: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Confetti Animation for Achievements in TypeScript\nDESCRIPTION: This TypeScript function, `playDailyChallengeCompleted`, triggers a confetti animation using the `confetti.js` library to celebrate a user completing a daily challenge. It accepts optional parameters (`AnimationParams`), merges them with defaults, calculates appropriate colors, and then invokes the `confetti` function with specific configurations (particle count, spread, velocity, etc.). It can also display an optional message overlay.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-consolidated-requirements-and-implementation-blueprint-for-building-out-the-DecA-I-de-Ani-1742703787972.txt#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// achievements.ts\nexport const playDailyChallengeCompleted = (params: AnimationParams = {}): void => {\n  const mergedParams = mergeParams(params);\n  const colors = getColors(mergedParams);\n\n  confetti({\n    particleCount: mergedParams.particleCount ?? 40,\n    spread: mergedParams.spread ?? 60,\n    startVelocity: mergedParams.startVelocity ?? 20,\n    decay: mergedParams.decay ?? 0.9,\n    gravity: 1,\n    origin: { y: 0.6 },\n    colors,\n  });\n\n  if (mergedParams.message) {\n    showMessageOverlay(mergedParams.message, {\n      duration: mergedParams.duration ?? 1500,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Streak Data Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the data structure used to track a user's activity streak and rewards. It includes the current streak `count` (number), the `lastActivity` timestamp (Date object), and an array of `badges` (strings) the user has earned.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserStreak {\n  count: number;\n  lastActivity: Date;\n  badges: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Uncapitalize Utility Type in TypeScript\nDESCRIPTION: This snippet demonstrates the `Uncapitalize<S>` utility type in TypeScript (introduced in v4.1). It provides examples of converting the first character of string literals, union types (`'Foo' | 'Bar'`), template literal types (`AB${S}`), and generic types to lowercase. It also illustrates its behavior with `string`, `any`, `never`, and highlights an error when used with a non-string type like `number`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\ntype T = Uncapitalize<'Hello'>;  // 'hello'\n\ntype T2 = Uncapitalize<'Foo' | 'Bar'>;  // 'foo' | 'bar'\n\ntype T3<S extends string> = Uncapitalize<`AB${S}`>;\ntype T4 = T30<'xYz'>;  // 'aBxYz'\n\ntype T5 = Uncapitalize<string>;  // string\ntype T6 = Uncapitalize<any>;  // any\ntype T7 = Uncapitalize<never>;  // never\ntype T8 = Uncapitalize<42>;  // Error, type 'number' does not satisfy the constraint 'string'\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Client and Server Errors with Custom Error Class - JavaScript\nDESCRIPTION: Defines a custom HTTPResponseError class for handling HTTP response errors (status 4xx/5xx). Provides a utility function checkStatus to throw this error for non-OK responses. The pattern enables detailed error reporting and error body extraction in failed fetches.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nclass HTTPResponseError extends Error {\n\tconstructor(response) {\n\t\tsuper(`HTTP Error Response: ${response.status} ${response.statusText}`);\n\t\tthis.response = response;\n\t}\n}\n\nconst checkStatus = response => {\n\tif (response.ok) {\n\t\t// response.status >= 200 && response.status < 300\n\t\treturn response;\n\t} else {\n\t\tthrow new HTTPResponseError(response);\n\t}\n}\n\nconst response = await fetch('https://httpbin.org/status/400');\n\ntry {\n\tcheckStatus(response);\n} catch (error) {\n\tconsole.error(error);\n\n\tconst errorBody = await error.response.text();\n\tconsole.error(`Error body: ${errorBody}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default CSS Variables for Theming in CSS\nDESCRIPTION: This CSS snippet defines default values for color-related CSS custom properties within the `:root` scope. These variables serve as fallbacks if they are not dynamically set by JavaScript and are used throughout the application's stylesheets to maintain theme consistency, as demonstrated by the `.btn-primary` and `.btn-secondary` class examples.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  /* Provide defaults (if not set above) */\n  --color-primary: #06B6D4;\n  --color-secondary: #67E8F9;\n  --color-accent: #0E7490;\n  --color-light: #ECFEFF;\n  --color-medium: #CFFAFE;\n  --color-dark: #0891B2;\n  --color-contrast: #1F2937;\n  --color-badge: #06B6D4;\n}\n\n.btn-primary {\n  background-color: var(--color-primary);\n  color: #fff;\n}\n.btn-secondary {\n  background-color: var(--color-secondary);\n  color: var(--color-contrast);\n}\n/* etc. */\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple CSS Color Variables Dynamically in TypeScript\nDESCRIPTION: Demonstrates using `Object.entries` and `forEach` in TypeScript to iterate over a selected color theme object (e.g., one from `colorSystems`). For each color key (like 'primary', 'secondary'), it dynamically sets a corresponding CSS custom property (e.g., `--color-primary`) on the document's root element via `document.documentElement.style.setProperty`, efficiently applying the entire color scheme.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nObject.entries(colors).forEach(([key, value]) => {\n  document.documentElement.style.setProperty(`--color-${key}`, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Allocating Uninitialized Buffer Safely with Buffer.allocUnsafe - JavaScript\nDESCRIPTION: Shows safe explicit allocation of uninitialized buffers using Buffer.allocUnsafe, followed by immediately overwriting the contents. This modern best practice addresses the vulnerabilities of the old Buffer(size) pattern. Assumes otherBuf contains sufficient data to fill the newly-allocated buffer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar buf = Buffer.allocUnsafe(16) // careful, uninitialized memory!\\n\\n// Immediately overwrite the uninitialized buffer with data from another buffer\\nfor (var i = 0; i < buf.length; i++) {\\n  buf[i] = otherBuf[i]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Comments with Acorn\\'s onComment Option - JavaScript\nDESCRIPTION: This code snippet represents the structure of a comment object pushed to an array when using Acorn\\'s \\\"onComment\\\" option in the parser configuration. It shows the expected fields (type, value, start, end), and optional loc and range fields if corresponding options are enabled. This format allows consumers to capture source code comments with detailed location data while parsing with Acorn (requires appropriate option flags in the parser configuration).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"Line\" | \"Block\",\n  \"value\": \"comment text\",\n  \"start\": Number,\n  \"end\": Number,\n  // If `locations` option is on:\n  \"loc\": {\n    \"start\": {line: Number, column: Number}\n    \"end\": {line: Number, column: Number}\n  },\n  // If `ranges` option is on:\n  \"range\": [Number, Number]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Content-Type from Request Object with contentType.parse - JavaScript\nDESCRIPTION: Illustrates parsing the Content-Type header from an HTTP request object using the 'content-type' package. It accesses 'req.headers[\\'content-type\\']' internally for convenience. Requires Node.js, a compatible HTTP request object, and the 'content-type' module. Input is the request object; throws TypeError if the header is missing or invalid; output is an object with type and parameters.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-type/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = contentType.parse(req)\n```\n\n----------------------------------------\n\nTITLE: Redirecting Execa Subprocess Output to a File in JavaScript\nDESCRIPTION: Shows how to redirect the standard output (`stdout`) of a child process spawned by `execa` directly into a file. It achieves this by piping the `subprocess.stdout` readable stream to a writable stream created with Node.js's `fs.createWriteStream`. Requires `execa` and the built-in `fs` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst execa = require('execa');\n\nconst subprocess = execa('echo', ['foo'])\nsubprocess.stdout.pipe(fs.createWriteStream('stdout.txt'))\n```\n\n----------------------------------------\n\nTITLE: Using create-require to Dynamically Require Modules in JavaScript\nDESCRIPTION: This JavaScript code demonstrates importing the 'create-require' package, creating a require function scoped to a specified file, and then requiring a module relative to that file. The example showcases dynamic module resolution in contexts where Node's native module.createRequire may not be available. Dependencies include the installed 'create-require' package and a Node.js runtime. The input is a path to a file, and the output is a loaded module instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/create-require/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst createRequire = require('create-require')\n\nconst myRequire = createRequire('path/to/test.js')\nconst myModule = myRequire('./test-sibling-module')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Potential Risk of `load` with Untrusted Input\nDESCRIPTION: Highlights the security risk associated with using `js-yaml.load` on untrusted YAML strings. The example shows how a specially crafted string containing a `!!js/function` tag can lead to arbitrary code execution when the loaded object is processed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using jest-worker for Standard Parallel Tasks in JavaScript\nDESCRIPTION: This script (`parent.js`) demonstrates the standard usage of `jest-worker`. It initializes a worker farm with 4 workers, specifying the worker module (`./worker.js`) and the methods (`foo`, `bar`, `getWorkerId`) exposed by the worker. It then calls these methods, distributing the calls across the available workers, and logs the results. Finally, it gracefully shuts down the workers using `myWorker.end()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {Worker as JestWorker} from 'jest-worker';\n\nasync function main() {\n  const myWorker = new JestWorker(require.resolve('./worker'), {\n    exposedMethods: ['foo', 'bar', 'getWorkerId'],\n    numWorkers: 4,\n  });\n\n  console.log(await myWorker.foo('Alice')); // \"Hello from foo: Alice\"\n  console.log(await myWorker.bar('Bob')); // \"Hello from bar: Bob\"\n  console.log(await myWorker.getWorkerId()); // \"3\" -> this message has sent from the 3rd worker\n\n  const {forceExited} = await myWorker.end();\n  if (forceExited) {\n    console.error('Workers failed to exit gracefully');\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Escaping JavaScript Data to Valid JSON using jsesc\nDESCRIPTION: Illustrates the use of the 'json: true' option with the jsesc function in JavaScript. This option ensures the output is valid JSON by appropriately escaping characters in strings, arrays, and object literals. It relies on JSON.stringify() for non-JSON-safe values and may require a JSON polyfill in older environments like IE <= 7.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\njsesc('foo\\x00bar\\xFF\\uFFFDbaz', {\n  'json': true\n});\n// → '\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"'\n\njsesc({ 'foo\\x00bar\\xFF\\uFFFDbaz': 'foo\\x00bar\\xFF\\uFFFDbaz' }, {\n  'json': true\n});\n// → '{\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\":\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"}'\n\njsesc([ 'foo\\x00bar\\xFF\\uFFFDbaz', 'foo\\x00bar\\xFF\\uFFFDbaz' ], {\n  'json': true\n});\n// → '[\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\",\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"]'\n\n// Values that are acceptable in JSON but aren’t strings, arrays, or object\n// literals can’t be escaped, so they’ll just be preserved:\njsesc([ 'foo\\x00bar', [1, '©', { 'foo': true, 'qux': null }], 42 ], {\n  'json': true\n});\n// → '[\"foo\\\\u0000bar\",[1,\"\\\\u00A9\",{\"foo\":true,\"qux\":null}],42]'\n// Values that aren’t allowed in JSON are run through `JSON.stringify()`:\njsesc([ undefined, -Infinity ], {\n  'json': true\n});\n// → '[null,null]'\n```\n\n----------------------------------------\n\nTITLE: Piping Child Process stdout to Parent - JavaScript\nDESCRIPTION: Shows how to pipe the output of a spawned child process directly to the parent process’s stdout stream using Execa. This approach enables real-time streaming of child process output to the terminal or logs. Requires the 'execa' module and a Node.js runtime.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst execa = require('execa');\n\nexeca('echo', ['unicorns']).stdout.pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Extending File System Errors With HTTP Semantics - http-errors - JavaScript\nDESCRIPTION: Demonstrates augmenting an error from the Node.js filesystem API with HTTP error properties using the 'http-errors' module. Dependencies include 'fs' and 'http-errors'. The function checks if a read file operation returns an ENOENT (file not found) error, then converts it into a 404 HTTP error with optional custom properties; otherwise, it wraps other errors as 500 (internal server errors). Function inputs are an error and result buffer from fs.readFile. Output is an HTTP error object, either with or without exposing the message, depending on the error type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-errors/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfs.readFile('foo.txt', function (err, buf) {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      var httpError = createError(404, err, { expose: false })\n    } else {\n      var httpError = createError(500, err)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-istanbul in .babelrc for Test Environment - JavaScript\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable the istanbul Babel plugin only when the NODE_ENV environment variable is set to 'test'. The plugin is activated under the 'env.test.plugins' section, ensuring code is only instrumented during test runs. Requires that 'babel-plugin-istanbul' is installed as a dependency, and assumes tests are run with NODE_ENV set accordingly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-istanbul/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"env\": {\n    \"test\": {\n      \"plugins\": [ \"istanbul\" ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using bytes() Function for Formatting and Parsing - JavaScript\nDESCRIPTION: Demonstrates using the 'bytes' function to convert numbers to formatted strings and parse strings into numeric byte values. The function automatically infers whether to format or parse based on the value type, returning formatted strings for numbers and numeric bytes for strings. Key parameters include the value to format/parse; options can be provided for formatting. Returns number, string, or null if parsing fails.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bytes/Readme.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js\\nbytes(1024);\\n// output: '1KB'\\n\\nbytes('1KB');\\n// output: 1024\\n```\n```\n\n----------------------------------------\n\nTITLE: Including Change Counts in jest-diff Annotation Lines in JavaScript\nDESCRIPTION: This snippet sets includeChangeCounts in the options object to true, which appends the number of changed lines to the annotation headers in diff output. It provides clear insight into the scale of changes and is used as an argument to diff alongside the arrays or objects being compared.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nconst a = ['common', 'changed from'];\\nconst b = ['common', 'changed to', 'insert'];\\n\\nconst options = {\\n  includeChangeCounts: true,\\n};\\n\\nconst difference = diff(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Creating a Polyfill for Object.assign Helper - TypeScript\nDESCRIPTION: Defines a polyfill/helper function for Object.assign and demonstrates its use in commonjs exports. This code shows how TypeScript emits helpers like __assign when not using --importHelpers. It depends on object property copying, and outputs two exported objects: x (empty) and y (copy of x). Limitation: will duplicate __assign across files unless tslib is used.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nexports.x = {};\nexports.y = __assign({}, exports.x);\n\n```\n\n----------------------------------------\n\nTITLE: Memphis Visual Style Toggle in Theme Provider (TSX/React)\nDESCRIPTION: This React (TSX) code toggles global Memphis mode by adding or removing the relevant classes on the <body> element. It should be run in a useEffect or equivalent when the visualStyle property changes. Dependencies: appearance context or prop, document access. Input: appearance.visualStyle property; Output: live body class change, triggering Memphis CSS rules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nif (appearance.visualStyle === 'memphis') {\n  document.body.classList.add('memphis-style', 'enabled');\n} else {\n  document.body.classList.remove('memphis-style', 'enabled');\n}\n```\n\n----------------------------------------\n\nTITLE: Default Theme Object Definition for pretty-format (JavaScript)\nDESCRIPTION: Defines the `DEFAULT_THEME` constant, an object specifying the default colors used for syntax highlighting in terminal output when the `highlight` option is enabled. Keys represent syntax types (comment, prop, tag, value), and values are color names compatible with `ansi-styles`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n----------------------------------------\n\nTITLE: Omitting Annotation Lines in jest-diff Unified String Output in JavaScript\nDESCRIPTION: Demonstrates how to suppress annotation headers by setting omitAnnotationLines to true in the options object passed to diffStringsUnified. The resulting unified diff omits expected/received labels and shows only the line-by-line changes. Useful for concise display or inline output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nconst a = 'common\\nchanged from';\\nconst b = 'common\\nchanged to';\\n\\nconst options = {\\n  omitAnnotationLines: true,\\n};\\n\\nconst difference = diffStringsUnified(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Triggering Animations and Achievements in React Event Handlers (TSX)\nDESCRIPTION: This snippet shows example usage of the `triggerAnimation` and `showAchievement` functions obtained from the `useMicroInteractions` hook within component logic. `triggerAnimation` is called with 'confetti' type upon successful asynchronous data submission, while `showAchievement` is called with specific details when a task is completed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// On successful submission\nconst handleSubmit = async (data) => {\n  try {\n    await submitData(data);\n    triggerAnimation('confetti', 'Successfully submitted!');\n  } catch (error) {\n    // Handle error\n  }\n};\n\n// For achievements\nconst completeTask = () => {\n  // Task logic\n  showAchievement(\"Achievement Unlocked\", \"You completed your first task!\", 20);\n};\n```\n\n----------------------------------------\n\nTITLE: Type Checking Values against Schemas using Value.Check in TypeBox (TypeScript)\nDESCRIPTION: This snippet demonstrates the `Value.Check()` function from the TypeBox `Value` module. It checks if a given JavaScript value (`{ x: 1 }`) conforms to the specified TypeBox schema `T` (`Type.Object({ x: Type.Number() })`). It returns `true` if the value matches the schema, and `false` otherwise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Object({ x: Type.Number() })\n\nconst R = Value.Check(T, { x: 1 })                   // const R = true\n```\n\n----------------------------------------\n\nTITLE: Customizing Substring Change Coloring in Diff Output using Chalk in TypeScript\nDESCRIPTION: This TypeScript example sets a custom color style for substrings changed within lines by assigning a bold yellow background using Chalk. The options object specifies changeColor. Useful for highlighting in granular diff outputs, it requires the chalk package for styling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport chalk = require('chalk');\\n\\nconst options = {\\n  changeColor: chalk.bold.bgYellowBright,\\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Execa Synchronous Method - JavaScript\nDESCRIPTION: Shows how to synchronously spawn a command using Execa.sync and handle exceptions when the command fails. The error object structure is the same as in the async variant, providing rich diagnostic details. Synchronous process execution can block the Node.js event loop and should be used judiciously.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntry {\n\texeca.sync('unknown', ['command']);\n} catch (error) {\n\tconsole.log(error);\n\t/*\n\t{\n\t\tmessage: 'Command failed with ENOENT: unknown command spawnSync unknown ENOENT',\n\t\terrno: -2,\n\t\tcode: 'ENOENT',\n\t\tsyscall: 'spawnSync unknown',\n\t\tpath: 'unknown',\n\t\tspawnargs: ['command'],\n\t\toriginalMessage: 'spawnSync unknown ENOENT',\n\t\tshortMessage: 'Command failed with ENOENT: unknown command spawnSync unknown ENOENT',\n\t\tcommand: 'unknown command',\n\t\tescapedCommand: 'unknown command',\n\t\tstdout: '',\n\t\tstderr: '',\n\t\tall: '',\n\t\tfailed: true,\n\t\ttimedOut: false,\n\t\tisCanceled: false,\n\t\tkilled: false\n\t}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Lists of Strings with Patterns using Micromatch in JavaScript\nDESCRIPTION: Illustrates matching arrays of strings against one or more glob patterns, showing both inclusive and exclusive (negation) matching. Assumes 'micromatch' is installed and imported as required in a Node.js environment. Inputs include a list of strings and a patterns array; outputs are filtered arrays with matching items.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(micromatch(['foo', 'bar', 'baz', 'qux'], ['f*', 'b*'])) //=> ['foo', 'bar', 'baz']\nconsole.log(micromatch(['foo', 'bar', 'baz', 'qux'], ['*', '!b*'])) //=> ['foo', 'qux']\n```\n\n----------------------------------------\n\nTITLE: Excluding a Type from a Union Using TypeBox Exclude in TypeScript\nDESCRIPTION: Applies Type.Exclude to remove the string type from a union of string and number. This models TypeScript's Exclude<string | number, string>. Dependencies: TypeBox. Inputs: a union type schema, an exclusion type schema; output: the union excluding specifically listed types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Exclude(\n  Type.Union([\n    Type.String(),\n    Type.Number(),\n  ]),\n  Type.String()\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Response Body Using Async Iterators with node-fetch - JavaScript\nDESCRIPTION: This snippet demonstrates consuming the response body from a node-fetch request using async iterators, suitable in Node.js 14+. Chunks are parsed and logged as JSON, and errors are properly caught, highlighting the importance of error handling in stream processing. The input URL returns a streaming JSON response for demonstration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nconst response = await fetch('https://httpbin.org/stream/3');\\n\\ntry {\\n\\tfor await (const chunk of response.body) {\\n\\t\\tconsole.dir(JSON.parse(chunk.toString()));\\n\\t}\\n} catch (err) {\\n\\tconsole.error(err.stack);\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Stream highWaterMark in node-fetch Requests - JavaScript\nDESCRIPTION: This code configures node-fetch to use a custom highWaterMark (buffer size) of approximately 1MB when making a fetch request. Adjusting highWaterMark avoids stalls/hangs for large responses by increasing the internal buffer size. The snippet expects node-fetch v3.x or later and demonstrates cloning the response and reading it as an ArrayBuffer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nconst response = await fetch('https://example.com', {\\n\\t// About 1MB\\n\\thighWaterMark: 1024 * 1024\\n});\\n\\nconst result = await res.clone().arrayBuffer();\\nconsole.dir(result);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Extglob Syntax in Picomatch - JavaScript\nDESCRIPTION: Demonstrates using picomatch's `isMatch` function to match strings against glob patterns with advanced extglob support, including zero or more and one or more pattern repetitions, as well as negated and nested extglob expressions. Requires the `picomatch` npm package. Inputs are strings and patterns, outputs are boolean match results. Example covers practical matching scenarios and combination of multiple extglob patterns.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pm = require('picomatch');\n\n// *(pattern) matches ZERO or more of \"pattern\"\nconsole.log(pm.isMatch('a', 'a*(z)')); // true\nconsole.log(pm.isMatch('az', 'a*(z)')); // true\nconsole.log(pm.isMatch('azzz', 'a*(z)')); // true\n\n// +(pattern) matches ONE or more of \"pattern\"\nconsole.log(pm.isMatch('a', 'a*(z)')); // true\nconsole.log(pm.isMatch('az', 'a*(z)')); // true\nconsole.log(pm.isMatch('azzz', 'a*(z)')); // true\n\n// supports multiple extglobs\nconsole.log(pm.isMatch('foo.bar', '!(foo).!(bar)')); // false\n\n// supports nested extglobs\nconsole.log(pm.isMatch('foo.bar', '!(!(foo)).!(!(bar))')); // true\n\n```\n\n----------------------------------------\n\nTITLE: Using Type Guards for Schema Reflection in TypeBox (TypeScript)\nDESCRIPTION: This snippet demonstrates the use of `TypeGuard` from `@sinclair/typebox` for runtime reflection on TypeBox schemas. It shows how to check if a given schema `T` is specifically a `TString` (String schema) using `TypeGuard.TString(T)`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Type, TypeGuard } from '@sinclair/typebox'\n\nconst T = Type.String()\n\nif(TypeGuard.TString(T)) {\n    \n  // T is TString\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting LLM Prompt with Retrieved Context\nDESCRIPTION: Provides an example format for constructing a prompt for a large language model (LLM). It includes placeholders for relevant text snippets retrieved from a vector search, instructing the model to use this context when generating its answer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n\"Here are relevant references:\\n[1] ...text...\\n[2] ...text...\\n Please answer the question using this information.\"\n```\n\n----------------------------------------\n\nTITLE: Using Raw Values and Channel Information with color-convert in JavaScript\nDESCRIPTION: Illustrates how to obtain both rounded (default) and unrounded (`.raw`) color conversion results using the `color-convert` library. Examples show converting HEX to LAB and RGB to CMYK in both rounded and raw forms. It also reiterates the availability of the `.channels` property on 'from' functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/color-convert/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar convert = require('color-convert');\n\n// Hex to LAB\nconvert.hex.lab('DEADBF');         // [ 76, 21, -2 ]\nconvert.hex.lab.raw('DEADBF');     // [ 75.56213190997677, 20.653827952644754, -2.290532499330533 ]\n\n// RGB to CMYK\nconvert.rgb.cmyk(167, 255, 4);     // [ 35, 0, 98, 0 ]\nconvert.rgb.cmyk.raw(167, 255, 4); // [ 34.509803921568626, 0, 98.43137254901961, 0 ]\n```\n\n----------------------------------------\n\nTITLE: Comparing Index Intervals using diff-sequences in JavaScript\nDESCRIPTION: Shows how to use `diff-sequences` to compare specific sub-sections (intervals) of two sequences (`a` and `b`) without slicing them. The `diffIndexIntervals` function takes the arrays and their respective start and end indices as input. Inside the `isCommon` callback, it adjusts the received indices (`aIndex`, `bIndex`) by adding the start offsets (`aStart`, `bStart`) to access the correct elements. The `foundSubsequence` callback receives indices relative to the start of the intervals, which need adjustment using `aStart` and `bStart` for absolute indexing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Diff index intervals that are half open [start, end) like array slice method.\nconst diffIndexIntervals = (a, aStart, aEnd, b, bStart, bEnd) => {\n  // Validate: 0 <= aStart and aStart <= aEnd and aEnd <= a.length\n  // Validate: 0 <= bStart and bStart <= bEnd and bEnd <= b.length\n\n  diff(\n    aEnd - aStart,\n    bEnd - bStart,\n    (aIndex, bIndex) => Object.is(a[aStart + aIndex], b[bStart + bIndex]),\n    (nCommon, aCommon, bCommon) => {\n      // aStart + aCommon, bStart + bCommon\n    },\n  );\n\n  // After the last common subsequence, do any remaining work.\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings and Processing Diffs via Jest-Diff in JavaScript\nDESCRIPTION: This code shows how to use the diffLinesRaw function from jest-diff on arrays created by splitting input strings on line breaks. It highlights the edge case where splitting an empty string yields an array with a single empty string, which affects diff outputs. The code imports diffLinesRaw and applies it to two inputs, capturing and analyzing the returned diff results.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport {diffLinesRaw} from 'jest-diff';\\n\\nconst a = 'non-empty string';\\nconst b = '';\\n\\nconst diffs = diffLinesRaw(a.split('\\n'), b.split('\\n'));\n```\n\n----------------------------------------\n\nTITLE: Parsing Error on Duplicate __proto__ Definition in JavaScript\nDESCRIPTION: Demonstrates that defining two __proto__ properties in a JavaScript object literal throws a parsing error due to duplicate prototype definitions, enhancing spec compliance. No dependencies outside a compliant JS parser. Inputs are object literals; output is a thrown error during parsing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n({ __proto__: 1, __proto__: 2 }) // Throws an error now\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of type-is in an HTTP Server (Node.js)\nDESCRIPTION: Demonstrates a simple Node.js HTTP server that uses the `type-is` module to check if the incoming request's Content-Type matches 'text/*'. It requires the `http` core module and the `type-is` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-is/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http')\nvar typeis = require('type-is')\n\nhttp.createServer(function (req, res) {\n  var istext = typeis(req, ['text/*'])\n  res.end('you ' + (istext ? 'sent' : 'did not send') + ' me text')\n})\n```\n\n----------------------------------------\n\nTITLE: Enforcing Subscription Tier Access in API Route - Node.js (Express)\nDESCRIPTION: This backend snippet illustrates how to restrict access to a protected API endpoint based on user subscription tier. It checks the user\\'s plan (such as 'Pro') by retrieving the attribute from either a decoded JWT or a database lookup. If the user does not meet the required plan tier, a 403 response is returned with an upgrade-required message. This code should be placed inside an Express handler or controller and assumes authentication middleware already populates req.user. Requires Express.js and appropriate JWT verification/configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nif(user.plan !== 'Pro') { return res.status(403).json({error: \"Upgrade required\"}); }\n```\n\n----------------------------------------\n\nTITLE: Instantiating SourceNode in JavaScript\nDESCRIPTION: Demonstrates how to create a new `SourceNode` instance. The constructor accepts optional original line number (1-based), column number (0-based), source filename, a chunk of code or another `SourceNode` (or an array of these), and an optional original identifier name. This example shows nesting SourceNodes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.cpp\", [\n  new SourceNode(3, 4, \"b.cpp\", \"extern int status;\\n\"),\n  new SourceNode(5, 6, \"c.cpp\", \"std::string* make_string(size_t n);\\n\"),\n  new SourceNode(7, 8, \"d.cpp\", \"int main(int argc, char** argv) {}\\n\"),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Integration Using OpenAI Python Library\nDESCRIPTION: This Python code snippet configures the OpenAI Python SDK to access Azure OpenAI services by setting up environment variables and custom parameters. It specifies that the API type is Azure and sets the base endpoint, API version, and API key. It then makes a chat completion request using either the deployment name or 'engine' and fetches the response. Dependencies include the 'openai' and 'os' Python libraries, and the necessary Azure OpenAI service credentials set in the environment. Inputs are prompt messages and the deployment name; output is the generated response string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport openai\\nopenai.api_type = \"azure\"\\nopenai.api_base = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\\nopenai.api_version = \"2024-05-01-preview\"  # or the version your resource requires\\nopenai.api_key = os.getenv(\"AZURE_OPENAI_KEY\")\\nresponse = openai.ChatCompletion.create(\\n    engine=\"gpt-4\",  # use your deployment name\\n    messages=[{\"role\": \"system\", \"content\": system_prompt}, {\"role\": \"user\", \"content\": user_prompt}]\\n)\\nresult = response['choices'][0]['message']['content']\n```\n\n----------------------------------------\n\nTITLE: Streaming API Usage with iconv-lite in JavaScript (Node.js v0.10+)\nDESCRIPTION: Illustrates how to use the `iconv-lite` streaming API for handling character encoding conversions on Node.js streams. Examples include decoding an incoming HTTP request stream chunk-by-chunk, piping streams to convert file encoding from win1251 to ucs2, and using the `.collect()` helper method to buffer an entire decoded stream into a single string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/iconv-lite/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Answers for Testing - Prompts Library - JavaScript\nDESCRIPTION: Explains how to use 'prompts.inject' to programmatically provide answers for prompts, simulating user input without interactive entry. Useful for test automation and controlled test scenarios. Requires 'prompts' as a dependency; injected values must match the expected input order and types for the prompt sequence.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst prompts = require('prompts');\n\nprompts.inject([ '@terkelg', ['#ff0000', '#0000ff'] ]);\n\n(async () => {\n  const response = await prompts([\n    {\n      type: 'text',\n      name: 'twitter',\n      message: `What's your twitter handle?`\n    },\n    {\n      type: 'multiselect',\n      name: 'color',\n      message: 'Pick colors',\n      choices: [\n        { title: 'Red', value: '#ff0000' },\n        { title: 'Green', value: '#00ff00' },\n        { title: 'Blue', value: '#0000ff' }\n      ],\n    }\n  ]);\n\n  // => { twitter: 'terkelg', color: [ '#ff0000', '#0000ff' ] }\n})();\n```\n\n----------------------------------------\n\nTITLE: Full AST Walk and Node Reporting with acorn-walk - JavaScript\nDESCRIPTION: This code demonstrates the use of walk.full, traversing every node in the AST and printing each node's type and position (ch). Dependencies required: acorn and acorn-walk. The callback operates on every node found after parsing the source '1 + 1'. Limitations: The example assumes that node.ch exists on the nodes; in practice, the position information properties to use should be verified.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn-walk/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst acorn = require(\"acorn\")\nconst walk = require(\"acorn-walk\")\n\nwalk.full(acorn.parse(\"1 + 1\"), node => {\n  console.log(`There\\'s a ${node.type} node at ${node.ch}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Content-Disposition header value in Node.js\nDESCRIPTION: This snippet shows how to use the imported `contentDisposition` function to generate a `Content-Disposition` header string suitable for an HTTP response. It takes a filename (potentially containing non-ASCII characters like '∫') and returns the formatted header value, which is then set on the response object (`res`) using `setHeader`. Assumes `res` is an HTTP response object and `contentDisposition` is the imported module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-disposition/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nres.setHeader('Content-Disposition', contentDisposition('∫ maths.pdf'))\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Azure OpenAI with Python SDK\nDESCRIPTION: This Python snippet demonstrates configuring the openai Python library for Azure OpenAI integration by setting api_type, api_base, api_version, and api_key. It calls openai.ChatCompletion.create with the specified deployment engine and message sequence for system and user roles. Prerequisites include the 'openai' pip package and relevant Azure environment variables. The output extracted is the AI's message content in text format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport openai\nopenai.api_type = \"azure\"\nopenai.api_base = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\nopenai.api_version = \"2024-05-01-preview\"  # or the version your resource requires\nopenai.api_key = os.getenv(\"AZURE_OPENAI_KEY\")\nresponse = openai.ChatCompletion.create(\n    engine=\"gpt-4\",  # use your deployment name\n    messages=[{\"role\": \"system\", \"content\": system_prompt}, {\"role\": \"user\", \"content\": user_prompt}]\n)\nresult = response['choices'][0]['message']['content']\n```\n\n----------------------------------------\n\nTITLE: Expressing Type Extends Logic with Boolean Schema in JSON Schema\nDESCRIPTION: Represents the outcome of a conditional extends check (false) as a constant schema of type boolean in JSON Schema. This mapping is useful where higher-level type relationships are flattened to manifest constants for downstream logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  const: false,\n  type: 'boolean'\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Loading a YAML File in Node.js\nDESCRIPTION: Demonstrates reading a YAML file using Node.js `fs.readFileSync` and safely parsing its content with `js-yaml.safeLoad`. This method avoids parsing potentially unsafe types like functions or regexps. Errors during file reading or parsing are caught and logged.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst yaml = require('js-yaml');\nconst fs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  const doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating XP Threshold for Leveling Up (TypeScript)\nDESCRIPTION: This TypeScript function `xpThresholdForLevel` calculates the total experience points (XP) required to reach a specific level. It uses a sample formula (100 + (level - 1) * 50) to determine the threshold. This function is used by `checkLevelUp` to manage level progression in the gamification system.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nfunction xpThresholdForLevel(level: number) {\n  // example formula\n  return 100 + (level - 1) * 50;\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Gamification State (XP, Levels, Achievements) for a DECA Platform in TypeScript\nDESCRIPTION: This code provides state management for user gamification, including tracking XP, levels, achievements, and daily streaks. It includes functions to increment XP, unlock achievements, and trigger celebration animations (e.g., confetti) when milestones are reached. Dependencies can include a confetti animation library and persistent storage (such as localStorage or a backend API). Key parameters are XP values, achievement IDs, and streak counters. Outputs are state changes and side effects like triggering animations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Gamification logic\\nexport type Achievement = { id: string; name: string; unlocked: boolean };\\n\\nexport class GamificationState {\\n  xp = 0;\\n  level = 1;\\n  streak = 0;\\n  achievements: Achievement[] = [];\\n\\n  addXP(amount: number) {\\n    this.xp += amount;\\n    if (this.xp >= this.xpForNextLevel()) {\\n      this.levelUp();\\n    }\\n  }\\n\\n  levelUp() {\\n    this.level += 1;\\n    // Trigger confetti animation\\n    // confetti();\\n  }\\n\\n  unlockAchievement(id: string) {\\n    const ach = this.achievements.find(a => a.id === id);\\n    if (ach && !ach.unlocked) {\\n      ach.unlocked = true;\\n      // confetti();\\n    }\\n  }\\n\\n  xpForNextLevel() {\\n    return this.level * 100;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Blob-Like Streams to FormData in node-fetch - JavaScript\nDESCRIPTION: This snippet demonstrates how to append an arbitrary stream-like object to a FormData instance for multipart upload in node-fetch. The appended object must implement Symbol.toStringTag, size, and either a stream() or arrayBuffer() method. This enables posting uploads, such as custom Buffers or Readable streams, that mimic a Blob.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nformData.append('upload', {\\n\\t[Symbol.toStringTag]: 'Blob',\\n\\tsize: 3,\\n  *stream() {\\n    yield new Uint8Array([97, 98, 99])\\n\\t},\\n\\tarrayBuffer() {\\n\\t\\treturn new Uint8Array([97, 98, 99]).buffer\\n\\t}\\n}, 'abc.txt')\n```\n\n----------------------------------------\n\nTITLE: Simulating process.nextTick with FakeTimers - JavaScript\nDESCRIPTION: Mimics Node.js process.nextTick functionality with 'clock.nextTick' for synchronous testing. Accepts a callback to run as a microtask. Only available in Node.js environments and may not be enabled by default.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclock.nextTick(callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Node.js SDK for Azure OpenAI\nDESCRIPTION: This snippet demonstrates how to configure the official OpenAI Node.js SDK to connect to an Azure OpenAI endpoint instead of the default OpenAI API. It requires setting the `basePath` to the Azure endpoint URL and providing the Azure API key, typically retrieved from environment variables (`process.env.AZURE_OPENAI_ENDPOINT`, `process.env.AZURE_OPENAI_KEY`). It also sets the necessary 'api-key' header. This configuration allows subsequent API calls to target the specified Azure OpenAI resource.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742624126265.txt#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { OpenAIApi, Configuration } = require(\"openai\");\nconst config = new Configuration({\n  basePath: process.env.AZURE_OPENAI_ENDPOINT, // e.g. \"https://<resource>.openai.azure.com/\",\n  apiKey: process.env.AZURE_OPENAI_KEY\n});\n// Override the default basePath to include the API version and deployment name\nconfig.baseOptions = { headers: { 'api-key': config.apiKey } }; \nconst openai = new OpenAIApi(config);\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind Utility Classes in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use Tailwind CSS utility classes directly within a React component. Classes like `bg-gray-100`, `p-6`, `rounded-lg`, and `shadow-md` are applied to a `div` element to style its background, padding, border radius, and shadow, showcasing the utility-first approach.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"bg-gray-100 p-6 rounded-lg shadow-md\">\n```\n\n----------------------------------------\n\nTITLE: Making All Properties Required in Object Schema with TypeBox and JSON Schema - TypeScript/JSON\nDESCRIPTION: This group of snippets demonstrates converting an object type with optional properties to one where all fields are required. It uses TypeBox for schema definition in TypeScript, the 'Required' utility type in TypeScript, and the associated JSON Schema. Dependencies include TypeBox and TypeScript for manipulation, and a JSON Schema validator for JSON. The schema explicitly lists all properties as required; input objects must include both properties.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Required(\n  Type.Object({\n    x: Type.Optional(Type.Number()),\n    y: Type.Optional(Type.Number())\n  })\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = Required<{\n  x?: number,\n  y?: number\n}>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"x\", \"y\"],\n  \"properties\": {\n    \"x\": {\n      \"type\": \"number\"\n    },\n    \"y\": {\n      \"type\": \"number\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing AI API Endpoints with Vitest and Supertest - TypeScript\nDESCRIPTION: This snippet performs integration tests for AI API endpoints using Express, Vitest, and Supertest. It mocks authentication middleware and service methods to isolate API logic. The test confirms that posting to /api/ai/generate-roleplay with example input returns a 200 response with the correct structure. Requires an Express server, mocked modules, Vitest, and Supertest installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// server/tests/api.test.ts\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest'\nimport request from 'supertest'\nimport express from 'express'\nimport { setupAIRoutes } from '../routes/aiRoutes'\n\n// Mock authentication middleware\nvi.mock('../middlewares/auth', () => ({\n  isAuthenticated: (req, res, next) => next()\n}))\n\n// Mock Azure OpenAI service\nvi.mock('../services/azureOpenai', () => ({\n  generateRoleplay: vi.fn().mockResolvedValue({\n    title: \"Test Roleplay\",\n    scenario: \"This is a test scenario\"\n  })\n}))\n\ndescribe('API Routes', () => {\n  const app = express()\n  app.use(express.json())\n  \n  beforeAll(() => {\n    setupAIRoutes(app)\n  })\n  \n  it('should generate a roleplay scenario', async () => {\n    const response = await request(app)\n      .post('/api/ai/generate-roleplay')\n      .send({\n        instructionalArea: 'Marketing',\n        performanceIndicators: ['PI1', 'PI2'],\n        difficultyLevel: 'medium'\n      })\n    \n    expect(response.status).toBe(200)\n    expect(response.body).toEqual({\n      title: \"Test Roleplay\",\n      scenario: \"This is a test scenario\"\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Custom onSubmit Callback Example - Prompts API - JavaScript\nDESCRIPTION: Shows how to provide a custom callback for the 'onSubmit' option of the prompts API. The callback logs each answer immediately after submission. This pattern enables custom logic (e.g., validation, logging, short-circuiting) for each input; requires 'prompts' installed and questions defined.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const questions = [{ ... }];\n  const onSubmit = (prompt, answer) => console.log(`Thanks I got ${answer} from ${prompt.name}`);\n  const response = await prompts(questions, { onSubmit });\n})();\n```\n\n----------------------------------------\n\nTITLE: Enforcing Subscription Tier Access in Node.js/Express Backend\nDESCRIPTION: This backend JavaScript snippet (likely for Node.js/Express or Azure Functions) demonstrates how to restrict access to an API endpoint based on the user's subscription plan. It checks the user's `plan` property (presumably obtained after authentication) and returns a 403 Forbidden response with a JSON error message if the plan does not meet the required level ('Pro'), effectively implementing feature gating. Assumes user authentication and plan information are available in the request context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nif(user.plan !== 'Pro') { return res.status(403).json({error: \"Upgrade required\"}); }\n```\n\n----------------------------------------\n\nTITLE: Using Omit Utility Type in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript `Omit<T, K>` utility type. It defines an `Animal` interface and then creates a new type `AnimalShortInfo` by omitting the 'images' and 'paragraphs' properties from `Animal`. This new type is intended for scenarios like rendering a concise hover tooltip, as shown by the `renderAnimalHoverInfo` function signature.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ninterface Animal {\n\t\timageUrl: string;\n\t\tspecies: string;\n\t\timages: string[];\n\t\tparagraphs: string[];\n}\n\n// Creates new type with all properties of the `Animal` interface\n// except 'images' and 'paragraphs' properties. We can use this\n// type to render small hover tooltip for a wiki entry list.\ntype AnimalShortInfo = Omit<Animal, 'images' | 'paragraphs'>;\n\nfunction renderAnimalHoverInfo (animals: AnimalShortInfo[]): HTMLElement {\n\t\tconst container =  document.createElement('div');\n\t\t// Internal implementation.\n\t\treturn container;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Simulated Immediate with FakeTimers - JavaScript\nDESCRIPTION: Schedules a callback for execution after a simulated 0ms delay with 'clock.setImmediate'. Takes a callback and returns an ID or object. Execution requires a call to clock.tick(). Methods mimic Node.js' setImmediate with environment-specific behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = clock.setImmediate(callback)\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/core with yarn (Shell)\nDESCRIPTION: This shell command uses the Yarn package manager to install the `@babel/core` package. The `--dev` flag specifies that it should be added as a development dependency in the project's `package.json` file. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/core --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI SDK Client in Node.js\nDESCRIPTION: This snippet sets up the OpenAI Node SDK to communicate with an Azure OpenAI deployment. It configures the SDK instance by specifying Azure endpoint URLs and API keys, and shows how to include custom headers for the Azure API requirement. Dependencies include the 'openai' npm package, and the code expects required credentials in environment variables. Inputs are the Azure endpoint and key; the main output is a configured OpenAIApi client object for subsequent API calls. Ensure Node.js project is properly initialized and environment variables are set.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { OpenAIApi, Configuration } = require(\"openai\");\nconst config = new Configuration({\n  basePath: process.env.AZURE_OPENAI_ENDPOINT, // e.g. \"https://<resource>.openai.azure.com/\",\n  apiKey: process.env.AZURE_OPENAI_KEY\n});\n// Override the default basePath to include the API version and deployment name\nconfig.baseOptions = { headers: { 'api-key': config.apiKey } }; \nconst openai = new OpenAIApi(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing React + Vite Project with TypeScript and Tailwind CSS (Bash)\nDESCRIPTION: This snippet guides the setup of a new Vite-powered React application using TypeScript and Tailwind CSS. It demonstrates installing runtime and development dependencies (including React Router, React Query, Axios, Framer Motion, and Headless UI), as well as commands to initialize Tailwind's configuration files. Designed for use in the root or 'client' directory, the commands automate boilerplate setup for a production-ready development environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# Navigate to client directory\\ncd client\\n\\n# Initialize Vite project with React and TypeScript\\nnpm create vite@latest . -- --template react-ts\\n\\n# Install dependencies\\nnpm install react-router-dom @tanstack/react-query axios framer-motion tailwindcss postcss autoprefixer @headlessui/react\\n\\n# Install development dependencies\\nnpm install -D postcss autoprefixer tailwindcss\\n\\n# Initialize Tailwind CSS\\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS for Responsive Padding and Text Size in TSX\nDESCRIPTION: This TSX snippet demonstrates applying responsive utility classes from Tailwind CSS within a React component. It uses `p-4`, `md:p-8`, `lg:p-12` for responsive padding and `text-2xl`, `sm:text-3xl`, `md:text-4xl` for responsive font sizes on the `h1` element. It also shows applying dark mode variants (`dark:bg-[var(--surface-2)]`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"p-4 md:p-8 lg:p-12 bg-white dark:bg-[var(--surface-2)]\">\n  <h1 className=\"text-2xl sm:text-3xl md:text-4xl\">Responsive Title</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend API Helper Function in JavaScript\nDESCRIPTION: This JavaScript code defines an asynchronous function `generateRoleplay` designed to communicate with a backend API endpoint. It uses the `fetch` API to send a POST request to `/api/generateRoleplay` with the event type and performance indicators (PIs) as JSON payload, and returns the parsed JSON response from the backend. This abstracts the API call logic for easier use within React components.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function generateRoleplay(eventType, PIs) {\n  const res = await fetch('/api/generateRoleplay', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ eventType, performanceIndicators: PIs })\n  });\n  return res.json(); // assuming your endpoint returns JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/parser Using yarn - Shell\nDESCRIPTION: Installs the @babel/parser package as a development dependency using yarn for JavaScript projects. Requires yarn to be installed and initialized in the project environment. The command updates the project dependencies and includes @babel/parser under devDependencies. The input is a shell command for yarn, and the output is the package added to the project setup.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/parser --dev\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of picomatch in JavaScript\nDESCRIPTION: Demonstrates requiring the `picomatch` library, creating a matcher function `isMatch` for the glob pattern `*.js`, and using it to test various strings. The matcher returns `true` only for strings ending in `.js` at the top level.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst pm = require('picomatch');\nconst isMatch = pm('*.js');\n\nconsole.log(isMatch('abcd')); //=> false\nconsole.log(isMatch('a.js')); //=> true\nconsole.log(isMatch('a.md')); //=> false\nconsole.log(isMatch('a/b.js')); //=> false\n```\n\n----------------------------------------\n\nTITLE: Advanced: Overriding the content Property to Inject Source Code (JavaScript)\nDESCRIPTION: Demonstrates use of the loader's content property to supply or override the original file source content in the remapped source map. This is useful if the parent sourcemap lacks sourcesContent or you want to customize the output. Requires @ampproject/remapping and the fs module to read file contents. The loader can set ctx.content to a string (from file or elsewhere), to include source text in the result; input is a sourcemap and loader, output is a sourcemap with sourcesContent property.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@ampproject/remapping/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst remapped = remapping(\n  minifiedTransformedMap,\n  (file, ctx) => {\n\n    if (file === 'transformed.js') {\n      // transformedMap does not include a `sourcesContent` field, so usually the remapped sourcemap\n      // would not include any `sourcesContent` values.\n      return transformedMap;\n    }\n\n    console.assert(file === 'helloworld.js');\n    // We can read the file to provide the source content.\n    ctx.content = fs.readFileSync(file, 'utf8');\n    return null;\n  }\n);\n\nconsole.log(remapped);\n// {\n//   …,\n//   sourcesContent: [\n//     'console.log(\"Hello world!\")',\n//   ],\n// };\n```\n\n----------------------------------------\n\nTITLE: Negotiating Accept-Charset Header - JavaScript\nDESCRIPTION: This snippet shows how to negotiate character set preferences with Negotiator given an Accept-Charset header. It demonstrates retrieving both the preferred order and best single match for charsets, supporting server-specified options. Requires a request object with relevant Accept-Charset header; outputs preference arrays or single result values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/negotiator/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\navailableCharsets = ['utf-8', 'iso-8859-1', 'iso-8859-5']\n\nnegotiator = new Negotiator(request)\n\n// Let's say Accept-Charset header is 'utf-8, iso-8859-1;q=0.8, utf-7;q=0.2'\n\nnegotiator.charsets()\n// -> ['utf-8', 'iso-8859-1', 'utf-7']\n\nnegotiator.charsets(availableCharsets)\n// -> ['utf-8', 'iso-8859-1']\n\nnegotiator.charset(availableCharsets)\n// -> 'utf-8'\n```\n\n----------------------------------------\n\nTITLE: Array List Input with Separator - JavaScript\nDESCRIPTION: Configures a prompt to receive a list of string values, split using a specified separator (comma by default). The example sets 'type' to 'list', names the response, and applies an initial empty value. This prompt is useful for collecting multiple entries in a single field, with customization possible for separator and value formatting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'list',\\n  name: 'value',\\n  message: 'Enter keywords',\\n  initial: '',\\n  separator: ','\\n}\n```\n\n----------------------------------------\n\nTITLE: Yargs Argument Parsing Usage Example - Bash\nDESCRIPTION: Provides sample command-line executions for the 'plunder.js' script using various flag values. Demonstrates how different argument values impact the script output. No dependencies required other than an executable JavaScript script. Shows expected terminal outputs for users testing the previous JavaScript example.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./plunder.js --ships=4 --distance=22\\nPlunder more riffiwobbles!\\n\\n$ ./plunder.js --ships 12 --distance 98.7\\nRetreat from the xupptumblers!\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Deduplication with 'inflight' in JavaScript\nDESCRIPTION: This example demonstrates how to use the `inflight` library within a function (`req`) that simulates an asynchronous operation. The `inflight(key, callback)` function is called first. If it returns a truthy value (a new wrapped callback), the async operation proceeds. This returned callback is internally designed to call all registered callbacks for that specific `key` upon completion and is also wrapped with `once()` to ensure it's only called once. If `inflight` returns a falsey value, it indicates a request with the same `key` is already 'in flight', the provided callback has been added to the queue for the existing request, and the `req` function should simply return without initiating a new operation. The subsequent calls `req('foo', cbX)` show that only the first call initiates the `setTimeout`; the others reuse the ongoing request.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/inflight/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar inflight = require('inflight')\n\n// some request that does some stuff\nfunction req(key, callback) {\n  // key is any random string.  like a url or filename or whatever.\n  //\n  // will return either a falsey value, indicating that the\n  // request for this key is already in flight, or a new callback\n  // which when called will call all callbacks passed to inflightk\n  // with the same key\n  callback = inflight(key, callback)\n\n  // If we got a falsey value back, then there's already a req going\n  if (!callback) return\n\n  // this is where you'd fetch the url or whatever\n  // callback is also once()-ified, so it can safely be assigned\n  // to multiple events etc.  First call wins.\n  setTimeout(function() {\n    callback(null, key)\n  }, 100)\n}\n\n// only assigns a single setTimeout\n// when it dings, all cbs get called\nreq('foo', cb1)\nreq('foo', cb2)\nreq('foo', cb3)\nreq('foo', cb4)\n```\n```\n\n----------------------------------------\n\nTITLE: Computing Mapping Column Spans Using SourceMapConsumer in JavaScript\nDESCRIPTION: This example demonstrates the use of computeColumnSpans() to augment mapping entries in a SourceMapConsumer such that each generated mapping is annotated with a lastColumn field, making mapping ranges explicit. Requires a consumer instance and suitable source map data. Before and after results are shown using allGeneratedPositionsFor(), which returns arrays of generated mapping positions. The operation is essential for tools needing column range information for highlighting or diagnostics.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Before:\nconsumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1 },\n//   { line: 2,\n//     column: 10 },\n//   { line: 2,\n//     column: 20 } ]\n\nconsumer.computeColumnSpans();\n\n// After:\nconsumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1,\n//     lastColumn: 9 },\n//   { line: 2,\n//     column: 10,\n//     lastColumn: 19 },\n//   { line: 2,\n//     column: 20,\n//     lastColumn: Infinity } ]\n\n```\n\n----------------------------------------\n\nTITLE: Using escalade Asynchronously to Find Files (JavaScript)\nDESCRIPTION: Example demonstrating the asynchronous usage of `escalade` in Node.js. It imports the library, sets a starting point (`input`), and uses an async callback function invoked for each parent directory to search upwards for 'package.json'. It also shows the result when searching for a non-existent file (`missing123.txt`) and logs the traversal path. Requires Node.js >= 8.x and the `escalade` package. The callback receives the current directory path (`dir`) and an array of its contents' names (`names`); returning a truthy value (like the filename) stops the search and returns the resolved absolute path.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escalade/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//~> demo.js\nimport { join } from 'path';\nimport escalade from 'escalade';\n\nconst input = join(__dirname, 'demo.js');\n// or: const input = __dirname;\n\nconst pkg = await escalade(input, (dir, names) => {\n  console.log('~> dir:', dir);\n  console.log('~> names:', names);\n  console.log('---');\n\n  if (names.includes('package.json')) {\n    // will be resolved into absolute\n    return 'package.json';\n  }\n});\n\n//~> dir: /Users/lukeed/oss/escalade/test/fixtures/foobar\n//~> names: ['demo.js']\n//---\n//~> dir: /Users/lukeed/oss/escalade/test/fixtures\n//~> names: ['index.js', 'foobar']\n//---\n//~> dir: /Users/lukeed/oss/escalade/test\n//~> names: ['fixtures']\n//---\n//~> dir: /Users/lukeed/oss/escalade\n//~> names: ['package.json', 'test']\n//---\n\nconsole.log(pkg);\n//=> /Users/lukeed/oss/escalade/package.json\n\n// Now search for \"missing123.txt\"\n// (Assume it doesn't exist anywhere!)\nconst missing = await escalade(input, (dir, names) => {\n  console.log('~> dir:', dir);\n  return names.includes('missing123.txt') && 'missing123.txt';\n});\n\n//~> dir: /Users/lukeed/oss/escalade/test/fixtures/foobar\n//~> dir: /Users/lukeed/oss/escalade/test/fixtures\n//~> dir: /Users/lukeed/oss/escalade/test\n//~> dir: /Users/lukeed/oss/escalade\n//~> dir: /Users/lukeed/oss\n//~> dir: /Users/lukeed\n//~> dir: /Users\n//~> dir: /\n\nconsole.log(missing);\n//=> undefined\n```\n\n----------------------------------------\n\nTITLE: Using graceful-fs as a Drop-in Replacement for fs in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of the `graceful-fs` module in Node.js. It shows how to require `graceful-fs` instead of the standard `fs` module and then use its methods (like `readFile`) in the same way. The module handles potential errors like `EMFILE` more gracefully than the native `fs`. No external dependencies other than Node.js and the `graceful-fs` package are needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/graceful-fs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// use just like fs\nvar fs = require('graceful-fs')\n\n// now go and do stuff with it...\nfs.readFile('some-file-or-whatever', (err, data) => {\n  // Do stuff here.\n})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Natural vs Standard Sorting (Text)\nDESCRIPTION: This text snippet demonstrates the difference between standard lexicographical sorting and natural order sorting using file names as an example. Natural sorting correctly places 'img2.png' before 'img10.png', unlike standard sorting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStandard sorting:   Natural order sorting:\n    img1.png            img1.png\n    img10.png           img2.png\n    img12.png           img10.png\n    img2.png            img12.png\n```\n\n----------------------------------------\n\nTITLE: Using resolve-cwd to Resolve File Paths in Node.js JavaScript\nDESCRIPTION: Demonstrates how to use the resolve-cwd package in a Node.js application to resolve the absolute path of a local module relative to the current working directory. Requires the resolve-cwd package to be installed and accessible via require(). The snippet logs the script's directory, the process's current working directory, and uses resolveCwd('./foo') to resolve the path to './foo.js' from the CWD. Inputs include the module id string, and outputs are the resolved absolute path.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-cwd/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolveCwd = require('resolve-cwd');\n\nconsole.log(__dirname);\n//=> '/Users/sindresorhus/rainbow'\n\nconsole.log(process.cwd());\n//=> '/Users/sindresorhus/unicorn'\n\nconsole.log(resolveCwd('./foo'));\n//=> '/Users/sindresorhus/unicorn/foo.js'\n```\n\n----------------------------------------\n\nTITLE: Creating Object Intersection Types with TypeBox in TypeScript\nDESCRIPTION: Demonstrates how to create an intersection of two object schemas (each requiring a single number property) using TypeBox's Type.Intersect method in TypeScript. This approach composes multiple object types by ensuring all required keys are present in the resulting type. Requires the TypeBox library; expects each schema component to be a valid Type.Object. Inputs: array of Type.Object schemas; Output: a combined object schema with all fields required by input schemas.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Intersect([\n  Type.Object({\n    x: Type.Number()\n  }),\n  Type.Object({\n    y: Type.Number()\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Using 'toidentifier' to Convert a String (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the 'toidentifier' module. It first imports the module using 'require' and then calls the exported function with the input string 'Bad Request'. The output, 'BadRequest', is printed to the console, illustrating the module's function of converting spaced words into a single camel-cased identifier.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/toidentifier/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar toIdentifier = require('toidentifier')\n\nconsole.log(toIdentifier('Bad Request'))\n// => \"BadRequest\"\n```\n\n----------------------------------------\n\nTITLE: Making a Simple POST Request with node-fetch - JavaScript\nDESCRIPTION: Demonstrates sending a POST request with a plain body ('a=1') to a test endpoint, receiving the JSON response, and printing it. Highlights setting the HTTP method and body parameters with fetch.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nconst response = await fetch('https://httpbin.org/post', {method: 'POST', body: 'a=1'});\nconst data = await response.json();\n\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with npm and Benchmark Script - Bash\nDESCRIPTION: This bash snippet demonstrates how to install development dependencies using npm and execute benchmark tests for the project. Required dependencies include Node.js, npm, and the project's benchmark script. It assumes a package.json with scripts set up correctly and the presence of a benchmark script. The first command installs dev dependencies, while the second runs the benchmark suite, outputting performance metrics for relevant code paths.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -d && npm benchmark\n```\n\n----------------------------------------\n\nTITLE: Handling jest-circus Events in a Custom Jest Environment using JavaScript\nDESCRIPTION: This snippet demonstrates how to extend the base `jest-environment-node` to create a custom Jest test environment. It showcases the implementation of the `handleTestEvent` method, which allows listening and reacting to various lifecycle events (like `test_start`) emitted by the `jest-circus` runner, using the `Event` and `State` types provided by `jest-circus`. Note that mutating event or state data is unsupported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-circus/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Event, State} from 'jest-circus';\nimport {TestEnvironment as NodeEnvironment} from 'jest-environment-node';\n\nclass MyCustomEnvironment extends NodeEnvironment {\n  //...\n\n  async handleTestEvent(event: Event, state: State) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Azure SDK Log Output Using AzureLogger - JavaScript\nDESCRIPTION: Illustrates customizing log output handling by setting a verbose log level and overriding the default AzureLogger's log method. Requires '@azure/logger' installed. The AzureLogger instance's log method is replaced to route logs to console.log instead of stderr. Input: none (affects output destination). Output: All Azure SDK logs are printed to stdout. Useful for adapting logging destinations. Caution: Overriding core behaviors may affect log capture in complex deployments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/logger/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AzureLogger, setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"verbose\");\n\n// override logging to output to console.log (default location is stderr)\nAzureLogger.log = (...args) => {\n  console.log(...args);\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring ConfettiExplosion Component Props in React (TSX)\nDESCRIPTION: Defines the `ConfettiExplosion` React component, a reusable component for displaying confetti animations. It accepts customization props like `duration`, `particleCount`, `spread`, `origin`, `colors`, and an `onComplete` callback. The implementation details are omitted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/components/animations/confetti-explosion.tsx\n\nexport default function ConfettiExplosion({\n  duration = 3000,\n  particleCount = 200,\n  spread = 360,\n  origin = { x: 0.5, y: 0.5 },\n  colors,\n  onComplete,\n}: ConfettiExplosionProps) {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Importing fast-json-stable-stringify Module in Node.js\nDESCRIPTION: Shows how to import the fast-json-stable-stringify package using CommonJS require syntax. This is the recommended way to include the module in Node.js environments, and is a prerequisite for all subsequent stringification operations shown in other examples in this file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fast-json-stable-stringify/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar stringify = require('fast-json-stable-stringify')\n```\n\n----------------------------------------\n\nTITLE: Generating Source Maps with SourceNode High-Level API in JavaScript\nDESCRIPTION: This snippet illustrates using the SourceNode class to generate source maps during code compilation, mapping AST nodes to output code. It recursively composes SourceNodes representing different AST node types, including binary expressions and literals, and then generates the code string and source map together. Prerequisites include an AST from a parser and source-map-js; input parameters involve the AST node structure, expecting node type, location, and value. Outputs both the generated code and the corresponding source map.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction compile(ast) {\n  switch (ast.type) {\n  case 'BinaryExpression':\n    return new SourceNode(\n      ast.location.line,\n      ast.location.column,\n      ast.location.source,\n      [compile(ast.left), \" + \", compile(ast.right)]\n    );\n  case 'Literal':\n    return new SourceNode(\n      ast.location.line,\n      ast.location.column,\n      ast.location.source,\n      String(ast.value)\n    );\n  // ...\n  default:\n    throw new Error(\"Bad AST\");\n  }\n}\n\nvar ast = parse(\"40 + 2\", \"add.js\");\nconsole.log(compile(ast).toStringWithSourceMap({\n  file: 'add.js'\n}));\n// { code: '40 + 2',\n//   map: [object SourceMapGenerator] }\n```\n\n----------------------------------------\n\nTITLE: Enabling Proposed Babel Parser Plugins in Vite React Plugin - JavaScript\nDESCRIPTION: Shows how to enable experimental ECMAScript syntax proposals, such as decorators, by passing parser plugins to Babel's parserOpts. This expands syntax support during parsing but does not add transformations. Requires @vitejs/plugin-react and a Babel parser plugin. Passes the 'babel.parserOpts.plugins' with an array of plugins as parameter.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nreact({\\n  babel: {\\n    parserOpts: {\\n      plugins: ['decorators-legacy'],\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of merge-descriptors in JavaScript\nDESCRIPTION: This JavaScript example demonstrates the core functionality of the `merge-descriptors` library. It defines two objects, `thing` (with a getter property `name`) and `animal`. The `merge` function (assumed to be imported from the library) is then called to copy the property descriptor for `name` from `thing` to `animal`. Subsequently, accessing `animal.name` executes the getter copied from `thing`, verifying that the merge operation successfully transferred the descriptor, resulting in `animal.name` evaluating to 'jon'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/merge-descriptors/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar thing = {\n  get name() {\n    return 'jon'\n  }\n}\n\nvar animal = {\n\n}\n\nmerge(animal, thing)\n\nanimal.name === 'jon'\n```\n\n----------------------------------------\n\nTITLE: Installing Accepts Package Using NPM - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the \"accepts\" npm package using the npm CLI. It requires Node.js and npm to be installed on the system. Running this command will add \"accepts\" as a dependency to your project, enabling its use for HTTP content negotiation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/accepts/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install accepts\n```\n\n----------------------------------------\n\nTITLE: Implementing a Caching Worker Function for jest-worker in JavaScript\nDESCRIPTION: This worker script (`worker.js`) exports a `transform` function designed for use with bound workers. It maintains an in-memory `cache` keyed by filename. When called, it first checks the cache; if a result exists for the filename, it's returned immediately. Otherwise, it uses `@babel/core`'s `transformFileAsync` to process the file (requiring `@babel/core` as a dependency), stores the asynchronous result in the cache upon completion, and then returns the result. This leverages the `computeWorkerKey` in the parent to ensure subsequent requests for the same file hit the cache.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport babel from '@babel/core';\n\nconst cache = Object.create(null);\n\nexport function transform(filename) {\n  if (cache[filename]) {\n    return cache[filename];\n  }\n\n  // jest-worker can handle both immediate results and thenables. If a\n  // thenable is returned, it will be await'ed until it resolves.\n  return babel.transformFileAsync(filename).then(result => {\n    cache[filename] = result;\n\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Matching IP Address Against a CIDR Range - JavaScript\nDESCRIPTION: Illustrates how to parse an IPv6 address and a CIDR range, then check whether the address belongs to the given CIDR range using the match method. Requires ipaddr.js to be imported. Input addresses are parsed from string, and match returns a boolean.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"2001:db8:1234::1\");\nvar range = ipaddr.parse(\"2001:db8::\");\n\naddr.match(range, 32); // => true\n```\n\n----------------------------------------\n\nTITLE: Generating Content-Type Headers with mime.contentType - JavaScript\nDESCRIPTION: This code demonstrates how to use 'mime.contentType' to create a complete content-type header, optionally with a charset. It accepts either a file extension, filename, or content-type string, automatically determines the appropriate type and charset, and returns a properly formatted content-type string. Dependencies include the mime-types package and, in some cases, usages of 'path.extname' from Node.js for extracting file extensions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-types/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmime.contentType('markdown') // 'text/x-markdown; charset=utf-8'\nmime.contentType('file.json') // 'application/json; charset=utf-8'\nmime.contentType('text/html') // 'text/html; charset=utf-8'\nmime.contentType('text/html; charset=iso-8859-1') // 'text/html; charset=iso-8859-1'\n\n// from a full path\nmime.contentType(path.extname('/path/to/file.json')) // 'application/json; charset=utf-8'\n```\n\n----------------------------------------\n\nTITLE: Disabling Globstar (`**`) Matching with `noglobstar` in Micromatch (JavaScript)\nDESCRIPTION: Shows the effect of the `noglobstar: true` option in `micromatch`. When enabled, the globstar (`**`) pattern loses its ability to match nested directories recursively and only matches path segments that do not contain slashes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nmicromatch(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**');\n//=> ['a/b', 'a/b/c', 'a/b/c/d']\n\nmicromatch(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**', {noglobstar: true});\n//=> ['a/b']\n```\n\n----------------------------------------\n\nTITLE: Using camelcase to Convert Strings - JavaScript\nDESCRIPTION: Shows how to require and use the 'camelcase' function to convert various string formats to camelCase and PascalCase. Covers passing single strings, arrays of strings, and using the options object (such as pascalCase). Demonstrates common transformations and the use of process.argv for command-line argument parsing. Requires the 'camelcase' package to be installed and a Node.js environment for execution. Outputs are either returned directly or printed to the console, depending on usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/camelcase/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst camelCase = require('camelcase');\n\ncamelCase('foo-bar');\n//=> 'fooBar'\n\ncamelCase('foo_bar');\n//=> 'fooBar'\n\ncamelCase('Foo-Bar');\n//=> 'fooBar'\n\ncamelCase('Foo-Bar', {pascalCase: true});\n//=> 'FooBar'\n\ncamelCase('--foo.bar', {pascalCase: false});\n//=> 'fooBar'\n\ncamelCase('foo bar');\n//=> 'fooBar'\n\nconsole.log(process.argv[3]);\n//=> '--foo-bar'\ncamelCase(process.argv[3]);\n//=> 'fooBar'\n\ncamelCase(['foo', 'bar']);\n//=> 'fooBar'\n\ncamelCase(['__foo__', '--bar'], {pascalCase: true});\n//=> 'FooBar'\n```\n\n----------------------------------------\n\nTITLE: Running Asynchronous Parameterized Tests using each.test and done Callback in JavaScript\nDESCRIPTION: This snippet shows how to use the asynchronous form of 'each.test' by passing a 'done' callback, making it suitable for testing asynchronous code. Dependencies include a Jest-like test environment and a custom function 'callSomeAsynchronousFunction'. Each test expects an asynchronous callback with the parameter 'str', and completes the test when 'done' is called after asserting the message value.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n----------------------------------------\n\nTITLE: Using async/await with writeFileAtomic for Asynchronous File Writing in JavaScript\nDESCRIPTION: Illustrates using `async/await` syntax with `writeFileAtomic` for cleaner asynchronous code structure and error handling via try/catch blocks. Writes 'Hello Node' to 'message.txt' with specified ownership. Requires the `write-file-atomic` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/write-file-atomic/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  try {\n    await writeFileAtomic('message.txt', 'Hello Node', {chown:{uid:100,gid:50}});\n    console.log('It\\'s saved!');\n  } catch (err) {\n    console.error(err);\n    process.exit(1);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Parsing PostgreSQL Connection String into ClientConfig with pg-connection-string in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates converting a PostgreSQL connection string directly into a ClientConfig object compatible with the pg (node-postgres) library. It imports parseIntoClientConfig from pg-connection-string and ClientConfig from pg. This approach resolves incompatibility between pg-connection-string\\'s ConnectionOptions and the pg library\\'s ClientConfig by returning a correctly structured object. Input is a connection URL string, and output is a typed ClientConfig suitable for instantiating a pg.Client. Dependencies include the pg and pg-connection-string npm packages. Limitations include requiring TypeScript type imports and version compatibility between pg and pg-connection-string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-connection-string/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ClientConfig } from 'pg';\nimport { parseIntoClientConfig } from 'pg-connection-string';\n\nconst config: ClientConfig = parseIntoClientConfig('postgres://someuser:somepassword@somehost:381/somedatabase')\n```\n\n----------------------------------------\n\nTITLE: Unified Diff Output Without Annotations for String Comparison\nDESCRIPTION: A minimal unified diff representation demonstrating changes between string inputs without expected/received annotation headers, as produced with omitAnnotationLines enabled.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n  common\\n- changed from\\n+ changed to\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Modules with RegExp using require-directory (JavaScript)\nDESCRIPTION: Illustrates how to use the `include` option with a Regular Expression to filter which modules are loaded. Only files whose full path matches the RegExp (e.g., ending with `onlyinclude.js`) will be included in the resulting hash.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  whitelist = /onlyinclude.js$/,\n  hash = requireDirectory(module, {include: whitelist});\n```\n\n----------------------------------------\n\nTITLE: Mutating Values In-Place with TypeBox Value.Mutate in TypeScript\nDESCRIPTION: Demonstrates the `Value.Mutate` function from TypeBox for performing deep, mutable assignments on an existing object (`A`) based on a source object. This function modifies the target object in place while preserving internal object references where possible, as shown by the `R1` and `R2` checks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst Y = { z: 1 }                                   // const Y = { z: 1 } \n\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\n\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }             \n\n\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }   \n\nconst R0 = A.x.y.z === 2                             // const R0 = 2\n\nconst R1 = A.x.y === Y                               // const R1 = true\n\nconst R2 = A.x === X                                 // const R2 = true\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Events with anyEvent() in JavaScript\nDESCRIPTION: Demonstrates how to use the `anyEvent()` method of an Emittery instance to get an async iterator. This iterator buffers tuples of event names and data for every emitted event. The example shows iterating through events using `.next()` and unsubscribing using `.return()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\nconst iterator = emitter.anyEvent();\n\nemitter.emit('🦄', '🌈1'); // Buffered\nemitter.emit('🌟', '🌈2'); // Buffered\n\niterator.next()\n\t.then(({value, done}) => {\n\t\t// done === false\n\t\t// value is ['🦄', '🌈1']\n\t\treturn iterator.next();\n\t})\n\t.then(({value, done}) => {\n\t\t// done === false\n\t\t// value is ['🌟', '🌈2']\n\t\t// Revoke subscription\n\t\treturn iterator.return();\n\t})\n\t.then(({done}) => {\n\t\t// done === true\n\t});\n```\n\n----------------------------------------\n\nTITLE: Using .mockReturnThis() with Jest Mock Functions in JavaScript\nDESCRIPTION: This code sample illustrates the typical use of the .mockReturnThis() method with mock functions created by jest-mock. The syntax shows how to have a mock function always return its own 'this' context, which is especially useful for chaining APIs. Requires Jest and jest-mock as dependencies, with mockFn being a previously initialized mock function. No outside parameters are needed beyond the function context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-mock/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmockFn.mockImplementation(function () {\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Trust for an IP Subnet in Express.js\nDESCRIPTION: Illustrates setting the Express application to trust a range of IP addresses specified by a subnet (e.g., '10.0.0.1/16') using CIDR notation via `app.set('trust proxy', '10.0.0.1/16')`. Mentioned in version 4.3.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', '10.0.0.1/16')\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating AzureNamedKeyCredential (TypeScript)\nDESCRIPTION: Illustrates the usage of `AzureNamedKeyCredential` from `@azure/core-auth`. This example creates a credential with both a name and a key, logs them, and then demonstrates updating both values using the `update` method. This is useful for credentials requiring both a label and a secret, such as named shared access keys.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-auth/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AzureNamedKeyCredential } from \"@azure/core-auth\";\n\nconst credential = new AzureNamedKeyCredential(\"ManagedPolicy\", \"secret value\");\n// prints: \"ManagedPolicy, secret value\"\nconsole.log(`${credential.name}, ${credential.key}`);\ncredential.update(\"OtherManagedPolicy\", \"other secret value\");\n// prints: \"OtherManagedPolicy, other secret value\"\nconsole.log(`${credential.name}, ${credential.key}`);\n```\n\n----------------------------------------\n\nTITLE: Remapping a Chain of Transformed Source Maps with Loader Function (JavaScript)\nDESCRIPTION: Demonstrates the use of the remapping function in a scenario where a source file is transformed (e.g., by Babel), minified (e.g., by Uglify), and where the loader function traverses through the transformation chain by returning relevant sourcemaps. The loader receives the file name and loader context, uses context assertions, and either returns a sourcemap or null. This sample covers how loader calls propagate to original and transformed sources, and what is expected in the final remapped output. Dependencies: remapping package, a JSON-parsing facility. Inputs are JSON sourcemaps and a loader callback; the output is a composed/remapped source map.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@ampproject/remapping/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Babel transformed \"helloworld.js\" into \"transformed.js\"\nconst transformedMap = JSON.stringify({\n  file: 'transformed.js',\n  // 1st column of 2nd line of output file translates into the 1st source\n  // file, line 3, column 2\n  mappings: ';CAEE',\n  sources: ['helloworld.js'],\n  version: 3,\n});\n\n// Uglify minified \"transformed.js\" into \"transformed.min.js\"\nconst minifiedTransformedMap = JSON.stringify({\n  file: 'transformed.min.js',\n  // 0th column of 1st line of output file translates into the 1st source\n  // file, line 2, column 1.\n  mappings: 'AACC',\n  names: [],\n  sources: ['transformed.js'],\n  version: 3,\n});\n\nconst remapped = remapping(\n  minifiedTransformedMap,\n  (file, ctx) => {\n\n    // The \"transformed.js\" file is an transformed file.\n    if (file === 'transformed.js') {\n      // The root importer is empty.\n      console.assert(ctx.importer === '');\n      // The depth in the sourcemap tree we're currently loading.\n      // The root `minifiedTransformedMap` is depth 0, and its source children are depth 1, etc.\n      console.assert(ctx.depth === 1);\n\n      return transformedMap;\n    }\n\n    // Loader will be called to load transformedMap's source file pointers as well.\n    console.assert(file === 'helloworld.js');\n    // `transformed.js`'s sourcemap points into `helloworld.js`.\n    console.assert(ctx.importer === 'transformed.js');\n    // This is a source child of `transformed`, which is a source child of `minifiedTransformedMap`.\n    console.assert(ctx.depth === 2);\n    return null;\n  }\n);\n\nconsole.log(remapped);\n// {\n//   file: 'transpiled.min.js',\n//   mappings: 'AAEE',\n//   sources: ['helloworld.js'],\n//   version: 3,\n// };\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Types with Type.Ref in TypeBox - TypeScript\nDESCRIPTION: This snippet explains how to define types by reference in TypeBox using the Type.Ref construct, which enables schema reuse and circular references by referencing schema definitions via an $id. It shows how to create a referenceable type with an $id and how to construct a referencing schema. Requires TypeBox as a dependency; takes an existing schema with an $id and returns a new schema referencing it, both following JSON Schema conventions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.String({ $id: 'T' })                  // const T = {\n                                                     //    $id: 'T',\n                                                     //    type: 'string'\n                                                     // }\n                                             \nconst R = Type.Ref(T)                                // const R = {\n                                                     //    $ref: 'T'\n                                                     // }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing proxy-addr with require in Node.js JavaScript\nDESCRIPTION: Shows how to import the proxy-addr module using the CommonJS require function in a Node.js environment. This is a prerequisite for using any proxy-addr APIs in scripts or applications. The output is a variable referencing the loaded module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar proxyaddr = require('proxy-addr')\n```\n\n----------------------------------------\n\nTITLE: Illustrating Path Resolution for get-package-type in JavaScript\nDESCRIPTION: This snippet clarifies how 'get-package-type' handles directory versus file paths as arguments. When given a directory path like 'dir1/', it searches for './package.json' relative to the current working directory. However, when given a specific file path like 'dir1/index.cjs', it correctly searches for 'dir1/package.json'. This highlights that the function expects a filename argument to correctly locate the relevant 'package.json'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-package-type/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// This never looks at `dir1/`, first attempts to load `./package.json`.\nconst type1 = await getPackageType('dir1/');\n\n// This attempts to load `dir1/package.json`.\nconst type2 = await getPackageType('dir1/index.cjs');\n```\n\n----------------------------------------\n\nTITLE: Hashing Values with TypeBox Value.Hash in TypeScript\nDESCRIPTION: Shows how to use the `Value.Hash` function from TypeBox to compute a non-cryptographic FNV1A-64 hash of a given JavaScript value. The hash is returned as a BigInt (`n` suffix). Different values produce different hashes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })          // const A = 2910466848807138541n\n\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })          // const B = 1418369778807423581n\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling the Mascot Display in React JSX\nDESCRIPTION: Provides examples of using functions, expected to be from the `useMicroInteractions` context, to manage the 'Diego the Dolphin' mascot. The `showMascot` function displays the animated mascot with a custom message and an optional position ('bottom-right', 'top-left', etc.), while `hideMascot` removes it from view.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/DEVELOPMENT_LOG.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Show mascot with message\nshowMascot(\"I'm here to help you achieve your DECA goals!\", \"bottom-right\");\n\n// Hide mascot\nhideMascot();\n```\n\n----------------------------------------\n\nTITLE: Using LeakDetector to Check Object Garbage Collection in JavaScript\nDESCRIPTION: This JavaScript example demonstrates the usage of the LeakDetector class from the 'jest-leak-detector' module. It initializes an object, creates a LeakDetector instance with it, and uses the asynchronous 'isLeaking()' method to check if the object is still held in memory before and after removing its explicit reference. It depends on the 'jest-leak-detector' module being installed and the LeakDetector class being available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-leak-detector/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(async function () {\n  let reference = {};\n  let isLeaking;\n\n  const detector = new LeakDetector(reference);\n\n  // Reference is held in memory.\n  isLeaking = await detector.isLeaking();\n  console.log(isLeaking); // true\n\n  // We destroy the only reference to the object.\n  reference = null;\n\n  // Reference is gone.\n  isLeaking = await detector.isLeaking();\n  console.log(isLeaking); // false\n})();\n```\n\n----------------------------------------\n\nTITLE: Using get-package-type Asynchronously and Synchronously in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of the 'get-package-type' module. It shows how to require the module and call both its asynchronous version (await getPackageType(...)) and its synchronous version (getPackageType.sync(...)) to determine the package type associated with 'file.js'. The results ('commonjs' or the value specified in package.json#type) are logged to the console. It depends on the 'get-package-type' npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-package-type/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst getPackageType = require('get-package-type');\n\n(async () => {\n  console.log(await getPackageType('file.js'));\n  console.log(getPackageType.sync('file.js'));\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Prompt with Validation in JavaScript\nDESCRIPTION: Example configuration for an interactive 'date' prompt. It sets the prompt type, name, message, specifies an initial `Date` object, and includes a `validate` function to ensure the selected date is not in the future, returning an error message if invalid.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'date',\n  name: 'value',\n  message: 'Pick a date',\n  initial: new Date(1997, 09, 12),\n  validate: date => date > Date.now() ? 'Not in the future' : true\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Pool Instance Scope in Application Modules (Node.js)\nDESCRIPTION: Advises on instantiating a Pool as a top-level, long-lived object within a module to avoid creating many pools (and connections). Shows correct export for a query method using a single pool and identifies the problematic pattern of making a new pool on each connect call. Dependencies: 'pg'. Outputs: robust, efficient connection reuse.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// assume this is a file in your program at ./your-app/lib/db.js\n\n// correct usage: create the pool and let it live\n// 'globally' here, controlling access to it through exported methods\nvar pool = new pg.Pool()\n\n// this is the right way to export the query method\nmodule.exports.query = (text, values) => {\n  console.log('query:', text, values)\n  return pool.query(text, values)\n}\n\n// this would be the WRONG way to export the connect method\nmodule.exports.connect = () => {\n  // notice how we would be creating a pool instance here\n  // every time we called 'connect' to get a new client?\n  // that's a bad thing & results in creating an unbounded\n  // number of pools & therefore connections\n  var aPool = new pg.Pool()\n  return aPool.connect()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Comprehensive Color System Objects in TypeScript\nDESCRIPTION: Defines a `colorSystems` object in TypeScript to manage complex color palettes for different themes (e.g., 'marketing'). Each theme object contains multiple color definitions (primary, secondary, accent, light, medium, dark, contrast, badge), creating a robust system to ensure color consistency and prevent conflicts across various UI elements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst colorSystems = {\n  marketing: {\n    primary: '#EF4444',\n    secondary: '#FCA5A5',\n    accent: '#B91C1C',\n    light: '#FEF2F2',\n    medium: '#FEE2E2',\n    dark: '#DC2626',\n    contrast: '#1F2937',\n    badge: '#EF4444'\n  },\n  // ... other sets ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Jest Configuration in TypeScript\nDESCRIPTION: This snippet shows how to create a typed Jest configuration file (`jest.config.ts`). It imports the `Config` type from `@jest/types` and uses `Config.InitialOptions` to type the configuration object. This provides type safety and autocompletion when defining Jest configuration options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jest/types/README.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// jest.config.ts\nimport {Config} from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  // some typed config\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Conceptual Azure Cognitive Search Skillset for Embedding\nDESCRIPTION: Describes the configuration of an Azure Cognitive Search skillset using JSON. This skillset connects to Azure Blob Storage, extracts text from PDFs (using built-in skills), and applies an Azure OpenAI embedding skill to vectorize a specified field. Requires Azure resource details for configuration. Enables automated indexing and embedding upon file upload.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nThe skillset JSON for using Azure OpenAI requires your resource details and which field to vectorize. Azure provides sample skillset definitions for this in their documentation.\n```\n\n----------------------------------------\n\nTITLE: Performing Case-Insensitive Natural Sort (JavaScript)\nDESCRIPTION: This JavaScript example shows how to perform a case-insensitive natural sort by providing a custom comparison function to `Array.prototype.sort()`. The function converts both strings to lowercase using `toLowerCase()` before passing them to `String.naturalCompare`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Use wrapper function for case insensitivity\na.sort(function(a, b){\n  return String.naturalCompare(a.toLowerCase(), b.toLowerCase());\n})\n```\n\n----------------------------------------\n\nTITLE: Allocating a Buffer Filled with a Specific Value in JavaScript\nDESCRIPTION: Illustrates using `Buffer.alloc(size, fill)` to allocate a new Buffer of the specified `size` and initialize it by calling `buf.fill(fill)`. This is a safe allocation method.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf = Buffer.alloc(5, 'a');\nconsole.log(buf);\n  // <Buffer 61 61 61 61 61>\n```\n\n----------------------------------------\n\nTITLE: Consuming a File Stream as a String using get-stream (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the 'get-stream' package to read an entire file stream into a string asynchronously. It requires the 'fs' and 'get-stream' modules. The 'fs.createReadStream' method is used to obtain a readable stream from 'unicorn.txt'; 'getStream' is then awaited to resolve the stream into a string, which is output via 'console.log'. Inputs: a path to a text file ('unicorn.txt'). Output: the file contents as a string. Assumes Node.js v8+ (async/await support). No explicit options are provided, so UTF-8 encoding and infinite buffer are used by default.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-stream/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst getStream = require('get-stream');\n\n(async () => {\n\tconst stream = fs.createReadStream('unicorn.txt');\n\n\tconsole.log(await getStream(stream));\n\t/*\n\t              ,,))))))));,\n\t           __)))))))))))))),\n\t\\|/       -\\(((((''''((((((((.\n\t-*-==//////((''  .     `)))))),\n\t/|\\      ))| o    ;-.    '(((((                                  ,(,\n\t         ( `|    /  )    ;))))'                               ,_))^;(~\n\t            |   |   |   ,))((((_     _____------~~~-.        %,;(;(>';'~\n\t            o_);   ;    )))(((` ~---~  `::           \\      %%~~)(v;(`('~\n\t                  ;    ''''````         `:       `:::|\\,__,%%    );`'; ~\n\t                 |   _                )     /      `:|`----'     `-'\n\t           ______\\/~    |                 /        /\n\t         /~;;.____/;;'  /          ___--,-(   `;;;/\n\t        / //  _;______;'------~~~~~    /;;/\\    /\n\t       //  | |                        / ;   \\;;,\\\n\t      (<_  | ;                      /',/-----'  _>\n\t       \\_| ||_                     //~;~~~~~~~~~\n\t           `\\_|                   (,~~\n\t                                   \\~\\\n\t                                    ~~\n\t*/\n})();\n```\n\n----------------------------------------\n\nTITLE: Identifying React Portals (React, JavaScript)\nDESCRIPTION: Demonstrates detection of React Portal elements using react-is. It imports react, react-dom, and react-is, creates a DOM node and a portal, then checks the portal's type. Dependencies are react, react-dom, and react-is; inputs include a DOM element and portal, outputs are boolean validations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/react-is/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport * as ReactIs from 'react-is';\\n\\nconst div = document.createElement(\\\"div\\\");\\nconst portal = ReactDOM.createPortal(<div />, div);\\n\\nReactIs.isPortal(portal); // true\\nReactIs.typeOf(portal) === ReactIs.Portal; // true\n```\n\n----------------------------------------\n\nTITLE: Reading, Modifying, and Writing JSON with Preserved Formatting - JavaScript\nDESCRIPTION: This snippet illustrates how to read, parse, modify, and write JSON files while preserving indentation and newline styles using 'json-parse-even-better-errors'. After reading and parsing a JSON file, it retrieves indentation and newline metadata via JavaScript Symbols, serializes the modified object with original formatting, and ensures consistent newlines. Dependencies include asynchronous file I/O methods like 'readFile' and 'writeFile', along with 'json-parse-even-better-errors'. Inputs are file paths and encoded text; outputs are updated files with formatting intact.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json-parse-even-better-errors/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst txt = await readFile('./package.json', 'utf8')\nconst data = parseJsonEvenBetterErrors(txt)\nconst indent = Symbol.for('indent')\nconst newline = Symbol.for('newline')\n// .. do some stuff to the data ..\nconst string = JSON.stringify(data, null, data[indent]) + '\\n'\nconst eolFixed = data[newline] === '\\n' ? string\n  : string.replace(/\\n/g, data[newline])\nawait writeFile('./package.json', eolFixed)\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Mode Background Variable in TSX\nDESCRIPTION: Demonstrates how to fix UI elements that remain white in dark mode by replacing hard-coded background classes like `bg-white` with conditional dark mode classes. The example uses a Tailwind CSS approach (`dark:bg-[var(--surface-2)]`) to apply the `--surface-2` CSS variable as the background color only when the dark mode (`.dark` class on an ancestor) is active.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Before:\n<div className=\"bg-white p-4\">...</div>\n\n// After:\n<div className=\"bg-white dark:bg-[var(--surface-2)] p-4\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving PATH Key and Value Cross-Platform in Node.js Using path-key\nDESCRIPTION: This Node.js code snippet uses the path-key package to determine the correct environment variable key for PATH in a cross-platform way, ensuring compatibility with case-sensitive platforms such as Windows. It retrieves the key using pathKey() and then accesses the PATH value from process.env. Dependencies: Requires installation of \"path-key\" via npm. Input parameters: none, but can accept optional options for environment object or platform override. Output: Logs the PATH key and its value. Limitation: Assumes process.env or a similar object is accessible.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-key/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst pathKey = require('path-key');\n\nconst key = pathKey();\n//=> 'PATH'\n\nconst PATH = process.env[key];\n//=> '/usr/local/bin:/usr/bin:/bin'\n```\n```\n\n----------------------------------------\n\nTITLE: Running Tests for cross-spawn\nDESCRIPTION: Provides shell commands to execute the test suite for the `cross-spawn` module using npm. The first command runs the tests once, while the second command runs the tests in watch mode, useful during development.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cross-spawn/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm test\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ npm test -- --watch\n```\n\n----------------------------------------\n\nTITLE: Escaping for Script Context (JavaScript)\nDESCRIPTION: Shows the effect of `isScriptContext: true`. Occurrences of `</script>` are escaped as `<\\/script>` to prevent premature closing of HTML script tags when the output is embedded directly in HTML.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('foo</script>bar', {\n  'isScriptContext': true\n});\n// → 'foo<\\\\/script>bar'\n```\n\n----------------------------------------\n\nTITLE: Redirecting File Input to an Execa Subprocess in JavaScript\nDESCRIPTION: Demonstrates feeding input to a child process's standard input (`stdin`) from a file using `execa`. It runs the `cat` command and pipes the contents of `stdin.txt` (read via `fs.createReadStream`) into the `subprocess.stdin` writable stream. Requires `execa` and the built-in `fs` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst execa = require('execa');\n\nconst subprocess = execa('cat')\nfs.createReadStream('stdin.txt').pipe(subprocess.stdin)\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer from an Array of Octets in JavaScript\nDESCRIPTION: Illustrates the use of `Buffer.from(array)` to create a new Buffer instance initialized with the data from an array of octets (byte values). A `TypeError` is thrown if the input is not an Array.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // ['b','u','f','f','e','r']\n```\n\n----------------------------------------\n\nTITLE: Sending a 204 No Content Response with res.send(undefined) in JavaScript\nDESCRIPTION: Demonstrates that calling `res.send(undefined)` in Express 2.1.1+ results in sending an HTTP 204 No Content response, fixing previous behavior and aligning with expectations for sending empty responses.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nres.send(undefined)\n```\n\n----------------------------------------\n\nTITLE: Using Command Substitution in .env with dotenvx (INI)\nDESCRIPTION: Example `.env` file variable definition using command substitution (`$(whoami)`). This feature requires using the `dotenvx` tool to run the application, which will execute the command and substitute its standard output into the variable's value before making it available to the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n# .env\nDATABASE_URL=\"postgres://$(whoami)@localhost/my_database\"\n```\n\n----------------------------------------\n\nTITLE: Prompt Type Skipping Example - Prompts Library - JavaScript\nDESCRIPTION: Illustrates how to skip questions in a prompt sequence by setting 'type' to null. When 'type' is falsy, the corresponding prompt is not asked. Useful for dynamic or context-sensitive CLI flows. Requires the field 'name' for the skipped prompt to avoid undefined entries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: null,\n  name: 'forgetme',\n  message: `I'll never be shown anyway`,\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Combining Overlapping Ranges - JavaScript\nDESCRIPTION: Shows how 'parseRange' can be used with the 'combine' option enabled to merge overlapping and adjacent ranges in the input Range header. This advanced usage requires passing an options object with 'combine: true'. The output is an array of discrete, combined range objects, demonstrating how adjacent or overlapping ranges are normalized.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/range-parser/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nparseRange(100, 'bytes=50-55,0-10,5-10,56-60', { combine: true })\n// => [\n//      { start: 0,  end: 10 },\n//      { start: 50, end: 60 }\n//    ]\n```\n```\n\n----------------------------------------\n\nTITLE: Using yocto-queue for Queue Operations - JavaScript\nDESCRIPTION: Shows how to create and use a yocto-queue instance in Node.js. This example requires installing the yocto-queue package before importing. The snippet demonstrates creating a queue, enqueuing items, checking size, iterating over the queue, and dequeuing until empty. Key methods include enqueue for adding items, dequeue for removing from the front, and the iterable interface for traversal. Input values can be any JavaScript type, and the snippet outputs results to the console. Note that this usage sample does not cover advanced configurations or error handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yocto-queue/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require('yocto-queue');\n\nconst queue = new Queue();\n\nqueue.enqueue('🦄');\nqueue.enqueue('🌈');\n\nconsole.log(queue.size);\n//=> 2\n\nconsole.log(...queue);\n//=> '🦄 🌈'\n\nconsole.log(queue.dequeue());\n//=> '🦄'\n\nconsole.log(queue.dequeue());\n//=> '🌈'\n```\n\n----------------------------------------\n\nTITLE: Generating Pretty-Printed JSON Output with jsesc CLI in Bash\nDESCRIPTION: Shows how to combine the '-j'/'--json' and '-p'/'--pretty' options with the jsesc command-line tool in Bash. This configuration ensures the output is valid JSON, properly escaped, and formatted with indentation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ jsesc --json --pretty '{ \"föo\": \"♥\", \"bår\": \"𝌆 baz\" }'\n{\n  \"f\\u00F6o\": \"\\u2665\",\n  \"b\\u00E5r\": \"\\uD834\\uDF06 baz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trust for All Proxies in Express.js\nDESCRIPTION: Illustrates setting the Express application to trust all proxies using `app.set('trust proxy', true)`. This means the `X-Forwarded-*` headers will be trusted unconditionally. Mentioned in version 4.3.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', true)\n```\n\n----------------------------------------\n\nTITLE: Checking Embedded Source Content Availability with SourceMapConsumer in JavaScript\nDESCRIPTION: Demonstrates the `hasContentsOfAllSources` method of `SourceMapConsumer`. This method returns `true` if the source map instance has the embedded source content for every source file listed within it, and `false` otherwise. It's useful for determining if source contents need to be fetched separately.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nif (consumer.hasContentsOfAllSources()) {\n  consumerReadyCallback(consumer);\n} else {\n  fetchSources(consumer, consumerReadyCallback);\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Object Rest/Spread Demonstration and Syntax Errors in JavaScript\nDESCRIPTION: Demonstrates correct object rest syntax for property extraction and several forbidden patterns triggering SyntaxErrors according to ES proposal specifications. No dependencies except a parser that supports object rest/spread syntax. The first code block destructures object properties correctly; subsequent blocks show errors raised for improper rest placement, multiple rests, or trailing comma. Inputs are structured object destructurings; outputs are either variable assignments or parsing errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nlet { x, y, ...z } =  { x: 1, y: 2, z: 3 };\\n// x = 1\\n// y = 2\\n// z = { z: 3 }\n```\n\nLANGUAGE: bash\nCODE:\n```\n> 1 | let { ...x, y, z } = { x: 1, y: 2, z: 3};\\n    |           ^\\n# Previous behavior:\\n# x = { x: 1, y: 2, z: 3 }\\n# y = 2\\n# z = 3\n```\n\nLANGUAGE: bash\nCODE:\n```\n> 1 | let { x, ...y, ...z } = { x: 1, y: 2, z: 3};\\n    |              ^\\n# Previous behavior:\\n# x = 1\\n# y = { y: 2, z: 3 }\\n# z = { y: 2, z: 3 }\n```\n\nLANGUAGE: js\nCODE:\n```\nlet { x, y, ...z, } = obj;\n```\n\n----------------------------------------\n\nTITLE: Installing jest-matcher-utils using npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and install the `jest-matcher-utils` package, adding it as a dependency to the current project's `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-matcher-utils/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jest-matcher-utils\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Response Freshness with Header Objects - JavaScript\nDESCRIPTION: Demonstrates usage of the fresh function with simulated HTTP request and response headers to assess cache freshness. Parameters include objects with HTTP headers such as 'if-none-match' and 'etag'. The function returns true if the response is fresh in the client cache, or false if stale and a new copy should be sent. Illustrates expected output for matching and non-matching etag values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fresh/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"bar\"' }\nfresh(reqHeaders, resHeaders)\n// => false\n\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"foo\"' }\nfresh(reqHeaders, resHeaders)\n// => true\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for FastAPI Backend - Python\nDESCRIPTION: Initializes Python's logging module to output log messages with timestamps, logger names, log levels, and messages to the standard output. Uses the INFO verbosity level as default and assigns a named logger for consistent logging throughout the DecA(I)de integration. No external dependencies are needed beyond the Python standard library; this setup ensures that all subsequent log messages will follow the configured format. Required before other logging-dependent components are used.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# Configure logging\\nlogging.basicConfig(\\n    level=logging.INFO,\\n    format=\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\",\\n    handlers=[logging.StreamHandler()]\\n)\\n\\nlogger = logging.getLogger(\\\"decade-integration\\\")\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Async Execa Calls - JavaScript\nDESCRIPTION: Illustrates structured error handling for failed or missing commands run with Execa. The snippet demonstrates catching rejected promises, and accessing Execa's enhanced error properties for better debugging. Useful for robust CLI automation. Only Node.js and Execa are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst execa = require('execa');\n\n(async () => {\n\t// Catching an error\n\ttry {\n\t\tawait execa('unknown', ['command']);\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\t/*\n\t\t{\n\t\t\tmessage: 'Command failed with ENOENT: unknown command spawn unknown ENOENT',\n\t\t\terrno: -2,\n\t\t\tcode: 'ENOENT',\n\t\t\tsyscall: 'spawn unknown',\n\t\t\tpath: 'unknown',\n\t\t\tspawnargs: ['command'],\n\t\t\toriginalMessage: 'spawn unknown ENOENT',\n\t\t\tshortMessage: 'Command failed with ENOENT: unknown command spawn unknown ENOENT',\n\t\t\tcommand: 'unknown command',\n\t\t\tescapedCommand: 'unknown command',\n\t\t\tstdout: '',\n\t\t\tstderr: '',\n\t\t\tall: '',\n\t\t\tfailed: true,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t}\n\t\t*/\n\t}\n\n})();\n```\n\n----------------------------------------\n\nTITLE: Single Text Prompt Example - Prompts Library - JavaScript\nDESCRIPTION: Shows how to prompt a single text-based question to the user using 'prompts'. The answer is saved under a named key in the response object and logged to the console. Requires 'prompts' as a dependency; input is free-form text.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst prompts = require('prompts');\n\n(async () => {\n  const response = await prompts({\n    type: 'text',\n    name: 'meaning',\n    message: 'What is the meaning of life?'\n  });\n\n  console.log(response.meaning);\n})();\n```\n\n----------------------------------------\n\nTITLE: Importing TypeBox in Deno - TypeScript\nDESCRIPTION: Imports 'Static' and 'Type' symbols from TypeBox using the Deno-style 'npm:' import. This allows TypeBox to be used directly in Deno projects without npm. Deno must support 'npm:' module specifiers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Static, Type } from 'npm:@sinclair/typebox'\n```\n\n----------------------------------------\n\nTITLE: Catching Exceptions in node-fetch Requests - JavaScript\nDESCRIPTION: Illustrates using a try/catch block to handle exceptions and network errors when making fetch calls. Note that HTTP errors with status codes 3xx-5xx are not caught as exceptions and must be handled separately.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n\ntry {\n\tawait fetch('https://domain.invalid/');\n} catch (error) {\n\tconsole.log(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Micro-interactions with Animation Libraries (JavaScript)\nDESCRIPTION: Suggests using JavaScript animation libraries like Framer Motion, native Canvas APIs, or dedicated confetti libraries to create engaging micro-interactions. These animations, such as confetti bursts upon task completion, provide positive feedback and enhance the user experience through delightful visual rewards.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nUse Framer Motion or Canvas animations for confetti. There are libraries for confetti as well.\n```\n\n----------------------------------------\n\nTITLE: Handling Manual Redirects with node-fetch - JavaScript\nDESCRIPTION: This snippet illustrates manual HTTP redirect handling in node-fetch by using the 'redirect: \\u0027manual\\u0027' option. It performs a fetch, checks for redirect status codes (301/302), and if encountered, resolves and follows the \\u0027location\\u0027 header manually. Useful for environments requiring custom redirect logic and observing Node.js/Fetch spec deviations. Requires node-fetch and relevant URL endpoint.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nconst response = await fetch('https://httpbin.org/status/301', { redirect: 'manual' });\\n\\nif (response.status === 301 || response.status === 302) {\\n\\tconst locationURL = new URL(response.headers.get('location'), response.url);\\n\\tconst response2 = await fetch(locationURL, { redirect: 'manual' });\\n\\tconsole.dir(response2);\\n}\n```\n\n----------------------------------------\n\nTITLE: Piping HTTP Response Streams with stream.pipeline and node-fetch - JavaScript\nDESCRIPTION: This snippet shows how to pipe the HTTP response body obtained using node-fetch directly to a writable stream using Node.js's stream.pipeline utility. It awaits the download completion and handles errors. Requires node-fetch, Node.js 10+ for stream.pipeline, and proper permissions to write to the target file path. The function fetches an image, checks the response, and writes it to disk as a stream.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {createWriteStream} from 'node:fs';\\nimport {pipeline} from 'node:stream';\\nimport {promisify} from 'node:util'\\nimport fetch from 'node-fetch';\\n\\nconst streamPipeline = promisify(pipeline);\\n\\nconst response = await fetch('https://github.githubassets.com/images/modules/logos_page/Octocat.png');\\n\\nif (!response.ok) throw new Error(`unexpected response ${response.statusText}`);\\n\\nawait streamPipeline(response.body, createWriteStream('./octocat.png'));\n```\n\n----------------------------------------\n\nTITLE: Defining Props Interface for Dolphin Component in TypeScript\nDESCRIPTION: Defines the `SideProfileDolphinProps` interface using TypeScript. This interface specifies the expected properties for the `SideProfileDolphin` component, including dimensions, optional target position for animation, swimming state boolean, direction ('left' or 'right'), an optional callback function `onArrival`, and a boolean to show/hide a text box.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648076558.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Define props for our composite component\ninterface SideProfileDolphinProps {\n  dimensions: { width: number; height: number };\n  targetPosition?: { x: number; y: number };\n  swimming?: boolean;\n  pointDirection?: 'left' | 'right';\n  onArrival?: () => void;\n  showTextBox?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Exports Field in package.json (JSON5)\nDESCRIPTION: This snippet illustrates how to define the `exports` field in a package.json file using JSON5 syntax, including both CommonJS ('require') and ESM ('default') entry points for a subpath. At runtime, tools like resolve-pkg-maps utilize this structure to resolve which file to load depending on the module system being used. The key './reverse' maps to different files based on the usage context, where 'require' denotes CommonJS and 'default' denotes ESM. The surrounding context assumes that this is part of a larger package.json file where additional fields may be present.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n    // ...\n    \"exports\": {\n        \"./reverse\": {\n            \"require\": \"./file.cjs\",\n            \"default\": \"./file.mjs\"\n        }\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding the Break Timer using useMicroInteractions Hook in JSX\nDESCRIPTION: This JSX snippet illustrates how to control the break timer component using functions obtained from the `useMicroInteractions` hook within a React component. It demonstrates calling `showBreakTimer` (e.g., after a period of focused work) to display the timer and `hideBreakTimer` to programmatically close it.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst { showBreakTimer, hideBreakTimer } = useMicroInteractions();\n\n// After 25 minutes of focused work\nconst startBreakTimer = () => {\n  showBreakTimer();\n};\n\n// To manually close the timer\nconst closeBreakTimer = () => {\n  hideBreakTimer();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure OpenAI Client Instance - TypeScript\nDESCRIPTION: This TypeScript snippet exports a function to instantiate the Azure OpenAI client using credentials from environment variables (AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_KEY). It throws an error if the credentials are missing, ensuring robust configuration. This utility serves as the core dependency for downstream AI service method calls and requires the installed @azure/openai package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIClient, AzureKeyCredential } from \"@azure/openai\";\n\nexport function getOpenAIClient() {\n  const endpoint = process.env.AZURE_OPENAI_ENDPOINT;\n  const key = process.env.AZURE_OPENAI_KEY;\n  \n  if (!endpoint || !key) {\n    throw new Error(\"Azure OpenAI credentials not configured\");\n  }\n  \n  return new OpenAIClient(endpoint, new AzureKeyCredential(key));\n}\n```\n\n----------------------------------------\n\nTITLE: Advancing Fake Time with Tick Methods (Sync and Async) - JavaScript\nDESCRIPTION: Moves fake time forward by the provided duration using 'clock.tick' (sync) or 'clock.tickAsync' (async). Accepts time as a number (ms) or time string and fires due callbacks. Async version works with promises to yield between event loop turns.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nclock.tick(time) / await clock.tickAsync(time)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Function Parameter Types in a Tuple - TypeScript\nDESCRIPTION: This code shows how to extract the parameter types from a function type using the Parameters utility. The callNTimes generic function infers proper parameter typings for the injected function Fn, using Parameters<Fn> to constrain the arguments array for the repeated calls. Dependencies include generics, function overloading, and variadic tuple types. Arguments for the wrapped function must match those expected by Fn, and the returned function repeats the invocation callCount times.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction shuffle(input: any[]): void {\n\t// Mutate array randomly changing its' elements indexes.\n}\n\nfunction callNTimes<Fn extends (...args: any[]) => any> (func: Fn, callCount: number) {\n\t// Type that represents the type of the received function parameters.\n\ttype FunctionParameters = Parameters<Fn>;\n\n\treturn function (...args: FunctionParameters) {\n\t\tfor (let i = 0; i < callCount; i++) {\n\t\t\tfunc(...args);\n\t\t}\n\t}\n}\n\nconst shuffleTwice = callNTimes(shuffle, 2);\n```\n\n----------------------------------------\n\nTITLE: Removing Types from Unions with Exclude<T, U> in TypeScript\nDESCRIPTION: This example demonstrates `Exclude<T, U>`. It defines a `ServerConfig` interface where the `port` property can be `null`, `string`, or `number`. The `getPortValue` function uses `Exclude<ServerConfig['port'], null>` for its `port` parameter type. This effectively removes `null` from the allowed types for the parameter, ensuring that the function only receives `string` or `number` values. The `startServer` function handles the `null` case separately before calling `getPortValue`, showcasing a practical use case for refining union types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ninterface ServerConfig {\n\tport: null | string | number;\n}\n\ntype RequestHandler = (request: Request, response: Response) => void;\n\n// Exclude `null` type from `null | string | number`.\n// In case the port is equal to `null`, we will use default value.\nfunction getPortValue(port: Exclude<ServerConfig['port'], null>): number {\n\tif (typeof port === 'string') {\n\t\treturn parseInt(port, 10);\n\t}\n\n\treturn port;\n}\n\nfunction startServer(handler: RequestHandler, config: ServerConfig): void {\n\tconst server = require('http').createServer(handler);\n\n\tconst port = config.port === null ? 3000 : getPortValue(config.port);\n\tserver.listen(port);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind CSS Utility Classes in JSX\nDESCRIPTION: Demonstrates how to use Tailwind CSS utility classes directly within JSX elements to style components. This example applies a light gray background, padding, rounded corners, and a medium shadow to a div element, showcasing the utility-first approach for rapid styling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"bg-gray-100 p-6 rounded-lg shadow-md\">\n```\n\n----------------------------------------\n\nTITLE: Defining AI Feature Data Models in Python using Pydantic\nDESCRIPTION: Defines Pydantic models (RoleplayRequest, TestRequest, WrittenFeedbackRequest, RoleplayResponse, TestQuestion, TestResponse, WrittenFeedbackResponse) for structuring and validating request and response data for AI-driven features like DECA roleplay generation, practice test creation, and written event feedback. It utilizes BaseModel and Python typing for data validation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom typing import List, Optional, Dict, Any\n\nclass RoleplayRequest(BaseModel):\n    instructional_area: str\n    performance_indicators: List[str]\n    difficulty_level: str\n    business_type: Optional[str] = None\n\nclass TestRequest(BaseModel):\n    test_type: str\n    categories: List[str]\n    num_questions: int\n\nclass WrittenFeedbackRequest(BaseModel):\n    event_type: str\n    content: str\n    sections: Optional[Dict[str, str]] = None\n\nclass RoleplayResponse(BaseModel):\n    title: str\n    scenario: str\n    performance_indicators: List[str]\n    difficulty: str\n    business_type: str\n    meet_with: str\n\nclass TestQuestion(BaseModel):\n    id: int\n    question: str\n    options: List[str]\n    correct_answer: int\n    explanation: str\n    category: str\n\nclass TestResponse(BaseModel):\n    test_type: str\n    questions: List[TestQuestion]\n\nclass WrittenFeedbackResponse(BaseModel):\n    overall_score: int\n    strengths: List[str]\n    improvements: List[str]\n    section_feedback: Optional[Dict[str, str]] = None\n    summary: str\n```\n\n----------------------------------------\n\nTITLE: Enabling ESM Output and ts-node ESM Hook in tsconfig.json (JSONC)\nDESCRIPTION: Configures TypeScript to output ES module syntax and tells ts-node to automatically install its ESM loader hook. 'module' is set to 'ESNext' in 'compilerOptions'; the 'esm' flag is set to true under 'ts-node'. This setup is required for running TypeScript files as ES modules via ts-node.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_17\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\" // or ES2015, ES2020\n  },\n  \"ts-node\": {\n    // Tell ts-node CLI to install the --loader automatically, explained below\n    \"esm\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling createChatCompletion with Azure OpenAI in Node.js\nDESCRIPTION: This snippet demonstrates how to call the OpenAI createChatCompletion method for an Azure OpenAI deployment in Node.js. The model parameter should be set to the deployment name, and messages should contain system and user prompts formatted as required. Output is the AI-generated message content, accessible from the response object. This method assumes the SDK is already authenticated with Azure credentials and that deployment names and message variables are provided.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst completion = await openai.createChatCompletion({\n  model: \"gpt-4\", // or your deployment name\n  messages: [ {role: \"system\", content: systemPrompt}, {role: \"user\", content: userPrompt} ]\n});\nconst result = completion.data.choices[0].message.content;\n```\n\n----------------------------------------\n\nTITLE: Looking up original source content with SourceMapConsumer - JavaScript\nDESCRIPTION: Illustrates the usage of sourceContentFor to retrieve the embedded source content for a file listed in the source map. If the file is not present, throws an error by default, but can optionally return null if a second true argument is passed. This example also shows how to handle the sources array.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.sources\n// [ \"my-cool-lib.clj\" ]\n\nconsumer.sourceContentFor(\"my-cool-lib.clj\")\n// \"...\"\n\nconsumer.sourceContentFor(\"this is not in the source map\");\n// Error: \"this is not in the source map\" is not in the source map\n\nconsumer.sourceContentFor(\"this is not in the source map\", true);\n// null\n```\n\n----------------------------------------\n\nTITLE: Registering a Service Worker and Managing PWA Install Flow with Workbox-Window (TypeScript)\nDESCRIPTION: This snippet illustrates the setup and management of a Progressive Web App using TypeScript and the workbox-window library. It demonstrates how to register a service worker, handle install prompts, manage offline state, and listen for version updates to prompt the user when a new version is available. Dependencies include workbox-window and an appropriate service worker script (e.g., sw.js). The main inputs are the service worker script path, and expected outputs are event listeners and UI prompts responding to PWA lifecycle events.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Workbox } from 'workbox-window';\\n\\nif ('serviceWorker' in navigator) {\\n  const wb = new Workbox('/sw.js');\\n\\n  wb.addEventListener('waiting', () => {\\n    // Prompt user to refresh for new version\\n    console.log('A new version is available. Refresh to update!');\\n  });\\n\\n  wb.register();\\n}\\n\\nwindow.addEventListener('beforeinstallprompt', (e) => {\\n  e.preventDefault();\\n  // Store the event and show custom install UI\\n  window.deferredPrompt = e;\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Errors in Express Middleware - http-errors with Express - JavaScript\nDESCRIPTION: Illustrates the integration of the 'http-errors' module with Express middleware to automate user authentication error responses. Dependencies include the 'http-errors' and 'express' modules; an Express app instance must be initialized. Within a middleware function, a 401 error is generated with a custom message if the user is not authenticated, otherwise, the request proceeds. Inputs are Express request/response/next objects. Output is a call to next() passing an error when unauthenticated; otherwise request processing continues.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-errors/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n----------------------------------------\n\nTITLE: Query Helper Method with Promises and Callbacks (Node.js)\nDESCRIPTION: Shows the use of the Pool.query() method for direct, convenient query execution and automatic client release. Handles both promise-based async/await and callback paradigms. Suitable for one-off queries without transaction semantics. Inputs: SQL statement and values. Outputs: query result rows. Dependencies: 'pg-pool'. Limitations: Not for multiple-query transactions, streaming, or cursor usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\nvar time = await pool.query('SELECT NOW()')\nvar name = await pool.query('select $1::text as name', ['brianc'])\nconsole.log(name.rows[0].name, 'says hello at', time.rows[0].now)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\npool.query('SELECT $1::text as name', ['brianc'], function (err, res) {\n  console.log(res.rows[0].name) // brianc\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Paged Async Iterator Method (TypeScript)\nDESCRIPTION: Example showing how to implement a method (`listSecrets`) that returns a `PagedAsyncIterableIterator`. It defines the `next`, `Symbol.asyncIterator`, and `byPage` methods required by the interface, delegating the actual iteration logic to other internal methods (`listSecretsAll`, `listSecretsPage`). Assumes `ListSecretsOptions`, `SecretAttributes`, `PageSettings`, `listSecretsAll`, and `listSecretsPage` are defined elsewhere.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-paging/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n  public listSecrets(\n    options: ListSecretsOptions = {}\n  ): PagedAsyncIterableIterator<SecretAttributes> {\n    const iter = this.listSecretsAll(options);\n    return {\n      async next() { return iter.next(); },\n      [Symbol.asyncIterator]() { return this; },\n      byPage: (settings: PageSettings = {}) => this.listSecretsPage(settings, options),\n    };\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger for ts-node (JSONC)\nDESCRIPTION: Defines a VS Code launch configuration (`.vscode/launch.json`) to debug TypeScript applications using `ts-node`. It uses the `node` debugger type, sets the request type to `launch`, and adds `-r ts-node/register` to the `runtimeArgs` to hook `ts-node` into the Node.js process. The main program file (`${workspaceFolder}/src/index.ts`) is passed via the `args` array instead of `program` to ensure VS Code doesn't look for non-existent JavaScript output files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_40\n\nLANGUAGE: jsonc\nCODE:\n```\n```jsonc title=\".vscode/launch.json\"\n{\n    \"configurations\": [{\n        \"type\": \"node\",\n        \"request\": \"launch\",\n        \"name\": \"Launch Program\",\n        \"runtimeArgs\": [\n            \"-r\",\n            \"ts-node/register\"\n        ],\n        \"args\": [\n            \"${workspaceFolder}/src/index.ts\"\n        ]\n    }],\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrying Execa Commands on Error using p-retry in JavaScript\nDESCRIPTION: Shows how to integrate the `p-retry` package with `execa` to implement automatic retries with exponential backoff for failed child process executions. The example defines an async function to run a `curl` command and uses `p-retry` to attempt execution up to 5 times before failing. Requires `p-retry` and `execa` dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst pRetry = require('p-retry');\n\nconst run = async () => {\n\tconst results = await execa('curl', ['-sSL', 'https://sindresorhus.com/unicorn']);\n\treturn results;\n};\n\n(async () => {\n\tconsole.log(await pRetry(run, {retries: 5}));\n})();\n```\n\n----------------------------------------\n\nTITLE: Basic Color Conversion Examples using color-convert in JavaScript\nDESCRIPTION: Demonstrates importing the `color-convert` library and performing basic color conversions. It shows converting RGB values to HSL, converting a CSS keyword ('blue') to RGB, and accessing the number of channels expected by different color model functions (RGB, CMYK, ANSI16).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/color-convert/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar convert = require('color-convert');\n\nconvert.rgb.hsl(140, 200, 100);             // [96, 48, 59]\nconvert.keyword.rgb('blue');                // [0, 0, 255]\n\nvar rgbChannels = convert.rgb.channels;     // 3\nvar cmykChannels = convert.cmyk.channels;   // 4\nvar ansiChannels = convert.ansi16.channels; // 1\n```\n\n----------------------------------------\n\nTITLE: Capturing Custom Events with PostHog in JavaScript/React\nDESCRIPTION: This JavaScript snippet demonstrates how to capture a custom event named 'Completed Quiz' using the PostHog analytics library, likely within a React application. It includes custom properties like 'score' and 'time' associated with the event. This requires the PostHog library to be initialized in the frontend application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nposthog.capture('Completed Quiz', {score: 80, time: 120})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Event Listeners with ee-first in JavaScript\nDESCRIPTION: Illustrates how to cancel the event listeners established by the `first` function before any event is triggered. Calling the `.cancel()` method on the object returned by `first` (here assigned to `thunk`) removes all underlying event listeners associated with that specific `first` call, preventing the callback from being invoked and cleaning up resources.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ee-first/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar thunk = first([\n  [ee1, 'close', 'end', 'error'],\n  [ee2, 'error']\n], function (err, ee, event, args) {\n  // listener invoked\n})\n\n// cancel and clean up\nthunk.cancel()\n```\n\n----------------------------------------\n\nTITLE: Installing path-parse via npm\nDESCRIPTION: This command installs the `path-parse` package using the Node Package Manager (npm) and saves it as a dependency in your project's `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-parse/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save path-parse\n```\n\n----------------------------------------\n\nTITLE: Optimizing Object Sort with Pre-computed Keys (JavaScript)\nDESCRIPTION: This JavaScript example illustrates a performance optimization technique for sorting arrays of objects. It involves pre-calculating a combined and transformed (lowercase) sort key for each object using `map()`. The `sort()` function then uses `String.naturalCompare` on these pre-computed keys, avoiding repeated transformations during comparison.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// When text transformation is needed (eg toLowerCase()),\n// it is best for performance to keep\n// transformed key in that object.\n// There are no need to do text transformation\n// on each comparision when sorting.\nvar a = [ {\"make\":\"Audi\", \"model\":\"A6\"}\n        , {\"make\":\"Kia\",  \"model\":\"Rio\"} ];\n\n// sort by make, then by model\na.map(function(car){\n  car.sort_key = (car.make + \" \" + car.model).toLowerCase();\n})\na.sort(function(a, b){\n  return String.naturalCompare(a.sort_key, b.sort_key);\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Style Groups in ansi-styles (JavaScript)\nDESCRIPTION: Demonstrates advanced usage by accessing style properties through specific groups like `style.color`. This example retrieves the opening ANSI escape code for the green color.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/node_modules/ansi-styles/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(style.color.green.open);\n```\n\n----------------------------------------\n\nTITLE: Parsing Flow Nested Array Type Annotations - Babylon - JavaScript\nDESCRIPTION: This snippet illustrates support for deeply nested array type annotations in Flow, allowing types like number[][][][] in Babylon. Shows both numeric and string type arrays. Requires Flow support in Babylon. Input is variable declarations with nested array type annotations; output is correct type parsing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a: number[][][][];\nvar b: string[][];\n```\n\n----------------------------------------\n\nTITLE: Validating CLI Arguments (JavaScript)\nDESCRIPTION: Demonstrates using the `validateCLIOptions` function (presumably exported from `jest-validate`, though import isn't shown for this specific function) to validate command-line arguments (`argv`). It requires an object containing allowed options and deprecated options configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate} from 'jest-validate';\n\nvalidateCLIOptions(argv, {...allowedOptions, deprecatedOptions});\n```\n\n----------------------------------------\n\nTITLE: Importing the object-inspect Library in JavaScript\nDESCRIPTION: Standard method for importing the `object-inspect` library in a Node.js environment using the `require` function. This assigns the inspection function provided by the library to the `inspect` variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/object-inspect/readme.markdown#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar inspect = require('object-inspect')\n```\n\n----------------------------------------\n\nTITLE: Example Output of object-inspect for DOM and Nested Object\nDESCRIPTION: Shows the expected string output when inspecting an array containing a DOM element and a deeply nested object using the `object-inspect` library. This demonstrates its handling of element representation (`<div id=\"beep\">...</div>`) and depth truncation (`[...]`) for complex structures.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/object-inspect/readme.markdown#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[ <div id=\"beep\">...</div>, { a: 3, b: 4, c: [ 5, 6, [ 7, [ 8, [ ... ] ] ] ] } ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Trust for Loopback Addresses in Express.js\nDESCRIPTION: Demonstrates setting the Express application to trust loopback addresses (e.g., 127.0.0.1, ::1) as proxies using `app.set('trust proxy', 'loopback')`. Mentioned in version 4.3.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', 'loopback')\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Type OID in PostgreSQL via Bash\nDESCRIPTION: A bash command for querying the pg_type catalog directly for a specific type by its name (e.g., 'daterange'). It uses the psql CLI to execute a SELECT with a WHERE clause, filtering results for the desired type. Requires psql access and correct type name input.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-types/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ psql -c \"select typname, oid, typarray from pg_type where typname = 'daterange' order by oid\"\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated app.del() Method in Express.js\nDESCRIPTION: This snippet shows the usage of the `app.del()` method for defining routes that respond to HTTP DELETE requests. This method was deprecated in Express 4.2.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\napp.del()\n```\n\n----------------------------------------\n\nTITLE: Defining Self-Referential Metadata Object for Jest ModuleMocker in JavaScript\nDESCRIPTION: This example shows how to define an object metadata schema with a self-referential property, using refID and ref keys to allow recursive references within the Jest metadata system. When passed to generateFromMetadata, this enables accurate mocking of recursive object structures. This pattern is essential for mocking objects like linked lists or trees with cyclic references. The only dependency is jest-mock, and care must be taken that ref and refID values match for proper resolution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-mock/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst refID = {\n  type: 'object',\n  refID: 1,\n  members: {\n    self: {ref: 1},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of yallist JavaScript Library\nDESCRIPTION: This snippet demonstrates fundamental operations with the 'yallist' library. It shows how to require the library, create a new list from an array or arguments, add elements to the beginning (`unshift`) and end (`push`), convert the list to an array (`toArray`), iterate forwards (`forEach`) and backwards (`forEachReverse`), create new lists by transforming elements (`map`, `mapReverse`), and compute a single value from the list (`reduce`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yallist/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar yallist = require('yallist')\nvar myList = yallist.create([1, 2, 3])\nmyList.push('foo')\nmyList.unshift('bar')\n// of course pop() and shift() are there, too\nconsole.log(myList.toArray()) // ['bar', 1, 2, 3, 'foo']\nmyList.forEach(function (k) {\n  // walk the list head to tail\n})\nmyList.forEachReverse(function (k, index, list) {\n  // walk the list tail to head\n})\nvar myDoubledList = myList.map(function (k) {\n  return k + k\n})\n// now myDoubledList contains ['barbar', 2, 4, 6, 'foofoo']\n// mapReverse is also a thing\nvar myDoubledListReverse = myList.mapReverse(function (k) {\n  return k + k\n}) // ['foofoo', 6, 4, 2, 'barbar']\n\nvar reduced = myList.reduce(function (set, entry) {\n  set += entry\n  return set\n}, 'start')\nconsole.log(reduced) // 'startfoo123bar'\n```\n\n----------------------------------------\n\nTITLE: Comparing Split Arrays with diffLinesRaw for Non-Empty Input in JavaScript\nDESCRIPTION: Demonstrates comparing two versions of input strings represented as arrays of lines using the diffLinesRaw function. The code imports diffLinesRaw and applies it to arrays obtained by splitting multiline and empty strings to get a line-wise diff of inserts. The outputs can be further formatted for display or analysis.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport {diffLinesRaw} from 'jest-diff';\\n\\nconst a = '';\\nconst b = 'line 1\\nline 2\\nline 3';\\n\\nconst diffs = diffLinesRaw(a.split('\\n'), b.split('\\n'));\n```\n\n----------------------------------------\n\nTITLE: Parsing Response Content-Type with typer.parse(res) - Node.js (JavaScript)\nDESCRIPTION: Here, 'typer.parse' is called with a Node.js HTTP response object. The function retrieves the media type from the response's 'content-type' header via 'getHeader', parsing it into an object. The 'content-type' header must be set in the response for correct parsing of the media type string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/media-typer/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = typer.parse(res)\n```\n\n----------------------------------------\n\nTITLE: Using Chalk as a Tagged Template Literal in JavaScript\nDESCRIPTION: Demonstrates using Chalk as an ES2015 tagged template literal. Styles are applied within curly braces `{}` prefixed by the desired Chalk style chain (e.g., `{bold ...}`, `{green.bold ...}`). Interpolated variables (`${miles}`, `${calculateFeet(miles)}`) are automatically converted to strings and included in the output. Requires the 'chalk' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chalk = require('chalk');\n\nconst miles = 18;\nconst calculateFeet = miles => miles * 5280;\n\nconsole.log(chalk`\n\tThere are {bold 5280 feet} in a mile.\n\tIn {bold ${miles} miles}, there are {green.bold ${calculateFeet(miles)} feet}.\n`);\n```\n\n----------------------------------------\n\nTITLE: Simple Content Negotiation with Accepts and Node.js HTTP Server - JavaScript\nDESCRIPTION: This example demonstrates setting up a basic Node.js HTTP server that uses the \"accepts\" library for negotiating response content types based on the client's Accept header. The code chooses between JSON, HTML, and plain text response types. Dependencies include the \"accepts\" and built-in \"http\" modules. Key parameters involve the incoming HTTP request and response objects. Input is an HTTP request; output is the appropriate formatted response. It defaults to plain text if no preferences match.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/accepts/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar accepts = require('accepts')\nvar http = require('http')\n\nfunction app (req, res) {\n  var accept = accepts(req)\n\n  // the order of this list is significant; should be server preferred order\n  switch (accept.type(['json', 'html'])) {\n    case 'json':\n      res.setHeader('Content-Type', 'application/json')\n      res.write('{\"hello\":\"world!\"}')\n      break\n    case 'html':\n      res.setHeader('Content-Type', 'text/html')\n      res.write('<b>hello, world!</b>')\n      break\n    default:\n      // the fallback is text/plain, so no need to specify it above\n      res.setHeader('Content-Type', 'text/plain')\n      res.write('hello, world!')\n      break\n  }\n\n  res.end()\n}\n\nhttp.createServer(app).listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Executing Project Tests via make (Legacy)\nDESCRIPTION: This command utilizes the 'make' build automation tool to run the project's tests, typically defined in a Makefile. This was the command used for testing prior to version 1.0.6, after which `npm test` became the standard.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie-signature/History.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer by Copying Another Buffer in JavaScript\nDESCRIPTION: Illustrates `Buffer.from(buffer)` which creates a new Buffer instance by copying the data from an existing Buffer. Modifications to the original buffer do not affect the newly created copy. A `TypeError` is thrown if the input is not a Buffer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // 'auffer'\nconsole.log(buf2.toString());\n  // 'buffer' (copy is not changed)\n```\n\n----------------------------------------\n\nTITLE: Retrieving original position using SourceMapConsumer - JavaScript\nDESCRIPTION: Demonstrates how to call originalPositionFor on a SourceMapConsumer instance to map a generated position back to the original source location. Requires a SourceMapConsumer object (consumer) already constructed from a valid source map, and accepts an object with 'line', 'column', and optional 'bias' properties. Returns an object containing the source file, original line and column, and identifier name if they exist, or nulls otherwise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.originalPositionFor({ line: 2, column: 10 })\n// { source: 'foo.coffee',\n//   line: 2,\n//   column: 2,\n//   name: null }\n\nconsumer.originalPositionFor({ line: 99999999999999999, column: 999999999999999 })\n// { source: null,\n//   line: null,\n//   column: null,\n//   name: null }\n```\n\n----------------------------------------\n\nTITLE: Using parseTsconfig Function for Explicit Parsing\nDESCRIPTION: Shows an example of using the `parseTsconfig` function from the `get-tsconfig` library. Unlike `getTsconfig`, this function requires an explicit path to an existing tsconfig file (`tsconfigPath`) and directly parses it, resolving any `extends` fields. It returns the parsed configuration object (`TsConfigJsonResolved`). An optional cache can be provided.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTsconfig } from 'get-tsconfig'\n\n// Must pass in a path to an existing tsconfig.json file\nconsole.log(parseTsconfig('./path/to/tsconfig.custom.json'))\n```\n\n----------------------------------------\n\nTITLE: Consistent Color System Object and Application via CSS Variables (TypeScript)\nDESCRIPTION: Defines a comprehensive 'colorSystems' object containing marketing cluster palettes, including primary/secondary/accent tones, light, medium, dark, and contrast values. Applies each color value to CSS variables using Object.entries and setProperty. Designed to be called on theme change in a React or JS/TS app, with no other dependencies; ensures consistent UI theming.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst colorSystems = {\n  marketing: {\n    primary: '#EF4444',\n    secondary: '#FCA5A5',\n    accent: '#B91C1C',\n    light: '#FEF2F2',\n    medium: '#FEE2E2',\n    dark: '#DC2626',\n    contrast: '#1F2937',\n    badge: '#EF4444'\n  },\n  // ... other sets ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using the 'stringify' Option in fill-range (JavaScript)\nDESCRIPTION: Demonstrates the `stringify` option within `fill-range`. When `stringify: true` is passed in the options object, all values in the returned array are cast to strings, even if they represent numbers. Without this option, integers are returned as numbers. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(fill(1, 5));                    //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill(1, 5, { stringify: true })); //=> [ '1', '2', '3', '4', '5' ]\n```\n\n----------------------------------------\n\nTITLE: Installing find-up via npm\nDESCRIPTION: This command installs the `find-up` package using the Node Package Manager (npm). Running this command in a terminal will download and add the package to your project's dependencies or install it globally depending on flags used (not shown). Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/find-up/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install find-up\n```\n\n----------------------------------------\n\nTITLE: Negotiating Accept-Encoding Header - JavaScript\nDESCRIPTION: This snippet demonstrates Negotiator usage for determining the client's preferred encodings from the Accept-Encoding header, including both ordered preference lists and selection from supported encodings. Needs a request object with Accept-Encoding header; outputs one or more matching encoding values based on client and server intersection.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/negotiator/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\navailableEncodings = ['identity', 'gzip']\n\nnegotiator = new Negotiator(request)\n\n// Let's say Accept-Encoding header is 'gzip, compress;q=0.2, identity;q=0.5'\n\nnegotiator.encodings()\n// -> ['gzip', 'identity', 'compress']\n\nnegotiator.encodings(availableEncodings)\n// -> ['gzip', 'identity']\n\nnegotiator.encoding(availableEncodings)\n// -> 'gzip'\n```\n\n----------------------------------------\n\nTITLE: Installing semver via npm - Bash\nDESCRIPTION: Demonstrates how to install the 'semver' package globally or locally via npm. This step is necessary before using semver as a module or command-line tool. This command should be run in a terminal within your Node.js project directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install semver\n```\n\n----------------------------------------\n\nTITLE: Matching Routes by Path and Verb using app.match.VERB() in JavaScript\nDESCRIPTION: Shows the usage of `app.match.VERB()` (e.g., `app.match.put`) added in Express 2.2.0 to find registered routes that match a specific HTTP verb and a concrete URL path like '/user/12'. This is useful for checking if a particular request would be handled by the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\napp.match.put('/user/12')\n```\n\n----------------------------------------\n\nTITLE: Using Source Map Support with AMD Loaders - HTML\nDESCRIPTION: Shows how to use source-map-support in an AMD module environment (e.g., with RequireJS). The script defines a dependency on 'browser-source-map-support' and calls install() upon loading. Appropriate for modular browser projects requiring enhanced error stack mapping.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  define(['browser-source-map-support'], function(sourceMapSupport) {\n    sourceMapSupport.install();\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating rangeLimit Option in braces - JavaScript\nDESCRIPTION: Demonstrates how 'braces' limits the range expansion to avoid security and performance issues. If the generated range exceeds 'rangeLimit', it returns an optimized regex instead of a full list. The value is customizable or can be disabled by setting to Infinity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// pattern exceeds the \"rangeLimit\", so it's optimized automatically\nconsole.log(braces.expand('{1..1000}'));\n//=> ['([1-9]|[1-9][0-9]{1,2}|1000)']\n\n// pattern does not exceed \"rangeLimit\", so it's NOT optimized\nconsole.log(braces.expand('{1..100}'));\n//=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']\n```\n\n----------------------------------------\n\nTITLE: Customizing Mergability with isMergeableObject in deepmerge (JavaScript)\nDESCRIPTION: This example integrates the is-plain-object package to define a custom isMergeableObject function for deepmerge. It demonstrates how only plain object properties are merged, while instances of special classes are directly used from the source. The snippet shows both default and customized behaviors, highlighting control over cloning and property merging in advanced scenarios. Requires 'is-plain-object' and deepmerge.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { isPlainObject } = require('is-plain-object')\n\nfunction SuperSpecial() {\n\tthis.special = 'oh yeah man totally'\n}\n\nconst instantiatedSpecialObject = new SuperSpecial()\n\nconst target = {\n\tsomeProperty: {\n\t\tcool: 'oh for sure'\n\t}\n}\n\nconst source = {\n\tsomeProperty: instantiatedSpecialObject\n}\n\nconst defaultOutput = merge(target, source)\n\ndefaultOutput.someProperty.cool // => 'oh for sure'\ndefaultOutput.someProperty.special // => 'oh yeah man totally'\ndefaultOutput.someProperty instanceof SuperSpecial // => false\n\nconst customMergeOutput = merge(target, source, {\n\tisMergeableObject: isPlainObject\n})\n\ncustomMergeOutput.someProperty.cool // => undefined\ncustomMergeOutput.someProperty.special // => 'oh yeah man totally'\ncustomMergeOutput.someProperty instanceof SuperSpecial // => true\n```\n\n----------------------------------------\n\nTITLE: Installing `import-local` via npm\nDESCRIPTION: This shell command installs the `import-local` package using the Node Package Manager (npm). This dependency is required to use the functionality provided by the package in a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/import-local/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install import-local\n```\n\n----------------------------------------\n\nTITLE: Cancelling HTTP Requests with AbortController and node-fetch - JavaScript\nDESCRIPTION: This example implements request cancellation using AbortController to time out a node-fetch HTTP request after 150ms. It demonstrates compatibility for global or polyfilled AbortController. Handles abort errors using a try/catch/finally structure, and parses the response if successful. Requires node-fetch and, for older Node.js versions, the abort-controller polyfill.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch, { AbortError } from 'node-fetch';\\n\\n// AbortController was added in node v14.17.0 globally\\nconst AbortController = globalThis.AbortController || await import('abort-controller')\\n\\nconst controller = new AbortController();\\nconst timeout = setTimeout(() => {\\n\\tcontroller.abort();\\n}, 150);\\n\\ntry {\\n\\tconst response = await fetch('https://example.com', {signal: controller.signal});\\n\\tconst data = await response.json();\\n} catch (error) {\\n\\tif (error instanceof AbortError) {\\n\\t\\tconsole.log('request was aborted');\\n\\t}\\n} finally {\\n\\tclearTimeout(timeout);\\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling resolution conditions with the unsafe option in resolve.exports - JavaScript\nDESCRIPTION: Shows how the unsafe option modifies resolution, making the matcher ignore all inferred/default conditions except 'default' and those manually specified in options.conditions. No dependencies except for resolve.exports and a package object. The unsafe flag forces all standard conditions except 'default' to be omitted unless supplied. Expected inputs are the package, entry point, and options object; outputs are the resolved conditions and matched export path. Limitations: require, browser, and similar flags are ignored if unsafe is true.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve.exports/readme.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nresolve.exports(pkg, '.');\n//=> Conditions: [\"default\", \"import\", \"node\"]\n\nresolve.exports(pkg, '.', { unsafe: true });\n//=> Conditions: [\"default\"]\n\nresolve.exports(pkg, '.', { unsafe: true, require: true, browser: true });\n//=> Conditions: [\"default\"]\n```\n\nLANGUAGE: js\nCODE:\n```\nresolve.exports(pkg, '.', {\n  unsafe: true,\n  conditions: [\"require\"]\n});\n//=> Conditions: [\"default\", \"require\"]\n\nresolve.exports(pkg, '.', {\n  unsafe: true,\n  conditions: [\"browser\", \"require\", \"custom123\"]\n});\n//=> Conditions: [\"default\", \"browser\", \"require\", \"custom123\"]\n```\n\n----------------------------------------\n\nTITLE: Validating Release Types using semver.RELEASE_TYPES (JavaScript)\nDESCRIPTION: This snippet shows how to check if a user-provided string is a valid semantic version release type (like 'major', 'preminor', etc.) by checking its inclusion in the `semver.RELEASE_TYPES` constant array. It requires the `semver` library and logs a confirmation or warning based on the validation result.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver');\n\nif (semver.RELEASE_TYPES.includes(arbitraryUserInput)) {\n  console.log('This is a valid release type!');\n} else {\n  console.warn('This is NOT a valid release type!');\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Memphis Style Class in React Theme Provider\nDESCRIPTION: Shows a React `useEffect` hook within a theme provider component (`theme-provider.tsx`). This hook depends on the `appearance` state and dynamically adds or removes the `memphis-style` and `enabled` classes to the `document.body` based on whether the `visualStyle` property in `appearance` is set to 'memphis'. This controls the application of the Memphis CSS rules globally.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  // Suppose you already call applyTheme(appearance)...\n\n  if (appearance.visualStyle === 'memphis') {\n    document.body.classList.add('memphis-style', 'enabled');\n  } else {\n    document.body.classList.remove('memphis-style', 'enabled');\n  }\n}, [appearance]);\n```\n\n----------------------------------------\n\nTITLE: Extending BaseError Class Using ES2015+ Syntax with make-error in JavaScript\nDESCRIPTION: This snippet illustrates using ES2015 (ES6) class inheritance to create a CustomError class that extends BaseError from the make-error package. The constructor calls the base class constructor with a custom message. Requires the make-error package and support for ES2015 class syntax. The output is a class definition ready to throw custom errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-error/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BaseError } from \"make-error\";\n\nclass CustomError extends BaseError {\n  constructor() {\n    super(\"custom error message\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using an LRU Cache Instance - Node.js - JavaScript\nDESCRIPTION: Shows how to import the lru-cache module, configure its options, create cache instances with different settings, and perform basic set/get operations. The sample demonstrates object-key support, cache eviction, and cache reset functionality. Core options like max, length, dispose, and maxAge are shown, and the code assumes Node.js with lru-cache installed and (optionally) the 'assert' module for verification.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/lru-cache/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n, key) { return n * 2 + key.length }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = new LRU(options)\n  , otherCache = new LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.reset()    // empty the cache\n```\n\n----------------------------------------\n\nTITLE: Redirecting debug Output Streams per Namespace or Globally (JavaScript)\nDESCRIPTION: Demonstrates how to change the output stream for debug messages in Node.js. It shows redirecting a specific namespace ('app:log') to `console.log` (stdout) while others default to `stderr`, and then globally redirecting all debug output to `console.info`. Requires the 'debug' library and uses `console.log` and `console.info`; binding to `console` is crucial.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n----------------------------------------\n\nTITLE: Using app.delete() Method in Express.js\nDESCRIPTION: This snippet shows the usage of the `app.delete()` method for defining routes that respond to HTTP DELETE requests. This is the replacement for the deprecated `app.del()` method, introduced as the preferred alternative in Express 4.2.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napp.delete()\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Schema Types using Value.Convert in TypeBox (TypeScript)\nDESCRIPTION: This snippet illustrates the `Value.Convert()` function from the TypeBox `Value` module. It attempts to convert the properties of an input value to match the types defined in a target TypeBox schema `T`. The first example successfully converts `{ x: '3.14' }` to `{ x: 3.14 }`. The second example shows that if a conversion is not reasonably possible (like converting 'not a number' to a number), the original value is retained.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Object({ x: Type.Number() })\n\nconst R1 = Value.Convert(T, { x: '3.14' })          // const R1 = { x: 3.14 }\n\nconst R2 = Value.Convert(T, { x: 'not a number' })  // const R2 = { x: 'not a number' }\n```\n\n----------------------------------------\n\nTITLE: Listing Recognized Yes/No Values in JavaScript\nDESCRIPTION: This JavaScript snippet lists the values that 'yn' will recognize as yes or no, including various string and boolean representations. It is intended to clarify which inputs the 'yn' library parses successfully. No dependencies are required, and there is no functional code executed, just a reference for supported inputs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yn/readme.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n&#96;&#96;&#96;js\\n'y', 'yes', 'true', true, '1', 1, 'n', 'no', 'false', false, '0', 0\\n&#96;&#96;&#96;\n```\n\n----------------------------------------\n\nTITLE: Testing Animation Engine Performance with Vitest in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates a performance test using the Vitest framework. It measures the average execution time of the `playAnimation` function (imported from '../lib/animation-engine') over 10 calls using `perf_hooks`. The test asserts that the average execution time is less than 50 milliseconds. Requires Vitest setup and potentially a DOM mock environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, it, expect } from 'vitest';\nimport { performance } from 'perf_hooks';\nimport { playAnimation } from '../lib/animation-engine';\n\ndescribe('Animation Engine Performance', () => {\n  it('should run playAnimation under 50ms for 10 calls', () => {\n    const start = performance.now();\n    for (let i = 0; i < 10; i++) {\n      playAnimation({ type: 'confetti' });\n    }\n    const end = performance.now();\n    const avg = (end - start) / 10;\n    expect(avg).toBeLessThan(50);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Resulting Output for Permissive Parsing in arg with Node.js\nDESCRIPTION: Shows the resulting argument object when using arg's permissive mode so that extra or unknown keys do not cause an error. Demonstrates how extra arguments appear in the _ property and known spec keys are parsed as expected.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst args = {\n\t_:          ['--qux', 'qix', 'hello again'],\n\t'--foo':    'hello',\n\t'--bar':    12345\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming require-directory Exports in app.js (JavaScript)\nDESCRIPTION: Shows how a parent module (e.g., `app.js`) can require the directory index (e.g., `./routes`) managed by `require-directory`. The resulting `routes` variable holds a nested object structure representing the required modules, allowing access via dot notation (e.g., `routes.home`, `routes.auth.login`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar routes = require('./routes');\n\n// snip\n\napp.get('/', routes.home);\napp.get('/register', routes.auth.register);\napp.get('/login', routes.auth.login);\napp.get('/logout', routes.auth.logout);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pretty-format (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of the `prettyFormat` function to stringify a complex JavaScript object. The example includes various data types like nested objects, circular references, Symbols, Maps, and special number values (`-0`, `Infinity`, `NaN`). The output shows the formatted, indented string representation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Tracking Events with PostHog in React - JavaScript\nDESCRIPTION: This snippet demonstrates how to use PostHog within a React application to capture key frontend user events (such as quiz completion or hint button clicks). It requires the PostHog JavaScript SDK to be installed (typically via npm/yarn and initialized elsewhere in the app). You can log custom events using the posthog.capture method, passing the event name and a payload object. Inputs include the event type and properties (e.g., score, time), with output sent directly to PostHog for analysis. Avoid including personal identifiable info, and ensure PostHog SDK is properly initialized for these calls to work.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nposthog.capture('Completed Quiz', {score: 80, time: 120});\n```\n\n----------------------------------------\n\nTITLE: Blacklisting Modules with a Function using require-directory (JavaScript)\nDESCRIPTION: Illustrates using the `exclude` option with a custom function for filtering. The function receives the full path of each discovered file and should return `true` to include the module or `false` to exclude it, enabling complex exclusion logic. Returning false excludes the file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  check = function(path){\n    if(/dontinclude\\.js$/.test(path)){\n      return false; // don't include\n    }else{\n      return true; // go ahead and include\n    }\n  },\n  hash = requireDirectory(module, {exclude: check});\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Helper Module Transforms via yarn (Shell)\nDESCRIPTION: Illustrates how to add @babel/helper-module-transforms to a project using the yarn package manager. This command will add the Babel helper functions as a dependency, updating the yarn.lock file for dependency management. It requires yarn to be installed and should be executed in the root directory of your Node.js project. No additional configuration is necessary apart from having yarn set up; the package integrates automatically when included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-module-transforms/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/helper-module-transforms\n```\n\n----------------------------------------\n\nTITLE: Creating Wave Transition Component with Framer Motion in TypeScript React\nDESCRIPTION: Implements a React functional component (`WaveTransition`) using TypeScript (TSX) and Framer Motion. It renders an SVG wave with a gradient fill and animates the path and optional bubble elements to create a water movement effect. The component uses Framer Motion's `variants` for entrance/exit transitions and the `animate` prop for continuous looping animations on the wave path and bubble elements. It requires `react` and `framer-motion` as dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-solution-for-your-DecA-I-de-Animation-System-that-meets-the-requirements-an-1742703767915.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// WaveTransition.tsx\nimport React from 'react';\nimport { motion, Variants } from 'framer-motion';\n\ninterface WaveTransitionProps {\n  targetPosition?: { x: number; y: number };\n}\n\nconst waveVariants: Variants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: { duration: 1, ease: \"easeOut\" }\n  },\n  exit: { opacity: 0, y: -20, transition: { duration: 1, ease: \"easeIn\" } }\n};\n\nexport default function WaveTransition({ targetPosition }: WaveTransitionProps) {\n  return (\n    <motion.svg\n      viewBox=\"0 0 120 20\"\n      className=\"absolute bottom-0 left-0 w-full\"\n      variants={waveVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"exit\"\n    >\n      <defs>\n        <linearGradient id=\"waveGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n          <stop offset=\"0%\" stopColor=\"#4FD1C5\" />\n          <stop offset=\"50%\" stopColor=\"#35A0DE\" />\n          <stop offset=\"100%\" stopColor=\"#3182CE\" />\n        </linearGradient>\n      </defs>\n      <motion.path\n        d=\"M0,10 C30,0 90,20 120,10 L120,20 L0,20 Z\"\n        fill=\"url(#waveGradient)\"\n        animate={{\n          x: [0, -10, 0, 10, 0],\n          transition: { repeat: Infinity, duration: 6, ease: \"easeInOut\" }\n        }}\n      />\n      {/* Optional bubbles for added water effect */}\n      <motion.circle\n        cx=\"30\"\n        cy=\"5\"\n        r=\"1.5\"\n        fill=\"white\"\n        opacity=\"0.8\"\n        animate={{\n          y: [0, -5, 0],\n          opacity: [0.8, 0.2, 0.8],\n          transition: { repeat: Infinity, duration: 3, ease: \"easeInOut\" }\n        }}\n      />\n      <motion.circle\n        cx=\"80\"\n        cy=\"8\"\n        r=\"1\"\n        fill=\"white\"\n        opacity=\"0.7\"\n        animate={{\n          y: [0, -3, 0],\n          opacity: [0.7, 0.3, 0.7],\n          transition: { repeat: Infinity, duration: 2.5, ease: \"easeInOut\" }\n        }}\n      />\n    </motion.svg>\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Data URI Strings to Buffers in Node.js (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use the 'data-uri-to-buffer' module to convert Data URI strings into Buffer instances. It showcases decoding both plain-text and base64-encoded Data URIs, with output printed to the console. The snippet requires the 'data-uri-to-buffer' package as a dependency, and inputs are expected to be valid Data URI strings. Output is a Buffer object whose contents represent the decoded data, and the example highlights that both media type and encoding are handled correctly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/data-uri-to-buffer/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\n// plain-text data is supported\nlet uri = 'data:,Hello%2C%20World!';\nlet decoded = dataUriToBuffer(uri);\nconsole.log(decoded.toString());\n// 'Hello, World!'\n\n// base64-encoded data is supported\nuri = 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D';\ndecoded = dataUriToBuffer(uri);\nconsole.log(decoded.toString());\n// 'Hello, World!'\n\n```\n\n----------------------------------------\n\nTITLE: Customizing dedent with withOptions - JavaScript\nDESCRIPTION: Illustrates customization of dedent\\'s behavior via its withOptions method in JavaScript. Requires dedent package and knowledge of available options. By calling withOptions with an option object, returns a new dedent function with modified escaping, trimming, or formatting settings. Usage covers both tagged template and function call patterns, supporting configurable treatment of multi-line strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dedent/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport dedent from 'dedent';\n\ndedent.withOptions({ /* ... */ })`input`;\ndedent.withOptions({ /* ... */ })(`input`);\n```\n\n----------------------------------------\n\nTITLE: Using to-regex-range Output to Test Numbers in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the generated regex source string from 'to-regex-range'. It takes the source string for the range 15-95, constructs a RegExp object with start (^) and end ($) anchors, and then tests various numbers against this regex to show which fall within the range.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst toRegexRange = require('to-regex-range');\n```\n\nLANGUAGE: js\nCODE:\n```\nconst source = toRegexRange('15', '95');\n//=> 1[5-9]|[2-8][0-9]|9[0-5]\n\nconst regex = new RegExp(`^${source}$`);\nconsole.log(regex.test('14')); //=> false\nconsole.log(regex.test('50')); //=> true\nconsole.log(regex.test('94')); //=> true\nconsole.log(regex.test('96')); //=> false\n```\n\n----------------------------------------\n\nTITLE: Capturing Custom Events with PostHog in JavaScript/React\nDESCRIPTION: Demonstrates how to send a custom event named 'Completed Quiz' to PostHog from a frontend application (likely React). This includes event-specific properties like 'score' and 'time'. This is used for product analytics to understand user interactions with specific features like quizzes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nposthog.capture('Completed Quiz', {score: 80, time: 120})\n```\n\n----------------------------------------\n\nTITLE: Importing Constants and Classes for diffStringsRaw()\nDESCRIPTION: Shows the necessary named imports from `jest-diff` when working with the raw diff data produced by `diffStringsRaw`. This includes constants `DIFF_DELETE`, `DIFF_EQUAL`, `DIFF_INSERT`, the `Diff` class (useful for TypeScript or custom logic), and the `diffStringsRaw` function itself. Covers both CommonJS (`require`) and ECMAScript (`import`) module syntax.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst {DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, Diff, diffStringsRaw} = require('jest-diff');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, Diff, diffStringsRaw} from 'jest-diff';\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating AzureKeyCredential (TypeScript)\nDESCRIPTION: Demonstrates importing and using the `AzureKeyCredential` from `@azure/core-auth`. It shows how to instantiate the credential with a secret value and later update the key using the `update` method. This credential type is used for static, single-key authentication like shared access keys.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-auth/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AzureKeyCredential } from \"@azure/core-auth\";\n\nconst credential = new AzureKeyCredential(\"secret value\");\n// prints: \"secret value\"\nconsole.log(credential.key);\ncredential.update(\"other secret value\");\n// prints: \"other secret value\"\nconsole.log(credential.key);\n```\n\n----------------------------------------\n\nTITLE: Deprecating Property Access using deprecate.property (JavaScript)\nDESCRIPTION: Shows how to use `deprecate.property(obj, prop, [message])` to issue a warning whenever a specific property on an object is accessed (get or set). The message can be derived from the property name or specified explicitly. Note that this converts data descriptors to accessor descriptors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n----------------------------------------\n\nTITLE: Default Fetch Options Object Schema - JavaScript\nDESCRIPTION: This object schema documents the default options for a fetch request using node-fetch, shown as a JavaScript object literal. It includes both standard Fetch API properties and node-fetch-specific extensions. Provides information on supported parameters for customizing behavior, their default values, and the effects of changing them.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n\\t// These properties are part of the Fetch Standard\\n\\tmethod: 'GET',\\n\\theaders: {},            // Request headers. format is the identical to that accepted by the Headers constructor (see below)\\n\\tbody: null,             // Request body. can be null, or a Node.js Readable stream\\n\\tredirect: 'follow',     // Set to `manual` to extract redirect headers, `error` to reject redirect\\n\\tsignal: null,           // Pass an instance of AbortSignal to optionally abort requests\\n\\n\\t// The following properties are node-fetch extensions\\n\\tfollow: 20,             // maximum redirect count. 0 to not follow redirect\\n\\tcompress: true,         // support gzip/deflate content encoding. false to disable\\n\\tsize: 0,                // maximum response body size in bytes. 0 to disable\\n\\tagent: null,            // http(s).Agent instance or function that returns an instance (see below)\\n\\thighWaterMark: 16384,   // the maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource.\\n\\tinsecureHTTPParser: false\\t// Use an insecure HTTP parser that accepts invalid HTTP headers when `true`.\\n}\n```\n\n----------------------------------------\n\nTITLE: Including Tailwind Directives in CSS\nDESCRIPTION: These directives need to be added to the main CSS file (e.g., `index.css`) of the project. `@tailwind base;` injects Tailwind's base styles and resets, `@tailwind components;` injects component classes, and `@tailwind utilities;` injects Tailwind's vast library of utility classes, making them available throughout the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Checking Call Count with onetime in JavaScript\nDESCRIPTION: Shows how to use the `onetime.callCount(fn)` static method to get the number of times a `onetime`-wrapped function has been called. This count increments even if the original function's logic isn't executed due to it being called previously. Requires the 'onetime' library and a function previously wrapped by `onetime`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/onetime/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst onetime = require('onetime');\n\nconst foo = onetime(() => {});\n\nfoo();\nfoo();\nfoo();\n\nconsole.log(onetime.callCount(foo));\n//=> 3\n```\n\n----------------------------------------\n\nTITLE: Partial Matching within Strings Using contains in Micromatch (JavaScript)\nDESCRIPTION: Demonstrates use of mm.contains for substring-style matching, where the pattern can match any part of the string. Returns booleans for different test cases. Requires micromatch as 'mm'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar mm = require('micromatch');\n// mm.contains(string, pattern[, options]);\n\nconsole.log(mm.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(mm.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n----------------------------------------\n\nTITLE: Formatting with vsprintf.js Using Array Arguments (JavaScript)\nDESCRIPTION: Shows the usage of vsprintf, which accepts an array of arguments rather than a variable number of arguments, for string formatting with sprintf.js. The vsprintf function uses the provided array to substitute values in the format string, with placeholders matched in order. The function should be imported from sprintf-js, and the output will be the interpolated string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"])\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmark for escape-html via NPM Script in Shell\nDESCRIPTION: Shows the shell command to initiate the benchmark suite for the escape-html library using npm scripts. Requires that npm and the escape-html project with a defined 'bench' script in package.json are available. Running this command executes the benchmarking process, measuring the library's speed in various character escaping scenarios and outputs the test results to the shell.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escape-html/Readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run-script bench\n```\n\n----------------------------------------\n\nTITLE: Importing the etag Module - Node.js JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import the 'etag' module into your Node.js application using the require statement. This is a prerequisite before calling any functions provided by the module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/etag/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar etag = require('etag')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Advanced Custom Errors with Properties - JavaScript\nDESCRIPTION: This snippet showcases creation of both basic and advanced custom errors using error-ex, with the latter demonstrating property-driven stack line manipulation. Dependencies are limited to 'error-ex'. The advanced error uses a property ('foo') configured to dynamically contribute a line to the stack if present. Inputs include the error message and property value; the output is an enhanced error with both message and custom stack formatting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/error-ex/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar errorEx = require('error-ex');\n\nvar BasicError = errorEx();\n\nvar NamedError = errorEx('NamedError');\n\n// --\n\nvar AdvancedError = errorEx('AdvancedError', {\n\tfoo: {\n\t\tline: function (value, stack) {\n\t\t\tif (value) {\n\t\t\t\treturn 'bar ' + value;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nvar err = new AdvancedError('hello, world');\nerr.foo = 'baz';\nthrow err;\n\n/*\n\tAdvancedError: hello, world\n\t    bar baz\n\t    at tryReadme() (readme.js:20:1)\n*/\n```\n\n----------------------------------------\n\nTITLE: Enhancing Gamification System - TypeScript\nDESCRIPTION: Implements functionality to award experience, update achievements, handle streaks, grant badges, and record activity completions for user engagement. Depends on the user profile state and may interact with backend APIs or local storage. Expects parameters such as user IDs, activity metadata, and supports batch processing or event-based triggers. Returns updated user gamification status and controls in-app notifications or UI updates. Limitations include ensuring idempotency and no double-awards for the same activity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Handles awarding experience, updating achievements, handling streaks, awarding badges, and recording activity completions for gamification system\n// Usage context: User completes actions, system tracks progress and rewards accordingly.\n// Dependencies: User profile store, achievement definitions, possibly backend APIs\n\nexport function awardExperience(userId: string, xpAmount: number) {\n  // Update user's XP tally\n  // ...\n}\n\nexport function updateAchievements(userId: string, activity: string) {\n  // Check and update achievements progress\n  // ...\n}\n\nexport function handleStreak(userId: string, date: Date) {\n  // Maintain streak count and reset as necessary\n  // ...\n}\n\nexport function awardBadge(userId: string, badgeId: string) {\n  // Award badge to user profile\n  // ...\n}\n\nexport function recordActivityCompletion(userId: string, activity: string, timestamp: Date) {\n  // Persist activity completion event\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js App with Specific Debug Logs in PowerShell (PowerShell)\nDESCRIPTION: Demonstrates setting the `DEBUG` environment variable to enable only the 'app' namespace (`$env:DEBUG='app'`) and then executing the `node app.js` command within PowerShell.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG='app';node app.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Support: Custom Source Map Retrieval\nDESCRIPTION: JavaScript example showing how to provide a custom function for retrieving source maps. The `retrieveSourceMap` option allows defining custom logic, such as fetching maps from memory instead of the filesystem. The function should return an object with `url` and `map` properties, or `null` if the map is not found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@cspotcode/source-map-support').install({\n  retrieveSourceMap: function(source) {\n    if (source === 'compiled.js') {\n      return {\n        url: 'original.js',\n        map: fs.readFileSync('compiled.js.map', 'utf8')\n      };\n    }\n    return null;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Allowing Leading Pipes in Flow Type Annotations - Babylon - JavaScript\nDESCRIPTION: This snippet shows Flow's ability to allow leading pipes ('|') in union type positions. Babylon will now correctly accept and parse this syntax, which is valid in Flow for annotation of types. Requires the parser with Flow plugin enabled. Input is a function annotated with a union type beginning with a pipe; output is valid parsing of such syntax.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar f = (x): | 1 | 2 => 1;\n```\n\n----------------------------------------\n\nTITLE: Validation Example with Custom Options (JavaScript)\nDESCRIPTION: This example shows how to customize the validation output. It provides a custom comment to be displayed with messages, specifies deprecated configuration options (`deprecatedConfig`), includes the required `exampleConfig`, and sets a custom title only for deprecation warnings, leaving error and warning titles as default.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvalidate(config, {\n  comment: '  Documentation: http://custom-docs.com',\n  deprecatedConfig,\n  exampleConfig,\n  title: {\n    deprecation: 'Custom Deprecation',\n    // leaving 'error' and 'warning' as default\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the partial Option with minimatch in JavaScript\nDESCRIPTION: Shows examples of using the `partial` option with the `minimatch` function. This option allows matching a partial path against a pattern, returning true if the path *could potentially* match the full pattern as more path segments are added (e.g., '/a/b' partially matches '/a/*/c/d'). It's useful for optimizing directory traversal by avoiding paths that can never match. Requires the `minimatch` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/minimatch/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nminimatch('/a/b', '/a/*/c/d', { partial: true })  // true, might be /a/b/c/d\nminimatch('/a/b', '/**/d', { partial: true })     // true, might be /a/b/.../d\nminimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a\n```\n\n----------------------------------------\n\nTITLE: Using Side Channels for Data Association - JavaScript\nDESCRIPTION: This JavaScript snippet imports the side-channel package, creates a new side channel instance, and demonstrates storing and retrieving data related to a JS object key. It covers side-channel operations: has, get, set, delete, and assert, using assert for correctness checks and TypeError handling. Requires the side-channel and assert packages. Input is a JavaScript object acting as the key, and values can be any JS value; output is typically the stored value or exception handling. WeakMap is used internally when available; otherwise, memory may leak unless delete is called.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst getSideChannel = require('side-channel');\n\nconst channel = getSideChannel();\n\nconst key = {};\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n\nchannel.set(key, 42);\n\nchannel.assert(key); // does not throw\nassert.equal(channel.has(key), true);\nassert.equal(channel.get(key), 42);\n\nchannel.delete(key);\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Search Index in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new search index using the `@azure/search-documents` library in JavaScript. It initializes a `SearchIndexClient` with the service endpoint and an API key, then defines the index structure including various field types (String, Double, ComplexType, Int32) and attributes (key, sortable, filterable, facetable, searchable, hidden). The `createIndex` method is called asynchronously to create the index.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { SearchIndexClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchIndexClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const result = await client.createIndex({\n    name: \"example-index\",\n    fields: [\n      {\n        type: \"Edm.String\",\n        name: \"id\",\n        key: true,\n      },\n      {\n        type: \"Edm.Double\",\n        name: \"awesomenessLevel\",\n        sortable: true,\n        filterable: true,\n        facetable: true,\n      },\n      {\n        type: \"Edm.String\",\n        name: \"description\",\n        searchable: true,\n      },\n      {\n        type: \"Edm.ComplexType\",\n        name: \"details\",\n        fields: [\n          {\n            type: \"Collection(Edm.String)\",\n            name: \"tags\",\n            searchable: true,\n          },\n        ],\n      },\n      {\n        type: \"Edm.Int32\",\n        name: \"hiddenWeight\",\n        hidden: true,\n      },\n    ],\n  });\n\n  console.log(result);\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Serving Files with Custom MIME Types Using Send - Node.js JavaScript\nDESCRIPTION: Shows how to extend the MIME type resolution in 'send' to handle unknown types and register custom types/extensions. Sets the default unknown type to 'text/plain' and defines a custom type for '.x-mt' and '.x-mtt'. Then serves files from '/www/public' as in prior examples. Requires 'http', 'parseurl', and 'send'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Default unknown types to text/plain\nsend.mime.default_type = 'text/plain'\n\n// Add a custom type\nsend.mime.define({\n  'application/x-my-type': ['x-mt', 'x-mtt']\n})\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, { root: '/www/public' })\n    .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Enabling Standard ETag Generation in Express.js\nDESCRIPTION: Shows how to explicitly enable the standard ETag generation (the default behavior) in an Express application using `app.set('etag', true)`. Mentioned in version 4.4.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('etag', true)\n```\n\n----------------------------------------\n\nTITLE: Defining Gamification User Stats Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `UserStats` interface, outlining the data structure for storing user gamification information. It includes properties like level, experience points (xp), general points, current streak, and a list of earned achievements with their unlocked status.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { playAnimation } from './animation-engine';\n\nexport interface UserStats {\n  level: number;\n  xp: number;\n  points: number;\n  streak: number;\n  achievements: { id: string; unlocked: boolean }[];\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Performance and UI Tests with Vitest/Jest - TypeScript\nDESCRIPTION: Add performance.test.ts in a tests/ folder, using Vitest or Jest to create automated tests for responsiveness and correctness of UI or animation performance. Run using npm run test or npx vitest. Ensure all dependencies and configuration files for the chosen test framework are present before running.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// performance.test.ts\nimport { render } from '@testing-library/react';\nimport App from '../App';\n\ndescribe('performance', () => {\n  it('renders app fast', () => {\n    const before = performance.now();\n    render(<App />);\n    expect(performance.now() - before).toBeLessThan(500);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Schema Utilities using Type.Unsafe in TypeScript\nDESCRIPTION: This snippet provides practical examples of using `Type.Unsafe` to create reusable schema utility functions: `Nullable<T>` which adds `nullable: true` to an existing schema while inferring `Static<T> | null`, and `StringEnum<T>` which creates a string schema with an `enum` constraint based on input values, inferring the union of the literal string types. Dependencies include `Type`, `Static`, and `TSchema` from `@sinclair/typebox`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Type, Static, TSchema } from '@sinclair/typebox'\n\n// Nullable<T>\n\nfunction Nullable<T extends TSchema>(schema: T) {\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true })\n}\n\nconst T = Nullable(Type.String())                    // const T = {\n                                                     //   type: 'string',\n                                                     //   nullable: true\n                                                     // }\n\ntype T = Static<typeof T>                            // type T = string | null\n\n// StringEnum<string[]>\n\nfunction StringEnum<T extends string[]>(values: [...T]) {\n  return Type.Unsafe<T[number]>({ type: 'string', enum: values })\n}\n\nconst T = StringEnum(['A', 'B', 'C'])                // const T = {\n                                                     //   enum: ['A', 'B', 'C']\n                                                     // }\n\ntype T = Static<typeof T>                            // type T = 'A' | 'B' | 'C'\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Case with res.status().json() in Express.js\nDESCRIPTION: Shows the correct way to handle the edge case of sending a JSON response where the body is a number and a status code needs to be set, using method chaining: `res.status(status).json(num)`. This is the required approach following the deprecation in Express 4.2.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nres.status(status).json(num)\n```\n\n----------------------------------------\n\nTITLE: Setting a Simulated Interval with FakeTimers - JavaScript\nDESCRIPTION: Schedules a recurring callback that fires every specified interval with 'clock.setInterval'. Accepts a callback function and an interval in milliseconds. Returns a timer object or ID. Can be cleared using clearInterval.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = clock.setInterval(callback, timeout)\n```\n\n----------------------------------------\n\nTITLE: Building a Responsive App Layout with Tailwind CSS in TSX\nDESCRIPTION: This TSX code defines a basic React `App` component structure demonstrating a mobile-first responsive layout using Tailwind CSS. It sets a minimum screen height and uses flexbox for layout. The header uses responsive padding (`p-4 sm:p-6`) and text size (`text-lg sm:text-xl`). Navigation links (`nav`) are hidden on small screens (`hidden sm:flex`), and a placeholder button (`sm:hidden`) is included for a mobile hamburger menu. The main content area also uses responsive padding (`p-4 md:p-8`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <header className=\"p-4 sm:p-6 flex justify-between items-center bg-primary text-white\">\n        <div className=\"text-lg sm:text-xl\">DecA(I)de</div>\n        <nav className=\"hidden sm:flex gap-4\">\n          <a href=\"/dashboard\">Dashboard</a>\n          <a href=\"/settings\">Settings</a>\n        </nav>\n        {/* For mobile: hamburger menu */}\n        <button className=\"sm:hidden\">☰</button>\n      </header>\n      <main className=\"flex-1 p-4 md:p-8\">\n        {/* your page routes */}\n      </main>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pool Events: error, connect, and acquire (Node.js)\nDESCRIPTION: Provides examples for handling 'error', 'connect', and 'acquire' events emitted by Pool instances. Ensures robust production readiness by logging or acting on unexpected errors, tracking client instantiation/acquisition, and associating data with clients. Dependencies: 'pg-pool'. Useful for advanced diagnostics and monitoring.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Pool = require('pg-pool')\nconst pool = new Pool()\n\n// attach an error handler to the pool for when a connected, idle client\n// receives an error by being disconnected, etc\npool.on('error', function(error, client) {\n  // handle this in the same way you would treat process.on('uncaughtException')\n  // it is supplied the error as well as the idle client which received the error\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Pool = require('pg-pool')\nconst pool = new Pool()\n\nvar count = 0\n\npool.on('connect', client => {\n  client.count = count++\n})\n\npool\n  .connect()\n  .then(client => {\n    return client\n      .query('SELECT $1::int AS \"clientCount\"', [client.count])\n      .then(res => console.log(res.rows[0].clientCount)) // outputs 0\n      .then(() => client)\n  })\n  .then(client => client.release())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Pool = require('pg-pool')\nvar pool = new Pool()\n\nvar acquireCount = 0\npool.on('acquire', function (client) {\n  acquireCount++\n})\n\nvar connectCount = 0\npool.on('connect', function () {\n  connectCount++\n})\n\nfor (var i = 0; i < 200; i++) {\n  pool.query('SELECT NOW()')\n}\n\nsetTimeout(function () {\n  console.log('connect count:', connectCount) // output: connect count: 10\n  console.log('acquire count:', acquireCount) // output: acquire count: 200\n}, 100)\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Azure OpenAI Service Methods - TypeScript\nDESCRIPTION: This snippet uses Vitest to unit test the generateRoleplay function within an Azure OpenAI service. It mocks the @azure/openai package, sets up environment variables, and checks the correctness of function output using mocked API responses. Key features include module mocking (vi.mock), isolated setup (beforeEach), and validation via expect. Dependencies: Vitest, service source, and mock setup.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// server/tests/azureOpenai.test.ts\nimport { describe, it, expect, beforeEach, vi } from 'vitest'\nimport { generateRoleplay } from '../services/azureOpenai'\n\n// Mock the OpenAI client\nvi.mock('@azure/openai', () => ({\n  OpenAIClient: vi.fn().mockImplementation(() => ({\n    getChatCompletions: vi.fn().mockResolvedValue({\n      choices: [\n        {\n          message: {\n            content: JSON.stringify({\n              title: \"Test Roleplay\",\n              scenario: \"This is a test scenario\",\n              performanceIndicators: [\"PI1\", \"PI2\"],\n              difficulty: \"medium\",\n              businessType: \"retail\",\n              meetWith: \"Manager\"\n            })\n          }\n        }\n      ]\n    })\n  })),\n  AzureKeyCredential: vi.fn()\n}))\n\ndescribe('Azure OpenAI Service', () => {\n  beforeEach(() => {\n    // Set environment variables\n    process.env.AZURE_OPENAI_KEY = 'test-key'\n    process.env.AZURE_OPENAI_ENDPOINT = 'https://test-endpoint.openai.azure.com/'\n    process.env.AZURE_OPENAI_DEPLOYMENT = 'gpt-4o-mini'\n  })\n  \n  it('should generate a roleplay scenario', async () => {\n    const params = {\n      instructionalArea: 'Marketing',\n      performanceIndicators: ['PI1', 'PI2'],\n      difficultyLevel: 'medium',\n      businessType: 'retail'\n    }\n    \n    const result = await generateRoleplay(params)\n    \n    expect(result).toEqual({\n      title: \"Test Roleplay\",\n      scenario: \"This is a test scenario\",\n      performanceIndicators: [\"PI1\", \"PI2\"],\n      difficulty: \"medium\",\n      businessType: \"retail\",\n      meetWith: \"Manager\"\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Submitting Multipart FormData with Files Using node-fetch - JavaScript\nDESCRIPTION: This example shows constructing a FormData object, appending text and file fields, and submitting them as multipart/form-data with node-fetch. It makes use of the File class and handles binary data. This relies on node-fetch's FormData implementation and works for uploading files alongside textual data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch, { FormData, File, fileFrom } from 'node-fetch'\\n\\nconst httpbin = 'https://httpbin.org/post'\\nconst formData = new FormData()\\nconst binary = new Uint8Array([ 97, 98, 99 ])\\nconst abc = new File([binary], 'abc.txt', { type: 'text/plain' })\\n\\nformData.set('greeting', 'Hello, world!')\\nformData.set('file-upload', abc, 'new name.txt')\\n\\nconst response = await fetch(httpbin, { method: 'POST', body: formData })\\nconst data = await response.json()\\n\\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Advanced Chart Data Preparation (Data Visualization) in TypeScript\nDESCRIPTION: This snippet provides reusable utility functions for preparing chart data objects suitable for time-series, radar, and pie charts. It is intended to support integration with D3.js or similar chart libraries, abstracting the chart data transformation logic. Inputs are typically raw data arrays or statistics, and outputs are formatted data structures ready for visualization. The functions are agnostic to rendering libraries but are designed to interface cleanly with visualization packages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Data visualization utilities\\nexport function prepareTimeSeries(data: Array<{ x: number | string, y: number }>) {\\n  return data.map(point => ({ date: point.x, value: point.y }));\\n}\\n\\nexport function prepareRadarData(stats: Record<string, number>) {\\n  return Object.entries(stats).map(([axis, value]) => ({ axis, value }));\\n}\\n\\nexport function preparePieChartData(entries: Record<string, number>) {\\n  const total = Object.values(entries).reduce((a, b) => a + b, 0);\\n  return Object.entries(entries).map(([label, value]) => ({ label, value, percent: value / total }));\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and Calling Azure OpenAI Chat Completion API in Python\nDESCRIPTION: This Python snippet demonstrates how to set up the OpenAI Python SDK for use with Azure OpenAI by setting the api_type, api_base, api_key, and api_version. The example shows using the ChatCompletion API with an Azure deployment (specified via 'engine'), sending system and user messages, and retrieving the AI-generated response. Required dependencies include the openai Python package, along with environment variables for AZURE_OPENAI_ENDPOINT and AZURE_OPENAI_KEY. Input parameters include the deployed engine name and the message payloads; outputs are the model's generated reply. It is important to set api_type to 'azure' and use 'engine' rather than 'model', as Azure's OpenAI endpoints require this.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport openai\nopenai.api_type = \"azure\"\nopenai.api_base = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\nopenai.api_version = \"2024-05-01-preview\"  # or the version your resource requires\nopenai.api_key = os.getenv(\"AZURE_OPENAI_KEY\")\nresponse = openai.ChatCompletion.create(\n    engine=\"gpt-4\",  # use your deployment name\n    messages=[{\"role\": \"system\", \"content\": system_prompt}, {\"role\": \"user\", \"content\": user_prompt}]\n)\nresult = response['choices'][0]['message']['content']\n```\n\n----------------------------------------\n\nTITLE: Limiting Concurrent Async Functions with p-limit in JavaScript\nDESCRIPTION: This snippet showcases importing and using the p-limit library in Node.js to ensure only one promise-returning function executes at a time. After requiring p-limit and setting a concurrency of 1, an array of limited function invocations is constructed, and then executed concurrently using Promise.all within an async function. Dependencies include the 'p-limit' npm package and any user-defined functions such as fetchSomething and doSomething. The key parameter is the concurrency setting passed to pLimit, controlling how many async functions run simultaneously. This pattern is ideal for throttling API or resource usage and the returned value is an array of results from the executed async operations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-limit/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pLimit = require('p-limit');\n\nconst limit = pLimit(1);\n\nconst input = [\n\tlimit(() => fetchSomething('foo')),\n\tlimit(() => fetchSomething('bar')),\n\tlimit(() => doSomething())\n];\n\n(async () => {\n\t// Only one promise is run at once\n\tconst result = await Promise.all(input);\n\tconsole.log(result);\n})();\n```\n\n----------------------------------------\n\nTITLE: Using ts-node CLI for Execution and REPL (Shell)\nDESCRIPTION: Shell commands illustrating various ways to use the ts-node command-line interface. Includes executing scripts, starting a REPL, evaluating inline code (-e), printing evaluated code (-p), piping scripts, and using shorthand commands (ts-node-transpile-only, ts-node-cwd, ts-node-esm) which are equivalent to specific ts-node flags. Requires ts-node to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Execute a script as `node` + `tsc`.\nts-node script.ts\n\n# Starts a TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p -e '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho 'console.log(\"Hello, world!\")' | ts-node\n\n# Equivalent to ts-node --transpileOnly\nts-node-transpile-only script.ts\n\n# Equivalent to ts-node --cwdMode\nts-node-cwd script.ts\n\n# Equivalent to ts-node --esm\nts-node-esm script.ts\n```\n\n----------------------------------------\n\nTITLE: Clearing a Simulated Timeout with FakeTimers - JavaScript\nDESCRIPTION: Removes a scheduled timeout using its ID or object via 'clock.clearTimeout'. Requires a valid ID or timer object as input, created using setTimeout. Ensures that the associated callback does not execute.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclock.clearTimeout(id)\n```\n\n----------------------------------------\n\nTITLE: Proxying HTTPS Requests with https-proxy-agent in TypeScript\nDESCRIPTION: Demonstrates how to use `HttpsProxyAgent` from the `https-proxy-agent` module to make an HTTPS request via a proxy server. It involves importing necessary modules (`https`, `HttpsProxyAgent`), creating an agent instance with the proxy URL, and passing this agent to `https.get`. The response headers are logged, and the response body is piped to standard output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as https from 'https';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\nconst agent = new HttpsProxyAgent('http://168.63.76.32:3128');\n\nhttps.get('https://example.com', { agent }, (res) => {\n  console.log('\"response\" event!', res.headers);\n  res.pipe(process.stdout);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'debug' in Node.js (JavaScript)\nDESCRIPTION: Demonstrates initializing and using the 'debug' library in a simple Node.js HTTP server application. It requires the 'debug' and 'http' modules. A debug instance is created with the namespace 'http', and debug messages are logged during server boot and request handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %o', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\n----------------------------------------\n\nTITLE: Calling ChatCompletion with Azure OpenAI in Python\nDESCRIPTION: This code performs a chat completion call to Azure OpenAI using the Python SDK, passing in the engine (deployment name) and formatted message list. Output is the chatbot-generated result from the choices array. Inputs include engine/deployment name and prepared system/user prompts. The code expects the 'openai' SDK to be configured for Azure as shown in prior snippets.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nresponse = openai.ChatCompletion.create(\n    engine=\"gpt-4\",  # use your deployment name\n    messages=[{\"role\": \"system\", \"content\": system_prompt}, {\"role\": \"user\", \"content\": user_prompt}]\n)\nresult = response['choices'][0]['message']['content']\n```\n\n----------------------------------------\n\nTITLE: Negotiating Accept Header Media Types - JavaScript\nDESCRIPTION: This snippet shows how to use Negotiator to process and prioritize accepted media types from an HTTP request's Accept header. It creates a Negotiator instance, defines a set of available media types, and retrieves the client's preferences both unrestricted and limited to server-supported types. Assumes a request object with appropriate Accept headers; outputs include the preferred types ordered by client priority.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/negotiator/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\navailableMediaTypes = ['text/html', 'text/plain', 'application/json']\n\n// The negotiator constructor receives a request object\nnegotiator = new Negotiator(request)\n\n// Let's say Accept header is 'text/html, application/*;q=0.2, image/jpeg;q=0.8'\n\nnegotiator.mediaTypes()\n// -> ['text/html', 'image/jpeg', 'application/*']\n\nnegotiator.mediaTypes(availableMediaTypes)\n// -> ['text/html', 'application/json']\n\nnegotiator.mediaType(availableMediaTypes)\n// -> 'text/html'\n```\n\n----------------------------------------\n\nTITLE: Getting Validation Errors with TypeCompiler in TypeScript\nDESCRIPTION: Demonstrates how to retrieve detailed validation errors using the `.Errors()` method of a compiled TypeCheck object (`C`) obtained from `TypeCompiler.Compile`. This method returns an iterator that yields error objects for each validation failure when enumerated (e.g., using the spread operator `...`). It's recommended to call this only after `.Check()` returns false for performance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\n  x: Type.Number(),                                  //     x: TNumber;\n  y: Type.Number(),                                  //     y: TNumber;\n  z: Type.Number()                                   //     z: TNumber;\n}))                                                  // }>>\n\nconst value = { }\n\nconst errors = [...C.Errors(value)]                  // const errors = [{\n                                                     //   schema: { type: 'number' },\n                                                     //   path: '/x',\n                                                     //   value: undefined,\n                                                     //   message: 'Expected number'\n                                                     // }, {\n                                                     //   schema: { type: 'number' },\n                                                     //   path: '/y',\n                                                     //   value: undefined,\n                                                     //   message: 'Expected number'\n                                                     // }, {\n                                                     //   schema: { type: 'number' },\n                                                     //   path: '/z',\n                                                     //   value: undefined,\n                                                     //   message: 'Expected number'\n                                                     // }]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Fake Clock with @sinonjs/fake-timers in JavaScript\nDESCRIPTION: This JavaScript snippet showcases the creation of a fake clock using @sinonjs/fake-timers and scheduling a setTimeout callback on it. The FakeTimers.createClock() method returns a controllable clock instance for simulating time passage in tests; setTimeout schedules callbacks as with native APIs but under the clock's control. After scheduling, clock.tick(15) forces the scheduled callback to run immediately, allowing deterministic testing of timeout-based code. Dependencies: @sinonjs/fake-timers module. Inputs: callback function and timeout. Output: Prints a message synchronously. Limitations: Only manual ticking is shown; asynchronous variants require separate usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In the browser distribution, a global `FakeTimers` is already available\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\nvar clock = FakeTimers.createClock();\n\nclock.setTimeout(function () {\n    console.log(\n        \"The poblano is a mild chili pepper originating in the state of Puebla, Mexico.\"\n    );\n}, 15);\n\n// ...\n\nclock.tick(15);\n```\n\n----------------------------------------\n\nTITLE: Basic Source Map Tracing with @jridgewell/trace-mapping (TypeScript)\nDESCRIPTION: Demonstrates the primary usage of the `@jridgewell/trace-mapping` library. It imports `TraceMap`, `originalPositionFor`, and `generatedPositionFor`. A `TraceMap` instance is created from a source map object. `originalPositionFor` is used to find the original source file location (line, column, name) corresponding to a generated file location (1-based line, 0-based column). `generatedPositionFor` performs the reverse lookup. Requires the `@jridgewell/trace-mapping` package installed and assumes an assertion library like `assert`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceMap, originalPositionFor, generatedPositionFor } from '@jridgewell/trace-mapping';\n\nconst tracer = new TraceMap({\n  version: 3,\n  sources: ['input.js'],\n  names: ['foo'],\n  mappings: 'KAyCIA',\n});\n\n// Lines start at line 1, columns at column 0.\nconst traced = originalPositionFor(tracer, { line: 1, column: 5 });\nassert.deepEqual(traced, {\n  source: 'input.js',\n  line: 42,\n  column: 4,\n  name: 'foo',\n});\n\nconst generated = generatedPositionFor(tracer, {\n  source: 'input.js',\n  line: 42,\n  column: 4,\n});\nassert.deepEqual(generated, {\n  line: 1,\n  column: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing dotenv Configuration in ES Modules (JavaScript)\nDESCRIPTION: Shows the recommended way to load environment variables using `dotenv` when working with ES Modules (ESM). Importing `dotenv/config` ensures that environment variables are loaded before other modules that might depend on them.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// index.mjs (ESM)\nimport 'dotenv/config' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\nimport express from 'express'\n```\n\n----------------------------------------\n\nTITLE: Defining a Coordinate Schema with TypeBox - TypeScript\nDESCRIPTION: Defines a TypeBox schema for an object with numeric x, y, and z properties. Uses 'Type.Object' to build a JSON schema and then infers the static TypeScript type with 'Static<typeof T>'. Requires the TypeBox package. Input is a schema definition, and the output is both a JSON schema object and a TypeScript type. Can be used for both type checking and runtime validation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Static, Type } from '@sinclair/typebox'\n\nconst T = Type.Object({                              // const T = {\n  x: Type.Number(),                                  //   type: 'object',\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\n  z: Type.Number()                                   //   properties: {\n})                                                   //     x: { type: 'number' },\n                                                     //     y: { type: 'number' },\n                                                     //     z: { type: 'number' }\n                                                     //   }\n                                                     // }\n\ntype T = Static<typeof T>                            // type T = {\n                                                     //   x: number,\n                                                     //   y: number,\n                                                     //   z: number\n                                                     // }\n```\n\n----------------------------------------\n\nTITLE: Establishing a PostgreSQL Connection with Drizzle ORM in TypeScript\nDESCRIPTION: This snippet sets up a PostgreSQL connection pool via the pg library and initializes Drizzle ORM with the shared schema. It expects a valid DATABASE_URL environment variable for connection credentials, and exports configured instances for use in the application backend. The connection enables performing typed queries and schema-aware operations against the database.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// server/db.ts\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\nimport * as schema from \"../shared/schema\";\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nexport const db = drizzle(pool, { schema });\n```\n\n----------------------------------------\n\nTITLE: Running a Command and Getting Output with Execa - JavaScript\nDESCRIPTION: Demonstrates how to spawn a process asynchronously using Execa, await its result, and access its stdout property. The snippet imports Execa, runs the 'echo' command with an argument, and logs the resulting standard output. This pattern is fully Promise-based and requires Node.js 8+ for async/await support.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst execa = require('execa');\n\n(async () => {\n\tconst {stdout} = await execa('echo', ['unicorns']);\n\tconsole.log(stdout);\n\t//=> 'unicorns'\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Passport Local Authentication and User Endpoints - Passport.js TypeScript\nDESCRIPTION: Implements Passport LocalStrategy configuration with user serialization/deserialization for Express sessions. It also provides register, login, logout, and user info endpoints, integrating with a database for user lookup, bcrypt for password hashing/validation, and expects compatible schemas and database utilities. Dependencies include passport, express, bcrypt, and drizzle-orm, with all authentication state persisted through express-session. The setup enables secure session-based login and retrieval of authenticated user data. Inputs include credentials via POST body, and responses are JSON objects indicating user state or errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// server/auth.ts\nimport { Express } from \"express\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { users, User } from \"../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport function setupAuth(app: Express) {\n  // Passport local strategy\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const [user] = await db\n          .select()\n          .from(users)\n          .where(eq(users.username, username))\n          .limit(1);\n\n        if (!user) {\n          return done(null, false, { message: \"Incorrect username.\" });\n        }\n\n        const isValidPassword = await bcrypt.compare(password, user.password);\n\n        if (!isValidPassword) {\n          return done(null, false, { message: \"Incorrect password.\" });\n        }\n\n        return done(null, user);\n      } catch (err) {\n        return done(err);\n      }\n    })\n  );\n\n  // Serialize user for session\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  // Deserialize user from session\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const [user] = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, id))\n        .limit(1);\n\n      done(null, user || null);\n    } catch (err) {\n      done(err);\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/auth/register\", async (req, res) => {\n    try {\n      const { username, password, email } = req.body;\n\n      // Check if user already exists\n      const [existingUser] = await db\n        .select()\n        .from(users)\n        .where(eq(users.username, username))\n        .limit(1);\n\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create new user\n      const [newUser] = await db\n        .insert(users)\n        .values({\n          username,\n          password: hashedPassword,\n          email,\n        })\n        .returning();\n\n      res.status(201).json({\n        id: newUser.id,\n        username: newUser.username,\n        email: newUser.email,\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Error registering user\" });\n    }\n  });\n\n  app.post(\"/auth/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.json(req.user);\n  });\n\n  app.post(\"/auth/logout\", (req, res) => {\n    req.logout(() => {\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/auth/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    res.json(req.user);\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Manually Aborting an Async Operation in JavaScript\nDESCRIPTION: Demonstrates the basic usage of `AbortController`. An instance is created, its `signal` property is passed to an asynchronous function (`doAsyncWork`), and the operation can be cancelled later by calling the controller's `abort()` method. Assumes `doAsyncWork` accepts an object with an `abortSignal` property.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/abort-controller/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\ndoAsyncWork({ abortSignal: controller.signal });\n\n// at some point later\ncontroller.abort();\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Environment and Ignore Files (Bash)\nDESCRIPTION: This Bash snippet configures the project's environment setup. It first creates a `.gitignore` file to specify files and directories (like node_modules, .env, dist) that should be ignored by Git. Then, it uses `cat` with a Here Document (EOL) to create a `.env.example` file, providing a template for necessary environment variables (database URL, Azure OpenAI credentials, session secret, Stripe keys). Finally, it copies the example file to `.env`, which will hold the actual development secrets (and should be gitignored).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Create .gitignore\necho \"node_modules\\n.env\\ndist\\n.vscode\\n\" > .gitignore\n\n# Create .env.example\ncat > .env.example << EOL\n# Database Configuration\nDATABASE_URL=postgresql://username:password@localhost:5432/decade_db\n\n# Azure OpenAI Configuration\nAZURE_OPENAI_KEY=your_azure_openai_key\nAZURE_OPENAI_ENDPOINT=https://your-instance.openai.azure.com/\nAZURE_OPENAI_DEPLOYMENT=gpt-4o-mini\n\n# Session Configuration\nSESSION_SECRET=your_session_secret\n\n# Stripe Configuration\nSTRIPE_SECRET_KEY=your_stripe_secret_key\nSTRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key\nEOL\n\n# Copy example to actual .env file\ncp .env.example .env\n```\n```\n\n----------------------------------------\n\nTITLE: Using HttpProxyAgent with http.get in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to instantiate `HttpProxyAgent` with a proxy server URL ('http://168.63.76.32:3128'). The created agent is then passed as an option to `http.get` to route the request for 'http://nodejs.org/api/' through the proxy. The response headers are logged, and the response body is piped to the standard output. It requires the `http` module and `HttpProxyAgent` from the `http-proxy-agent` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as http from 'http';\nimport { HttpProxyAgent } from 'http-proxy-agent';\n\nconst agent = new HttpProxyAgent('http://168.63.76.32:3128');\n\nhttp.get('http://nodejs.org/api/', { agent }, (res) => {\n  console.log('\"response\" event!', res.headers);\n  res.pipe(process.stdout);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Compiling Regex from Parsed State with picomatch.compileRe (JavaScript)\nDESCRIPTION: Illustrates how to first parse a glob pattern (`*.js`) using `picomatch.parse` to get a state object, and then use `picomatch.compileRe` with that state object to generate the corresponding regular expression.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\nconst state = picomatch.parse('*.js');\n// picomatch.compileRe(state[, options]);\n\nconsole.log(picomatch.compileRe(state));\n//=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n```\n\n----------------------------------------\n\nTITLE: Using get/set as Property Names in Function Parameter Destructuring (JavaScript)\nDESCRIPTION: Demonstrates that 'get' and 'set' can be used as property names in object destructuring within function parameters with default values (per ES2015). No special dependencies required. Input is a function declaration with destructuring; output is that the function is treated as valid JavaScript syntax.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_35\n\nLANGUAGE: js\nCODE:\n```\n// valid\\nfunction something({ set = null, get = null }) {}\n```\n\n----------------------------------------\n\nTITLE: Using onetime with Throw Option in JavaScript\nDESCRIPTION: Illustrates using the 'throw' option with the 'onetime' function. When `{throw: true}` is passed as the second argument, the wrapped function will throw an error if it's called more than once.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/onetime/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst onetime = require('onetime');\n\nconst foo = onetime(() => {}, {throw: true});\n\nfoo();\n\nfoo();\n//=> Error: Function `foo` can only be called once\n```\n\n----------------------------------------\n\nTITLE: Sorting Array of Objects by Multiple Properties (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to sort an array of objects based on multiple properties using natural sort order. The custom comparison function first compares the 'street' property using `String.naturalCompare`. If the streets are the same, it then compares the 'room' property.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// In most cases we want to sort an array of objects\nvar a = [ {\"street\":\"350 5th Ave\", \"room\":\"A-1021\"}\n        , {\"street\":\"350 5th Ave\", \"room\":\"A-21046-b\"} ];\n\n// sort by street, then by room\na.sort(function(a, b){\n  return String.naturalCompare(a.street, b.street) || String.naturalCompare(a.room, b.room);\n})\n```\n\n----------------------------------------\n\nTITLE: Using pretty-format with React Plugins (JavaScript)\nDESCRIPTION: Illustrates formatting React components using `prettyFormat` and its built-in React plugins. It shows creating a React button element and then formatting both the element directly (using `ReactElement` plugin) and its JSON representation from `react-test-renderer` (using `ReactTestComponent` plugin). The `plugins` option is passed to `prettyFormat`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n----------------------------------------\n\nTITLE: Matching File Basename with picomatch.matchBase (JavaScript)\nDESCRIPTION: Example demonstrating the `picomatch.matchBase` method. It checks if the basename (`bar.js`) of the input path (`foo/bar.js`) matches the provided glob pattern (`*.js`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\n// picomatch.matchBase(input, glob[, options]);\nconsole.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n```\n\n----------------------------------------\n\nTITLE: Checking if a String Matches All Patterns with Micromatch in JavaScript\nDESCRIPTION: Demonstrates the `mm.all` function from the 'micromatch' library. It checks if a single input string matches all of the provided glob patterns. Requires the 'micromatch' library. Takes a string, an array of patterns, and optional options. Returns `true` if the string matches every pattern, `false` otherwise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst mm = require('micromatch');\n// mm.all(string, patterns[, options]);\n\nconsole.log(mm.all('foo.js', ['foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', '!foo.js']));\n// false\n\nconsole.log(mm.all('foo.js', ['*.js', 'foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n// true\n```\n\n----------------------------------------\n\nTITLE: Validating Template Literal Patterns Using Pattern Keyword in JSON Schema\nDESCRIPTION: Shows how to represent template literal types in JSON Schema by using the 'pattern' keyword to enforce regex matching (i.e., values starting with 'on' followed by either 'open' or 'close'). Useful for dynamic, pattern-based strings and event names. Expects a string input matching the RegExp.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  type: 'string',\n  pattern: '^on(open|close)$'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Source Map Support in Browsers (AMD/RequireJS)\nDESCRIPTION: HTML and JavaScript snippet showing how to integrate source map support when using an AMD loader like RequireJS. The `browser-source-map-support` module is listed as a dependency, and `install()` is called within the callback function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  define(['browser-source-map-support'], function(sourceMapSupport) {\n    sourceMapSupport.install();\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Syntax JSON Strings with npm - Shell\nDESCRIPTION: Installs the @babel/plugin-syntax-json-strings package as a development dependency in your JavaScript project using npm. This command ensures the plugin is available for Babel configuration, enabling support for special Unicode characters in JS strings. Requires npm to be installed and run in a project directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-json-strings/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-json-strings\n```\n\n----------------------------------------\n\nTITLE: Integrating Stripe Subscriptions Creation via Express Route in TypeScript\nDESCRIPTION: This TypeScript snippet defines an Express router (`stripeRoutes.ts`) to handle the creation of Stripe subscriptions. It requires the `stripe` Node.js library, `express`, a hypothetical `ensureAuthenticated` middleware to protect the route, and a `storage` module for user data persistence. The `/create-subscription` POST route verifies authentication, retrieves or creates a Stripe customer associated with the user, creates a Stripe subscription using the provided `priceId`, updates the user's subscription details in the application's storage, and returns the new `subscriptionId`. Requires the `STRIPE_SECRET_KEY` environment variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport Stripe from 'stripe';\nimport { ensureAuthenticated } from '../authMiddleware';\nimport { storage } from '../storage';\n\nconst router = express.Router();\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', { apiVersion: '2022-11-15' });\n\nrouter.post('/create-subscription', ensureAuthenticated, async (req, res) => {\n  try {\n    const { priceId } = req.body;\n    const user = req.user;\n    if (!user) return res.sendStatus(401);\n\n    let customerId = user.stripeCustomerId;\n    if (!customerId) {\n      const customer = await stripe.customers.create({ email: user.email });\n      customerId = customer.id;\n      await storage.updateUserStripeCustomerId(user.id, customerId);\n    }\n\n    const subscription = await stripe.subscriptions.create({\n      customer: customerId,\n      items: [{ price: priceId }],\n      payment_behavior: 'default_incomplete',\n      expand: ['latest_invoice.payment_intent'],\n    });\n\n    await storage.updateUserSubscription(user.id, subscription.id, 'pro'); // or plus\n\n    res.json({\n      subscriptionId: subscription.id,\n      // ... potential client secret from payment intent\n    });\n  } catch (err) {\n    console.error('Stripe Error:', err);\n    res.status(500).json({ error: err.message });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Consuming Raw HTTP Request Body as a Promise with raw-body in JavaScript\nDESCRIPTION: Uses raw-body in an http server to asynchronously read the entire request body, leveraging its Promise interface when no callback is supplied. Handles successful and error outcomes by sending either the byte length or the error message as the HTTP response. Dependencies: Node.js built-in http and raw-body. The server listens on port 3000; ensure global Promise is available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\nvar getRawBody = require('raw-body')\\nvar http = require('http')\\n\\nvar server = http.createServer(function (req, res) {\\n  getRawBody(req)\\n    .then(function (buf) {\\n      res.statusCode = 200\\n      res.end(buf.length + ' bytes submitted')\\n    })\\n    .catch(function (err) {\\n      res.statusCode = 500\\n      res.end(err.message)\\n    })\\n})\\n\\nserver.listen(3000)\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the function-bind Package via npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and install the 'function-bind' package into the project's dependencies. This step is required before the package can be used in JavaScript code as shown in the usage example.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/function-bind/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install function-bind\n```\n\n----------------------------------------\n\nTITLE: Enabling ES6 Unicode Code Point Escapes (JavaScript)\nDESCRIPTION: Shows the effect of setting `es6: true`. Astral Unicode symbols are escaped using ECMAScript 6 Unicode code point escape sequences (e.g., `\\u{1D306}`), which is shorter but requires an ES6+ environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// To enable it:\njsesc('foo 𝌆 bar 💩 baz', {\n  'es6': true\n});\n// → 'foo \\\\u{1D306} bar \\\\u{1F4A9} baz'\n```\n\n----------------------------------------\n\nTITLE: Extending Acorn with Plugins Using Parser.extend - JavaScript\nDESCRIPTION: This snippet shows how to extend the Acorn parser with one or more plugins, such as acorn-jsx, by using the Parser.extend method. It creates a new Parser class incorporating plugin behavior, and demonstrates parsing a JSX expression. Key dependencies are the acorn and acorn-jsx packages. This pattern is essential for customizing or enhancing the parse logic for advanced or non-standard syntaxes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar acorn = require(\"acorn\");\nvar jsx = require(\"acorn-jsx\");\nvar JSXParser = acorn.Parser.extend(jsx());\nJSXParser.parse(\"foo(<bar/>)\", {ecmaVersion: 2020});\n\n```\n\n----------------------------------------\n\nTITLE: Adding Stack Line Property to Custom Error Using errorEx.line - JavaScript\nDESCRIPTION: This snippet demonstrates attaching a stack trace line to a custom error by using errorEx.line in the error properties. It depends on the 'error-ex' package and expects a property value to substitute into the custom stack trace format. The relevant property ('fileName') must be set before throwing the error. The output is an error with an annotated stack including a formatted line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/error-ex/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar JSONError = errorEx('JSONError', {fileName: errorEx.line('in %s')});\n\nvar err = new JSONError('error')\nerr.fileName = '/a/b/c/foo.json';\nthrow err; //-> (line 2)-> in /a/b/c/foo.json\n```\n\n----------------------------------------\n\nTITLE: Finding all generated positions using SourceMapConsumer - JavaScript\nDESCRIPTION: Uses allGeneratedpositionsfor to retrieve all generated mapping positions for a given line in the original source. Requires a SourceMapConsumer instance and an object specifying at minimum 'line' and 'source'. Returns an array of mapping objects with generated line and column values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.allGeneratedpositionsfor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1 },\n//   { line: 2,\n//     column: 10 },\n//   { line: 2,\n//     column: 20 } ]\n```\n\n----------------------------------------\n\nTITLE: Nesting kleur Methods for Inline Formatting (JavaScript)\nDESCRIPTION: Shows how to nest 'kleur' formatting calls within strings or template literals. This allows different styles to be applied to different parts of the same output string. Both template literal interpolation and string concatenation methods are shown. Requires the 'kleur' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/kleur/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { yellow, red, cyan } = require('kleur');\n\nconsole.log(yellow(`foo ${red().bold('red')} bar ${cyan('cyan')} baz`));\nconsole.log(yellow('foo ' + red().bold('red') + ' bar ' + cyan('cyan') + ' baz'));\n```\n\n----------------------------------------\n\nTITLE: Transforming Modules with the visit Option in require-directory (JavaScript)\nDESCRIPTION: Shows how the `visit` function can transform the value associated with a module in the final hash. If the visitor function returns a value, that value replaces the original module export in the resulting structure. This example assumes modules export functions and calls them.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  visitor = function(obj) {\n    return obj(new Date());\n  },\n  hash = requireDirectory(module, {visit: visitor});\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Serializers in Jest Configuration (JSON)\nDESCRIPTION: Demonstrates how to configure custom snapshot serializers globally for all Jest tests by adding a `snapshotSerializers` array within the `jest` configuration section of a `package.json` file. Serializers listed here are applied across the project before Jest's built-in serializers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing fast-json-stable-stringify Using npm\nDESCRIPTION: Basic shell command to install the fast-json-stable-stringify package from the npm registry. Must be run in a shell (bash or compatible), and is required before using any of the JavaScript examples in this file. Outputs package installation logs or errors to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fast-json-stable-stringify/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install fast-json-stable-stringify\n```\n\n----------------------------------------\n\nTITLE: Preloading dotenv with Mixed Configuration Methods (Bash)\nDESCRIPTION: Example command showing how to combine both environment variables (e.g., `DOTENV_CONFIG_ENCODING`, `DOTENV_CONFIG_DEBUG`) and command-line arguments (e.g., `dotenv_config_path`) to configure `dotenv` when using the `-r` preload flag. Command-line arguments take precedence over environment variables.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ DOTENV_CONFIG_ENCODING=latin1 DOTENV_CONFIG_DEBUG=true node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env\n```\n\n----------------------------------------\n\nTITLE: Configuring Views Setting in Express.js (JavaScript)\nDESCRIPTION: This snippet likely represents a call to configure a setting, specifically related to 'views', within the web framework (presumably Express.js). The surrounding text indicates a fix was applied related to this configuration call in version 0.8.0. It's typically used to define view-related options like the directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nset(\"views\")\n```\n\n----------------------------------------\n\nTITLE: Querying Request Address with String or Array Trust List in proxy-addr JavaScript\nDESCRIPTION: Demonstrates calling proxy-addr with a string or array of trusted addresses (supporting IPs, CIDRs, or netmask formats). Dependencies are similar to above, with additional understanding of IP formatting and trust lists. Inputs include the HTTP request and acceptable trust patterns; output is a resolved address string. These examples cover IPv4 and related groupings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, '127.0.0.1')\n```\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, ['127.0.0.0/8', '10.0.0.0/8'])\n```\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, ['127.0.0.0/255.0.0.0', '192.168.0.0/255.255.0.0'])\n```\n\n----------------------------------------\n\nTITLE: Using the 'transform' Function Option in fill-range (JavaScript)\nDESCRIPTION: Illustrates the `transform` option in `fill-range`, which accepts a function to modify each generated value before it's added to the result. This example demonstrates adding zero padding to numerical values to ensure a consistent string length. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// add zero padding\nconsole.log(fill(1, 5, value => String(value).padStart(4, '0')));\n//=> ['0001', '0002', '0003', '0004', '0005']\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Map Support Programmatically - JavaScript\nDESCRIPTION: Requires the source-map-support package and installs it at runtime, enabling stack trace mapping for all subsequent code. Place this at the top of your main compiled file. The method works in any Node.js environment where source-map-support is installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nrequire('source-map-support').install();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'strip-dashed' Behavior in Node.js CLI Parsing (Disabled)\nDESCRIPTION: This console example shows the output when the `strip-dashed` option is disabled (default) and `camel-case-expansion` is enabled. The resulting arguments object includes both the original dashed key (`test-field`) and its camel-cased version (`testField`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n----------------------------------------\n\nTITLE: Using Uppercase Utility Type in TypeScript\nDESCRIPTION: This snippet showcases the `Uppercase<S>` utility type in TypeScript (introduced in v4.1). It provides examples of converting string literals, union types (`'foo' | 'bar'`), template literal types (`aB${S}`), and generic types to uppercase. It also illustrates its behavior with `string`, `any`, `never`, and highlights an error when used with a non-string type like `number`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\ntype T = Uppercase<'hello'>;  // 'HELLO'\n\ntype T2 = Uppercase<'foo' | 'bar'>;  // 'FOO' | 'BAR'\n\ntype T3<S extends string> = Uppercase<`aB${S}`>;\ntype T4 = T30<'xYz'>;  // 'ABXYZ'\n\ntype T5 = Uppercase<string>;  // string\ntype T6 = Uppercase<any>;  // any\ntype T7 = Uppercase<never>;  // never\ntype T8 = Uppercase<42>;  // Error, type 'number' does not satisfy the constraint 'string'\n```\n\n----------------------------------------\n\nTITLE: Rendering Animated Dolphin Side Profile with Framer Motion in TypeScript React\nDESCRIPTION: This TypeScript React snippet defines a functional component, SideProfileDolphin, that renders a stylized, animated dolphin using SVG and Framer Motion. Props allow control over dimensions, target position, swimming state, direction, callbacks, and optional on-screen text. The animation uses Framer Motion variants to animate body, tail, and fins independently, along with color gradients and light/shadow SVG filters. It includes a nested WaveTransition component for animated wave effects, also using Framer Motion for entrance, exit, and looping path/circle animations. Dependencies: React, framer-motion. Required props: dimensions; others are optional. Outputs a compositional layout suitable for aquatic UI scenes; constrained for use within React environments and depends on Framer Motion and proper SVG rendering support.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648798670.txt#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// SideProfileDolphinWithWave.tsx\nimport React from \"react\";\nimport { motion, Variants } from \"framer-motion\";\n\n// Define props for our composite component\ninterface SideProfileDolphinProps {\n  dimensions: { width: number; height: number };\n  targetPosition?: { x: number; y: number };\n  swimming?: boolean;\n  pointDirection?: 'left' | 'right';\n  onArrival?: () => void;\n  showTextBox?: boolean;\n}\n\n// Define animation variants for the dolphin container\nconst dolphinVariants: Variants = {\n  idle: {\n    x: 0,\n    y: 0,\n    transition: { type: \"spring\", stiffness: 50, damping: 10 }\n  },\n  swimming: (target: { x: number; y: number } | undefined) => ({\n    x: target ? target.x : 0,\n    y: target ? target.y : 0,\n    transition: { type: \"tween\", duration: 5, ease: \"easeInOut\" }\n  })\n};\n\n// Variants for individual dolphin parts (customize these as needed)\nconst bodyVariants: Variants = {\n  idle: { y: 0 },\n  swimming: { y: [0, -2, 0, 2, 0], transition: { repeat: Infinity, duration: 2, ease: \"easeInOut\" } }\n};\n\nconst tailVariants: Variants = {\n  idle: { rotate: 0 },\n  swimming: { rotate: [0, 8, 0, -5, 0], transition: { repeat: Infinity, duration: 1.2, ease: \"easeInOut\" } }\n};\n\nconst finVariants: Variants = {\n  idle: { rotate: 0 },\n  swimming: { rotate: [0, 10, 0, -10, 0], transition: { repeat: Infinity, duration: 1.8, ease: \"easeInOut\" } }\n};\n\n// The main composite component\nexport default function SideProfileDolphin({\n  dimensions,\n  targetPosition,\n  swimming = false,\n  pointDirection = 'right',\n  onArrival,\n  showTextBox = false\n}: SideProfileDolphinProps) {\n  return (\n    <motion.div\n      initial=\"idle\"\n      animate={swimming ? \"swimming\" : \"idle\"}\n      custom={targetPosition}\n      variants={dolphinVariants}\n      onAnimationComplete={() => { if (onArrival) onArrival(); }}\n      style={{ width: dimensions.width, height: dimensions.height, position: \"relative\" }}\n    >\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        viewBox=\"0 0 120 80\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <defs>\n          <linearGradient id=\"sideBodyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#4FD1C5\" />\n            <stop offset=\"50%\" stopColor=\"#35A0DE\" />\n            <stop offset=\"100%\" stopColor=\"#3182CE\" />\n          </linearGradient>\n          <linearGradient id=\"sideBellyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"#79C3F1\" />\n            <stop offset=\"100%\" stopColor=\"#A7D8FF\" />\n          </linearGradient>\n          <linearGradient id=\"sideFinGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#2D8BC7\" />\n            <stop offset=\"100%\" stopColor=\"#1A5F9E\" />\n          </linearGradient>\n          <filter id=\"sideGlow\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feGaussianBlur stdDeviation=\"0.8\" result=\"blur\" />\n            <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n          </filter>\n          <filter id=\"shineEffect\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feGaussianBlur stdDeviation=\"0.5\" result=\"blur\" />\n            <feSpecularLighting in=\"blur\" specularConstant=\"1\" specularExponent=\"20\" lightingColor=\"white\">\n              <fePointLight x=\"50\" y=\"10\" z=\"40\" />\n            </feSpecularLighting>\n            <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\" />\n          </filter>\n        </defs>\n        \n        {/* Enhanced dolphin body with fluid curvature and undulating motion */}\n        <motion.path\n          d=\"M95 35C95 46 85 60 70 65C55 70 40 65 30 60C20 55 10 45 5 40C0 35 0 30 5 25C10 20 20 15 30 10C40 5 55 5 70 10C85 15 95 24 95 35Z\"\n          fill=\"url(#sideBodyGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={bodyVariants}\n        />\n        \n        {/* Enhanced belly with gradient and subtle shine */}\n        <path\n          d=\"M60 40C45 45 30 45 20 40C10 35 15 30 25 25C35 20 50 20 65 25C80 30 75 35 60 40Z\"\n          fill=\"url(#sideBellyGradient)\"\n          filter=\"url(#shineEffect)\"\n        />\n        \n        {/* Enhanced dorsal fin with better shape and subtle steering motion */}\n        <motion.path\n          d=\"M60 10C63 6 68 5 70 11C70 15 65 17 60 14C58 12 58 10 60 10Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          animate={{\n            rotate: [0, 3, 0, -3, 0],\n            originX: 0.5,\n            originY: 1,\n            transition: { repeat: Infinity, duration: 1.5, ease: \"easeInOut\" }\n          }}\n        />\n        \n        {/* Enhanced tail with fluid side-to-side propulsion */}\n        <motion.path\n          d=\"M10 35C5 32 0 36 0 40C0 44 5 47 10 45C15 43 15 37 10 35Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={tailVariants}\n        />\n        \n        {/* Enhanced pectoral flipper with steering adjustments */}\n        <motion.path\n          d=\"M45 45C40 48 35 53 40 55C45 57 50 50 45 45Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={finVariants}\n        />\n        \n        {/* Enhanced eye with depth and shine */}\n        <circle cx=\"85\" cy=\"30\" r=\"4\" fill=\"white\" />\n        <circle cx=\"85\" cy=\"30\" r=\"2\" fill=\"black\" />\n        <circle cx=\"84\" cy=\"29\" r=\"0.8\" fill=\"white\" filter=\"url(#sideGlow)\" />\n        \n        {/* Enhanced smile with glow effect */}\n        <path\n          d=\"M85 40C85 40 80 43 75 40\"\n          stroke=\"white\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          filter=\"url(#sideGlow)\"\n        />\n      </svg>\n      {showTextBox && (\n        <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 mt-2 px-3 py-1 bg-white rounded shadow text-sm\">\n          I'm swimming over!\n        </div>\n      )}\n      <WaveTransition targetPosition={targetPosition} />\n    </motion.div>\n  );\n}\n\n// WaveTransition Component\ninterface WaveTransitionProps {\n  targetPosition?: { x: number; y: number };\n}\n\nfunction WaveTransition({ targetPosition }: WaveTransitionProps) {\n  // Variants for entrance/exit wave animation\n  const waveVariants: Variants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 1, ease: \"easeOut\" }\n    },\n    exit: { opacity: 0, y: -20, transition: { duration: 1, ease: \"easeIn\" } }\n  };\n\n  return (\n    <motion.svg\n      viewBox=\"0 0 120 20\"\n      className=\"absolute bottom-0 left-0 w-full\"\n      variants={waveVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"exit\"\n    >\n      <defs>\n        <linearGradient id=\"waveGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n          <stop offset=\"0%\" stopColor=\"#4FD1C5\" />\n          <stop offset=\"50%\" stopColor=\"#35A0DE\" />\n          <stop offset=\"100%\" stopColor=\"#3182CE\" />\n        </linearGradient>\n      </defs>\n      {/* A curved wave path */}\n      <motion.path\n        d=\"M0,10 C30,0 90,20 120,10 L120,20 L0,20 Z\"\n        fill=\"url(#waveGradient)\"\n        animate={{\n          x: [0, -10, 0, 10, 0],\n          transition: { repeat: Infinity, duration: 6, ease: \"easeInOut\" }\n        }}\n      />\n      {/* Optional bubbles/splashes */}\n      <motion.circle\n        cx=\"30\"\n        cy=\"5\"\n        r=\"1.5\"\n        fill=\"white\"\n        opacity=\"0.8\"\n        animate={{\n          y: [0, -5, 0],\n          opacity: [0.8, 0.2, 0.8],\n          transition: { repeat: Infinity, duration: 3, ease: \"easeInOut\" }\n        }}\n      />\n      <motion.circle\n        cx=\"80\"\n        cy=\"8\"\n        r=\"1\"\n        fill=\"white\"\n        opacity=\"0.7\"\n        animate={{\n          y: [0, -3, 0],\n          opacity: [0.7, 0.3, 0.7],\n          transition: { repeat: Infinity, duration: 2.5, ease: \"easeInOut\" }\n        }}\n      />\n    </motion.svg>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filesystem-Backed Blobs with fetch-blob/from.js (JavaScript)\nDESCRIPTION: Demonstrates using the `fetch-blob/from.js` module to create `Blob` and `File` objects backed by filesystem paths without loading the entire file content into memory. It uses `fileFromSync` and `blobFrom` (async) to create references based on file paths, checks file stats (size, last modified), and combines these filesystem-backed blobs with in-memory data (string, Uint8Array) into a single large Blob. The resulting Blob's size reflects the total size without consuming proportional memory. Requires Node.js filesystem access.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fetch-blob/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// The default export is sync and use fs.stat to retrieve size & last modified as a blob\nimport blobFromSync from 'fetch-blob/from.js'\nimport {File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync} from 'fetch-blob/from.js'\n\nconst fsFile = fileFromSync('./2-GiB-file.bin', 'application/octet-stream')\nconst fsBlob = await blobFrom('./2-GiB-file.mp4')\n\n// Not a 4 GiB memory snapshot, just holds references\n// points to where data is located on the disk\nconst blob = new Blob([fsFile, fsBlob, 'memory', new Uint8Array(10)])\nconsole.log(blob.size) // ~4 GiB\n```\n\n----------------------------------------\n\nTITLE: Using ansi-regex to Match ANSI Escape Codes (JavaScript)\nDESCRIPTION: Demonstrates how to import and use the `ansi-regex` package in JavaScript. It shows testing strings for the presence of ANSI codes using `test()`, extracting all matching codes using `match()`, and extracting only the first match by setting the `onlyFirst` option to `true`. Requires the `ansi-regex` package to be installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-regex/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ansiRegex = require('ansi-regex');\n\nansiRegex().test('\\u001B[4mcake\\u001B[0m');\n//=> true\n\nansiRegex().test('cake');\n//=> false\n\n'\\u001B[4mcake\\u001B[0m'.match(ansiRegex());\n//=> ['\\u001B[4m', '\\u001B[0m']\n\n'\\u001B[4mcake\\u001B[0m'.match(ansiRegex({onlyFirst: true}));\n//=> ['\\u001B[4m']\n\n'\\u001B]8;;https://github.com\\u0007click\\u001B]8;;\\u0007'.match(ansiRegex());\n//=> ['\\u001B]8;;https://github.com\\u0007', '\\u001B]8;;\\u0007']\n```\n\n----------------------------------------\n\nTITLE: Installing kleur using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'kleur' library, saving it as a dependency in the project's 'package.json' file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/kleur/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save kleur\n```\n\n----------------------------------------\n\nTITLE: Requiring the BSER Module in Node.js - JavaScript\nDESCRIPTION: Demonstrates how to import the 'bser' serialization module required for BSER encoding and decoding in Node.js. This step is necessary to access any of the serialization functions. The variable 'bser' provides the main API entry point.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bser/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar bser = require('bser');\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript-specific YAML Tags - YAML\nDESCRIPTION: This snippet demonstrates YAML tags that are specific to JavaScript serialization and deserialization: regular expressions, undefined values, and functions. When parsed with JS-YAML, these tags create their respective JavaScript objects. Inputs must follow the indicated YAML form; output is a JavaScript RegExp, undefined, or Function object. Requires JS-YAML as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n!!js/regexp /pattern/gim            # RegExp\\n!!js/undefined ''                   # Undefined\\n!!js/function 'function () {...}'   # Function\n```\n\n----------------------------------------\n\nTITLE: Memphis Visual Style CSS Toggle for Themed Decorators (CSS)\nDESCRIPTION: Adds Memphis-style decorator classes that display or hide elements based on the presence of .memphis-style.enabled on the root element. Memphist-pattern type selectors (e.g., .memphis-pattern-1) apply themed background images using color variables. The code is standalone CSS but requires coordinated toggling of the parent class in JS/TS for activation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n/* Memphis Design Style CSS */\n.memphis-style .decorator {\n  display: none;\n}\n.memphis-style.enabled .decorator {\n  display: block;\n}\n\n/* Add your patterns, shapes, geometric backgrounds, etc. */\n.memphis-pattern-1 {\n  background-image: radial-gradient(circle at 2px 2px, var(--color-secondary) 1px, transparent 0);\n  background-size: 20px 20px;\n  /* Additional styling ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Source Maps with SourceMapGenerator Low-Level API in JavaScript\nDESCRIPTION: This snippet shows how to create a SourceMapGenerator instance and programmatically add mappings, associating generated code locations with original source positions and symbol names. It then serializes the generated source map to a JSON string. The example requires source-map-js and demonstrates low-level manipulation of mapping objects for custom source mapping use cases. Key parameters include mapping positions with line, column, and file; outputs the full source map as a JSON string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar map = new SourceMapGenerator({\n  file: \"source-mapped.js\"\n});\n\nmap.addMapping({\n  generated: {\n    line: 10,\n    column: 35\n  },\n  source: \"foo.js\",\n  original: {\n    line: 33,\n    column: 2\n  },\n  name: \"christopher\"\n});\n\nconsole.log(map.toString());\n// '{\"version\":3,\"file\":\"source-mapped.js\",\"sources\":[\"foo.js\"],\"names\":[\"christopher\"],\"mappings\":\";;;;;;;;;mCAgCEA\"}'\n```\n\n----------------------------------------\n\nTITLE: Redirecting 'debug' Output Streams in Node.js\nDESCRIPTION: Illustrates how to change the default output stream (stderr) for the 'debug' library in Node.js. It shows redirecting output for a specific namespace ('app:log') to `console.log` and then redirecting all debug output globally to `console.info` by assigning to `debug.log`. Binding `this` to `console` is important.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals in TypeScript Tests\nDESCRIPTION: This snippet demonstrates how to import specific Jest global functions like `describe`, `expect`, and `it` directly from the `@jest/globals` package. This allows developers to write tests using these functions without relying on global scope injection or third-party type definitions, providing explicit dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jest/types/README.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {describe, expect, it} from '@jest/globals';\n\ndescribe('my tests', () => {\n  it('works', () => {\n    expect(1).toBe(1);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Middleware in Express.js (JavaScript)\nDESCRIPTION: Mentioned in the context of version 0.3.0, this snippet shows the usage of middleware, specifically for handling cookies (likely the 'cookie-parser' or similar middleware in Express.js). The context mentions fixing specs broken due to this middleware being missing, highlighting its importance for features relying on cookies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nuse(Cookie)\n```\n\n----------------------------------------\n\nTITLE: Default Export and Synchronous Variant Using gensync in JavaScript\nDESCRIPTION: Shows a pattern for setting the default module export to the errback style of a gensync operation, while also attaching a .sync property to expose synchronous evaluation. Useful for enabling both async (callback/error-back) operation by default, and supporting optional direct synchronous access via property.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gensync/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = myOperation.errback;\nmodule.exports.sync = myOperation.sync;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Configurable Animation System in TypeScript\nDESCRIPTION: This TypeScript module defines a flexible animation system, primarily using the `canvas-confetti` library. It exports types for animations and particles, an interface for parameters (`AnimationParams`), and a main `playAnimation` function. This function triggers various animations (like confetti, stars, fireworks) based on input parameters, defaulting to random if unspecified. It also includes helper functions (`highlightElement`, `showOverlayMessage`) for enhancing animations with element highlighting and overlay messages, often used for achievements or success feedback.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport confetti from 'canvas-confetti';\n\nexport type AnimationType =\n  | 'confetti' | 'stars' | 'circles' | 'fireworks' | 'random'\n  | 'achievement' | 'celebrate' | 'success' | 'levelUp' | 'rewardUnlocked'\n  | 'bounce' | 'fadeScale' | 'popIn' | 'slideSwing' | ... // etc. (your list)\n\nexport type ParticleType =\n  | 'circle' | 'star' | 'triangle' | 'heart' | 'trophy' | ... // etc.\n\ninterface AnimationParams {\n  type?: AnimationType;\n  duration?: number;\n  particleCount?: number;\n  particleType?: ParticleType;\n  colors?: string[];\n  message?: string;\n  element?: HTMLElement;\n  // ... other fields like colorScheme, spread, startVelocity, etc.\n}\n\nconst defaultParams: AnimationParams = {\n  type: 'random',\n  duration: 2000,\n  particleCount: 50,\n  particleType: 'circle',\n  colors: ['#5D8EFF', '#FF5D5D', '#5DFF8E', '#FF8E5D'],\n};\n\nexport function playAnimation(params: AnimationParams = {}) {\n  const merged = { ...defaultParams, ...params };\n\n  // Choose random if 'random'\n  if (merged.type === 'random') {\n    const animations: AnimationType[] = ['confetti', 'stars', 'circles', 'fireworks'];\n    merged.type = animations[Math.floor(Math.random() * animations.length)];\n  }\n\n  switch (merged.type) {\n    case 'confetti':\n      confetti({\n        particleCount: merged.particleCount,\n        spread: 70,\n        colors: merged.colors,\n        origin: { y: 0.6 },\n        // ...\n      });\n      break;\n\n    case 'achievement':\n    case 'success':\n      // Example: confetti + glowing highlight\n      confetti({\n        particleCount: merged.particleCount,\n        spread: 120,\n        colors: merged.colors,\n      });\n      if (merged.element) {\n        // highlight the element\n        highlightElement(merged.element, merged.duration);\n      }\n      if (merged.message) {\n        showOverlayMessage(merged.message, merged.duration);\n      }\n      break;\n\n    // ... add more cases like 'stars', 'fireworks', etc.\n\n    default:\n      confetti({\n        particleCount: merged.particleCount,\n        colors: merged.colors,\n      });\n  }\n}\n\nfunction highlightElement(el: HTMLElement, duration = 2000) {\n  el.style.transition = 'box-shadow 0.5s ease';\n  el.style.boxShadow = '0 0 20px rgba(255,215,0, 0.7)';\n  setTimeout(() => {\n    el.style.boxShadow = '';\n  }, duration);\n}\n\nfunction showOverlayMessage(message: string, duration = 2000) {\n  const msgDiv = document.createElement('div');\n  msgDiv.innerText = message;\n  msgDiv.style.position = 'fixed';\n  msgDiv.style.top = '50%';\n  msgDiv.style.left = '50%';\n  msgDiv.style.transform = 'translate(-50%, -50%)';\n  msgDiv.style.padding = '16px';\n  msgDiv.style.background = 'rgba(0,0,0,0.7)';\n  msgDiv.style.color = '#fff';\n  msgDiv.style.zIndex = '9999';\n  msgDiv.style.fontSize = '1.25rem';\n\n  document.body.appendChild(msgDiv);\n\n  setTimeout(() => {\n    document.body.removeChild(msgDiv);\n  }, duration);\n}\n// Usage: playAnimation({ type: 'achievement', message: 'Achievement Unlocked!', element: someHTMLElement });\n```\n\n----------------------------------------\n\nTITLE: Importing ModuleMocker from Jest-Mock in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the ModuleMocker class from the jest-mock library for use in setting up custom mocking environments. It requires Jest and jest-mock to be installed as project dependencies. The import enables construction of new mockers for creating, customizing, and managing mock modules and functions in Jest-based unit tests.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-mock/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ModuleMocker} from 'jest-mock';\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ts-node Shebang Script (TypeScript)\nDESCRIPTION: TypeScript example showing how to create a portable executable script using ts-node via a shebang line (`#!/usr/bin/env ts-node`). ts-node options are expected to be read from a `tsconfig.json` file in this configuration. The script must have execute permissions (`chmod +x`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env ts-node\n\n// ts-node options are read from tsconfig.json\n\nconsole.log(\"Hello, world!\")\n```\n\n----------------------------------------\n\nTITLE: Generating a Source Map with SourceMapGenerator in JavaScript\nDESCRIPTION: Shows how to use the `SourceMapGenerator` class for more direct control over source map creation. It involves creating a generator instance, adding individual mappings using `addMapping`, and finally serializing the map to a string using `toString`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar map = new SourceMapGenerator({\n  file: \"source-mapped.js\"\n});\n\nmap.addMapping({\n  generated: {\n    line: 10,\n    column: 35\n  },\n  source: \"foo.js\",\n  original: {\n    line: 33,\n    column: 2\n  },\n  name: \"christopher\"\n});\n\nconsole.log(map.toString());\n// '{\"version\":3,\"file\":\"source-mapped.js\",\"sources\":[\"foo.js\"],\"names\":[\"christopher\"],\"mappings\":\";;;;;;;;;mCAgCEA\"}'\n```\n\n----------------------------------------\n\nTITLE: Posting Form Parameters with URLSearchParams and node-fetch - JavaScript\nDESCRIPTION: Demonstrates posting form-encoded parameters using URLSearchParams as the body in a POST request. The Content-Type is set automatically when using URLSearchParams. Suitable for web forms and API endpoints that process 'application/x-www-form-urlencoded' data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nconst params = new URLSearchParams();\nparams.append('a', 1);\n\nconst response = await fetch('https://httpbin.org/post', {method: 'POST', body: params});\nconst data = await response.json();\n\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Toggling Memphis Style with Theme Provider - TSX (React)\nDESCRIPTION: This snippet shows how to enable or disable the Memphis visual style by toggling classes on the document body in a React theme provider using TSX. By checking if the appearance.visualStyle is set to 'memphis', the function adds or removes relevant CSS classes for conditional styling. Dependencies include a React context/provider and valid appearance state object. Input is the current appearance setting, output is runtime toggling of visual style classes for UI rendering.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742708040241.txt#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nif (appearance.visualStyle === 'memphis') {\\n  document.body.classList.add('memphis-style', 'enabled');\\n} else {\\n  document.body.classList.remove('memphis-style', 'enabled');\\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling and Restoring Debug Namespaces (JavaScript)\nDESCRIPTION: Shows how to temporarily disable debugging for specific namespaces and restore the previous state using 'disable()' and 'enable()' from the 'debug' package. This approach stores the currently active namespaces, disables all debugging, and resumes it later. Relies on 'debug' for namespace management; no input/output, but intended state change for debug toggling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet debug = require('debug');\\ndebug.enable('foo:*,-foo:bar');\\nlet namespaces = debug.disable();\\ndebug.enable(namespaces);\\n\n```\n\n----------------------------------------\n\nTITLE: Disabling and Restoring Debug Namespaces with the Debug Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to programmatically enable debug namespaces with wildcards, capture the currently enabled namespaces via 'disable', and subsequently restore them using 'enable' in the 'debug' npm module. Install the debug package as a prerequisite. Namespace patterns with wildcards and exclusions can be used; the string returned by disable() may not match input verbatim but will be semantically equivalent. There are no direct outputs but debug logging would reflect the enabled patterns.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet debug = require('debug');\\ndebug.enable('foo:*,-foo:bar');\\nlet namespaces = debug.disable();\\ndebug.enable(namespaces);\\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'strip-aliased' Behavior in Node.js CLI Parsing (Disabled)\nDESCRIPTION: This console example shows the output when the `strip-aliased` option is disabled (default). The resulting arguments object includes both the original option names (`test-field`, `testField`) and their configured aliases (`test-alias`, `testAlias`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n----------------------------------------\n\nTITLE: Module Exports Object Assignment Limitation Example (JavaScript)\nDESCRIPTION: Shows cjs-module-lexer bailing out on detection when 'module.exports' object literals contain non-identifier or non-string expression properties, or complex expressions such as a require() call; only simple properties prior to failure are detected. No special dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS EXPORTS: a, b\nmodule.exports = {\n  a,\n  ...d,\n  b: require('c'),\n  c: \"not detected since require('c') above bails the object detection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom MIME Type Mappings with mime.define - JavaScript\nDESCRIPTION: This snippet illustrates how to define new custom MIME types and their file extension mappings with the 'define' method of the 'mime' module. It requires the 'mime' package. Input is an object where keys are MIME types and values are arrays of extension strings; these mappings then become available to the 'lookup' and 'extension' methods. The first extension in each array becomes the default for 'extension()'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.define({\n    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\n    'application/x-my-type': ['x-mt', 'x-mtt'],\n    // etc ...\n});\n\nmime.lookup('x-sft');                 // => 'text/x-some-format'\n```\n\n----------------------------------------\n\nTITLE: Jumping Forward in Fake Time with FakeTimers - JavaScript\nDESCRIPTION: Moves fake time forward, potentially skipping intermediate timers, with 'clock.jump'. Accepts a time duration (numeric or string). Only fires callbacks once for the entire jump. Used to simulate long inactive periods.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nclock.jump(time)\n```\n\n----------------------------------------\n\nTITLE: Walking the SourceNode Tree Snippets in JavaScript\nDESCRIPTION: Shows how to use `SourceNode.prototype.walk` to iterate over each individual code snippet within the SourceNode tree. The provided callback function receives the code snippet string and its associated original location (source file, line, column).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.js\", [\n  new SourceNode(3, 4, \"b.js\", \"uno\"),\n  \"dos\",\n  [\n    \"tres\",\n    new SourceNode(5, 6, \"c.js\", \"quatro\")\n  ]\n]);\n\nnode.walk(function (code, loc) { console.log(\"WALK:\", code, loc); })\n// WALK: uno { source: 'b.js', line: 3, column: 4, name: null }\n// WALK: dos { source: 'a.js', line: 1, column: 2, name: null }\n// WALK: tres { source: 'a.js', line: 1, column: 2, name: null }\n// WALK: quatro { source: 'c.js', line: 5, column: 6, name: null }\n```\n\n----------------------------------------\n\nTITLE: Calculating Broadcast Address from CIDR Notation - JavaScript\nDESCRIPTION: Shows how to obtain the broadcast address corresponding to a given IPv4 CIDR using broadcastAddressFromCIDR. Parses the string in 'address/prefix' format. Returns a string representing the broadcast address.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nipaddr.IPv4.broadcastAddressFromCIDR(\"172.0.0.1/24\") == \"172.0.0.255\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha with ts-node via .mocharc.json (JSONC)\nDESCRIPTION: Configures Mocha using a `.mocharc.json` file to work with TypeScript. It specifies `ts-node/register` via `require` for CommonJS modules or `ts-node/esm` via `loader` for native ECMAScript modules. It also defines the supported file extensions (`ts`, `tsx`), the location of test specifications (`tests/**/*.spec.*`), and files/directories to watch (`src`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_37\n\nLANGUAGE: jsonc\nCODE:\n```\n```jsonc title=\".mocharc.json\"\n{\n  // Specify \"require\" for CommonJS\n  \"require\": \"ts-node/register\",\n  // Specify \"loader\" for native ESM\n  \"loader\": \"ts-node/esm\",\n  \"extensions\": [\"ts\", \"tsx\"],\n  \"spec\": [\n    \"tests/**/*.spec.*\"\n  ],\n  \"watch-files\": [\n    \"src\"\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Building Interactive Modules with a Custom React Frontend\nDESCRIPTION: Develops a custom frontend using React, incorporating pre-built interactive templates and gamification frameworks. This creates dynamic, responsive microlearning modules (quizzes, drag-and-drop, mini-games).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nCustom React-Based Frontend\nFramework: React\nFeatures: \n- Pre-built interactive templates (quizzes, drag-and-drop).\n- Integration with gamification frameworks (streaks, leaderboards, rewards).\n- Responsive layouts.\n- Animated feedback.\nPurpose: Host and display gamified microlearning modules.\n```\n\n----------------------------------------\n\nTITLE: Allow async Identifier as Default Parameter in Arrow Function (JavaScript)\nDESCRIPTION: Demonstrates acceptance of 'async' as an identifier in parameter destructuring with default values in JavaScript arrow functions. Input is an arrow function with a destructured object parameter; output is valid code allowed by modern JS parsers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_32\n\nLANGUAGE: js\nCODE:\n```\n// this is ok now\\nconst test = ({async = true}) => {};\n```\n\n----------------------------------------\n\nTITLE: Creating SourceNode from Code and SourceMapConsumer in JavaScript\nDESCRIPTION: Illustrates the static method `SourceNode.fromStringWithSourceMap` to create a SourceNode tree from generated code and an existing `SourceMapConsumer`. Requires the `fs` module to read files and a `SourceMapConsumer` instance. An optional `relativePath` can be provided for resolving relative source paths within the source map.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nvar consumer = new SourceMapConsumer(fs.readFileSync(\"path/to/my-file.js.map\", \"utf8\"));\nvar node = SourceNode.fromStringWithSourceMap(fs.readFileSync(\"path/to/my-file.js\"),\n                                              consumer);\n```\n\n----------------------------------------\n\nTITLE: Integrating Freshness Check with Node.js HTTP Server - JavaScript\nDESCRIPTION: Shows full integration of 'fresh' into an HTTP server created with Node.js. The server utilizes fresh within a helper function to determine, via request and response headers, whether to return a 304 Not Modified status or deliver a full response. Dependencies include both the 'fresh' and 'http' modules and assumes that the response headers contain ETag and Last-Modified values. The server listens on port 3000, responding with either an empty body (304) for fresh resources or 'hello, world!' (200) for stale ones.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fresh/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar fresh = require('fresh')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  // perform server logic\n  // ... including adding ETag / Last-Modified response headers\n\n  if (isFresh(req, res)) {\n    // client has a fresh copy of resource\n    res.statusCode = 304\n    res.end()\n    return\n  }\n\n  // send the resource\n  res.statusCode = 200\n  res.end('hello, world!')\n})\n\nfunction isFresh (req, res) {\n  return fresh(req.headers, {\n    'etag': res.getHeader('ETag'),\n    'last-modified': res.getHeader('Last-Modified')\n  })\n}\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Defining Multiline Variables in .env (INI)\nDESCRIPTION: Example `.env` file entry demonstrating support for multiline values (like private keys) by enclosing the value in double quotes. Line breaks within the quotes are preserved. Requires `dotenv` version 15.0.0 or higher.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_5\n\nLANGUAGE: dosini\nCODE:\n```\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n...\nKh9NV...\n...\n-----END RSA PRIVATE KEY-----\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests (Shell)\nDESCRIPTION: This shell command first installs the project's dependencies using Node Package Manager (npm) and then executes the project's test suite. It's a common command used to ensure the project is set up correctly and passes all tests.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install && npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserslist in package.json (JavaScript, JSON)\nDESCRIPTION: This snippet shows how to specify Browserslist settings directly in the package.json file. It sets target browser and Node.js environments via the \"browserslist\" array, enabling front-end tools (such as Autoprefixer, Babel, and postcss-preset-env) to automatically determine supported environments. Input is a JSON array of queries; outputs are used internally by Browserslist-aware tools. Requires the relevant tools to support Browserslist and a valid package.json format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/browserslist/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\n    \"defaults and fully supports es6-module\",\n    \"maintained node versions\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Permissive Option Handling with arg in Node.js\nDESCRIPTION: Demonstrates the use of the 'permissive' option, which causes unrecognized arguments to be placed in the _ array rather than throwing an error. The snippet illustrates setup with an argv array and permissive mode set to true. The resulting output object includes all unknown and known options as respective keys.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst arg = require('arg');\n\nconst argv = ['--foo', 'hello', '--qux', 'qix', '--bar', '12345', 'hello again'];\n\nconst args = arg(\n\t{\n\t\t'--foo': String,\n\t\t'--bar': Number\n\t}, {\n\t\targv,\n\t\tpermissive: true\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Focusing Parameterized Test Suites using each.describe.only in JavaScript\nDESCRIPTION: This snippet demonstrates restricting execution to a single suite of parameterized tests using 'each.describe.only'. It is designed for debugging or isolating tests in a Jest-like runner where only the specified suite runs. Inputs are specified via the table, and only those tests are executed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Multi-Type Validation Error Output (Bash/Console)\nDESCRIPTION: Illustrates the console output when a configuration option (`foo`, assumed based on context, though example shows `bar`) fails validation against multiple allowed types (string or number) because it received an array. The error message lists all permissible types and shows examples for each valid type provided in `multipleValidOptions`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n● Validation Error:\n\n  Option foo must be of type:\n    string or number\n  but instead received:\n    array\n\n  Example:\n  {\n    \"bar\": \"string is ok\"\n  }\n\n  or\n\n  {\n    \"bar\": 2\n  }\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Formatting Data for Chart Libraries in TypeScript\nDESCRIPTION: This TypeScript function `formatChartData` takes an array of `DataPoint` objects (containing date strings and values) and transforms it into a format suitable for common charting libraries like Recharts or Chart.js. It maps each `DataPoint` to an object with `x` (as a Date object) and `y` (as the original value) properties.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport function formatChartData(data: DataPoint[]) {\n  // e.g. transform into something for a chart library\n  return data.map(dp => ({\n    x: new Date(dp.date),\n    y: dp.value\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Loaded Environment Variables (JavaScript)\nDESCRIPTION: Example JavaScript code illustrating how to access environment variables (like `S3_BUCKET`) loaded by `dotenv` via `process.env` within application logic, such as configuring an AWS S3 SDK call. Assumes `dotenv.config()` or `import 'dotenv/config'` has already been executed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\n// or import 'dotenv/config' if you're using ES6\n\n...\n\ns3.getBucketCors({Bucket: process.env.S3_BUCKET}, function(err, data) {})\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test Case Set with only using jest-each - JavaScript\nDESCRIPTION: Utilizes jest-each's .only modifier to run only the parameterized tests specified, excluding others in the file. Useful for focused debugging. The functionality is the same as standard each.test but restricted to exclusive execution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).test.only('returns the result of adding %d to %d', (a, b, expected) => {\\n  expect(a + b).toBe(expected);\\n});\n```\n\n----------------------------------------\n\nTITLE: Using es-errors to Access Native Error Constructors in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'es-errors' library to import cached versions of standard JavaScript Error constructors. It requires the 'es-errors' package and uses the Node.js 'assert' module to verify that the imported constructors (Base, Eval, Range, Ref, Syntax, Type, URI) are strictly equal to their corresponding native counterparts (Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/es-errors/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst assert = require('assert');\n\nconst Base = require('es-errors');\nconst Eval = require('es-errors/eval');\nconst Range = require('es-errors/range');\nconst Ref = require('es-errors/ref');\nconst Syntax = require('es-errors/syntax');\nconst Type = require('es-errors/type');\nconst URI = require('es-errors/uri');\n\nassert.equal(Base, Error);\nassert.equal(Eval, EvalError);\nassert.equal(Range, RangeError);\nassert.equal(Ref, ReferenceError);\nassert.equal(Syntax, SyntaxError);\nassert.equal(Type, TypeError);\nassert.equal(URI, URIError);\n```\n\n----------------------------------------\n\nTITLE: Importing and Accessing JavaScript Environment Globals - Node.js JavaScript\nDESCRIPTION: Shows how to import the 'globals' package and access a list of global variables (such as those available in 'browser' environments). The snippet uses CommonJS require and prints the properties of 'globals.browser'. Each property reveals if the global variable can be overwritten (true) or is read-only (false). This helps static analysis tools determine variable mutability. Requires 'globals' to be installed, and is meant for Node.js environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/globals/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst globals = require('globals');\n\nconsole.log(globals.browser);\n/*\n{\n\taddEventListener: false,\n\tapplicationCache: false,\n\tArrayBuffer: false,\n\tatob: false,\n\t...\n}\n*/\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Globs, RegExp, and Functions using AnyMatch - Javascript\nDESCRIPTION: Shows how to use the AnyMatch module in Javascript to match strings against an array of matchers, including strings, glob patterns, regular expressions, and custom predicate functions. The example demonstrates both boolean and index-based return values, as well as advanced matching using glob patterns. Dependencies: Node.js, AnyMatch module installed. Inputs are strings or arrays of strings, and outputs are booleans or numeric indices depending on the options. Notably, path matching is Bash-compatible, and Windows backslashes are not supported as path separators.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/anymatch/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst anymatch = require('anymatch');\n\nconst matchers = [ 'path/to/file.js', 'path/anyjs/**/*.js', /foo.js$/, string => string.includes('bar') && string.length > 10 ] ;\n\nanymatch(matchers, 'path/to/file.js'); // true\nanymatch(matchers, 'path/anyjs/baz.js'); // true\nanymatch(matchers, 'path/to/foo.js'); // true\nanymatch(matchers, 'path/to/bar.js'); // true\nanymatch(matchers, 'bar.js'); // false\n\n// returnIndex = true\nanymatch(matchers, 'foo.js', {returnIndex: true}); // 2\nanymatch(matchers, 'path/anyjs/foo.js', {returnIndex: true}); // 1\n\n// any picomatc\n\n// using globs to match directories and their children\nanymatch('node_modules', 'node_modules'); // true\nanymatch('node_modules', 'node_modules/somelib/index.js'); // false\nanymatch('node_modules/**', 'node_modules/somelib/index.js'); // true\nanymatch('node_modules/**', '/absolute/path/to/node_modules/somelib/index.js'); // false\nanymatch('**/node_modules/**', '/absolute/path/to/node_modules/somelib/index.js'); // true\n\nconst matcher = anymatch(matchers);\n['foo.js', 'bar.js'].filter(matcher);  // [ 'foo.js' ]\nanymatch master* ❯\n\n```\n\n----------------------------------------\n\nTITLE: Generating Numerical Ranges with fill-range (JavaScript)\nDESCRIPTION: Illustrates creating numerical ranges using `fill-range`. It shows that the start and end points can be provided as either actual JavaScript numbers or strings representing numbers. The function returns an array of numbers in these examples. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(fill(1, 5));     //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ]\n```\n\n----------------------------------------\n\nTITLE: Non-Compact (Pretty-Printed) Output for Arrays (JavaScript)\nDESCRIPTION: Shows the effect of setting `compact: false` for arrays. The output is formatted with newlines and indentation (using the default tab character), placing each array element on a new line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\njsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {\n  'compact': false\n});\n// → '[\\n\\t\\'Ich \\u2665 B\\xFCcher\\',\\n\\t\\'foo \\uD834\\uDF06 bar\\'\\n]'\n```\n\n----------------------------------------\n\nTITLE: Configuring ESTree Plugin in Babylon - JSON\nDESCRIPTION: This JSON snippet shows how to enable the 'estree' plugin when configuring Babylon (or Babel parser) to output an ESTree-compliant AST. No external dependencies are needed aside from Babylon itself. The 'plugins' key lists 'estree' as an active plugin to ensure compatibility with other ESTree parsers. Input is a JSON configuration object; output is a parser set to ESTree mode.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [ \"estree\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Visual Styles on Root via useEffect in React (TSX)\nDESCRIPTION: In a React component (likely a provider), toggles Memphis style classes on the document.body when the 'appearance.visualStyle' changes. Uses useEffect to listen for changes and applies the proper class list, activating or deactivating CSS rules for Memphis-style decoration. Requires React and the 'appearance' state variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n// theme-provider.tsx (or similar)\nuseEffect(() => {\n  // applyTheme(appearance)...\n\n  if (appearance.visualStyle === 'memphis') {\n    document.body.classList.add('memphis-style', 'enabled');\n  } else {\n    document.body.classList.remove('memphis-style', 'enabled');\n  }\n}, [appearance]);\n```\n\n----------------------------------------\n\nTITLE: Updating Vary Header in HTTP Server - Node.js - JavaScript\nDESCRIPTION: Illustrates how to use the 'vary' module within a real HTTP server scenario to conditionally append the 'User-Agent' header to the response. The example checks for mobile user agents and modifies content accordingly, setting both 'Content-Type' and a Vary header for proper caching. Dependencies include Node.js built-in 'http' and the installed 'vary' module; 'req' and 'res' are standard HTTP server parameters. Inputs/outputs follow Node.js HTTP API conventions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vary/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar http = require('http')\nvar vary = require('vary')\n\nhttp.createServer(function onRequest (req, res) {\n  // about to user-agent sniff\n  vary(res, 'User-Agent')\n\n  var ua = req.headers['user-agent'] || ''\n  var isMobile = /mobi|android|touch|mini/i.test(ua)\n\n  // serve site, depending on isMobile\n  res.setHeader('Content-Type', 'text/html')\n  res.end('You are (probably) ' + (isMobile ? '' : 'not ') + 'a mobile user')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Logging with Azure Logger - JavaScript\nDESCRIPTION: Shows how to set the logging level for Azure SDK operations and demonstrates instantiating an EventHubClient. Requires the '@azure/event-hubs' and '@azure/logger' packages. The key parameter is the log level ('info' in this example). Input: none directly, but functional client parameters needed. Logs of levels info, warning, and error are emitted to default output. Limitations: placeholder for client parameters and error handling contexts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/logger/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EventHubClient } = require('@azure/event-hubs');\n\nconst logger = require('@azure/logger');\nlogger.setLogLevel('info');\n\n// operations will now emit info, warning, and error logs\nconst client = new EventHubClient(/* params */);\nclient.getPartitionIds()\n  .then(ids => { /* do work */ })\n  .catch(e => { /* do work */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing get-caller-file Using Yarn - Bash\nDESCRIPTION: Demonstrates how to install the get-caller-file package from npm using the yarn package manager. This is required before using the utility in Node.js projects. The command adds the package as a dependency in package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-caller-file/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add get-caller-file\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure with typings Directory - Text\nDESCRIPTION: This snippet depicts a suggested project layout to facilitate custom typings for TypeScript. The typings directory contains per-module type package folders with an index.d.ts file in each. This organization is necessary when using the typeRoots compiler option, which expects type definitions to follow the package structure. The directories and files must be placed as shown for TypeScript to resolve them correctly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n<project_root>/\\n-- tsconfig.json\\n-- typings/\\n  -- <module_name>/\\n    -- index.d.ts\n```\n\n----------------------------------------\n\nTITLE: Installing type-is using npm\nDESCRIPTION: This snippet shows the command to install the `type-is` Node.js module using the npm package manager. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-is/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install type-is\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated express.createServer() in Express.js\nDESCRIPTION: This snippet shows the usage of `express.createServer()`, which was the older way to create an Express application instance. This method was deprecated and subsequently removed in Express 4.0.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexpress.createServer()\n```\n\n----------------------------------------\n\nTITLE: Requiring natural-compare-lite in Node.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to import the `natural-compare-lite` library in a Node.js environment after installing it via npm. This adds the `naturalCompare` method to the String prototype.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"natural-compare-lite\")\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern for Numeric Sequence Brace Expansion in JavaScript\nDESCRIPTION: Defines the regular expression `/^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/` used by the `brace-expansion` library to identify numeric sequence patterns like `{x..y[..incr]}`. It supports optional negative signs for start/end numbers and an optional step increment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/brace-expansion/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/\n// {x..y[..incr]}\n```\n\n----------------------------------------\n\nTITLE: Handling Sectioned Source Maps with AnyMap (TypeScript)\nDESCRIPTION: Shows how to handle sectioned source maps (defined by the `sections` field in the source map spec) using the `AnyMap` helper from `@jridgewell/trace-mapping`. `AnyMap` accepts either a standard source map object or a sectioned source map object and returns a `TraceMap` instance. This example constructs a sectioned map representing concatenated output from 'foo.js' and 'bar.js', then uses `originalPositionFor` to trace a position in the second section back to 'bar.js'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnyMap } from '@jridgewell/trace-mapping';\nconst fooOutput = 'foo';\nconst barOutput = 'bar';\nconst output = [fooOutput, barOutput].join('\\n');\n\nconst sectioned = new AnyMap({\n  version: 3,\n  sections: [\n    {\n      // 0-base line and column\n      offset: { line: 0, column: 0 },\n      // fooOutput's sourcemap\n      map: {\n        version: 3,\n        sources: ['foo.js'],\n        names: ['foo'],\n        mappings: 'AAAAA',\n      },\n    },\n    {\n      // barOutput's sourcemap will not affect the first line, only the second\n      offset: { line: 1, column: 0 },\n      map: {\n        version: 3,\n        sources: ['bar.js'],\n        names: ['bar'],\n        mappings: 'AAAAA',\n      },\n    },\n  ],\n});\n\nconst traced = originalPositionFor(sectioned, {\n  line: 2,\n  column: 0,\n});\n\nassert.deepEqual(traced, {\n  source: 'bar.js',\n  line: 1,\n  column: 0,\n  name: 'bar',\n});\n```\n\n----------------------------------------\n\nTITLE: Using events.once with EventTarget Emitters - Node.js Events API (JavaScript)\nDESCRIPTION: This snippet demonstrates the usage of the 'events.once' function from the Node.js 'events' module, adapted for both Node.js EventEmitters and browser EventTargets. It shows how to await a single event, such as a WebSocket opening or a DOM click, using Promises. Dependencies include the 'events' package (as supplied by this project) and native WebSocket or DOM APIs; 'assert' is used for test assertions. The inputs are respective event sources and event names; outputs depend on event occurrence or assertion validity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/events/History.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar events = require('events');\nvar assert = require('assert');\n\nasync function connect() {\n  var ws = new WebSocket('wss://example.com');\n  await events.once(ws, 'open');\n  assert(ws.readyState === WebSocket.OPEN);\n}\n\nasync function onClick() {\n  await events.once(document.body, 'click');\n  alert('you clicked the page!');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Patches with TypeBox Value.Patch in TypeScript\nDESCRIPTION: Illustrates using the `Value.Patch` function from TypeBox to apply a sequence of edit operations (typically generated by `Value.Diff`) to an initial value (`A`) to produce a new value (`C`). The example first calculates the difference (`E`) between `A` and `B`, then applies `E` to `A` resulting in a value identical to `B`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst A = { x: 1, y: 2 }\n\nconst B = { x: 3 }\n\nconst E = Value.Diff(A, B)                           // const E = [\n                                                     //   { type: 'update', path: '/x', value: 3 },\n                                                     //   { type: 'delete', path: '/y' }\n                                                     // ]\n\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\n```\n```\n\n----------------------------------------\n\nTITLE: Using Capitalize Utility Type in TypeScript\nDESCRIPTION: This snippet demonstrates the `Capitalize<S>` utility type in TypeScript (introduced in v4.1). It provides examples of converting the first character of string literals, union types (`'foo' | 'bar'`), template literal types (`aB${S}`), and generic types to uppercase. It also illustrates its behavior with `string`, `any`, `never`, and highlights an error when used with a non-string type like `number`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\ntype T = Capitalize<'hello'>;  // 'Hello'\n\ntype T2 = Capitalize<'foo' | 'bar'>;  // 'Foo' | 'Bar'\n\ntype T3<S extends string> = Capitalize<`aB${S}`>;\ntype T4 = T32<'xYz'>;  // 'ABxYz'\n\ntype T5 = Capitalize<string>;  // string\ntype T6 = Capitalize<any>;  // any\ntype T7 = Capitalize<never>;  // never\ntype T8 = Capitalize<42>;  // Error, type 'number' does not satisfy the constraint 'string'\n```\n\n----------------------------------------\n\nTITLE: Serializing a Cookie Name-Value Pair (JavaScript)\nDESCRIPTION: Demonstrates how to generate a 'Set-Cookie' header string using 'cookie.serialize'. This function takes a name and value, and can also accept options for controlling attributes like domain, expiration, or encoding. The output is a string suitable for sending in an HTTP response header.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar setCookie = cookie.serialize('foo', 'bar');\n// foo=bar\n```\n\n----------------------------------------\n\nTITLE: Calling Azure OpenAI createChatCompletion in Node.js\nDESCRIPTION: This JavaScript code creates a chat completion using Azure OpenAI and the Node.js OpenAI SDK, submitting a list of messages with role and content. The model or deployment name is given in the model field. On completion, the resulting message content is extracted from the response. Dependencies: OpenAIApi client initialized with Azure endpoint, deployment, and API version. Inputs: array of message objects. Outputs: single string containing the model’s response.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst completion = await openai.createChatCompletion({\\n  model: \"gpt-4\", // or your deployment name\\n  messages: [ {role: \"system\", content: systemPrompt}, {role: \"user\", content: userPrompt} ]\\n});\\nconst result = completion.data.choices[0].message.content;\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Map Support with ES6 Imports - JavaScript\nDESCRIPTION: Illustrates two ways to enable source-map-support via ES6 import syntax. The first approach directly imports the register module, which handles installation as a side effect. The second imports the module as a default and invokes its install() method. Useful for codebases using ECMAScript modules or transpilation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport 'source-map-support/register'\n\n// Instead of:\nimport sourceMapSupport from 'source-map-support'\nsourceMapSupport.install()\n```\n\n----------------------------------------\n\nTITLE: Completing Stripe Subscription Creation in TypeScript\nDESCRIPTION: This server-side TypeScript snippet handles the completion of a Stripe subscription setup. It assumes a previous step initiated the subscription and retrieves the client secret from the latest invoice's payment intent to be sent back to the client, likely for finalizing payment confirmation (e.g., with Stripe Elements). It includes error handling for potential issues during the process.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n      clientSecret: (subscription.latest_invoice as Stripe.Invoice)?.payment_intent?.client_secret,\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Metadata and Headers with node-fetch - JavaScript\nDESCRIPTION: This example details how to inspect response properties such as ok, status, statusText, and headers after performing an HTTP(S) request with node-fetch. It shows how to obtain raw headers and specific header values for further processing or debugging. No dependencies beyond node-fetch, and the response is from a GET request to a website.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nconst response = await fetch('https://github.com/');\\n\\nconsole.log(response.ok);\\nconsole.log(response.status);\\nconsole.log(response.statusText);\\nconsole.log(response.headers.raw());\\nconsole.log(response.headers.get('content-type'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Design with Tailwind CSS Prefixes\nDESCRIPTION: Utilizes Tailwind CSS responsive utility prefixes (sm:, md:, lg:) to apply different styles based on screen breakpoints. This is crucial for ensuring the user interface adapts correctly to various device sizes like laptops, tablets, and mobile phones, enhancing usability across platforms.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nsm:, md:, lg: prefixes\n```\n\n----------------------------------------\n\nTITLE: Generating RegExp and Capturing Route Keys with path-to-regexp in JavaScript\nDESCRIPTION: Illustrates how to use 'pathToRegexp' to convert an Express-like path pattern into a regular expression, while also capturing named keys from the path for later lookup. The function takes a path template, a keys array to be populated with parameter names, and optionally an options object. The expected output is a list of keys found and a RegExp object that matches URLs of the given structure. Limitations include that unsupported path formats may result in errors, and the function should be provided with valid patterns.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-to-regexp/Readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar keys = [];\nvar exp = pathToRegexp('/foo/:bar', keys);\n//keys = ['bar']\n//exp = /^\\/foo\\/(?:([^\\/]+?))\\/?$/i\n```\n\n----------------------------------------\n\nTITLE: Resolving Exports with resolve-pkg-maps (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the resolve-pkg-maps library to resolve an exported subpath from package.json. It imports the `resolveExports` function, obtains the package name and subpath by parsing an import request, and then performs resolution using specified conditions (e.g., `import`). The output is an array of strings representing resolved file paths (e.g., ['./file.mjs']). Dependencies include the resolve-pkg-maps package, and user implementations of `parseRequest` and `getPackageJson` functions. Input parameters are the exports map, package subpath, and array of resolution conditions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveExports } from 'resolve-pkg-maps'\n\nconst [packageName, packageSubpath] = parseRequest('utils/reverse')\n\nconst resolvedPaths: string[] = resolveExports(\n    getPackageJson(packageName).exports,\n    packageSubpath,\n    ['import', ...otherConditions]\n)\n// => ['./file.mjs']\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Object Schema with TypeBox and JSON Schema - TypeScript/JSON\nDESCRIPTION: This set of snippets showcases how to generate a partial object type (where all properties are optional) using TypeBox (TypeScript), native TypeScript utility types, and the resulting JSON Schema. Dependencies include the TypeBox library for TypeScript and a JSON Schema validator if using the JSON snippet. Inputs are objects with optional fields; outputs are schema definitions with all properties optional.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Partial(\n  Type.Object({\n    x: Type.Number(),\n    y: Type.Number()\n  })\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = Partial<{\n  x: number,\n  y: number\n}>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"x\": {\n      \"type\": \"number\"\n    },\n    \"y\": {\n      \"type\": \"number\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Atomically with Ownership Options using writeFileAtomic in JavaScript\nDESCRIPTION: Example showing how to use `writeFileAtomic` to write 'Hello Node' to 'message.txt' while specifying file ownership using the `chown` option with `uid` and `gid`. Includes a callback function to handle completion or errors. Requires the `write-file-atomic` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/write-file-atomic/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwriteFileAtomic('message.txt', 'Hello Node', {chown:{uid:100,gid:50}}, function (err) {\n  if (err) throw err;\n  console.log('It\\'s saved!');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Express Type Definitions with npm - bash\nDESCRIPTION: Demonstrates how to install the @types/express-serve-static-core TypeScript type definitions using npm. No code dependencies except npm are required. The command accepts no parameters and installs the type definitions as a project dependency to enable strong typing when working with express-serve-static-core in TypeScript projects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/express-serve-static-core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/express-serve-static-core\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple .env Files with dotenvx Precedence (Bash)\nDESCRIPTION: Bash commands illustrating how `dotenvx` handles loading multiple environment files specified using the `--env-file` flag multiple times. Variables defined in files listed earlier in the command (`.env.local`) take precedence over variables with the same name in files listed later (`.env`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"HELLO=local\" > .env.local\n$ echo \"HELLO=World\" > .env\n$ echo \"console.log('Hello ' + process.env.HELLO)\" > index.js\n\n$ dotenvx run --env-file=.env.local --env-file=.env -- node index.js\nHello local\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Namespaces with 'debug' in Node.js (JavaScript)\nDESCRIPTION: Illustrates creating multiple debug instances with hierarchical namespaces ('worker:a', 'worker:b'). Each instance logs messages independently, allowing for granular control over debug output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = require('debug')('worker:a')\n  , b = require('debug')('worker:b');\n\nfunction work() {\n  a('doing lots of uninteresting work');\n  setTimeout(work, Math.random() * 1000);\n}\n\nwork();\n\nfunction workb() {\n  b('doing some work');\n  setTimeout(workb, Math.random() * 2000);\n}\n\nworkb();\n```\n\n----------------------------------------\n\nTITLE: Defining npm Test Script with cross-env, nyc, Mocha in package.json - JSON\nDESCRIPTION: This package.json scripts configuration defines a 'test' script that sets the NODE_ENV to 'test' (using cross-env for cross-platform support), then runs nyc with lcov and text reporting, and finally executes Mocha tests matching the test/*.js pattern. It integrates well with babel-plugin-istanbul for proper instrumentation and coverage collection. Dependencies include cross-env, nyc, mocha, and babel-plugin-istanbul; key parameters include test script definition and environment setup.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-istanbul/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"cross-env NODE_ENV=test nyc --reporter=lcov --reporter=text mocha test/*.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing strip-ansi via npm\nDESCRIPTION: Installs the 'strip-ansi' package using the Node Package Manager (npm). This command should be run in a terminal or command prompt. Requires npm and Node.js to be installed in the environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-ansi/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install strip-ansi\n```\n\n----------------------------------------\n\nTITLE: Using `basename` Option for Basename Matching in Micromatch (JavaScript)\nDESCRIPTION: Demonstrates how the `basename: true` option in `micromatch` allows glob patterns without slashes (e.g., `*.js`) to match against the basename component of file paths within an array. Without this option, such patterns typically only match strings without slashes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nmicromatch(['a/b.js', 'a/c.md'], '*.js');\n//=> []\n\nmicromatch(['a/b.js', 'a/c.md'], '*.js', { basename: true });\n//=> ['a/b.js']\n```\n\n----------------------------------------\n\nTITLE: Advanced Chalk Styling Techniques in JavaScript\nDESCRIPTION: Demonstrates various ways to apply styles using Chalk: combining styled and unstyled strings, chaining multiple styles (e.g., color, background, bold), passing multiple arguments, nesting styles, using styles within ES2015 template literals, using tagged template literals for inline styling, and applying specific colors via keyword, RGB, or HEX values. Requires the 'chalk' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chalk = require('chalk');\nconst log = console.log;\n\n// Combine styled and normal strings\nlog(chalk.blue('Hello') + ' World' + chalk.red('!'));\n\n// Compose multiple styles using the chainable API\nlog(chalk.blue.bgRed.bold('Hello world!'));\n\n// Pass in multiple arguments\nlog(chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz'));\n\n// Nest styles\nlog(chalk.red('Hello', chalk.underline.bgBlue('world') + '!'));\n\n// Nest styles of the same type even (color, underline, background)\nlog(chalk.green(\n\t'I am a green line ' +\n\tchalk.blue.underline.bold('with a blue substring') +\n\t' that becomes green again!'\n));\n\n// ES2015 template literal\nlog(`\nCPU: ${chalk.red('90%')}\nRAM: ${chalk.green('40%')}\nDISK: ${chalk.yellow('70%')}\n`);\n\n// ES2015 tagged template literal\nlog(chalk`\nCPU: {red ${cpu.totalPercent}%}\nRAM: {green ${ram.used / ram.total * 100}%}\nDISK: {rgb(255,131,0) ${disk.used / disk.total * 100}%}\n`);\n\n// Use RGB colors in terminal emulators that support it.\nlog(chalk.keyword('orange')('Yay for orange colored text!'));\nlog(chalk.rgb(123, 45, 67).underline('Underlined reddish color'));\nlog(chalk.hex('#DEADED').bold('Bold gray!'));\n```\n\n----------------------------------------\n\nTITLE: Using formdata-polyfill (v3+) in CommonJS - JavaScript\nDESCRIPTION: This snippet shows the modern approach with formdata-polyfill v3 or later: requiring the polyfill for side effects, thus patching the global FormData implementation, and sending the FormData object directly with xhr.send. No need for explicit _blob serialization. Parameters include a form element, with output being an XHR request using a polyfilled FormData.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/formdata-polyfill/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('formdata-polyfill')\nvar fd = new FormData(form)\nxhr.send(fd)\n```\n\n----------------------------------------\n\nTITLE: Running Transpiled TypeScript with Node - Bash\nDESCRIPTION: Runs the compiled demo.js file (from demo.ts) using Node.js. Source-map-support maps stack traces back to the original TypeScript code. Used within the TypeScript demo flow.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.js\n```\n\n----------------------------------------\n\nTITLE: Constructing and Copying Headers with node-fetch - JavaScript\nDESCRIPTION: This snippet demonstrates various methods for constructing a Headers object using node-fetch: initializing from a plain object, an array of tuples, a Map instance, or by copying an existing Headers object. This flexibility facilitates HTTP header manipulation and reuse across requests. Only requires node-fetch, with no external inputs or outputs beyond Headers objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example adapted from https://fetch.spec.whatwg.org/#example-headers-class\\nimport {Headers} from 'node-fetch';\\n\\nconst meta = {\\n\\t'Content-Type': 'text/xml'\\n};\\nconst headers = new Headers(meta);\\n\\n// The above is equivalent to\\nconst meta = [['Content-Type', 'text/xml']];\\nconst headers = new Headers(meta);\\n\\n// You can in fact use any iterable objects, like a Map or even another Headers\\nconst meta = new Map();\\nmeta.set('Content-Type', 'text/xml');\\nconst headers = new Headers(meta);\\nconst copyOfHeaders = new Headers(headers);\n```\n\n----------------------------------------\n\nTITLE: Fixing Light Theme Preview in React with Tailwind (TSX)\nDESCRIPTION: Removes the 'dark:bg-white' Tailwind class from the Light Theme preview box to ensure it always appears white even in dark mode. Requires a React setup with Tailwind CSS configured and assumes you use useState for appearance. Clicking the box sets the theme to 'light', and the class list applies correct borders and scaling effects. No other dependencies, but the component must receive and manage the 'appearance' state and associated setter.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n// After:\n<div\n  className={`border ${\n    appearance.theme === \"light\"\n      ? 'border-primary ring-2 ring-primary/30'\n      : 'border-slate-200 dark:border-[var(--dark-border)]'\n  } rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white`}\n  onClick={() => setAppearance(prev => ({ ...prev, theme: \"light\" }))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Side-Channel Data Storage via WeakMap - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the 'side-channel-weakmap' API to associate arbitrary data with JavaScript objects in a memory-safe way when supported by WeakMap. Dependencies include the 'assert' and 'side-channel-weakmap' modules. Key parameters include the key object and the value being set. The code sets, retrieves, asserts, and deletes values, providing meaningful error handling and ensuring type constraints. The expected inputs are arbitrary objects as keys, and the expected outputs are asserted retrieval of associated values or exceptions if the key is not present. If keys are not deleted, memory leaks may occur.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel-weakmap/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst getSideChannelList = require('side-channel-weakmap');\n\nconst channel = getSideChannelList();\n\nconst key = {};\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n\nchannel.set(key, 42);\n\nchannel.assert(key); // does not throw\nassert.equal(channel.has(key), true);\nassert.equal(channel.get(key), 42);\n\nchannel.delete(key);\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n```\n\n----------------------------------------\n\nTITLE: Applying HWB Color and Bold Style with Chalk in JavaScript\nDESCRIPTION: This snippet illustrates applying a foreground color using HWB (Hue, Whiteness, Blackness) values (`32, 0, 50`) and the bold style with the Chalk library. Requires the 'chalk' npm package. Input includes three HWB integer values and the text; output is an ANSI-escaped string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.hwb(32, 0, 50).bold('Orange!')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Manual HTML Entity Escaping and Unescaping in JavaScript\nDESCRIPTION: Highlights a common anti-pattern of manually escaping and unescaping HTML entities by chaining String.prototype.replace calls for each character entity. This approach can lead to bugs, such as double-encoding or decoding, and exposes applications to security risks. Functions 'escape' and 'unescape' are defined, followed by examples showing unexpected results and potential XSS vulnerabilities. No dependencies required, but the snippet intentionally demonstrates flawed logic for educational purposes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/html-escaper/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// WARNING: THIS IS WRONG\n// if you are that kind of dev that does this\nfunction escape(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          .replace(/'/g, \"&#39;\")\n          .replace(/\"/g, \"&quot;\");\n}\n\n// you might be the same dev that does this too\nfunction unescape(s) {\n  return s.replace(/&amp;/g, \"&\")\n          .replace(/&lt;/g, \"<\")\n          .replace(/&gt;/g, \">\")\n          .replace(/&#39;/g, \"'\")\n          .replace(/&quot;/g, '\"');\n}\n\n// guess what we have here ?\nunescape('&amp;lt;');\n\n// now guess this XSS too ...\nunescape('&amp;lt;script&amp;gt;alert(\"yo\")&amp;lt;/script&amp;gt;');\n\n```\n\n----------------------------------------\n\nTITLE: Using Method Parameter Decorators (JavaScript)\nDESCRIPTION: Examples demonstrating the syntax for method parameter decorators (`@decorator` or `@decorator(config)` placed before a parameter). This Stage 0 TC39 proposal allows decorators to be applied to parameters of class constructors, regular functions, and object methods. Support for this syntax needs to be enabled in the parser.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_48\n\nLANGUAGE: js\nCODE:\n```\nclass Foo {\n  constructor(@foo() x, @bar({ a: 123 }) @baz() y) {}\n}\n\nexport default function func(@foo() x, @bar({ a: 123 }) @baz() y) {}\n\nvar obj = {\n  method(@foo() x, @bar({ a: 123 }) @baz() y) {}\n};\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Parameterized Testing using jest-each.test (with done) - JavaScript\nDESCRIPTION: Handles asynchronous test cases using parameterization with jest-each by passing the done callback. Each parameter set triggers an async operation, with test completion marked by calling done. Required for legacy async APIs (not promises). 'callSomeAsynchronousFunction' must be provided by the user.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\neach([['hello'], ['mr'], ['spy']]).test(\\n  'gives 007 secret message: %s',\\n  (str, done) => {\\n    const asynchronousSpy = message => {\\n      expect(message).toBe(str);\\n      done();\\n    };\\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\\n  },\\n);\n```\n\n----------------------------------------\n\nTITLE: Installing iMurmurHash via npm (Bash)\nDESCRIPTION: Shows the command to install the `imurmurhash` package using the Node Package Manager (npm). This is the standard way to add the library as a dependency to a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/imurmurhash/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install imurmurhash\n```\n\n----------------------------------------\n\nTITLE: Adding a Snapshot Serializer in a Jest Test File (JavaScript)\nDESCRIPTION: Shows how to register a custom snapshot serializer module within an individual Jest test file using `expect.addSnapshotSerializer`. This allows specific tests to use custom formatting logic for `toMatchSnapshot` assertions, overriding or augmenting default Jest serializers for that file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\n----------------------------------------\n\nTITLE: TypeScript Demo: Compilation and Execution (Method 2 - Register)\nDESCRIPTION: Alternative shell commands for the TypeScript demo. It compiles `demo.ts` with source maps and then runs the output `demo.js` using `node -r source-map-support/register`. This avoids needing the `require` statement inside the TypeScript code itself. The resulting stack trace correctly points to the original `.ts` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install source-map-support typescript\n$ node_modules/typescript/bin/tsc  -sourcemap demo.ts\n$ node -r source-map-support/register demo.js\n\ndemo.ts:5\n  bar() { throw new Error('this is a demo'); }\n                ^\nError: this is a demo\n    at Foo.bar (demo.ts:5:17)\n    at new Foo (demo.ts:4:24)\n    at Object.<anonymous> (demo.ts:7:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:901:3\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Map Support using ES6 Import (Explicit Install)\nDESCRIPTION: Alternative method to enable source map support in an ES6 environment by importing the module and then explicitly calling the `install()` function. This is compared to the simpler `register` import.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Instead of:\nimport sourceMapSupport from '@cspotcode/source-map-support'\nsourceMapSupport.install()\n```\n\n----------------------------------------\n\nTITLE: Conceptual Cosmos DB Schema for DECA Content\nDESCRIPTION: Defines a conceptual structure for storing cleaned DECA content in an Azure Cosmos DB 'Documents' container. Each record represents a document or section with fields for unique ID, title, main text content, and a type identifier (e.g., 'roleplay case'). This structure facilitates basic retrieval and organization.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nFields: id, title, text, type (e.g., “roleplay case” or “PI list”)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple gensync Operations with gensync.all in JavaScript\nDESCRIPTION: Uses gensync.all as a generator combinator, similar to Promise.all, to synchronously or asynchronously await completion of multiple file reading operations. Suitable for aggregating results from multiple gensync-instrumented APIs. Returns an array of results once all operations are complete. Requires gensync-wrapped functions as operands.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gensync/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst loadFiles = gensync(function* () {\n  return yield* gensync.all([\n    readFile(\"./one.js\"),\n    readFile(\"./two.js\"),\n    readFile(\"./three.js\"),\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using maxLength and expand Options in braces - JavaScript\nDESCRIPTION: Shows how to use 'maxLength' to limit the input string's permissible length, throwing an error if exceeded. Also demonstrates the 'expand' option for array-style expansion. Both options are provided in the options object argument; adjust as needed for custom usage scenarios.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces('a/{b,c}/d', { maxLength: 3 })); //=> throws an error\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces('a/{b,c}/d', { expand: true }));\n//=> [ 'a/b/d', 'a/c/d' ]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables - Shell (bash)\nDESCRIPTION: This snippet copies the example environment variable file '.env.example' to '.env' and prompts the user to edit it with their own configuration settings (such as API keys and secrets). The user is expected to open and modify the '.env' file post-copy. This ensures the application has the correct settings for local operation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# Edit .env with your configuration\n```\n\n----------------------------------------\n\nTITLE: Defining Break Timer Component Props in TypeScript\nDESCRIPTION: This TypeScript interface outlines the properties accepted by the `BreakTimer` React component. It requires an `onClose` function callback, which is invoked when the timer is closed. It also accepts an optional `duration` property in seconds, defaulting to 300 (5 minutes) if not specified.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BreakTimerProps {\n  onClose: () => void;\n  duration?: number; // seconds, defaults to 300\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling 'x-powered-by' Header in Express.js\nDESCRIPTION: Demonstrates how to disable the 'X-Powered-By: Express' HTTP response header using `app.disable()`. Disabling this header is often recommended for security reasons to avoid revealing server technology.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\napp.disable('x-powered-by')\n```\n\n----------------------------------------\n\nTITLE: Running the Azure OpenAI Test Script - JavaScript\nDESCRIPTION: Illustrates the command used to launch the provided JavaScript test script that validates the Azure OpenAI integration. The script must exist as 'test-azure-openai.js' and utilizes Node.js to execute. Running this command will initiate a process that loads credentials from environment variables, connects to the Azure OpenAI API, sends a test request, and displays the returned output or error. Ensure all required dependencies are installed and the environment is correctly configured prior to running.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/AZURE_OPENAI_INTEGRATION.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode test-azure-openai.js\n```\n\n----------------------------------------\n\nTITLE: Integrating Source Map Support with Mocha Tests\nDESCRIPTION: Command-line example showing how to run Mocha tests with source map support enabled. It uses the `--require` flag to load the `register` module before executing tests.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha --require @cspotcode/source-map-support/register tests/\n```\n\n----------------------------------------\n\nTITLE: Writing BSER Data to a Socket - JavaScript\nDESCRIPTION: Illustrates sending a serialized object via a Unix socket by encoding the object with 'bser.dumpToBuffer' and writing the binary data to the socket stream. Assumes both 'socket' and 'obj' have been defined and are valid. Only objects compatible with BSER can be serialized.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bser/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.write(bser.dumpToBuffer(obj));\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern-Property Number Object with JSON Schema - JSON\nDESCRIPTION: This snippet creates a JSON Schema object using patternProperties to specify that any property name must map to a number value. It is used to enforce that all properties, regardless of their keys, must be of type number. Requires a JSON Schema validator that supports 'patternProperties'. Input is any object; output is a schema-object constraint.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"patternProperties\": {\n    \"^.*$\": {\n      \"type\": \"number\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing pretty-format using ES2015 Modules (JavaScript)\nDESCRIPTION: Imports the `format` function from the `pretty-format` library using the ES2015 `import` syntax and assigns it to the `prettyFormat` constant via aliasing (`as`). This is the standard module syntax for modern JavaScript applications.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n----------------------------------------\n\nTITLE: Using iMurmurHash for Incremental Hashing (JavaScript)\nDESCRIPTION: A quick example demonstrating the core functionality of the library. It shows how to create an initial hash state, incrementally add more strings using the `hash()` method (including method chaining), and finally retrieve the computed 32-bit hash value using `result()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/imurmurhash/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the initial hash\nvar hashState = MurmurHash3('string');\n\n// Incrementally add text\nhashState.hash('more strings');\nhashState.hash('even more strings');\n\n// All calls can be chained if desired\nhashState.hash('and').hash('some').hash('more');\n\n// Get a result\nhashState.result();\n// returns 0xe4ccfe6b\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Exports with Flow Syntax (JavaScript/Flow)\nDESCRIPTION: Example of using `declare module.exports` within a Flow `declare module` block. This syntax is used in Flow type definition files (`.flow`) or `declare module` blocks to specify the type of the value exported via `module.exports` in a CommonJS module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_47\n\nLANGUAGE: js\nCODE:\n```\ndeclare module \"foo\" {\n  declare module.exports: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Values from Schemas using Value.Create in TypeBox (TypeScript)\nDESCRIPTION: This snippet demonstrates the `Value.Create()` function from the TypeBox `Value` module. It takes a TypeBox schema `T` (an object with properties 'x' and 'y', where 'y' has a default value) and generates a JavaScript object conforming to the schema, using default values where specified (like `y: 42`) and standard defaults for types otherwise (like `x: 0` for a number).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\n\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Roleplay and AI Feature Methods - TypeScript\nDESCRIPTION: This code features three exported async functions for generating roleplay scenarios, test questions, and PI explanations using Azure OpenAI. The main function, generateRoleplay, invokes the AI client and API with structured prompts and parameters (e.g., temperature, maxTokens, JSON output). It parses model responses and expects environment configuration for deployment specifics. The test and PI explanation methods are placeholders but intended to follow a similar structure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// Roleplay generation\nexport async function generateRoleplay(params) {\n  const client = getOpenAIClient();\n  const deployment = process.env.AZURE_OPENAI_DEPLOYMENT || \"gpt-4o-mini\";\n  \n  const response = await client.getChatCompletions(\n    deployment,\n    [\n      { role: \"system\", content: \"You are a DECA roleplay scenario generator...\" },\n      { role: \"user\", content: `Create a roleplay scenario about ${params.topic}...` }\n    ],\n    {\n      temperature: 0.7,\n      maxTokens: 1000,\n      responseFormat: { type: \"json_object\" }\n    }\n  );\n  \n  return JSON.parse(response.choices[0].message.content);\n}\n\n// Test question generation\nexport async function generateTestQuestions(params) {\n  // Similar implementation\n}\n\n// PI explanation\nexport async function explainPerformanceIndicator(params) {\n  // Similar implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Pipeline Policy in TypeScript\nDESCRIPTION: This snippet demonstrates creating a custom `PipelinePolicy` named 'My wonderful policy' in TypeScript. The example policy modifies the outgoing `PipelineRequest` by adding a custom header ('X-Cool-Header'). It then calls the `next` policy in the pipeline using `await next(request)` and includes conditional logic to perform special actions if the resulting `PipelineResponse` status is 403 (Forbidden).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-rest-pipeline/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipelineRequest, SendRequest, PipelineResponse } from \"@azure/core-rest-pipeline\";\n\nconst customPolicy = {\n  name: \"My wonderful policy\",\n  async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n    // Change the outgoing request by adding a new header\n    request.headers.set(\"X-Cool-Header\", 42);\n    const result = await next(request);\n    if (result.status === 403) {\n      // Do something special if this policy sees Forbidden\n    }\n    return result;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Error Logging with finalhandler's onerror Option\nDESCRIPTION: Demonstrates configuring finalhandler with a custom `onerror` function. When an error is passed to the `done` function (e.g., from a failed file read), the provided `logerror` function is called before finalhandler sends the error response, allowing for centralized error logging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/finalhandler/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res, { onerror: logerror })\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n\nfunction logerror (err) {\n  console.error(err.stack || err.toString())\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Demo: Node.js Execution Output with Source Mapping\nDESCRIPTION: Output shown when running the `compiled.js` script using Node.js. Demonstrates that the stack trace correctly references the original file (`original.js`) and line number due to the source map support, instead of showing the compiled file details.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n$ node compiled.js\n\noriginal.js:1\nthrow new Error('test'); // This is the original code\n      ^\nError: test\n    at Object.<anonymous> (original.js:1:7)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:901:3\n```\n\n----------------------------------------\n\nTITLE: Illustrating Flow Static Property Bug Fix in Declare Class (JavaScript/Flow)\nDESCRIPTION: Demonstrates a Flow `declare class` definition. A previous bug in the Babylon parser incorrectly propagated the `static` keyword, marking the `c` property as static in the Abstract Syntax Tree (AST) after `static b` was declared. This snippet highlights the fixed behavior where only explicitly declared static properties are marked as such.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_42\n\nLANGUAGE: js\nCODE:\n```\ndeclare class X {\n    a: number;\n    static b: number; // static\n    c: number; // this was being marked as static in the AST as well\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the diffStringsUnified function\nDESCRIPTION: Shows how to import the `diffStringsUnified` function from the `jest-diff` package using both CommonJS (`require`) and ECMAScript (`import`) module systems.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diffStringsUnified} = require('jest-diff');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {diffStringsUnified} from 'jest-diff';\n```\n\n----------------------------------------\n\nTITLE: Comparing Chalk Method Chaining and Tagged Template Literals in JavaScript\nDESCRIPTION: Illustrates the equivalence between applying styles using traditional method chaining (e.g., `chalk.bold.rgb(10, 100, 200)('Hello!')`) and using the tagged template literal syntax, either by applying the style to the entire literal (e.g., `chalk.bold.rgb(10, 100, 200)`Hello!`) or using the internal brace syntax (e.g., `` chalk`{bold.rgb(10,100,200) Hello!}` ``). Requires the 'chalk' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(chalk.bold.rgb(10, 100, 200)('Hello!'));\nconsole.log(chalk.bold.rgb(10, 100, 200)`Hello!`);\nconsole.log(chalk`{bold.rgb(10,100,200) Hello!}`);\n```\n\n----------------------------------------\n\nTITLE: Setting CommonJS Module Output in tsconfig.json (JSONC)\nDESCRIPTION: Configures the compiler to output CommonJS modules by setting 'module' to 'CommonJS' under 'compilerOptions'. This is necessary for traditional Node.js execution and ensures compatibility with most tooling. No further configuration is required unless overriding for specific tools.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_14\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"CommonJS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Variance Type Annotations with Flow in JavaScript\nDESCRIPTION: Showcases Flow's property variance syntax with classes, interfaces, and type declarations. No external dependencies outside enabling Flow in the project. The snippet demonstrates how to annotate covariant (+) and contravariant (-) properties in type, interface, and class constructs, as well as computed property names. Inputs are Flow type signatures; outputs are applied type checks during static analysis.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\ntype T = { +p: T };\\ninterface T { -p: T };\\ndeclare class T { +[k:K]: V };\\nclass T { -[k:K]: V };\\nclass C2 { +p: T = e };\n```\n\n----------------------------------------\n\nTITLE: Defining Dark Mode CSS Variables and Styles (CSS)\nDESCRIPTION: Establishes CSS custom properties specifically for dark mode within `client/src/styles/dark-mode-gradients.css`. It defines base dark theme colors (`--dark-bg-*`, `--dark-border`, `--dark-text-*`) in `:root` and surface shades (`--surface-*`) scoped to the `.dark` class. It also applies default dark mode background and border colors to common components like cards, dropdowns, dialogs, and popovers using these variables.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --dark-bg-primary: #121212;\n  --dark-bg-secondary: #1e1e1e;\n  --dark-bg-tertiary: #2d2d2d;\n  --dark-border: #3a3a3a;\n  --dark-text-primary: #e0e0e0;\n  --dark-text-secondary: #a0a0a0;\n}\n.dark {\n  --surface-1: #1a1a1a;\n  --surface-2: #222222;\n  --surface-3: #2a2a2a;\n  --surface-4: #333333;\n}\n.dark .card,\n.dark .dropdown-content,\n.dark .dialog-content,\n.dark .popover-content {\n  background-color: var(--surface-2);\n  border-color: var(--dark-border);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting StackUtils Type Definitions for TypeScript\nDESCRIPTION: This TypeScript declaration provides typings for the StackUtils library by exporting the StackUtils class and defining its methods, constructor options, and interfaces related to stack trace parsing and manipulation. It includes all method signatures, expected parameter types, and return types, as well as supporting interfaces for stack frame data and options. No dependencies are required, and the declaration is suitable for use in TypeScript projects requiring stack trace utilities from stack-utils.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/stack-utils/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport = StackUtils;\n\ndeclare class StackUtils {\n    static nodeInternals(): RegExp[];\n    constructor(options?: StackUtils.Options);\n    clean(stack: string | string[]): string;\n    capture(limit?: number, startStackFunction?: Function): StackUtils.CallSite[];\n    capture(startStackFunction: Function): StackUtils.CallSite[];\n    captureString(limit?: number, startStackFunction?: Function): string;\n    captureString(startStackFunction: Function): string;\n    at(startStackFunction?: Function): StackUtils.CallSiteLike;\n    parseLine(line: string): StackUtils.StackLineData | null;\n}\n\ndeclare namespace StackUtils {\n    interface Options {\n        internals?: RegExp[] | undefined;\n        ignoredPackages?: string[] | undefined;\n        cwd?: string | undefined;\n        wrapCallSite?(callSite: CallSite): CallSite;\n    }\n\n    interface CallSite {\n        getThis(): object | undefined;\n        getTypeName(): string;\n        getFunction(): Function | undefined;\n        getFunctionName(): string;\n        getMethodName(): string | null;\n        getFileName(): string | undefined;\n        getLineNumber(): number;\n        getColumnNumber(): number;\n        getEvalOrigin(): CallSite | string;\n        isToplevel(): boolean;\n        isEval(): boolean;\n        isNative(): boolean;\n        isConstructor(): boolean;\n    }\n\n    interface CallSiteLike extends StackData {\n        type?: string | undefined;\n    }\n\n    interface StackLineData extends StackData {\n        evalLine?: number | undefined;\n        evalColumn?: number | undefined;\n        evalFile?: string | undefined;\n    }\n\n    interface StackData {\n        line?: number | undefined;\n        column?: number | undefined;\n        file?: string | undefined;\n        constructor?: boolean | undefined;\n        evalOrigin?: string | undefined;\n        native?: boolean | undefined;\n        function?: string | undefined;\n        method?: string | undefined;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending 'debug' Namespaces in JavaScript\nDESCRIPTION: Shows how to create new debugger instances with extended namespaces based on an existing debugger instance. The `extend` method allows creating hierarchical namespaces (e.g., 'auth:sign', 'auth:login' derived from 'auth') for more organized debugging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst log = require('debug')('auth');\n\n//creates new debug instance with extended namespace\nconst logSign = log.extend('sign');\nconst logLogin = log.extend('login');\n\nlog('hello'); // auth hello\nlogSign('hello'); //auth:sign hello\nlogLogin('hello'); //auth:login hello\n```\n\n----------------------------------------\n\nTITLE: Using debug for Module Logging in Node.js JavaScript\nDESCRIPTION: Demonstrates integrating 'debug' for per-module logging in a Node.js application. Requires installation of the 'debug' package. The example shows how to create a namespaced logger, log various application events, and integrate with HTTP server code. Parameters include the module name (passed to require('debug')) and HTTP request/response objects. Outputs logs based on the DEBUG environment variable. Limitations: Only logs when DEBUG is appropriately set.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\n----------------------------------------\n\nTITLE: Formatting with Function Arguments in sprintf.js (JavaScript)\nDESCRIPTION: Demonstrates dynamic value computation in sprintf.js by passing functions as arguments, which are invoked (with no arguments) during formatting. The sprintf function evaluates each function argument at runtime, inserting their return values into the format string. Dependencies may include built-in JavaScript APIs like Date.now or user-supplied anonymous functions. The output is the format string with real-time or computed values substituted in.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf(\"Current timestamp: %d\", Date.now) // Current timestamp: 1398005382890\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf(\"Current date and time: %s\", function() { return new Date().toString() })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Original Position using SourceMapConsumer in JavaScript\nDESCRIPTION: Demonstrates the `originalPositionFor` method of `SourceMapConsumer`. This method takes an object with `line` (1-based) and `column` (0-based) properties representing a position in the generated code, and optionally a `bias`. It returns an object containing the corresponding `source` file, `line` (1-based), `column` (0-based), and `name` from the original source, or null values if no mapping is found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsumer.originalPositionFor({ line: 2, column: 10 })\n// { source: 'foo.coffee',\n//   line: 2,\n//   column: 2,\n//   name: null }\n\nconsumer.originalPositionFor({ line: 99999999999999999, column: 999999999999999 })\n// { source: null,\n//   line: null,\n//   column: null,\n//   name: null }\n```\n\n----------------------------------------\n\nTITLE: Excluding Patterns with `ignore` Option in Micromatch (JavaScript)\nDESCRIPTION: Demonstrates using the `ignore` option with `micromatch.matcher` to create a matching function that excludes specified patterns. In this example, any string starting with 'f' (`f*`) is ignored by the matcher.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst isMatch = micromatch.matcher('*', { ignore: 'f*' });\nconsole.log(isMatch('foo')) //=> false\nconsole.log(isMatch('bar')) //=> true\nconsole.log(isMatch('baz')) //=> true\n```\n\n----------------------------------------\n\nTITLE: Enabling debug Namespaces in the Browser - JavaScript\nDESCRIPTION: Enables all debug logs matching 'worker:*' namespaces in the browser by setting localStorage.debug. Shows creation and usage of multiple debug loggers with timers, requiring the debug module to be loaded in the global scope. Input is periodic triggers; output is debug logs in the browser console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.debug = 'worker:*'\n```\n\nLANGUAGE: javascript\nCODE:\n```\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n----------------------------------------\n\nTITLE: Installing @tsconfig/node16 using npm and yarn - Shell\nDESCRIPTION: This snippet demonstrates how to install the @tsconfig/node16 package as a development dependency using popular Node.js package managers npm and yarn. It allows TypeScript projects to easily extend recommended settings for Node 16. No prior installation is required before running these commands; the user should run one command or the other depending on their package manager. Outputs will be package manifest updates and addition of the config package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node16/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @tsconfig/node16\nyarn add --dev @tsconfig/node16\n```\n\n----------------------------------------\n\nTITLE: Disallowing Import Type of Type Specifier - Babylon - JavaScript\nDESCRIPTION: This snippet shows an import statement where 'type' is used as both the kind and the imported identifier, which is now explicitly forbidden in the Babylon parser for Flow import type declarations. When using 'import type', you cannot specify '{ type a }'. Requires a Babylon parser that supports Flow syntax and this compliance check. Input is an import type statement with a nested type, and the output is a thrown parser error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { type a } from \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Ignoring the Same Line from Coverage via Inline Comment in Node.js\nDESCRIPTION: Demonstrates in-line usage of the `/* v8 ignore next */` comment to ignore part of an assignment statement from test coverage. This example shows how to exempt just the ternary branch assignment. No dependencies are required beyond Node.js, and the ignore marker must be on the same line as the code to be excluded.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-to-istanbul/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst myVariable = 99\\nconst os = process.platform === 'darwin' ? 'OSXy' /* v8 ignore next */ : 'Windowsy' \n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON5 Feature Syntax in JavaScript\nDESCRIPTION: This snippet showcases a 'kitchen-sink' example of the JSON5 format, illustrating support for comments, trailing commas, single/unquoted keys, single/double quotes, escape characters, hexadecimal, and special number syntax. Particular aspects like line continuations and array/object trailing commas are demonstrated, highlighting differences from standard JSON. Intended for configuration or documentation purposes, not as executable JavaScript. Requires a parser or environment supporting JSON5.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  // comments\n  unquoted: 'and you can quote me on that',\n  singleQuotes: 'I can use \"double quotes\" here',\n  lineBreaks: \"Look, Mom! \\\\nNo \\\\n's!\",\n  hexadecimal: 0xdecaf,\n  leadingDecimalPoint: .8675309, andTrailing: 8675309.,\n  positiveSign: +1,\n  trailingComma: 'in objects', andIn: ['arrays',],\n  \"backwardsCompatible\": \"with JSON\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing sprintf and vsprintf for Node.js (JavaScript)\nDESCRIPTION: Shows how to import the sprintf and vsprintf functions from the sprintf-js package in a Node.js environment. Requires that the sprintf-js module is installed. The imported functions are then available for string formatting within the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprintf = require(\"sprintf-js\").sprintf,\n    vsprintf = require(\"sprintf-js\").vsprintf\n```\n\n----------------------------------------\n\nTITLE: Installing node-fetch via npm - Shell\nDESCRIPTION: Shows how to install the node-fetch package from npm for use in Node.js projects. This is the prerequisite command for fetching HTTP resources with node-fetch in both ESM and CommonJS environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install node-fetch\n```\n\n----------------------------------------\n\nTITLE: Using the camelcase Function for String Conversion (JavaScript)\nDESCRIPTION: Shows various examples of using the `camelcase` function imported from the 'camelcase' module. It converts strings with different separators (dashes, underscores), handles initial capitalization, Unicode characters, and uses options like `pascalCase` and `preserveConsecutiveUppercase`. It also demonstrates converting command-line arguments and arrays of strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/node_modules/camelcase/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst camelCase = require('camelcase');\n\ncamelCase('foo-bar');\n//=> 'fooBar'\n\ncamelCase('foo_bar');\n//=> 'fooBar'\n\ncamelCase('Foo-Bar');\n//=> 'fooBar'\n\ncamelCase('розовый_пушистый_единорог');\n//=> 'розовыйПушистыйЕдинорог'\n\ncamelCase('Foo-Bar', {pascalCase: true});\n//=> 'FooBar'\n\ncamelCase('--foo.bar', {pascalCase: false});\n//=> 'fooBar'\n\ncamelCase('Foo-BAR', {preserveConsecutiveUppercase: true});\n//=> 'fooBAR'\n\ncamelCase('fooBAR', {pascalCase: true, preserveConsecutiveUppercase: true}));\n//=> 'FooBAR'\n\ncamelCase('foo bar');\n//=> 'fooBar'\n\nconsole.log(process.argv[3]);\n//=> '--foo-bar'\ncamelCase(process.argv[3]);\n//=> 'fooBar'\n\ncamelCase(['foo', 'bar']);\n//=> 'fooBar'\n\ncamelCase(['__foo__', '--bar'], {pascalCase: true});\n//=> 'FooBar'\n\ncamelCase(['foo', 'BAR'], {pascalCase: true, preserveConsecutiveUppercase: true})\n//=> 'FooBAR'\n\ncamelCase('lorem-ipsum', {locale: 'en-US'});\n//=> 'loremIpsum'\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Game Card Data Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for a single card object used within the Memory Game mini-game, part of the Break Timer system. Each card object contains an `id`, a `term` and `definition` for matching, state flags `matched` and `flipped` to track game progress, and a `category` string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Card {\n  id: number;\n  term: string;\n  definition: string;\n  matched: boolean;\n  flipped: boolean;\n  category: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Annotation Labels in jest-diff with Options Object in JavaScript\nDESCRIPTION: Shows how to override default annotation labels in jest-diff by providing a custom options object with aAnnotation and bAnnotation properties. The code prepares an options object that replaces default labels as used in manual code modification diff comparisons. This approach does not require additional dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\\n  aAnnotation: 'Original',\\n  bAnnotation: 'Modified',\\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware Function in Express.js\nDESCRIPTION: This snippet shows the standard way to apply a middleware function (`fn`) to the Express application (`app`). This function will be executed for every incoming request. Version 4.6.0 mentions speed improvements for this standard usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(fn)\n```\n\n----------------------------------------\n\nTITLE: Installing emoji-regex via npm\nDESCRIPTION: This command installs the `emoji-regex` package using the Node Package Manager (npm). This makes the package available for use in Node.js projects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emoji-regex/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install emoji-regex\n```\n\n----------------------------------------\n\nTITLE: Installing resolve.exports with npm (Shell)\nDESCRIPTION: This shell snippet shows how to install the resolve.exports library using npm. Installing the package adds the dependency to your project's node_modules and makes the library available for import and use in a JavaScript/TypeScript codebase. Requires Node.js and npm to be installed and configured.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve.exports/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install resolve.exports\n```\n\n----------------------------------------\n\nTITLE: Capturing Custom Events with PostHog in React\nDESCRIPTION: This JavaScript snippet demonstrates how to send a custom event to the PostHog analytics platform from a React application. It's typically called when a specific user action occurs in the UI, like completing a quiz. The 'capture' method sends the event name ('Completed Quiz') along with relevant properties (like score and time spent) for later analysis of user behavior and feature usage. Requires the PostHog SDK to be initialized in the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742626139423.txt#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nposthog.capture('Completed Quiz', {score: 80, time: 120})\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Simulated Animation Frame with FakeTimers - JavaScript\nDESCRIPTION: Cancels a callback previously scheduled by requestAnimationFrame via 'clock.cancelAnimationFrame'. Takes an ID returned by requestAnimationFrame as input. Prevents the scheduled frame callback from firing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclock.cancelAnimationFrame(id)\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Jest Tests with Arrays using each.test - JavaScript\nDESCRIPTION: Shows use of jest-each to run a single test logic across multiple parameter sets using arrays. For each array, the test will be executed with the supplied parameters injected positionally. Requires 'jest-each' and works within a Jest test environment. The test name can use printf-style formatting for dynamic titles. Expected inputs are an array of arrays (or objects), and outputs are multiple Jest tests run with those parameters.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).test('returns the result of adding %d to %d', (a, b, expected) => {\\n  expect(a + b).toBe(expected);\\n});\n```\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  {a: 1, b: 1, expected: 2},\\n  {a: 1, b: 2, expected: 3},\\n  {a: 2, b: 1, expected: 3},\\n]).test('returns the result of adding $a to $b', ({a, b, expected}) => {\\n  expect(a + b).toBe(expected);\\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting String Types with type-detect (JavaScript)\nDESCRIPTION: Illustrates detecting primitive string types and `String` wrapper objects using `type-detect`. It uses `assert` to verify `type()` returns 'string' for primitives and 'String' (capitalized) for the wrapper object. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type('hello world') === 'string');\nassert(type(new String('hello')) === 'String'); // note - the object version has a capital S\n```\n\n----------------------------------------\n\nTITLE: Comparing kleur v3 Syntax with Previous Versions (JavaScript)\nDESCRIPTION: Illustrates the syntax change introduced in kleur v3.0. The older Chalk-style syntax using magical getters (`c.red.bold`) was replaced with explicit function calls for each style (`c.red().bold()`). This snippet contrasts the old and new ways to achieve the same formatting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/kleur/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Old:\nc.red.bold.underline('old');\n\n// New:\nc.red().bold().underline('new');\n```\n\n----------------------------------------\n\nTITLE: Accessing Status Info via Direct Index (Deprecated JavaScript)\nDESCRIPTION: Represents the deprecated way of accessing status code information in versions prior to 2.0.0. `status[code]` likely retrieved the message for a numeric code, and `status[msg]` retrieved the code for a message string. These export patterns were removed in v2.0.0 in favor of property-based access.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatus[code]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatus[msg]\n```\n\n----------------------------------------\n\nTITLE: Installing body-parser with npm (Shell)\nDESCRIPTION: Demonstrates the npm command to install the body-parser package as a dependency in your Node.js project. Requires Node.js and npm to be set up on your machine. Running this command will add body-parser to your node_modules and package.json, making it available for require() statements. No input parameters or outputs are expected; use this in your terminal before using the library programmatically.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/body-parser/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install body-parser\n\n```\n\n----------------------------------------\n\nTITLE: Importing the content-disposition module in Node.js\nDESCRIPTION: This JavaScript code imports the `content-disposition` module using the `require` function in a Node.js environment. The imported functionality is assigned to the `contentDisposition` variable for subsequent use. This requires the `content-disposition` package to be previously installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-disposition/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar contentDisposition = require('content-disposition')\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deprecating Function Calls based on Arguments (JavaScript)\nDESCRIPTION: Illustrates calling the `deprecate(message)` function directly within another function to issue warnings based on specific conditions, such as the number or type of arguments passed. This allows for fine-grained deprecation logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing make-dir with npm - Shell\nDESCRIPTION: Shows how to install the make-dir package with npm on the command line. This step is required as a prerequisite before using make-dir in a project. The command should be run in the terminal, and npm must be available on the system.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install make-dir\n```\n\n----------------------------------------\n\nTITLE: Fixing Light Mode Selection Box in React Settings Page (JSX/React)\nDESCRIPTION: This JSX snippet corrects the light mode selection box so it displays with correct background and border styles in both light and dark themes. It removes the redundant dark:bg-white class, ensuring the preview accurately reflects the light mode configuration regardless of global dark mode. This change requires React state handling for appearance and is used in a page such as settings.tsx. Inputs: current appearance state; Output: visually accurate light mode preview box.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div \n  className={`border ${appearance.theme === \"light\" ? 'border-primary ring-2 ring-primary/30' : 'border-slate-200 dark:border-[var(--dark-border)]'} rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white`}\n  onClick={() => setAppearance(prev => ({ ...prev, theme: \"light\" }))}\n>\n  {/* Light mode preview content */}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ETag Generation Function in Express.js\nDESCRIPTION: Demonstrates setting a custom ETag generation function for an Express application using `app.set('etag', function)`. The provided function takes the response body and encoding to compute a custom ETag string. Mentioned in version 4.4.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('etag', function(body, encoding){ return '\"etag\"' })\n```\n\n----------------------------------------\n\nTITLE: Parsing a Content-Type Header String with contentType.parse - JavaScript\nDESCRIPTION: This code parses a Content-Type header string (e.g., from user input or HTTP headers) into an object containing a lower-cased 'type' and 'parameters' properties. Requires the 'content-type' module and Node.js. Throws a TypeError if the input is missing or invalid; expects a valid Content-Type string as input, returns a structured object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-type/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = contentType.parse('image/svg+xml; charset=utf-8')\n```\n\n----------------------------------------\n\nTITLE: Generating Explainer Videos with Runway Gen-4 / Animate AI\nDESCRIPTION: Uses AI video generation tools like Runway Gen-4 or Animate AI to create experimental 2D/2.5D animated explainer videos. This involves feeding a script to the AI, potentially requiring manual refinement for high quality.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_3\n\nLANGUAGE: AI Tool\nCODE:\n```\nUse Runway Gen-4 or Animate AI\nInput: Script detailing the lesson content.\nProcess: AI generates 2D/2.5D animation based on the script, depicting a narrator and dynamic visuals (e.g., digital drawing board).\nOutput: Animated explainer video (may require post-production).\n```\n\n----------------------------------------\n\nTITLE: Installing require-directory via npm (Bash)\nDESCRIPTION: This command installs the `require-directory` package globally or locally within a Node.js project using the Node Package Manager (npm). Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install require-directory\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Rules for Toggling Memphis Visual Style\nDESCRIPTION: Provides CSS rules within `visual-styles.css` to implement a toggleable 'Memphis' visual style. It uses a `.memphis-style.enabled` class combination to control the display of `.decorator` elements and defines a sample `.memphis-pattern-1` using CSS gradients and custom properties (`--color-secondary`). This CSS is intended to be activated dynamically via JavaScript.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Memphis Design Style CSS */\n.memphis-style .decorator {\n  display: none;\n}\n.memphis-style.enabled .decorator {\n  display: block;\n}\n\n/* Add your patterns, shapes, geometric backgrounds, etc. */\n.memphis-pattern-1 {\n  background-image: radial-gradient(circle at 2px 2px, var(--color-secondary) 1px, transparent 0);\n  background-size: 20px 20px;\n  /* Additional styling ... */\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Demo with Source Map Support - TypeScript\nDESCRIPTION: TypeScript code that demonstrates enabling source-map-support and intentionally triggering an error. The demo shows how stack traces map to the original TypeScript source, aiding in debugging transpiled code. Relies on both source-map-support and correct TypeScript sourcemap generation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function require(name: string);\nrequire('source-map-support').install();\nclass Foo {\n  constructor() { this.bar(); }\n  bar() { throw new Error('this is a demo'); }\n}\nnew Foo();\n```\n\n----------------------------------------\n\nTITLE: Parsing Arguments and Conditional Logic with Yargs - JavaScript\nDESCRIPTION: Demonstrates a simple Node.js command-line interface using Yargs to access arguments and control program flow based on user input. Requires the 'yargs' package and Node.js runtime. The key parameters are 'ships' and 'distance', with logic executed depending on their values. Inputs are parsed arguments; outputs are messages logged to the console. The script expects to be run from the command line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\\nconst yargs = require('yargs/yargs')\\nconst { hideBin } = require('yargs/helpers')\\nconst argv = yargs(hideBin(process.argv)).argv\\n\\nif (argv.ships > 3 && argv.distance < 53.5) {\\n  console.log('Plunder more riffiwobbles!')\\n} else {\\n  console.log('Retreat from the xupptumblers!')\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Advancing to the Next Timer with Next Methods (Sync and Async) - JavaScript\nDESCRIPTION: Advances fake time to the next scheduled timer using 'clock.next' or 'clock.nextAsync'. No parameters required. Useful for stepping through timer-triggered events one by one. Async version integrates with promises to allow microtasks between steps.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nclock.next() / await clock.nextAsync()\n```\n\n----------------------------------------\n\nTITLE: Consuming Raw Request Body as a Promise with raw-body in TypeScript\nDESCRIPTION: Illustrates use of raw-body in a TypeScript-based http server, importing modules with TypeScript's ES syntax. Reads the raw request body as a Promise, assigns the response code based on success or error, and returns a simple message. Ensure that @types/node is installed for type support, and that raw-body is available. The server listens on port 3000.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n```ts\\nimport * as getRawBody from 'raw-body';\\nimport * as http from 'http';\\n\\nconst server = http.createServer((req, res) => {\\n  getRawBody(req)\\n  .then((buf) => {\\n    res.statusCode = 200;\\n    res.end(buf.length + ' bytes submitted');\\n  })\\n  .catch((err) => {\\n    res.statusCode = err.statusCode;\\n    res.end(err.message);\\n  });\\n});\\n\\nserver.listen(3000);\\n```\n```\n\n----------------------------------------\n\nTITLE: Using semver library functions in Node.js (JavaScript)\nDESCRIPTION: Demonstrates importing and using various functions from the `semver` library in a Node.js environment, such as validating versions (`valid`), cleaning version strings (`clean`), checking if a version satisfies a range (`satisfies`), comparing versions (`gt`, `lt`), finding minimum versions (`minVersion`), and coercing strings into valid SemVer formats (`coerce`). Requires the `semver` package to be installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\nsemver.minVersion('>=1.0.0') // '1.0.0'\nsemver.valid(semver.coerce('v2')) // '2.0.0'\nsemver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties for UI Consistency (CSS)\nDESCRIPTION: Documents (in commentary) the intended use of CSS variables such as var(--color-primary) in your component CSS, so buttons, text, and backgrounds inherit colors defined in the active theme. Assumes variables have been set via JS/TS as in previous snippets.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n/* Use those CSS variables consistently (var(--color-primary), etc.). */\n```\n\n----------------------------------------\n\nTITLE: Using safe-buffer as a Buffer Replacement in JavaScript\nDESCRIPTION: Demonstrates how to require `safe-buffer` and use its exported `Buffer` object as a drop-in replacement for the native Node.js Buffer. It shows that existing code using the legacy `new Buffer()` constructor continues to work, while also allowing the use of the newer, safer static methods like `Buffer.from()`, `Buffer.alloc()`, and `Buffer.allocUnsafe()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Buffer = require('safe-buffer').Buffer\n\n// Existing buffer code will continue to work without issues:\n\nnew Buffer('hey', 'utf8')\nnew Buffer([1, 2, 3], 'utf8')\nnew Buffer(obj)\nnew Buffer(16) // create an uninitialized buffer (potentially unsafe)\n\n// But you can use these new explicit APIs to make clear what you want:\n\nBuffer.from('hey', 'utf8') // convert from many types to a Buffer\nBuffer.alloc(16) // create a zero-filled buffer (safe)\nBuffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)\n```\n\n----------------------------------------\n\nTITLE: Declaring BreakTimer Component Props in React (TSX)\nDESCRIPTION: Defines the `BreakTimer` React component, part of the system to encourage study breaks. It accepts an `onClose` callback function and an optional `duration` prop (defaulting to 300 seconds). The implementation details are omitted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/components/break-timer.tsx\n\nexport default function BreakTimer({ onClose, duration = 300 }: BreakTimerProps) {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Subscription Tier Access in Backend (Node.js/Express)\nDESCRIPTION: Illustrates backend logic, likely within an Express.js route handler (e.g., /api/generateDetailedReport), to check if the authenticated user's plan attribute is 'Pro'. If the user's plan is not 'Pro', it denies access to the requested resource or feature by returning a 403 Forbidden status and a JSON error message. This server-side check is crucial for enforcing feature gating based on subscription tiers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nif(user.plan !== 'Pro') { return res.status(403).json({error: \"Upgrade required\"}); }\n```\n\n----------------------------------------\n\nTITLE: Running Application Tests - Bash\nDESCRIPTION: Executes automated tests for the application using npm test. Ensures new changes do not break existing functionality and validates code correctness. May include backend, frontend, and integration tests.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using Preferred res.json(status, obj) Signature in Express.js\nDESCRIPTION: Shows the preferred signature `res.json(status, obj)` for sending a JSON response with a specific status code, as recommended from Express 4.2.0 onwards. This order (status first, object second) replaced the deprecated signature.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nres.json(status, obj)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Glob Class in Node.js JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the \"Glob\" class from the \"glob\" module for creating a glob search object instance. Instantiating the object with a pattern, options, and optional callback begins the asynchronous filesystem traversal for matching files, emitting events as results are found. Requires the \"glob\" module. The instance provides methods and event hooks for customized control beyond the simple function API.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/glob/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Glob = require(\"glob\").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Backend Feature Gating by User Plan in Node.js/Express\nDESCRIPTION: This JavaScript snippet, intended for a Node.js backend using the Express framework, shows how to restrict API endpoint access based on the user's subscription plan. It checks if the 'user.plan' property is not 'Pro' and returns a 403 Forbidden status with a JSON error message if access is denied. Assumes 'user' object (containing the plan) and Express 'res' object are available in the context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nif(user.plan !== 'Pro') { return res.status(403).json({error: \"Upgrade required\"}); }\n```\n\n----------------------------------------\n\nTITLE: Configuring typeRoots in tsconfig.json for Typings - JSONC\nDESCRIPTION: This snippet shows how to define the typeRoots compiler option in your tsconfig.json file to specify directories for TypeScript global type definitions. It requires that typings are structured as type packages and that directories such as ./node_modules/@types and ./typings are used to resolve type definitions. This helps TypeScript include additional type definitions during the compilation process, resolving type errors related to missing global types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_24\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"compilerOptions\": {\\n    \"typeRoots\" : [\"./node_modules/@types\", \"./typings\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Map Support using ES6 Import (Register)\nDESCRIPTION: Shows how to enable source map support by directly importing the `register` module in an ES6 environment. This avoids the need for an explicit `install()` call.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@cspotcode/source-map-support/register'\n```\n\n----------------------------------------\n\nTITLE: Parsing JavaScript Code Using Acorn - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates loading the Acorn parser using require, and parsing a simple JavaScript expression string into an ESTree abstract syntax tree using acorn.parse. The key parameter \\\"ecmaVersion\\\" specifies the version of ECMAScript syntax features to support (here 2020). The input is a JavaScript expression as a string, and the output is a structured AST representing the code. Acorn must be installed in the project (via npm install acorn).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet acorn = require(\"acorn\");\nconsole.log(acorn.parse(\"1 + 1\", {ecmaVersion: 2020}));\n\n```\n\n----------------------------------------\n\nTITLE: Automated Performance Testing for Animation Engine (TypeScript)\nDESCRIPTION: This test uses Vitest to benchmark the performance of the playAnimation function, ensuring that the animation logic executes quickly enough for a good user experience. The test mocks the DOM and confetti global, runs the animation ten times, and checks the average execution time. Dependencies include Vitest, perf_hooks, and stubs or mocks for browser APIs. Inputs are animation parameters; outputs are Vitest assertions. Limitations: To run outside a browser, extensive mocking is necessary.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, test, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { performance } from 'perf_hooks';\nimport { playAnimation } from '../client/src/lib/animation-engine';\nimport { applyTheme } from '../client/src/lib/theme-controller';\n\nconst originalDocument = global.document;\nbeforeEach(() => {\n  global.document = {\n    documentElement: { style: { setProperty: vi.fn() }, classList: { add: vi.fn(), remove: vi.fn() } },\n    createElement: vi.fn(() => ({ style: {}, classList: { add: vi.fn(), remove: vi.fn() } })),\n    body: { appendChild: vi.fn(), removeChild: vi.fn(), classList: { add: vi.fn(), remove: vi.fn() } },\n  } as any;\n  global.window = { matchMedia: vi.fn(() => ({ matches: false, addEventListener: vi.fn(), removeEventListener: vi.fn() })) } as any;\n});\nafterEach(() => { global.document = originalDocument; });\ndescribe('Animation Engine Performance', () => {\n  test('playAnimation executes within 50ms on average', () => {\n    global.confetti = vi.fn();\n    const start = performance.now();\n    for (let i = 0; i < 10; i++) {\n      playAnimation({ type: 'confetti', particleCount: 100 });\n    }\n    const end = performance.now();\n    const avgTime = (end - start) / 10;\n    expect(avgTime).toBeLessThan(50);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations During Deployment - Bash\nDESCRIPTION: This Bash snippet shows how to run database migrations as part of your deployment workflow using an npm script (db:migrate). It should be executed after deploying code and before application start to ensure your PostgreSQL schema is up to date. Requires migration tooling configured in package.json scripts (e.g., using TypeORM, Sequelize, or a similar migration library).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# Run migrations during deployment\nnpm run db:migrate\n```\n\n----------------------------------------\n\nTITLE: Environment File Setup - Bash\nDESCRIPTION: Demonstrates copying the example environment file to a working .env file for configuring project secrets and endpoints. This step is required before starting the application so that proper credentials and URLs are provided. No output except for file creation. Ensure you edit .env with valid secrets after copying.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the `walker` Library in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `walker` Node.js library to traverse a directory (`/etc/`). It shows how to filter out specific subdirectories (like `/etc/pam.d`) using `filterDir` and how to subscribe to various events (`entry`, `dir`, `file`, `symlink`, `blockDevice`, `fifo`, `socket`, `characterDevice`) emitted during the traversal using the `.on()` method. Error handling (`error` event) and completion notification (`end` event) are also shown. Requires the `walker` library installed in a Node.js environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/walker/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nWalker('/etc/')\n  .filterDir(function(dir, stat) {\n    if (dir === '/etc/pam.d') {\n      console.warn('Skipping /etc/pam.d and children')\n      return false\n    }\n    return true\n  })\n  .on('entry', function(entry, stat) {\n    console.log('Got entry: ' + entry)\n  })\n  .on('dir', function(dir, stat) {\n    console.log('Got directory: ' + dir)\n  })\n  .on('file', function(file, stat) {\n    console.log('Got file: ' + file)\n  })\n  .on('symlink', function(symlink, stat) {\n    console.log('Got symlink: ' + symlink)\n  })\n  .on('blockDevice', function(blockDevice, stat) {\n    console.log('Got blockDevice: ' + blockDevice)\n  })\n  .on('fifo', function(fifo, stat) {\n    console.log('Got fifo: ' + fifo)\n  })\n  .on('socket', function(socket, stat) {\n    console.log('Got socket: ' + socket)\n  })\n  .on('characterDevice', function(characterDevice, stat) {\n    console.log('Got characterDevice: ' + characterDevice)\n  })\n  .on('error', function(er, entry, stat) {\n    console.log('Got error ' + er + ' on entry ' + entry)\n  })\n  .on('end', function() {\n    console.log('All files traversed.')\n  })\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Optional Chaining Assignment Example (TypeScript)\nDESCRIPTION: Provides an assignment using the optional chaining operator (?.) in TypeScript, highlighting syntax that may require downleveling for older Node versions. The variable 'bar' will be assigned the value of 'foo.bar' if 'foo' is not undefined; otherwise, the assignment yields undefined.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst bar: string | undefined = foo?.bar;\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Type Definitions via npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install the TypeScript type definitions for Node.js (`@types/node`) as a project dependency. The `--save` flag adds the package to the `dependencies` section of the `package.json` file, although for type definitions, `--save-dev` is typically used.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/node/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/node\n```\n\n----------------------------------------\n\nTITLE: Manual Safe Migration from new Buffer(notNumber) - Node.js - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to safely handle creating buffers from non-number inputs using feature detection and runtime type checks. It creates a buffer with Buffer.from() when available and otherwise falls back to new Buffer(), while explicitly rejecting number arguments to prevent security issues. The encoding parameter is optional and determines how input data is interpreted. The solution is self-contained and requires only standard Node.js APIs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safer-buffer/Porting-Buffer.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar buf;\\nif (Buffer.from && Buffer.from !== Uint8Array.from) {\\n  buf = Buffer.from(notNumber, encoding);\\n} else {\\n  if (typeof notNumber === 'number')\\n    throw new Error('The \"size\" argument must be of type number.');\\n  buf = new Buffer(notNumber, encoding);\\n}\n```\n\n----------------------------------------\n\nTITLE: Running ts-node with ESM Support (Shell)\nDESCRIPTION: Shows possible shell commands for running TypeScript with ts-node using ESM support. The commands either pass the --esm flag, use the ts-node-esm binary, or rely on tsconfig.json settings. No arguments beyond the script file are necessary, provided configuration is already set.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# pass the flag\nts-node --esm\n# Use the convenience binary\nts-node-esm\n# or add \"esm\": true to your tsconfig.json to make it automatic\nts-node\n```\n\n----------------------------------------\n\nTITLE: Sending Roleplay Response or Error in Express TypeScript\nDESCRIPTION: This snippet shows the final part of an Express route handler, likely for `/api/ai/generate-roleplay`. It sends a generated `roleplay` object as a JSON response upon success using `res.json()`. If an error occurs during the preceding `try` block, it logs the error to the console and sends a 500 status code with a JSON error message `{ error: \"Failed to generate roleplay\" }` using `res.status().json()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n         res.json(roleplay);\n       } catch (error) {\n         console.error(\"Error generating roleplay:\", error);\n         res.status(500).json({ error: \"Failed to generate roleplay\" });\n       }\n     });\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using TypeBox Schemas for Type and Runtime Validation - TypeScript\nDESCRIPTION: Shows a full workflow: expressing a TypeScript type as a TypeBox schema, inferring the type, and performing runtime validation. Declares a type T, creates a JSON schema object with 'Type.Object', then checks values at runtime using TypeBox's 'Value.Check'. Requires TypeBox and the 'value' submodule. Inputs are JavaScript objects; outputs are boolean validation results and type inference.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Static, Type } from '@sinclair/typebox'\n\n//--------------------------------------------------------------------------------------------\n//\n// Let's say you have the following type ...\n//\n//--------------------------------------------------------------------------------------------\n\ntype T = {\n  id: string,\n  name: string,\n  timestamp: number\n}\n\n//--------------------------------------------------------------------------------------------\n//\n// ... you can express this type in the following way.\n//\n//--------------------------------------------------------------------------------------------\n\nconst T = Type.Object({                              // const T = {\n  id: Type.String(),                                 //   type: 'object',\n  name: Type.String(),                               //   properties: { \n  timestamp: Type.Integer()                          //     id: { \n})                                                   //       type: 'string' \n                                                     //     },\n                                                     //     name: { \n                                                     //       type: 'string' \n                                                     //     },\n                                                     //     timestamp: { \n                                                     //       type: 'integer' \n                                                     //     }\n                                                     //   }, \n                                                     //   required: [\n                                                     //     'id',\n                                                     //     'name',\n                                                     //     'timestamp'\n                                                     //   ]\n                                                     // } \n\n//--------------------------------------------------------------------------------------------\n//\n// ... then infer back to the original static type this way.\n//\n//--------------------------------------------------------------------------------------------\n\ntype T = Static<typeof T>                            // type T = {\n                                                     //   id: string,\n                                                     //   name: string,\n                                                     //   timestamp: number\n                                                     // }\n\n//--------------------------------------------------------------------------------------------\n//\n// ... then use the type both as JSON schema and as a TypeScript type.\n//\n//--------------------------------------------------------------------------------------------\n\nimport { Value } from '@sinclair/typebox/value'\n\nfunction receive(value: T) {                         // ... as a Static Type\n\n  if(Value.Check(T, value)) {                        // ... as a JSON Schema\n  \n    // ok...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading dotenv using Node.js -r flag (Bash)\nDESCRIPTION: Command showing how to preload the `dotenv` module using the Node.js `-r` (or `--require`) command-line option. This executes `require('dotenv').config()` before the main script `your_script.js` runs, eliminating the need to explicitly require and configure dotenv within the application code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ node -r dotenv/config your_script.js\n```\n\n----------------------------------------\n\nTITLE: Performing an Advanced Lucene Search on Azure Search Documents in JavaScript\nDESCRIPTION: This snippet demonstrates how to perform an advanced search using the full Lucene query syntax in Azure Search with the `@azure/search-documents` library. A `SearchClient` is initialized, and the `search` method is called with a Lucene query string ('Category:budget AND \"recently renovated\"^3'). The `queryType` option is set to `\"full\"` and `searchMode` to `\"all\"` to enable Lucene syntax and require all terms to match. Results are iterated asynchronously.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const searchResults = await client.search('Category:budget AND \"recently renovated\"^3', {\n    queryType: \"full\",\n    searchMode: \"all\",\n  });\n  for await (const result of searchResults.results) {\n    console.log(result);\n  }\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing CLI Arguments with Argparse - JavaScript\nDESCRIPTION: This snippet illustrates how to create a CLI tool in Node.js using the 'argparse' library. It demonstrates defining arguments with descriptions, parsing command-line input, and outputting the parsed arguments as an object. Dependencies include Node.js and the 'argparse' library (imported from '../lib/argparse'). Parameters such as 'addHelp' and 'version' control help/usage behavior and version display, while 'addArgument' is used to declare each CLI option. Output is an object mapping argument names to provided values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/argparse/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n#!/usr/bin/env node\\n'use strict';\\n\\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\\nvar parser = new ArgumentParser({\\n  version: '0.0.1',\\n  addHelp:true,\\n  description: 'Argparse example'\\n});\\nparser.addArgument(\\n  [ '-f', '--foo' ],\\n  {\\n    help: 'foo bar'\\n  }\\n);\\nparser.addArgument(\\n  [ '-b', '--bar' ],\\n  {\\n    help: 'bar foo'\\n  }\\n);\\nparser.addArgument(\\n  '--baz',\\n  {\\n    help: 'baz bar'\\n  }\\n);\\nvar args = parser.parseArgs();\\nconsole.dir(args);\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for DECA Theme Colors - CSS\nDESCRIPTION: This CSS snippet defines the default color palette using custom properties for the root selector, allowing for consistent theming across the application. Each variable corresponds to a core color system key, including primary, secondary, accent, and various shades. These variables must be referenced throughout the CSS for theme consistency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742708040241.txt#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\\n  --color-primary: #06B6D4;\\n  --color-secondary: #67E8F9;\\n  --color-accent: #0E7490;\\n  --color-light: #ECFEFF;\\n  --color-medium: #CFFAFE;\\n  --color-dark: #0891B2;\\n  --color-contrast: #1F2937;\\n  --color-badge: #06B6D4;\\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Prompts Based on Previous Answers - Prompts Library - JavaScript\nDESCRIPTION: Demonstrates dynamic question logic in a prompt sequence by making a prompt conditional on the previous answer. Here, the 'topping' question appears only if the answer to the previous question matches 'pizza'. Useful for building adaptive conversational CLI interfaces; requires installed 'prompts'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst prompts = require('prompts');\n\nconst questions = [\n  {\n    type: 'text',\n    name: 'dish',\n    message: 'Do you like pizza?'\n  },\n  {\n    type: prev => prev == 'pizza' ? 'text' : null,\n    name: 'topping',\n    message: 'Name a topping'\n  }\n];\n\n(async () => {\n  const response = await prompts(questions);\n})();\n```\n\n----------------------------------------\n\nTITLE: Limiting Promise Concurrency with p-limit - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the p-limit package, create a concurrency limiter, and apply it to multiple async or promise-returning functions. The limit is set to 1, allowing only one function to execute at a time. The code executes three limited functions concurrently and logs their results, showcasing how to use the 'limit' wrapper for controlled execution. Key variables include the concurrency amount, the async functions, and the Promise.all aggregation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-locate/node_modules/p-limit/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pLimit = require('p-limit');\n\nconst limit = pLimit(1);\n\nconst input = [\n\tlimit(() => fetchSomething('foo')),\n\tlimit(() => fetchSomething('bar')),\n\tlimit(() => doSomething())\n];\n\n(async () => {\n\t// Only one promise is run at once\n\tconst result = await Promise.all(input);\n\tconsole.log(result);\n})();\n```\n\n----------------------------------------\n\nTITLE: Allocating a Non-Pooled, Uninitialized Buffer in JavaScript\nDESCRIPTION: Illustrates `Buffer.allocUnsafeSlow(size)`, which allocates a new, non-zero-filled Buffer similar to `allocUnsafe`, but explicitly prevents the allocation from being sliced from the internal Buffer pool. This is intended for specific scenarios where retaining small chunks from the pool for long durations might cause memory retention issues. It should be used cautiously after observing such problems.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () => {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Single or Multiple Events in Emittery - JavaScript\nDESCRIPTION: Illustrates subscribing to single and multiple event names, including different listener signatures, with Emittery. Shows that emitting an event matching multiple listeners results in each being called. Dependency: emittery, JavaScript runtime. Parameters: event name(s) (string or array), data (any). Outputs are log statements for each matching event.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\n\nemitter.on('🦄', data => {\n\tconsole.log(data);\n});\n\nemitter.on(['🦄', '🐶'], data => {\n\tconsole.log(data);\n});\n\nemitter.emit('🦄', '🌈'); // log => '🌈' x2\nemitter.emit('🐶', '🍖'); // log => '🍖'\n```\n\n----------------------------------------\n\nTITLE: Translating Strings Using y18n in JavaScript\nDESCRIPTION: This snippet shows how to perform a simple string translation using the y18n library in Node.js. It demonstrates initializing the library and translating a string with a placeholder, which is replaced by the provided argument. The code depends on the y18n package being installed, and will output the localized string to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/y18n/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst __ = require('y18n')().__;\n\nconsole.log(__('my awesome string %s', 'foo'));\n```\n\n----------------------------------------\n\nTITLE: Generating Regex Strings with the 'toRegex' Option (JavaScript)\nDESCRIPTION: Examples showing how to use the `toRegex: true` option in `fill-range` to generate regex-compatible source strings instead of arrays. Covers alphabetical ranges, alphabetical ranges with steps, numerical ranges, and numerical ranges with zero padding. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// alphabetical range\nconsole.log(fill('a', 'e', { toRegex: true })); //=> '[a-e]'\n// alphabetical with step\nconsole.log(fill('a', 'z', 3, { toRegex: true })); //=> 'a|d|g|j|m|p|s|v|y'\n// numerical range\nconsole.log(fill('1', '100', { toRegex: true })); //=> '[1-9]|[1-9][0-9]|100'\n// numerical range with zero padding\nconsole.log(fill('000001', '100000', { toRegex: true }));\n//=> '0{5}[1-9]|0{4}[1-9][0-9]|0{3}[1-9][0-9]{2}|0{2}[1-9][0-9]{3}|0[1-9][0-9]{4}|100000'\n```\n\n----------------------------------------\n\nTITLE: Checking Symbol Sham Support with has-symbols/shams in JavaScript\nDESCRIPTION: This snippet shows how to use the `has-symbols/shams` submodule to check if the JavaScript environment includes a Symbol sham (a polyfill-like implementation, such as `get-own-property-symbols` or `core-js`) that largely adheres to the ES6 specification. It requires the specific submodule `has-symbols/shams` and calls its exported function `hasSymbolsKinda()`, returning `true` if such a sham is detected.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/has-symbols/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar hasSymbolsKinda = require('has-symbols/shams');\nhasSymbolsKinda() === true; // if the environment has a Symbol sham that mostly follows the spec.\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple gensync Operations with gensync.race in JavaScript\nDESCRIPTION: Employs gensync.race to return as soon as one of the provided gensync-wrapped file loading operations completes, similar to Promise.race. This snippet is useful when any one successful result suffices. The input is an iterable of gensync-based tasks, the output is the result of the fastest operation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gensync/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst loadFiles = gensync(function* () {\n  return yield* gensync.race([\n    readFile(\"./one.js\"),\n    readFile(\"./two.js\"),\n    readFile(\"./three.js\"),\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Pattern Matching Using the Main Micromatch API in JavaScript\nDESCRIPTION: Demonstrates the primary usage of micromatch: importing the package, providing a list, and calling micromatch with a pattern. Shows output as an array of matches. Input parameters are arrays and glob patterns; dependencies include micromatch.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst mm = require('micromatch');\n// mm(list, patterns[, options]);\n\nconsole.log(mm(['a.js', 'a.txt'], ['*.js']));\n//=> [ 'a.js' ]\n```\n\n----------------------------------------\n\nTITLE: Disabling Proxy Trust in Express.js\nDESCRIPTION: Shows how to explicitly disable proxy trust in an Express application using `app.set('trust proxy', false)`. This is the default behavior. Mentioned in version 4.3.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', false)\n```\n\n----------------------------------------\n\nTITLE: Running deepmerge Tests with npm in shell\nDESCRIPTION: This shell command executes the test suite for deepmerge by calling 'npm test' in the terminal. It is used for verifying library integrity and should be run from the root of the deepmerge project with package.json present. Relies on any tests defined in the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Enabling Color Output for Debug Logs in Node.js Child Processes - JavaScript\nDESCRIPTION: Provides a method for ensuring colorized debug output in Node.js child processes by setting the DEBUG_COLORS environment variable to 1. Requires Node.js with IPC-enabled fork and 'debug' library. Demonstrates forking with custom environment variables and piping child stderr to the parent process. This solves the color output suppression when stdio is piped.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nworker = fork(WORKER_WRAP_PATH, [workerPath], {\n  stdio: [\n    /* stdin: */ 0,\n    /* stdout: */ 'pipe',\n    /* stderr: */ 'pipe',\n    'ipc',\n  ],\n  env: Object.assign({}, process.env, {\n    DEBUG_COLORS: 1 // without this settings, colors won't be shown\n  }),\n});\n\nworker.stderr.pipe(process.stderr, { end: false });\n```\n\n----------------------------------------\n\nTITLE: Defining the FileMatcher Function Type in TypeScript\nDESCRIPTION: Defines the TypeScript type alias `FileMatcher`. This type represents the function returned by `createFileMatcher`. The function accepts a single argument `filePath` (string) and returns either the `config` object from the `TsconfigResult` if the file path matches the tsconfig's rules (`include`, `exclude`, `files`), or `undefined` if it does not.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype FileMatcher = (filePath: string) => TsconfigResult['config'] | undefined\n```\n\n----------------------------------------\n\nTITLE: Listing Databases and Filtering - Bash\nDESCRIPTION: Lists all PostgreSQL databases and filters for any with 'decade_db' in their names. Uses psql to execute a meta-command and grep for the target database. Useful for confirming the presence of the correct database schema.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npsql -c \"\\l\" | grep decade_db\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm in Console\nDESCRIPTION: This command installs all dependencies listed in the package.json file for the current Node.js project directory using npm. It requires a valid package.json file to be present. No parameters are required. After running, the project's dependencies are downloaded and stored in node_modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using html-escaper Methods in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the html-escaper npm package by requiring it and accessing its 'escape' and 'unescape' methods in Node.js. The snippet shows how to escape user-provided strings and decode already-escaped HTML strings safely. Requires the html-escaper package to be installed via npm. 'html.escape' takes a string and returns its HTML-escaped form; 'html.unescape' does the inverse. This pattern avoids manual replacements and improves both security and correctness.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/html-escaper/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar html = require('html-escaper');\n\n// two basic methods\nhtml.escape('string');\nhtml.unescape('escaped string');\n```\n\n----------------------------------------\n\nTITLE: Initializing React Frontend with Create React App (Shell)\nDESCRIPTION: This command uses `npx` to run Create React App, scaffolding a new React project named `decaide-frontend`. It's executed within the Replit environment or a local terminal to set up the initial structure for the frontend application codebase based on React.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app decaide-frontend\n```\n\n----------------------------------------\n\nTITLE: Checking for Request Body Existence with typeis.hasBody (JavaScript)\nDESCRIPTION: Shows how to use the `typeis.hasBody(req)` function to determine if a Node.js HTTP request has a body, regardless of its Content-Type. This is useful for deciding whether to read data from the request stream. It returns a boolean value.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-is/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeis.hasBody(req)) {\n  // read the body, since there is one\n\n  req.on('data', function (chunk) {\n    // ...\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SemVer Range Grammar using BNF\nDESCRIPTION: Provides a Backus-Naur Form (BNF) grammar definition for parsing semantic version ranges. It details the structure of range sets, logical OR operators, simple ranges, primitives (like <, >, =), partial versions, tilde/caret specifiers, and qualifiers (pre-release/build metadata). This grammar is intended to guide the implementation of SemVer range parsers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_6\n\nLANGUAGE: bnf\nCODE:\n```\nrange-set  ::= range ( logical-or range ) *\nlogical-or ::= ( ' ' ) * '||' ( ' ' ) *\nrange      ::= hyphen | simple ( ' ' simple ) * | ''\nhyphen     ::= partial ' - ' partial\nsimple     ::= primitive | partial | tilde | caret\nprimitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial\npartial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?\nxr         ::= 'x' | 'X' | '*' | nr\nnr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *\ntilde      ::= '~' partial\ncaret      ::= '^' partial\nqualifier  ::= ( '-' pre )? ( '+' build )?\npre        ::= parts\nbuild      ::= parts\nparts      ::= part ( '.' part ) *\npart       ::= nr | [-0-9A-Za-z]+\n```\n\n----------------------------------------\n\nTITLE: Formatting Bytes with Options using bytes.format - JavaScript\nDESCRIPTION: Illustrates the use of 'bytes.format' to format numeric byte values into human-readable strings with various options. Options include decimalPlaces, fixedDecimals, thousandsSeparator, unit, and unitSeparator, allowing customization of the formatted output. Key parameters are the numeric byte value and options object. Supports both default and custom formatting behaviors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bytes/Readme.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js\\nbytes.format(1024);\\n// output: '1KB'\\n\\nbytes.format(1000);\\n// output: '1000B'\\n\\nbytes.format(1000, {thousandsSeparator: ' '});\\n// output: '1 000B'\\n\\nbytes.format(1024 * 1.7, {decimalPlaces: 0});\\n// output: '2KB'\\n\\nbytes.format(1024, {unitSeparator: ' '});\\n// output: '1 KB'\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env File (INI)\nDESCRIPTION: Example `.env` file showing key-value pairs for environment variables. These variables will be loaded into `process.env` by the `dotenv` package when `config()` is called.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_1\n\nLANGUAGE: dosini\nCODE:\n```\nS3_BUCKET=\"YOURS3BUCKET\"\nSECRET_KEY=\"YOURSECRETKEYGOESHERE\"\n```\n\n----------------------------------------\n\nTITLE: Specifying CommonJS Type in package.json (JSONC)\nDESCRIPTION: Sets the 'type' field to 'commonjs' in package.json to ensure Node treats source files using CommonJS semantics. This configuration is required for projects targeting CommonJS modules. The field is optional as 'commonjs' is the default, but specifying it increases clarity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_13\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // This can be omitted; commonjs is the default\n  \"type\": \"commonjs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Iterator for Multiple Events in Emittery - JavaScript\nDESCRIPTION: Shows how to listen with an async iterator for multiple event names and consume events in sequence, with manual subscription control via .return(). Dependencies: emittery, async/await support, Node.js. Input: event names array; output: sequence of buffered event data for each specific event type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\nconst iterator = emitter.events(['🦄', '🦊']);\n\nemitter.emit('🦄', '🌈1'); // Buffered\nemitter.emit('🦊', '🌈2'); // Buffered\n\niterator\n\t.next()\n\t.then(({value, done}) => {\n\t\t// done === false\n\t\t// value === '🌈1'\n\t\treturn iterator.next();\n\t})\n\t.then(({value, done}) => {\n\t\t// done === false\n\t\t// value === '🌈2'\n\t\t// Revoke subscription\n\t\treturn iterator.return();\n\t})\n\t.then(({done}) => {\n\t\t// done === true\n\t});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default File Extension with mime.extension - JavaScript\nDESCRIPTION: This snippet demonstrates how to use 'mime.extension' to get the default file extension for a given MIME content-type. The function accepts a content-type string and returns the primary associated extension, such as 'bin' for 'application/octet-stream', or false if not found. It is dependent on the 'mime-types' module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-types/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmime.extension('application/octet-stream') // 'bin'\n```\n\n----------------------------------------\n\nTITLE: Defining SemVer Range Grammar using BNF\nDESCRIPTION: This snippet provides a formal Backus-Naur Form (BNF) grammar defining the syntax rules for parsing semantic versioning range strings. It covers constructs like logical OR ('||'), hyphen ranges ('-'), simple ranges (including primitives like '<', '>', '=', partial versions, tilde '~', and caret '^'), and qualifiers for pre-release and build metadata. This grammar serves as a specification for implementing semver range parsers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_12\n\nLANGUAGE: bnf\nCODE:\n```\nrange-set  ::= range ( logical-or range ) *\nlogical-or ::= ( ' ' ) * '||' ( ' ' ) *\nrange      ::= hyphen | simple ( ' ' simple ) * | ''\nhyphen     ::= partial ' - ' partial\nsimple     ::= primitive | partial | tilde | caret\nprimitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial\npartial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?\nxr         ::= 'x' | 'X' | '*' | nr\nnr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *\ntilde      ::= '~' partial\ncaret      ::= '^' partial\nqualifier  ::= ( '-' pre )? ( '+' build )?\npre        ::= parts\nbuild      ::= parts\nparts      ::= part ( '.' part ) *\npart       ::= nr | [-0-9A-Za-z]+\n```\n\n----------------------------------------\n\nTITLE: Including and Using js-yaml in Browsers\nDESCRIPTION: Demonstrates how to include the bundled js-yaml library in an HTML file and use it to parse a YAML string in JavaScript. Requires the `js-yaml.min.js` file and potentially `esprima.js` for `!!js/function` support or `es5-shims` for older browsers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Block of Code from Coverage with v8 ignore start/stop in Node.js\nDESCRIPTION: Provides an example for ignoring a larger region of code using the paired comments `/* v8 ignore start */` and `/* v8 ignore stop */`. Everything between these markers is omitted from coverage reports. This is helpful for ignoring non-contiguous or multi-line segments without specifying explicit counts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-to-istanbul/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/* v8 ignore start */\\nfunction dontMindMe() {\\n  // ...\\n}\\n/* v8 ignore stop */\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Global Fake Timers with @sinonjs/fake-timers in JavaScript\nDESCRIPTION: This snippet demonstrates replacing global timer functions with fake implementations using @sinonjs/fake-timers's install() method and restoring them with uninstall(). This setup hijacks setTimeout and related methods so that all timer scheduling uses the fake clock instead of native timers. Calling uninstall restores the original behavior. No special configuration is used for install; by default, the global object is modified. Inputs: none required; outputs: schedules and executes timer callbacks using the controlled clock.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// In the browser distribution, a global `FakeTimers` is already available\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\n\nvar clock = FakeTimers.install();\n// Equivalent to\n// var clock = FakeTimers.install(typeof global !== \"undefined\" ? global : window);\n\nsetTimeout(fn, 15); // Schedules with clock.setTimeout\n\nclock.uninstall();\n// setTimeout is restored to the native implementation\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for FastAPI Integration (Bash)\nDESCRIPTION: Command to install necessary Python packages using pip for the FastAPI application. Includes fastapi for the web framework, uvicorn as the ASGI server, httpx for making asynchronous HTTP requests (likely for the DecA(I)de client), python-dotenv for managing environment variables, pydantic for data validation and settings management, and python-multipart for handling form data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install fastapi uvicorn httpx python-dotenv pydantic python-multipart\n```\n\n----------------------------------------\n\nTITLE: Capturing Custom Events with PostHog in JavaScript/React\nDESCRIPTION: This snippet demonstrates how to capture a custom event using the PostHog analytics library within a frontend application (likely React). It sends an event named 'Completed Quiz' along with associated properties like 'score' and 'time' to the PostHog service for user behavior analysis. This requires the PostHog library to be initialized in the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742624126265.txt#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nposthog.capture('Completed Quiz', {score: 80, time: 120})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Schema Overview\nDESCRIPTION: Lists the main tables used in the PostgreSQL database for the DecA(I)de application. These tables store information about user accounts, learning progress, activities, performance statistics, daily challenge definitions, and user progress on those challenges. The schema is managed using Drizzle ORM.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- **users** - User accounts and profile information\n- **user_learning** - User learning progress and history\n- **user_activities** - User activity tracking\n- **user_stats** - User performance statistics\n- **daily_challenges** - Daily challenge definitions\n- **user_daily_challenges** - User progress on daily challenges\n```\n\n----------------------------------------\n\nTITLE: Installing wrap-ansi via npm - Shell\nDESCRIPTION: Demonstrates how to install the wrap-ansi package using npm from the command line. Users must have Node.js and npm installed prior to running this command. No parameters are needed; the package will be available in node_modules after installation completes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/wrap-ansi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install wrap-ansi\n```\n\n----------------------------------------\n\nTITLE: Exclusive Concurrent Parameterized Tests with jest-each.test.concurrent.only - JavaScript\nDESCRIPTION: Runs only the specified parameterized tests concurrently using .concurrent.only. Useful for troubleshooting or isolating test cases that benefit from concurrent execution. All other tests in the suite are skipped.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).test.concurrent.only(\\n  'returns the result of adding %d to %d',\\n  (a, b, expected) => {\\n    expect(a + b).toBe(expected);\\n  },\\n);\n```\n\n----------------------------------------\n\nTITLE: Using cookie-signature to Sign and Unsign Cookies in JavaScript\nDESCRIPTION: This snippet demonstrates importing the 'cookie-signature' library, using the `sign` method to create a signed cookie value with a secret key, and using the `unsign` method to verify the signature and retrieve the original value. It also shows that unsigning with an incorrect secret returns `false`. Requires the 'cookie-signature' npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie-signature/Readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nvar cookie = require('cookie-signature');\n\nvar val = cookie.sign('hello', 'tobiiscool');\nval.should.equal('hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI');\n\nvar val = cookie.sign('hello', 'tobiiscool');\ncookie.unsign(val, 'tobiiscool').should.equal('hello');\ncookie.unsign(val, 'luna').should.be.false;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing y18n in Deno Using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing y18n in a Deno environment, specifying a custom locale and directory. It imports y18n from a remote URL, configures the locale, and uses a tagged template for translation. Running this code requires Deno and the 'allow-read' permission for loading alternative locale files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/y18n/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport y18n from \"https://deno.land/x/y18n/deno.ts\";\n\nconst __ = y18n({\n  locale: 'pirate',\n  directory: './test/locales'\n}).__\n\nconsole.info(__`Hi, ${'Ben'} ${'Coe'}!`)\n```\n\n----------------------------------------\n\nTITLE: Capturing All Result Events with onResult Callback in Picomatch (JavaScript)\nDESCRIPTION: Illustrates the use of the onResult callback to log or process every tested input, regardless of match or ignore status. Callback receives data for each string passed to the matcher, including the pattern and matching details. This enhances observability and debugging in complex matching scenarios. Requires the 'picomatch' library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onResult = ({ glob, regex, input, output }) => {\\n  console.log({ glob, regex, input, output });\\n};\\n\\nconst isMatch = picomatch('*', { onResult, ignore: 'f*' });\\nisMatch('foo');\\nisMatch('bar');\\nisMatch('baz');\n```\n\n----------------------------------------\n\nTITLE: Exposing a Synchronous Worker Method - JavaScript\nDESCRIPTION: This code defines a worker module for jest-worker, exporting a synchronous function named 'hello' that returns a greeting message. It takes a single parameter and returns a formatted string. This module is to be loaded by the parent using JestWorker. There are no external dependencies, and the expected input is a string parameter; output is a formatted greeting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport function hello(param) {\n  return `Hello, ${param}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Frontend Animations via Utility Function (TypeScript)\nDESCRIPTION: Illustrates usage of the playAnimation utility from '@lib/animation-engine' to trigger a visual animation (e.g. fireworks) on a button click. playAnimation internally selects the right effect from several sub-animations (confetti, stars, circles, etc.). Requires Framer Motion or DOM-based animation engine, and the code is meant for React/TypeScript projects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { playAnimation } from '@/lib/animation-engine';\n\n// e.g. on button click\n<button onClick={() => playAnimation({ type: 'fireworks' })}>\n  Celebrate!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Class Properties and Methods with Computed Names in JavaScript\nDESCRIPTION: Demonstrates usage of computed property names for both fields and methods within classes, enabled via Babel's classProperties plugin. No dependencies except Babel with class properties support. Inputs are ES2020/Next style class declarations featuring computed property/method names; outputs are valid class definitions with dynamic keys.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_41\n\nLANGUAGE: js\nCODE:\n```\n// with \"plugins\": [\"classProperties\"]\\nclass Foo {\\n  [x]\\n  ['y']\\n}\\n\\nclass Bar {\\n  [p]\\n  [m] () {}\\n}\\n \n```\n\n----------------------------------------\n\nTITLE: Encrypting and Using .env Files with dotenvx (Shell)\nDESCRIPTION: Shell commands showing how to use `dotenvx` for environment variable encryption. The `dotenvx set --encrypt` command adds an encrypted variable (`HELLO`) to the specified file (`.env.production`). To run a script using this encrypted file, the corresponding decryption key (`DOTENV_PRIVATE_KEY_PRODUCTION`) must be provided as an environment variable to the `dotenvx run` command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ dotenvx set HELLO Production --encrypt -f .env.production\n$ echo \"console.log('Hello ' + process.env.HELLO)\" > index.js\n\n$ DOTENV_PRIVATE_KEY_PRODUCTION=\"<.env.production private key>\" dotenvx run -- node index.js\n[dotenvx] injecting env (2) from .env.production\nHello Production\n```\n\n----------------------------------------\n\nTITLE: Ambiguous Code Segment for Tokenizer\nDESCRIPTION: Isolates the code segment `/ 2/g` which represents the core ambiguity between division and regex literals faced by the `jsTokens` regex when scanning forward. The tokenizer cannot easily distinguish between the two contexts based solely on this segment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/ 2/g\n```\n\n----------------------------------------\n\nTITLE: Extending Function.prototype with Once in JavaScript\nDESCRIPTION: Shows how to responsibly extend JavaScript's Function.prototype with a 'once' method using the 'once' module's proto function. This allows any callback to be wrapped as single-use by calling cb.once(). This pattern enables global visibility of the once behavior across the codebase but requires careful usage to avoid prototype pollution. Dependencies include the 'once' module, and the method expects any function as an input, returning a wrapped function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/once/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// only has to be done once\\nrequire('once').proto()\\n\\nfunction load (file, cb) {\\n  cb = cb.once()\\n  loader.load('file')\\n  loader.once('load', cb)\\n  loader.once('error', cb)\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Electron Version Handling in electronToBrowserList (Node.js, Deprecated)\nDESCRIPTION: Shows that electronToBrowserList returns undefined when queried with an unknown Electron version, facilitating safer use. The function is deprecated, so direct use is discouraged unless working with legacy code or toolchains.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar query = e2c.electronToBrowserList('9000');\n// query is undefined\n```\n\n----------------------------------------\n\nTITLE: Reporting Esbuild Compression Statistics for TypeBox Modules - TypeScript\nDESCRIPTION: This snippet shows a formatted table in TypeScript that compares the compiled and minified sizes (in kilobytes) of TypeBox modules as processed by esbuild, alongside the achieved compression ratios. The table is intended to facilitate code optimization by making module size statistics clear. No external dependencies are required for viewing this static table, but generating such reports typically involves TypeScript and esbuild as prerequisites. The table is for documentation purposes only, not meant for execution, and lists module file names, their respective sizes before and after minification, and the resulting compression factor.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\n┌──────────────────────┬────────────┬────────────┬─────────────┐\\n│       (index)        │  Compiled  │  Minified  │ Compression │\\n├──────────────────────┼────────────┼────────────┼─────────────┤\\n│ typebox/compiler     │ '124.3 kb' │ ' 55.7 kb' │  '2.23 x'   │\\n│ typebox/errors       │ '107.8 kb' │ ' 47.9 kb' │  '2.25 x'   │\\n│ typebox/system       │ ' 73.3 kb' │ ' 30.2 kb' │  '2.43 x'   │\\n│ typebox/value        │ '170.7 kb' │ ' 74.2 kb' │  '2.30 x'   │\\n│ typebox              │ ' 72.0 kb' │ ' 29.7 kb' │  '2.43 x'   │\\n└──────────────────────┴────────────┴────────────┴─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Transforming Code with Jest Preset via Node API (JavaScript)\nDESCRIPTION: Uses the @babel/core Node API to programmatically transform JavaScript code with the Jest preset. The code snippet calls require('@babel/core').transform with source code and an options object specifying the 'jest' preset. Dependencies include @babel/core and babel-preset-jest. This method is flexible for custom build scripts or advanced integration scenarios. The 'code' parameter is the input source, and the transformed output is returned by the function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-preset-jest/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/core').transform('code', {\n  presets: ['jest'],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing p-limit via npm in Shell\nDESCRIPTION: This snippet demonstrates how to install the p-limit package using the npm command line tool. The p-limit package allows you to manage the concurrency of async operations in JavaScript. This command should be run in a terminal within your project directory, and requires that you have Node.js and npm already installed. The output is the installation of the package in your node_modules folder, making it available for usage in your JavaScript files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-limit/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install p-limit\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Gradients and Box Surfaces for Consistent UI (CSS)\nDESCRIPTION: This CSS establishes dark theme variables for backgrounds, borders, and text for use across different UI surfaces. It applies styles to container classes (card, dropdown-content, etc.) when the dark class is present. Prerequisite: The .dark class must be toggled on a root element (usually via a theme manager). Inputs: theme state; Output: visually consistent dark backgrounds and borders.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --dark-bg-primary: #121212;\n  --dark-bg-secondary: #1e1e1e;\n  --dark-bg-tertiary: #2d2d2d;\n  --dark-border: #3a3a3a;\n  --dark-text-primary: #e0e0e0;\n  --dark-text-secondary: #a0a0a0;\n}\n.dark {\n  --surface-1: #1a1a1a;\n  --surface-2: #222222;\n  --surface-3: #2a2a2a;\n  --surface-4: #333333;\n}\n.dark .card,\n.dark .dropdown-content,\n.dark .dialog-content,\n.dark .popover-content {\n  background-color: var(--surface-2);\n  border-color: var(--dark-border);\n}\n```\n\n----------------------------------------\n\nTITLE: Faking Timers in a Custom Context with @sinonjs/fake-timers in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to install fake timers into a user-defined context rather than modifying the global object. By using FakeTimers.withGlobal(context).install(), timer methods like setTimeout are hijacked within the provided context only, allowing isolation in environments such as sandboxes or when testing specific APIs. The original methods are restorable via clock.uninstall(). Inputs: context object with native timer functions. Outputs: context-oriented timer stubbing for customized or partial environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\nvar context = {\n    setTimeout: setTimeout, // By default context.setTimeout uses the global setTimeout\n};\nvar clock = FakeTimers.withGlobal(context).install();\n\ncontext.setTimeout(fn, 15); // Schedules with clock.setTimeout\n\nclock.uninstall();\n// context.setTimeout is restored to the original implementation\n```\n\n----------------------------------------\n\nTITLE: Using dunder-proto get/set Functions in JavaScript\nDESCRIPTION: Illustrates importing and using the `getDunder` and `setDunder` functions from the 'dunder-proto' library. It shows retrieving the default prototype (`Object.prototype`) of a new object using `getDunder`, then setting the prototype to `null` using `setDunder`, and finally verifying the changes using the `assert` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dunder-proto/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst assert = require('assert');\nconst getDunder = require('dunder-proto/get');\nconst setDunder = require('dunder-proto/set');\n\nconst obj = {};\n\nassert.equal('toString' in obj, true);\nassert.equal(getDunder(obj), Object.prototype);\n\nsetDunder(obj, null);\n\nassert.equal('toString' in obj, false);\nassert.equal(getDunder(obj), null);\n```\n\n----------------------------------------\n\nTITLE: Output of concat-map Example\nDESCRIPTION: This block shows the console output produced by the preceding JavaScript example. It represents the final array generated after applying the `concatMap` function with the specified logic to the initial array `xs`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/concat-map/README.markdown#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n[ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiselect Prompt in JavaScript\nDESCRIPTION: Example configuration for an interactive 'multiselect' prompt. It sets the prompt type, name, message, choices (with values, disabled, and pre-selected states), limits the maximum number of selections using `max`, and provides a usage hint. The prompt returns an array of the selected items' values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'multiselect',\n  name: 'value',\n  message: 'Pick colors',\n  choices: [\n    { title: 'Red', value: '#ff0000' },\n    { title: 'Green', value: '#00ff00', disabled: true },\n    { title: 'Blue', value: '#0000ff', selected: true }\n  ],\n  max: 2,\n  hint: '- Space to select. Return to submit'\n}\n```\n\n----------------------------------------\n\nTITLE: Color Conversion Examples using ansi-styles\nDESCRIPTION: This snippet demonstrates using `ansi-styles` in conjunction with `color-convert` to generate ANSI escape codes for foreground (`style.color`) and background (`style.bgColor`) colors from different color space inputs like RGB, HSL, and HEX. It shows conversion to ANSI 16 (`.ansi`), ANSI 256 (`.ansi256`), and ANSI 16 million (`.ansi16m`) color palettes. Requires the `ansi-styles` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-styles/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstyle.color.ansi.rgb(100, 200, 15); // RGB to 16 color ansi foreground code\nstyle.bgColor.ansi.rgb(100, 200, 15); // RGB to 16 color ansi background code\n\nstyle.color.ansi256.hsl(120, 100, 60); // HSL to 256 color ansi foreground code\nstyle.bgColor.ansi256.hsl(120, 100, 60); // HSL to 256 color ansi foreground code\n\nstyle.color.ansi16m.hex('#C0FFEE'); // Hex (RGB) to 16 million color foreground code\nstyle.bgColor.ansi16m.hex('#C0FFEE'); // Hex (RGB) to 16 million color background code\n```\n\n----------------------------------------\n\nTITLE: Defining and Using an Advanced Error Class with make-error in JavaScript\nDESCRIPTION: This snippet illustrates defining a more complex custom error (CustomError) function, extending it with makeError, adding custom properties (customValue), and enhancing the prototype with an additional instance method (myMethod). It demonstrates throwing and catching an instance, then calling the custom method on the error. Dependencies: make-error package. Input is a value to store; output is an exception thrown and later processed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-error/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomError(customValue) {\n  CustomError.super.call(this, \"custom error message\");\n\n  this.customValue = customValue;\n}\nmakeError(CustomError);\n\n// Feel free to extend the prototype.\nCustomError.prototype.myMethod = function CustomError$myMethod() {\n  console.log(\"CustomError.myMethod (%s, %s)\", this.code, this.message);\n};\n\n//-----\n\ntry {\n  throw new CustomError(42);\n} catch (error) {\n  error.myMethod();\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding Stepped Ranges with braces - JavaScript\nDESCRIPTION: Covers the use of step/increment notation in brace ranges with 'braces', showing both full expansion and optimized regex compilation. Stepped ranges generate values with a specified interval from start to end. The example illustrates both expand mode (array output) and compile mode (regex string).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces.expand('{2..10..2}'));\n//=> ['2', '4', '6', '8', '10']\n\nconsole.log(braces('{2..10..2}'));\n//=> ['(2|4|6|8|10)']\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schemas with Drizzle ORM in TypeScript\nDESCRIPTION: This snippet establishes the User model and related schema using Drizzle ORM's schema helpers in TypeScript. It relies on dependencies such as drizzle-orm/pg-core and zod for schema validation, and defines all fields and types for user records. Expected input involves using this schema for data operations throughout the project, and the output is a strongly-typed table structure and zod-based insert validation; note that additional model snippets may be added for other entities.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// shared/schema.ts\nimport { pgTable, text, serial, integer, boolean, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User model\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  eventFormat: text(\"event_format\"), // roleplay or written\n  eventCode: text(\"event_code\"),     // event code like PBM, ACT, etc.\n  eventType: text(\"event_type\"),     // Principles, Individual Series, etc.\n  instructionalArea: text(\"instructional_area\"), // Business Management, Marketing, etc.\n  sessionId: text(\"session_id\"),     // Current session ID for multi-device control\n  uiTheme: text(\"ui_theme\").default(\"aquaBlue\"), // UI theme preference\n  colorScheme: text(\"color_scheme\").default(\"memphis\"), // UI color scheme\n  theme: text(\"theme\").default(\"light\"), // Theme preference (light, dark, system)\n  subscriptionTier: text(\"subscription_tier\").default(\"standard\"),\n  streak: integer(\"streak\").default(0),\n  lastLoginDate: timestamp(\"last_login_date\"),\n  points: integer(\"points\").default(0),\n  roleplayCount: integer(\"roleplay_count\").default(0),\n  testCount: integer(\"test_count\").default(0), \n  writtenEventCount: integer(\"written_event_count\").default(0),\n  roleplayResetDate: timestamp(\"roleplay_reset_date\"),\n  testResetDate: timestamp(\"test_reset_date\"),\n  writtenEventResetDate: timestamp(\"written_event_reset_date\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n});\n\n// Create user schema\nexport const insertUserSchema = createInsertSchema(users);\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// Additional models for performance indicators, practice sessions, etc.\n// ...\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect dotenv Usage in an ES Module (JavaScript)\nDESCRIPTION: Provides an example of an auxiliary ES module (`errorReporter.mjs`) that incorrectly attempts to access an environment variable (`process.env.API_KEY`) before `dotenv.config()` has been properly called in the main module due to ESM import order.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_34\n\nLANGUAGE: js\nCODE:\n```\n// errorReporter.mjs\nimport { Client } from 'best-error-reporting-service'\n\nexport default new Client(process.env.API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Correctly Importing dotenv Configuration in an ES Module (JavaScript)\nDESCRIPTION: Presents the correct way to structure the main ES module (`index.mjs`) to ensure `dotenv` loads environment variables before other modules are imported. Importing `dotenv/config` at the top handles the configuration loading.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\n// index.mjs\nimport 'dotenv/config'\n\nimport errorReporter from './errorReporter.mjs'\nerrorReporter.report(new Error('documented example'))\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript with Source Maps - Bash\nDESCRIPTION: Invokes the TypeScript compiler with the --sourcemap option on demo.ts, producing demo.js and demo.js.map. Necessary before running the demo with Node. Ensures correct stack trace remapping in subsequent steps.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/typescript/bin/tsc -sourcemap demo.ts\n```\n\n----------------------------------------\n\nTITLE: Tokenizing JavaScript with js-tokens Regex (CommonJS)\nDESCRIPTION: Demonstrates requiring the `js-tokens` default export (a regex) using CommonJS and applying it to a JavaScript string via `String.prototype.match` to produce an array of tokens. This basic usage includes capturing whitespace and punctuators as separate tokens.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar jsTokens = require(\"js-tokens\").default\n\nvar jsString = \"var foo=opts.foo;\\n...\"\n\njsString.match(jsTokens)\n// [\"var\", \" \", \"foo\", \"=\", \"opts\", \".\", \"foo\", \";\", \"\\n\", ...]\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Short Time Strings using ms - JavaScript\nDESCRIPTION: This example shows how to use 'ms' to convert millisecond values back into compact, human-readable time strings (e.g., '1m', '2m', '-3m'). Nested 'ms' calls demonstrate chaining conversions. The sole requirement is the 'ms' library, and it takes numeric or nested ms() outputs as input, returning short text formats. Intended for quick time format display; no external configuration is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/ms/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n----------------------------------------\n\nTITLE: Intelligently Optimizing Sourcemap Markings with maybeAddMapping - TypeScript\nDESCRIPTION: Illustrates usage of maybeAddMapping to minimize unnecessary entries in generated sourcemaps, reducing file size. Prerequisites: @jridgewell/gen-mapping and assertion support. Accepts mapping objects; omits redundant or non-informative segments. Inputs are mappings (generated locations, original/source). Output is an efficient encoded sourcemap. Useful for large projects to avoid performance bottlenecks from excessive mappings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/gen-mapping/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { maybeAddMapping } from '@jridgewell/gen-mapping';\n\nconst map = new GenMapping();\n\n// Adding a sourceless marking at the beginning of a line isn't useful.\nmaybeAddMapping(map, {\n  generated: { line: 1, column: 0 },\n});\n\n// Adding a new source marking is useful.\nmaybeAddMapping(map, {\n  generated: { line: 1, column: 0 },\n  source: 'input.js',\n  original: { line: 1, column: 0 },\n});\n\n// But adding another marking pointing to the exact same original location isn't, even if the\n// generated column changed.\nmaybeAddMapping(map, {\n  generated: { line: 1, column: 9 },\n  source: 'input.js',\n  original: { line: 1, column: 0 },\n});\n\nassert.deepEqual(toEncodedMap(map), {\n  version: 3,\n  names: [],\n  sources: ['input.js'],\n  sourcesContent: [null],\n  mappings: 'AAAA',\n});\n```\n\n----------------------------------------\n\nTITLE: Exchanging Indicator Colors in jest-diff Using Chalk in TypeScript\nDESCRIPTION: This TypeScript snippet changes the output colors for deletions and insertions using the chalk library, aligning with common diff tool conventions (red for deletions, green for insertions). It creates an options object with aColor and bColor set to different chalk methods. The code depends on the chalk npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport chalk = require('chalk');\\n\\nconst options = {\\n  aColor: chalk.red,\\n  bColor: chalk.green,\\n};\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease versions without number via semver CLI (Bash)\nDESCRIPTION: Shows using the `-n false` flag with the `semver` command-line tool during prerelease increment (`-i prerelease --preid beta`) to create a prerelease version without adding a numeric suffix. Outputs `1.2.4-beta`. Requires the `semver` command-line tool.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta -n false\n1.2.4-beta\n```\n\n----------------------------------------\n\nTITLE: Transitioning from prerelease to release via semver CLI (Bash)\nDESCRIPTION: Illustrates using the `semver` command-line tool with the `-i release` flag to move from a prerelease version (`1.2.4-beta.1`) to its corresponding final release version. Outputs `1.2.4`. Requires the `semver` command-line tool.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.4-beta.1 -i release\n1.2.4\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Buffer Allocation (Console Example) - Console\nDESCRIPTION: This code snippet demonstrates the unsafe allocation of a Buffer in Node.js using the deprecated Buffer(size) constructor. When run, it prints an uninitialized chunk of memory to the console, highlighting why the old API is insecure. The code is used as an example to show the importance of using safer buffer methods, and no dependencies are required other than Node.js. Inputs: none. Outputs: the contents of the uninitialized buffer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safer-buffer/Readme.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cat example.unsafe.js\\nconsole.log(Buffer(20))\\n$ ./node-v6.13.0-linux-x64/bin/node example.unsafe.js\\n<Buffer 0a 00 00 00 00 00 00 00 28 13 de 02 00 00 00 00 05 00 00 00>\\n$ standard example.unsafe.js\\nstandard: Use JavaScript Standard Style (https://standardjs.com)\\n  /home/chalker/repo/safer-buffer/example.unsafe.js:2:13: 'Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.\\n\n```\n\n----------------------------------------\n\nTITLE: Viewing semver command-line help output (Bash)\nDESCRIPTION: Displays the help text obtained by running the `semver` command-line tool with the help flag (`-h`). This output describes the tool's usage, options (like range checking `-r`, incrementing `-i`, prerelease handling `--preid`, loose parsing `-l`, coercion `-c`), and exit behavior. Requires the `semver` command-line tool to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ semver -h\n\nA JavaScript implementation of the https://semver.org/ specification\nCopyright Isaac Z. Schlueter\n\nUsage: semver [options] <version> [<version> [...]]\nPrints valid versions sorted by SemVer precedence\n\nOptions:\n-r --range <range>\n        Print versions that match the specified range.\n\n-i --increment [<level>]\n        Increment a version by the specified level.  Level can\n        be one of: major, minor, patch, premajor, preminor,\n        prepatch, prerelease, or release.  Default level is 'patch'.\n        Only one version may be specified.\n\n--preid <identifier>\n        Identifier to be used to prefix premajor, preminor,\n        prepatch or prerelease version increments.\n\n-l --loose\n        Interpret versions and ranges loosely\n\n-n <0|1>\n        This is the base to be used for the prerelease identifier.\n\n-p --include-prerelease\n        Always include prerelease versions in range matching\n\n-c --coerce\n        Coerce a string into SemVer if possible\n        (does not imply --loose)\n\n--rtl\n        Coerce version strings right to left\n\n--ltr\n        Coerce version strings left to right (default)\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no satisfying versions are found, then exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.\n```\n\n----------------------------------------\n\nTITLE: Mapping Paths for Module Definitions in tsconfig.json - JSONC\nDESCRIPTION: This snippet demonstrates the use of the paths and baseUrl options in tsconfig.json to remap import paths for custom modules. The compiler resolves 'custom-module-type' to the specified relative path under types/custom-module-type. This is useful for organizing custom module typings, and TypeScript will use these mappings for both compilation and type-checking. The sample expects the types to be located at types/custom-module-type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_27\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"compilerOptions\": {\\n    \"baseUrl\": \".\",\\n    \"paths\": {\\n      \"custom-module-type\": [\"types/custom-module-type\"]\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Strict JSON Schemas with Type.Strict in TypeBox (TypeScript)\nDESCRIPTION: This snippet explains and demonstrates the `Type.Strict()` function in TypeBox. It takes a TypeBox schema (which may contain non-standard properties like `Kind` and `Modifier`) and returns a new schema object that adheres strictly to the JSON Schema standard by omitting these TypeBox-specific properties. The example shows transforming an object schema with an optional property.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Object({                              // const T = {\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\n})                                                   //   type: 'object',\n                                                     //   properties: {\n                                                     //     name: {\n                                                     //       [Kind]: 'String',\n                                                     //       type: 'string',\n                                                     //       [Modifier]: 'Optional'\n                                                     //     }\n                                                     //   }\n                                                     // }\n\nconst U = Type.Strict(T)                             // const U = {\n                                                     //   type: 'object', \n                                                     //   properties: { \n                                                     //     name: { \n                                                     //       type: 'string' \n                                                     //     } \n                                                     //   } \n                                                     // }\n```\n\n----------------------------------------\n\nTITLE: Ignoring Matches with onIgnore Callback in Picomatch (JavaScript)\nDESCRIPTION: Shows how to supply an onIgnore callback to Picomatch for notifying when an input is ignored due to the ignore option. The callback logs information about glob, regex, input, and output for each ignored item. Inputs include the ignore pattern and a callback; events are triggered for ignored entries. Requires 'picomatch', for Node.js environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onIgnore = ({ glob, regex, input, output }) => {\\n  console.log({ glob, regex, input, output });\\n};\\n\\nconst isMatch = picomatch('*', { onIgnore, ignore: 'f*' });\\nisMatch('foo');\\nisMatch('bar');\\nisMatch('baz');\n```\n\n----------------------------------------\n\nTITLE: Checking Array-like Objects with is-arrayish in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `is-arrayish` module. It first requires the module and then calls the `isArrayish` function with various inputs: an empty array, an object whose prototype is an array, an empty plain object, and an object with only a `length` property. The comments indicate the expected boolean return value for each case, illustrating how the function determines if an object can be treated like an array. This snippet requires the `is-arrayish` Node.js module to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-arrayish/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar isArrayish = require('is-arrayish');\n\nisArrayish([]); // true\nisArrayish({__proto__: []}); // true\nisArrayish({}); // false\nisArrayish({length:10}); // false\n```\n```\n\n----------------------------------------\n\nTITLE: Consuming Source Maps Using SourceMapConsumer in JavaScript\nDESCRIPTION: This snippet demonstrates how to construct a SourceMapConsumer instance from a raw source map object and query it for source file lists, original positions, and generated positions. It shows how to map code locations between original and transformed code, and how to iterate all mappings. Dependencies include the source-map-js library and an input raw source map in JSON format. Expects an object structure matching the source map specification; outputs mapping information and supports mapping iteration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar rawSourceMap = {\n  version: 3,\n  file: 'min.js',\n  names: ['bar', 'baz', 'n'],\n  sources: ['one.js', 'two.js'],\n  sourceRoot: 'http://example.com/www/js/',\n  mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'\n};\n\nvar smc = new SourceMapConsumer(rawSourceMap);\n\nconsole.log(smc.sources);\n// [ 'http://example.com/www/js/one.js',\n//   'http://example.com/www/js/two.js' ]\n\nconsole.log(smc.originalPositionFor({\n  line: 2,\n  column: 28\n}));\n// { source: 'http://example.com/www/js/two.js',\n//   line: 2,\n//   column: 10,\n//   name: 'n' }\n\nconsole.log(smc.generatedPositionFor({\n  source: 'http://example.com/www/js/two.js',\n  line: 2,\n  column: 10\n}));\n// { line: 2, column: 28 }\n\nsmc.eachMapping(function (m) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Enabling and Disabling Debug (Shell)\nDESCRIPTION: Shows the expected console output resulting from dynamically enabling and disabling a debug namespace using the previous JavaScript snippet. This is useful for confirming correct debug state transitions during development. No dependencies required. Output: sequential 'false', 'true', 'false' Boolean values, indicating enabled state.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n1 false\\n2 true\\n3 false\\n\n```\n\n----------------------------------------\n\nTITLE: Advancing to the Next Animation Frame with FakeTimers - JavaScript\nDESCRIPTION: Steps the clock to the next animation frame and executes relevant callbacks via 'clock.runToFrame'. Useful for triggering scheduled animation frame handlers in tests. No parameters required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nclock.runToFrame()\n```\n\n----------------------------------------\n\nTITLE: Installing the methods package using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'methods' package and its dependencies into the current project. It requires Node.js and npm to be installed on the system.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/methods/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install methods\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom dotenv Plugin with dotenv-expand in JavaScript\nDESCRIPTION: Demonstrates how to extend `dotenv` functionality by using the parsed object returned by `dotenv.config()`. This example uses the `dotenv-expand` plugin to enable variable expansion based on the initially parsed environment variables.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nconst dotenv = require('dotenv')\nconst variableExpansion = require('dotenv-expand')\nconst myEnv = dotenv.config()\nvariableExpansion(myEnv)\n```\n\n----------------------------------------\n\nTITLE: Exporting a Function Using get-caller-file in Node.js - JavaScript\nDESCRIPTION: This snippet illustrates a Node.js module exporting a function that returns the filename of its caller by invoking getCallerFile. Requires the get-caller-file package to be installed. The function can be used to programmatically inspect where it was invoked from. The primary parameter is implicit (default position=2), and the returned value is the absolute path of the calling file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-caller-file/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ./foo.js\nconst getCallerFile = require('get-caller-file');\n\nmodule.exports = function() {\n  return getCallerFile(); // figures out who called it\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Case for res.jsonp(status, number) in Express.js\nDESCRIPTION: Details the necessary method chaining for the edge case where the intended JSONP body is a number when using the `res.jsonp(status, body)` signature. Developers must explicitly use `res.status(status).jsonp(num)` to ensure correct behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// the edge-case res.jsonp(status, num) requires\nres.status(status).jsonp(num)\n```\n\n----------------------------------------\n\nTITLE: Using Flow Exact Object Type Annotations (JavaScript/Flow)\nDESCRIPTION: Shows an example of the Flow exact object type annotation syntax (`{| ... |}`). This feature, added via the Flow plugin, allows developers to specify that an object must have exactly the properties listed within the annotation (`x: number, y: string`) and no others. This provides stricter type checking compared to regular object types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_45\n\nLANGUAGE: js\nCODE:\n```\nvar a : {| x: number, y: string |} = { x: 0, y: 'foo' };\n```\n\n----------------------------------------\n\nTITLE: Requiring make-error in Node.js JavaScript Applications\nDESCRIPTION: This snippet demonstrates the use of require() to import the make-error package into a Node.js project after it has been installed. This enables access to the make-error functionality, allowing the creation of custom error types. The dependency is the make-error library, and the output is a makeError function ready for use.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-error/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar makeError = require(\"make-error\");\n```\n\n----------------------------------------\n\nTITLE: Associating and Managing Side Channel Data - Node.js JavaScript\nDESCRIPTION: Demonstrates the creation and usage of a side-channel list for arbitrary JavaScript objects using the 'side-channel-list' package. The code covers initializing a side channel, verifying existence of keys, setting and retrieving values, using assert for presence checks, and handling deletion to free memory. Dependencies include the 'assert' and 'side-channel-list' Node.js modules. Inputs are JavaScript objects (keys) and associated values, with output being presence checks or value retrieval. Avoids memory leaks only if 'delete' is used appropriately.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel-list/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst getSideChannelList = require('side-channel-list');\n\nconst channel = getSideChannelList();\n\nconst key = {};\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n\nchannel.set(key, 42);\n\nchannel.assert(key); // does not throw\nassert.equal(channel.has(key), true);\nassert.equal(channel.get(key), 42);\n\nchannel.delete(key);\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated SVG Dolphin React Component (TSX)\nDESCRIPTION: The main `SideProfileDolphin` React functional component. It uses `motion.div` from `framer-motion` to apply the `dolphinVariants` and handles animation completion with `onAnimationComplete`. It renders an SVG containing the dolphin graphic with various paths, gradients (`linearGradient`), and filters (`feGaussianBlur`, `feSpecularLighting`). Individual SVG parts (`motion.path`, `circle`) are animated using the specific variants (`bodyVariants`, `tailVariants`, `finVariants`) or inline animation definitions. It conditionally displays a text box and includes the `WaveTransition` component.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648076558.txt#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// The main composite component\nexport default function SideProfileDolphin({\n  dimensions,\n  targetPosition,\n  swimming = false,\n  pointDirection = 'right',\n  onArrival,\n  showTextBox = false\n}: SideProfileDolphinProps) {\n  return (\n    <motion.div\n      initial=\"idle\"\n      animate={swimming ? \"swimming\" : \"idle\"}\n      custom={targetPosition}\n      variants={dolphinVariants}\n      onAnimationComplete={() => { if (onArrival) onArrival(); }}\n      style={{ width: dimensions.width, height: dimensions.height, position: \"relative\" }}\n    >\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        viewBox=\"0 0 120 80\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <defs>\n          <linearGradient id=\"sideBodyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#4FD1C5\" />\n            <stop offset=\"50%\" stopColor=\"#35A0DE\" />\n            <stop offset=\"100%\" stopColor=\"#3182CE\" />\n          </linearGradient>\n          <linearGradient id=\"sideBellyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"#79C3F1\" />\n            <stop offset=\"100%\" stopColor=\"#A7D8FF\" />\n          </linearGradient>\n          <linearGradient id=\"sideFinGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#2D8BC7\" />\n            <stop offset=\"100%\" stopColor=\"#1A5F9E\" />\n          </linearGradient>\n          <filter id=\"sideGlow\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feGaussianBlur stdDeviation=\"0.8\" result=\"blur\" />\n            <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n          </filter>\n          <filter id=\"shineEffect\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feGaussianBlur stdDeviation=\"0.5\" result=\"blur\" />\n            <feSpecularLighting in=\"blur\" specularConstant=\"1\" specularExponent=\"20\" lightingColor=\"white\">\n              <fePointLight x=\"50\" y=\"10\" z=\"40\" />\n            </feSpecularLighting>\n            <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\" />\n          </filter>\n        </defs>\n        \n        {/* Enhanced dolphin body with fluid curvature and undulating motion */}\n        <motion.path\n          d=\"M95 35C95 46 85 60 70 65C55 70 40 65 30 60C20 55 10 45 5 40C0 35 0 30 5 25C10 20 20 15 30 10C40 5 55 5 70 10C85 15 95 24 95 35Z\"\n          fill=\"url(#sideBodyGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={bodyVariants}\n        />\n        \n        {/* Enhanced belly with gradient and subtle shine */}\n        <path\n          d=\"M60 40C45 45 30 45 20 40C10 35 15 30 25 25C35 20 50 20 65 25C80 30 75 35 60 40Z\"\n          fill=\"url(#sideBellyGradient)\"\n          filter=\"url(#shineEffect)\"\n        />\n        \n        {/* Enhanced dorsal fin with better shape and subtle steering motion */}\n        <motion.path\n          d=\"M60 10C63 6 68 5 70 11C70 15 65 17 60 14C58 12 58 10 60 10Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          animate={{\n            rotate: [0, 3, 0, -3, 0],\n            originX: 0.5,\n            originY: 1,\n            transition: { repeat: Infinity, duration: 1.5, ease: \"easeInOut\" }\n          }}\n        />\n        \n        {/* Enhanced tail with fluid side-to-side propulsion */}\n        <motion.path\n          d=\"M10 35C5 32 0 36 0 40C0 44 5 47 10 45C15 43 15 37 10 35Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={tailVariants}\n        />\n        \n        {/* Enhanced pectoral flipper with steering adjustments */}\n        <motion.path\n          d=\"M45 45C40 48 35 53 40 55C45 57 50 50 45 45Z\"\n          fill=\"url(#sideFinGradient)\"\n          stroke=\"#2D8BC7\"\n          strokeWidth=\"0.3\"\n          variants={finVariants}\n        />\n        \n        {/* Enhanced eye with depth and shine */}\n        <circle cx=\"85\" cy=\"30\" r=\"4\" fill=\"white\" />\n        <circle cx=\"85\" cy=\"30\" r=\"2\" fill=\"black\" />\n        <circle cx=\"84\" cy=\"29\" r=\"0.8\" fill=\"white\" filter=\"url(#sideGlow)\" />\n        \n        {/* Enhanced smile with glow effect */}\n        <path\n          d=\"M85 40C85 40 80 43 75 40\"\n          stroke=\"white\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          filter=\"url(#sideGlow)\"\n        />\n      </svg>\n      {showTextBox && (\n        <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 mt-2 px-3 py-1 bg-white rounded shadow text-sm\">\n          I'm swimming over!\n        </div>\n      )}\n      <WaveTransition targetPosition={targetPosition} />\n    </motion.div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG environment variable in PowerShell\nDESCRIPTION: Explains how to set the DEBUG variable in Windows PowerShell to filter debug output for Node.js applications. Uses standard environment variable assignment syntax. Only applies to PowerShell, not CMD.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG = \"*,-not_this\"\n```\n\n----------------------------------------\n\nTITLE: Installing The @babel/generator Type Definitions Using npm in Shell\nDESCRIPTION: Installs type definitions for the @babel/generator package into a TypeScript project using the npm package manager. This command downloads and saves the type definitions, ensuring enhanced type checking and editor support. Requires Node.js and npm; should be run in the project's root directory. The installed types depend on @babel/types and enable TypeScript integration when working with Babel's generator API.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/babel__generator/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/babel__generator\n```\n\n----------------------------------------\n\nTITLE: Creating Generic and Nullable Types using TypeBox - TypeScript\nDESCRIPTION: These snippets illustrate how to define generic schema types and nullable types in TypeBox for TypeScript. The first part shows a generic Vector<T> function for generating schemas for 3D vectors, instantiated for both numbers and booleans, including TypeBox, JSON Schema, and TypeScript type representations. The second part demonstrates a generic Nullable<T> utility to allow types that accept a value or null, with the corresponding static type and schema representation. Requires TypeBox and TypeScript, and expects a TypeBox schema type as input to each generic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Type, Static, TSchema } from '@sinclair/typebox'\n\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\n\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\n                                                     //   type: 'object',\n                                                     //   required: ['x', 'y', 'z'],\n                                                     //   properties: {\n                                                     //     x: { type: 'number' },\n                                                     //     y: { type: 'number' },\n                                                     //     z: { type: 'number' }\n                                                     //   }\n                                                     // }\n\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\n                                                     //   x: number,\n                                                     //   y: number,\n                                                     //   z: number\n                                                     // }\n\nconst BooleanVector = Vector(Type.Boolean())         // const BooleanVector = {\n                                                     //   type: 'object',\n                                                     //   required: ['x', 'y', 'z'],\n                                                     //   properties: {\n                                                     //     x: { type: 'boolean' },\n                                                     //     y: { type: 'boolean' },\n                                                     //     z: { type: 'boolean' }\n                                                     //   }\n                                                     // }\n\ntype BooleanVector = Static<typeof BooleanVector>    // type BooleanVector = {\n                                                     //   x: boolean,\n                                                     //   y: boolean,\n                                                     //   z: boolean\n                                                     // }\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\n\nconst T = Nullable(Type.String())                   // const T = {\n                                                    //   anyOf: [\n                                                    //     { type: 'string' },\n                                                    //     { type: 'null' }\n                                                    //   ]\n                                                    // }\n\ntype T = Static<typeof T>                           // type T = string | null\n\n```\n\n----------------------------------------\n\nTITLE: Awarding Experience Points in Gamification System (TypeScript)\nDESCRIPTION: This asynchronous TypeScript function `awardExperience` handles giving XP to a user. It fetches the current user stats, increments XP and points by the given amount, checks if the user leveled up using `checkLevelUp`, saves the updated stats, and triggers an appropriate animation (`levelUp` or `confetti`) using `playAnimation`. It returns the updated user stats. Requires implementations for `getUserStats`, `saveUserStats`, `checkLevelUp`, and `playAnimation`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function awardExperience(amount: number) {\n  let stats = await getUserStats();\n  stats.xp += amount;\n  stats.points += amount;\n  const leveledUp = checkLevelUp(stats);\n  await saveUserStats(stats);\n\n  if (leveledUp) {\n    playAnimation({ type: 'levelUp', message: `Level up! Now level ${stats.level}` });\n  } else {\n    // smaller celebrate\n    playAnimation({ type: 'confetti' });\n  }\n  return stats;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Terminal Output with Picocolors in JavaScript\nDESCRIPTION: This snippet imports the picocolors module and uses its API to format a console message with green color and italic style in JavaScript. No dependencies are required besides picocolors itself. The snippet expects Node.js v6+ or a compatible browser environment, supports both CommonJS and ESM usage, and outputs a colored string combining literal and styled text to the terminal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picocolors/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pc from \"picocolors\"\n\nconsole.log(\n  pc.green(`How are ${pc.italic(`you`)} doing?`)\n)\n\n```\n\n----------------------------------------\n\nTITLE: Installing the slash package using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'slash' package. It should be run in the terminal within a Node.js project directory. This makes the 'slash' module available for use in the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/slash/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install slash\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Helper Validator Identifier with yarn - Shell\nDESCRIPTION: This snippet demonstrates the installation of the @babel/helper-validator-identifier package using yarn, an alternative JavaScript package manager. It adds the package as a project dependency and updates yarn.lock. Run the command in your project's root directory. Yarn must be installed prior to executing this command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-validator-identifier/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/helper-validator-identifier\n```\n\n----------------------------------------\n\nTITLE: Iterating over all mappings with SourceMapConsumer - JavaScript\nDESCRIPTION: Demonstrates the use of eachMapping to iterate through every mapping object in the consumer. The callback receives each mapping, with options for sorting order and execution context. Requires a SourceMapConsumer and a callback; maps are logged as objects with source, original/generated line/column, and name details.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.eachMapping(function (m) { console.log(m); })\n// ...\n// { source: 'illmatic.js',\n//   generatedLine: 1,\n//   generatedColumn: 0,\n//   originalLine: 1,\n//   originalColumn: 0,\n//   name: null }\n// { source: 'illmatic.js',\n//   generatedLine: 2,\n//   generatedColumn: 0,\n//   originalLine: 2,\n//   originalColumn: 0,\n//   name: null }\n// ...\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON Data and Printing Result - JavaScript\nDESCRIPTION: Illustrates fetching JSON data from an HTTP API endpoint and printing the resulting object. The example uses response.json() to automatically parse the received JSON and assumes await is used in a module or async function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nconst response = await fetch('https://api.github.com/users/github');\nconst data = await response.json();\n\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Importing specific semver functions/classes in Node.js\nDESCRIPTION: Illustrates how to import individual components (classes like `SemVer`, `Comparator`, `Range`, and various functions) directly from the `semver` module's sub-paths to potentially reduce the application's memory footprint or load time. This allows using specific functionalities without loading the entire library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// load the whole API at once in a single object\nconst semver = require('semver')\n\n// or just load the bits you need\n// all of them listed here, just pick and choose what you want\n\n// classes\nconst SemVer = require('semver/classes/semver')\nconst Comparator = require('semver/classes/comparator')\nconst Range = require('semver/classes/range')\n\n// functions for working with versions\nconst semverParse = require('semver/functions/parse')\nconst semverValid = require('semver/functions/valid')\nconst semverClean = require('semver/functions/clean')\nconst semverInc = require('semver/functions/inc')\nconst semverDiff = require('semver/functions/diff')\nconst semverMajor = require('semver/functions/major')\nconst semverMinor = require('semver/functions/minor')\nconst semverPatch = require('semver/functions/patch')\nconst semverPrerelease = require('semver/functions/prerelease')\nconst semverCompare = require('semver/functions/compare')\nconst semverRcompare = require('semver/functions/rcompare')\nconst semverCompareLoose = require('semver/functions/compare-loose')\nconst semverCompareBuild = require('semver/functions/compare-build')\nconst semverSort = require('semver/functions/sort')\nconst semverRsort = require('semver/functions/rsort')\n\n// low-level comparators between versions\nconst semverGt = require('semver/functions/gt')\nconst semverLt = require('semver/functions/lt')\nconst semverEq = require('semver/functions/eq')\nconst semverNeq = require('semver/functions/neq')\nconst semverGte = require('semver/functions/gte')\nconst semverLte = require('semver/functions/lte')\nconst semverCmp = require('semver/functions/cmp')\nconst semverCoerce = require('semver/functions/coerce')\n\n// working with ranges\nconst semverSatisfies = require('semver/functions/satisfies')\nconst semverMaxSatisfying = require('semver/ranges/max-satisfying')\nconst semverMinSatisfying = require('semver/ranges/min-satisfying')\nconst semverToComparators = require('semver/ranges/to-comparators')\nconst semverMinVersion = require('semver/ranges/min-version')\nconst semverValidRange = require('semver/ranges/valid')\nconst semverOutside = require('semver/ranges/outside')\nconst semverGtr = require('semver/ranges/gtr')\nconst semverLtr = require('semver/ranges/ltr')\nconst semverIntersects = require('semver/ranges/intersects')\nconst semverSimplifyRange = require('semver/ranges/simplify')\nconst semverRangeSubset = require('semver/ranges/subset')\n```\n\n----------------------------------------\n\nTITLE: Text Input Prompt Configuration Using Prompts - JavaScript\nDESCRIPTION: Defines a basic text prompt that asks the user for their Twitter handle. Used within the 'prompts' CLI library, the configuration specifies a prompt with 'type' as 'text', setting its 'name' and 'message'. This setup allows free-form string input and is intended for use in command-line user flows requiring a single-line text value.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'text',\\n  name: 'value',\\n  message: `What's your twitter handle?`\\n}\n```\n\n----------------------------------------\n\nTITLE: Logging HTTP Requests and Timings Middleware - FastAPI Python\nDESCRIPTION: Implements a FastAPI HTTP middleware that logs incoming HTTP requests, including client IP addresses, and measures request processing time. Extracts the client IP from X-Forwarded-For HTTP headers for accurate logging in proxied environments. Logs method, path, and timing information through the previously configured logger. Requires FastAPI's @app.middleware framework, and expects the 'time', 'logging', and 'Request' objects to be available in context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n@app.middleware(\\\"http\\\")\\nasync def log_requests(request: Request, call_next):\\n    \"\"\"Log all requests with timing information\"\"\"\\n    start_time = time.time()\\n    \\n    # Get the client IP\\n    forwarded_for = request.headers.get(\\\"X-Forwarded-For\\\")\\n    client_ip = forwarded_for.split(\\\",\\\")[0] if forwarded_for else request.client.host\\n    \\n    logger.info(f\\\"Request: {request.method} {request.url.path} from {client_ip}\\\")\\n    \\n    response = await call_next(request)\\n    \\n    # Calculate processing time\\n    process_time = time.time() - start_time\\n    logger.info(f\\\"Response: {response.status_code} in {process_time:.4f}s\\\")\\n    \\n    return response\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Search Documents with OData Filters in JavaScript\nDESCRIPTION: This snippet demonstrates how to apply OData filters to an Azure Search query using the `@azure/search-documents` library. It initializes a `SearchClient` and calls the `search` method. The `filter` option uses the `odata` tagged template literal to construct a type-safe OData $filter expression. Additional options like `orderBy` and `select` are also used to sort and shape the results.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { SearchClient, AzureKeyCredential, odata } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const baseRateMax = 200;\n  const ratingMin = 4;\n  const searchResults = await client.search(\"WiFi\", {\n    filter: odata`Rooms/any(room: room/BaseRate lt ${baseRateMax}) and Rating ge ${ratingMin}`,\n    orderBy: [\"Rating desc\"],\n    select: [\"hotelId\", \"hotelName\", \"Rating\"],\n  });\n  for await (const result of searchResults.results) {\n    // Each result will have \"HotelId\", \"HotelName\", and \"Rating\"\n    // in addition to the standard search result property \"score\"\n    console.log(result);\n  }\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Running Node with Preload Source Map Support (TypeScript Variation) - Bash\nDESCRIPTION: Demonstrates executing a transpiled TypeScript file with source-map-support/register preloaded, so no explicit install() call is needed in the code. Required when omitting require('source-map-support').install() from the code base itself.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnode -r source-map-support/register demo.js\n```\n\n----------------------------------------\n\nTITLE: Parsing PostgreSQL Connection String with pg-connection-string in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the pg-connection-string Node.js package to parse a PostgreSQL connection string and produce a configuration object. It requires the pg-connection-string module to be installed via npm. The parse method accepts a connection URL (e.g., postgres://user:password@host:port/db) and outputs an object with partial connection parameters, such as user, password, host, port, and database. The resulting config can be used to configure PostgreSQL clients, but may require adaptation for libraries that expect a different structure. Expected input is a valid PostgreSQL URL; output is a plain object with extracted fields.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-connection-string/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar parse = require('pg-connection-string').parse;\n\nvar config = parse('postgres://someuser:somepassword@somehost:381/somedatabase')\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Error By Name Constructor - http-errors - JavaScript\nDESCRIPTION: Demonstrates instantiating a new HTTP error object directly using a named constructor provided by the 'http-errors' module, specifically creating a NotFound error (404). Requires 'http-errors' as a dependency; can be used in any context where explicit error construction by status name is desired. No parameters are required by default, but custom messages may be assigned. Output is an instance of the NotFound HTTP error, ready for handling or propagation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-errors/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar err = new createError.NotFound()\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Types with TypeBox in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a recursive type `Node` using `Type.Recursive` from the TypeBox library. It creates a schema where a `Node` object contains an `id` (string) and an array of `nodes` (which are also `Node` objects). The corresponding TypeScript type `Node` is inferred using `Static`, and a simple function `test` shows how to access properties of the nested structure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst Node = Type.Recursive(Node => Type.Object({    // const Node = {\n  id: Type.String(),                                 //   $id: 'Node',\n  nodes: Type.Array(Node)                            //   type: 'object',\n}), { $id: 'Node' })                                 //   properties: {\n                                                     //     id: {\n                                                     //       type: 'string'\n                                                     //     },\n                                                     //     nodes: {\n                                                     //       type: 'array',\n                                                     //       items: {\n                                                     //         $ref: 'Node'\n                                                     //       }\n                                                     //     }\n                                                     //   },\n                                                     //   required: [\n                                                     //     'id',\n                                                     //     'nodes'\n                                                     //   ]\n                                                     // }\n\ntype Node = Static<typeof Node>                      // type Node = {\n                                                     //   id: string\n                                                     //   nodes: Node[]\n                                                     // }\n\nfunction test(node: Node) {\n  const id = node.nodes[0].nodes[0].id               // id is string\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating finalhandler with Middleware (serve-static)\nDESCRIPTION: Shows how finalhandler can be used as the final step in a middleware pattern. The `serve-static` middleware attempts to serve a static file; if it cannot handle the request or encounters an error, it calls the `done` function (provided by finalhandler) to generate the final response (e.g., 404 or an error page).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/finalhandler/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\nvar serve = serveStatic('public')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  serve(req, res, done)\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Setting the ETag Header in HTTP Response - Node.js JavaScript\nDESCRIPTION: This snippet demonstrates how to generate a strong ETag for a given response body and set it in the HTTP response header using the 'etag' function. The 'body' variable should contain the HTTP response payload as a string, Buffer, or fs.Stats. The 'ETag' HTTP header is used for cache validation in web applications.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/etag/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nres.setHeader('ETag', etag(body))\n```\n\n----------------------------------------\n\nTITLE: Installing yargs-parser TypeScript Definitions Using npm (Shell)\nDESCRIPTION: This shell command installs the @types/yargs-parser package as a project dependency. The package contains TypeScript type definitions for the yargs-parser library, which facilitates strongly-typed command-line parsing in TypeScript projects. No additional dependencies are required, and the command should be run in the root of your JavaScript/TypeScript project. On successful execution, developers gain access to yargs-parser's types for use with TypeScript-enabled tooling and editors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/yargs-parser/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/yargs-parser\n```\n\n----------------------------------------\n\nTITLE: Compiling to CommonJS Format with Rollup CLI\nDESCRIPTION: This Bash command shows how to use the Rollup CLI to compile an entry file (`main.js`) into a single file (`bundle.js`) using the CommonJS (CJS) module format. The `--format cjs` flag specifies the output format. This format is suitable for Node.js environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# compile to a CommonJS module\nrollup main.js --format cjs --file bundle.js\n```\n\n----------------------------------------\n\nTITLE: Handling Accessibility Modes in the Browser - TypeScript\nDESCRIPTION: This code provides utility functions in TypeScript to toggle accessibility features such as reduce-motion or high-contrast by adding or removing corresponding CSS classes on the HTML element. It is intended for use in a browser-based web app and depends on appropriate CSS rules for each class. Example parameters may include a mode (string) such as 'reduce-motion', and a boolean for enabling/disabling the mode.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Accessibility utilities\\nexport function setAccessibilityMode(mode: 'reduce-motion' | 'high-contrast' | 'large-text', enabled: boolean) {\\n  const html = document.documentElement;\\n  if (enabled) {\\n    html.classList.add(mode);\\n  } else {\\n    html.classList.remove(mode);\\n  }\\n}\\n\\n// Example usage:\\n// setAccessibilityMode('reduce-motion', true);\n```\n\n----------------------------------------\n\nTITLE: Implementing MicroInteractionsProvider Context in React (TSX)\nDESCRIPTION: This React component sets up a context provider (`MicroInteractionsContext.Provider`) to manage and distribute micro-interaction states and trigger functions (like `triggerAnimation`, `showBreakTimer`, `showAchievement`) throughout the application. It uses `useState` and `useCallback` hooks to manage animation properties and provide memoized functions. It also renders the `SuccessAnimation` component based on the state.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/hooks/use-micro-interactions.tsx\n\nexport function MicroInteractionsProvider({ children }: { children: ReactNode }) {\n  // State for various interactions and animations\n  const [animationProps, setAnimationProps] = useState<{\n    trigger: boolean,\n    type: AnimationType,\n    message?: string\n  }>({\n    trigger: false,\n    type: 'random'\n  });\n  \n  // Other state variables for various interactions...\n  \n  // Trigger animation function\n  const triggerAnimation = useCallback((type: AnimationType = 'random', message?: string) => {\n    setAnimationProps({\n      trigger: true,\n      type,\n      message\n    });\n    \n    // Reset after animation completes\n    setTimeout(() => {\n      setAnimationProps(prev => ({ ...prev, trigger: false }));\n    }, 3000);\n  }, []);\n  \n  // Other interaction functions...\n  \n  // Provide context to children\n  return (\n    <MicroInteractionsContext.Provider value={{\n      triggerAnimation,\n      showBreakTimer,\n      hideBreakTimer,\n      showBreakGame,\n      hideBreakGame,\n      showAchievement,\n      startOnboarding\n    }}>\n      {children}\n      \n      {/* Animation components */}\n      <SuccessAnimation\n        trigger={animationProps.trigger}\n        type={animationProps.type}\n        message={animationProps.message}\n      />\n      \n      {/* Other modal components */}\n    </MicroInteractionsContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Exit Handler with signal-exit in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the 'signal-exit' library. It imports the library and registers a callback function using `onExit`. This callback function, which logs 'process exited!', will be executed whenever the Node.js process terminates for any reason. The callback receives the exit code and signal (if applicable) as arguments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/signal-exit/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar onExit = require('signal-exit')\n\nonExit(function (code, signal) {\n  console.log('process exited!')\n})\n```\n\n----------------------------------------\n\nTITLE: Importing a Module using CommonJS\nDESCRIPTION: This JavaScript snippet demonstrates the traditional CommonJS method of importing modules using `require`. It imports the entire `utils` object from the 'node:utils' module, even if only one function (`ajax`) is needed. This illustrates the lack of tree-shaking with CommonJS, as the whole module content must be loaded.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import the entire utils object with CommonJS\nvar utils = require('node:utils');\nvar query = 'Rollup';\n// use the ajax method of the utils object\nutils.ajax('https://api.example.com?search=' + query).then(handleResponse);\n```\n\n----------------------------------------\n\nTITLE: Saving User Gamification Stats (TypeScript Signature)\nDESCRIPTION: This TypeScript snippet defines the asynchronous function signature for `saveUserStats`. It takes a `UserStats` object as input and is intended to persist these stats, likely by sending them to a backend API endpoint. The specific implementation details are not shown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function saveUserStats(stats: UserStats) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Leven and Alternatives - Shell\nDESCRIPTION: This snippet contains the shell command to run the project's benchmark suite, which executes performance tests for the 'leven' package and alternatives. Execute this command in a shell within your project root to produce comparative benchmarks. The output quantifies the number of operations per second for multiple Levenshtein implementations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/leven/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run bench\n```\n\n----------------------------------------\n\nTITLE: Using @prisma/debug for Logging and Log Retrieval in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the basic usage of the `@prisma/debug` package. It imports the `Debug` factory and `getLogs` function, creates a namespaced debug instance, logs a message and an object, and shows how to retrieve the last 10 log lines within a try-catch block for error handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@prisma/debug/README.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport Debug, { getLogs } from '@prisma/debug'\n\nconst debug = Debug('my-namespace')\n\ntry {\n  debug('hello')\n  debug(process.env)\n  throw new Error('oops')\n} catch (e) {\n  console.error(e)\n  console.error(`We just crashed. But no worries, here are the debug logs:`)\n  // get 10 last lines of debug logs\n  console.error(getLogs(10))\n}\n```\n\n----------------------------------------\n\nTITLE: Using debug in a Node.js HTTP App - JavaScript\nDESCRIPTION: Demonstrates initializing the debug module with a namespace, integrating it into a basic HTTP server setup, and emitting debug statements. Dependencies include the 'debug' package and Node.js HTTP module. Shows how debug statements can be conditionally shown based on namespace/environment configuration; input is HTTP requests, output is debug logs and a basic HTTP response.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar debug = require('debug')(\\'http\\')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %o', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\n----------------------------------------\n\nTITLE: Referencing Dynamic Color Variables in CSS for Theme Support (CSS)\nDESCRIPTION: Defines CSS custom properties (:root variables) for primary color values and corresponding utility classes (e.g., .bg-primary, .text-primary). Using these class definitions, the React/TypeScript color mapping changes propagate to component styling. Works with Tailwind or custom class setups and requires that theme-controller.ts applies the relevant variables to :root.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --color-primary: #06B6D4;\n  --color-secondary: #67E8F9;\n  --color-accent: #0E7490;\n  --color-badge: #06B6D4;\n}\n\n.bg-primary {\n  background-color: var(--color-primary);\n}\n.text-primary {\n  color: var(--color-primary);\n}\n/* etc. */\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Resolving a Module Path using 'resolve' in JavaScript\nDESCRIPTION: This snippet demonstrates how to asynchronously find the absolute path of the 'tap' module using the `resolve/async` export. It specifies the base directory for the search (`__dirname`) and includes a callback function to handle potential errors or the successfully resolved path.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve/readme.markdown#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar resolve = require('resolve/async'); // or, require('resolve')\nresolve('tap', { basedir: __dirname }, function (err, res) {\n    if (err) console.error(err);\n    else console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Hex Color and Styles with Chalk in JavaScript\nDESCRIPTION: This snippet demonstrates applying a foreground color using a HEX value (`#DEADED` or `#FF8800`) and chaining style methods like `.underline()` or `.bold()` using the Chalk library. Requires the 'chalk' npm package. The input is a HEX color string and the text to style; the output is an ANSI-escaped string for terminal display.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.hex('#DEADED').underline('Hello, world!')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.hex('#FF8800').bold('Orange!')\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Syntax for Class Static Blocks with NPM - Shell\nDESCRIPTION: This snippet provides the shell command to install the @babel/plugin-syntax-class-static-block as a development dependency in a JavaScript or Node.js project using NPM. NPM must be installed on the system. The command should be run in the root of the project; it will update the package.json devDependencies. No user inputs or outputs are required beyond executing the command in a terminal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-class-static-block/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-class-static-block\n```\n\n----------------------------------------\n\nTITLE: Using 'is-stream' to Check Stream Objects in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the 'is-stream' library. It requires the Node.js 'fs' module and the 'is-stream' package. The code shows how to check if a file read stream (`fs.createReadStream`) is correctly identified as a stream (returns true) and verifies that a plain JavaScript object is not a stream (returns false).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-stream/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst isStream = require('is-stream');\n\nisStream(fs.createReadStream('unicorn.png'));\n//=> true\n\nisStream({});\n//=> false\n```\n\n----------------------------------------\n\nTITLE: Disabling All Colors in Diff Output for File Storage with Identity Function in JavaScript\nDESCRIPTION: Illustrates how to disable all coloring in diff outputs by using an identity function for all color options in the options object. This ensures plain output for storage or non-ANSI environments. No external dependencies are needed unless choose to use chalk or similar elsewhere.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst noColor = string => string;\\n\\nconst options = {\\n  aColor: noColor,\\n  bColor: noColor,\\n  changeColor: noColor,\\n  commonColor: noColor,\\n  patchColor: noColor,\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing useMicroInteractions Hook in React (TSX)\nDESCRIPTION: This code snippet shows how to import the `useMicroInteractions` custom hook from its defined path (`@/hooks/use-micro-interactions`) within the project. This hook provides access to the micro-interaction functionalities managed by the `MicroInteractionsProvider`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMicroInteractions } from '@/hooks/use-micro-interactions';\n```\n\n----------------------------------------\n\nTITLE: Representing Negated Union in JSON Schema with allOf and not/anyOf\nDESCRIPTION: Shows JSON Schema pattern for excluding a set of string values from a valid schema. Combines an allOf with a not containing an anyOf of constant values, enforcing exclusion at validation. Suitable for modeling enumeration gaps or blacklisting specific constants.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  allOf: [{\n    not: {\n      anyOf: [\n        { const: 'x' },\n        { const: 'y' },\n        { const: 'z' }\n      ]\n    }\n  }, {\n    type: 'string'\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Logging in a FastAPI Application in Python\nDESCRIPTION: This Python code snippet shows the initial setup for adding logging to a FastAPI application. It imports the necessary modules (`logging`, `FastAPI`, `Request`, `time`) and initializes a FastAPI `app` instance. This serves as a starting point for implementing more comprehensive logging, such as request/response logging or integrating with logging configuration files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom fastapi import FastAPI, Request\nimport time\n\napp = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Strings with `format` Option in Picomatch (JavaScript)\nDESCRIPTION: Illustrates using the `format` option in `picomatch` to define a custom function that modifies input strings before the matching process. The example function removes a leading `./` from paths, enabling a match against the pattern `foo/*.js`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n// strip leading './' from strings\nconst format = str => str.replace(/^\\.\\//, '');\nconst isMatch = picomatch('foo/*.js', { format });\nconsole.log(isMatch('./foo/bar.js')) //=> true\n```\n\n----------------------------------------\n\nTITLE: Testing Command-Line Output Differences on Windows Using exit (Shell)\nDESCRIPTION: This shell command sequence shows how to test the difference in output between a Node.js script using the 'exit' module and one using process.exit directly. It pipes both stdout and stderr through a filter to display lines containing 'std', demonstrating that the 'exit' module ensures complete output before process termination while process.exit may cause message truncation. This requires Node.js installed, and the 'exit' module for one script. Outputs are compared by examining the presence or absence of expected lines.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/exit/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nC:\\\\node-exit\\\\test\\\\fixtures>node log.js 0 10 stdout stderr 2>&1 | find \"std\"\nstdout 0\nstderr 0\nstdout 1\nstderr 1\nstdout 2\nstderr 2\nstdout 3\nstderr 3\nstdout 4\nstderr 4\nstdout 5\nstderr 5\nstdout 6\nstderr 6\nstdout 7\nstderr 7\nstdout 8\nstderr 8\nstdout 9\nstderr 9\n\nC:\\\\node-exit\\\\test\\\\fixtures>node log-broken.js 0 10 stdout stderr 2>&1 | find \"std\"\n\nC:\\\\node-exit\\\\test\\\\fixtures>\n```\n\n----------------------------------------\n\nTITLE: Using a Single Prompt - Prompts Library - JavaScript\nDESCRIPTION: Demonstrates basic usage of the 'prompts' library by asking a single question to the user and handling a numeric response. Requires the prompts package to be installed. Input is validated so users under 18 are rejected with a custom message, while valid input is logged as an object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst prompts = require('prompts');\n\n(async () => {\n  const response = await prompts({\n    type: 'number',\n    name: 'value',\n    message: 'How old are you?',\n    validate: value => value < 18 ? `Nightclub is 18+ only` : true\n  });\n\n  console.log(response); // => { value: 24 }\n})();\n```\n\n----------------------------------------\n\nTITLE: Identifying Division via Invalid Regex Flags\nDESCRIPTION: Illustrates how `js-tokens` can correctly identify division (`bar / 2/e`) when the character following the potential regex literal's closing slash is not a valid regex flag (like 'e'). The tokenizer only recognizes standard flags (`g`, `m`, `i`, `y`, `u`, `s`, `d`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nvar number = bar / 2/e\n```\n\n----------------------------------------\n\nTITLE: Installing p-try Using npm in Shell\nDESCRIPTION: This shell command installs the 'p-try' package from the npm registry. It must be run in a terminal within a Node.js project directory. There are no parameters. The command will add 'p-try' as a dependency to your project, enabling its use in your JavaScript files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-try/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```\n$ npm install p-try\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Octal Literals (JavaScript)\nDESCRIPTION: Illustrates the use of the `numbers: 'octal'` option to represent numeric values as JavaScript octal integer literals (prefixed with `0o`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\njsesc(42, {\n  'numbers': 'octal'\n});\n// → '0o52'\n```\n\n----------------------------------------\n\nTITLE: Using 'debug' in Browser-Side JavaScript\nDESCRIPTION: Provides an example of using the `debug` library in browser-side JavaScript. It creates two debugger instances ('worker:a' and 'worker:b') and logs messages periodically using `setInterval`. This code assumes `debug` has been included (e.g., via Browserify) and enabled (e.g., via `localStorage`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n----------------------------------------\n\nTITLE: Using 'debug' in Browser JavaScript\nDESCRIPTION: Demonstrates creating and using multiple 'debug' instances ('worker:a', 'worker:b') within browser-side JavaScript. Debug messages are logged periodically using `setInterval`. Output depends on the `localStorage.debug` setting and browser console's verbose level.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n----------------------------------------\n\nTITLE: Parsing a Glob Pattern for Regex Source with Micromatch in JavaScript\nDESCRIPTION: Shows how to call the `mm.parse` function from the 'micromatch' library. This function parses a glob pattern to generate the source string components for building a regular expression. Requires the 'micromatch' library. Takes a glob pattern string and optional options. Returns an object containing parsed components and properties useful for regex construction.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst mm = require('micromatch');\nconst state = mm.parse(pattern[, options]);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using test-exclude in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the test-exclude library. It shows how to require the module, create a new instance with default options, and use the 'shouldInstrument' method to determine if a specific file ('./foo.js') meets the criteria for inclusion (e.g., for code coverage instrumentation).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/test-exclude/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst TestExclude = require('test-exclude');\nconst exclude = new TestExclude();\nif (exclude.shouldInstrument('./foo.js')) {\n    // let's instrument this file for test coverage!\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Int64 Instances - JavaScript\nDESCRIPTION: Shows how to require and instantiate Int64 objects from the node-int64 library using different types of inputs. Demonstrates proper 64-bit int representation, value display, and internal octet string, even when outside JS Number precision. Requires node-int64 as a dependency. Inputs include numbers and hexadecimal strings, and outputs display Int64 object representations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-int64/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// So let's create a couple Int64s using the above values ...\\n\\n// Require, of course\\n> Int64 = require('node-int64')\\n\\n// x's value is what we expect (the decimal value of 0x123456789)\\n> x = new Int64(0x123456789)\\n[Int64 value:4886718345 octets:00 00 00 01 23 45 67 89]\\n\\n// y's value is Infinity because it's outside the range of integer\\n// precision.  But that's okay - it's still useful because it's internal\\n// representation (octets) is what we passed in\\n> y = new Int64('123456789abcdef0')\\n[Int64 value:Infinity octets:12 34 56 78 9a bc de f0]\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Tailwind CSS\nDESCRIPTION: Installs Tailwind CSS and its peer dependencies (postcss, autoprefixer) via npm, initializes Tailwind configuration, and includes the necessary Tailwind directives in the main CSS file. This setup enables the use of Tailwind utility classes within the React project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss postcss autoprefixer\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss init\n```\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Installing @ampproject/remapping via npm (Shell)\nDESCRIPTION: Shows how to install the @ampproject/remapping package from npm, which is required to use any of the code samples and to enable source map remapping capabilities in your project. No parameters are involved, and this command is run in your project root. You must have Node.js and npm installed beforehand.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@ampproject/remapping/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @ampproject/remapping\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Sourcemap Codec Performance (Text)\nDESCRIPTION: Presents benchmark results comparing the performance (operations per second) and memory usage of `@jridgewell/sourcemap-codec` against other popular sourcemap libraries for both decoding and encoding tasks. The benchmarks were run using Node.js v20.10.0 on various sourcemap files of different sizes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/sourcemap-codec/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nnode v20.10.0\n\namp.js.map - 45120 segments\n\nDecode Memory Usage:\nlocal code                             5815135 bytes\n@jridgewell/sourcemap-codec 1.4.15     5868160 bytes\nsourcemap-codec                        5492584 bytes\nsource-map-0.6.1                      13569984 bytes\nsource-map-0.8.0                       6390584 bytes\nchrome dev tools                       8011136 bytes\nSmallest memory usage is sourcemap-codec\n\nDecode speed:\ndecode: local code x 492 ops/sec ±1.22% (90 runs sampled)\ndecode: @jridgewell/sourcemap-codec 1.4.15 x 499 ops/sec ±1.16% (89 runs sampled)\ndecode: sourcemap-codec x 376 ops/sec ±1.66% (89 runs sampled)\ndecode: source-map-0.6.1 x 34.99 ops/sec ±0.94% (48 runs sampled)\ndecode: source-map-0.8.0 x 351 ops/sec ±0.07% (95 runs sampled)\nchrome dev tools x 165 ops/sec ±0.91% (86 runs sampled)\nFastest is decode: @jridgewell/sourcemap-codec 1.4.15\n\nEncode Memory Usage:\nlocal code                              444248 bytes\n@jridgewell/sourcemap-codec 1.4.15      623024 bytes\nsourcemap-codec                        8696280 bytes\nsource-map-0.6.1                       8745176 bytes\nsource-map-0.8.0                       8736624 bytes\nSmallest memory usage is local code\n\nEncode speed:\nencode: local code x 796 ops/sec ±0.11% (97 runs sampled)\nencode: @jridgewell/sourcemap-codec 1.4.15 x 795 ops/sec ±0.25% (98 runs sampled)\nencode: sourcemap-codec x 231 ops/sec ±0.83% (86 runs sampled)\nencode: source-map-0.6.1 x 166 ops/sec ±0.57% (86 runs sampled)\nencode: source-map-0.8.0 x 203 ops/sec ±0.45% (88 runs sampled)\nFastest is encode: local code,encode: @jridgewell/sourcemap-codec 1.4.15\n\n\n***\n\n\nbabel.min.js.map - 347793 segments\n\nDecode Memory Usage:\nlocal code                            35424960 bytes\n@jridgewell/sourcemap-codec 1.4.15    35424696 bytes\nsourcemap-codec                       36033464 bytes\nsource-map-0.6.1                      62253704 bytes\nsource-map-0.8.0                      43843920 bytes\nchrome dev tools                      45111400 bytes\nSmallest memory usage is @jridgewell/sourcemap-codec 1.4.15\n\nDecode speed:\ndecode: local code x 38.18 ops/sec ±5.44% (52 runs sampled)\ndecode: @jridgewell/sourcemap-codec 1.4.15 x 38.36 ops/sec ±5.02% (52 runs sampled)\ndecode: sourcemap-codec x 34.05 ops/sec ±4.45% (47 runs sampled)\ndecode: source-map-0.6.1 x 4.31 ops/sec ±2.76% (15 runs sampled)\ndecode: source-map-0.8.0 x 55.60 ops/sec ±0.13% (73 runs sampled)\nchrome dev tools x 16.94 ops/sec ±3.78% (46 runs sampled)\nFastest is decode: source-map-0.8.0\n\nEncode Memory Usage:\nlocal code                             2606016 bytes\n@jridgewell/sourcemap-codec 1.4.15     2626440 bytes\nsourcemap-codec                       21152576 bytes\nsource-map-0.6.1                      25023928 bytes\nsource-map-0.8.0                      25256448 bytes\nSmallest memory usage is local code\n\nEncode speed:\nencode: local code x 127 ops/sec ±0.18% (83 runs sampled)\nencode: @jridgewell/sourcemap-codec 1.4.15 x 128 ops/sec ±0.26% (83 runs sampled)\nencode: sourcemap-codec x 29.31 ops/sec ±2.55% (53 runs sampled)\nencode: source-map-0.6.1 x 18.85 ops/sec ±3.19% (36 runs sampled)\nencode: source-map-0.8.0 x 19.34 ops/sec ±1.97% (36 runs sampled)\nFastest is encode: @jridgewell/sourcemap-codec 1.4.15\n\n\n***\n\n\npreact.js.map - 1992 segments\n\nDecode Memory Usage:\nlocal code                              261696 bytes\n@jridgewell/sourcemap-codec 1.4.15      244296 bytes\nsourcemap-codec                         302816 bytes\nsource-map-0.6.1                        939176 bytes\nsource-map-0.8.0                           336 bytes\nchrome dev tools                        587368 bytes\nSmallest memory usage is source-map-0.8.0\n\nDecode speed:\ndecode: local code x 17,782 ops/sec ±0.32% (97 runs sampled)\ndecode: @jridgewell/sourcemap-codec 1.4.15 x 17,863 ops/sec ±0.40% (100 runs sampled)\ndecode: sourcemap-codec x 12,453 ops/sec ±0.27% (101 runs sampled)\ndecode: source-map-0.6.1 x 1,288 ops/sec ±1.05% (96 runs sampled)\ndecode: source-map-0.8.0 x 9,289 ops/sec ±0.27% (101 runs sampled)\nchrome dev tools x 4,769 ops/sec ±0.18% (100 runs sampled)\nFastest is decode: @jridgewell/sourcemap-codec 1.4.15\n\nEncode Memory Usage:\nlocal code                              262944 bytes\n@jridgewell/sourcemap-codec 1.4.15       25544 bytes\nsourcemap-codec                         323048 bytes\nsource-map-0.6.1                        507808 bytes\nsource-map-0.8.0                        507480 bytes\nSmallest memory usage is @jridgewell/sourcemap-codec 1.4.15\n\nEncode speed:\nencode: local code x 24,207 ops/sec ±0.79% (95 runs sampled)\nencode: @jridgewell/sourcemap-codec 1.4.15 x 24,288 ops/sec ±0.48% (96 runs sampled)\nencode: sourcemap-codec x 6,761 ops/sec ±0.21% (100 runs sampled)\nencode: source-map-0.6.1 x 5,374 ops/sec ±0.17% (99 runs sampled)\nencode: source-map-0.8.0 x 5,633 ops/sec ±0.32% (99 runs sampled)\nFastest is encode: @jridgewell/sourcemap-codec 1.4.15,encode: local code\n\n\n***\n\n\nreact.js.map - 5726 segments\n\nDecode Memory Usage:\nlocal code                              678816 bytes\n@jridgewell/sourcemap-codec 1.4.15      678816 bytes\nsourcemap-codec                         816400 bytes\nsource-map-0.6.1                       2288864 bytes\nsource-map-0.8.0                        721360 bytes\nchrome dev tools                       1012512 bytes\nSmallest memory usage is local code\n\nDecode speed:\ndecode: local code x 6,178 ops/sec ±0.19% (98 runs sampled)\ndecode: @jridgewell/sourcemap-codec 1.4.15 x 6,261 ops/sec ±0.22% (100 runs sampled)\ndecode: sourcemap-codec x 4,472 ops/sec ±0.90% (99 runs sampled)\ndecode: source-map-0.6.1 x 449 ops/sec ±0.31% (95 runs sampled)\ndecode: source-map-0.8.0 x 3,219 ops/sec ±0.13% (100 runs sampled)\nchrome dev tools x 1,743 ops/sec ±0.20% (99 runs sampled)\nFastest is decode: @jridgewell/sourcemap-codec 1.4.15\n\nEncode Memory Usage:\nlocal code                              140960 bytes\n@jridgewell/sourcemap-codec 1.4.15      159808 bytes\nsourcemap-codec                         969304 bytes\nsource-map-0.6.1                        930520 bytes\nsource-map-0.8.0                        930248 bytes\nSmallest memory usage is local code\n\nEncode speed:\nencode: local code x 8,013 ops/sec ±0.19% (100 runs sampled)\nencode: @jridgewell/sourcemap-codec 1.4.15 x 7,989 ops/sec ±0.20% (101 runs sampled)\nencode: sourcemap-codec x 2,472 ops/sec ±0.21% (99 runs sampled)\nencode: source-map-0.6.1 x 2,200 ops/sec ±0.17% (99 runs sampled)\nencode: source-map-0.8.0 x 2,220 ops/sec ±0.37% (99 runs sampled)\nFastest is encode: local code\n\n\n***\n\n\nvscode.map - 2141001 segments\n\nDecode Memory Usage:\nlocal code                           198955264 bytes\n@jridgewell/sourcemap-codec 1.4.15   199175352 bytes\nsourcemap-codec                      199102688 bytes\nsource-map-0.6.1                     386323432 bytes\nsource-map-0.8.0                     244116432 bytes\nchrome dev tools                     293734280 bytes\nSmallest memory usage is local code\n\nDecode speed:\ndecode: local code x 3.90 ops/sec ±22.21% (15 runs sampled)\ndecode: @jridgewell/sourcemap-codec 1.4.15 x 3.95 ops/sec ±23.53% (15 runs sampled)\ndecode: sourcemap-codec x 3.82 ops/sec ±17.94% (14 runs sampled)\ndecode: source-map-0.6.1 x 0.61 ops/sec ±7.81% (6 runs sampled)\ndecode: source-map-0.8.0 x 9.54 ops/sec ±0.28% (28 runs sampled)\nchrome dev tools x 2.18 ops/sec ±10.58% (10 runs sampled)\nFastest is decode: source-map-0.8.0\n\nEncode Memory Usage:\nlocal code                            13509880 bytes\n@jridgewell/sourcemap-codec 1.4.15    13537648 bytes\nsourcemap-codec                       32540104 bytes\nsource-map-0.6.1                     127531040 bytes\nsource-map-0.8.0                     127535312 bytes\nSmallest memory usage is local code\n\nEncode speed:\nencode: local code x 20.10 ops/sec ±0.19% (38 runs sampled)\nencode: @jridgewell/sourcemap-codec 1.4.15 x 20.26 ops/sec ±0.32% (38 runs sampled)\nencode: sourcemap-codec x 5.44 ops/sec ±1.64% (18 runs sampled)\nencode: source-map-0.6.1 x 2.30 ops/sec ±4.79% (10 runs sampled)\nencode: source-map-0.8.0 x 2.46 ops/sec ±6.53% (10 runs sampled)\nFastest is encode: @jridgewell/sourcemap-codec 1.4.15\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Finding Project Root Directory with pkg-dir in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the asynchronous usage of the 'pkg-dir' library. It imports the package, then uses an async IIFE to call `pkgDir()` with `__dirname` (the directory of the current module 'example.js'). The function searches upwards from './bar' until it finds the directory containing 'package.json' ('/Users/sindresorhus/foo') and logs it to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pkg-dir/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// example.js\nconst pkgDir = require('pkg-dir');\n\n(async () => {\n\tconst rootDir = await pkgDir(__dirname);\n\n\tconsole.log(rootDir);\n\t//=> '/Users/sindresorhus/foo'\n})();\n```\n\n----------------------------------------\n\nTITLE: Using call-bound to Securely Call Array.prototype.slice (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the 'call-bound' library to obtain a secure reference to the 'Array.prototype.slice' method. It then shows that this bound function works correctly even after deleting 'Function.prototype.call', 'Function.prototype.bind', and 'Array.prototype.slice' from their respective prototypes, highlighting the robustness provided by 'call-bound'. It requires the 'assert' module for verification and the 'call-bound' library itself.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/call-bound/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst assert = require('assert');\nconst callBound = require('call-bound');\n\nconst slice = callBound('Array.prototype.slice');\n\ndelete Function.prototype.call;\ndelete Function.prototype.bind;\ndelete Array.prototype.slice;\n\nassert.deepEqual(slice([1, 2, 3, 4], 1, -1), [2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Compiling Trust Functions with proxy-addr.compile in JavaScript\nDESCRIPTION: Demonstrates usage of proxy-addr.compile to create a reusable trust validation function from a string or list, optimizing for repeated use. Inputs include trust definition, resulting in a function that can be used in future proxy-addr invocations. This pattern is recommended for performance in high-throughput Node.js environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nvar trust = proxyaddr.compile('loopback')\nvar addr = proxyaddr(req, trust)\n```\n\n----------------------------------------\n\nTITLE: Installing parse-json via npm - Shell\nDESCRIPTION: Demonstrates the command needed to install the parse-json package from npm. No code execution is performed, just dependency installation. The command line uses 'npm install' to fetch and add the package to the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/parse-json/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install parse-json\n```\n\n----------------------------------------\n\nTITLE: Controlling Trailing Slashes in normalize-path for JavaScript\nDESCRIPTION: Shows how to prevent normalize-path from removing trailing slashes by passing false as the second argument. This is useful when filesystem APIs require trailing slashes to be preserved. Input paths remain otherwise normalized, and the function is used with an options parameter.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/normalize-path/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(normalize('foo\\\\bar\\\\baz\\\\', false)); //=> 'foo/bar/baz/'\nconsole.log(normalize('./foo/bar/baz/', false)); //=> './foo/bar/baz/'\n```\n\n----------------------------------------\n\nTITLE: Establishing Dark Mode Gradients and Background Surface Styles - CSS\nDESCRIPTION: This CSS block sets up color variables and surface backgrounds for dark mode, ensuring that UI surfaces (cards, popovers, dialogs, etc.) inherit the correct backgrounds and border colors. It distinguishes between light and dark contexts by scoping variables both at :root and within .dark domains. To be effective, components must reference the provided variables for both backgrounds and borders.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742708040241.txt#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\\n  --dark-bg-primary: #121212;\\n  --dark-bg-secondary: #1e1e1e;\\n  --dark-bg-tertiary: #2d2d2d;\\n  --dark-border: #3a3a3a;\\n  --dark-text-primary: #e0e0e0;\\n  --dark-text-secondary: #a0a0a0;\\n}\\n.dark {\\n  --surface-1: #1a1a1a;\\n  --surface-2: #222222;\\n  --surface-3: #2a2a2a;\\n  --surface-4: #333333;\\n}\\n.dark .card,\\n.dark .dropdown-content,\\n.dark .dialog-content,\\n.dark .popover-content {\\n  background-color: var(--surface-2);\\n  border-color: var(--dark-border);\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tailwind CSS Configuration using npx\nDESCRIPTION: This command uses npx (Node Package Execute) to run the Tailwind CSS CLI tool and initialize its configuration. It creates a `tailwind.config.js` file in the project root, which allows customization of Tailwind's theme, plugins, and importantly, configuring the purging of unused styles.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss init\n```\n\n----------------------------------------\n\nTITLE: Installing fill-range via npm (Shell)\nDESCRIPTION: Command to install the `fill-range` package using the Node Package Manager (npm) and save it as a dependency in your project's `package.json` file. Requires npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save fill-range\n```\n\n----------------------------------------\n\nTITLE: Using 'get-intrinsic' to Access and Cache JS Intrinsics in JavaScript\nDESCRIPTION: This JavaScript example demonstrates the core functionality of the `get-intrinsic` library. It shows how to require the library (`require('get-intrinsic')`) and use it to obtain references to built-in JavaScript intrinsics using their spec-defined names (e.g., '%Math.pow%', '%Array.prototype.push%'). The example highlights the library's caching behavior: even after the original global properties (`Math.pow`, `Array.prototype.push`) are deleted, the references obtained via `GetIntrinsic` continue to work correctly. It also demonstrates retrieving both static methods (`Math.pow`) and instance methods (`Array.prototype.push`), using `.call()` for the latter. Finally, it shows how the library handles requests for intrinsics that might be missing in the environment (simulated by deleting `JSON.parse`), either by throwing an error by default or by returning `undefined` if the optional second argument is set to `true`. The example uses the built-in `assert` module for verification.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-intrinsic/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar GetIntrinsic = require('get-intrinsic');\nvar assert = require('assert');\n\n// static methods\nassert.equal(GetIntrinsic('%Math.pow%'), Math.pow);\nassert.equal(Math.pow(2, 3), 8);\nassert.equal(GetIntrinsic('%Math.pow%')(2, 3), 8);\ndelete Math.pow;\nassert.equal(GetIntrinsic('%Math.pow%')(2, 3), 8);\n\n// instance methods\nvar arr = [1];\nassert.equal(GetIntrinsic('%Array.prototype.push%'), Array.prototype.push);\nassert.deepEqual(arr, [1]);\n\narr.push(2);\nassert.deepEqual(arr, [1, 2]);\n\nGetIntrinsic('%Array.prototype.push%').call(arr, 3);\nassert.deepEqual(arr, [1, 2, 3]);\n\ndelete Array.prototype.push;\nGetIntrinsic('%Array.prototype.push%').call(arr, 4);\nassert.deepEqual(arr, [1, 2, 3, 4]);\n\n// missing features\ndelete JSON.parse; // to simulate a real intrinsic that is missing in the environment\nassert.throws(() => GetIntrinsic('%JSON.parse%'));\nassert.equal(undefined, GetIntrinsic('%JSON.parse%', true));\n```\n\n----------------------------------------\n\nTITLE: Filtering an Array using minimatch.filter in JavaScript\nDESCRIPTION: Demonstrates how to use the `minimatch.filter` function to create a predicate suitable for `Array.prototype.filter`. This example filters a list of files (`fileList`) to include only those matching the \"*.js\" pattern, using the `matchBase` option. Requires the `minimatch` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/minimatch/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true}))\n```\n\n----------------------------------------\n\nTITLE: Requesting a Simulated Animation Frame with FakeTimers - JavaScript\nDESCRIPTION: Schedules a callback to execute on the next animation frame (typically every 16 ticks) using 'clock.requestAnimationFrame'. Returns an ID for cancellation and works in both browser and Node.js environments. Requires a callback as input and offers cancellation via cancelAnimationFrame.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclock.requestAnimationFrame(callback)\n```\n\n----------------------------------------\n\nTITLE: Checking Object.defineProperty Reliability with es-define-property in JavaScript\nDESCRIPTION: This JavaScript snippet checks whether the es-define-property package provides a reliable version of Object.defineProperty, correctly handling broken implementations like Internet Explorer 8's. The code imports Node.js' assert module and the es-define-property package, then performs runtime checks to determine if the available functionality matches ECMAScript 5 standards, setting fallbacks for malfunctioning or missing implementations. Dependencies: Node.js, es-define-property, assert. Inputs: none; Output: Boolean assertions indicating environment capability. The snippet serves as a feature detection pattern for cross-environment compatibility.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/es-define-property/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst assert = require('assert');\\n\\nconst $defineProperty = require('es-define-property');\\n\\nif ($defineProperty) {\\n    assert.equal($defineProperty, Object.defineProperty);\\n} else if (Object.defineProperty) {\\n    assert.equal($defineProperty, false, 'this is IE 8');\\n} else {\\n    assert.equal($defineProperty, false, 'this is an ES3 engine');\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Source Map Support with Mocha - Bash\nDESCRIPTION: Specifies how to require source-map-support/register when running tests with Mocha. This ensures stack traces in Mocha test output are mapped to the original source files. Make sure source-map-support is installed and accessible in your environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmocha --require source-map-support/register tests/\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Roleplay Prompts with AI\nDESCRIPTION: Uses AI to instantly generate unique roleplay prompts tailored to a student's chosen instructional area upon starting an Interactive AI Judge session. This ensures relevant and immediate engagement for simulated practice.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_9\n\nLANGUAGE: AI Tool\nCODE:\n```\nAI Roleplay Prompt Generation\nTrigger: Start of Interactive AI Judge session.\nInput: Student's chosen instructional area (e.g., Financial Analysis, Marketing).\nProcess: AI generates a unique, relevant roleplay scenario prompt.\nOutput: Text-based roleplay prompt presented to the student.\n```\n\n----------------------------------------\n\nTITLE: Allocating a Buffer Filled with a Specific Value and Encoding in JavaScript\nDESCRIPTION: Shows how to use `Buffer.alloc(size, fill, encoding)` to allocate a new Buffer and initialize it by calling `buf.fill(fill, encoding)`. This is useful for filling with patterns specified in encodings like 'base64'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\nconsole.log(buf);\n  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tests for Picomatch - Shell\nDESCRIPTION: Instructions for installing npm dependencies and running the project's test suite using bash shell commands. Requires Node.js and npm installed. Executes `npm install` to fetch dependencies, and `npm test` to run tests, verifying library correctness.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install && npm test\n\n```\n\n----------------------------------------\n\nTITLE: Querying File System with Glob Patterns in Node.js JavaScript\nDESCRIPTION: This snippet demonstrates asynchronously searching for files that match a given pattern using the \"glob\" npm module in JavaScript. The \"glob\" function accepts a pattern (such as \"**/*.js\"), options (optional configuration object), and a callback function with error and results arguments. It supports additional options, like \"nonull\", that change the behavior on no matches. Output is an array of matched filenames, or an error if occurred. Requires \"glob\" to be installed and available via require.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/glob/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar glob = require(\"glob\")\n\n// options is optional\nglob(\"**/*.js\", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is [\"**/*.js\"]\n  // er is an error object or null.\n})\n```\n\n----------------------------------------\n\nTITLE: Splitting a File Stream into Lines using split2 in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of `split2`. It creates a readable stream from a file using `fs.createReadStream` and pipes it through `split2()`. The `split2` stream then emits each line from the file as a separate chunk in its 'data' event handler. By default, `split2` splits the stream based on newline characters (/\n?\n/).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/split2/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\n  fs.createReadStream(file)\n    .pipe(split2())\n    .on('data', function (line) {\n      //each chunk now is a separate line!\n    })\n\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Traverse with yarn - Shell\nDESCRIPTION: This snippet shows the yarn command for adding @babel/traverse as a development dependency. Ensure that yarn is properly installed and initialized in your project before executing this. It adds the package to your development dependencies,\nallowing Babel AST manipulation features.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/traverse --dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Package Tests in Shell\nDESCRIPTION: Provides the command to install dependencies and run the test suite for the normalize-path package. These commands require an npm-compatible environment and will execute the packaged tests as defined in the project's configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/normalize-path/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install && npm test\n```\n\n----------------------------------------\n\nTITLE: Backward-Compatible Buffer Allocation for Numbers (Node.js) - JavaScript\nDESCRIPTION: This JavaScript code provides two alternative patterns for allocating zero-filled buffers for numeric lengths, compatible with both newer and legacy Node.js versions. The first snippet uses Buffer.alloc() where available or falls back to new Buffer() plus fill(0) for Node.js 0.10.x and earlier. The second snippet simplifies this with a ternary for Node.js ≥0.12.x. No external dependencies are required. Inputs are a numeric buffer length, output is a zero-filled buffer object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safer-buffer/Porting-Buffer.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar buf;\\nif (Buffer.alloc) {\\n  buf = Buffer.alloc(number);\\n} else {\\n  buf = new Buffer(number);\\n  buf.fill(0);\\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf = Buffer.alloc ? Buffer.alloc(number) : new Buffer(number).fill(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing a SourceMapGenerator Instance in JavaScript\nDESCRIPTION: Demonstrates how to create a new `SourceMapGenerator` instance. The constructor optionally accepts an object with properties like `file` (the generated file name), `sourceRoot` (a base URL for source files), and `skipValidation` (a boolean to disable mapping validation for performance, use with caution).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar generator = new sourceMap.SourceMapGenerator({\n  file: \"my-generated-javascript-file.js\",\n  sourceRoot: \"http://example.com/app/js/\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Instantiating Custom Error Types with makeerror in JavaScript\nDESCRIPTION: Demonstrates how to import the makeerror library and create a new custom error constructor with a fixed message. The example shows instantiation of the error type and sets up the prototype chain such that instances are recognized as both UnknownFileTypeError and Error. Dependencies: Node.js and the 'makeerror' library. The inputs are optional message and data; outputs are error objects with appropriate inheritance and message properties.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/makeerror/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar makeError = require('makeerror')\nvar UnknownFileTypeError = makeError(\n  'UnknownFileTypeError',\n  'The specified type is not known.'\n)\nvar er = UnknownFileTypeError()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ner instanceof UnknownFileTypeError\ner instanceof Error\n```\n\n----------------------------------------\n\nTITLE: Setting a Simulated Timeout with FakeTimers - JavaScript\nDESCRIPTION: Schedules a callback to execute after the specified timeout using the FakeTimers 'clock.setTimeout' method. Accepts a callback and a timeout duration in milliseconds and returns a timer object or ID depending on environment. Key parameters are callback (function) and timeout (number). Returned IDs can be used for later cancellation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = clock.setTimeout(callback, timeout)\n```\n\n----------------------------------------\n\nTITLE: Installing braces Package using npm - Shell\nDESCRIPTION: Demonstrates how to install the 'braces' library via npm from the command line. This is a prerequisite for any further usage or code examples in JavaScript, as it provides the brace expansion functionality. Run this command in your terminal to install 'braces' into your project dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save braces\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Content-Type with typer.parse(req) - Node.js (JavaScript)\nDESCRIPTION: This example shows usage of 'typer.parse' by passing an HTTP request object. It acts as a shortcut for parsing the 'content-type' header directly, automatically extracting and parsing the header into a normalized media type object. The request's headers must include a 'content-type' field for correct operation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/media-typer/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = typer.parse(req)\n```\n\n----------------------------------------\n\nTITLE: Installing node-postgres via npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'pg' package (node-postgres) and its dependencies into the current project or globally if the appropriate flag is used. This is the standard way to add node-postgres to a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install pg\n```\n\n----------------------------------------\n\nTITLE: Adding Dark Mode Gradients and Box Surfaces via CSS Variables (CSS)\nDESCRIPTION: Defines dark theme variables for backgrounds and borders (e.g., --dark-bg-primary, --dark-border) and applies them to .dark .card and .dark .dropdown-content selectors to ensure surfaces adapt to dark mode. Assumes 'dark' is toggled on a parent (usually via a .dark class on html/body). Intended for merging with existing CSS and depends on consistent use of these variables app-wide.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --dark-bg-primary: #121212;\n  --dark-border: #3a3a3a;\n  /* etc. */\n}\n\n.dark .card,\n.dark .dropdown-content {\n  background-color: var(--surface-2);\n  border-color: var(--dark-border);\n}\n/* etc. */\n```\n\n----------------------------------------\n\nTITLE: API Example: Wrapping a Generator with co.wrap in JavaScript\nDESCRIPTION: Demonstrates the `co.wrap()` API function. It accepts a generator function (`fn*`) and returns a regular asynchronous function. Calling this returned function executes the generator logic and returns a Promise that resolves with the generator's final result or rejects on error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nvar fn = co.wrap(function* (val) {\\n  return yield Promise.resolve(val);\\n});\\n\\nfn(true).then(function (val) {\\n\\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling the Break Timer Modal in React JSX\nDESCRIPTION: Illustrates the basic usage of functions, likely obtained from the `useMicroInteractions` context, to control the visibility of the break timer modal. The `showBreakTimer` function displays the modal, initiating a timed break with mini-games, while `hideBreakTimer` dismisses it.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/DEVELOPMENT_LOG.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Show break timer modal\nshowBreakTimer();\n\n// Hide break timer modal\nhideBreakTimer();\n```\n\n----------------------------------------\n\nTITLE: Displaying ts-node and TypeScript Environment Versions (Shell)\nDESCRIPTION: Runs the 'ts-node -vv' command to print the current versions of ts-node, Node.js, and the TypeScript compiler. Helps users debug path and configuration issues by verifying which binaries are in use. Output includes version headers for each relevant tool.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ ts-node -vv\nts-node v10.0.0\nnode v16.1.0\ncompiler v4.2.2\n```\n\n----------------------------------------\n\nTITLE: Displaying ISC License Text for yargs-parser\nDESCRIPTION: Presents the full text of the ISC License used by the 'yargs-parser' library, credited to Ben Coe and Contributors. This permissive license allows free use, modification, and distribution, requiring only the retention of the copyright notice.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/LICENSE.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2016, Contributors\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice\nappear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE\nLIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES\nOR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompt for Yes/No Input - JavaScript\nDESCRIPTION: Defines a 'confirm' prompt that asks the user for a yes/no answer with an optional initial value set to true. It is triggered via the prompts library and returns a boolean response. Useful for branching logic or confirmation dialogs in interactive scripts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'confirm',\\n  name: 'value',\\n  message: 'Can you confirm?',\\n  initial: true\\n}\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Data with Proper Headers using node-fetch - JavaScript\nDESCRIPTION: Shows how to post a JSON-encoded object to a remote endpoint, including manually setting the Content-Type header to 'application/json'. Uses JSON.stringify() for the request body and demonstrates correct configuration of headers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nconst body = {a: 1};\n\nconst response = await fetch('https://httpbin.org/post', {\n\tmethod: 'post',\n\tbody: JSON.stringify(body),\n\theaders: {'Content-Type': 'application/json'}\n});\nconst data = await response.json();\n\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Referencing InteractionShowcase Component Path (TSX Comment)\nDESCRIPTION: This comment points to the file path of the `InteractionShowcase` component (`client/src/components/micro-interactions/interaction-showcase.tsx`), which serves as a demonstration and testing ground for all available micro-interactions within the DecA(I)de application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/components/micro-interactions/interaction-showcase.tsx\n```\n\n----------------------------------------\n\nTITLE: Verifying Backend Health Endpoint - Bash and JSON\nDESCRIPTION: Uses curl to test the health endpoint of the API at /api/health to ensure the backend server is operational. The expected JSON response is {\"status\":\"healthy\"}. Useful for initial verification and monitoring automations. No authentication required for this check.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/api/health\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"status\":\"healthy\"}\n```\n\n----------------------------------------\n\nTITLE: Installing 'debug' library using npm\nDESCRIPTION: Installs the 'debug' package globally or locally using the Node Package Manager (npm). This command downloads and installs the library, making it available for use in Node.js projects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install debug\n```\n\n----------------------------------------\n\nTITLE: Converting SourceNode to String with SourceMap in JavaScript\nDESCRIPTION: Shows the `toStringWithSourceMap` prototype method. This method generates both the concatenated string representation of the code and a corresponding `SourceMapGenerator` object containing all mapping information between the generated code and the original sources. It accepts options for the `SourceMapGenerator`, such as the output file name.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.js\", [\n  new SourceNode(3, 4, \"b.js\", \"uno\"),\n  \"dos\",\n  [\n    \"tres\",\n    new SourceNode(5, 6, \"c.js\", \"quatro\")\n  ]\n]);\n\nnode.toStringWithSourceMap({ file: \"my-output-file.js\" })\n// { code: 'unodostresquatro',\n//   map: [object SourceMapGenerator] }\n```\n\n----------------------------------------\n\nTITLE: Parsing Content-Type from Response Object with contentType.parse - JavaScript\nDESCRIPTION: This snippet retrieves and parses the Content-Type header set on an HTTP response object using 'content-type'. It is a shortcut for parsing output from 'res.getHeader(\\'content-type\\')'. Requires Node.js, a response object supporting getHeader(), and the 'content-type' package. Throws TypeError if the header is missing or invalid.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-type/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = contentType.parse(res)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecations via NO_DEPRECATION Environment Variable (Shell)\nDESCRIPTION: Demonstrates how to suppress deprecation warnings for specific namespaces ('my-module', 'othermod') by setting the `NO_DEPRECATION` environment variable when running a Node.js application. Use '*' to suppress all.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Support: Disabling Uncaught Exception Handler\nDESCRIPTION: JavaScript code demonstrating how to initialize the source map support while disabling the default uncaught exception handler. This is done by passing an options object with `handleUncaughtExceptions` set to `false` to the `install()` method.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@cspotcode/source-map-support').install({\n  handleUncaughtExceptions: false\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Memphis Style Decorators into a React Component (TSX)\nDESCRIPTION: Illustrates embedding decorative `div` elements (with class `decorator`) within a reusable React component (`EnhancedCard`). These decorators are intended to be styled by CSS rules associated with the Memphis theme (e.g., `.memphis-style.enabled .decorator`) and will only become visible when the Memphis style is active.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction EnhancedCard({ children, className, ...props }: CardProps) {\n  return (\n    <div className={`card ${className}`}>\n      {/* Memphis decorators */}\n      <div className=\"decorator decorator-1\"></div>\n      <div className=\"decorator decorator-2\"></div>\n      <div className=\"decorator decorator-3\"></div>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Module Keys using require-directory (JavaScript)\nDESCRIPTION: Illustrates the `rename` option, which accepts a function to customize the keys used in the output hash. The function receives the default key (usually the filename without extension) and should return the desired new key. This example converts the name to uppercase.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  renamer = function(name) {\n    return name.toUpperCase();\n  },\n  hash = requireDirectory(module, {rename: renamer});\n```\n\n----------------------------------------\n\nTITLE: Using Emittery Mixin Decorator in TypeScript\nDESCRIPTION: Demonstrates the usage of the `@Emittery.mixin()` decorator in TypeScript. This decorator injects Emittery functionality into a class by adding an Emittery instance as a specified property (e.g., 'emittery') and optionally binding specific or all Emittery methods directly to the class instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport Emittery = require('emittery');\n\n@Emittery.mixin('emittery')\nclass MyClass {}\n\nconst instance = new MyClass();\n\ninstance.emit('event');\n```\n\n----------------------------------------\n\nTITLE: Matching a Pattern Against a List using minimatch.match in JavaScript\nDESCRIPTION: Illustrates the use of `minimatch.match` to find all elements in a list (`fileList`) that match a given glob pattern (`*.js`). The `matchBase` option is also used. This function returns an array of matching items. If `options.nonull` is set and no matches are found, it returns the pattern itself. Requires the `minimatch` library. Note: The original code snippet has a syntax error (extra parenthesis) which is preserved.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/minimatch/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true}))\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Layouts with Tailwind CSS Flexbox/Grid\nDESCRIPTION: Leverages Tailwind CSS utility classes for flexbox and grid to build adaptive layouts. These layouts can rearrange content dynamically based on screen size, such as transforming a sidebar navigation into a top bar on smaller mobile screens.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nflexbox/grid via Tailwind\n```\n\n----------------------------------------\n\nTITLE: API Example: Using co(fn*) to Execute a Generator in JavaScript\nDESCRIPTION: Illustrates the primary API usage: invoking `co` with a generator function. This executes the generator and returns a Promise. The Promise resolves with the generator's final return value or rejects if an error is thrown or a yielded Promise rejects. The `.then()` method handles the success and error cases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nco(function* () {\\n  return yield Promise.resolve(true);\\n}).then(function (val) {\\n  console.log(val);\\n}, function (err) {\\n  console.error(err.stack);\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Node.js Applications - JavaScript\nDESCRIPTION: Illustrates how to use a try-catch block in JavaScript to gracefully handle runtime exceptions. This pattern helps prevent application crashes and provides useful error messages. Place your application logic inside the try block; errors thrown are caught and logged via console.error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-To-address-the-issue-of-the-app-not-running-and-to-fix-any-errors-reported-in-the-Console-I-will-fo-1742642783064.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n    // Your application logic\n} catch (error) {\n    console.error(\"An error occurred\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a SourceNode in JavaScript\nDESCRIPTION: Demonstrates how to create a new SourceNode instance. The constructor accepts optional original line (1-based), column (0-based), source filename, initial code chunk (string, SourceNode, or array), and original identifier name. This example shows nesting SourceNode instances.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.cpp\", [\n  new SourceNode(3, 4, \"b.cpp\", \"extern int status;\\n\"),\n  new SourceNode(5, 6, \"c.cpp\", \"std::string* make_string(size_t n);\\n\"),\n  new SourceNode(7, 8, \"d.cpp\", \"int main(int argc, char** argv) {}\\n\"),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining API Helper Function for Roleplay Generation - React JavaScript\nDESCRIPTION: This JavaScript snippet defines an async function for calling a backend endpoint from the frontend in a React app. It sends a POST request with JSON data to the '/api/generateRoleplay' route, passing event type and performance indicators, then returns the response as JSON. Dependencies include the Fetch API and a backend endpoint at '/api/generateRoleplay'; it is typically placed in a utilities/helper file (e.g., api.js) and imported by React components needing to generate roleplay scenarios.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function generateRoleplay(eventType, PIs) {\n  const res = await fetch('/api/generateRoleplay', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ eventType, performanceIndicators: PIs })\n  });\n  return res.json(); // assuming your endpoint returns JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Type with TypeSystem in TypeScript\nDESCRIPTION: This snippet illustrates how to define a custom data type 'Point' with 'x' and 'y' number properties using the `TypeSystem.Type` function. It includes defining the static type (`PointType`), options (`PointOptions`), and the validation logic. The example demonstrates instantiating the type factory, inferring the TypeScript type using `Static`, and validating an object using `Value.Check`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\ntype PointOptions = { }                              // The Type Options\n\ntype PointType = { x: number, y: number }            // The Static<T> Type\n\nconst Point = TypeSystem.Type<PointType, PointOptions>('Point', (options, value) => {\n  return (\n    typeof value === 'object' && value !== null &&\n    typeof value.x === 'number' && \n    typeof value.y === 'number'\n  )\n})\n\nconst T = Point()\n\ntype T = Static<typeof T>                             // type T = { x: number, y: number }\n\nconst R = Value.Check(T, { x: 1, y: 2 })              // const R = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode with dotenv.parse() in JavaScript\nDESCRIPTION: Shows how to activate debug logging for the `dotenv.parse()` function by passing an options object with `debug: true`. This helps diagnose issues when parsing potentially malformed input strings or buffers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('hello world')\nconst opt = { debug: true }\nconst config = dotenv.parse(buf, opt)\n// expect a debug message because the buffer is not in KEY=VAL form\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to a New Express.js App Scaffold in Console\nDESCRIPTION: This command uses the express-generator CLI to scaffold a new Express.js app at the given path and then changes the working directory to that new application folder. It requires the express-generator to be installed globally. The parameter '/tmp/foo' specifies the target directory. Successful execution creates a new app structure and sets the working directory for further setup.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ express /tmp/foo && cd /tmp/foo\n```\n\n----------------------------------------\n\nTITLE: Parsing Postgres Array Strings using postgres-array in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the 'postgres-array' library to parse a Postgres array string into a JavaScript array. The parse function takes the Postgres array string as its input and optionally applies a transformation function (here, parsing values to integers). The expected input is a string formatted as a Postgres array, and the output is a JavaScript array. The example requires that 'postgres-array' is installed and available in the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-array/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar postgresArray = require('postgres-array')\n\npostgresArray.parse('{1,2,3}', (value) => parseInt(value, 10))\n//=> [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Installing side-channel via npm - Shell\nDESCRIPTION: This snippet demonstrates the installation of the side-channel package using npm in a shell environment. It is required as a prerequisite for all subsequent JavaScript examples. Run this command in the project directory to add side-channel as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save side-channel\n```\n\n----------------------------------------\n\nTITLE: Using semver module in Node.js\nDESCRIPTION: Demonstrates how to require the `semver` module in a Node.js application and use its core functions like `valid`, `clean`, `satisfies`, `gt`, `lt`, `minVersion`, and `coerce` for version validation, comparison, and manipulation. Requires Node.js and the `semver` package installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\nsemver.minVersion('>=1.0.0') // '1.0.0'\nsemver.valid(semver.coerce('v2')) // '2.0.0'\nsemver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'\n```\n\n----------------------------------------\n\nTITLE: Applying Accessibility Enhancements During App Initialization - TypeScript (accessibility.ts)\nDESCRIPTION: Implement accessibility.ts, providing an applyAccessibility function to be invoked during app initialization. This function sets accessibility attributes, ARIA labels, or keyboard behaviors as needed, with additional settings exposed via UI toggles. Suitable for use in React 'App.tsx', ensures optimal accessibility compliance with minimal integration effort.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// accessibility.ts\nexport function applyAccessibility() {\n  // Example: set focus ring or add ARIA attributes programmatically\n  document.body.classList.add('a11y-enhanced');\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Diff Lines Using Callback Functions in Jest (JavaScript)\nDESCRIPTION: Implements a function to format changed and unchanged diff lines between two values, as used in Jest test failure outputs. This function depends on a serializer (such as pretty-format used by Jest) via the 'format' function to generate string representations of objects, and a 'diff' function to compute the longest common subsequence. The function separates objects into unindented and indented lines, then produces an array marking deletions (with '-', for expected lines), insertions (with '+', for received lines), and common (unchanged) lines (with ' '). Key parameters are the two objects to compare ('a' and 'b'), and the outputs are arrays of formatted diff lines for reporting. Requires the 'format' and 'diff' functions to be available in the scope. Limitations include Markdown rendering of adjacent spaces mitigated by use of middle dots in comments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Format diff with minus or plus for change lines and space for common lines.\nconst formatDiffLines = (a, b) => {\n  // Jest depends on pretty-format package to serialize objects as strings.\n  // Unindented for comparison to avoid distracting differences:\n  const aLinesUn = format(a, {indent: 0 /*, other options*/}).split('\\n');\n  const bLinesUn = format(b, {indent: 0 /*, other options*/}).split('\\n');\n  // Indented to display changed and unchanged lines:\n  const aLinesIn = format(a, {indent: 2 /*, other options*/}).split('\\n');\n  const bLinesIn = format(b, {indent: 2 /*, other options*/}).split('\\n');\n\n  const aLength = aLinesIn.length; // Validate: aLinesUn.length === aLength\n  const bLength = bLinesIn.length; // Validate: bLinesUn.length === bLength\n\n  const isCommon = (aIndex, bIndex) => aLinesUn[aIndex] === bLinesUn[bIndex];\n\n  // Only because the GitHub Flavored Markdown doc collapses adjacent spaces,\n  // this example code and the following table represent spaces as middle dots.\n  let aIndex = 0;\n  let bIndex = 0;\n  const array = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    for (; aIndex !== aCommon; aIndex += 1) {\n      array.push(`-·${aLinesIn[aIndex]}`); // delete is minus\n    }\n    for (; bIndex !== bCommon; bIndex += 1) {\n      array.push(`+·${bLinesIn[bIndex]}`); // insert is plus\n    }\n    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {\n      // For common lines, received indentation seems more intuitive.\n      array.push(`··${bLinesIn[bIndex]}`); // common is space\n    }\n  };\n\n  diff(aLength, bLength, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change lines.\n  for (; aIndex !== aLength; aIndex += 1) {\n    array.push(`-·${aLinesIn[aIndex]}`);\n  }\n  for (; bIndex !== bLength; bIndex += 1) {\n    array.push(`+·${bLinesIn[bIndex]}`);\n  }\n\n  return array;\n};\n\nconst expected = {\n  searching: '',\n  sorting: {\n    ascending: true,\n    fieldKey: 'what',\n  },\n};\nconst received = {\n  searching: '',\n  sorting: [\n    {\n      descending: false,\n      fieldKey: 'what',\n    },\n  ],\n};\n\nconst diffLines = formatDiffLines(expected, received);\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Commands with Argparse - JavaScript\nDESCRIPTION: This snippet shows how to set up sub-commands in a Node.js CLI using the 'argparse' library. The example creates a parser, defines subparsers with two sub-commands ('c1' and 'c2'), each with their own options, types, and help descriptions. Dependencies include 'argparse' and Node.js. Key parameters ('addSubparsers', 'addParser', 'addArgument') are used to declare command structures. Output is an object with properties for main arguments and sub-command arguments, with sub-command selection held in 'subcommand_name'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/argparse/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n#!/usr/bin/env node\\n'use strict';\\n\\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\\nvar parser = new ArgumentParser({\\n  version: '0.0.1',\\n  addHelp:true,\\n  description: 'Argparse examples: sub-commands',\\n});\\n\\nvar subparsers = parser.addSubparsers({\\n  title:'subcommands',\\n  dest:\"subcommand_name\"\\n});\\n\\nvar bar = subparsers.addParser('c1', {addHelp:true});\\nbar.addArgument(\\n  [ '-f', '--foo' ],\\n  {\\n    action: 'store',\\n    help: 'foo3 bar3'\\n  }\\n);\\nvar bar = subparsers.addParser(\\n  'c2',\\n  {aliases:['co'], addHelp:true}\\n);\\nbar.addArgument(\\n  [ '-b', '--bar' ],\\n  {\\n    action: 'store',\\n    type: 'int',\\n    help: 'foo3 bar3'\\n  }\\n);\\n\\nvar args = parser.parseArgs();\\nconsole.dir(args);\n```\n\n----------------------------------------\n\nTITLE: Mapping UI Color Schemes to CSS Variables in React (TypeScript)\nDESCRIPTION: Introduces a comprehensive colorMap object mapping color schemes ('business', 'finance', etc.) to palettes, then applies those as CSS variables in the browser document. Must be called with an 'appearance' object containing a colorScheme. Requires a React/JS environment and appropriate presence of the AppearanceSettings interface/type. No external dependencies. Updates the UI to reflect the chosen color scheme dynamically.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// In theme-controller.ts\nexport function applyTheme(appearance: AppearanceSettings): AppearanceSettings {\n  // existing code...\n  \n  const colorMap = {\n    business: {\n      primary: '#F59E0B', // amber-500\n      secondary: '#FCD34D', // amber-300\n      accent: '#B45309',    // amber-800\n      badge: '#F59E0B'\n    },\n    finance: {\n      primary: '#10B981', // emerald-500\n      secondary: '#6EE7B7', // emerald-300\n      accent: '#047857',    // emerald-800\n      badge: '#10B981'\n    },\n    // ...other clusters...\n    default: {\n      primary: '#06B6D4', // cyan-500\n      secondary: '#67E8F9', // cyan-300\n      accent: '#0E7490',    // cyan-800\n      badge: '#06B6D4'\n    }\n  };\n  \n  const colors = colorMap[appearance.colorScheme] || colorMap.default;\n  \n  document.documentElement.style.setProperty('--color-primary', colors.primary);\n  document.documentElement.style.setProperty('--color-secondary', colors.secondary);\n  document.documentElement.style.setProperty('--color-accent', colors.accent);\n  document.documentElement.style.setProperty('--color-badge', colors.badge);\n  \n  // rest of existing code...\n  return appearance;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Time Strings to Milliseconds with ms in JavaScript\nDESCRIPTION: Demonstrates usage of the 'ms' package to parse various human-readable time strings and convert them to the corresponding millisecond values. Inputs include both positive and negative time durations, with different units (days, hours, minutes, seconds, years, and plain numbers). No additional dependencies except for the 'ms' package itself are required. Outputs are integer representations of time in milliseconds, and all edge cases such as negative durations and raw numbers as strings are handled.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/ms/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nms('2 days')  // 172800000\\nms('1d')      // 86400000\\nms('10h')     // 36000000\\nms('2.5 hrs') // 9000000\\nms('2h')      // 7200000\\nms('1m')      // 60000\\nms('5s')      // 5000\\nms('1y')      // 31557600000\\nms('100')     // 100\\nms('-3 days') // -259200000\\nms('-1h')     // -3600000\\nms('-200')    // -200\n```\n\n----------------------------------------\n\nTITLE: Enumerating Validation Errors with TypeBox Value.Errors in TypeScript\nDESCRIPTION: Shows how to use the `Value.Errors` function from TypeBox to validate a value against a TypeBox schema (`T`) and enumerate any validation errors. It returns an iterator yielding error objects detailing the schema, path, value, and message for each validation failure. The spread syntax (`...`) is used to collect all errors into an array.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\n\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\n                                                     //   schema: { type: 'number' },\n                                                     //   path: '/x',\n                                                     //   value: '42',\n                                                     //   message: 'Expected number'\n                                                     // }, {\n                                                     //   schema: { type: 'number' },\n                                                     //   path: '/y',\n                                                     //   value: undefined,\n                                                     //   message: 'Expected number'\n                                                     // }]\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Options in Vite React Plugin - JavaScript\nDESCRIPTION: Illustrates how to pass custom Babel configuration to the React plugin, such as presets, plugins, and options for using .babelrc or babel.config.js files. This allows fine-grained control over Babel's transformation process before Fast Refresh and other internal transforms. Requires @vitejs/plugin-react and Babel-related dependencies; parameters include 'babel', 'presets', 'plugins', 'babelrc', 'configFile.'\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nreact({\\n  babel: {\\n    presets: [...],\\n    // Your plugins run before any built-in transform (eg: Fast Refresh)\\n    plugins: [...],\\n    // Use .babelrc files\\n    babelrc: true,\\n    // Use babel.config.js files\\n    configFile: true,\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Layouts using useIsMobile Hook in JSX\nDESCRIPTION: This JSX code snippet illustrates how to implement responsive design within a React component using the custom `useIsMobile` hook (imported from '@/hooks/use-mobile'). It calls the hook to get a boolean value indicating if the current viewport matches mobile criteria and conditionally applies either a \"mobile-layout\" or \"desktop-layout\" CSS class to a container `div`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useIsMobile } from '@/hooks/use-mobile';\n\nfunction ResponsiveComponent() {\n  const isMobile = useIsMobile();\n  \n  return (\n    <div className={isMobile ? \"mobile-layout\" : \"desktop-layout\"}>\n      {/* Responsive content */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Azure OpenAI Integration with Node.js - Bash\nDESCRIPTION: Executes a Node.js script named test-azure-integration.js which likely sends a test request to Azure OpenAI using Node.js. Ensures credentials, endpoint, and deployment name are valid. Prerequisites: Node.js and a properly configured script file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnode test-azure-integration.js\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous findUp for File/Directory Discovery in Node.js\nDESCRIPTION: Demonstrates using the asynchronous `findUp` function from the `find-up` library to locate files or directories by walking up the parent directory tree starting from the current file's location (`example.js`). It shows searching by a single filename, searching using an array of filenames (returning the first one found), and using a custom asynchronous matcher function with `findUp.exists` to find a specific directory ('/Users/sindresorhus'). Requires the `path` and `find-up` modules. The code is wrapped in an async IIFE (Immediately Invoked Function Expression) to use `await`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/find-up/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst findUp = require('find-up');\n\n(async () => {\n\tconsole.log(await findUp('unicorn.png'));\n\t//=> '/Users/sindresorhus/unicorn.png'\n\n\tconsole.log(await findUp(['rainbow.png', 'unicorn.png']));\n\t//=> '/Users/sindresorhus/unicorn.png'\n\n\tconsole.log(await findUp(async directory => {\n\t\tconst hasUnicorns = await findUp.exists(path.join(directory, 'unicorn.png'));\n\t\treturn hasUnicorns && directory;\n\t}, {type: 'directory'}));\n\t//=> '/Users/sindresorhus'\n})();\n```\n\n----------------------------------------\n\nTITLE: Negotiating Accept-Language Header - JavaScript\nDESCRIPTION: This code illustrates usage of Negotiator to determine preferred client languages from the Accept-Language header. It defines available server languages and retrieves both the ordered client language preferences as well as the best match from the supported options. Requires a request with Accept-Language headers; returns arrays or the most preferred language as output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/negotiator/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnegotiator = new Negotiator(request)\n\navailableLanguages = ['en', 'es', 'fr']\n\n// Let's say Accept-Language header is 'en;q=0.8, es, pt'\n\nnegotiator.languages()\n// -> ['es', 'pt', 'en']\n\nnegotiator.languages(availableLanguages)\n// -> ['es', 'en']\n\nlanguage = negotiator.language(availableLanguages)\n// -> 'es'\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom String Format with TypeSystem in TypeScript\nDESCRIPTION: This code registers a custom string format validation rule named 'lowercase' using `TypeSystem.Format`. The rule checks if a string value is entirely lowercase. It then demonstrates applying this custom format to a `Type.String` schema and checking values against it using `Value.Check`, showing both failing ('Hello') and passing ('hello') cases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nTypeSystem.Format('lowercase', value => value === value.toLowerCase()) // format should be lowercase\n\nconst T = Type.String({ format: 'lowercase' })       \n\nconst A = Value.Check(T, 'Hello')                    // const A = false\n\nconst B = Value.Check(T, 'hello')                    // const B = true\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing Roleplay Feature with Playwright - TypeScript\nDESCRIPTION: This Playwright-based E2E test script automates a user journey for the roleplay generation feature. It covers logging in, navigating to the roleplay page, filling in form fields (with selectors for instructional area, performance indicators, and difficulty), form submission, and verifying that result elements are populated. Dependencies: Playwright, running application instance, and credentials for test login.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// e2e/roleplay.test.ts\nimport { test, expect } from '@playwright/test'\n\ntest('generate roleplay scenario', async ({ page }) => {\n  // Login\n  await page.goto('/login')\n  await page.fill('input[name=\"username\"]', 'testuser')\n  await page.fill('input[name=\"password\"]', 'password')\n  await page.click('button[type=\"submit\"]')\n  \n  // Navigate to roleplay page\n  await page.goto('/roleplay')\n  \n  // Fill the form\n  await page.fill('input[name=\"instructionalArea\"]', 'Marketing')\n  await page.fill('input[name=\"performanceIndicators[0]\"]', 'Explain marketing concepts')\n  await page.selectOption('select[name=\"difficultyLevel\"]', 'medium')\n  \n  // Submit the form\n  await page.click('button[type=\"submit\"]')\n  \n  // Wait for response\n  await page.waitForSelector('.roleplay-result')\n  \n  // Check the results\n  const title = await page.textContent('.roleplay-title')\n  expect(title).toBeTruthy()\n  \n  const scenario = await page.textContent('.roleplay-scenario')\n  expect(scenario).toBeTruthy()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining DiegoAvatarProps Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure and types for the props accepted by the `DiegoAvatar` component. It specifies optional properties for controlling the avatar's emotion, size, CSS class, pointing direction, and swimming state.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--client-src-components-diego-guide-diego-avatar-tsx-interface-DiegoAvatarProps-emotion-ha-1742646842971.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DiegoAvatarProps {\n  emotion?: 'happy' | 'excited' | 'thinking' | 'neutral' | 'pointing';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  pointDirection?: 'left' | 'right' | 'up' | 'down';\n  swimming?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging .env Loading Issues with dotenv.config() in JavaScript\nDESCRIPTION: Shows how to enable debug mode using `dotenv.config({ debug: true })` as suggested in the FAQ section. This helps diagnose problems encountered while loading variables from the `.env` file by providing detailed console output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nrequire('dotenv').config({ debug: true })\n```\n\n----------------------------------------\n\nTITLE: Enabling SWC in tsconfig.json for ts-node (JSONC)\nDESCRIPTION: Configures ts-node to use SWC for transpilation by setting the 'swc' option to true under the 'ts-node' key in tsconfig.json. No additional properties are necessary. Ensure all SWC dependencies are installed for proper functionality.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"ts-node\": {\n    \"swc\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Modifiers with TypeBox, TypeScript, and JSON Schema - TypeScript\nDESCRIPTION: This code snippet presents an illustrative table comparing the application of modifiers such as Optional, Readonly, and ReadonlyOptional in defining schema properties using TypeBox, and how these map to TypeScript types and JSON Schema representations. It helps developers understand how TypeBox schema configurations translate to both type-level and schema-level constructs, enabling static inference of readonly or optional fields. No external dependencies are required except TypeBox, and no variable inputs or outputs are produced other than the type definitions and schema objects shown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\n│     Type.String()              │ }                           │   properties: {                │\n│   )                            │                             │     name: {                    │\n│ })  \t                         │                             │       type: 'string'           │\n│                                │                             │     }                          │\n│                                │                             │   }                            │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\n│     Type.String()              │ }                           │   properties: {                │\n│   )                            │                             │     name: {                    │\n│ })  \t                         │                             │       type: 'string'           │\n│                                │                             │     }                          │\n│                                │                             │   },                           │\n│                                │                             │   required: ['name']           │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\n│     Type.String()              │ }                           │   properties: {                │\n│   )                            │                             │     name: {                    │\n│ })  \t                         │                             │       type: 'string'           │\n│                                │                             │     }                          │\n│                                │                             │   }                            │\n│                                │                             │ }                              │\n│                                │                             │                                │\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Handling File Read Errors with finalhandler\nDESCRIPTION: Illustrates using finalhandler in a Node.js HTTP server to handle potential errors during an asynchronous file read operation. If reading 'index.html' fails, the error is passed to the `done` function (provided by finalhandler) for appropriate error response generation. Otherwise, the file content is sent as the response.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/finalhandler/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Parsing Source String with Babylon Parser in JavaScript\nDESCRIPTION: Demonstrates usage of the Babylon (now @babel/parser) library to parse a given JavaScript source string into an abstract syntax tree (AST). Requires the 'babylon' npm package. The key parameter is the source code string to be parsed; the output is an AST object. This is crucial for code analysis, transformation, or linting tools based on ESTree-like ASTs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst babylon = require('babylon');\\nconst ast = babylon.parse('var foo = \"lol\";');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with import() Syntax in JavaScript\nDESCRIPTION: Demonstrates the usage of the stage-2 dynamic import() proposal, allowing modules to be loaded at runtime. No dependencies except a JS engine or parser supporting dynamic import. The key input is a template string specifying the module path; the output is a promise resolving to the imported module. Limitations exist in non-supporting environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nimport(`./section-modules/${link.dataset.entryModule}.js`)\\n.then(module => {\\n  module.loadPageInto(main);\\n})\n```\n\n----------------------------------------\n\nTITLE: Piping and Capturing Execa Subprocess Output in JavaScript\nDESCRIPTION: Demonstrates piping a child process's standard output (`stdout`) to the parent process's `stdout` for real-time display while also capturing the complete output in a variable after the process finishes. Uses `execa` to run a simple `echo` command, pipes its `stdout` stream, and then awaits the promise to access the buffered `stdout` data. Requires the `execa` dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst execa = require('execa');\n\nconst subprocess = execa('echo', ['foo']);\nsubprocess.stdout.pipe(process.stdout);\n\n(async () => {\n\tconst {stdout} = await subprocess;\n\tconsole.log('child output:', stdout);\n})();\n```\n\n----------------------------------------\n\nTITLE: Generating a Unique ID with Nano ID in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the Nano ID library. It imports the `nanoid` function from the 'nanoid' package and calls it without arguments to generate a standard unique, URL-friendly string ID (default length 21). The generated ID is then assigned to the `id` property of a hypothetical `model` object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/nanoid/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { nanoid } from 'nanoid'\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\n----------------------------------------\n\nTITLE: Walking Source Contents in a SourceNode Tree (JavaScript)\nDESCRIPTION: Demonstrates `SourceNode.prototype.walkSourceContents` for iterating over the original source file contents associated with a SourceNode tree via `setSourceContent`. The callback function receives the source file name and its corresponding content.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nvar a = new SourceNode(1, 2, \"a.js\", \"generated from a\");\na.setSourceContent(\"a.js\", \"original a\");\nvar b = new SourceNode(1, 2, \"b.js\", \"generated from b\");\nb.setSourceContent(\"b.js\", \"original b\");\nvar c = new SourceNode(1, 2, \"c.js\", \"generated from c\");\nc.setSourceContent(\"c.js\", \"original c\");\n\nvar node = new SourceNode(null, null, null, [a, b, c]);\nnode.walkSourceContents(function (source, contents) { console.log(\"WALK:\", source, \":\", contents); })\n// WALK: a.js : original a\n// WALK: b.js : original b\n// WALK: c.js : original c\n```\n\n----------------------------------------\n\nTITLE: Using Semantic HTML Buttons for Accessibility\nDESCRIPTION: Employs the standard HTML `<button>` element for interactive controls instead of styled `<div>` elements. This ensures semantic correctness, making the button inherently focusable and activatable via keyboard and recognizable by screen readers, improving accessibility.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button>\n```\n\n----------------------------------------\n\nTITLE: Running Gulp with a TypeScript Gulpfile (Shell)\nDESCRIPTION: Executes the `gulp` command-line tool. Gulp has built-in support for `ts-node`, automatically detecting and using it if a `gulpfile.ts` is present in the project root. No extra configuration is typically needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\n```sh\n# Create a `gulpfile.ts` and run `gulp`.\ngulp\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Raw String Diffs without Cleanup using diffStringsRaw() in JavaScript\nDESCRIPTION: Example of using `diffStringsRaw` with the `cleanup` option set to `false`. This compares strings character-by-character using `diff-sequences` and returns an array of `Diff` objects ([type, substring]) without removing any common substrings, showing more granular differences. Requires `jest-diff`. Input: two strings (`a`, `b`), boolean `cleanup=false`. Output: Array of `Diff` objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst diffs = diffStringsRaw('changed from', 'changed to', false);\n```\n\n----------------------------------------\n\nTITLE: Scanning a Glob Pattern into Segments with Micromatch in JavaScript\nDESCRIPTION: Shows how to call the `mm.scan` function from the 'micromatch' library. This function analyzes a glob pattern and separates it into segments, returning an object representing the scanned state. Requires the 'micromatch' library. Takes a glob pattern string and optional options. The returned object contains details about the pattern structure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst mm = require('micromatch');\nconst state = mm.scan(pattern[, options]);\n```\n\n----------------------------------------\n\nTITLE: Installing safe-buffer via npm\nDESCRIPTION: Command to install the `safe-buffer` package using the Node Package Manager (npm). This package provides safer Buffer APIs compatible with various Node.js versions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install safe-buffer\n```\n\n----------------------------------------\n\nTITLE: Client Project Structure in React\nDESCRIPTION: Defines the directory structure for the React frontend application (client). It organizes reusable UI components (including base shadcn/ui components and layout elements), specific feature components (like break-timer and dashboard), custom React hooks, utility functions, page components, global styles, and the main application entry points.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nclient/\n├── src/\n│   ├── components/        # Reusable UI components\n│   │   ├── ui/            # Base UI components from shadcn/ui\n│   │   ├── layout/        # Layout components (sidebar, header, etc.)\n│   │   ├── break-timer/   # Break timer and games components\n│   │   ├── dashboard/     # Dashboard-specific components\n│   │   └── ...           \n│   ├── hooks/             # Custom React hooks\n│   ├── lib/               # Utility functions and libraries\n│   ├── pages/             # Page components for each route\n│   ├── styles/            # Global styles and Tailwind config\n│   ├── App.tsx            # Main application component\n│   └── main.tsx           # Application entry point\n```\n\n----------------------------------------\n\nTITLE: Chaining Methods with kleur for Complex Formatting (JavaScript)\nDESCRIPTION: Illustrates the chaining capabilities of the 'kleur' library. Multiple formatting methods (like bold, red, italic, yellow, bgRed, green, underline) are called sequentially to apply combined styles to strings before printing them to the console. Requires the 'kleur' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/kleur/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(bold().red('this is a bold red message'));\nconsole.log(bold().italic('this is a bold italicized message'));\nconsole.log(bold().yellow().bgRed().italic('this is a bold yellow italicized message'));\nconsole.log(green().bold().underline('this is a bold green underlined message'));\n```\n\n----------------------------------------\n\nTITLE: Loading make-error Directly in the Browser\nDESCRIPTION: This snippet shows how to add the prebuilt make-error package to a webpage using a <script> tag, making its classes globally available. The dependency is internet access to the CDN at unpkg.com, and it is usable in browser environments. No parameters are needed; it loads the library directly for use in browser scripts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-error/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/make-error@1/dist/make-error.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running Tests, Benchmarks, and Profiling for Node-Glob (Shell)\nDESCRIPTION: Provides shell commands using npm to execute various development tasks for the node-glob project. `npm test` runs the test suite, `npm run test-regen` regenerates test fixtures, `npm run bench` benchmarks the library against bash/zsh, and `npm run prof` profiles the JavaScript code. These commands are essential for contributors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/glob/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# to run tests\nnpm test\n\n# to re-generate test fixtures\nnpm run test-regen\n\n# to benchmark against bash/zsh\nnpm run bench\n\n# to profile javascript\nnpm run prof\n```\n\n----------------------------------------\n\nTITLE: Implementing JSX Spread Children Syntax (JavaScript/JSX)\nDESCRIPTION: Demonstrates the syntax for spreading an array of elements as children within a JSX element using the spread operator (`{...}`). In this example, an array of `Todo` components generated by `todos.map` is spread as children of the `div`. The surrounding text notes that React might not adopt this specific syntax.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_46\n\nLANGUAGE: js\nCODE:\n```\n<div>\n  {...todos.map(todo => <Todo key={todo.id} todo={todo}/>)}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Theme Variables in React Components for Colors (JSX/React)\nDESCRIPTION: This JSX demonstrates how to assign themed colors to components using CSS variables for background and text colors. It is used to ensure consistent theming (reflecting the cluster or dark mode) in Button and Badge components. Key parameters: CSS classes referencing --color-primary, --color-dark, and --color-badge. Dependency: Up-to-date color variables on :root per the theming system.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<Button variant=\"default\" className=\"bg-[var(--color-primary)] hover:bg-[var(--color-dark)] text-white\">\n  Learn More\n</Button>\n<Badge className=\"bg-[var(--color-badge)] text-white\">\n  {eventCode}\n</Badge>\n```\n\n----------------------------------------\n\nTITLE: Named Exports Overclassification Example (JavaScript)\nDESCRIPTION: Demonstrates the overclassification behavior of cjs-module-lexer when identifiers are shadowed or values are assigned to similarly named but unrelated objects. The lexer detects export assignments based solely on syntax patterns, missing scoping differences. There are no external dependencies; the effect is described in comments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS EXPORTS: a, b, c\n(function (exports, Object) {\n  exports.a = 'a';\n  exports['b'] = 'b';\n  if (false)\n    exports.c = 'c';\n})(NOT_EXPORTS, NOT_OBJECT);\n```\n\n----------------------------------------\n\nTITLE: Installing Acorn-Walk via NPM - Shell Script\nDESCRIPTION: This shell command installs the acorn-walk package from the npm registry, making it available for use in JavaScript projects. The installation should be executed in a Node.js project directory. No parameters are required; on success, acorn-walk and its dependencies will be placed under node_modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn-walk/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install acorn-walk\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Names on Emittery Instances - JavaScript\nDESCRIPTION: Demonstrates configuring individual Emittery instance debug names for logging events. Relies on the emittery package and requires enabling debug mode globally. The instance is passed the {debug: {name: 'myEmitter'}} options object. Logs named debug output when emitting. No input beyond the code itself; outputs include timestamped debug events in the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nEmittery.isDebugEnabled = true;\n\nconst emitter = new Emittery({debug: {name: 'myEmitter'}});\n\nemitter.on('test', data => {\n\t// …\n});\n\nemitter.emit('test');\n//=> [16:43:20.417][emittery:subscribe][myEmitter] Event Name: test\n//\tdata: undefined\n```\n\n----------------------------------------\n\nTITLE: Mapping Full Chromium Version to Array of Electron Versions with chromiumToElectron (Node.js)\nDESCRIPTION: Demonstrates mapping a full Chromium version to all Electron release numbers containing that Chromium build. Returns an array of version strings and is useful for exhaustive compatibility lists. Requires the e2c module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar electronVersions = e2c.chromiumToElectron('56.0.2924.87');\n// electronVersions is [\"1.6.3\", \"1.6.2\", \"1.6.1\", \"1.6.0\"]\n```\n\n----------------------------------------\n\nTITLE: Database Creation - Bash\nDESCRIPTION: Provides commands to create a PostgreSQL database named 'decade_db' for use by the DecA(I)de platform. Requires PostgreSQL to be installed and accessible. You may use createdb or your own admin tool. The result is a new database schema ready for initialization.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb decade_db\n# Or use your PostgreSQL administration tool of choice\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Jest Suites using each.describe.skip - JavaScript\nDESCRIPTION: Skips the specified parameterized suite and all contained tests by using describe.skip. Convenient for temporarily omitting test groups without removal, such as large/incomplete datasets.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).describe.skip('.add(%d, %d)', (a, b, expected) => {\\n  test(`returns ${expected}`, () => {\\n    expect(a + b).toBe(expected);\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing path-to-regexp in JavaScript\nDESCRIPTION: Demonstrates importing the 'path-to-regexp' Node.js package using require. This is necessary before using the package's functionality in a JavaScript application or Node.js environment. The require statement is standard for CommonJS module imports; ensure 'path-to-regexp' is installed via npm before using.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-to-regexp/Readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathToRegexp = require('path-to-regexp');\n```\n\n----------------------------------------\n\nTITLE: Defining gracefulify Function in TypeScript (@types/graceful-fs)\nDESCRIPTION: This TypeScript definition file (`index.d.ts`) exports all members from the standard Node.js 'fs' module and defines the `gracefulify` function. The `gracefulify` function is a generic function designed to patch an fs-like module (like the global `fs`) to add graceful handling for EMFILE errors, intended for use only at the top level of an application. It depends on `@types/node` for Node.js type references.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/graceful-fs/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"node\" />\n\nexport * from \"fs\";\n\n/**\n * Use this method to patch the global fs module (or any other fs-like module).\n * NOTE: This should only ever be done at the top-level application layer, in order to delay on\n * EMFILE errors from any fs-using dependencies. You should **not** do this in a library, because\n * it can cause unexpected delays in other parts of the program.\n * @param fsModule The reference to the fs module or an fs-like module.\n */\nexport function gracefulify<T>(fsModule: T): T;\n\n```\n\n----------------------------------------\n\nTITLE: Vulnerable HTTP Server Handling User-Supplied Data with Buffer - JavaScript\nDESCRIPTION: Defines an HTTP server that reads JSON payloads, extracts a 'str' property, and converts it to a hexadecimal string using the Buffer constructor. If 'body.str' is a number, uninitialized memory may be disclosed to the client. Requires the 'http' module and assumes well-formed JSON input; demonstrates a classic remote memory disclosure vulnerability.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Take a JSON payload {str: \"some string\"} and convert it to hex\\nvar server = http.createServer(function (req, res) {\\n  var data = ''\\n  req.setEncoding('utf8')\\n  req.on('data', function (chunk) {\\n    data += chunk\\n  })\\n  req.on('end', function () {\\n    var body = JSON.parse(data)\\n    res.end(new Buffer(body.str).toString('hex'))\\n  })\\n})\\n\\nserver.listen(8080)\\n\n```\n\n----------------------------------------\n\nTITLE: Appending File Context to Syntax Errors with errorEx.append - JavaScript\nDESCRIPTION: This snippet shows how to enhance error messages for syntax-related exceptions by appending file context using errorEx.append. After requiring 'error-ex', a custom SyntaxError is created where the fileName property dictates the appended context. Inputs are the initial error message and file path, and the output is a comprehensive error message with source file information.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/error-ex/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar errorEx = require('error-ex');\n\nvar SyntaxError = errorEx('SyntaxError', {fileName: errorEx.append('in %s')});\n\nvar err = new SyntaxError('improper indentation');\nerr.fileName = '/a/b/c/d/foo.js';\nthrow err;\n\n/*\n\tSyntaxError: improper indentation in /a/b/c/d/foo.js\n\t    at tryReadme() (readme.js:7:1)\n*/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generated Position using SourceMapConsumer in JavaScript\nDESCRIPTION: Illustrates the `generatedPositionFor` method of `SourceMapConsumer`. It accepts an object with `source` (filename), `line` (1-based), and `column` (0-based) properties from the original source. The method returns an object with the corresponding `line` (1-based) and `column` (0-based) in the generated source, or null values if unavailable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconsumer.generatedPositionFor({ source: \"example.js\", line: 2, column: 10 })\n// { line: 1,\n//   column: 56 }\n```\n\n----------------------------------------\n\nTITLE: Detecting Custom Types via Symbol.toStringTag with type-detect (JavaScript)\nDESCRIPTION: Shows how `type-detect` respects the `Symbol.toStringTag` property on objects. By setting this property, developers can define a custom string representation that `type-detect` will return. Requires the `type-detect` library, an assertion library, and an environment supporting ES6 Symbols.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar myObject = {};\nmyObject[Symbol.toStringTag] = 'myCustomType';\nassert(type(myObject) === 'myCustomType');\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Node Name in istanbul-reports (JavaScript)\nDESCRIPTION: Represents a method call on a 'node' object, likely representing a file or directory within the coverage structure. Its purpose is to retrieve the relative path or name of the node within the project context, which is useful for displaying structured report information. Requires a valid `node` object instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-reports/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnode.getRelativeName\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Variables with dotenv.config() in JavaScript (FAQ)\nDESCRIPTION: Re-iterates the use of `dotenv.config({ override: true })` as mentioned in the FAQ. This option ensures that variables loaded from the `.env` file will overwrite any variables with the same name that already exist in the environment (`process.env`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ override: true })\n```\n\n----------------------------------------\n\nTITLE: Displaying semver CLI Help Output\nDESCRIPTION: Shows the output generated when running the `semver` command-line tool with the `-h` (help) option. It details the usage, available options (like `-r`, `-i`, `--preid`, `-l`, `-n`, `-p`, `-c`), and general behavior of the CLI utility. Assumes the `semver` package is installed globally or accessible via `npx`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n$ semver -h\n\nA JavaScript implementation of the https://semver.org/ specification\nCopyright Isaac Z. Schlueter\n\nUsage: semver [options] <version> [<version> [...]]\nPrints valid versions sorted by SemVer precedence\n\nOptions:\n-r --range <range>\n        Print versions that match the specified range.\n\n-i --increment [<level>]\n        Increment a version by the specified level.  Level can\n        be one of: major, minor, patch, premajor, preminor,\n        prepatch, prerelease, or release.  Default level is 'patch'.\n        Only one version may be specified.\n\n--preid <identifier>\n        Identifier to be used to prefix premajor, preminor,\n        prepatch or prerelease version increments.\n\n-l --loose\n        Interpret versions and ranges loosely\n\n-n <0|1|false>\n        This is the base to be used for the prerelease identifier.\n        Set to 'false' to omit the identifier number altogether.\n\n-p --include-prerelease\n        Always include prerelease versions in range matching\n\n-c --coerce\n        Coerce a string into SemVer if possible\n        (does not imply --loose)\n\n--rtl\n        Coerce version strings right to left\n\n--ltr\n        Coerce version strings left to right (default)\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no satisfying versions are found, then exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI SDK for Node.js (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the official OpenAI SDK (`openai` package). This dependency is required for the backend Node.js application to interact with the Azure OpenAI API.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install openai\n```\n\n----------------------------------------\n\nTITLE: Importing the 'on-finished' Module in Node.js\nDESCRIPTION: Shows the standard Node.js method for importing the 'on-finished' module using the `require` function. The module's functionality is assigned to the `onFinished` variable, making it accessible within the script.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/on-finished/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar onFinished = require('on-finished')\n```\n\n----------------------------------------\n\nTITLE: Requiring the Forwarded Module in Node.js (JavaScript)\nDESCRIPTION: This snippet shows how to import the \"forwarded\" module using CommonJS \"require\" syntax in a Node.js environment. Before using this code, the module must be installed via npm. The required module is assigned to the \"forwarded\" variable for further use in request handling functions. No inputs or outputs are involved at this step.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/forwarded/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar forwarded = require('forwarded')\n```\n\n----------------------------------------\n\nTITLE: Importing range-parser Module - JavaScript\nDESCRIPTION: Shows how to require the 'range-parser' module in a Node.js application, assigning it to the variable 'parseRange' for further use. This import is necessary before invoking any parsing functionality. No additional dependencies are required beyond the installed npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/range-parser/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nvar parseRange = require('range-parser')\n```\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Code Using Node in Bash\nDESCRIPTION: Shows how to execute the provided JavaScript example file using Node.js, and illustrates the expected output from invoking the 'balanced-match' functionality on sample input strings. Requires Node.js runtime installed and the 'balanced-match' package available. Expects 'example.js' to contain JavaScript code and will output the details of the first matched balanced pair in each case.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/balanced-match/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ node example.js\n{ start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' }\n{ start: 3,\n  end: 9,\n  pre: 'pre',\n  body: 'first',\n  post: 'between{second}post' }\n{ start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'unknown-options-as-args' Behavior (Enabled)\nDESCRIPTION: This console example shows the output when the `unknown-options-as-args` option is enabled. Unknown options (`--unknown-option`, `--unknown-option2`) are treated as positional arguments and added to the `_` array instead of being parsed as options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin with npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @babel/plugin-syntax-object-rest-spread package using npm. The '--save-dev' flag adds the plugin as a development dependency, ensuring it is available during the build process but not included in production deployments. This command requires npm to be installed and initialized in the project directory ('package.json' present). Output will be updated dependencies in 'package.json' and installation of the required Babel plugin.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-object-rest-spread/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-object-rest-spread\n```\n\n----------------------------------------\n\nTITLE: Applying HSV Color and Bold Style with Chalk in JavaScript\nDESCRIPTION: This snippet demonstrates applying a foreground color using HSV (Hue, Saturation, Value) values (`32, 100, 100`) and the bold style via the Chalk library. Requires the 'chalk' npm package. Input includes three HSV integer values and the text; output is an ANSI-escaped string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.hsv(32, 100, 100).bold('Orange!')\n```\n\n----------------------------------------\n\nTITLE: Using Node.js EventEmitter in JavaScript\nDESCRIPTION: This JavaScript example demonstrates importing the 'events' package, creating an EventEmitter instance, registering an event listener with 'on', and emitting an event with 'emit'. Dependencies include the 'events' module (either built-in or installed separately). The listener receives a text message as its parameter and logs it to the console. The expected output is the message 'hello world' printed when the 'message' event is emitted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/events/Readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar EventEmitter = require('events')\n\nvar ee = new EventEmitter()\nee.on('message', function (text) {\n  console.log(text)\n})\nee.emit('message', 'hello world')\n```\n\n----------------------------------------\n\nTITLE: Basic Demo: Compiled JavaScript Code with Source Map Support\nDESCRIPTION: The compiled version (`compiled.js`) of `original.js`. It includes the call to `require('@cspotcode/source-map-support').install()` to enable source mapping and a `sourceMappingURL` comment pointing to the map file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@cspotcode/source-map-support').install();\n\nthrow new Error('test'); // This is the compiled code\n// The next line defines the sourceMapping.\n//# sourceMappingURL=compiled.js.map\n```\n\n----------------------------------------\n\nTITLE: Importing jest-each in JavaScript (ES6 and ES5)\nDESCRIPTION: Demonstrates how to import the jest-each library in both ES6 and ES5 JavaScript environments. Requires the jest-each package to be installed as a dependency. Users can import with any variable name due to default export, and both module syntaxes are shown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// es6\\nimport each from 'jest-each';\n```\n\nLANGUAGE: js\nCODE:\n```\n// es5\\nconst each = require('jest-each').default;\n```\n\n----------------------------------------\n\nTITLE: Requiring a JSON5 File Directly in Node.js with require()\nDESCRIPTION: This code demonstrates synchronously loading a JSON5 config file in Node.js after registering the JSON5 loader hook. The contents of 'config.json5' are automatically parsed and assigned to the config variable for in-process use. Requires 'json5/lib/register' to have been loaded beforehand.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = require('./config.json5')\n```\n\n----------------------------------------\n\nTITLE: Querying Node.js Core Modules with is-core-module (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the 'is-core-module' npm package to check if a given module name is a Node.js core module. It uses require statements to import dependencies and makes assertions to verify the module's behavior. To run this example, ensure that 'is-core-module' and 'assert' are available in your environment (typically, 'assert' is built-in with Node.js). The inputs are module specifier strings (e.g., 'fs', 'butts'), and the output is a boolean indicating whether the specifier is a core module. No additional configuration is required; the package defaults to the current Node.js version.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-core-module/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar isCore = require('is-core-module');\\nvar assert = require('assert');\\nassert(isCore('fs'));\\nassert(!isCore('butts'));\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-path via npm (Shell)\nDESCRIPTION: This command installs the `npm-run-path` package globally or locally using the Node Package Manager (npm). This package is required to use the functionality described in the subsequent JavaScript snippets.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/npm-run-path/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install npm-run-path\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Design and Mobile Optimization with Tailwind CSS - CSS & JSX\nDESCRIPTION: Demonstrates how to use Tailwind CSS responsive utility classes (sm:, md:, lg:, etc.), flexbox, and grid layouts for adaptive user interface design. No direct dependencies besides Tailwind CSS; assumes components are authored in JSX/TSX (e.g., React or Next.js). Key parameters are CSS classes controlling responsiveness; layouts respond to various screen sizes, tested in browser dev tools. Outputs visually adaptive components but requires developer awareness of accessibility (e.g., reduced motion support).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n// Example React component using Tailwind CSS for responsive layout\n// Usage: Place inside your component files\n\n/*\n<div className=\"flex flex-col md:flex-row gap-4\">\n  <div className=\"basis-full md:basis-1\\/3\">Sidebar</div>\n  <div className=\"grow\">Main Content</div>\n</div>\n*/\n```\n\n----------------------------------------\n\nTITLE: Initializing depd with a Namespace (JavaScript)\nDESCRIPTION: Initializes the 'depd' module by requiring it and calling the returned function with a namespace string. This namespace (typically the module name) is used in deprecation messages. It's crucial to create a new instance in each file where deprecations are needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar deprecate = require('depd')('my-module')\n```\n\n----------------------------------------\n\nTITLE: Including and Using web-streams-polyfill in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the `web-streams-polyfill` in a web page. It shows two options for including the polyfill script: fetching it from the unpkg CDN or loading it from a local path. After the script is loaded, it shows a simple example of creating a `ReadableStream`, which relies on the polyfill having augmented the global scope.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/web-streams-polyfill/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- option 1: hosted by unpkg CDN -->\n<script src=\"https://unpkg.com/web-streams-polyfill/dist/polyfill.min.js\"></script>\n<!-- option 2: self hosted -->\n<script src=\"/path/to/web-streams-polyfill/dist/polyfill.min.js\"></script>\n<script>\nvar readable = new ReadableStream();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository Using Git - Shell Script (bash)\nDESCRIPTION: This snippet provides commands to clone the DecA(I)de repository using Git and navigate into the project directory. Prerequisites include having Git installed on your system. The snippet expects that 'yourusername' will be replaced with the actual username if different. The input is the repo URL, and the output is a new directory 'decade' containing the project files in your working directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/decade.git\ncd decade\n```\n\n----------------------------------------\n\nTITLE: Overriding Debug Environment Variable with enable() - Shell\nDESCRIPTION: Displays how calling 'enable()' in a Node.js REPL can override the DEBUG environment variable previously set. The command tests if the 'foo' namespace is still enabled after calling 'enable(\"bar\")'. Requires 'debug' package and Node.js environment. Output is 'false' as 'bar' overrides 'foo'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_14\n\nLANGUAGE: \nCODE:\n```\n$ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))'\n=> false\n```\n\n----------------------------------------\n\nTITLE: Extending 'debug' Namespaces using extend() (JavaScript)\nDESCRIPTION: Illustrates the use of the 'extend()' method provided by a 'debug' instance. It creates a base logger ('auth') and then derives new loggers ('logSign', 'logLogin') with extended namespaces ('auth:sign', 'auth:login') from the base logger. Requires the 'debug' module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst log = require('debug')('auth');\n\n//creates new debug instance with extended namespace\nconst logSign = log.extend('sign');\nconst logLogin = log.extend('login');\n\nlog('hello'); // auth hello\nlogSign('hello'); //auth:sign hello\nlogLogin('hello'); //auth:login hello\n```\n\n----------------------------------------\n\nTITLE: Skipping Concurrent Parameterized Tests using jest-each.test.concurrent.skip - JavaScript\nDESCRIPTION: Shows how to skip concurrent parameterized tests with .test.concurrent.skip. The defined test cases are ignored during execution, letting developers focus on other areas or temporarily disable problematic concurrent cases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).test.concurrent.skip(\\n  'returns the result of adding %d to %d',\\n  (a, b, expected) => {\\n    expect(a + b).toBe(expected);\\n  },\\n);\n```\n\n----------------------------------------\n\nTITLE: Constructing a SourceMapConsumer from Raw Source Map Data in JavaScript\nDESCRIPTION: This snippet shows how to construct a SourceMapConsumer instance by passing in a raw source map JSON object. Used to prepare for source map queries, it requires source-map-js and a valid rawSourceMapJsonData object. The constructor expects structured source map fields (version, sources, names, mappings, etc.), and after creation, exposes the instance for subsequent calls to query mapping information.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar consumer = new sourceMap.SourceMapConsumer(rawSourceMapJsonData);\n```\n\n----------------------------------------\n\nTITLE: Defining the 'never' Type Using TypeBox in TypeScript\nDESCRIPTION: Uses Type.Never() to explicitly define a schema that matches no valid value. This is equivalent to TypeScript's 'never' type and is useful for modeling impossible states or schema branches that should be excluded from valid data. No dependencies aside from TypeBox. Expects no parameters; output is a schema that validates nothing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Never()\n```\n\n----------------------------------------\n\nTITLE: Assigning Admin Role to User - SQL\nDESCRIPTION: Updates the specified user in the users table to have an 'admin' role by executing a SQL UPDATE statement. Requires SQL-level access to the PostgreSQL database and correct table/column names. Replace 'your_username' with the actual username you wish to grant admin privileges.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE users SET role = 'admin' WHERE username = 'your_username';\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Generated Positions using SourceMapConsumer in JavaScript\nDESCRIPTION: Shows the usage of `allGeneratedPositionsFor` on `SourceMapConsumer`. This method finds all generated code positions corresponding to a given original `source` and `line` (1-based). An optional `column` (0-based) can be provided for more specific matching. It returns an array of objects, each containing `line` (1-based) and `column` (0-based) properties for a generated position.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconsumer.allGeneratedpositionsfor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1 },\n//   { line: 2,\n//     column: 10 },\n//   { line: 2,\n//     column: 20 } ]\n```\n\n----------------------------------------\n\nTITLE: Generating Lowercase Hexadecimal Escapes with jsesc in JavaScript\nDESCRIPTION: Demonstrates the 'lowercaseHex: true' option in the jsesc JavaScript function. When enabled, hexadecimal digits within escape sequences (e.g., '\\\\u', '\\\\x') and hexadecimal integer literals (when using the 'numbers: hexadecimal' option) are rendered in lowercase.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\njsesc('Ich ♥ Bücher', {\n  'lowercaseHex': true\n});\n// → 'Ich \\\\u2665 B\\\\xfccher'\n//                    ^^\n\njsesc(42, {\n  'numbers': 'hexadecimal',\n  'lowercaseHex': true\n});\n// → '0x2a'\n//      ^^\n```\n\n----------------------------------------\n\nTITLE: Running FakeTimers Tests on Node.js (Verbose)\nDESCRIPTION: Runs the FakeTimers test suite directly using the Mocha test runner installed locally via npm, providing more detailed output. This command locates the Mocha executable within the project's `node_modules/.bin` directory and executes the specified test file `./test/fake-timers-test.js`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n$(npm bin)/mocha ./test/fake-timers-test.js\n```\n\n----------------------------------------\n\nTITLE: Configuring @std/esm in package.json for MJS Tests\nDESCRIPTION: This JSON snippet shows the necessary configuration to be added to the `package.json` file to enable Mocha tests on `.mjs` files using `@std/esm`, as mentioned in version 0.16.1 changelog. It specifies that `@std/esm` should handle `.mjs` files using the CommonJS (`cjs`) format as a prerequisite for this feature.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@bcoe/v8-coverage/dist/lib/CHANGELOG.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"@std/esm\": {\"esm\": \"cjs\"}\n```\n\n----------------------------------------\n\nTITLE: Installing string-length Module via npm (Shell)\nDESCRIPTION: This command installs the 'string-length' package using the Node Package Manager (npm). Running this command in a terminal will download and add the package to the project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/string-length/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install string-length\n```\n\n----------------------------------------\n\nTITLE: Installing @types/http-errors via npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@types/http-errors` package. This package provides TypeScript type definitions for the `http-errors` JavaScript library. The `--save` flag ensures the package is added as a dependency in the project's `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/http-errors/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/http-errors\n```\n\n----------------------------------------\n\nTITLE: Formatted Diff Output for Single Line Changes in Unified Diff Format\nDESCRIPTION: This snippet illustrates how a diff output can be presented in the unified diff format, emphasizing additions and deletions for changed lines. It is a generic example commonly output by diffing tools after processing comparable single-line changes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- Expected  - 1\\n+ Received  + 1\\n\\n- non-empty string\\n+\n```\n\n----------------------------------------\n\nTITLE: Installing create-require via Yarn or npm in Shell\nDESCRIPTION: This snippet provides shell commands for installing the 'create-require' package using either Yarn or npm. No dependencies are required except for a valid Node.js environment. The commands will add 'create-require' as a project dependency for use as a module polyfill.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/create-require/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add create-require\n\nnpm install create-require\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker and Handling PWA Events - TypeScript\nDESCRIPTION: This TypeScript snippet utilizes workbox-window to register a service worker for PWA support, and sets up event handlers for install prompts, offline status, and version updates. It assumes workbox-window is installed and a valid service worker is available at the specified path. The code is designed for modern browsers, with key dependencies on service worker APIs and the Workbox library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Workbox } from 'workbox-window';\\n\\nif ('serviceWorker' in navigator) {\\n  const wb = new Workbox('/sw.js');\\n  wb.addEventListener('waiting', () => {\\n    // notify user of update\\n  });\\n  wb.register();\\n}\\n\\n// Optionally handle beforeinstallprompt event\\nwindow.addEventListener('beforeinstallprompt', (e) => {\\n  // e.prompt();\\n});\n```\n\n----------------------------------------\n\nTITLE: Example Usage of concat-map in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `concat-map` module. It requires the module, defines an input array `xs`, and then uses `concatMap` with a function. The function returns an array of three modified numbers for odd elements of `xs` and an empty array for even elements, effectively filtering out even numbers and expanding odd ones. The resulting array `ys` is printed to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/concat-map/README.markdown#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\nvar concatMap = require('concat-map');\nvar xs = [ 1, 2, 3, 4, 5, 6 ];\nvar ys = concatMap(xs, function (x) {\n    return x % 2 ? [ x - 0.1, x, x + 0.1 ] : [];\n});\nconsole.dir(ys);\n```\n```\n\n----------------------------------------\n\nTITLE: Mapping Full Electron Version to Full Chromium Version with electronToChromium (Node.js)\nDESCRIPTION: Uses electronToChromium to map a full Electron version string (major.minor.patch) to the full Chromium version, providing more accuracy for fine-grained compatibility checks. Requires the e2c module and passes in a string as the version query.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar chromeVersion = e2c.electronToChromium('1.4.11');\n// chromeVersion is \"53.0.2785.143\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Request URL for Safe HTML Display in Node.js HTTP Server (JavaScript)\nDESCRIPTION: This example demonstrates creating a basic Node.js HTTP server. It uses the 'encodeurl' function to encode the incoming request URL (`req.url`) before potentially displaying it in an HTML response. It also uses 'escape-html' for additional safety against XSS when embedding the URL in HTML. The server returns a 404 response with the encoded URL in the body.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/encodeurl/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\n\nhttp.createServer(function onRequest (req, res) {\n  // get encoded form of inbound url\n  var url = encodeUrl(req.url)\n\n  // create html message\n  var body = '<p>Location ' + escapeHtml(url) + ' not found</p>'\n\n  // send a 404\n  res.statusCode = 404\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\n  res.end(body, 'utf-8')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with bower - Shell\nDESCRIPTION: Lists commands for installing tslib using bower for specific TypeScript versions. Bower must be installed, and commands fetch tslib into the bower_components directory. Intended for projects still using bower for dependency management.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n# TypeScript 3.9.2 or later\nbower install tslib\n\n# TypeScript 3.8.4 or earlier\nbower install tslib@^1\n\n# TypeScript 2.3.2 or earlier\nbower install tslib@1.6.1\n\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for escalade Usage (Text)\nDESCRIPTION: Represents a sample file system hierarchy used to demonstrate how `escalade` traverses parent directories in the subsequent JavaScript usage example. This structure is purely illustrative.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escalade/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/Users/lukeed\n  └── oss\n    ├── license\n    └── escalade\n      ├── package.json\n      └── test\n        └── fixtures\n          ├── index.js\n          └── foobar\n            └── demo.js\n```\n\n----------------------------------------\n\nTITLE: Installing ansi-styles via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `ansi-styles` library into the current project's `node_modules` directory and adds it as a dependency in `package.json`. Requires npm and Node.js to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-styles/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install ansi-styles\n```\n\n----------------------------------------\n\nTITLE: Installing jest-pnp-resolver with Yarn - Bash\nDESCRIPTION: This snippet demonstrates the terminal command to install the jest-pnp-resolver package as a development dependency using Yarn. It is a prerequisite for enabling Yarn Plug'n'Play (PnP) module resolution in Jest, unless using a Jest version that includes it by default. Run this command in your project directory's shell or terminal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-pnp-resolver/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D jest-pnp-resolver\n```\n\n----------------------------------------\n\nTITLE: Sample Source Map File - JSON\nDESCRIPTION: A minimal example of a source map file in JSON format, matching the standard schema. Maps compiled.js to original.js and describes the line/column relationship for stack trace remapping. Used for source-map-support demonstrations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 3,\n  \"file\": \"compiled.js\",\n  \"sources\": [\"original.js\"],\n  \"names\": [],\n  \"mappings\": \";;AAAA,MAAM,IAAI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Scheme-Relative Redirects in Express.js\nDESCRIPTION: Illustrates support for scheme-relative redirects using `res.redirect()`. By providing a URL starting with '//', Express.js will generate a 'Location' header that preserves the current request's scheme (HTTP or HTTPS), redirecting to the specified domain.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nres.redirect(\"//foo.com\")\n```\n\n----------------------------------------\n\nTITLE: Detecting TypeScript Transpiled Star Re-exports in JavaScript\nDESCRIPTION: Presents the common JavaScript output generated by the TypeScript compiler for `export * from 'external'`. The lexer identifies this as a star re-export by detecting the specific call pattern `__export(require(\"external\"))`, including variations like `tslib.__export` or `__exportStar`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"external\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Source Mapping URL Comment - JavaScript\nDESCRIPTION: Shows the required comment syntax for linking a compiled JavaScript file with its corresponding source map. Insert this comment at the end of the compiled file. Transpilers often add this automatically. Ensures debuggers and source-map-support can locate the original sources.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n//# sourceMappingURL=path/to/source.map\n```\n\n----------------------------------------\n\nTITLE: Using tsconfig-paths with ts-node for Path Resolution - JSONC\nDESCRIPTION: This configuration snippet demonstrates how to require tsconfig-paths/register within ts-node settings to support custom module path resolutions defined in the paths section of tsconfig.json. Requires installation of tsconfig-paths as a dev dependency. tsconfig-paths interprets TypeScript's path mapping at runtime, allowing the application to import modules using logical aliases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_29\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"ts-node\": {\\n    // Do not forget to `npm i -D tsconfig-paths`\\n    \"require\": [\"tsconfig-paths/register\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring body-parser to Accept Custom Content-Types in Express (JavaScript)\nDESCRIPTION: This code example demonstrates the flexibility of body-parser middleware by configuring it to parse custom content types. Dependencies include 'express' and 'body-parser'. It shows how body-parser.json(), body-parser.raw(), and body-parser.text() can be configured with a 'type' option to process specific content types such as application/*+json, application/vnd.custom-type, and text/html, respectively. Each middleware is added globally via app.use(). Expected input: HTTP requests with matching Content-Type headers and corresponding body formats. Limitation: requests with unsupported Content-Types will not be parsed by these middleware functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/body-parser/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// parse various different custom JSON types as JSON\\napp.use(bodyParser.json({ type: 'application/*+json' }))\\n\\n// parse some custom thing into a Buffer\\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\\n\\n// parse an HTML body into a string\\napp.use(bodyParser.text({ type: 'text/html' }))\n```\n\n----------------------------------------\n\nTITLE: Numeric Input Prompt with Validation and Range - JavaScript\nDESCRIPTION: Sets up a 'number' input prompt that requires the user to enter their age, providing an initial value and constraining the input within specified minimum and maximum bounds. The prompt uses configurable styling and can be extended with validation, formatting, or rendering callbacks as provided by the prompts library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'number',\\n  name: 'value',\\n  message: 'How old are you?',\\n  initial: 0,\\n  style: 'default',\\n  min: 2,\\n  max: 10\\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Arguments Objects with type-detect (JavaScript)\nDESCRIPTION: Illustrates how `type-detect` identifies the special `arguments` object available inside functions. An Immediately Invoked Function Expression (IIFE) is used to access `arguments`. It uses `assert` to verify the result is 'Arguments'. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\n  assert(type(arguments) === 'Arguments');\n})();\n```\n\n----------------------------------------\n\nTITLE: Announcing Messages to Screen Readers in TypeScript\nDESCRIPTION: This TypeScript utility function `announceToScreenReader` dynamically creates a visually hidden `div` element with an ARIA `aria-live` attribute (`polite` by default, or `assertive`). It injects the provided message into this div, appends it to the body to be read by screen readers, and then removes it after a short delay (2 seconds). This provides non-visual feedback.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Also helper for screenReader announcements\nexport function announceToScreenReader(message: string, assertive = false) {\n  const liveRegion = document.createElement('div');\n  liveRegion.className = 'sr-only';\n  liveRegion.setAttribute('aria-live', assertive ? 'assertive' : 'polite');\n  liveRegion.innerText = message;\n  document.body.appendChild(liveRegion);\n\n  setTimeout(() => {\n    document.body.removeChild(liveRegion);\n  }, 2000);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions using npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @types/babel__core TypeScript type definitions package via npm. It requires Node.js and npm to be already installed on your system. The command saves the type definitions as a development dependency, enabling improved type safety and autocompletion when working with Babel's core library in TypeScript projects. No input is required; the command outputs installation progress and updates the project package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/babel__core/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/babel__core\n```\n\n----------------------------------------\n\nTITLE: Constructing FormData and Sending with fetch in Node.js - JavaScript\nDESCRIPTION: This snippet demonstrates importing required dependencies, creating FormData instances, appending both File objects and stream-like objects, and sending data using fetch in Node.js. It relies on 'node-fetch', 'fetch-blob', and 'formdata-polyfill/esm.min.js'. Required parameters include the filename, the file/stream data, and a target HTTP endpoint. The output is an HTTP POST request using a fully spec-compliant FormData object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/formdata-polyfill/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Node example\nimport fetch from 'node-fetch'\nimport File from 'fetch-blob/file.js'\nimport { fileFromSync } from 'fetch-blob/from.js'\nimport { FormData } from 'formdata-polyfill/esm.min.js'\n\nconst file = fileFromSync('./README.md')\nconst fd = new FormData()\n\nfd.append('file-upload', new File(['abc'], 'hello-world.txt'))\nfd.append('file-upload', file)\n\n// it's also possible to append file/blob look-a-like items\n// if you have streams coming from other destinations\nfd.append('file-upload', {\n  size: 123,\n  type: '',\n  name: 'cat-video.mp4',\n  stream() { return stream },\n  [Symbol.toStringTag]: 'File'\n})\n\nfetch('https://httpbin.org/post', { method: 'POST', body: fd })\n```\n\n----------------------------------------\n\nTITLE: Running All Pending Timers with FakeTimers (Sync and Async) - JavaScript\nDESCRIPTION: Executes all timers until none remain with 'clock.runAll' and 'clock.runAllAsync'. Loops up to 'loopLimit' times to avoid infinite loops. Async version yields to the event loop in between. No parameters required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nclock.runAll() / await clock.runAllAsync()\n```\n\n----------------------------------------\n\nTITLE: Mapping Iterables with Preserved Return Types - TypeScript\nDESCRIPTION: This example highlights inferring function return types with the ReturnType utility in combination with generics. The mapIter function takes any iterable and a mapping callback, applying the callback to each element while accumulating results in an array of the correct inferred type. Inputs require a concrete Iterable and a callback function, dependencies are generics and ReturnType. Output array type matches what the callback returns, enforcing compile-time correctness for both argument structure and mapped results.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** Provides every element of the iterable `iter` into the `callback` function and stores the results in an array. */\nfunction mapIter<\n\t\tElem,\n\t\tFunc extends (elem: Elem) => any,\n\t\tRet extends ReturnType<Func>\n>(iter: Iterable<Elem>, callback: Func): Ret[] {\n\t\tconst mapped: Ret[] = [];\n\n\t\tfor (const elem of iter) {\n\t\t\t\tmapped.push(callback(elem));\n\t\t}\n\n\t\treturn mapped;\n}\n\nconst setObject: Set<string> = new Set();\nconst mapObject: Map<number, string> = new Map();\n\nmapIter(setObject, (value: string) => value.indexOf('Foo')); // number[]\n\nmapIter(mapObject, ([key, value]: [number, string]) => {\n\t\treturn key % 2 === 0 ? value : 'Odd';\n}); // string[]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Adding Streams with merge-stream in JavaScript\nDESCRIPTION: Demonstrates the basic usage of `merge-stream`. It initializes a merged stream by passing multiple stream instances to the main function. It also shows how to dynamically add another stream later using the `add()` method and check if the merged stream contains any sources using `isEmpty()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/merge-stream/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar stream1 = new Stream();\nvar stream2 = new Stream();\n\nvar merged = mergeStream(stream1, stream2);\n\nvar stream3 = new Stream();\nmerged.add(stream3);\nmerged.isEmpty();\n//=> false\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Short Time Strings using ms in JavaScript\nDESCRIPTION: Illustrates the usage of the ms package for converting milliseconds back into compact, human-readable time string formats. The ms function can accept a numeric value (or expressions evaluating to one), returning a string with the closest appropriate time unit. It also supports nested calls. This is suitable when needing to present time intervals in a readable way in JavaScript applications; returns a string (e.g., '10h') for the provided millisecond input.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ms/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n----------------------------------------\n\nTITLE: Adapting Card Backgrounds for Dark and Light Modes in React - JSX\nDESCRIPTION: This JSX example demonstrates how to update component classes so that cards and containers use the correct background color for both light and dark modes. By applying 'bg-white dark:bg-[var(--surface-2)]', the background adapts according to the theme, provided the CSS variables and Tailwind (or PostCSS) support are configured. It requires a styling pipeline capable of processing advanced dark mode selectors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742708040241.txt#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\\n<div className=\\\"bg-white p-4\\\">...<\\/div>\\nTo:\\n// After\\n<div className=\\\"bg-white dark:bg-[var(--surface-2)] p-4\\\">...<\\/div>\n```\n\n----------------------------------------\n\nTITLE: Using useMicroInteractions Hook in React Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use the imported `useMicroInteractions` hook within a React component to get access to functions like `triggerAnimation` and `showAchievement` by destructuring the hook's return value. These functions can then be called to initiate micro-interactions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst { triggerAnimation, showAchievement } = useMicroInteractions();\n```\n\n----------------------------------------\n\nTITLE: Overriding Environment Variables with dotenv.config() in JavaScript\nDESCRIPTION: Demonstrates using the `override: true` option in `dotenv.config()` to allow variables defined in the `.env` file(s) to replace any variables that already exist in `process.env` or were set by previously parsed files in a multi-file setup.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nrequire('dotenv').config({ override: true })\n```\n\n----------------------------------------\n\nTITLE: Parsing tsconfig.json using the Native TypeScript API\nDESCRIPTION: Demonstrates an alternative method to find and parse `tsconfig.json` files using functions directly from the `typescript` package itself. This requires having `typescript` as a dependency. The process involves using `findConfigFile` to locate the `tsconfig.json`, `readConfigFile` to read its content, and `parseJsonConfigFileContent` to parse the configuration, resolve `extends`, and apply command-line options (though none are applied here), using `tsSys` for file system interactions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    sys as tsSys,\n    findConfigFile,\n    readConfigFile,\n    parseJsonConfigFileContent\n} from 'typescript'\nimport path from 'path'; // Assuming path is imported\n\n// Find tsconfig.json file\nconst tsconfigPath = findConfigFile(process.cwd(), tsSys.fileExists, 'tsconfig.json')\n\nif (tsconfigPath) {\n  // Read tsconfig.json file\n  const tsconfigFile = readConfigFile(tsconfigPath, tsSys.readFile)\n\n  // Resolve extends\n  const parsedTsconfig = parseJsonConfigFileContent(\n      tsconfigFile.config,\n      tsSys,\n      path.dirname(tsconfigPath)\n  )\n  // Use parsedTsconfig\n} else {\n  console.error('Could not find tsconfig.json');\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Objects into a Flat Composite TypeBox Schema in TypeScript\nDESCRIPTION: Shows use of Type.Composite or similar constructor to merge multiple object type schemas into a single object type, required to have each unique property. Inputs are Type.Object type definitions, and the result is a schema where each listed property is required and must match the specified type. Useful for modeling flat object combinations versus intersection patterns.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Composite([\n  Type.Object({\n    x: Type.Number()\n  }),\n  Type.Object({\n    y: Type.Number()\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Safely Loading Multiple YAML Documents with an Iterator\nDESCRIPTION: Shows how to use `js-yaml.safeLoadAll` to parse a string containing multiple YAML documents (separated by `---`). An iterator function is provided to process each document individually as it's parsed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing TypeBox Extended Types, TypeScript Types, and Generated Schemas\nDESCRIPTION: This table demonstrates various extended types available in TypeBox (e.g., Type.Constructor, Type.Function, Type.Promise, Type.Uint8Array, Type.Date, Type.Undefined, Type.RegEx, Type.Symbol, Type.BigInt, Type.Void). It shows the TypeBox syntax for defining these types, their corresponding native TypeScript type equivalents, and the extended schema object generated by TypeBox. These extended schemas include specific properties like 'instanceOf' or 'typeOf' to represent JavaScript constructs not covered by standard JSON Schema.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\n│   Type.String(),               │  arg0: string,              │   type: 'object',              │\n│   Type.Number()                │  arg1: number               │   instanceOf: 'Constructor',   │\n│ ], Type.Boolean())             │ ) => boolean                │   parameters: [{               │\n│                                │                             │     type: 'string'             │\n│                                │                             │   }, {                         │\n│                                │                             │     type: 'number'             │\n│                                │                             │   }],                          │\n│                                │                             │   return: {                    │\n│                                │                             │     type: 'boolean'            │\n│                                │                             │   }                            │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\n|   Type.String(),               │  arg0: string,              │   type : 'object',             │\n│   Type.Number()                │  arg1: number               │   instanceOf: 'Function',      │\n│ ], Type.Boolean())             │ ) => boolean                │   parameters: [{               │\n│                                │                             │     type: 'string'             │\n│                                │                             │   }, {                         │\n│                                │                             │     type: 'number'             │\n│                                │                             │   }],                          │\n│                                │                             │   return: {                    │\n│                                │                             │     type: 'boolean'            │\n│                                │                             │   }                            │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\n│   Type.String()                │                             │   type: 'object',              │\n│ )                              │                             │   instanceOf: 'Promise',       │\n│                                │                             │   item: {                      │\n│                                │                             │     type: 'string'             │\n│                                │                             │   }                            │\n│                                │                             │ }                              │\n│                                │                             │                                │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\n│                                │                             │   type: 'object',              │\n│                                │                             │   instanceOf: 'Uint8Array'     │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\n│                                │                             │   type: 'object',              │\n│                                │                             │   instanceOf: 'Date'           │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\n│                                │                             │   type: 'null',                │\n│                                │                             │   typeOf: 'Undefined'          │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.RegEx(/foo/)    │ type T = string             │ const T = {                    │\n│                                │                             │    type: 'string',             │\n│                                │                             │    pattern: 'foo'              │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\n│                                │                             │   type: 'null',                │\n│                                │                             │   typeOf: 'Symbol'             │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\n│                                │                             │   type: 'null',                │\n│                                │                             │   typeOf: 'BigInt'             │\n│                                │                             │ }                              │\n│                                │                             │                                │\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\n│                                │                             │   type: 'null'                 │\n│                                │                             │   typeOf: 'Void'               │\n│                                │                             │ }                              │\n│                                │                             │                                │\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Completion Service and Output Parsing (TypeScript)\nDESCRIPTION: Implements backend utility functions to call Azure OpenAI's chat completions (client.getChatCompletions) for prompts, parse their output, and extract structured sections such as bullet points or scenario descriptions. Contains helper utilities like extractSection to divide model responses into meaningful chunks for further processing. Requires an Azure OpenAI client, appropriate credentials, and error handling; intended for Node.js/TypeScript backend.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Pseudocode outline:\n// 1. Build system & user prompt\n// 2. await client.getChatCompletions(...)\n// 3. Parse result (extractSection, extractBulletPoints, etc.)\n// 4. Return structured object for API consumer\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Semver Modules in Node.js\nDESCRIPTION: This list illustrates the various module paths available within the `semver` library for fine-grained imports. Users can require specific functions (like `clean`, `satisfies`) or classes (like `Comparator`, `Range`) directly, enabling better code optimization and tree-shaking compared to importing the entire library. These are examples of `require` statements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n* `require('semver')`\n* `require('semver/classes')`\n* `require('semver/classes/comparator')`\n* `require('semver/classes/range')`\n* `require('semver/classes/semver')`\n* `require('semver/functions/clean')`\n* `require('semver/functions/cmp')`\n* `require('semver/functions/coerce')`\n* `require('semver/functions/compare')`\n* `require('semver/functions/compare-build')`\n* `require('semver/functions/compare-loose')`\n* `require('semver/functions/diff')`\n* `require('semver/functions/eq')`\n* `require('semver/functions/gt')`\n* `require('semver/functions/gte')`\n* `require('semver/functions/inc')`\n* `require('semver/functions/lt')`\n* `require('semver/functions/lte')`\n* `require('semver/functions/major')`\n* `require('semver/functions/minor')`\n* `require('semver/functions/neq')`\n* `require('semver/functions/parse')`\n* `require('semver/functions/patch')`\n* `require('semver/functions/prerelease')`\n* `require('semver/functions/rcompare')`\n* `require('semver/functions/rsort')`\n* `require('semver/functions/satisfies')`\n* `require('semver/functions/sort')`\n* `require('semver/functions/valid')`\n* `require('semver/ranges/gtr')`\n* `require('semver/ranges/intersects')`\n* `require('semver/ranges/ltr')`\n* `require('semver/ranges/max-satisfying')`\n* `require('semver/ranges/min-satisfying')`\n* `require('semver/ranges/min-version')`\n* `require('semver/ranges/outside')`\n* `require('semver/ranges/simplify')`\n* `require('semver/ranges/subset')`\n* `require('semver/ranges/to-comparators')`\n* `require('semver/ranges/valid')`\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Voiceovers with ElevenLabs API\nDESCRIPTION: Leverages the ElevenLabs API or a similar service to generate consistent, professional-grade voice synthesis for the narration in the animated explainer videos.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_5\n\nLANGUAGE: API\nCODE:\n```\nUse ElevenLabs API\nInput: Narration script.\nProcess: AI synthesizes high-quality, consistent voiceover.\nOutput: Audio file for the animated video.\n```\n\n----------------------------------------\n\nTITLE: Defining the PipelinePolicy Interface in TypeScript\nDESCRIPTION: This snippet defines the `PipelinePolicy` interface in TypeScript. A policy requires a unique `name` string and a `sendRequest` method. This method receives the `PipelineRequest` and the next policy (`SendRequest`) in the chain, allowing manipulation of the request before forwarding it and handling the `PipelineResponse` afterward.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-rest-pipeline/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipelineRequest, SendRequest, PipelineResponse } from \"@azure/core-rest-pipeline\";\n\ninterface PipelinePolicy {\n  /**\n   * The policy name. Must be a unique string in the pipeline.\n   */\n  name: string;\n  /**\n   * The main method to implement that manipulates a request/response.\n   * @param request - The request being performed.\n   * @param next - The next policy in the pipeline. Must be called to continue the pipeline.\n   */\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Memphis Style CSS Classes in React useEffect Hook (TSX)\nDESCRIPTION: Shows a React `useEffect` hook, likely within a theme provider component (`theme-provider.tsx`), that dynamically manages CSS classes on the `document.body` to toggle the Memphis visual style. It adds `memphis-style` and `enabled` classes when `appearance.visualStyle` is 'memphis', and removes them otherwise, thereby activating or deactivating the corresponding CSS rules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// theme-provider.tsx (or similar)\nuseEffect(() => {\n  // applyTheme(appearance)...\n\n  if (appearance.visualStyle === 'memphis') {\n    document.body.classList.add('memphis-style', 'enabled');\n  } else {\n    document.body.classList.remove('memphis-style', 'enabled');\n  }\n}, [appearance]);\n```\n\n----------------------------------------\n\nTITLE: Stringifying Object Using fast-json-stable-stringify in Node.js\nDESCRIPTION: This snippet demonstrates how to import and use the fast-json-stable-stringify package to create a deterministic JSON string of an object. It requires the package to be installed via npm and simply takes a JavaScript object, stringifies it, and prints the result to the console. Inputs should be plain objects; outputs are stable JSON string representations with object keys sorted lexically.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fast-json-stable-stringify/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar stringify = require('fast-json-stable-stringify');\nvar obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 };\nconsole.log(stringify(obj));\n```\n\n----------------------------------------\n\nTITLE: Creating Initial DecA(I)de Project Directory Structure (Bash)\nDESCRIPTION: This Bash command utilizes `mkdir -p` to efficiently create the standard directory structure for the DecA(I)de project. It establishes separate folders for the client-side code (`client/src` with subdirectories for components, pages, hooks, etc.), server-side code (`server` with subdirectories for routes, services, middlewares), shared code (`shared`), and utility scripts (`scripts`), promoting organized development.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Create directory structure\nmkdir -p client/src/{components,pages,hooks,lib,assets}\nmkdir -p server/{routes,services,middlewares}\nmkdir -p shared\nmkdir -p scripts\n```\n```\n\n----------------------------------------\n\nTITLE: Installing locate-path via npm\nDESCRIPTION: This command installs the `locate-path` package using the Node Package Manager (npm). It adds the package as a dependency to your project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/locate-path/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install locate-path\n```\n\n----------------------------------------\n\nTITLE: Installing Connect Type Definitions with npm in Shell\nDESCRIPTION: This snippet provides the npm command to install the TypeScript type definitions for the Connect middleware. It requires npm to be installed and run in a Node.js project directory. The main parameter is \"@types/connect\" as the package name, with the --save flag ensuring it is added to the dependencies list. The output is the successful installation of type definitions needed for TypeScript projects using Connect.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/connect/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/connect\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in Windows CMD\nDESCRIPTION: Demonstrates how to set the DEBUG environment variable in the Windows Command Prompt (CMD) using the 'set' command. This example sets DEBUG to enable all namespaces (`*`) except those starting with 'not_this'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=*,-not_this\n```\n\n----------------------------------------\n\nTITLE: Counting Active Timers with FakeTimers - JavaScript\nDESCRIPTION: Returns the number of currently waiting timers with 'clock.countTimers'. Use to assert that no timers are left pending in a testing context. No input required; returns an integer count.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclock.countTimers()\n```\n\n----------------------------------------\n\nTITLE: Configuring AVA with ts-node for CommonJS Projects (JSONC)\nDESCRIPTION: Configures AVA in `package.json` to recognize `.ts` files and use `ts-node/register` to execute them. This setup is intended for projects operating in CommonJS mode (where `package.json` does not specify `\\\"type\\\": \\\"module\\\"`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_33\n\nLANGUAGE: jsonc\nCODE:\n```\n```jsonc title=\"package.json\"\n{\n  \"ava\": {\n    \"extensions\": [\n      \"ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Third-Party Transpiler Plugin in tsconfig.json (JSONC)\nDESCRIPTION: Configures `ts-node` within `tsconfig.json` to use a specified third-party transpiler module (e.g., \"@cspotcode/fast-ts-compiler\"). This requires setting `transpileOnly` to `true` and specifying the module name under the `transpiler` option within the `ts-node` configuration block. The specified transpiler module must be installed as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_31\n\nLANGUAGE: jsonc\nCODE:\n```\n```jsonc title=\"tsconfig.json\"\n{\n  \"ts-node\": {\n    \"transpileOnly\": true,\n    \"transpiler\": \"@cspotcode/fast-ts-compiler\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling debug Namespaces in the Browser via localStorage (JavaScript)\nDESCRIPTION: Enables debugging for all namespaces starting with 'worker:' in a web browser environment by setting the `debug` property of the `localStorage` object. The page needs to be refreshed for this change to take effect.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nlocalStorage.debug = 'worker:*'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'halt-at-non-option' Behavior in Node.js CLI Parsing (Disabled)\nDESCRIPTION: This console example shows the output of a Node.js script (`example.js`) when the `halt-at-non-option` setting is disabled (default). Parsing continues after the positional argument 'b', recognizing '-x y' as another option and its value.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n----------------------------------------\n\nTITLE: MIT License for eventemitter3\nDESCRIPTION: The full text of the MIT License governing the use of the 'eventemitter3' library. This permissive license allows free use, modification, and distribution of the software, provided the copyright notice and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2014 Arnout Kazemier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Reusing dedent Functions with Preset Options - JavaScript\nDESCRIPTION: Demonstrates how to save a customized dedent function with preset options for repeated use. Requires dedent installed and provides implementation of withOptions for option persistence. The resulting dedenter function supports both template tag and function invocation for multi-line string manipulation, enhancing code clarity and reusability.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dedent/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport dedent from 'dedent';\n\nconst dedenter = dedent.withOptions({ /* ... */ });\n\ndedenter`input`;\ndedenter(`input`);\n```\n\n----------------------------------------\n\nTITLE: Detecting Single Re-exports via module.exports Assignment in JavaScript\nDESCRIPTION: Demonstrates how the lexer identifies single module re-exports using `module.exports = require('mod')`. It clarifies that only the final assignment of this type is considered a reexport to avoid over-classification in scenarios like Webpack externals bundling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// DETECTS REEXPORTS: c\nmodule.exports = require('a');\n(module => module.exports = require('b'))(NOT_MODULE);\nif (false) module.exports = require('c');\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Search Documents Package via npm - JavaScript\nDESCRIPTION: Installs the @azure/search-documents package into your JavaScript project using npm, enabling usage of the Azure AI Search client library. This command is prerequisite for accessing all features described later in the file. No parameters are needed, but a Node.js environment with npm is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/search-documents\n```\n\n----------------------------------------\n\nTITLE: Disabling Recursion in require-directory (JavaScript)\nDESCRIPTION: Demonstrates how to prevent `require-directory` from searching in subdirectories by setting the `recurse` option to `false`. Only modules directly within the specified directory will be loaded.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  hash = requireDirectory(module, {recurse: false});\n```\n\n----------------------------------------\n\nTITLE: Setting Prototype Using setPrototypeOf in JavaScript\nDESCRIPTION: This JavaScript example demonstrates importing the 'setprototypeof' package via require, creating an object, and updating its prototype to an object with a method 'foo'. It showcases how to call the new method after the prototype is set. The primary dependency is the 'setprototypeof' package, which must be installed beforehand; the code expects a Node.js or compatible JavaScript runtime.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/setprototypeof/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar setPrototypeOf = require('setprototypeof')\n\nvar obj = {}\nsetPrototypeOf(obj, {\n  foo: function () {\n    return 'bar'\n  }\n})\nobj.foo() // bar\n```\n\n----------------------------------------\n\nTITLE: Viewing Backend Logs - Bash\nDESCRIPTION: Shows server-side logs for debugging backend operations using an npm script. Useful for troubleshooting crashes, errors, or unexpected behavior. Assumes npm run logs:server is defined in package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run logs:server\n```\n\n----------------------------------------\n\nTITLE: Installing Mime Type Definitions with npm - Shell\nDESCRIPTION: This snippet provides the shell command needed to install the @types/mime package using npm, enabling TypeScript projects to use mime with full type support. There are no external dependencies aside from npm itself. The command adds the type definitions as a development dependency, ensuring that the application's build and development tools can utilize the type annotations without impacting the production codebase.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/mime/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/mime\n```\n\n----------------------------------------\n\nTITLE: Customizing Alphabet for Estonian Sorting (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to customize the sorting alphabet for the Estonian language. By setting the `String.alphabet` property to the desired character order, `String.naturalCompare` will sort strings according to Estonian alphabetical rules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Estonian alphabet\nString.alphabet = \"ABDEFGHIJKLMNOPRSŠZŽTUVÕÄÖÜXYabdefghijklmnoprsšzžtuvõäöüxy\"\n[\"t\", \"z\", \"x\", \"õ\"].sort(String.naturalCompare)\n// [\"z\", \"t\", \"õ\", \"x\"]\n```\n\n----------------------------------------\n\nTITLE: Overriding DEBUG with enable() at Runtime (Shell)\nDESCRIPTION: Illustrates how invoking 'enable()' in a Node.js inline script overrides the existing DEBUG environment variable setting. The snippet is executed in a shell and requires the 'debug' package installed. Inputs are DEBUG and code arguments; output is 'false', demonstrating that 'enable()' takes precedence over DEBUG.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n$ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))'\\n=> false\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Computed Property Names in Object Literals - Babylon - JavaScript\nDESCRIPTION: This snippet fixes how Babylon parses object literals with computed property names involving expressions. The provided example uses a boolean comparison as the key, which must be parsed correctly in the property name context. Dependencies include the parser's support for ES6+ computed properties. Input is an object literal with a computed property name; the output is a valid AST.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst map = {\n  [age <= 17] : 'Too young'\n};\n```\n\n----------------------------------------\n\nTITLE: Testing the iconv-lite Library using Bash\nDESCRIPTION: Provides shell commands for setting up the development environment and running tests for the `iconv-lite` library. It includes steps to clone the repository, install dependencies using npm, execute the main test suite, run performance benchmarks, and generate and view test coverage reports.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/iconv-lite/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n\n----------------------------------------\n\nTITLE: Allow Plugins Wildcard in Parser Configuration - Babylon - JavaScript\nDESCRIPTION: This JSON configuration snippet demonstrates that setting the \"plugins\" option to [\"*\"] will enable all parser plugins in Babylon. This is useful for tools requiring maximal language support, such as babel-eslint. Input is a JSON file; output is all features being enabled in the parser setup. No special dependencies beyond the parser itself.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern for Comma-Separated Brace Expansion in JavaScript\nDESCRIPTION: Defines the regular expression `/^(.*,)+(.+)?$/` used by the `brace-expansion` library to identify comma-separated list patterns like `{a,b,...}`, `{a,{b,c}}`, or `{,a,}` for expansion. This pattern checks for one or more items followed by a comma, potentially ending with a final item.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/brace-expansion/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/^(.*,)+(.+)?$/\n// {a,b,...}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Accessibility with Tailwind CSS Focus States\nDESCRIPTION: Uses Tailwind CSS focus utility classes, specifically 'focus:ring', to provide clear visual indicators (like outlines) on focusable elements when navigated using a keyboard. This significantly improves accessibility for users relying on keyboard navigation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nfocus:ring outlines\n```\n\n----------------------------------------\n\nTITLE: Installing http-errors Using NPM - Console\nDESCRIPTION: Demonstrates how to install the 'http-errors' package from the npm registry using the npm install command in a terminal environment. This snippet is a prerequisite for using any functionality from the 'http-errors' module and should be executed in the project directory. No parameters or outputs are required; this command adds the dependency to the current Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-errors/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm install http-errors\n```\n\n----------------------------------------\n\nTITLE: Installing dedent via npm (Shell)\nDESCRIPTION: This shell command installs the dedent package from the npm registry into the current project. Required dependencies: An initialized Node.js project (package.json) and npm package manager. Running the command adds dedent as a project dependency. No input parameters are required and successful installation enables dedent for later import in project files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dedent/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i dedent\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease versions via semver CLI (Bash)\nDESCRIPTION: Demonstrates using the `semver` command-line tool to increment a version (`1.2.3`) to the next prerelease version using the `-i prerelease` flag and specifying a prerelease identifier (`beta`) with `--preid`. Outputs `1.2.4-beta.0`. Requires the `semver` command-line tool.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta\n1.2.4-beta.0\n```\n\n----------------------------------------\n\nTITLE: Installing js-yaml for Node.js via npm\nDESCRIPTION: Installs the js-yaml library as a project dependency using the Node Package Manager (npm). This command should be run in the root directory of a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install js-yaml\n```\n\n----------------------------------------\n\nTITLE: Defining an Edge-Safe splitLines0 Function in JavaScript\nDESCRIPTION: Defines a utility function splitLines0 that returns an empty array for empty input strings, and an array of lines otherwise. This function is helpful for use cases where empty strings should not produce an array containing an empty string, as done by the basic split('\\n') method. No external packages are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nexport const splitLines0 = string =>\\n  string.length === 0 ? [] : string.split('\\n');\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Micro-interactions with Framer Motion in React/TSX\nDESCRIPTION: This TSX code defines a React functional component, `AnimatedButton`, that utilizes the `framer-motion` library to add simple micro-interactions. The `motion.button` component applies scaling animations on hover (`whileHover`) and tap (`whileTap`) events, providing visual feedback to the user.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-consolidated-requirements-and-implementation-blueprint-for-building-out-the-DecA-I-de-Ani-1742703787972.txt#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motion } from 'framer-motion';\n\nconst AnimatedButton: React.FC = () => {\n  return (\n    <motion.button\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.9 }}\n    >\n      Click Me\n    </motion.button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Azure OpenAI Chat Completion with Node.js SDK\nDESCRIPTION: This code shows how to make a chat completion request to Azure OpenAI using the configured `openai` client object. It uses the `createChatCompletion` method, specifying the deployment name (acting as the model identifier for Azure) and the messages array containing system and user prompts. The response contains the AI-generated content, accessed via `completion.data.choices[0].message.content`. This assumes the SDK configuration correctly targets the Azure endpoint. Newer SDK versions might offer a dedicated `AzureOpenAI` client.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742624126265.txt#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst completion = await openai.createChatCompletion({\n  model: \"gpt-4\", // or your deployment name\n  messages: [ {role: \"system\", content: systemPrompt}, {role: \"user\", content: userPrompt} ]\n});\nconst result = completion.data.choices[0].message.content;\n```\n\n----------------------------------------\n\nTITLE: Installing dotenvx Git Pre-commit Hook (Bash)\nDESCRIPTION: Commands to install `dotenvx` using Homebrew and set up its Git pre-commit hook. This hook helps prevent accidentally committing the `.env` file to the repository.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nbrew install dotenvx/brew/dotenvx\ndotenvx precommit --install\n```\n\n----------------------------------------\n\nTITLE: Setting the Location Header using res.location() in Express.js\nDESCRIPTION: Introduces the `res.location(url)` method in Express.js. This method sets the 'Location' response header, similar to `res.redirect()`, but without actually sending the redirect response. It supports relative and absolute URLs and is useful for creating resources (201 Created responses).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nres.location(url)\n```\n\n----------------------------------------\n\nTITLE: Defining Multiline Variables using \\n in .env (INI)\nDESCRIPTION: Alternative method for defining multiline environment variables in a `.env` file using double quotes and escaped newline characters (`\\n`). This allows defining multiline strings on a single line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_6\n\nLANGUAGE: dosini\nCODE:\n```\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END RSA PRIVATE KEY-----\\n\"\n```\n\n----------------------------------------\n\nTITLE: Declaring SuccessAnimation Component Props in React (TSX)\nDESCRIPTION: Defines the `SuccessAnimation` React component, which is responsible for displaying various success animations. It accepts props like `trigger` (to start the animation), `onComplete` (callback after completion), `type` (specifying the animation like 'confetti', 'stars'), `message`, and `duration`. The implementation details are omitted in the snippet.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/components/animations/success-animation.tsx\n\nexport default function SuccessAnimation({ \n  trigger, \n  onComplete,\n  type = 'random',\n  message,\n  duration = 3000\n}: SuccessAnimationProps) {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Glob npm Package from Shell\nDESCRIPTION: This snippet shows how to install the \"glob\" package via npm, making it available for use in a JavaScript/Node.js project. Running this command ensures that the \"glob\" module and its dependencies are downloaded to the current directory, and the package.json is updated if present. No parameters are required, and the expected output is a successful npm install with the package added to dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/glob/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i glob\n```\n\n----------------------------------------\n\nTITLE: Installing depd Module using npm (Shell)\nDESCRIPTION: This command installs the 'depd' module locally into your Node.js project using the npm package manager.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install depd\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Server Readiness - Bash\nDESCRIPTION: Tests if the PostgreSQL server is ready and accepting connections using the pg_isready utility. Returns readiness status in the command output. Use when troubleshooting database connectivity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npg_isready\n```\n\n----------------------------------------\n\nTITLE: Installing jsesc via npm (Bash)\nDESCRIPTION: This command installs the jsesc library using the Node Package Manager (npm). It downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jsesc\n```\n\n----------------------------------------\n\nTITLE: Running Integration Test Script for Azure OpenAI (Node.js) - Bash\nDESCRIPTION: This shell command runs the Node.js integration test script for DecA(I)de, checking whether the Azure OpenAI setup is functioning. Prerequisite: Node.js must be installed, and test-azure-integration.js available in the project directory. The script verifies the service connection and outputs the status of the integration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_OPENAI_SETUP.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode test-azure-integration.js\n```\n\n----------------------------------------\n\nTITLE: ISC License for glob-parent\nDESCRIPTION: The full text of the ISC License governing the use of the 'glob-parent' library. This permissive license grants permission to use, copy, modify, and distribute the software with few restrictions, requiring only the inclusion of the copyright and permission notices.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nThe ISC License\n\nCopyright (c) 2015, 2019 Elan Shanker\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Performing Arithmetic and String Operations on Int64 - JavaScript\nDESCRIPTION: Exhibits how Int64 instances behave in expressions, arithmetic, and string concatenation, as well as how their toString methods differ based on internal values. Also shows using isFinite to check representational range. Inputs are Int64 instances, outputs are results of arithmetic, string formatting, and finite checks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-int64/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Let's do some math.  Int64's behave like Numbers.  (Sorry, Int64 isn't\\n// for doing 64-bit integer arithmetic (yet) - it's just for carrying\\n// around int64 values\\n> x + 1\\n4886718346\\n> y + 1\\nInfinity\\n\\n// Int64 string operations ...\\n> 'value: ' + x\\n'value: 4886718345'\\n> 'value: ' + y\\n'value: Infinity'\\n> x.toString(2)\\n'100100011010001010110011110001001'\\n> y.toString(2)\\n'Infinity'\\n\\n// Use JS's isFinite() method to see if the Int64 value is in the\\n// integer-precise range of JS values\\n> isFinite(x)\\ntrue\\n> isFinite(y)\\nfalse\n```\n\n----------------------------------------\n\nTITLE: Listing Break Game Components in React (TSX Comments)\nDESCRIPTION: These comments list the file paths for different break game components within the DecA(I)de project, including a Memory Game, Block Blast, and a Relaxation exercise. They indicate the structure for educational mini-games intended for break times.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Memory Game for DECA terms\n// client/src/components/break-timer/games/memory-game.tsx\n\n// Block Blast puzzle game\n// client/src/components/break-timer/games/block-blast.tsx\n\n// Relaxation exercise\n// client/src/components/break-timer/games/relax-break.tsx\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Pretty-Format Plugin with Custom Indentation (JavaScript)\nDESCRIPTION: This snippet shows the effect of the `indent` option when using the custom array plugin with `pretty-format`. It calls `prettyFormat` specifying `indent: 4` along with the plugin. The resulting output demonstrates increased indentation (4 spaces) applied consistently, including within the custom-formatted array.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Unsafe Custom Schemas with TypeBox in TypeScript\nDESCRIPTION: This snippet introduces `Type.Unsafe` for creating TypeBox schemas where the static type inferred via `Static<T>` can be explicitly defined by the user, potentially differing from the schema definition. It shows an example where the schema defines `{ type: 'number' }` but the inferred type is specified as `string`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\n                                                     //   type: 'number'\n                                                     // }\n\ntype T = Static<typeof T>                            // type T = string\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type Header using res.contentType() Literals in JavaScript\nDESCRIPTION: Examples showcase the flexible ways to set the Content-Type HTTP header using `res.contentType()` in Express 2.0.0beta3+. It accepts file extensions ('.json'), full MIME types ('application/json'), or shorthand types ('json'), simplifying content type management.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nres.contentType('.json')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres.contentType('application/json')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres.contentType('json')\n```\n\n----------------------------------------\n\nTITLE: Exporting Non-declarations is Invalid - Babylon - JavaScript\nDESCRIPTION: This block of export statements illustrates formerly allowed but now invalid export syntaxes in Babylon. The parser now throws errors for export statements that are not exporting declarations, complying with JavaScript module rules. No extra dependencies are needed. The input is multiple malformed export statements; the output is parse errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport typeof foo;\nexport new Foo();\nexport function() {};\nexport for (;;);\nexport while(foo);\n```\n\n----------------------------------------\n\nTITLE: Export Default and Named Export Uniqueness Enforcement in JavaScript\nDESCRIPTION: Demonstrates errors enforced by spec compliance rules: only one default export per module and unique exported symbol names. No special dependencies. Each code block exhibits a different duplicate export scenario and the outputs are parse-time errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_39\n\nLANGUAGE: js\nCODE:\n```\n// Only one default export allowed per module. (2:9)\\nexport default function() {};\\nexport { foo as default };\n```\n\nLANGUAGE: js\nCODE:\n```\n// Only one default export allowed per module. (2:0)\\nexport default {};\\nexport default function() {};\n```\n\nLANGUAGE: js\nCODE:\n```\n// `Foo` has already been exported. Exported identifiers must be unique. (2:0)\\nexport { Foo };\\nexport class Foo {};\n```\n\n----------------------------------------\n\nTITLE: Installing jest-diff dependency\nDESCRIPTION: Commands to add the `jest-diff` package as a project dependency using either npm or yarn package managers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install jest-diff\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add jest-diff\n```\n\n----------------------------------------\n\nTITLE: Allocating an Uninitialized Buffer (Potentially Unsafe) in JavaScript\nDESCRIPTION: Demonstrates `Buffer.allocUnsafe(size)`, which allocates a new Buffer of the specified `size` without zero-filling it. The allocated memory segment's contents are unknown and may contain sensitive data. Use `buf.fill(0)` to initialize it. This method is faster but requires careful handling. A `RangeError` or `TypeError` can be thrown similar to `Buffer.alloc`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // <Buffer 78 e0 82 02 01>\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with yarn - Shell\nDESCRIPTION: Shows commands for adding tslib using yarn for various TypeScript versions. The resulting effect is similar to npm commands: tslib is added as a dependency. Yarn must be installed globally prior to running these commands.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# TypeScript 3.9.2 or later\nyarn add tslib\n\n# TypeScript 3.8.4 or earlier\nyarn add tslib@^1\n\n# TypeScript 2.3.2 or earlier\nyarn add tslib@1.6.1\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Directory Structure\nDESCRIPTION: Defines a recommended high-level directory structure for the project, separating client-side (React/TypeScript) and server-side (Node.js/Express) code. This structure helps organize components, pages, styles, utilities, routes, and services.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproject-root/\n  ├─ client/\n  │   ├─ src/\n  │   │   ├─ pages/\n  │   │   │   └─ settings.tsx\n  │   │   ├─ lib/\n  │   │   │   ├─ theme-controller.ts\n  │   │   │   ├─ theme-provider.tsx\n  │   │   │   ├─ animation-engine.ts\n  │   │   │   ├─ accessibility.ts\n  │   │   │   ├─ pwa.ts\n  │   │   │   ├─ gamification.ts\n  │   │   │   ├─ data-visualization.ts\n  │   │   ├─ styles/\n  │   │   │   ├─ visual-styles.css\n  │   │   │   ├─ dark-mode-gradients.css\n  │   │   │   └─ index.css\n  │   │   ├─ tests/\n  │   │   │   └─ performance.test.ts\n  │   │   ├─ App.tsx\n  │   │   ├─ main.tsx (or index.tsx)\n  │   │   └─ ...\n  │   └─ package.json\n  ├─ server/\n  │   ├─ routes/\n  │   │   └─ stripeRoutes.ts\n  │   ├─ services/\n  │   │   └─ azureOpenai.ts\n  │   ├─ auth.ts\n  │   ├─ storage.ts\n  │   ├─ index.ts (Express server entry)\n  │   └─ package.json\n  ├─ .env\n  ├─ README.md\n  └─ ...\n```\n\n----------------------------------------\n\nTITLE: Installing fb-watchman via npm - Shell Command\nDESCRIPTION: This snippet demonstrates how to install the fb-watchman package from the npm registry for use in Node.js projects. It requires Node.js and npm to be pre-installed on the system. Running this command will download and add fb-watchman to the current project's dependencies. No code parameters are required; simply execute in your project directory. The output is the updated node_modules with the fb-watchman package available for import.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fb-watchman/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install fb-watchman\n```\n\n----------------------------------------\n\nTITLE: Finding raw-body Package Owners using npm CLI\nDESCRIPTION: This shell command uses the Node Package Manager (npm) command-line interface to list the current owners of the 'raw-body' package. This information is needed to contact the appropriate maintainers for reporting security vulnerabilities as per the project's security policy.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/SECURITY.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm owner ls raw-body\n```\n\n----------------------------------------\n\nTITLE: Configuring and Calling Azure OpenAI Chat Completion with Python SDK\nDESCRIPTION: This Python snippet demonstrates configuring the `openai` library to interact with an Azure OpenAI instance and then making a chat completion request. It sets the `api_type` to \"azure\" and configures the API base URL (`api_base`), API version (`api_version`), and API key (`api_key`) using environment variables (requires importing `os`). The `openai.ChatCompletion.create` method is then called, using the `engine` parameter to specify the Azure deployment name. The response content is extracted from the choices array.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742624126265.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport openai\nimport os # Added based on getenv usage\nopenai.api_type = \"azure\"\nopenai.api_base = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\nopenai.api_version = \"2024-05-01-preview\"  # or the version your resource requires\nopenai.api_key = os.getenv(\"AZURE_OPENAI_KEY\")\nresponse = openai.ChatCompletion.create(\n    engine=\"gpt-4\",  # use your deployment name\n    messages=[{\"role\": \"system\", \"content\": system_prompt}, {\"role\": \"user\", \"content\": user_prompt}]\n)\nresult = response['choices'][0]['message']['content']\n```\n\n----------------------------------------\n\nTITLE: Installing object-inspect using npm\nDESCRIPTION: Provides the command-line instruction to install the `object-inspect` package using the Node Package Manager (npm). Executing this command downloads and installs the library into the project's `node_modules` directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/object-inspect/readme.markdown#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install object-inspect\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Support: Enabling Require Hook\nDESCRIPTION: JavaScript snippet demonstrating how to enable the `hookRequire` option during installation. This option monkey patches the `require` function to monitor all loaded source files for inline source maps, but is not recommended for production.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@cspotcode/source-map-support').install({\n  hookRequire: true\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Brace Expansion Output using transform Option - JavaScript\nDESCRIPTION: Illustrates customizing each expanded value using the 'transform' function in options to modify character or numeric output in the expansion process. Shows examples for both character and numeric expansions. 'transform' receives the value and index, allowing construction of custom output arrays.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst alpha = braces.expand('x/{a..e}/y', {\n  transform(value, index) {\n    // When non-numeric values are passed, \"value\" is a character code.\n    return 'foo/' + String.fromCharCode(value) + '-' + index;\n  },\n});\nconsole.log(alpha);\n//=> [ 'x/foo/a-0/y', 'x/foo/b-1/y', 'x/foo/c-2/y', 'x/foo/d-3/y', 'x/foo/e-4/y' ]\n```\n\nLANGUAGE: js\nCODE:\n```\nconst numeric = braces.expand('{1..5}', {\n  transform(value) {\n    // when numeric values are passed, \"value\" is a number\n    return 'foo/' + value * 2;\n  },\n});\nconsole.log(numeric);\n//=> [ 'foo/2', 'foo/4', 'foo/6', 'foo/8', 'foo/10' ]\n```\n\n----------------------------------------\n\nTITLE: Getting Intermediate and Final Hash Results (JavaScript)\nDESCRIPTION: Demonstrates the behavior of the `result()` method. It shows that calling `result()` computes and returns the hash based on the current state but does not finalize or alter the state object. Hashing can continue by calling `hash()` again, and subsequent calls to `result()` will reflect the updated state.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/imurmurhash/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Do the whole string at once\nMurmurHash3('this is a test string').result();\n// 0x70529328\n\n// Do part of the string, get a result, then the other part\nvar m = MurmurHash3('this is a');\nm.result();\n// 0xbfc4f834\nm.hash(' test string').result();\n// 0x70529328 (same as above)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Extending Types Using TypeBox Extends in TypeScript\nDESCRIPTION: Demonstrates compile-type logic using TypeBox.Extends to model the conditional type 'string extends number ? true : false' and map the result to a literal boolean type. Useful for meta-programming or modeling type relationships in static typing scenarios.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Extends(\n  Type.String(),\n  Type.Number(),\n  Type.Literal(true),\n  Type.Literal(false)\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ts-node via NODE_OPTIONS for CommonJS (Shell)\nDESCRIPTION: Shell command showing how to register ts-node for CommonJS modules using the `NODE_OPTIONS` environment variable (`-r ts-node/register`). This allows other Node.js tools or child processes launched from this shell to automatically use ts-node. Includes an example of combining it with another Node.js flag (`--no-warnings`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nNODE_OPTIONS=\"-r ts-node/register --no-warnings\" node ./index.ts\n```\n\n----------------------------------------\n\nTITLE: Parsing and Error Handling with json-parse-even-better-errors - JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the 'json-parse-even-better-errors' library in Node.js to parse JSON strings. It showcases both the standard parse (which throws detailed errors with context) and the 'noExceptions' method (which returns undefined instead of throwing on error). Dependencies: Install 'json-parse-even-better-errors' via npm ('npm install --save json-parse-even-better-errors'). Key functions include parsing valid/invalid JSON strings and safer parsing with no-exception error handling. The required input is a JSON string; outputs are either parsed values or undefined.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json-parse-even-better-errors/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parseJson = require('json-parse-even-better-errors')\n\nparseJson('\"foo\"') // returns the string 'foo'\nparseJson('garbage') // more useful error message\nparseJson.noExceptions('garbage') // returns undefined\n```\n\n----------------------------------------\n\nTITLE: Using path-is-absolute to Check Path Types in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the 'path-is-absolute' module in a Node.js environment. It first imports the module. Then, it shows how calling the main function (`pathIsAbsolute()`) behaves differently depending on the host operating system (Linux vs. Windows). Finally, it illustrates how to explicitly use the POSIX (`pathIsAbsolute.posix()`) and Windows (`pathIsAbsolute.win32()`) specific checks, which return consistent boolean results regardless of the host OS.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-is-absolute/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pathIsAbsolute = require('path-is-absolute');\n\n// Running on Linux\npathIsAbsolute('/home/foo');\n//=> true\npathIsAbsolute('C:/Users/foo');\n//=> false\n\n// Running on Windows\npathIsAbsolute('C:/Users/foo');\n//=> true\npathIsAbsolute('/home/foo');\n//=> false\n\n// Running on any OS\npathIsAbsolute.posix('/home/foo');\n//=> true\npathIsAbsolute.posix('C:/Users/foo');\n//=> false\npathIsAbsolute.win32('C:/Users/foo');\n//=> true\npathIsAbsolute.win32('/home/foo');\n//=> false\n```\n\n----------------------------------------\n\nTITLE: Rendering cliui Multi-Column Output Example (Shell)\nDESCRIPTION: Shows the expected shell output from using cliui's layout DSL, demonstrating how text is aligned into rows and columns with padding. This output is the result of running the prior JavaScript snippet with cliui and is formatted for human readability on the command line. Inputs are structured CLI options, and the output is aligned for clarity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cliui/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUsage: node ./bin/foo.js\n  <regex>  provide a regex\n  <glob>   provide a glob          [required]\n```\n\n----------------------------------------\n\nTITLE: Applying Accessibility Settings via Class Toggling in TypeScript\nDESCRIPTION: This TypeScript function `applyAccessibility` takes an `AccessibilitySettings` object and dynamically adds or removes CSS classes (`reduce-motion`, `high-contrast`) on the document's root element (`documentElement`). This allows CSS rules associated with these classes to take effect based on user preferences.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport function applyAccessibility(settings: AccessibilitySettings) {\n  if (settings.reduceMotion) document.documentElement.classList.add('reduce-motion');\n  else document.documentElement.classList.remove('reduce-motion');\n\n  if (settings.highContrast) document.documentElement.classList.add('high-contrast');\n  else document.documentElement.classList.remove('high-contrast');\n\n  // etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Credentials as Environment Variables (Configuration)\nDESCRIPTION: Lists example environment variable keys to be stored securely using Replit Secrets for the backend application. These variables hold sensitive credentials required to authenticate and interact with Azure services like OpenAI, Cosmos DB, and Blob Storage from the Node.js code, accessed via `process.env` (e.g., `process.env.AZURE_OPENAI_KEY`). Storing secrets this way prevents hardcoding them in the source code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAZURE_OPENAI_KEY – your Azure OpenAI API key.\nAZURE_OPENAI_ENDPOINT – the endpoint URL (e.g. https://<resource-name>.openai.azure.com/).\nAZURE_OPENAI_MODEL – the deployment name of your model (e.g. gpt-4 or as configured).\nAZURE_COSMOS_KEY, AZURE_COSMOS_URI – your Cosmos DB primary key and connection URI.\nAZURE_BLOB_CONNECTION_STRING or similar – for Blob storage access.\nAny other API keys (for analytics, etc.) or config settings.\n```\n\n----------------------------------------\n\nTITLE: gensync Options Object Wrapping fs APIs in JavaScript\nDESCRIPTION: Illustrates wrapping fs.readFileSync and fs.readFile using the gensync options object to create a function supporting all gensync invocation modes (sync, async, errback). The code snippet provides invocations for each available interface, highlighting interoperability. Requires Node.js fs module and the gensync library, input arguments are the path and encoding, and the output is the read file buffer/string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gensync/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst readFile = gensync({\n  sync: fs.readFileSync,\n  errback: fs.readFile,\n});\n\nconst code = readFile.sync(\"./file.js\", \"utf8\");\nreadFile.async(\"./file.js\", \"utf8\").then(code => {})\nreadFile.errback(\"./file.js\", \"utf8\", (err, code) => {});\n```\n\n----------------------------------------\n\nTITLE: Using minimatch Function with matchBase Option in JavaScript\nDESCRIPTION: Provides an example of using the main `minimatch` function to check if a file path matches a specific pattern (`*.js`). It demonstrates the use of the `matchBase` option, which allows matching against the basename of a path if the pattern doesn't contain slashes (e.g., 'a?b' matches '/xyz/acb' but not '/xyz/acb/123'). Requires the `minimatch` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/minimatch/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar isJS = minimatch(file, \"*.js\", { matchBase: true })\n```\n\n----------------------------------------\n\nTITLE: Automatically Aborting an Async Operation after a Timeout in JavaScript\nDESCRIPTION: Shows how to create an `AbortSignal` that automatically triggers an abort after a specified duration (1000 milliseconds in this case) using the static `AbortSignal.timeout()` method. This signal is then passed to an asynchronous function (`doAsyncWork`). Assumes `doAsyncWork` accepts an object with an `abortSignal` property.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/abort-controller/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst signal = AbortSignal.timeout(1000);\ndoAsyncWork({ abortSignal: signal });\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Long-Format Time Strings using ms in JavaScript\nDESCRIPTION: Explains how to obtain full, written-out time format strings (like \"1 minute\", \"2 minutes\", \"10 hours\") from millisecond values by passing the `{ long: true }` option to the `ms` JavaScript function. Handles singular, plural, and negative cases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/ms/readme.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n----------------------------------------\n\nTITLE: Extending a debug Instance to Create Sub-Namespaces (JavaScript)\nDESCRIPTION: Creates a base debug instance ('auth') and then uses its `extend` method to create two new instances with extended namespaces ('auth:sign' and 'auth:login'). This allows for hierarchical organization of debug logs. Requires the 'debug' library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst log = require('debug')('auth');\n\n//creates new debug instance with extended namespace\nconst logSign = log.extend('sign');\nconst logLogin = log.extend('login');\n\nlog('hello'); // auth hello\nlogSign('hello'); //auth:sign hello\nlogLogin('hello'); //auth:login hello\n```\n\n----------------------------------------\n\nTITLE: Assigning Full Color Palette Object to CSS Variables (TypeScript)\nDESCRIPTION: Iterates through each key-value pair in the selected color palette, setting CSS variables (e.g., --color-primary, --color-accent) on the document's root element for consistent app-wide styling. Requires colors to be a key-value object, as from 'colorSystems', and to run in a browser context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nObject.entries(colors).forEach(([key, value]) => {\n  document.documentElement.style.setProperty(`--color-${key}`, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Import Source for React Plugin - JavaScript\nDESCRIPTION: Shows how to specify a custom import source for the JSX factory in the React plugin configuration. This may be used, for example, to enable libraries like Emotion for styling. The snippet requires @vitejs/plugin-react and is added to the plugins array or configuration. The main parameter is 'jsxImportSource' which sets the JSX runtime import location.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nreact({ jsxImportSource: '@emotion/react' })\n```\n\n----------------------------------------\n\nTITLE: Custom Cache-Control for File Types with Express - JavaScript\nDESCRIPTION: This advanced usage of 'serve-static' with Express attaches a custom cache control policy via the 'setHeaders' option. HTML files are served with a cache of 0, while other files are cached for one day ('1d'). The 'serveStatic.mime.lookup' method is used to determine file type. Requires 'express', 'path', and 'serve-static' modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/serve-static/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nvar express = require('express')\nvar path = require('path')\nvar serveStatic = require('serve-static')\n\nvar app = express()\n\napp.use(serveStatic(path.join(__dirname, 'public'), {\n  maxAge: '1d',\n  setHeaders: setCustomCacheControl\n}))\n\napp.listen(3000)\n\nfunction setCustomCacheControl (res, path) {\n  if (serveStatic.mime.lookup(path) === 'text/html') {\n    // Custom Cache-Control for HTML files\n    res.setHeader('Cache-Control', 'public, max-age=0')\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking String Against Multiple Globs with picomatch.isMatch (JavaScript)\nDESCRIPTION: Illustrates the usage of `picomatch.isMatch` to test if a given string (`a.a`) matches any pattern in an array of glob patterns (`['b.*', '*.a']`). It returns `true` if at least one pattern matches.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\n// picomatch.isMatch(string, patterns[, options]);\n\nconsole.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\nconsole.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n```\n\n----------------------------------------\n\nTITLE: Dark Mode-Compatible Container Surface in React (TSX)\nDESCRIPTION: Updates a container <div> to use Tailwind's dark variant, so its background becomes a surface variable in dark mode and remains white in light mode. Meant for use anywhere boxes, cards, or UI surfaces are rendered. Requires Tailwind with dark mode configured and the corresponding CSS variable defined.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n// After\n<div className=\"bg-white dark:bg-[var(--surface-2)] p-4\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Determining if a Value is a Valid React Element Type (React, JavaScript)\nDESCRIPTION: Shows how to use the react-is package to determine if various components and values are valid React element types. The code imports React and react-is, defines class-based, function-based, and forwardRef components, as well as a React context, and checks their validity using ReactIs.isValidElementType. Key parameters are the component references or factory results, and the output is a boolean for each. Prerequisites include react, react-dom, and react-is installed in the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/react-is/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from \\\"react\\\";\\nimport * as ReactIs from \\\"react-is\\\";\\n\\nclass ClassComponent extends React.Component {\\n  render() {\\n    return React.createElement(\\\"div\\\");\\n  }\\n}\\n\\nconst FunctionComponent = () => React.createElement(\\\"div\\\");\\n\\nconst ForwardRefComponent = React.forwardRef((props, ref) =>\\n  React.createElement(Component, { forwardedRef: ref, ...props })\\n);\\n\\nconst Context = React.createContext(false);\\n\\nReactIs.isValidElementType(\\\"div\\\"); // true\\nReactIs.isValidElementType(ClassComponent); // true\\nReactIs.isValidElementType(FunctionComponent); // true\\nReactIs.isValidElementType(ForwardRefComponent); // true\\nReactIs.isValidElementType(Context.Provider); // true\\nReactIs.isValidElementType(Context.Consumer); // true\\nReactIs.isValidElementType(React.createFactory(\\\"div\\\")); // true\n```\n\n----------------------------------------\n\nTITLE: Remapping Multiple Transformations Using Array Input (JavaScript)\nDESCRIPTION: Illustrates how to pass an array of sourcemap files for multiple sequential single-source transformations. The array should contain source maps from most recent to least recent, and the loader can simply return null as the mapping chain is provided explicitly. Requires the remapping package and a chain of compatible source maps. Input is an array of source maps and a loader callback; output is the fully composed source map.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@ampproject/remapping/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst remapped = remapping(\n  [minifiedTransformedMap, transformedMap],\n  () => null\n);\n\nconsole.log(remapped);\n// {\n//   file: 'transpiled.min.js',\n//   mappings: 'AAEE',\n//   sources: ['helloworld.js'],\n//   version: 3,\n// };\n```\n\n----------------------------------------\n\nTITLE: Defining Framer Motion Variants for Dolphin Container in TypeScript\nDESCRIPTION: Specifies `framer-motion` animation variants for the main container of the `SideProfileDolphin` component. The `idle` state resets position, while the `swimming` state animates the dolphin to a specified target position using a tween transition. The target position is passed via the `custom` prop.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648076558.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Define animation variants for the dolphin container\nconst dolphinVariants: Variants = {\n  idle: {\n    x: 0,\n    y: 0,\n    transition: { type: \"spring\", stiffness: 50, damping: 10 }\n  },\n  swimming: (target: { x: number; y: number } | undefined) => ({\n    x: target ? target.x : 0,\n    y: target ? target.y : 0,\n    transition: { type: \"tween\", duration: 5, ease: \"easeInOut\" }\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Concurrent Parameterized Tests using jest-each.test.concurrent - JavaScript\nDESCRIPTION: Uses .test.concurrent to run parameterized tests in parallel where possible, improving test-suite speed for async or non-conflicting tests. Each test receives its row of parameters and executes concurrently. This requires the underlying Jest environment to support concurrency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).test.concurrent(\\n  'returns the result of adding %d to %d',\\n  (a, b, expected) => {\\n    expect(a + b).toBe(expected);\\n  },\\n);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Creating Sockets for Node.js and Cloudflare Workers in JavaScript\nDESCRIPTION: This JavaScript function `getStream` demonstrates conditional logic to create a network socket. It checks for the presence of the native Node.js `net.Socket`. If available, it returns a standard Node.js socket. Otherwise, it imports `CloudflareSocket` from `pg-cloudflare` and returns an instance, suitable for environments like Cloudflare Workers. The `ssl` parameter determines if the socket should use SSL/TLS.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-cloudflare/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports.getStream = function getStream(ssl = false) {\n  const net = require('net')\n  if (typeof net.Socket === 'function') {\n    return net.Socket()\n  }\n  const { CloudflareSocket } = require('pg-cloudflare')\n  return new CloudflareSocket(ssl);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Features with CSS\nDESCRIPTION: This CSS snippet provides styles for accessibility features. The `.reduce-motion` class drastically shortens animation and transition durations for all elements within its scope. The `.high-contrast` class increases the contrast of elements it's applied to using a CSS filter. These classes are intended to be toggled by JavaScript based on user settings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.reduce-motion * {\n  animation-duration: 0.001ms !important;\n  animation-iteration-count: 1 !important;\n  transition-duration: 0.001ms !important;\n}\n.high-contrast {\n  filter: contrast(1.5);\n}\n/* etc. */\n```\n\n----------------------------------------\n\nTITLE: Checking Enabled Debug Namespaces Using the Debug Module in Shell\nDESCRIPTION: This shell command runs a Node.js one-liner using the 'debug' module to demonstrate how calling 'enable' after the process starts can override the DEBUG environment variable. The command expects the 'debug' package installed and uses the $DEBUG environment variable to start with 'foo', then enables 'bar' at runtime, finally logging whether 'foo' remains enabled (it does not in this case). Designed for shell usage with Node.js.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))'\\n\n```\n\n----------------------------------------\n\nTITLE: Using getChangedFilesForRoots with changedSince Option in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the `getChangedFilesForRoots` function to find files changed since a specific reference (e.g., the 'main' branch). It imports the function, provides a root path, and uses the `changedSince` option. The result, containing changed files and repository info, is handled asynchronously via a Promise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-changed-files/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {getChangedFilesForRoots} from 'jest-changed-files';\n\ngetChangedFilesForRoots(['/path/to/test'], {\n  changedSince: 'main',\n}).then(files => {\n  /*\n  {\n    repos: [],\n    changedFiles: []\n  }\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing Prerelease Omitting Number (JavaScript)\nDESCRIPTION: Shows how to use `semver.inc` with `false` as the fourth parameter to increment to a prerelease version ('1.2.4-beta') without appending a numeric index. Requires the `semver` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta', false)\n// '1.2.4-beta'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'halt-at-non-option' Behavior in Node.js CLI Parsing (Enabled)\nDESCRIPTION: This console example shows the output of a Node.js script (`example.js`) when the `halt-at-non-option` setting is enabled. Parsing stops at the first positional argument 'b', and subsequent tokens ('-x', 'y') are treated as positional arguments rather than options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n----------------------------------------\n\nTITLE: Running the Test Suite for etag - Shell\nDESCRIPTION: This command runs the test suite for the 'etag' module using npm. All dependencies must be installed beforehand. It helps verify that the package is working as expected after installation or changes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/etag/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-string-parser with yarn - Shell\nDESCRIPTION: This snippet details how to install the @babel/helper-string-parser package using yarn as the package manager. The command fetches and adds the package as a dependency in the project, provided that yarn is already installed and configured. It is intended to be run in the context of a Node.js project, updating the yarn.lock file accordingly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-string-parser/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/helper-string-parser\n```\n\n----------------------------------------\n\nTITLE: Using jsdiff.diffChars in Node.js for Character-Level Diffing\nDESCRIPTION: Node.js example demonstrating how to use the `jsdiff.diffChars` function to find character-level differences between two strings ('beep boop' and 'beep boob blah'). It requires the 'colors' library to add console colors and iterates through the differences, printing added characters in green, removed characters in red, and common parts in grey to the standard error stream.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('colors');\nvar jsdiff = require('diff');\n\nvar one = 'beep boop';\nvar other = 'beep boob blah';\n\nvar diff = jsdiff.diffChars(one, other);\n\ndiff.forEach(function(part){\n  // green for additions, red for deletions\n  // grey for common parts\n  var color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  process.stderr.write(part.value[color]);\n});\n\nconsole.log();\n```\n\n----------------------------------------\n\nTITLE: Installing the 'buffer-from' Package using npm\nDESCRIPTION: Installs the 'buffer-from' Node.js package as a project dependency using the Node Package Manager (npm). The '--save' flag ensures the package is added to the project's dependencies in `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/buffer-from/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nnpm install --save buffer-from\n```\n```\n\n----------------------------------------\n\nTITLE: Attaching a Callback to HTTP Response Completion in Node.js\nDESCRIPTION: Illustrates using `onFinished` to attach a listener callback to an HTTP response object (`res`). This callback function is invoked exactly once when the response finishes successfully or encounters an error. The callback receives an optional error object (`err`) as the first argument and the response object (`res`) as the second, suitable for performing cleanup tasks like closing associated resources.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/on-finished/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nonFinished(res, function (err, res) {\n  // clean up open fds, etc.\n  // err contains the error if request error'd\n})\n```\n\n----------------------------------------\n\nTITLE: Installing ci-info Library using npm\nDESCRIPTION: This Bash command installs the `ci-info` Node.js library using npm (Node Package Manager) and saves it as a project dependency. This command requires npm to be installed and accessible in the shell environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ci-info/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ci-info --save\n```\n\n----------------------------------------\n\nTITLE: Installing 'toidentifier' Module using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'toidentifier' module from the npm registry. This makes the module available for use within the current Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/toidentifier/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install toidentifier\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Transform for babel-jest\nDESCRIPTION: This JSON configuration snippet demonstrates how to explicitly define `babel-jest` as the transformer within Jest's configuration file (e.g., `jest.config.js` or `package.json`). The regular expression `\\\\.[jt]sx?$` targets files with `.js`, `.jsx`, `.ts`, or `.tsx` extensions, instructing Jest to process them using `babel-jest`. This step is required if using additional code preprocessors or preferring explicit configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-jest/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\"\n},\n```\n\n----------------------------------------\n\nTITLE: Importing setPrototypeOf in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to import the 'setprototypeof' polyfill using ES module syntax, suitable for TypeScript projects. The only dependency is the installed 'setprototypeof' package. This code provides access to the setPrototypeOf functionality within TypeScript, allowing for type-checked extensions of objects' prototypes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/setprototypeof/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport setPrototypeOf from 'setprototypeof'\n```\n\n----------------------------------------\n\nTITLE: Appending Header Field to Vary Header - Node.js - JavaScript\nDESCRIPTION: Appends the 'Origin' field to the 'Vary' header of the HTTP response object 'res' using the 'vary' module. The example demonstrates in-place header manipulation, a common pattern in HTTP server middleware. 'res' must be an HTTP response object; if 'Origin' is already present, the header remains unchanged.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vary/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Append \"Origin\" to the Vary header of the response\nvary(res, 'Origin')\n```\n\n----------------------------------------\n\nTITLE: Joining SourceNode Children with a Separator in JavaScript\nDESCRIPTION: Illustrates the `SourceNode.prototype.join` method, which functions like `Array.prototype.join` but for the children of a SourceNode. It inserts the provided separator string between each child node and returns a new SourceNode representing the joined result.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nvar lhs = new SourceNode(1, 2, \"a.rs\", \"my_copy\");\nvar operand = new SourceNode(3, 4, \"a.rs\", \"=\");\nvar rhs = new SourceNode(5, 6, \"a.rs\", \"orig.clone()\");\n\nvar node = new SourceNode(null, null, null, [ lhs, operand, rhs ]);\nvar joinedNode = node.join(\" \");\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server - Bash\nDESCRIPTION: Starts both the backend Express server and Vite frontend server in development mode using npm. Assumes all environment variables are set and prerequisites are met. Backend runs at http://localhost:3000, frontend at http://localhost:5173. Useful for iterative development and debugging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Color and Bold Style with Chalk in JavaScript\nDESCRIPTION: This snippet shows applying a foreground color using HSL (Hue, Saturation, Lightness) values (`32, 100, 50`) and the bold style using the Chalk library. Requires the 'chalk' npm package. Input includes three HSL integer values and the text; output is an ANSI-escaped string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.hsl(32, 100, 50).bold('Orange!')\n```\n\n----------------------------------------\n\nTITLE: Installing js-yaml CLI Globally via npm\nDESCRIPTION: Installs the js-yaml command-line interface (CLI) globally using npm. This makes the `js-yaml` command available system-wide for inspecting YAML files from the terminal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g js-yaml\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-string-parser with npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @babel/helper-string-parser package using npm. Users should have Node.js and npm installed prior to running this command. It downloads and adds the package to the project's dependencies, allowing its functionality to be imported elsewhere in the codebase. No further parameters are needed; the command expects to be run in the root directory of a Node.js project with write access to package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-string-parser/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/helper-string-parser\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer Sharing Memory with a TypedArray in JavaScript\nDESCRIPTION: Shows how to use `Buffer.from(arrayBuffer)` with the `.buffer` property of a TypedArray (like `Uint16Array`). The created Buffer shares the same underlying memory as the TypedArray, meaning changes in one affect the other. A `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 a0 0f>\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 70 17>\n```\n\n----------------------------------------\n\nTITLE: Measuring Function Execution Time with Vitest - TypeScript\nDESCRIPTION: This snippet demonstrates how to use Vitest in a TypeScript test file to measure and assert the execution time of a function using the performance.now() API. It is useful for performance regression testing to ensure that UI updates and animation triggers complete within acceptable thresholds. The dependency is Vitest, and performance tests are most often located under a test directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from 'vitest';\\n\\ntest('animation function executes within time budget', () => {\\n  const start = performance.now();\\n  runAnimationLogic();\\n  const duration = performance.now() - start;\\n  expect(duration).toBeLessThan(16); // 16ms per frame at 60fps\\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease version with identifier using semver.inc\nDESCRIPTION: Provides an example of using the `semver.inc` function in JavaScript to increment a version ('1.2.3') to the next prerelease version ('1.2.4'), specifying a custom prerelease identifier ('beta'). The resulting prerelease version number defaults to 0 ('1.2.4-beta.0').\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta')\n// '1.2.4-beta.0'\n```\n\n----------------------------------------\n\nTITLE: Conditionally Returning a Stream Based on Emptiness in JavaScript\nDESCRIPTION: Illustrates how to use the `isEmpty()` method to handle cases where no streams might be added to the merged stream, which is common in build tasks. If the stream remains empty after potential additions (commented out loop), it returns `null`; otherwise, it returns the populated merged stream. This prevents issues in task runners like Gulp that might not handle empty streams correctly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/merge-stream/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstream = require('merge-stream')();\n// Something like a loop to add some streams to the merge stream\n// stream.add(streamA);\n// stream.add(streamB);\nreturn stream.isEmpty() ? null : stream;\n```\n\n----------------------------------------\n\nTITLE: Importing the cookie Module (JavaScript)\nDESCRIPTION: Shows how to require the 'cookie' module in a Node.js environment in order to access its parsing and serialization methods. This is the basic initialization required before using any functionality from the library. No special parameters are involved.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar cookie = require('cookie');\n```\n\n----------------------------------------\n\nTITLE: Default Options for Asynchronous 'resolve' Function in JavaScript\nDESCRIPTION: This code defines the default options object used by the asynchronous `resolve(id, opts, cb)` function. It specifies default values for `paths`, `basedir`, `extensions`, `includeCoreModules`, custom file system operations (`readFile`, `isFile`, `isDirectory`, `realpath`, `readPackage`), `moduleDirectory`, and `preserveSymlinks`. It utilizes the Node.js `fs` module for default file system interactions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve/readme.markdown#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: ['.js'],\n    includeCoreModules: true,\n    readFile: fs.readFile,\n    isFile: function isFile(file, cb) {\n        fs.stat(file, function (err, stat) {\n            if (!err) {\n                return cb(null, stat.isFile() || stat.isFIFO());\n            }\n            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n            return cb(err);\n        });\n    },\n    isDirectory: function isDirectory(dir, cb) {\n        fs.stat(dir, function (err, stat) {\n            if (!err) {\n                return cb(null, stat.isDirectory());\n            }\n            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n            return cb(err);\n        });\n    },\n    realpath: function realpath(file, cb) {\n        var realpath = typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;\n        realpath(file, function (realPathErr, realPath) {\n            if (realPathErr && realPathErr.code !== 'ENOENT') cb(realPathErr);\n            else cb(null, realPathErr ? file : realPath);\n        });\n    },\n    readPackage: function defaultReadPackage(readFile, pkgfile, cb) {\n        readFile(pkgfile, function (readFileErr, body) {\n            if (readFileErr) cb(readFileErr);\n            else {\n                try {\n                    var pkg = JSON.parse(body);\n                    cb(null, pkg);\n                } catch (jsonErr) {\n                    cb(null);\n                }\n            }\n        });\n    },\n    moduleDirectory: 'node_modules',\n    preserveSymlinks: true\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Indicator Symbols in jest-diff Output in JavaScript\nDESCRIPTION: This JavaScript snippet sets the diff indicator symbols for deletions and insertions by providing aIndicator and bIndicator in the options object. This makes the output resemble common command-line diff tools with '<' and '>' for old and new values. Fully compatible with jest-diff.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\\n  aIndicator: '<',\\n  bIndicator: '>',\\n};\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests with ts-node (Mocha >= 7) (Shell)\nDESCRIPTION: Runs Mocha tests, using `ts-node/register` to handle TypeScript files (`.ts`, `.tsx`). It explicitly includes these extensions, sets up file watching on the `src` directory, targets test files matching `tests/**/*.{ts,tsx}`, and allows passing additional arguments (`[...args]`). This command is suitable for Mocha versions 7 and newer when using CommonJS. For ESM, the `--loader` flag would be used instead of `--require`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nmocha --require ts-node/register --extensions ts,tsx --watch --watch-files src 'tests/**/*.{ts,tsx}' [...args]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Types with Templatized Messages using makeerror in JavaScript\nDESCRIPTION: Shows how to create a custom error type with message placeholders using the makeerror library. Demonstrates substitution of template variables from a data object, enabling dynamic error messages. Requires Node.js and the 'makeerror' package. Key parameter is a data object passed to the error constructor; output is an Error instance with the message string replaced using provided data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/makeerror/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar makeError = require('makeerror')\nvar UnknownFileTypeError = makeError(\n  'UnknownFileTypeError',\n  'The specified type \"{type}\" is not known.'\n)\nvar er = UnknownFileTypeError({ type: 'bmp' })\n```\n\n----------------------------------------\n\nTITLE: Example Command-Line Usage for Node.js Script in Shell\nDESCRIPTION: Shows a representative example of how arguments are passed to a Node.js script leveraging the arg library. Intended to clarify the mapping between CLI input and parsed output. No dependencies or code execution—this snippet demonstrates CLI invocation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ node ./hello.js --verbose -vvv --port=1234 -n 'My name' foo bar --tag qux --tag=qix -- --foobar\n```\n\n----------------------------------------\n\nTITLE: Running Tests for fill-range Project (Shell)\nDESCRIPTION: Command used to install development dependencies and execute the unit tests for the `fill-range` project. It first runs `npm install` to ensure all dependencies are present, then `npm test` to run the test suite defined in `package.json`. Requires npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install && npm test\n```\n\n----------------------------------------\n\nTITLE: Installing call-bound via npm (Shell)\nDESCRIPTION: This command installs the 'call-bound' npm package and saves it as a dependency in your project's package.json file. This is the standard way to add the package to a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/call-bound/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save call-bound\n```\n\n----------------------------------------\n\nTITLE: Instantiating SourceMapConsumer in JavaScript\nDESCRIPTION: Shows the basic syntax for creating a new `SourceMapConsumer` instance by passing raw source map data (as a JSON string or object) to its constructor. This consumer object can then be used to query the map.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nvar consumer = new sourceMap.SourceMapConsumer(rawSourceMapJsonData);\n```\n\n----------------------------------------\n\nTITLE: Fetching Source Code via Context in istanbul-reports (JavaScript)\nDESCRIPTION: This method, part of the `context` object, is used to retrieve the source code content for a specified file path. It is crucial for report formats that embed or link to the original source code annotated with coverage data. Requires a `context` object and a `filePath` string argument.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-reports/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.getSource(filePath)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw ANSI Escape Codes with ansi-styles\nDESCRIPTION: This example shows how to use the `style.codes` Map, which contains raw ANSI escape codes (without the `\\u001B[` prefix and `m` postfix). It retrieves the corresponding closing code (39, for resetting color) for a given opening code (36, for cyan color). Requires the `ansi-styles` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-styles/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(style.codes.get(36));\n//=> 39\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Types with Yarn in Shell\nDESCRIPTION: This shell command adds the @babel/types package as a development dependency using the yarn package manager. It should be executed within the project directory where Yarn is already initialized. The command updates the project's package.json and yarn.lock files to include the dependency for working with Babel AST utilities.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/types/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/types --dev\n```\n\n----------------------------------------\n\nTITLE: Installing @sinonjs/fake-timers in Node or Browser with npm (Shell)\nDESCRIPTION: This shell command installs @sinonjs/fake-timers as a dependency in the current project. It can be run in any environment where npm is available, including Node.js projects or when preparing browser bundles. This package allows developers to simulate and control timer behavior for automated testing. No configuration options are included; the module will be saved in the node_modules directory by default.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @sinonjs/fake-timers\n```\n\n----------------------------------------\n\nTITLE: Installing Verb and Building Documentation (Shell)\nDESCRIPTION: This shell command installs the 'verb' documentation generator (specifically the dev branch from the 'verbose' organization) and the 'verb-generate-readme' plugin globally using npm. Afterwards, it executes the 'verb' command to generate the project's README.md file based on the configured template (likely .verb.md).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n----------------------------------------\n\nTITLE: Initializing source-map-js in Different Environments (Node.js, Browser, Firefox) - JavaScript\nDESCRIPTION: This snippet explains how to access the source-map-js module in different runtime environments: Node.js (using require), browser (using a global), and Firefox devtools (using require with a custom path). The core dependency is source-map-js, and no input parameters are needed. When executed appropriately, this sets up the sourceMap object, allowing for subsequent source map manipulations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Node.js\nvar sourceMap = require('source-map');\n\n// Browser builds\nvar sourceMap = window.sourceMap;\n\n// Inside Firefox\nconst sourceMap = require(\"devtools/toolkit/sourcemap/source-map.js\");\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Support and CoffeeScript - Bash\nDESCRIPTION: Installs source-map-support and coffeescript packages with npm to enable source-map-support functionality in CoffeeScript projects. Must be executed before compiling or running CoffeeScript demos.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm install source-map-support coffeescript\n```\n\n----------------------------------------\n\nTITLE: Installing 'on-finished' Module via npm\nDESCRIPTION: Demonstrates installing the 'on-finished' Node.js module using the npm (Node Package Manager) command-line interface. This command downloads the package from the npm registry and installs it as a dependency for the current project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/on-finished/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install on-finished\n```\n\n----------------------------------------\n\nTITLE: Flow: Class With Static-Named Property in JavaScript\nDESCRIPTION: Exhibits Flow's ability to process classes where a property is named 'static', previously problematic. Requires Flow syntax support. The 'static' property is given a type T; the output is verified by the Flow static type checker.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\ndeclare class A {\\n  static: T;\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-optional-chaining with yarn\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-optional-chaining` package as a development dependency using the yarn package manager. The `--dev` flag achieves the same result as npm's `--save-dev`, adding the package to `devDependencies`. Requires yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-optional-chaining/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-optional-chaining --dev\n```\n\n----------------------------------------\n\nTITLE: Invalid Electron Version Handling with electronToChromium (Node.js)\nDESCRIPTION: Shows handling of unmatched queries: if electronToChromium receives a version outside the known set, it returns undefined. Useful for guard clauses or handling user input errors. Requires an active e2c instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar chromeVersion = e2c.electronToChromium('9000');\n// chromeVersion is undefined\n```\n\n----------------------------------------\n\nTITLE: Running CoffeeScript-Transpiled Demo with Node - Bash\nDESCRIPTION: Runs demo.js (compiled from demo.coffee) using Node.js, demonstrating source map support's effect on error stack trace output. Part of the CoffeeScript demonstration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.js\n```\n\n----------------------------------------\n\nTITLE: Displaying semver command-line help\nDESCRIPTION: Shows the output of the `semver` command-line utility when run with the `-h` (help) flag. This output details the available options (like -r for range, -i for increment), usage patterns, and the overall purpose of the CLI tool for semantic version manipulation and checking.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ semver -h\n\nA JavaScript implementation of the https://semver.org/ specification\nCopyright Isaac Z. Schlueter\n\nUsage: semver [options] <version> [<version> [...]]\nPrints valid versions sorted by SemVer precedence\n\nOptions:\n-r --range <range>\n        Print versions that match the specified range.\n\n-i --increment [<level>]\n        Increment a version by the specified level.  Level can\n        be one of: major, minor, patch, premajor, preminor,\n        prepatch, prerelease, or release.  Default level is 'patch'.\n        Only one version may be specified.\n\n--preid <identifier>\n        Identifier to be used to prefix premajor, preminor,\n        prepatch or prerelease version increments.\n\n-l --loose\n        Interpret versions and ranges loosely\n\n-n <0|1>\n        This is the base to be used for the prerelease identifier.\n\n-p --include-prerelease\n        Always include prerelease versions in range matching\n\n-c --coerce\n        Coerce a string into SemVer if possible\n        (does not imply --loose)\n\n--rtl\n        Coerce version strings right to left\n\n--ltr\n        Coerce version strings left to right (default)\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no satisfying versions are found, then exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.\n```\n\n----------------------------------------\n\nTITLE: Retrieving SemVer Specification Version with semver.SEMVER_SPEC_VERSION (JavaScript)\nDESCRIPTION: This code demonstrates retrieving the Semantic Versioning specification version supported by the `semver` library. It imports the library and accesses the `SEMVER_SPEC_VERSION` constant to display the specification version (e.g., '2.0.0').\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver');\n\nconsole.log('We are currently using the semver specification version:', semver.SEMVER_SPEC_VERSION);\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Event Arguments with Destructuring in JavaScript (FAQ Context)\nDESCRIPTION: This snippet, part of the FAQ, demonstrates the recommended approach for handling multiple arguments passed via `emit()` in Emittery. Instead of supporting multiple arguments directly, Emittery encourages passing an array and using destructuring assignment within the event listener to access individual values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nemitter.on('🦄', ([foo, bar]) => {\n\tconsole.log(foo, bar);\n});\n\nemitter.emit('🦄', [foo, bar]);\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for istanbul-reports Configuration\nDESCRIPTION: This TypeScript code defines the interfaces and types used to configure various reports generated by Istanbul. It includes a factory function signature `create` to instantiate reports, defines common options like `FileOptions` and `ProjectOptions`, and specifies detailed configurations for different report types (e.g., `HtmlOptions`, `JsonOptions`, `LcovOptions`). It depends on types from `@types/istanbul-lib-report`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/istanbul-reports/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Node, ReportBase } from \"istanbul-lib-report\";\n\nexport function create<T extends keyof ReportOptions>(name: T, options?: Partial<ReportOptions[T]>): ReportBase;\n\nexport interface FileOptions {\n    file: string;\n}\n\nexport interface ProjectOptions {\n    projectRoot: string;\n}\n\nexport interface ReportOptions {\n    clover: CloverOptions;\n    cobertura: CoberturaOptions;\n    \"html-spa\": HtmlSpaOptions;\n    html: HtmlOptions;\n    json: JsonOptions;\n    \"json-summary\": JsonSummaryOptions;\n    lcov: LcovOptions;\n    lcovonly: LcovOnlyOptions;\n    none: never;\n    teamcity: TeamcityOptions;\n    text: TextOptions;\n    \"text-lcov\": TextLcovOptions;\n    \"text-summary\": TextSummaryOptions;\n}\n\nexport type ReportType = keyof ReportOptions;\n\nexport interface CloverOptions extends FileOptions, ProjectOptions {}\n\nexport interface CoberturaOptions extends FileOptions, ProjectOptions {}\n\nexport interface HtmlSpaOptions extends HtmlOptions {\n    metricsToShow: Array<\"lines\" | \"branches\" | \"functions\" | \"statements\">;\n}\nexport interface HtmlOptions {\n    verbose: boolean;\n    skipEmpty: boolean;\n    subdir: string;\n    linkMapper: LinkMapper;\n}\n\nexport type JsonOptions = FileOptions;\nexport type JsonSummaryOptions = FileOptions;\n\nexport interface LcovOptions extends FileOptions, ProjectOptions {}\nexport interface LcovOnlyOptions extends FileOptions, ProjectOptions {}\n\nexport interface TeamcityOptions extends FileOptions {\n    blockName: string;\n}\n\nexport interface TextOptions extends FileOptions {\n    maxCols: number;\n    skipEmpty: boolean;\n    skipFull: boolean;\n}\nexport type TextLcovOptions = ProjectOptions;\nexport type TextSummaryOptions = FileOptions;\n\nexport interface LinkMapper {\n    getPath(node: string | Node): string;\n    relativePath(source: string | Node, target: string | Node): string;\n    assetPath(node: Node, name: string): string;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Advanced: Overriding the source Property in LoaderContext (JavaScript)\nDESCRIPTION: Shows how to override the context's source property within the loader callback to affect the resolution location for child sources within sourcemaps. This technique allows precise manipulation of how source file paths appear in the final remapped source map, such as relocating files into nested directories. Relies on remapping, a loader callback, and understanding of source map resolution strategies. Inputs are a sourcemap, a contextualizing loader, and the output is the remapped map with custom source paths.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@ampproject/remapping/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst remapped = remapping(\n  minifiedTransformedMap,\n  (file, ctx) => {\n\n    if (file === 'transformed.js') {\n      // We pretend the transformed.js file actually exists in the 'src/' directory. When the nested\n      // source files are loaded, they will now be relative to `src/`.\n      ctx.source = 'src/transformed.js';\n      return transformedMap;\n    }\n\n    console.assert(file === 'src/helloworld.js');\n    // We could futher change the source of this original file, eg, to be inside a nested directory\n    // itself. This will be reflected in the remapped sourcemap.\n    ctx.source = 'src/nested/transformed.js';\n    return null;\n  }\n);\n\nconsole.log(remapped);\n// {\n//   …,\n//   sources: ['src/nested/helloworld.js'],\n// };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect dotenv Initialization with ES Modules (JavaScript)\nDESCRIPTION: Shows an incorrect approach to initializing `dotenv` in the main ES module (`index.mjs`). Calling `dotenv.config()` after importing a module that relies on `process.env` variables will fail because imports are processed before the main module body executes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_35\n\nLANGUAGE: js\nCODE:\n```\n// index.mjs\n// Note: this is INCORRECT and will not work\nimport * as dotenv from 'dotenv'\ndotenv.config()\n\nimport errorReporter from './errorReporter.mjs'\nerrorReporter.report(new Error('documented example'))\n```\n\n----------------------------------------\n\nTITLE: Checking Loading State with @istanbuljs/load-nyc-config in JavaScript\nDESCRIPTION: Demonstrates how to import and use the isLoading function from @istanbuljs/load-nyc-config to determine if configuration loading is currently in progress. Requires @istanbuljs/load-nyc-config as a dependency and a Node.js environment. Outputs a boolean to the console indicating if configuration loading is happening, useful for environments where hooks may be installed before the config is ready.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@istanbuljs/load-nyc-config/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {isLoading} = require('@istanbuljs/load-nyc-config');\\n\\nconsole.log(isLoading());\n```\n\n----------------------------------------\n\nTITLE: Starting a Promise Chain with p-try in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use 'p-try' to start a promise chain that safely handles synchronous exceptions. 'p-try' is required as a dependency, and the code must run in a Node.js environment. The main parameter is a potentially-throwing synchronous function, wrapped in an async IIFE. Errors are caught and logged, while values are printed to the console. The snippet expects the user to define 'synchronousFunctionThatMightThrow'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-try/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst pTry = require('p-try');\n\n(async () => {\n\ttry {\n\t\tconst value = await pTry(() => {\n\t\t\treturn synchronousFunctionThatMightThrow();\n\t\t});\n\t\tconsole.log(value);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the 'callsites' Package using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'callsites' library and its dependencies into the current Node.js project. This step is necessary before the library can be required and used in application code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/callsites/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install callsites\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for fill-range Project (Shell)\nDESCRIPTION: Command to generate the project's `README.md` file using the `verb` tool. It first installs `verb` and the `verb-generate-readme` plugin globally (if not already present) and then executes `verb`. This process typically uses a template file (e.g., `.verb.md`) to generate the final readme. Requires npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n----------------------------------------\n\nTITLE: Using shebang-regex to Match Shebang Lines (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the `shebang-regex` package in a Node.js environment. It first requires the module, which exports a pre-compiled regular expression object. Then, it utilizes the standard JavaScript RegExp methods `test()` to check if a sample string begins with a shebang line and `exec()` to extract the full shebang line (match index 0) and the captured command path (match index 1). This snippet assumes the `shebang-regex` package has been previously installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/shebang-regex/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst shebangRegex = require('shebang-regex');\n\nconst string = '#!/usr/bin/env node\\nconsole.log(\"unicorns\");';\n\nshebangRegex.test(string);\n//=> true\n\nshebangRegex.exec(string)[0];\n//=> '#!/usr/bin/env node'\n\nshebangRegex.exec(string)[1];\n//=> '/usr/bin/env node'\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease versions with base identifier using semver (JavaScript)\nDESCRIPTION: Demonstrates using an optional fourth argument (`identifierBase`) in the `semver.inc()` function to control the starting number for the prerelease identifier. Setting it to '1' starts the numeric suffix at 1, resulting in `1.2.4-beta.1`. Requires the `semver` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta', '1')\n// '1.2.4-beta.1'\n```\n\n----------------------------------------\n\nTITLE: Registering ts-node via NODE_OPTIONS for ESM (Shell)\nDESCRIPTION: Shell command demonstrating setting the `NODE_OPTIONS` environment variable to enable ts-node's native ECMAScript module support using `--loader ts-node/esm`. This ensures Node.js processes launched from this shell inherit this setting and use ts-node's ESM loader.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nNODE_OPTIONS=\"--loader ts-node/esm\"\n```\n\n----------------------------------------\n\nTITLE: Parsing CommonJS Exports using cjs-module-lexer API (JavaScript)\nDESCRIPTION: Demonstrates how to use cjs-module-lexer in a CommonJS environment to parse JavaScript source code and detect named exports and module reexports. The code shows import via require, the invocation of the parse function, and parses a string containing various CommonJS export assignments. Dependencies: cjs-module-lexer must be installed. The parse function returns an object with 'exports' and 'reexports' arrays that enumerate parsed export identifiers and reexported modules found in the source string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { parse } = require('cjs-module-lexer');\n\n// `init` return a promise for parity with the ESM API, but you do not have to call it\n\nconst { exports, reexports } = parse(`\n  // named exports detection\n  module.exports.a = 'a';\n  (function () {\n    exports.b = 'b';\n  })();\n  Object.defineProperty(exports, 'c', { value: 'c' });\n  /* exports.d = 'not detected'; */\n\n  // reexports detection\n  if (maybe) module.exports = require('./dep1.js');\n  if (another) module.exports = require('./dep2.js');\n\n  // literal exports assignments\n  module.exports = { a, b: c, d, 'e': f }\n\n  // __esModule detection\n  Object.defineProperty(module.exports, '__esModule', { value: true })\n`);\n\n// exports === ['a', 'b', 'c', '__esModule']\n// reexports === ['./dep1.js', './dep2.js']\n```\n\n----------------------------------------\n\nTITLE: Creating a Bound Resolver Function with resolve-from (Node.js, JavaScript)\nDESCRIPTION: Illustrates how to use JavaScript's Function.prototype.bind to create a partially applied resolver that always resolves modules from the same base directory ('foo'). This technique is helpful if you need to resolve multiple modules from one location repeatedly. The snippet shows the creation of the bound function and demonstrates usages with different moduleIds ('./bar', './baz'). Requires resolve-from to be installed and assumes 'foo/bar' and 'foo/baz' are valid paths.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-from/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolveFromFoo = resolveFrom.bind(null, 'foo');\n\nresolveFromFoo('./bar');\nresolveFromFoo('./baz');\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Simulated Idle Callback with FakeTimers - JavaScript\nDESCRIPTION: Cancels a callback scheduled for idle time using 'clock.cancelIdleCallback'. Requires an ID returned by requestIdleCallback. Ensures the background/low-priority callback will not fire.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclock.cancelIdleCallback(id)\n```\n\n----------------------------------------\n\nTITLE: Converting FormData to Blob and Sending via fetch or HTTP in Node.js - JavaScript\nDESCRIPTION: This snippet demonstrates using the formDataToBlob utility from 'formdata-polyfill/esm.min.js' to serialize a FormData instance as a Blob. It shows uploading the Blob as the request body with fetch, and also converting the Blob to a stream for use with lower-level Node.js HTTP libraries. Dependencies include 'node:stream' and 'formdata-polyfill/esm.min.js'. Parameters include the FormData instance, HTTP endpoint, and HTTP headers for size/type when using streams. This enables sending large files seamlessly and ensures compatibility with non-fetch libraries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/formdata-polyfill/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Readable } from 'node:stream'\nimport { FormData, formDataToBlob } from 'formdata-polyfill/esm.min.js'\n\nconst blob = formDataToBlob(new FormData())\nfetch('https://httpbin.org/post', { method: 'POST', body: blob })\n\n// node built in http and other similar http library have to do:\nconst stream = Readable.from(blob.stream())\nconst req = http.request('http://httpbin.org/post', {\n  method: 'post',\n  headers: {\n    'Content-Length': blob.size,\n    'Content-Type': blob.type\n  }\n})\nstream.pipe(req)\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of writeFileAtomic in Node.js\nDESCRIPTION: Demonstrates how to import the `write-file-atomic` module and call the asynchronous `writeFileAtomic` function. This function writes data to a file atomically, handling temporary files and renaming. Requires the `write-file-atomic` package. It takes filename, data, optional options, and a callback as arguments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/write-file-atomic/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar writeFileAtomic = require('write-file-atomic')\nwriteFileAtomic(filename, data, [options], [callback])\n```\n\n----------------------------------------\n\nTITLE: Converting Time Strings to Milliseconds using ms - JavaScript\nDESCRIPTION: This snippet illustrates using the 'ms' package to convert various human-readable time strings (such as '2 days', '1d', or '10h') into their millisecond equivalents. It demonstrates different input formats, including pluralized, abbreviated, decimal, and negative durations. The only dependency is the 'ms' library. The main parameter is a string containing a time duration, and the output is a number representing milliseconds. This approach works in both Node.js and browser environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/ms/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n```\n\n----------------------------------------\n\nTITLE: Increment Version with Prerelease Identifier via CLI - Bash\nDESCRIPTION: Shows how to increment a semantic version and append a prerelease identifier using the 'semver' command-line tool. Useful for scripting release workflows; requires 'semver' installed and expects a valid version string as input. Outputs the next prerelease version according to Semantic Versioning rules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta\n1.2.4-beta.0\n```\n\n----------------------------------------\n\nTITLE: Importing node-fetch in ES Modules - JavaScript\nDESCRIPTION: Demonstrates direct import of node-fetch using the ES Module syntax. Enables use of the Fetch API in ESM-mode Node.js environments, which is the recommended approach for node-fetch v3 and above.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\n```\n\n----------------------------------------\n\nTITLE: Using callBindBasic for Function Binding (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `call-bind-apply-helpers` package. It imports the package (aliased as `callBindBasic`), defines a function `f`, and then uses `callBindBasic` with an array `[f, 1]` to create a new function `fBound` where `this` is bound to `1`. The example verifies the binding and arguments using `assert` and shows that `fBound` works even after deleting the native `Function.prototype.call` and `Function.prototype.bind` methods.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/call-bind-apply-helpers/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst assert = require('assert');\nconst callBindBasic = require('call-bind-apply-helpers');\n\nfunction f(a, b) {\n\tassert.equal(this, 1);\n\tassert.equal(a, 2);\n\tassert.equal(b, 3);\n\tassert.equal(arguments.length, 2);\n}\n\nconst fBound = callBindBasic([f, 1]);\n\ndelete Function.prototype.call;\ndelete Function.prototype.bind;\n\nfBound(2, 3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Jest Preset in babel.config.js (JavaScript)\nDESCRIPTION: Sets up Babel to use the 'jest' preset by exporting a configuration object from babel.config.js. This approach is recommended for projects that want to apply the Jest preset across the entire project. It requires the babel-preset-jest package to be installed and babel.config.js to be present at the project root. The 'presets' key determines the transformation plugins that Babel applies to the code base.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-preset-jest/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  presets: ['jest'],\n};\n```\n\n----------------------------------------\n\nTITLE: Converting String Durations to Milliseconds Using ms in JavaScript\nDESCRIPTION: These examples illustrate how to use the 'ms' library in JavaScript to convert various time format strings (including days, hours, minutes, seconds, years, and both positive and negative values) into their equivalent number of milliseconds. The expected output for each conversion is provided in comments for clarity. The only dependency required is the 'ms' package, and the function supports input strings like '2 days', '1m', and numerical strings like '100', all of which are converted to their respective millisecond values. The function returns an integer or null if the input cannot be parsed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/ms/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n```\n\n----------------------------------------\n\nTITLE: Enforcing Subscription Tier Access in Node.js/Express Backend\nDESCRIPTION: This code snippet illustrates backend logic, likely within a Node.js/Express API route handler, to enforce feature gating based on user subscription plans. It checks if the authenticated user's 'plan' attribute is not 'Pro'. If the condition is met (user is not 'Pro'), it returns a 403 Forbidden status with an error message, preventing access to Pro-exclusive features. This requires access to a user object containing their plan information.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742624126265.txt#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif(user.plan !== 'Pro') { return res.status(403).json({error: \"Upgrade required\"}); }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Standard YAML Types - YAML\nDESCRIPTION: This YAML code snippet showcases the use of a variety of standard YAML tags and how they represent different data types, including nulls, booleans, numbers, binary data, timestamps, and collections such as arrays, objects, and sets. Useful for understanding the representation of types before transformation to JavaScript objects via JS-YAML. No specific external dependencies are required; input is YAML and the expected output is proper parsing into their respective JavaScript types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n!!null ''                   # null\\n!!bool 'yes'                # bool\\n!!int '3...'                # number\\n!!float '3.14...'           # number\\n!!binary '...base64...'     # buffer\\n!!timestamp 'YYYY-...'      # date\\n!!omap [ ... ]              # array of key-value pairs\\n!!pairs [ ... ]             # array or array pairs\\n!!set { ... }               # array of objects with given keys and null values\\n!!str '...'                 # string\\n!!seq [ ... ]               # array\\n!!map { ... }               # object\n```\n\n----------------------------------------\n\nTITLE: Defining Default Root CSS Color Variables (CSS)\nDESCRIPTION: Sets the default values for the application's core color CSS custom properties within the `:root` selector in `client/src/index.css`. These variables (`--color-primary`, `--color-secondary`, etc.) provide a baseline theme and are intended to be overridden dynamically by the `applyTheme` JavaScript function based on user preferences.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --color-primary: #06B6D4;\n  --color-secondary: #67E8F9;\n  --color-accent: #0E7490;\n  --color-light: #ECFEFF;\n  --color-medium: #CFFAFE;\n  --color-dark: #0891B2;\n  --color-contrast: #1F2937;\n  --color-badge: #06B6D4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Variables and Utilities for Theming\nDESCRIPTION: Provides CSS code for a global stylesheet (e.g., `index.css`) that defines default fallback values for theme color CSS custom properties (`--color-primary`, etc.). It also includes utility classes (`.text-primary`, `.bg-primary`) that use these variables, ensuring components can easily adopt the current theme colors. The `!important` flag suggests overriding potential conflicts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  /* default fallback (used if no color scheme is loaded) */\n  --color-primary: #06B6D4;\n  --color-secondary: #67E8F9;\n  --color-accent: #0E7490;\n  --color-badge: #06B6D4;\n}\n\n/* Utility classes that reference these variables */\n.text-primary {\n  color: var(--color-primary) !important;\n}\n.bg-primary {\n  background-color: var(--color-primary) !important;\n}\n/* ...etc... */\n```\n\n----------------------------------------\n\nTITLE: Declaring a Module Definition File in TypeScript - TypeScript\nDESCRIPTION: This code snippet shows how to declare a custom module in a TypeScript definition file. The declare module syntax allows introduction of custom type definitions for modules that do not have existing typings. Placeholders such as //<module definitions go here> should be replaced with actual type declarations as needed. This file should be located according to your typeRoots or typings folder conventions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '<module_name>' {\\n    // module definitions go here\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying 'argv' Option for Custom Arguments with arg in Node.js\nDESCRIPTION: Shows how to pass a custom 'argv' array to arg, useful when parsing argument lists other than default process.argv. Only requires the arg package. Key parameter is the custom argv array; the output includes all unparsed items in the _ array and keys mapped by spec.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst args = arg(\n\t{\n\t\t'--foo': String\n\t}, {\n\t\targv: ['hello', '--foo', 'world']\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Test Suite using each.describe in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'each' tagged template to define a suite of parameterized tests with variable injection into test names. It requires a testing framework that supports 'each' (e.g., Jest) and runs multiple related test cases defined in a tabular form. Parameters 'a', 'b', and 'expected' are provided per row, and the tests check both the calculation result and argument mutability, with inputs being table data and outputs being executed test results.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Errors and Buffering Partial Data with get-stream (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to handle errors emitted from a stream when using the 'get-stream' library to collect data. The example uses an async IIFE, tries to collect data from a stream that emits an error at the end, and catches the resulting error. The code then logs the 'bufferedData' property provided by get-stream, which contains any data collected before the error. Input: a readable stream that is expected to emit an error after some data. Output: buffered data before the error event. Requires Node.js, 'get-stream', and a helper function 'streamThatErrorsAtTheEnd'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-stream/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n\ttry {\n\t\tawait getStream(streamThatErrorsAtTheEnd('unicorn'));\n\t} catch (error) {\n\t\tconsole.log(error.bufferedData);\n\t\t//=> 'unicorn'\n\t}\n})()\n```\n\n----------------------------------------\n\nTITLE: Using path-parse to Parse a File Path in JavaScript\nDESCRIPTION: Demonstrates how to require the `path-parse` library and use its main function to parse a given file path string. The example shows the expected output object containing the different path components (root, dir, base, ext, name). It depends on the `path-parse` package being installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-parse/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar pathParse = require('path-parse');\n\npathParse('/home/user/dir/file.txt');\n//=> {\n//       root : \"/\",\n//       dir : \"/home/user/dir\",\n//       base : \"file.txt\",\n//       ext : \".txt\",\n//       name : \"file\"\n//   }\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Results Page by Page (TypeScript)\nDESCRIPTION: Shows how to consume a `PagedAsyncIterableIterator` by iterating through its results page by page using the `byPage` method provided by @azure/core-paging. The `maxPageSize` option controls the maximum number of items fetched per page. It uses an `async for...of` loop to handle the asynchronous nature of fetching pages and items. Requires a client instance with a method returning a `PagedAsyncIterableIterator`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-paging/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n  for await (let page of client.listSecrets().byPage({ maxPageSize: 2 })) {\n    for (const secret of page) {\n      console.log(\"secret: \", secret);\n    }\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Micro-Interactions Context API in TypeScript\nDESCRIPTION: This TypeScript interface defines the shape of the context value provided by `MicroInteractionsProvider` and accessed via the `useMicroInteractions` hook. It outlines the functions available to trigger animations (`triggerAnimation`), show/hide the break timer (`showBreakTimer`, `hideBreakTimer`), and show/hide the mascot (`showMascot`, `hideMascot`) with specific messages and positions. It depends on the `AnimationType` and `MascotPosition` type aliases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definitions\ntype AnimationType = 'confetti' | 'stars' | 'circles' | 'fireworks' | 'random';\ntype MascotPosition = 'bottom-right' | 'top-right' | 'bottom-left' | 'top-left';\n\n// Hook interface\ninterface MicroInteractionsContextType {\n  triggerAnimation: (type?: AnimationType, message?: string) => void;\n  showBreakTimer: () => void;\n  hideBreakTimer: () => void;\n  showMascot: (message: string, position?: MascotPosition) => void;\n  hideMascot: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating AzureSASCredential (TypeScript)\nDESCRIPTION: Shows how to use `AzureSASCredential` from `@azure/core-auth` for signature-based authentication. The example demonstrates creating the credential with an initial signature string and subsequently updating the signature value via the `update` method. This is typically used for Shared Access Signatures (SAS).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-auth/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AzureSASCredential } from \"@azure/core-auth\";\n\nconst credential = new AzureSASCredential(\"signature1\");\n// prints: \"signature1\"\nconsole.log(credential.signature);\ncredential.update(\"signature2\");\n// prints: \"signature2\"\nconsole.log(credential.signature);\n```\n\n----------------------------------------\n\nTITLE: Installing pg-pool and pg using npm (Shell)\nDESCRIPTION: Installs both the pg-pool and pg packages using npm. This is a required step for enabling database pooling via pg-pool, which relies on node-postgres beneath. Run in your project's root directory before attempting to use the pg-pool API.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i pg-pool pg\n```\n\n----------------------------------------\n\nTITLE: Checking if Every String Matches Patterns with Micromatch in JavaScript\nDESCRIPTION: Demonstrates the `mm.every` function from the 'micromatch' library. It checks if every string in the input list matches any of the provided glob patterns. Requires the 'micromatch' library. Takes a list of strings, an array of patterns, and optional options. Returns `true` if all strings match at least one pattern, `false` otherwise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst mm = require('micromatch');\n// mm.every(list, patterns[, options]);\n\nconsole.log(mm.every('foo.js', ['foo.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// false\nconsole.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a fetch-blob Instance (JavaScript)\nDESCRIPTION: Illustrates different asynchronous methods to read the content of a `fetch-blob` object. It shows how to get the content as text (`blob.text()`), as an ArrayBuffer (`blob.arrayBuffer()`), or by iterating over its WHATWG stream (`blob.stream()`). Also includes examples of using the stream's reader directly in standard or 'byob' (bring your own buffer) mode. Requires an existing `blob` instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fetch-blob/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Ways to read the blob:\nconst blob = new Blob(['hello, world'])\n\nawait blob.text()\nawait blob.arrayBuffer()\nfor await (let chunk of  blob.stream()) { ... }\nblob.stream().getReader().read()\nblob.stream().getReader({mode: 'byob'}).read(view)\n```\n\n----------------------------------------\n\nTITLE: Defining Template Literal Types with TypeBox in TypeScript\nDESCRIPTION: This snippet demonstrates how to define types equivalent to TypeScript's template literals using `Type.TemplateLiteral` in TypeBox. It creates a type `T` equivalent to `'optionA' | 'optionB'` and a `Record` type `R` using `T` as keys. It shows the generated TypeBox schemas and the inferred TypeScript types using `Static`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript\n\ntype T = `option${'A'|'B'}`                          // type T = 'optionA' | 'optionB'\n\ntype R = Record<T, string>                           // type R = {\n                                                     //   optionA: string\n                                                     //   optionB: string\n                                                     // }\n\n// TypeBox\n\nconst T = Type.TemplateLiteral([                     // const T = {\n  Type.Literal('option'),                            //   pattern: '^option(A|B)$',\n  Type.Union([                                       //   type: 'string'\n    Type.Literal('A'),                               // }\n    Type.Literal('B')\n  ])\n])\n\nconst R = Type.Record(T, Type.String())              // const R = {\n                                                     //   type: 'object',\n                                                     //   required: ['optionA', 'optionB'],\n                                                     //   properties: {\n                                                     //     optionA: {\n                                                     //       type: 'string'\n                                                     //     },\n                                                     //     optionB: {\n                                                     //       type: 'string'\n                                                     //     }\n                                                     //   }\n                                                     // }\n\ntype T = Static<typeof T>                            // type T = 'optionA' | 'optionB'\n\ntype R = Static<typeof R>                            // type R = {\n                                                     //   optionA: string\n                                                     //   optionB: string\n                                                     // }\n```\n\n----------------------------------------\n\nTITLE: Parsing NDJSON Streams with split2 in JavaScript\nDESCRIPTION: This snippet illustrates how to parse Newline Delimited JSON (NDJSON) using `split2`. It pipes a file stream through `split2`, providing `JSON.parse` as the mapper function. For each line (chunk) emitted by the splitter, `JSON.parse` is called, converting the JSON string into a JavaScript object. These objects are then emitted via the 'data' event. An 'error' event handler is included to catch potential parsing errors thrown by `JSON.parse`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/split2/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\nfs.createReadStream(file)\n  .pipe(split2(JSON.parse))\n  .on('data', function (obj) {\n    //each chunk now is a js object\n  })\n  .on(\"error\", function(error) {\n    //handling parsing errors\n  })\n```\n```\n\n----------------------------------------\n\nTITLE: Enforcing Non-Nullability of Properties - TypeScript\nDESCRIPTION: This snippet illustrates exclusion of null and undefined from a type using the NonNullable utility. The ServerBuilder class builds a server while ensuring the portNumber remains non-nullable. It requires 'strictNullChecks' enabled in TypeScript to produce correct type errors at assignment. The port method assigns a value to portNumber, ensuring its type never includes null or undefined. Attempts to explicitly assign null to portNumber trigger a type-check error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PortNumber = string | number | null;\n\n/** Part of a class definition that is used to build a server */\nclass ServerBuilder {\n\t\tportNumber!: NonNullable<PortNumber>;\n\n\t\tport(this: ServerBuilder, port: PortNumber): ServerBuilder {\n\t\t\t\tif (port == null) {\n\t\t\t\t\t\tthis.portNumber = 8000;\n\t\t\t\t} else {\n\t\t\t\t\t\tthis.portNumber = port;\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t}\n}\n\nconst serverBuilder = new ServerBuilder();\n\nserverBuilder\n\t\t.port('8000')   // portNumber = '8000'\n\t\t.port(null)     // portNumber =  8000\n\t\t.port(3000);    // portNumber =  3000\n\n// TypeScript error\nserverBuilder.portNumber = null;\n```\n\n----------------------------------------\n\nTITLE: Serving All Files from a Directory Using Send - Node.js JavaScript\nDESCRIPTION: Creates an HTTP server that serves files from '/www/public' mapped to URLs using the 'send' library. Uses 'parseurl' to extract the requested path, then serves files relative to the 'root' directory defined in options. Allows clients to access any file inside the directory with direct mapping.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, { root: '/www/public' })\n    .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Type Definitions for TypeScript in Shell\nDESCRIPTION: Installs the @types/node package, which provides type definitions for Node.js built-in modules. Required for TypeScript projects using raw-body to enable proper type checking and editor support. Should be executed in projects where TypeScript is used alongside raw-body.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n```sh\\n$ npm install @types/node\\n```\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Spawned Process with Execa - JavaScript\nDESCRIPTION: Demonstrates starting a long-running process and cancelling it mid-execution using Execa's .cancel() method. The example shows scheduling the cancellation via setTimeout and confirms process termination through error object properties. This pattern is useful for timeouts and user interrupts in CLI tools. Only Node.js and Execa are needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst execa = require('execa');\n\n(async () => {\n\tconst subprocess = execa('node');\n\n\tsetTimeout(() => {\n\t\tsubprocess.cancel();\n\t}, 1000);\n\n\ttry {\n\t\tawait subprocess;\n\t} catch (error) {\n\t\tconsole.log(subprocess.killed); // true\n\t\tconsole.log(error.isCanceled); // true\n\t}\n})()\n```\n\n----------------------------------------\n\nTITLE: Detecting React Elements (React, JavaScript)\nDESCRIPTION: Illustrates the use of react-is to confirm whether a JSX element is a valid React element, and to check its type against ReactIs.Element. The snippet requires react and react-is, and outputs booleans for isElement and equality checks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/react-is/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport React from \\\"react\\\";\\nimport * as ReactIs from 'react-is';\\n\\nReactIs.isElement(<div />); // true\\nReactIs.typeOf(<div />) === ReactIs.Element; // true\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Multiple Roots with Express - JavaScript\nDESCRIPTION: This example demonstrates cascading multiple static directories using Express and 'serve-static'. Files are looked up first in 'public-optimized/', then in 'public/'. Paths are constructed with 'path.join' and '__dirname' to ensure platform compatibility. Both 'path', 'express', and 'serve-static' modules are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/serve-static/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nvar express = require('express')\nvar path = require('path')\nvar serveStatic = require('serve-static')\n\nvar app = express()\n\napp.use(serveStatic(path.join(__dirname, 'public-optimized')))\napp.use(serveStatic(path.join(__dirname, 'public')))\napp.listen(3000)\n\n```\n\n----------------------------------------\n\nTITLE: Executing Project Tests via npm\nDESCRIPTION: This command executes the project's test suite using the Node Package Manager (npm). It typically runs the script specified under the 'test' key in the `package.json` file. As noted in version 1.0.6, this command replaced `make test` as the standard way to run tests.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie-signature/History.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP(S) Agents for fetch with Keep-Alive - JavaScript\nDESCRIPTION: This snippet demonstrates configuring fetch requests to use custom HTTP(S) Agent instances with keep-alive enabled, for controlling connection reuse and network options. It creates separate agents for HTTP and HTTPS and assigns the correct one based on the protocol using an agent function in the options. Dependencies: node-fetch and Node.js built-in http/https modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport http from 'node:http';\\nimport https from 'node:https';\\n\\nconst httpAgent = new http.Agent({\\n\\tkeepAlive: true\\n});\\nconst httpsAgent = new https.Agent({\\n\\tkeepAlive: true\\n});\\n\\nconst options = {\\n\\tagent: function(_parsedURL) {\\n\\t\\tif (_parsedURL.protocol == 'http:') {\\n\\t\\t\\treturn httpAgent;\\n\\t\\t} else {\\n\\t\\t\\treturn httpsAgent;\\n\\t\\t}\\n\\t}\\n};\n```\n\n----------------------------------------\n\nTITLE: Installing node-fetch TypeScript Type Definitions - Shell\nDESCRIPTION: This command installs TypeScript type definitions for node-fetch v2.x using npm and @types/node-fetch. It's required only for older node-fetch versions (before v3.x), as modern versions bundle their type definitions. Run this in your shell/terminal in the project's root directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @types/node-fetch@2.x\n```\n\n----------------------------------------\n\nTITLE: Composing CLI Output Rows via Layout DSL in cliui (JavaScript)\nDESCRIPTION: Illustrates use of cliui's layout DSL, where a single string containing line breaks and tabs structures rows and columns. Requires commonjs require of cliui and can set width as a parameter. Input string uses '\\n' for new rows and '\\t' for new columns, with support for padding via '\\s'. Outputs a formatted multi-line string to the console. Useful for succinctly creating multi-row, multi-column displays in Node.js.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cliui/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar ui = require('./')({\n  width: 60\n})\n\nui.div(\n  'Usage: node ./bin/foo.js\\n' +\n  '  <regex>\\t  provide a regex\\n' +\n  '  <glob>\\t  provide a glob\\t [required]'\n)\n\nconsole.log(ui.toString())\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage of the 'which' Utility\nDESCRIPTION: Shows the basic command-line interface (CLI) usage pattern for the 'which' utility, mirroring the standard BSD `which(1)` command. It takes optional flags (`-as`) followed by one or more program names to search for in the PATH.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/which/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nusage: which [-as] program ...\n```\n\n----------------------------------------\n\nTITLE: Installing @cspotcode/source-map-support via npm\nDESCRIPTION: Command to install the `@cspotcode/source-map-support` package using the Node Package Manager (npm). This makes the module available for use in a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @cspotcode/source-map-support\n```\n\n----------------------------------------\n\nTITLE: Importing the Accepts Library - Node.js JavaScript\nDESCRIPTION: This JavaScript code imports the \"accepts\" module into a Node.js application using CommonJS \"require\" syntax. The variable \"accepts\" is then available as a function for handling HTTP Accept headers. No additional parameters are required beyond a valid HTTP request object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/accepts/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar accepts = require('accepts')\n```\n\n----------------------------------------\n\nTITLE: Adding a mapping with SourceMapGenerator - JavaScript\nDESCRIPTION: Shows how to use addMapping to record a single mapping between generated and original code locations. Requires an object with 'source', 'original', and 'generated' properties, plus optional 'name'. Designed for use while incrementally building a source map.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ngenerator.addMapping({\n  source: \"module-one.scm\",\n  original: { line: 128, column: 0 },\n  generated: { line: 3, column: 456 }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing is-generator-fn with npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the 'is-generator-fn' package using the Node.js package manager. It should be run in a terminal in the root directory of your Node.js project. The command will download and add 'is-generator-fn' to your project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-generator-fn/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install is-generator-fn\n```\n\n----------------------------------------\n\nTITLE: Diagramming DecA(I)de Azure Services Architecture\nDESCRIPTION: This ASCII diagram illustrates the high-level architecture of the DecA(I)de application. It shows the interaction between the client browser, Azure services (Front Door/CDN, App Service hosting React frontend and Express backend, OpenAI, PostgreSQL, Blob Storage, Key Vault), and monitoring tools (Azure Monitor, Application Insights). The diagram highlights the flow of requests and data between components.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\n┌────────────────────────────────────────────────────────────┐\n│                       Client Browser                        │\n└───────────────────────────┬────────────────────────────────┘\n                            │\n                            ▼\n┌────────────────────────────────────────────────────────────┐\n│                    Azure Front Door / CDN                   │\n└───────────────────────────┬────────────────────────────────┘\n                            │\n                            ▼\n┌────────────────────────────────────────────────────────────┐\n│                    Azure App Service (Web)                  │\n│  ┌────────────────┐  ┌─────────────────┐  ┌──────────────┐  │\n│  │ React Frontend │  │ Express.js API  │  │ Auth Service │  │\n│  └────────────────┘  └────────┬────────┘  └──────────────┘  │\n└────────────────────────────────┼───────────────────────────┘\n                                 │\n          ┌────────────────────┬─┴───────────────────┐\n          │                    │                     │\n          ▼                    ▼                     ▼\n┌─────────────────┐  ┌──────────────────┐  ┌──────────────────┐\n│ Azure OpenAI    │  │ Azure Database   │  │ Azure Blob       │\n│ Service         │  │ for PostgreSQL   │  │ Storage          │\n└─────────────────┘  └──────────────────┘  └──────────────────┘\n          │                    │                     │\n          │                    ▼                     │\n          │          ┌──────────────────┐            │\n          └─────────►│ Azure Key Vault  │◄───────────┘\n                     └──────────────────┘\n                              │\n                              ▼\n                 ┌───────────────────────────┐\n                 │     Azure Monitor &        │\n                 │     Application Insights   │\n                 └───────────────────────────┘\n```\n```\n\n----------------------------------------\n\nTITLE: Deep Cloning Values using Value.Clone in TypeBox (TypeScript)\nDESCRIPTION: This snippet shows the usage of the `Value.Clone()` function from the TypeBox `Value` module. It performs a deep clone of the provided JavaScript object `{ x: 1, y: 2, z: 3 }`, creating a new object with the same structure and values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\n```\n\n----------------------------------------\n\nTITLE: Importing serve-static Module - JavaScript CommonJS\nDESCRIPTION: This snippet shows how to load the 'serve-static' middleware module into a Node.js application using CommonJS syntax. The returned 'serveStatic' function can then be configured and used to serve static files as a middleware component.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/serve-static/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar serveStatic = require('serve-static')\n\n```\n\n----------------------------------------\n\nTITLE: Writing to Console via Context in istanbul-reports (JavaScript)\nDESCRIPTION: This method, available on `context.console`, writes output to the configured console or stream without appending a newline character. It functions similarly to `process.stdout.write` and is used for building report output incrementally. Requires the `context.console` object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-reports/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.console.write\n```\n\n----------------------------------------\n\nTITLE: Importing Chromium to Electron Major Versions Mapping (Node.js)\nDESCRIPTION: Demonstrates importing the chromiumVersions submodule, giving direct access to major version relationships from Chromium to Electron versions. Effective for fine-tuned build size management, with no dynamic load required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar chromiumVersions = require('electron-to-chromium/chromium-versions');\n```\n\n----------------------------------------\n\nTITLE: Installing ee-first via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `ee-first` library and add it as a dependency to the current project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ee-first/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install ee-first\n```\n\n----------------------------------------\n\nTITLE: Building and Testing with npm (Shell)\nDESCRIPTION: These shell commands are used to set up the development environment and run tests for the project. `npm install` downloads and installs project dependencies listed in package.json. `npm test` executes the test suite defined in the project's configuration. The surrounding text mentions `npm test -- dev` for watching tests and `karma start` for manual browser testing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing node-releases Package using npm\nDESCRIPTION: This shell command utilizes the Node Package Manager (npm) to download and install the `node-releases` package. This is the standard procedure for adding the package as a dependency to a Node.js project. Requires an environment with Node.js and npm installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-releases/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node-releases\n```\n\n----------------------------------------\n\nTITLE: Globally Patching Node.js fs Module with graceful-fs in JavaScript\nDESCRIPTION: This snippet illustrates how to globally patch the native Node.js `fs` module with `graceful-fs` using its `gracefulify` method. This makes all subsequent uses of `fs` throughout the application benefit from `graceful-fs`'s improvements. This approach is cautioned against for libraries and recommended only for top-level application code due to potential side effects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/graceful-fs/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Make sure to read the caveat below.\nvar realFs = require('fs')\nvar gracefulFs = require('graceful-fs')\ngracefulFs.gracefulify(realFs)\n```\n\n----------------------------------------\n\nTITLE: Exporting Unified gensync Operation Variants in JavaScript\nDESCRIPTION: Demonstrates how to expose the various invocation styles provided by a gensync-wrapped operation for external consumption, following common Node.js naming conventions (Sync/Async errback). Allows users of the module to select synchronous, promise-based, or callback-based APIs. Intended for use as module exports within a JavaScript or Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gensync/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using the common 'Sync' suffix for sync functions, and 'Async' suffix for\n// promise-returning versions.\nexports.myOperationSync = myOperation.sync;\nexports.myOperationAsync = myOperation.async;\nexports.myOperation = myOperation.errback;\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-typescript with npm (Shell)\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-typescript` package using npm. The `--save-dev` flag ensures it's added as a development dependency in your project's `package.json`. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-typescript/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nnpm install --save-dev @babel/plugin-syntax-typescript\n```\n```\n\n----------------------------------------\n\nTITLE: Installing sprintf-js via npm (Shell)\nDESCRIPTION: Gives the npm command to install the sprintf-js module, allowing its use in Node.js projects. npm must be available in the system. Executing this command downloads and sets up the package in the node_modules directory of the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install sprintf-js\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure OpenAI Embedding Model\nDESCRIPTION: Identifies the specific Azure OpenAI embedding model, 'text-embedding-ada-002', recommended for generating vector embeddings from text data. This model is used to create numerical representations of content meaning for vector search.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\ntext-embedding-ada-002\n```\n\n----------------------------------------\n\nTITLE: Installing SWC and Dependencies for TypeScript Transpilation (Shell)\nDESCRIPTION: Shows how to install necessary SWC packages for faster TypeScript transpilation. The command uses npm to add @swc/core, @swc/helpers, and regenerator-runtime as development dependencies. Required packages depend on use of helpers and async/generator functions in your TypeScript code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @swc/core @swc/helpers regenerator-runtime\n```\n\n----------------------------------------\n\nTITLE: Base tsconfig.json content for @tsconfig/node12 (JSONC)\nDESCRIPTION: Displays the actual JSON content (with comments, hence JSONC) of the base configuration file provided by the `@tsconfig/node12` package. It defines compiler options optimized for Node.js 12, including target ECMAScript versions (ES2019, ES2020 features), module system (CommonJS), strict type checking, and module resolution strategy.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node12/README.md#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n  \"display\": \"Node 12\",\n\n  \"compilerOptions\": {\n    \"lib\": [\"es2019\", \"es2020.promise\", \"es2020.bigint\", \"es2020.string\"],\n    \"module\": \"commonjs\",\n    \"target\": \"es2019\",\n\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"moduleResolution\": \"node\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests using npm (Shell)\nDESCRIPTION: This command first installs the project's dependencies listed in `package.json` using `npm install`. Then, it executes the test suite defined in the `package.json`'s `scripts.test` field using `npm test`. Requires Node.js and npm to be installed, along with a valid `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install && npm test\n```\n\n----------------------------------------\n\nTITLE: Merging Gulp Streams for Linting HTML and JS in JavaScript\nDESCRIPTION: Provides a practical Gulp example demonstrating how `merge-stream` can combine different build pipelines. It merges a stream for validating HTML files (`gulp-w3c-html-validator`) with a stream for linting JavaScript files (`gulp-jshint`) into a single stream returned by the `lint` task. Dependencies shown are `gulp`, `gulp-w3c-html-validator`, `gulp-jshint`, and `merge-stream`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/merge-stream/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst gulp =          require('gulp');\nconst htmlValidator = require('gulp-w3c-html-validator');\nconst jsHint =        require('gulp-jshint');\nconst mergeStream =   require('merge-stream');\n\nfunction lint() {\n  return mergeStream(\n    gulp.src('src/*.html')\n      .pipe(htmlValidator())\n      .pipe(htmlValidator.reporter()),\n    gulp.src('src/*.js')\n      .pipe(jsHint())\n      .pipe(jsHint.reporter())\n  );\n}\ngulp.task('lint', lint);\n```\n\n----------------------------------------\n\nTITLE: Extending Base TSConfig for Node 14 - JSON\nDESCRIPTION: Configures your project's tsconfig.json to extend the standard Node 14 base configuration from @tsconfig/node14. Simply add the 'extends' key to your tsconfig.json top level. Requires the @tsconfig/node14 package to be installed. This approach centralizes best-practice TypeScript settings for Node 14.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node14/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extends\": \"@tsconfig/node14/tsconfig.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing picomatch via npm (Shell)\nDESCRIPTION: Shows the command to install the `picomatch` Node.js package using the npm package manager and save it as a project dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save picomatch\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer from a Specific Range of an ArrayBuffer in JavaScript\nDESCRIPTION: Demonstrates using the optional `byteOffset` and `length` arguments with `Buffer.from(arrayBuffer, byteOffset, length)` to create a Buffer that shares only a specific memory range within the given `ArrayBuffer`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema allOf Intersection Constraint in JSON\nDESCRIPTION: Represents an intersection of two object definitions using a JSON Schema allOf array. Each object requires a single numeric property ('x' or 'y') and specifies required fields and their types. This pattern allows for composite validation rules in JSON Schema and is especially suitable for cases where object schemas must be merged at validation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  allOf: [{\n    type: 'object',\n    required: ['x'],\n    properties: {\n      x: {\n        type: 'number'\n      }\n    }\n  }, {\n    type: 'object',\n    required: ['y'],\n    properties: {\n      y: {\n        type: 'number'\n      }\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing babel-jest and @babel/core using Yarn\nDESCRIPTION: This command installs the `babel-jest` package and its peer dependency `@babel/core` as development dependencies using the Yarn package manager. This setup enables Jest to automatically use Babel for compiling JavaScript code during tests.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-jest/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev babel-jest @babel/core\n```\n\n----------------------------------------\n\nTITLE: Getting Subnet Mask from Prefix Length - JavaScript\nDESCRIPTION: Demonstrates generating a subnet mask string from a given prefix length using subnetMaskFromPrefixLength. Returns a dotted-decimal string for valid prefix lengths. Used for creating subnet masks for network configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nipaddr.IPv4.subnetMaskFromPrefixLength(24) == \"255.255.255.0\"\nipaddr.IPv4.subnetMaskFromPrefixLength(29) == \"255.255.255.248\"\n```\n\n----------------------------------------\n\nTITLE: Using resolve-from to Resolve Module Paths (Node.js, JavaScript)\nDESCRIPTION: Provides a practical example of importing the resolve-from package and resolving the path to a given module file from a specified directory. The snippet shows both the require usage and the call to resolveFrom() with 'foo' as the base directory and './bar' as the target module. The output will be the resolved absolute path to the module if it exists. Requires that resolve-from is installed and that the file './foo/bar.js' exists relative to the process's root.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-from/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolveFrom = require('resolve-from');\n\n// There is a file at `./foo/bar.js`\n\nresolveFrom('foo', './bar');\n//=> '/Users/sindresorhus/dev/test/foo/bar.js'\n```\n\n----------------------------------------\n\nTITLE: Consuming a Source Map with SourceMapConsumer in JavaScript\nDESCRIPTION: Provides an example of using the `SourceMapConsumer` class from the `source-map` library. It shows how to instantiate the consumer with raw source map data and use methods like `originalPositionFor`, `generatedPositionFor`, and `eachMapping` to retrieve mapping details between generated and original code positions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar rawSourceMap = {\n  version: 3,\n  file: 'min.js',\n  names: ['bar', 'baz', 'n'],\n  sources: ['one.js', 'two.js'],\n  sourceRoot: 'http://example.com/www/js/',\n  mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'\n};\n\nvar smc = new SourceMapConsumer(rawSourceMap);\n\nconsole.log(smc.sources);\n// [ 'http://example.com/www/js/one.js',\n//   'http://example.com/www/js/two.js' ]\n\nconsole.log(smc.originalPositionFor({\n  line: 2,\n  column: 28\n}));\n// { source: 'http://example.com/www/js/two.js',\n//   line: 2,\n//   column: 10,\n//   name: 'n' }\n\nconsole.log(smc.generatedPositionFor({\n  source: 'http://example.com/www/js/two.js',\n  line: 2,\n  column: 10\n}));\n// { line: 2, column: 28 }\n\nsmc.eachMapping(function (m) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Default Charset with mime.charset - JavaScript\nDESCRIPTION: This code snippet shows how to use 'mime.charset' to determine the implied default character set for a given MIME content-type. The function returns a charset string such as 'UTF-8' for recognized text-based types or false if it cannot be determined. The mime-types package must be installed and required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-types/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmime.charset('text/markdown') // 'UTF-8'\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Require Hook using Pirates in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `addHook` function from the 'pirates' library to register a custom require hook. It shows importing the function (for both CommonJS and ES Modules), defining a `matcher` function to conditionally apply the hook based on the filename, and providing a hook function that modifies the code (replacing '@@foo'). The example also shows how to specify file extensions (`exts`) and how to store the returned function to revert the hook later. It depends on the 'pirates' npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pirates/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/register.js\nconst addHook = require('pirates').addHook;\n// Or if you use ES modules\n// import { addHook } from 'pirates';\n\nfunction matcher(filename) {\n  // Here, you can inspect the filename to determine if it should be hooked or\n  // not. Just return a truthy/falsey. Files in node_modules are automatically ignored,\n  // unless otherwise specified in options (see below).\n\n  // TODO: Implement your logic here\n  return true;\n}\n\nconst revert = addHook(\n  (code, filename) => code.replace('@@foo', 'console.log(\\'foo\\');'),\n  { exts: ['.js'], matcher }\n);\n\n// And later, if you want to un-hook require, you can just do:\nrevert();\n```\n\n----------------------------------------\n\nTITLE: Importing Major Version Mapping Directly (electron-to-chromium/versions, Node.js)\nDESCRIPTION: Illustrates how to import just the Electron to major Chromium version mapping from the specific versions submodule to reduce bundle sizes in Node.js projects. No initialization is needed after require. Used for optimized builds where only static data is needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar versions = require('electron-to-chromium/versions');\n```\n\n----------------------------------------\n\nTITLE: Example Project Directory Structure\nDESCRIPTION: Illustrates a sample directory structure for a Node.js project. This structure is used in the usage example to show how `pkg-dir` identifies '/Users/sindresorhus/foo' as the root directory because it contains 'package.json'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pkg-dir/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n└── Users\n    └── sindresorhus\n        └── foo\n            ├── package.json\n            └── bar\n                ├── baz\n                └── example.js\n```\n\n----------------------------------------\n\nTITLE: Installing finalhandler via npm\nDESCRIPTION: Installs the finalhandler Node.js module using the npm package manager. This command should be run in the terminal within a Node.js project directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/finalhandler/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install finalhandler\n```\n\n----------------------------------------\n\nTITLE: Using sisteransi to manipulate terminal cursor in Node.js\nDESCRIPTION: Demonstrates how to require the `sisteransi` library and use its `cursor` methods (`to`, `up`, `down`) to generate ANSI escape codes for controlling the terminal cursor position. It requires the `sisteransi` package to be installed and uses `process.stdout.write` to output the codes to the standard output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sisteransi/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ansi = require('sisteransi');\n// or const { cursor } = require('sisteransi');\n\nconst p = str => process.stdout.write(str);\n\n// move cursor to 2, 1\np(ansi.cursor.to(2, 1));\n\n// to up, one down\np(ansi.cursor.up(2)+ansi.cursor.down(1));\n```\n\n----------------------------------------\n\nTITLE: Appending to Error Message Using errorEx.append - JavaScript\nDESCRIPTION: This code demonstrates how to extend a custom error message by appending additional context using errorEx.append. The appended string can be parameterized with the property value, in this case, the file name. Dependencies include 'error-ex', and the error instance must have the named property set before throwing. The result is an error message with extra information seamlessly included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/error-ex/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar JSONError = errorEx('JSONError', {fileName: errorEx.append('in %s')});\n\nvar err = new JSONError('error');\nerr.fileName = '/a/b/c/foo.json';\nthrow err; //-> JSONError: error in /a/b/c/foo.json\n```\n\n----------------------------------------\n\nTITLE: Importing the concat-map Module in Node.js\nDESCRIPTION: This snippet shows the standard Node.js method for importing the `concat-map` module. It uses the `require` function to load the module, making its exported `concatMap` function available for use in the script.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/concat-map/README.markdown#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\nvar concatMap = require('concat-map')\n```\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-istanbul using npm in JavaScript Projects\nDESCRIPTION: Installs the babel-plugin-istanbul package as a development dependency using npm. This step is required for adding coverage instrumentation to JavaScript code via Babel. After execution, the plugin is available to be referenced in Babel configuration files such as .babelrc.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-istanbul/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev babel-plugin-istanbul\n```\n\n----------------------------------------\n\nTITLE: Installing Polyfill via npm - Shell\nDESCRIPTION: This shell snippet provides the command to install the 'setprototypeof' package using npm. It is a prerequisite for using the polyfill in JavaScript or TypeScript projects, adding the dependency to the project's package.json file. The command is cross-platform for node-based environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/setprototypeof/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save setprototypeof\n```\n\n----------------------------------------\n\nTITLE: Illustrating JSON with Comments\nDESCRIPTION: This snippet shows an example of a JSON-like structure containing both single-line (`//`) and multi-line (`/* */`) comments. The `strip-json-comments` package is designed to process such strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-json-comments/readme.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n\t// Rainbows\n\t\"unicorn\": /* ❤ */ \"cake\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using errorEx.line Helper for Custom Stack Messages - JavaScript\nDESCRIPTION: This example highlights the usage of errorEx.line to append a custom-formatted line to an error's stack trace based on a property ('fileName'). The code depends only on the 'error-ex' module, and the string uses %s as a placeholder for dynamic substitution. Set the relevant property before throwing to generate an informative stack line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/error-ex/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar errorEx = require('error-ex');\n\nvar FileError = errorEx('FileError', {fileName: errorEx.line('in %s')});\n\nvar err = new FileError('problem reading file');\nerr.fileName = '/a/b/c/d/foo.js';\nthrow err;\n\n/*\n\tFileError: problem reading file\n\t    in /a/b/c/d/foo.js\n\t    at tryReadme() (readme.js:7:1)\n*/\n```\n\n----------------------------------------\n\nTITLE: Importing the source-map Module in JavaScript Environments\nDESCRIPTION: Demonstrates the standard ways to get a reference to the `source-map` library in different contexts: using `require` in Node.js, accessing the global `window.sourceMap` in browser builds, and using `require` within the Firefox DevTools environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Node.js\nvar sourceMap = require('source-map');\n\n// Browser builds\nvar sourceMap = window.sourceMap;\n\n// Inside Firefox\nconst sourceMap = require(\"devtools/toolkit/sourcemap/source-map.js\");\n```\n\n----------------------------------------\n\nTITLE: Checking If a Debug Target is Enabled (JavaScript)\nDESCRIPTION: Demonstrates detection of whether a particular debug target is currently enabled using the 'debug' module's 'enabled' property. This supports conditional code execution based on the debugging state. Dependency: 'debug' package installed. Input: the debug instance; output: (potential) execution of code within the enabled-check block.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst debug = require('debug')('http');\\n\\nif (debug.enabled) {\\n  // do stuff...\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Chunks to SourceNode in JavaScript\nDESCRIPTION: Shows how to use the `add` prototype method to append chunks of generated code to an existing `SourceNode`. The chunk can be a string, another `SourceNode`, or an array containing strings and/or `SourceNode` instances.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nnode.add(\" + \");\nnode.add(otherNode);\nnode.add([leftHandOperandNode, \" + \", rightHandOperandNode]);\n```\n\n----------------------------------------\n\nTITLE: Overriding DEBUG Environment Variable with `debug.enable()`\nDESCRIPTION: Illustrates that calling `debug.enable()` programmatically within a Node.js script overrides any `DEBUG` environment variable settings passed during invocation. This example shows that 'foo' is not enabled despite `DEBUG=foo` because `dbg.enable('bar')` was called.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))'\n=> false\n```\n\n----------------------------------------\n\nTITLE: Checking Own Properties with `hasown` in JavaScript\nDESCRIPTION: This JavaScript example demonstrates the basic usage of the `hasown` library. It imports the `hasown` function and the standard Node.js `assert` module. It then uses `assert.equal` to verify the behavior of `hasown` with different objects and properties, confirming that it correctly identifies own properties (like `length` on `[]` or `a` on `{ a: 42 }`) versus inherited ones (like `toString` on `{}`). Requires Node.js environment and the `hasown` package installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/hasown/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst assert = require('assert');\nconst hasOwn = require('hasown');\n\nassert.equal(hasOwn({}, 'toString'), false);\nassert.equal(hasOwn([], 'length'), true);\nassert.equal(hasOwn({ a: 42 }, 'a'), true);\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Wasm Build\nDESCRIPTION: Presents benchmark performance results for the WebAssembly (Wasm) build of the lexer. Similar to the JS build results, it shows module load time, cold run time, and average warm run times for various sample files, measured in milliseconds (ms).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nModule load time\n> 10ms\nCold Run, All Samples\ntest/samples/*.js (3635 KiB)\n> 43ms\n\nWarm Runs (average of 25 runs)\ntest/samples/angular.js (1410 KiB)\n> 9.32ms\ntest/samples/angular.min.js (303 KiB)\n> 3.16ms\ntest/samples/d3.js (553 KiB)\n> 5ms\ntest/samples/d3.min.js (250 KiB)\n> 2.32ms\ntest/samples/magic-string.js (34 KiB)\n> 0.16ms\ntest/samples/magic-string.min.js (20 KiB)\n> 0ms\ntest/samples/rollup.js (698 KiB)\n> 6.28ms\ntest/samples/rollup.min.js (367 KiB)\n> 3.6ms\n\nWarm Runs, All Samples (average of 25 runs)\ntest/samples/*.js (3635 KiB)\n> 27.76ms\n```\n\n----------------------------------------\n\nTITLE: Prompt Chain with Multiple Inputs - Prompts Library - JavaScript\nDESCRIPTION: Illustrates asking a series of questions (a prompt chain) using an array of prompt objects. Ensures unique 'name' values to avoid data collision. Inputs are collected for username, age, and a customizable text; the collected object is returned when prompts complete.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst prompts = require('prompts');\n\nconst questions = [\n  {\n    type: 'text',\n    name: 'username',\n    message: 'What is your GitHub username?'\n  },\n  {\n    type: 'number',\n    name: 'age',\n    message: 'How old are you?'\n  },\n  {\n    type: 'text',\n    name: 'about',\n    message: 'Tell something about yourself',\n    initial: 'Why should I?'\n  }\n];\n\n(async () => {\n  const response = await prompts(questions);\n\n  // => response => { username, age, about }\n})();\n```\n\n----------------------------------------\n\nTITLE: Installing to-regex-range via npm\nDESCRIPTION: This command installs the 'to-regex-range' package and saves it as a dependency in your project's package.json file. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save to-regex-range\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/compat-data using npm (Shell)\nDESCRIPTION: This shell command demonstrates how to install the `@babel/compat-data` package as a project dependency using the Node Package Manager (npm). The `--save` flag (which is default in modern npm versions but included here for clarity/compatibility) ensures the package is added to the `dependencies` section of the `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/compat-data/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/compat-data\n```\n\n----------------------------------------\n\nTITLE: Synchronously Resolving a Module Path using 'resolve' in JavaScript\nDESCRIPTION: This snippet shows how to synchronously find the absolute path of the 'tap' module using the `resolve/sync` export (or `require('resolve').sync`). It sets the base directory for resolution (`__dirname`) and directly assigns the returned path to the `res` variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve/readme.markdown#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar resolve = require('resolve/sync'); // or, `require('resolve').sync\nvar res = resolve('tap', { basedir: __dirname });\nconsole.log(res);\n```\n\n----------------------------------------\n\nTITLE: Using Emittery for Async Event Emission and Subscription - JavaScript\nDESCRIPTION: Shows how to require Emittery, create an event emitter instance, subscribe to string and symbol events, and asynchronously emit events with associated data. Dependencies include the emittery package (imported via require), and the provided event names can be strings or symbols. Listeners process data when events are emitted. Outputs are log statements triggered by the listeners when events are emitted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\n\nemitter.on('🦄', data => {\n\tconsole.log(data);\n});\n\nconst myUnicorn = Symbol('🦄');\n\nemitter.on(myUnicorn, data => {\n\tconsole.log(`Unicorns love ${data}`);\n});\n\nemitter.emit('🦄', '🌈'); // Will trigger printing '🌈'\nemitter.emit(myUnicorn, '🦋');  // Will trigger printing 'Unicorns love 🦋'\n```\n\n----------------------------------------\n\nTITLE: Creating a Matcher with picomatch Function (JavaScript)\nDESCRIPTION: Example showing how to use the main `picomatch` function to create a matcher function `isMatch` using an extended glob pattern `*.!(*a)`. This pattern matches files ending with any character except 'a'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\n// picomatch(glob[, options]);\n\nconst isMatch = picomatch('*.!(*a)');\nconsole.log(isMatch('a.a')); //=> false\nconsole.log(isMatch('a.b')); //=> true\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection\nDESCRIPTION: Specifies that the connection to the PostgreSQL database is configured using a single environment variable, `DATABASE_URL`. This variable should contain the necessary connection string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nDatabase connection is configured via the `DATABASE_URL` environment variable.\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Automatic JSX Runtime in Vite React Plugin - JavaScript\nDESCRIPTION: Configures the React plugin to use the classic JSX runtime rather than the automatic one. This is useful for compatibility purposes or when debugging runtime issues. Parameter 'jsxRuntime' is set to 'classic', changing behavior of JSX transformation. Requires @vitejs/plugin-react.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nreact({ jsxRuntime: 'classic' })\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Body Expectation using status.empty[code]\nDESCRIPTION: Demonstrates checking if a specific HTTP status code typically expects an empty response body using the `status.empty` object (e.g., `status.empty[204]` returns `true`). Returns `undefined` for codes that usually have bodies or are unknown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nstatus.empty[200] // => undefined\nstatus.empty[204] // => true\nstatus.empty[304] // => true\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Named Custom Error with make-error in JavaScript\nDESCRIPTION: This code snippet demonstrates the creation and usage of a custom error type named CustomError using the make-error library. The makeError function is used to generate the constructor, and parameters are forwarded to the base Error class. Throwing this error allows using instanceof and supports custom messages. Dependency: make-error package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-error/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar CustomError = makeError(\"CustomError\");\n\n// Parameters are forwarded to the super class (here Error).\nthrow new CustomError(\"a message\");\n```\n\n----------------------------------------\n\nTITLE: Modeling Composite Object with Required Properties in JSON Schema\nDESCRIPTION: Presents an equivalent flat merged object schema in JSON Schema with both properties ('x' and 'y'), each required to be a number. This pattern is suitable when a single-object schema is needed, directly specifying both properties and their constraints without implicit merging logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  type: 'object',\n  required: ['x', 'y'],\n  properties: {\n    x: {\n      type: 'number'\n    },\n    y: {\n      type: 'number'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MDX and Custom Include Patterns to Vite React Plugin - JavaScript\nDESCRIPTION: Extends the Vite config to support MDX files in addition to JavaScript and TypeScript. It prepends the MDX plugin with 'pre' enforcement, and configures the React plugin to include files matching .mdx extensions as well. Requires @mdx-js/rollup, Vite, and @vitejs/plugin-react. Output is the customized Vite configuration with appropriate plugins for extended file support.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\nimport mdx from '@mdx-js/rollup'\\n\\nexport default defineConfig({\\n  plugins: [\\n    { enforce: 'pre', ...mdx() },\\n    react({ include: /\\\\.(mdx|js|jsx|ts|tsx)$/ }),\\n  ],\\n})\n```\n\n----------------------------------------\n\nTITLE: Installing FakeTimers with Configuration - JavaScript\nDESCRIPTION: Installs and configures FakeTimers with options to control which functions to hijack, the starting epoch, looping limits, automatic time advancement, and behavior for clearing native timers. Dependencies are the FakeTimers library and an optional configuration object with parameters as detailed. The output is a 'clock' object exposing timer methods, mimicking standard JS timing functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar clock = FakeTimers.install([config])\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of writeFileAtomicSync in Node.js\nDESCRIPTION: Shows how to import and use the synchronous version, `writeFileAtomicSync`, from the `write-file-atomic` module. This function performs the atomic write operation synchronously, blocking execution until complete. Requires the `write-file-atomic` package. It takes filename, data, and optional options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/write-file-atomic/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar writeFileAtomicSync = require('write-file-atomic').sync\nwriteFileAtomicSync(filename, data, [options])\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using JestWorker in Node.js - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a JestWorker instance pointing to a worker module using require.resolve. It shows asynchronous invocation of an exposed worker method using await. Dependencies: jest-worker package, Node.js (supports import syntax), and a separate 'worker.js' module exporting the required method. Parameters include the path to the worker module. The result of the called worker method is obtained as a promise. Outputs are the result value returned by the worker.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {Worker as JestWorker} from 'jest-worker';\n\nasync function main() {\n  const worker = new JestWorker(require.resolve('./worker'));\n  const result = await worker.hello('Alice'); // \"Hello, Alice\"\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTTP Server Returning 404 with finalhandler\nDESCRIPTION: Demonstrates creating a simple Node.js HTTP server that utilizes finalhandler to always return a 404 Not Found response for any incoming request. It initializes finalhandler for each request and calls the returned function immediately without an error argument.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/finalhandler/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar finalhandler = require('finalhandler')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  done()\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Creating Diff Objects Manually in JavaScript\nDESCRIPTION: Demonstrates how to manually instantiate `Diff` objects using the `Diff` constructor and the named constants (`DIFF_EQUAL`, `DIFF_DELETE`, `DIFF_INSERT`). This might be necessary when implementing custom diff cleanup or formatting algorithms based on the raw output of `diffStringsRaw` or `diffLinesRaw`. Requires `jest-diff`. Input: Diff type constant (e.g., `DIFF_EQUAL`), string value. Output: A `Diff` object instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst diffCommon = new Diff(DIFF_EQUAL, 'changed ');\nconst diffDelete = new Diff(DIFF_DELETE, 'from');\nconst diffInsert = new Diff(DIFF_INSERT, 'to');\n```\n\n----------------------------------------\n\nTITLE: Running Express.js Test Suite in Console\nDESCRIPTION: This command runs the test suite for the Express.js project using npm. It requires that all dependencies are already installed via 'npm install'. The script runs the 'test' script as defined in package.json and outputs test results and coverage information.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Installing lines-and-columns with npm in Shell\nDESCRIPTION: This shell snippet demonstrates how to install the lines-and-columns NPM package using npm. The --save flag ensures the package is added to the dependencies in package.json. No parameters are needed aside from the package name, and the command outputs the installation progress or errors. A working Node.js and npm environment is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/lines-and-columns/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install [--save] lines-and-columns\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Synchronous EventEmitter Behavior in JavaScript (FAQ Context)\nDESCRIPTION: This snippet, presented in the FAQ section, demonstrates the synchronous nature of Node.js's built-in `EventEmitter`. It shows how a listener immediately modifies a variable (`unicorn`) upon `emit`, contrasting with Emittery's asynchronous behavior. This is used to argue against optimizing for synchronous emission.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nlet unicorn = false;\n\nemitter.on('🦄', () => {\n\tunicorn = true;\n});\n\nemitter.emit('🦄');\n\nconsole.log(unicorn);\n//=> true\n```\n\n----------------------------------------\n\nTITLE: Enabling babel-plugin-jest-hoist via Babel CLI (Shell)\nDESCRIPTION: This command illustrates how to apply the `babel-plugin-jest-hoist` directly using the Babel command-line interface. The `--plugins jest-hoist` option tells Babel to use the plugin when transpiling the specified `script.js` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-jest-hoist/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ babel --plugins jest-hoist script.js\n```\n\n----------------------------------------\n\nTITLE: Instantiating Azure AI Search Client Objects with API Key - JavaScript\nDESCRIPTION: Demonstrates how to instantiate the SearchClient, SearchIndexClient, and SearchIndexerClient objects using an API key for authentication in a JavaScript (Node.js) environment. Dependencies include the @azure/search-documents package. Required parameters: endpoint URL, index name (for SearchClient), and API key string. These clients grant capability to query and manipulate documents, manage indexes, and control indexers and skillsets.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst {\n  SearchClient,\n  SearchIndexClient,\n  SearchIndexerClient,\n  AzureKeyCredential,\n} = require(\"@azure/search-documents\");\n\n// To query and manipulate documents\nconst searchClient = new SearchClient(\n  \"<endpoint>\",\n  \"<indexName>\",\n  new AzureKeyCredential(\"<apiKey>\")\n);\n\n// To manage indexes and synonymmaps\nconst indexClient = new SearchIndexClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n\n// To manage indexers, datasources and skillsets\nconst indexerClient = new SearchIndexerClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n```\n\n----------------------------------------\n\nTITLE: Representing Excluded Union in JSON Schema with Number Type\nDESCRIPTION: Provides a JSON Schema for the remainder of a union after excluding a type, resulting in a number type. Useful for cases where dynamic exclusion creates a narrowed validation schema.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  type: 'number'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cross-spawn (Node.js v8+)\nDESCRIPTION: Installs the latest version of the `cross-spawn` package using npm. This command is intended for environments running Node.js version 8 or higher.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cross-spawn/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install cross-spawn\n```\n\n----------------------------------------\n\nTITLE: Customizing Source Map Retrieval - JavaScript\nDESCRIPTION: Provides a customized retrieveSourceMap function for loading source maps from locations other than disk, such as in-memory caches. Pass this function in the install() options object. Used by environments like Meteor to optimize performance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nrequire('source-map-support').install({\n  retrieveSourceMap: function(source) {\n    if (source === 'compiled.js') {\n      return {\n        url: 'original.js',\n        map: fs.readFileSync('compiled.js.map', 'utf8')\n      };\n    }\n    return null;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using destroy to Close a File Stream in Node.js\nDESCRIPTION: This example demonstrates how to use the 'destroy' module to reliably close a file read stream. It first imports the necessary modules (`destroy` and `fs`), creates a `ReadStream` for 'package.json', and then calls `destroy(stream)` at a later point to ensure the stream and its associated resources (like file descriptors) are properly released.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/destroy/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar destroy = require('destroy')\n\nvar fs = require('fs')\nvar stream = fs.createReadStream('package.json')\n\n// ... and later\ndestroy(stream)\n```\n\n----------------------------------------\n\nTITLE: Interactive Toggle Prompt for Binary Option - JavaScript\nDESCRIPTION: Sets up a toggle prompt allowing users to switch between two states (e.g., 'yes' and 'no') interactively using keyboard controls. The prompt takes an initial state, custom labels for active and inactive positions, and collects responses as part of a CLI workflow. Primarily for binary choice interactions requiring clear active/inactive labeling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'toggle',\\n  name: 'value',\\n  message: 'Can you confirm?',\\n  initial: true,\\n  active: 'yes',\\n  inactive: 'no'\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in Windows CMD\nDESCRIPTION: Explains how to set the `DEBUG` environment variable in the standard Windows Command Prompt (CMD) using the `set` command. This variable controls which debug namespaces are enabled. The example shows enabling all namespaces (`*`) except those starting with `not_this`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=*,-not_this\n```\n\n----------------------------------------\n\nTITLE: Capturing Events with PostHog in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to capture analytics events (such as quiz completion) using the PostHog JavaScript SDK within a React app. PostHog must be initialized in your app (typically in the entry point using the PostHog javascript library). When key UI interactions occur, call posthog.capture with the event name and associated properties (e.g., {score, time}). This enables event data to be sent to your PostHog instance for subsequent analysis. Inputs include the event string and an object of event-specific properties; outputs are sent asynchronously to PostHog. Ensure PostHog is properly initialized before calling capture.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nposthog.capture('Completed Quiz', {score: 80, time: 120});\n```\n\n----------------------------------------\n\nTITLE: Querying Extension for MIME Type with mime - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the default file extension associated with a given MIME type using the 'extension' method from the 'mime' module. It requires the 'mime' package. Input is a MIME type string (e.g. 'text/html'), output is the default extension as a string (e.g. 'html'), or 'bin' for unknown types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.extension('text/html');                 // => 'html'\nmime.extension('application/octet-stream');  // => 'bin'\n```\n\n----------------------------------------\n\nTITLE: Condensing Consecutive Slashes with normalize-path in JavaScript\nDESCRIPTION: Demonstrates that normalize-path condenses multiple consecutive forward slashes in a path to a single slash, except as required in win32 namespaces. The function takes a string path and returns it normalized; only the core normalize-path dependency is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/normalize-path/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(normalize('.//foo//bar///////baz/')); \n//=> './foo/bar/baz'\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting of Object Keys in Diff Output via compareKeys Function in JavaScript\nDESCRIPTION: Sets a custom compareKeys function for object diffing using diff, arranging object keys in reverse order. The compareKeys option is used to control key order in output, and the snippet illustrates passing a comparison function for sorting. Results in diffs tailored for specific display preferences.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_39\n\nLANGUAGE: js\nCODE:\n```\nconst a = {c: 'c', b: 'b1', a: 'a'};\\nconst b = {c: 'c', b: 'b2', a: 'a'};\\n\\nconst options = {\\n  // The keys will be in reverse order\\n  compareKeys: (a, b) => (a > b ? -1 : 1),\\n};\\n\\nconst difference = diff(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Destructured Export with Sparse Array in JavaScript\nDESCRIPTION: Illustrates export destructuring with a sparse array, previously a cause of parse failures. No dependencies other than a supporting JS parser. The input is a destructuring export statement containing omitted elements; output is a valid or invalid parse.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\n// was failing due to sparse array\\nexport const { foo: [ ,, qux7 ] } = bar;\n```\n\n----------------------------------------\n\nTITLE: Capturing Custom Events with PostHog in JavaScript/React\nDESCRIPTION: This snippet shows how to use the PostHog JavaScript library to capture a custom event, 'Completed Quiz', along with relevant metadata like score and time. This is typically triggered by user actions in the frontend application (likely React) to track feature usage and user engagement. Requires the PostHog library to be initialized in the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nposthog.capture('Completed Quiz', {score: 80, time: 120})\n```\n\n----------------------------------------\n\nTITLE: Disabling and Restoring Debug Namespaces with Debug Library - JavaScript\nDESCRIPTION: Illustrates disabling all debug namespaces and subsequently restoring them using the string returned by 'debug.disable()'. This approach allows for temporarily suspending debug output without losing prior namespace state. Requires 'debug' library. Handles wildcard and wildcard exclusion syntax. No direct input/output except for debug logging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nlet debug = require('debug');\ndebug.enable('foo:*,-foo:bar');\nlet namespaces = debug.disable();\ndebug.enable(namespaces);\n```\n\n----------------------------------------\n\nTITLE: Basic Node.js Usage of 'debug' in an HTTP Server (JavaScript)\nDESCRIPTION: Example Node.js application (app.js) demonstrating how to require the 'debug' library, create a namespaced debugger instance ('http'), and log messages. It also sets up a basic HTTP server and requires a worker module ('./worker.js'). Debug output is controlled by the DEBUG environment variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %o', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Imports in Flow Syntax - JavaScript\nDESCRIPTION: Shows how to declare a module with imports using Flow's syntax in JavaScript. The snippet demonstrates a 'declare module' block that imports a type and declares an export type. Requires Babylon's parser to be configured for Flow syntax (Flow 0.37+ support). Input is Flow module declaration; output is an AST with type import and export handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndeclare module \"C\" {\n  import type { DT } from \"D\";\n  declare export type CT = { D: DT };\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Function Plugin (`print` Interface) with Pretty-Format (JavaScript)\nDESCRIPTION: This snippet defines a sample object `val` containing functions and demonstrates the usage of the `print`-based function plugin. It first calls `prettyFormat` with the plugin, showing the custom function output. Then, it calls `prettyFormat` without the plugin to show the default function formatting for comparison.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom tsconfig.json for Node 16 Projects - JSONC\nDESCRIPTION: This snippet shows a complete tsconfig.json file configured for a Node 16 environment, including settings for language features, module resolution, and strictness. It requires the TypeScript package and optionally inherits settings from @tsconfig/node16. Key compilerOptions include 'lib', 'module', 'target', 'strict', and others, designed to maximize compatibility and type safety for modern Node apps. Inputs include the properties shown; output is a fully configured TypeScript project with settings enforced as specified.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node16/README.md#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n  \"display\": \"Node 16\",\n\n  \"compilerOptions\": {\n    \"lib\": [\"es2021\"],\n    \"module\": \"Node16\",\n    \"target\": \"es2021\",\n\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"moduleResolution\": \"node\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using char-regex to Match Full Unicode Characters (JavaScript)\nDESCRIPTION: Demonstrates how to import and use the `char-regex` library in JavaScript. It contrasts the behavior of the standard JavaScript dot regex (`.`) with the `charRegex()` function when matching strings containing complex Unicode characters like emojis with modifiers, showing how `charRegex()` correctly identifies full characters. The standard dot regex splits the combined characters, while `charRegex()` treats them as single units.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/char-regex/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst charRegex = require(\"char-regex\");\n\n\"❤️👊🏽\".match(/./);\n//=> [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n\n\"❤️👊🏽\".match(charRegex());\n//=> [\"❤️\", \"👊🏽\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Formatters to debug - JavaScript\nDESCRIPTION: Demonstrates extending the debug module with a custom formatter (%h) for hex output, by adding a function to the 'debug.formatters' map. Shows usage with Buffer objects, and requires the 'debug' package. Inputs are namespaced logs and Buffer data; output is formatted as hex.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n----------------------------------------\n\nTITLE: Clearing Build Cache and Reinstalling Node Modules - Bash\nDESCRIPTION: Removes the node_modules and .vite directories to clear cached builds, then reinstalls dependencies. Useful for resolving persistent build errors or corrupted dependency states.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules .vite\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Data with dumpToBuffer and loadFromBuffer - JavaScript\nDESCRIPTION: Illustrates the synchronous process of encoding a JavaScript value (an array in this example) into BSER format using 'bser.dumpToBuffer', then decoding it back with 'bser.loadFromBuffer'. 'encoded' stores the BSER-encoded data, and the result after loading is demonstrated with a log statement. Only values serializable by BSER are supported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bser/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar encoded = bser.dumpToBuffer(['hello']);\nconsole.log(bser.loadFromBuffer(encoded)); // ['hello']\n```\n\n----------------------------------------\n\nTITLE: Enabling 'debug' in Browsers via localStorage (JavaScript)\nDESCRIPTION: Shows how to enable debug output in a web browser environment by setting the 'debug' key in `localStorage`. This example enables all namespaces starting with 'worker:'. The page needs to be refreshed after setting the value.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.debug = 'worker:*'\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin with yarn - Shell\nDESCRIPTION: This snippet provides the yarn command to add the @babel/plugin-syntax-object-rest-spread package as a development dependency. The '--dev' flag ensures that the package is only used during development. Yarn must be installed, and the project should be initialized before running this command. Upon execution, the plugin will be listed under 'devDependencies' in 'package.json', ready for Babel processing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-object-rest-spread/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @babel/plugin-syntax-object-rest-spread --dev\n```\n\n----------------------------------------\n\nTITLE: Referencing Universal Status Codes File (JSON)\nDESCRIPTION: Refers to the `codes.json` file, added in version 1.1.0. This file likely contains the raw mapping of status codes to messages in JSON format, intended to provide universal support or be consumable by other tools and languages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncodes.json\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies - Bash\nDESCRIPTION: This snippet demonstrates how to clone the DecA(I)de repository from GitHub and install its Node.js dependencies via npm. Git must be installed on your system, and you should have a compatible version of Node.js and npm as listed in the prerequisites. The commands fetch the codebase and download all required JavaScript libraries for the project. No parameters are necessary, and output will be folder creation and package installation logs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/decade.git\ncd decade\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Looking Up Routes by Path and Verb using app.lookup.VERB() in JavaScript\nDESCRIPTION: Illustrates how to use `app.lookup.VERB()` (e.g., `app.lookup.put`) introduced in Express 2.2.0 to find registered routes matching a specific HTTP verb and path pattern like '/user/:id'. This method, along with its alias `app.VERB(path)`, helps introspect defined routes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\napp.lookup.put('/user/:id')\n```\n\n----------------------------------------\n\nTITLE: Creating SourceNode from SourceMap in JavaScript\nDESCRIPTION: Illustrates the usage of the static method `SourceNode.fromStringWithSourceMap`. This method constructs a `SourceNode` tree from generated JavaScript code and an existing `SourceMapConsumer` instance. It requires the `fs` module to read file content and a `SourceMapConsumer` instance initialized with source map data. An optional `relativePath` can be provided for resolving relative source paths.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar consumer = new SourceMapConsumer(fs.readFileSync(\"path/to/my-file.js.map\", \"utf8\"));\nvar node = SourceNode.fromStringWithSourceMap(fs.readFileSync(\"path/to/my-file.js\"),\n                                              consumer);\n```\n\n----------------------------------------\n\nTITLE: Excluding Test Files from Code Coverage using babel-plugin-istanbul Options - JSON\nDESCRIPTION: This .babelrc configuration excludes files matching the pattern '**/*.spec.js' from coverage instrumentation by specifying an 'exclude' array within the plugin's options. It ensures the coverage report reflects only production code and not test files. Used in the test environment configuration for Babel; requires understanding of glob patterns and plugin options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-istanbul/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\n        [\"istanbul\", {\n          \"exclude\": [\n            \"**/*.spec.js\"\n          ]\n        }]\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Modules with a Function using require-directory (JavaScript)\nDESCRIPTION: Demonstrates using the `include` option with a custom function for filtering. The function receives the full path of each discovered file and should return `true` to include the module or `false` to exclude it, allowing for complex inclusion logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  check = function(path){\n    if(/onlyinclude.js$/.test(path)){\n      return true; // don't include -> corrected comment: return true means INCLUDE\n    }else{\n      return false; // go ahead and include -> corrected comment: return false means EXCLUDE\n    }\n  },\n  hash = requireDirectory(module, {include: check});\n```\n\n----------------------------------------\n\nTITLE: Compiling to IIFE Format with Rollup CLI\nDESCRIPTION: This Bash command demonstrates how to use the Rollup CLI to compile an entry file (`main.js`) into a single browser-compatible file (`bundle.js`) using the Immediately Invoked Function Expression (IIFE) format. The `--format iife` flag specifies the output format, and `--name \\\"myBundle\\\"` assigns a global variable name for the bundle. This format creates a self-executing function, suitable for inclusion via a `<script>` tag.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# compile to a <script> containing a self-executing function\nrollup main.js --format iife --name \"myBundle\" --file bundle.js\n```\n\n----------------------------------------\n\nTITLE: Querying All Request Addresses with Optional Trust Stopping in proxy-addr JavaScript\nDESCRIPTION: Illustrates proxy-addr.all usage, returning all remote addresses from a request. Optionally accepts a trust argument to stop further traversal once an untrusted address is encountered. Inputs are the request object and optional trust configuration; output is an address array ordered from closest to furthest.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr.all(req)\n```\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr.all(req, 'loopback')\n```\n\n----------------------------------------\n\nTITLE: Example Express Body Parser Middleware using type-is (JavaScript)\nDESCRIPTION: Demonstrates creating an Express.js middleware function that acts as a basic body parser. It uses `typeis.hasBody()` to check for a body and `typeis()` to determine the Content-Type, then switches based on the type to potentially call specific parsing logic (though parsing implementation is omitted). It requires the `express` and `type-is` packages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-is/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express')\nvar typeis = require('type-is')\n\nvar app = express()\n\napp.use(function bodyParser (req, res, next) {\n  if (!typeis.hasBody(req)) {\n    return next()\n  }\n\n  switch (typeis(req, ['urlencoded', 'json', 'multipart'])) {\n    case 'urlencoded':\n      // parse urlencoded body\n      throw new Error('implement urlencoded body parsing')\n    case 'json':\n      // parse json body\n      throw new Error('implement json body parsing')\n    case 'multipart':\n      // parse multipart body\n      throw new Error('implement multipart body parsing')\n    default:\n      // 415 error code\n      res.statusCode = 415\n      res.end()\n      break\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Escaping Backticks and Script Tags with html-escaper in JavaScript\nDESCRIPTION: Shows how to use html-escaper to encode a string containing backticks and script tags when setting an image 'src' attribute. This pattern is safe even in legacy Internet Explorer browsers, as escaped backticks will not affect HTML attribute behavior. Requires html-escaper to be installed. Input is any string containing potentially problematic characters for HTML; output is a safely-encoded string. The code alludes to browser compatibility considerations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/html-escaper/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar img = new Image();\nimg.src = html.escape(\n  'x` `<script>alert(1)</script>\"` `'\n);\n// it won't cause problems even in IE < 9\n\n```\n\n----------------------------------------\n\nTITLE: Detecting Newline Characters in JavaScript (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage of the 'detect-newline' module in a Node.js environment. It first imports the module using `require`. Then, it calls the `detectNewline` function with a sample string containing both Unix (`\\n`) and Windows (`\\r\\n`) newlines. The function analyzes the string and returns the dominant newline character, which is '\\n' in this case.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/detect-newline/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst detectNewline = require('detect-newline');\n\ndetectNewline('foo\\nbar\\nbaz\\r\\n');\n//=> '\\n'\n```\n\n----------------------------------------\n\nTITLE: Using `string-width` to Calculate Visual String Width in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the basic usage of the `string-width` package. It first imports the function using `require` and then calls it with different string inputs: a standard ASCII character ('a'), a fullwidth Unicode character ('古'), and a string containing ANSI escape codes wrapping a fullwidth character. The comments show the expected output, which represents the number of columns the string occupies in a terminal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/string-width/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst stringWidth = require('string-width');\n\nstringWidth('a');\n//=> 1\n\nstringWidth('古');\n//=> 2\n\nstringWidth('\\u001B[1m古\\u001B[22m');\n//=> 2\n```\n\n----------------------------------------\n\nTITLE: Converting Human-Readable Time Strings to Milliseconds with ms in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'ms' function by passing various human-readable time duration strings such as '2 days', '1d', or '-1h' and receiving their corresponding values in milliseconds as numbers. The examples cover positive, negative, whole, and fractional time units. Requires the 'ms' npm package to be installed. Input is a string, output is a number representing milliseconds.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/ms/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n```\n\n----------------------------------------\n\nTITLE: Using dotenvx Docker Prebuild Hook (Bash/Dockerfile)\nDESCRIPTION: Example Dockerfile instructions demonstrating how to use the `dotenvx` prebuild hook. This involves installing `dotenvx` within the Docker image, running `dotenvx prebuild` to potentially inject build-time secrets safely, and then using `dotenvx run` to manage environment variables at runtime.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n# Dockerfile\n...\nRUN curl -fsS https://dotenvx.sh/ | sh\n...\nRUN dotenvx prebuild\nCMD [\"dotenvx\", \"run\", \"--\", \"node\", \"index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Referencing Object Schema Definitions with TypeBox and JSON Schema - TypeScript/JSON\nDESCRIPTION: This snippet illustrates creating a reusable object schema with an identifier in TypeBox and referencing it elsewhere using Type.Ref. It uses TypeScript types for aliasing, and JSON Schema with the $ref keyword for cross-referencing. Required dependencies are TypeBox and a JSON Schema processor that resolves $id/$ref. Expected input is any object matching the 'T' schema; output is a schema reference, enabling schema reuse and composition.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Object({\n   x: Type.Number(),\n   y: Type.Number()\n}, { $id: 'T' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = {\n  x: number,\n  y: number\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"T\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Line from Coverage with v8 ignore next in Node.js\nDESCRIPTION: Shows how to exclude a specific line from coverage analysis using the special comment `/* v8 ignore next */`. The snippet initializes a variable and demonstrates platform-specific code that should be ignored. Requires no external dependencies beyond Node.js. The ignore comment must be placed immediately before the line to exclude.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-to-istanbul/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst myVariable = 99\\n/* v8 ignore next */\\nif (process.platform === 'win32') console.info('hello world')\n```\n\n----------------------------------------\n\nTITLE: Performing a Simple Search on Azure Search Documents in JavaScript\nDESCRIPTION: This snippet illustrates how to perform a basic search query using the simple query syntax in Azure Search via the `@azure/search-documents` library. It initializes a `SearchClient` and calls the `search` method with a search string ('wifi -luxury'). The results are then iterated asynchronously using `for await...of` to process each matching document.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const searchResults = await client.search(\"wifi -luxury\");\n  for await (const result of searchResults.results) {\n    console.log(result);\n  }\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Populating process.env with dotenv.populate() in JavaScript\nDESCRIPTION: Demonstrates using `dotenv.populate()` to add key-value pairs from a pre-parsed source object (`parsed`) into a target object, which is `process.env` in this case. This allows populating `process.env` after custom parsing or manipulation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst dotenv = require('dotenv')\nconst parsed = { HELLO: 'world' }\n\ndotenv.populate(process.env, parsed)\n\nconsole.log(process.env.HELLO) // world\n```\n\n----------------------------------------\n\nTITLE: Installing Execa - JavaScript\nDESCRIPTION: This snippet shows how to install the Execa library using npm. No dependencies other than Node.js and npm are required. Running this installs Execa package files in your project's node_modules folder, making it available for import in code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install execa\n```\n\n----------------------------------------\n\nTITLE: Using node-domexception to Access and Create DOMExceptions in Node.js\nDESCRIPTION: This JavaScript example demonstrates importing the `DOMException` class from the `node-domexception` package. It shows how to catch a native `DOMException` (specifically `DataCloneError` triggered by `postMessage`) and verify its properties and type. It also illustrates creating custom `DOMException` instances with specific messages and error names/codes, and accessing legacy error code constants. Requires NodeJS >=10.5 and the `node-domexception` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-domexception/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport DOMException from 'node-domexception'\nimport { MessageChannel } from 'worker_threads'\n\nasync function hello() {\n  const port = new MessageChannel().port1\n  const ab = new ArrayBuffer()\n  port.postMessage(ab, [ab, ab])\n}\n\nhello().catch(err => {\n  console.assert(err.name === 'DataCloneError')\n  console.assert(err.code === 25)\n  console.assert(err instanceof DOMException)\n})\n\nconst e1 = new DOMException('Something went wrong', 'BadThingsError')\nconsole.assert(e1.name === 'BadThingsError')\nconsole.assert(e1.code === 0)\n\nconst e2 = new DOMException('Another exciting error message', 'NoModificationAllowedError')\nconsole.assert(e2.name === 'NoModificationAllowedError')\nconsole.assert(e2.code === 7)\n\nconsole.assert(DOMException.INUSE_ATTRIBUTE_ERR === 10)\n```\n\n----------------------------------------\n\nTITLE: Installing ansi-regex via npm (Bash)\nDESCRIPTION: Command to install the `ansi-regex` package using the Node Package Manager (npm). This command should be executed in a terminal or command prompt environment where Node.js and npm are installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-regex/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ansi-regex\n```\n\n----------------------------------------\n\nTITLE: Resulting Output Structure for arg Parsing in Node.js\nDESCRIPTION: Shows the expected output object from parsing arguments using the custom 'argv' example. There are no dependencies; it demonstrates the structure returned by arg, with all options and extra arguments included as respective keys.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst args = {\n\t_: ['hello'],\n\t'--foo': 'world'\n};\n```\n\n----------------------------------------\n\nTITLE: Passing CLI Flags to ts-node (Shell)\nDESCRIPTION: Shell command example demonstrating how to pass a specific CLI flag (`--project`) to the ts-node command before specifying the script file (`say-hello.ts`) and any script arguments (`Ronald`). This flag tells ts-node to use a specific tsconfig file (`tsconfig-dev.json`) instead of the default one.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ ts-node --project tsconfig-dev.json say-hello.ts Ronald\nHello, Ronald!\n```\n\n----------------------------------------\n\nTITLE: Using Yargs with ESM Syntax - JavaScript\nDESCRIPTION: Shows Yargs usage in an ECMAScript Module context, highlighting modern import syntax. Includes a 'curl <url>' command which prints parsed arguments; demands at least one command to be provided. Requires Node.js with ESM support and the 'yargs' package. Useful for ESM-based Node.js projects or environments supporting import/export.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport yargs from 'yargs'\\nimport { hideBin } from 'yargs/helpers'\\n\\nyargs(hideBin(process.argv))\\n  .command('curl <url>', 'fetch the contents of the URL', () => {}, (argv) => {\\n    console.info(argv)\\n  })\\n  .demandCommand(1)\\n  .parse()\\n\n```\n\n----------------------------------------\n\nTITLE: Installing content-type Package Using npm - Shell\nDESCRIPTION: This shell command installs the 'content-type' package from npm registry, allowing it to be used as a dependency in Node.js projects. Requires Node.js and npm to be installed on the system. Run this command from your project root to add 'content-type' to your package.json and make its API available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-type/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install content-type\n```\n\n----------------------------------------\n\nTITLE: Specifying Locale for Case Conversion with camelcase (JavaScript)\nDESCRIPTION: Illustrates how to use the `locale` option in the `camelcase` function to specify the locale for case conversion rules. Examples include using specific locales like 'en-US' and 'tr-TR', providing an array of fallback locales, and demonstrating the effect of locale on characters like 'i'. Requires the `camelcase` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/node_modules/camelcase/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst camelCase = require('camelcase');\n\ncamelCase('lorem-ipsum', {locale: 'en-US'});\n//=> 'loremIpsum'\n\ncamelCase('lorem-ipsum', {locale: 'tr-TR'});\n//=> 'loremİpsum'\n\ncamelCase('lorem-ipsum', {locale: ['en-US', 'en-GB']});\n//=> 'loremIpsum'\n\ncamelCase('lorem-ipsum', {locale: ['tr', 'TR', 'tr-TR']});\n//=> 'loremİpsum'\n```\n\n----------------------------------------\n\nTITLE: Using res.jsonp() for JSONP Responses in Express.js\nDESCRIPTION: Introduces the `res.jsonp()` method for sending JSONP (JSON with Padding) responses in Express.js. This is useful for making cross-domain requests from browsers by wrapping the JSON response in a JavaScript function call specified by a query parameter (usually 'callback').\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nres.jsonp()\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice (Text)\nDESCRIPTION: Standard boilerplate text recommended by the Apache License 2.0 for inclusion in source files. This notice includes placeholders for copyright year and owner, and references the full license terms available online.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Creating a ts-node Shebang Script with Options (TypeScript)\nDESCRIPTION: TypeScript example demonstrating a shebang line that passes options directly to ts-node using the `env -S` flag (`#!/usr/bin/env -S ts-node --files`). This method depends on the system's `env` command supporting the `-S` flag, which is common in newer Linux and macOS versions. The script must have execute permissions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env -S ts-node --files\n// This shebang works on Mac and Linux with newer versions of env\n// Technically, Mac allows omitting `-S`, but Linux requires it\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - Node.js/npm (bash)\nDESCRIPTION: This snippet installs all Node.js dependencies listed in the project's package.json file using npm. Ensure Node.js (v18+) and npm are installed before running this. Run inside the project directory; on success, all required packages are installed locally.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using the partial() Helper for View Rendering in JavaScript\nDESCRIPTION: Illustrates different ways to use the `partial()` view helper, enhanced in Express 1.0.0. It shows deducing local variable names ('post' from 'forum/post'), passing direct objects ('user') for simpler local assignment within the partial, and contrasts it with the older style requiring an explicit '{ object: user }' structure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\npartial('forum/post', postObject) // Deduces 'post' local\n```\n\nLANGUAGE: javascript\nCODE:\n```\npartial('user', user) // Direct object passing, 'user' local\n```\n\nLANGUAGE: javascript\nCODE:\n```\npartial('user', { object: user }) // Older style\n```\n\n----------------------------------------\n\nTITLE: Populating Custom Object with Options using dotenv.populate() in JavaScript\nDESCRIPTION: Illustrates using `dotenv.populate()` to populate a custom `target` object from a `parsed` source object. It utilizes options like `override: true` to overwrite existing keys in the target and `debug: true` for verbose logging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst dotenv = require('dotenv')\nconst parsed = { HELLO: 'universe' }\nconst target = { HELLO: 'world' } // empty object\n\ndotenv.populate(target, parsed, { override: true, debug: true })\n\nconsole.log(target) // { HELLO: 'universe' }\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the cookie Module (Shell)\nDESCRIPTION: Shows how to execute the package's test suite using npm from the shell. The test command likely runs Mocha or another test runner as defined in the package's scripts. This step requires the module and any development dependencies to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Unified Diff Output Maintaining Object Key Order\nDESCRIPTION: A unified diff snippet is provided for two objects, preserving the original key order rather than the default sorted order. Shows how the diff markers indicate changed values at the appropriate key.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\\n+ Received\\n\\n  Object {\\n    \"c\": \"c\",\\n-   \"b\": \"b1\",\\n+   \"b\": \"b2\",\\n    \"a\": \"a\",\\n  }\n```\n\n----------------------------------------\n\nTITLE: Redirecting 'debug' Output Streams (JavaScript)\nDESCRIPTION: Shows how to redirect the output stream for specific debug namespaces or globally. By default, 'debug' logs to stderr. This example redirects the 'app:log' namespace to `console.log` (stdout) and then redirects all debug output globally to `console.info`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Configuration File (tsconfig.json) (Bash)\nDESCRIPTION: This Bash snippet creates the `tsconfig.json` file required for the TypeScript project using the `cat` command and a Here Document (EOL). The configuration specifies compiler options such as targeting ES2020, using NodeNext for module resolution, enabling ES module interop, enforcing strict type checking, defining the output directory (`dist`), setting path aliases for server and shared modules (`@server/*`, `@shared/*`), and specifying which files to include (server, shared, scripts) and exclude (node_modules, client) during compilation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Create tsconfig.json\ncat > tsconfig.json << EOL\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"NodeNext\",\n    \"moduleResolution\": \"NodeNext\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"outDir\": \"dist\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@server/*\": [\"server/*\"],\n      \"@shared/*\": [\"shared/*\"]\n    }\n  },\n  \"include\": [\"server/**/*\", \"shared/**/*\", \"scripts/**/*\"],\n  \"exclude\": [\"node_modules\", \"client\"]\n}\nEOL\n```\n```\n\n----------------------------------------\n\nTITLE: Adding PURGE Method Support in Express.js Routing\nDESCRIPTION: Introduces support for the HTTP PURGE method in Express.js routing. Snippets show how to define PURGE routes at both the application level (`app.purge`) and the router level (`router.purge`). The PURGE method is also included in `app.all`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\napp.purge\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.purge\n```\n\n----------------------------------------\n\nTITLE: Installing type-detect via npm (Bash)\nDESCRIPTION: Installs the `type-detect` library using the Node Package Manager (npm). This command should be run in a terminal within a Node.js project directory. It adds `type-detect` as a project dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install type-detect\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using StackUtils to Clean Stack Traces in JavaScript\nDESCRIPTION: Shows how to require and instantiate StackUtils in a Node.js application, specifying the current working directory and default Node.js internals as options. The snippet demonstrates cleaning an error stack trace and outputting a formatted version. Requires the stack-utils npm package and Node.js environment. The console.log statement prints a beautified stack trace, with file paths displayed relative to the project directory. Inputs: optional error object; Output: cleaned stack trace as a string. Assumes error stack formatting compatible with V8 engine.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/stack-utils/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst StackUtils = require('stack-utils');\nconst stack = new StackUtils({cwd: process.cwd(), internals: StackUtils.nodeInternals()});\n\nconsole.log(stack.clean(new Error().stack));\n// outputs a beautified stack trace\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Import of node-fetch in CommonJS - JavaScript\nDESCRIPTION: Demonstrates using the async import() function to dynamically load node-fetch from a CommonJS (.cjs) module. Allows usage of node-fetch in environments that predominantly use require(), by wrapping import in a function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// mod.cjs\nconst fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));\n```\n\n----------------------------------------\n\nTITLE: Pluralization with y18n in JavaScript\nDESCRIPTION: This example demonstrates how to use y18n for localized pluralization. It imports the pluralization function, passes in singular and plural forms along with a count and additional arguments, and prints the result. The code needs the y18n dependency and outputs the correctly pluralized string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/y18n/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst __n = require('y18n')().__n;\n\nconsole.log(__n('one fish %s', '%d fishes %s', 2, 'foo'));\n```\n\n----------------------------------------\n\nTITLE: Overriding Module System for ts-node in tsconfig.json (JSONC)\nDESCRIPTION: Illustrates how to override the module system for ts-node when 'module' is set to 'ESNext' for build tools but CommonJS is required for ts-node execution. The override is specified under the 'ts-node' key to affect only ts-node runs, leaving other tools unaffected.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_15\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\"\n  },\n  \"ts-node\": {\n    \"compilerOptions\": {\n      \"module\": \"CommonJS\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving a Specific File Using Send - Node.js JavaScript\nDESCRIPTION: Creates an HTTP server that sends a specific file ('/path/to/index.html') in response to all incoming requests. Uses the 'http' and 'send' modules. No URL parsing is performed; all requests return the same file. Listens on port 3000 by default.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, '/path/to/index.html')\n    .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Defining and Throwing a Custom Error Type with error-ex - JavaScript\nDESCRIPTION: This example demonstrates how to define a custom error class with a specified name using error-ex and instantiate it with a message. No external dependencies besides 'error-ex' are required. The snippet sets up a custom error, checks its name, and shows how it is thrown, producing an error with a unique type identifier. Input is the error string, output is a thrown error of the new type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/error-ex/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar JSONError = errorEx('JSONError');\n\nvar err = new JSONError('error');\nerr.name; //-> JSONError\nthrow err; //-> JSONError: error\n```\n\n----------------------------------------\n\nTITLE: Increment Existing Prerelease Version via CLI - Bash\nDESCRIPTION: Demonstrates incrementing an existing prerelease version using the 'semver' command-line tool without specifying a new prerelease identifier. This bumps the numeric identifier after the dash, e.g., from '1.2.4-beta.0' to '1.2.4-beta.1'. This requires the version to already include a prerelease tag.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.4-beta.0 -i prerelease\n1.2.4-beta.1\n```\n\n----------------------------------------\n\nTITLE: Excluding Matches from Arrays Using not Function in Micromatch (JavaScript)\nDESCRIPTION: Example of using mm.not to remove strings that match certain patterns from an array, displaying the filtered result. Inputs are arrays and patterns, output is an array of items not matching provided patterns. Requires micromatch as 'mm'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst mm = require('micromatch');\n// mm.not(list, patterns[, options]);\n\nconsole.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n//=> ['b.b', 'c.c']\n```\n\n----------------------------------------\n\nTITLE: Configuring Pool via Environment Variables (Shell)\nDESCRIPTION: Lists major supported PostgreSQL environment variables for connection configuration. These can be set in a shell environment, .env file, or ~/.bash_profile. Used by pg-pool and node-postgres to inherit credentials and operational parameters. Ensures consistent config across Node, psql, and other Postgres utilities.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nPGDATABASE=my_db\nPGUSER=username\nPGPASSWORD=\"my awesome password\"\nPGPORT=5432\nPGSSLMODE=require\n```\n\n----------------------------------------\n\nTITLE: Measuring Function Execution Time with Vitest and performance.now (TypeScript)\nDESCRIPTION: This code snippet, suggested for test/performance.test.ts, demonstrates how to measure the execution duration of functions using Vitest in conjunction with performance.now(). It is intended for assessing whether UI animations or theme changes are performant and meet defined performance thresholds. The code requires Vitest as the test framework and assumes a browser-like environment or a polyfill for performance.now(). Inputs include the target function to be tested, and outputs are assertion results or logs showing elapsed time.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from 'vitest';\\n\\ntest('animation runs under threshold', () => {\\n  const thresholdMs = 100;\\n  const start = performance.now();\\n  // Call the animation or theming function\\n  performThemeChange();\\n  const duration = performance.now() - start;\\n  expect(duration).toBeLessThan(thresholdMs);\\n});\\n\\nfunction performThemeChange() {\\n  // Example placeholder for actual UI logic\\n  for (let i = 0; i < 100000; ++i) { /* dummy operation */ }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using ansi-escapes to Control Terminal Cursor in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `ansi-escapes` library within a Node.js application. It first imports the library using `require`. Then, it constructs an escape sequence by concatenating the results of `ansiEscapes.cursorUp(2)` (move cursor up 2 rows) and `ansiEscapes.cursorLeft` (move cursor to the beginning of the line), and writes this sequence to standard output (`process.stdout`) to manipulate the terminal cursor.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-escapes/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ansiEscapes = require('ansi-escapes');\n\n// Moves the cursor two rows up and to the left\nprocess.stdout.write(ansiEscapes.cursorUp(2) + ansiEscapes.cursorLeft);\n//=> '\\u001B[2A\\u001B[1000D'\n```\n\n----------------------------------------\n\nTITLE: Parsing Database URLs for Pool Configuration (Node.js)\nDESCRIPTION: Shows how to parse a PostgreSQL connection URL (e.g., provided by Heroku) into a configuration object compatible with pg-pool. Converts environment DATABASE_URL into the host, port, user, password, and database. Enables easy integration with cloud environments that use URLs instead of config objects. Dependencies: 'url', 'pg-pool', and process.env.DATABASE_URL.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Pool = require('pg-pool');\nconst url = require('url')\n\nconst params = url.parse(process.env.DATABASE_URL);\nconst auth = params.auth.split(':');\n\nconst config = {\n  user: auth[0],\n  password: auth[1],\n  host: params.hostname,\n  port: params.port,\n  database: params.pathname.split('/')[1],\n  ssl: true\n};\n\nconst pool = new Pool(config);\n\n/*\n  Transforms, 'postgres://DBuser:secret@DBHost:#####/myDB', into\n  config = {\n    user: 'DBuser',\n    password: 'secret',\n    host: 'DBHost',\n    port: '#####',\n    database: 'myDB',\n    ssl: true\n  }\n*/\n```\n\n----------------------------------------\n\nTITLE: Subscribing Once to Events with Emittery - JavaScript\nDESCRIPTION: Explores using the once API to subscribe to one or more events, with listeners automatically removed after the first matching event. Demonstrates promise-based result handling. Requires emittery, promises, Node.js. Inputs: event names, data. Output: logs received data once for each event.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\n\nemitter.once('🦄').then(data => {\n\tconsole.log(data);\n\t//=> '🌈'\n});\n\nemitter.once(['🦄', '🐶']).then(data => {\n\tconsole.log(data);\n});\n\nemitter.emit('🦄', '🌈'); // Log => '🌈' x2\nemitter.emit('🐶', '🍖'); // Nothing happens\n```\n\n----------------------------------------\n\nTITLE: Allocating a Zero-Filled Buffer of a Specific Size in JavaScript\nDESCRIPTION: Demonstrates `Buffer.alloc(size)` which allocates a new Buffer of the specified `size`. The Buffer is guaranteed to be zero-filled, making it a safe allocation method. A `RangeError` is thrown if the size exceeds `kMaxLength` or is negative, and a `TypeError` if size is not a number.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf = Buffer.alloc(5);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Version with Prerelease Identifier - JavaScript\nDESCRIPTION: Demonstrates how to use the 'semver.inc' method in JavaScript to increment a version string, appending or updating a prerelease identifier. Requires the 'semver' module and proper semantic version input; outputs the incremented version string (e.g., from '1.2.3' to '1.2.4-beta.0' when using the 'beta' preid).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta')\n// '1.2.4-beta.0'\n```\n\n----------------------------------------\n\nTITLE: Parsing Range Headers and Processing Results - JavaScript\nDESCRIPTION: Demonstrates the usage of 'parseRange' to process an HTTP Range header from a request. The snippet checks the range type and iterates over the returned ranges to access 'start' and 'end' properties. This pattern is typical in handling HTTP requests where partial resource delivery is required. Inputs include the resource size and the Range header string, and outputs are either range objects or error codes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/range-parser/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\n// parse header from request\nvar range = parseRange(size, req.headers.range)\n\n// the type of the range\nif (range.type === 'bytes') {\n  // the ranges\n  range.forEach(function (r) {\n    // do something with r.start and r.end\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Suggest Function for Autocomplete in JavaScript\nDESCRIPTION: Example implementation of a custom `suggest` function for the 'autocomplete' prompt. This asynchronous function filters the provided `choices` based on whether the user's `input` matches the beginning of the choice's `title` property and returns the filtered list wrapped in a Promise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst suggestByTitle = (input, choices) =>\n    Promise.resolve(choices.filter(i => i.title.slice(0, input.length) === input))\n```\n\n----------------------------------------\n\nTITLE: Checking and Forcing Debug Instance Enabled State - JavaScript\nDESCRIPTION: Shows how to check if a debug instance is currently enabled using the 'enabled' property, and optionally force enabling/disabling the instance by toggling the property. This is useful for conditionally executing code blocks for debugging. Requires 'debug' package and an instance created for a namespace, e.g., 'http'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst debug = require('debug')('http');\n\nif (debug.enabled) {\n  // do stuff...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Option Error with Code Check in arg (Node.js)\nDESCRIPTION: Explains handling of errors thrown by arg when encountering unknown options, including checking the error code. It shows wrapping the call in a try/catch and branching logic based on err.code, which is useful for CLI tools desiring user-friendly feedback or recovery. Requires the arg package as a dependency and assumes running in a Node.js environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// cli.js\ntry {\n  require('arg')({ '--hi': String });\n} catch (err) {\n  if (err.code === 'ARG_UNKNOWN_OPTION') {\n    console.log(err.message);\n  } else {\n    throw err;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using semver in Node.js (JavaScript)\nDESCRIPTION: Illustrates how to import and use the `semver` library in a Node.js application. It shows examples of common functions like `valid`, `clean`, `satisfies`, `gt`, `lt`, `minVersion`, and `coerce`. Requires the `semver` package to be installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\nsemver.minVersion('>=1.0.0') // '1.0.0'\nsemver.valid(semver.coerce('v2')) // '2.0.0'\nsemver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Variables from a Buffer (JavaScript)\nDESCRIPTION: JavaScript code demonstrating the use of `dotenv.parse()`. This function takes a String or Buffer containing environment variable definitions (in `key=value` format) and returns a JavaScript object with the parsed key-value pairs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n----------------------------------------\n\nTITLE: Encoding User-Provided URL in Node.js HTTP Server (JavaScript)\nDESCRIPTION: Example of using `encodeurl` within a Node.js HTTP server to safely encode the incoming request URL (`req.url`). It also uses `escape-html` to prevent XSS vulnerabilities before including the encoded URL in an HTML response for a 404 page. Requires `encodeurl` and `escape-html` packages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/encodeurl/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\n\nhttp.createServer(function onRequest (req, res) {\n  // get encoded form of inbound url\n  var url = encodeUrl(req.url)\n\n  // create html message\n  var body = '<p>Location ' + escapeHtml(url) + ' not found</p>'\n\n  // send a 404\n  res.statusCode = 404\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\n  res.end(body, 'utf-8')\n})\n```\n\n----------------------------------------\n\nTITLE: Compiling and Checking Types with TypeCompiler in TypeScript\nDESCRIPTION: Illustrates compiling a TypeBox schema using `TypeCompiler.Compile`. This generates an optimized `TypeCheck` object (`C`). The `.Check()` method of this object is then used to efficiently validate if a given value conforms to the compiled schema.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\n  x: Type.Number(),                                  //     x: TNumber;\n  y: Type.Number(),                                  //     y: TNumber;\n  z: Type.Number()                                   //     z: TNumber;\n}))                                                  // }>>\n\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring 'trust proxy' Setting in Express.js\nDESCRIPTION: Demonstrates various ways to configure the 'trust proxy' setting in an Express.js application using `app.set()`. This setting determines how Express trusts information from upstream proxies (like X-Forwarded-For). Examples show trusting the first hop, loopback addresses, specific IPs, subnets, lists of IPs, disabling trust, or trusting all proxies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', 1)\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', 'loopback')\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', '10.0.0.1')\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', '10.0.0.1/16')\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', '10.0.0.1, 10.0.0.2')\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', false)\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', true)\n```\n\n----------------------------------------\n\nTITLE: Installing parseurl module using npm (Shell)\nDESCRIPTION: Demonstrates how to install the `parseurl` Node.js module using the npm package manager command `npm install`. This command fetches the package from the npm registry and installs it in the project's `node_modules` directory or globally depending on flags used.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/parseurl/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install parseurl\n```\n\n----------------------------------------\n\nTITLE: Installing formdata-polyfill via npm - Bash\nDESCRIPTION: This snippet shows how to install the formdata-polyfill package using npm from the command line. This is required before using the FormData polyfill in either Node.js or browser environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/formdata-polyfill/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install formdata-polyfill\n```\n\n----------------------------------------\n\nTITLE: Creating Buffers using the 'buffer-from' Ponyfill\nDESCRIPTION: Demonstrates the usage of the 'buffer-from' library to create Buffer instances from various data types: an array of numbers, a section of an ArrayBuffer (Uint8Array), a string with a specified encoding ('utf8'), and an existing Buffer. The expected output for each creation method is shown in comments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/buffer-from/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst bufferFrom = require('buffer-from')\n\nconsole.log(bufferFrom([1, 2, 3, 4]))\n//=> <Buffer 01 02 03 04>\n\nconst arr = new Uint8Array([1, 2, 3, 4])\nconsole.log(bufferFrom(arr.buffer, 1, 2))\n//=> <Buffer 02 03>\n\nconsole.log(bufferFrom('test', 'utf8'))\n//=> <Buffer 74 65 73 74>\n\nconst buf = bufferFrom('test')\nconsole.log(bufferFrom(buf))\n//=> <Buffer 74 65 73 74>\n```\n```\n\n----------------------------------------\n\nTITLE: Reading PostgreSQL Passwords with pgpass in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to require and use the pgpass module to fetch PostgreSQL passwords based on connection information. It creates a connection info object with host and user, calls the pgPass function, and applies the returned password to the connection before connecting to the server. The callback receives the password or undefined depending on environment variables, file permissions, or missing credentials. Requires Node.js, the pgpass module, and suitable configuration of password files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pgpass/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pgPass = require('pgpass');\n\nvar connInfo = {\n  'host' : 'pgserver' ,\n  'user' : 'the_user_name' ,\n};\n\npgPass(connInfo, function(pass){\n  conn_info.password = pass;\n  // connect to postgresql server\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Browserslist Database via CLI - Shell\nDESCRIPTION: This snippet demonstrates the shell command to update the caniuse-lite dataset based on Browserslist configuration requirements. It uses the npx package runner to execute the latest version of the update-browserslist-db CLI tool. No additional dependencies are required beyond Node.js and npx, and it is generally run in the root of a project using Browserslist. The command updates local browser data, affecting queries reliant on up-to-date browser statistics. Inputs are managed automatically, and the output is an updated caniuse-lite dataset within the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/update-browserslist-db/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx update-browserslist-db@latest\n```\n\n----------------------------------------\n\nTITLE: Illustrating Non-String Keys and Mapping Limitations in Mappings - YAML\nDESCRIPTION: This YAML snippet demonstrates using complex objects and arrays as keys in mappings, which is problematic in JS-YAML as JavaScript does not support non-string/map keys. When loaded, object and array keys are stringified using their toString() representations. Intended to highlight key constraints and serialization mismatches. No dependencies other than JS-YAML parser.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n---\\n? [ foo, bar ]\\n: - baz\\n? { foo: bar }\\n: - baz\\n  - baz\n```\n\n----------------------------------------\n\nTITLE: Enabling v8-compile-cache-lib in Node.js (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to activate the v8 compile cache functionality within a Node.js application. It imports the `v8-compile-cache-lib` package and immediately calls its `install()` method. This call sets up a require hook that intercepts module loading and utilizes V8's code caching to potentially speed up subsequent module loads. This line should typically be placed at the very beginning of the application's main entry file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-compile-cache-lib/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrequire('v8-compile-cache-lib').install();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of es-object-atoms in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'es-object-atoms' package and its modules 'isObject', 'ToObject', and 'RequireObjectCoercible' for type checking, coercion, and error handling in JavaScript. Dependencies include the 'assert' module and all referenced 'es-object-atoms' exports, requiring installation of the package. The code verifies identity of exports, checks correct error throwing for non-object coercion, validates object type recognition, and ensures correct handling of primitives; it also demonstrates the correct usage of 'RequireObjectCoercible' and 'ToObject' for valid objects. Inputs can be any value, and outputs are assertion results; exceptions are expected for unsupported coercions. No user input or output is produced.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/es-object-atoms/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst assert = require('assert');\n\nconst $Object = require('es-object-atoms');\nconst isObject = require('es-object-atoms/isObject');\nconst ToObject = require('es-object-atoms/ToObject');\nconst RequireObjectCoercible = require('es-object-atoms/RequireObjectCoercible');\n\nassert.equal($Object, Object);\nassert.throws(() => ToObject(null), TypeError);\nassert.throws(() => ToObject(undefined), TypeError);\nassert.throws(() => RequireObjectCoercible(null), TypeError);\nassert.throws(() => RequireObjectCoercible(undefined), TypeError);\n\nassert.equal(isObject(undefined), false);\nassert.equal(isObject(null), false);\nassert.equal(isObject({}), true);\nassert.equal(isObject([]), true);\nassert.equal(isObject(function () {}), true);\n\nassert.deepEqual(RequireObjectCoercible(true), true);\nassert.deepEqual(ToObject(true), Object(true));\n\nconst obj = {};\nassert.equal(RequireObjectCoercible(obj), obj);\nassert.equal(ToObject(obj), obj);\n```\n\n----------------------------------------\n\nTITLE: Triggering a Fireworks Animation using useMicroInteractions Hook in JSX\nDESCRIPTION: This JSX code snippet shows an example of using the `triggerAnimation` function obtained from the `useMicroInteractions` hook within a React component. It demonstrates calling the function inside a `handleCompleteMilestone` event handler to display a 'fireworks' animation accompanied by a congratulatory message upon achieving a milestone.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { triggerAnimation } = useMicroInteractions();\n\n// On completing a milestone or achievement\nconst handleCompleteMilestone = () => {\n  triggerAnimation('fireworks', 'Congratulations on your 5-day streak!');\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Output in Double Quotes (JavaScript)\nDESCRIPTION: Demonstrates the `wrap: true` option combined with `quotes: 'double'`. The entire output string is enclosed in double quotes, creating a valid JavaScript string literal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// → '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// → \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Int64 Instances via Hi/Lo Words, Buffers, and Buffer Offsets - JavaScript\nDESCRIPTION: Shows multiple alternative ways to construct Int64 objects: using hi/lo words, raw Buffer objects, and a Buffer with specified offset. Validates that all construction methods result in proper internal octet representation. Requires node-int64 library and Buffer. Inputs can be number pairs, Buffer instances, or Buffer with offsets; outputs display Int64 representations with internal octets.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-int64/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Finally, some other ways to create Int64s ...\\n\\n// Pass hi/lo words\\n> new Int64(0x12345678, 0x9abcdef0)\\n[Int64 value:Infinity octets:12 34 56 78 9a bc de f0]\\n\\n// Pass a Buffer\\n> new Int64(new Buffer([0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0]))\\n[Int64 value:Infinity octets:12 34 56 78 9a bc de f0]\\n\\n// Pass a Buffer and offset\\n> new Int64(new Buffer([0,0,0,0,0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0]), 4)\\n[Int64 value:Infinity octets:12 34 56 78 9a bc de f0]\n```\n\n----------------------------------------\n\nTITLE: Generating a Simple Seed Value in JavaScript\nDESCRIPTION: This snippet presents a basic technique for creating a seed value for a pseudorandom number generator. It combines the current timestamp (`Date.now()`) with a scaled `Math.random()` value using the bitwise XOR operator to produce a somewhat unpredictable initial seed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pure-rand/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst seed = Date.now() ^ (Math.random() * 0x100000000);\n```\n\n----------------------------------------\n\nTITLE: Installing shebang-regex via npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `shebang-regex` package and its dependencies into the current project's `node_modules` directory. It requires npm and Node.js to be installed on the system.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/shebang-regex/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install shebang-regex\n```\n\n----------------------------------------\n\nTITLE: Illustrating Division vs. Regex Ambiguity\nDESCRIPTION: Presents a code example demonstrating the ambiguity between a division operation (`bar / 2/g`) and a regular expression literal (`/ 2/g`). This highlights a key limitation for a forward-only regex-based tokenizer like `js-tokens`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar g = 9.82\nvar number = bar / 2/g\n\nvar regex = / 2/g\n```\n\n----------------------------------------\n\nTITLE: Importing escalade in Deno (TypeScript)\nDESCRIPTION: Demonstrates how to import the `escalade` utility in a Deno environment using TypeScript. It shows separate import statements for the asynchronous (`async.ts`) and synchronous (`sync.ts`) modes via Deno's URL import mechanism from `deno.land`. Using `escalade` in Deno requires the `--allow-read` runtime permission.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escalade/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Choose \"async\" mode\nimport escalade from 'https://deno.land/escalade/async.ts';\n\n// Choose \"sync\" mode\nimport escalade from 'https://deno.land/escalade/sync.ts';\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Hexadecimal Literals (JavaScript)\nDESCRIPTION: Illustrates the use of the `numbers: 'hexadecimal'` option to represent numeric values as JavaScript hexadecimal integer literals (prefixed with `0x`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njsesc(42, {\n  'numbers': 'hexadecimal'\n});\n// → '0x2A'\n```\n\n----------------------------------------\n\nTITLE: Resolving Cloned node-fetch Responses in Parallel - JavaScript\nDESCRIPTION: This snippet demonstrates fetching a resource using node-fetch, cloning the response, and resolving both the JSON and text bodies in parallel. This avoids hangs due to small Node.js internal stream buffers when working with large responses in isomorphic applications. Requires node-fetch as a dependency and expects a URL as input; outputs parsed JSON and text representations of the response body.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nconst response = await fetch('https://example.com');\\nconst r1 = response.clone();\\n\\nconst results = await Promise.all([response.json(), r1.text()]);\\n\\nconsole.log(results[0]);\\nconsole.log(results[1]);\n```\n\n----------------------------------------\n\nTITLE: Installing 'is-stream' via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'is-stream' library, making it available for use in a Node.js project. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-stream/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install is-stream\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Utility Classes in JSX\nDESCRIPTION: Demonstrates how to apply Tailwind CSS utility classes directly within JSX to style HTML elements. This example shows classes for setting background color, padding, border radius, and shadow to create a styled card component.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"bg-gray-100 p-6 rounded-lg shadow-md\">\n```\n\n----------------------------------------\n\nTITLE: Custom Render Message Using onRender with kleur - JavaScript\nDESCRIPTION: Shows the use of the 'onRender' callback for a 'number' prompt, utilizing the 'kleur' library to modify the prompt message color when rendering. The callback receives 'kleur' for color styling and uses the prompt context ('this') to override the default message. Dependencies include the 'prompts' and 'kleur' libraries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'number',\\n  message: 'This message will be overridden',\\n  onRender(kleur) {\\n    this.msg = kleur.cyan('Enter a number');\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-nullish-coalescing-operator with yarn - Shell\nDESCRIPTION: Adds the @babel/plugin-syntax-nullish-coalescing-operator plugin as a development dependency using yarn. This command should be executed in your project directory with yarn installed. It ensures support for the nullish-coalescing operator in Babel-transpiled JavaScript code. Requires a yarn project setup (usually with a package.json).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-nullish-coalescing-operator --dev\n```\n\n----------------------------------------\n\nTITLE: Importing the destroy Module in Node.js\nDESCRIPTION: This snippet shows how to import the 'destroy' module in a Node.js application. The `require` function is used to load the module, making its functionality available via the `destroy` variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/destroy/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar destroy = require('destroy')\n```\n\n----------------------------------------\n\nTITLE: Installing Send via npm - Bash\nDESCRIPTION: Runs npm to install the 'send' library from the npm registry. This is a prerequisite for using any of the JavaScript code examples in the file. No parameters required; outputs will reflect typical npm install logging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install send\n```\n\n----------------------------------------\n\nTITLE: Installing make-error via npm in JavaScript Projects\nDESCRIPTION: This snippet demonstrates how to install the make-error package using npm for use in Node.js or front-end bundling environments like Browserify and Webpack. The command should be run in your project's root directory before you require or import make-error in your code. There are no parameters, and the command does not produce output other than updating your project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-error/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm install --save make-error\n```\n\n----------------------------------------\n\nTITLE: Installing mimic-fn with npm - Shell\nDESCRIPTION: This snippet provides the command to install the mimic-fn library using npm in a Node.js environment. The installation step is required before importing or using mimic-fn in any JavaScript project. It should be run in the terminal at the root of your project directory; upon completion, mimic-fn will be added as a dependency in your package.json file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mimic-fn/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install mimic-fn\n```\n\n----------------------------------------\n\nTITLE: npm Script for Debugging on Windows via PowerShell (JSON)\nDESCRIPTION: Example of an npm script entry (typically in 'package.json') named 'windowsDebug'. This script uses PowerShell on Windows to set the DEBUG environment variable to '*' (enable all namespaces) and then execute the Node.js application 'app.js'. The '@' symbol suppresses the command echoing in npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n  \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\",\n```\n\n----------------------------------------\n\nTITLE: Formatted Unified Diff Output for Inserted Lines\nDESCRIPTION: A unified diff representation showing an empty expected input and three added lines in the received input. This format is typically used by diff utilities or test reporters for clear visual context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- Expected  - 0\\n+ Received  + 3\\n\\n+ line 1\\n+ line 2\\n+ line 3\n```\n\n----------------------------------------\n\nTITLE: Installing lru-cache with npm - JavaScript\nDESCRIPTION: Demonstrates how to install the lru-cache package using the Node.js npm package manager. This step must be completed before using lru-cache in your JavaScript code. The package is downloaded and added as a dependency in your project (package.json).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/lru-cache/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install lru-cache --save\n```\n\n----------------------------------------\n\nTITLE: Example Prompt Structure with Retrieved Context\nDESCRIPTION: Illustrates how to structure a prompt for a large language model by incorporating relevant text snippets retrieved from a vector search. Prefacing the user's question with numbered references provides the model with factual context to generate more accurate and grounded answers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n\"Here are relevant references:\\n[1] ...text...\\n[2] ...text...\\n Please answer the question using this information.\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Milliseconds to Long Time Strings with ms in JavaScript\nDESCRIPTION: Shows how to utilize the 'long' option with the 'ms' package to produce verbose, human-friendly time strings (such as \"1 minute\" or \"2 minutes\") from millisecond values. Handles both positive and negative durations and demonstrates nesting ms calls for enhanced flexibility. This requires only the 'ms' package, and expects milliseconds as input, outputting descriptive string representations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/ms/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000, { long: true })             // \"1 minute\"\\nms(2 * 60000, { long: true })         // \"2 minutes\"\\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Status Code via status.code[msg] Property\nDESCRIPTION: Illustrates retrieving the numeric status code by accessing the `status.code` object with a lower-case status message as the key (e.g., 'not found'). Returns `undefined` if the message is not found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nstatus['not found'] // => 404\n```\n\n----------------------------------------\n\nTITLE: Installing 'encodeurl' Package using npm (Shell)\nDESCRIPTION: This command installs the 'encodeurl' package from the npm registry into the current Node.js project. It adds the package as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/encodeurl/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install encodeurl\n```\n\n----------------------------------------\n\nTITLE: Using jest-docblock API Functions in JavaScript\nDESCRIPTION: Provides a comprehensive JavaScript example demonstrating the usage of the `jest-docblock` API. It shows how to import the necessary functions (`extract`, `strip`, `parse`, `parseWithComments`, `print`) and apply them to a sample code string containing a docblock to extract it, strip it, parse its pragmas (with and without comments), and generate a new docblock string. Requires the `jest-docblock` package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-docblock/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = `\n/**\n * Everything is awesome!\n *\n * @everything is:awesome\n * @flow\n */\n\n export const everything = Object.create(null);\n export default function isAwesome(something) {\n   return something === everything;\n }\n`;\n\nconst {\n  extract,\n  strip,\n  parse,\n  parseWithComments,\n  print,\n} = require('jest-docblock');\n\nconst docblock = extract(code);\nconsole.log(docblock); // \"/**\\n * Everything is awesome!\\n * \\n * @everything is:awesome\\n * @flow\\n */\"\n\nconst stripped = strip(code);\nconsole.log(stripped); // \"export const everything = Object.create(null);\\n export default function isAwesome(something) {\\n   return something === everything;\\n }\"\n\nconst pragmas = parse(docblock);\nconsole.log(pragmas); // { everything: \"is:awesome\", flow: \"\" }\n\nconst parsed = parseWithComments(docblock);\nconsole.log(parsed); // { comments: \"Everything is awesome!\", pragmas: { everything: \"is:awesome\", flow: \"\" } }\n\nconsole.log(print({pragmas, comments: 'hi!'})); // /**\\n * hi!\\n *\\n * @everything is:awesome\\n * @flow\\n */;\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Parsing Source Map File Comments in the Browser Using convert-source-map\nDESCRIPTION: Demonstrates fetching an external source map file using the 'fetch' API in a browser environment, then passing it to 'convert-source-map' for parsing. Defines an async function 'readMap' that fetches and returns the text of the source map. No server-side dependencies are required other than 'convert-source-map' (assumed browser-compatible). Outputs the parsed source map JSON.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/convert-source-map/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nvar convert = require('convert-source-map');\n\nasync function readMap(url) {\n  const res = await fetch(url);\n  return res.text();\n}\n\nconst converter = await convert.fromMapFileComment('//# sourceMappingURL=map-file-comment.css.map', readMap)\nvar json = converter.toJSON();\nconsole.log(json);\n```\n\n----------------------------------------\n\nTITLE: Using Basic Compile and Expand Features of braces - JavaScript\nDESCRIPTION: Shows how to import 'braces' and use both compile (default) and expand (with option or method) functionalities. Requires 'braces' as a dependency. Demonstrates calling the main function with patterns, both as array and string, optionally passing the 'expand' option. Outputs compiled regex strings or expanded arrays corresponding to Bash behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst braces = require('braces');\n// braces(patterns[, options]);\n\nconsole.log(braces(['{01..05}', '{a..e}']));\n//=> ['(0[1-5])', '([a-e])']\n\nconsole.log(braces(['{01..05}', '{a..e}'], { expand: true }));\n//=> ['01', '02', '03', '04', '05', 'a', 'b', 'c', 'd', 'e']\n```\n\n----------------------------------------\n\nTITLE: Compiling and Expanding Brace Patterns for Regex and File List Generation - JavaScript\nDESCRIPTION: Provides examples of using 'braces' to compile brace patterns into optimized regular expression strings and to expand them into all possible permutations. These demonstrate the default behavior (compilation) and usage with the 'expand' option or 'braces.expand' method to achieve Bash-like output. This is useful for matching or generating file path lists in globbing scenarios.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces('a/{x,y,z}/b'));\n//=> ['a/(x|y|z)/b']\nconsole.log(braces(['a/{01..20}/b', 'a/{1..5}/b']));\n//=> [ 'a/(0[1-9]|1[0-9]|20)/b', 'a/([1-5])/b' ]\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces('a/{x,y,z}/b', { expand: true }));\n//=> ['a/x/b', 'a/y/b', 'a/z/b']\n\nconsole.log(braces.expand('{01..10}'));\n//=> ['01','02','03','04','05','06','07','08','09','10']\n```\n\n----------------------------------------\n\nTITLE: Installing data-uri-to-buffer with npm (Bash)\nDESCRIPTION: This Bash command installs the 'data-uri-to-buffer' package from npm, preparing it for use in a Node.js project. The command requires that Node.js and npm are already installed on your system. After running this, the package can be imported into any Node.js script located in the same project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/data-uri-to-buffer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install data-uri-to-buffer\n```\n\n----------------------------------------\n\nTITLE: Detecting CLI Flags with has-flag - Node.js JavaScript\nDESCRIPTION: Shows various usages of the has-flag function in a Node.js script to check for the presence of different CLI flags with or without dashes or values. Requires the has-flag package to be installed. The has-flag function accepts a flag name (string) and optionally a custom argv array, returning true if the flag is found, otherwise false.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/has-flag/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// foo.js\nconst hasFlag = require('has-flag');\n\nhasFlag('unicorn');\n//=> true\n\nhasFlag('--unicorn');\n//=> true\n\nhasFlag('f');\n//=> true\n\nhasFlag('-f');\n//=> true\n\nhasFlag('foo=bar');\n//=> true\n\nhasFlag('foo');\n//=> false\n\nhasFlag('rainbow');\n//=> false\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Jest Tests using Tagged Template Literals with jest-each - JavaScript\nDESCRIPTION: Showcases defining test data in a data-table style using tagged template literals, which allows clear tabular test definitions and improves readability for multi-parameter test matrices. The first row lists column headings, with each subsequent row specifying parameter values using `${}` expressions. The suite runs for each defined set. Requires support for template literal syntax and jest-each.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\neach`\\n  a    | b    | expected\\n  ${1} | ${1} | ${2}\\n  ${1} | ${2} | ${3}\\n  ${2} | ${1} | ${3}\\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\\n  expect(a + b).toBe(expected);\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Dark Mode Surfaces\nDESCRIPTION: CSS code for `dark-mode-gradients.css` defining CSS custom properties for dark mode styling. It sets fallback variables in `:root` and overrides them within the `.dark` selector for background colors (`--dark-bg-primary`), borders (`--dark-border`), and different surface levels (`--surface-1` to `--surface-4`). It also applies these variables to common UI elements like cards, dropdowns, and sidebars when the `.dark` class is active.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  /* Dark mode variables (fallback) */\n  --dark-bg-primary: #121212;\n  --dark-border: #3a3a3a;\n  /* surfaces */\n  --surface-1: #ffffff;\n  --surface-2: #ffffff;\n  --surface-3: #ffffff;\n  --surface-4: #ffffff;\n}\n\n.dark {\n  --surface-1: #1a1a1a;\n  --surface-2: #222222;\n  --surface-3: #2a2a2a;\n  --surface-4: #333333;\n  --dark-border: #444444;\n}\n\n.dark .card,\n.dark .dropdown-content,\n.dark .dialog-content,\n.dark .popover-content {\n  background-color: var(--surface-2);\n  border-color: var(--dark-border);\n}\n\n.dark .sidebar {\n  background-color: var(--surface-1);\n  border-color: var(--dark-border);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting a Type from a Union Using TypeBox Extract in TypeScript\nDESCRIPTION: Uses TypeBox's Type.Extract to extract the string type from a union of string and number types. This models Extract<string | number, string> in TypeScript, narrowing a union to just the overlapping members. Requires TypeBox; input is a union and a target type. Output is a schema for the extracted type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Extract(\n  Type.Union([\n    Type.String(),\n    Type.Number(),\n  ]),\n  Type.String()\n)\n```\n\n----------------------------------------\n\nTITLE: Stringify with Custom Key Comparison Using fast-json-stable-stringify in Node.js\nDESCRIPTION: Illustrates passing a custom comparison function to fast-json-stable-stringify to define a non-standard sort order for object keys. The snippet sorts the object keys in reverse lexical order by returning 1 or -1 in the comparison callback. It is dependent on the fast-json-stable-stringify module being installed and imported; the comparator function receives two objects, each containing 'key' and 'value' properties.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fast-json-stable-stringify/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar stringify = require('fast-json-stable-stringify');\n\nvar obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 };\nvar s = stringify(obj, function (a, b) {\n    return a.key < b.key ? 1 : -1;\n});\nconsole.log(s);\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Column CLI Interfaces with cliui (JavaScript)\nDESCRIPTION: Demonstrates initializing cliui, adding multiple columns to a row with various formatting options (padding, alignment, color via chalk), and rendering the composed UI as a string to the console. Requires the 'cliui' and 'chalk' Node.js packages. Key parameters include text, padding, width, and alignment. The input to each div can be either a string or an object configuring layout and style. Expects usage in a Node.js context with console output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cliui/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst ui = require('cliui')()\n\nui.div('Usage: $0 [command] [options]')\n\nui.div({\n  text: 'Options:',\n  padding: [2, 0, 1, 0]\n})\n\nui.div(\n  {\n    text: \"-f, --file\",\n    width: 20,\n    padding: [0, 4, 0, 4]\n  },\n  {\n    text: \"the file to load.\" +\n      chalk.green(\"(if this description is long it wraps).\")\n    ,\n    width: 20\n  },\n  {\n    text: chalk.red(\"[required]\"),\n    align: 'right'\n  }\n)\n\nconsole.log(ui.toString())\n```\n\n----------------------------------------\n\nTITLE: Declaring LottieAnimation Component Props in React (TSX)\nDESCRIPTION: Defines the `LottieAnimation` React component, which serves as a wrapper for rendering Lottie animations. It accepts props like `animationData`, `loop`, `autoplay`, styling (`className`, `style`, `width`, `height`), an `onComplete` callback, and `playOnHover` functionality. The implementation details are omitted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// client/src/components/animations/lottie-animation.tsx\n\nexport default function LottieAnimation({\n  animationData,\n  loop = true,\n  autoplay = true,\n  className,\n  style,\n  width,\n  height,\n  onComplete,\n  playOnHover = false\n}: LottieAnimationProps) {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Types with Triple-Slash Directive in TypeScript - TypeScript\nDESCRIPTION: This snippet illustrates how to use a triple-slash reference directive to include additional types within a TypeScript file. The directive imports type information from './types/lib_greeter', enabling the use of types such as Greeter defined in that module. The snippet then demonstrates importing the Greeter class, instantiating it, and calling its sayHello method. This approach is suitable when you want to add type definitions without modifying TypeScript compiler options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"./types/lib_greeter\" />\\nimport {Greeter} from \"lib_greeter\"\\nconst g = new Greeter();\\ng.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Safe Buffer Polyfill Usage for Legacy Compatibility - JavaScript\nDESCRIPTION: Advises replacing the default Buffer implementation with the safe-buffer polyfill to mitigate vulnerabilities in older Node.js versions. Requires installing the 'safe-buffer' package and supports drop-in replacement of the Buffer global for existing codebases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Buffer = require('safe-buffer').Buffer\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Vary Package via npm - Node.js - Shell\nDESCRIPTION: Installs the 'vary' module from the npm registry so it can be used within Node.js applications. This command must be executed in a terminal with npm available. No arguments are required, and it fetches the latest package version to the current project directory. No direct output other than npm installation logs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vary/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install vary\n```\n\n----------------------------------------\n\nTITLE: Installing mime-types Module with npm - Shell Script\nDESCRIPTION: This code shows how to install the 'mime-types' package from the npm registry using a shell command. It requires Node.js and npm to be installed on the system. The command downloads and adds the 'mime-types' module as a dependency to the current project for usage in Node.js applications.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-types/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install mime-types\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Pretty-Format Plugin with Default Options (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the previously defined custom array serialization plugin with `pretty-format`. It calls `prettyFormat` on the sample `val` object, passing the plugin in the options. The output shows the default formatting applied by `pretty-format` combined with the custom array handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Parsing and Modifying Source Map Comments with convert-source-map in JavaScript\nDESCRIPTION: Demonstrates how to parse a source map comment with 'convert-source-map', extract its JSON representation, modify the 'sources' property, and output the results. Requires the 'convert-source-map' npm package. Inputs include a base64-encoded source map comment; outputs are the original and modified source map objects in JSON form. The snippet is intended for Node.js or any JavaScript environment where CommonJS require is supported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/convert-source-map/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar convert = require('convert-source-map');\n\nvar json = convert\n  .fromComment('//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQvZm9vLm1pbi5qcyIsInNvdXJjZXMiOlsic3JjL2Zvby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIvIn0=')\n  .toJSON();\n\nvar modified = convert\n  .fromComment('//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQvZm9vLm1pbi5qcyIsInNvdXJjZXMiOlsic3JjL2Zvby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIvIn0=')\n  .setProperty('sources', [ 'SRC/FOO.JS' ])\n  .toJSON();\n\nconsole.log(json);\nconsole.log(modified);\n```\n\n----------------------------------------\n\nTITLE: Accessing Status Message via status.message[code] Property\nDESCRIPTION: Shows how to get the standard status message string for a numeric status code using the `status.message` object (e.g., `status.message[404]` returns 'Not Found'). Returns `undefined` for unknown codes. This object mirrors Node.js `http.STATUS_CODES`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nstatus.message[404] // => 'Not Found'\n```\n\n----------------------------------------\n\nTITLE: Installing bytes Module - Bash\nDESCRIPTION: Demonstrates how to install the 'bytes' npm package using npm, which is necessary for utilizing the JavaScript byte parsing and formatting utilities in your Node.js project. This step is a prerequisite for all the subsequent JavaScript usage examples.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bytes/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n$ npm install bytes\\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamically Enabling/Disabling Debug Namespaces in Node.js\nDESCRIPTION: Demonstrates how to dynamically enable and disable specific debug namespaces at runtime using the `enable()` and `disable()` methods provided by the `debug` module. It also shows how to check the current status using `debug.enabled()`. Requires the `debug` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nlet debug = require('debug');\n\nconsole.log(1, debug.enabled('test'));\n\ndebug.enable('test');\nconsole.log(2, debug.enabled('test'));\n\ndebug.disable();\nconsole.log(3, debug.enabled('test'));\n```\n\n----------------------------------------\n\nTITLE: Using Framer Motion's motion.div Component in React\nDESCRIPTION: Illustrates the basic usage of Framer Motion by wrapping a standard HTML element (like a div) with the `<motion.div>` component. This allows applying animations and transitions defined through Framer Motion's props (e.g., `initial`, `animate`, `exit`, `variants`) to the wrapped element.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<motion.div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving RGB Value for 'red' using color-name in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates requiring the 'color-name' module using Node.js `require` and accessing the RGB value for the color 'red'. The module exposes an object where keys are color names (lowercase) and values are arrays representing the [R, G, B] values (e.g., [255, 0, 0] for 'red'). It depends on the 'color-name' package being installed via NPM (`npm install color-name`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/color-name/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar colors = require('color-name');\ncolors.red //[255,0,0]\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Short Time Format Strings with ms (JavaScript)\nDESCRIPTION: Shows how the ms package converts numeric millisecond values to compact, short-format time strings (e.g., '1m', '-3m'), including composition using arithmetic and nested ms calls. Dependencies are limited to the 'ms' package; inputs are numbers representing milliseconds or outputs from ms(…) calls, and outputs are short time unit strings. Limitation: negative or large numbers are represented in the same compact style.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/ms/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n----------------------------------------\n\nTITLE: Loading MIME Type Mappings from File with mime.load - JavaScript\nDESCRIPTION: This snippet demonstrates loading MIME type mappings from an Apache '.types' format file using the 'load' method from the 'mime' module. It requires a properly formatted types file and the 'mime' package. The method updates the internal mappings, making the defined extensions and types available to 'lookup' and 'extension'. The filepath is a string argument pointing to the .types file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.load('./my_project.types');\n```\n\n----------------------------------------\n\nTITLE: Styling Achievement Animations with CSS Keyframes\nDESCRIPTION: Provides CSS rules required by the `playAchievementAnimation` function in `animation-engine.ts`. It defines two keyframe animations: `achievementOverlay` for a scaling and fading effect, and `fadeInOut` for a message display effect. These animations are applied to the `.animate-achievement-overlay` and `.achievement-message` classes respectively, which are dynamically added and removed by the TypeScript function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-solution-for-your-DecA-I-de-Animation-System-that-meets-the-requirements-an-1742703767915.txt#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.animate-achievement-overlay {\n  animation: achievementOverlay 2.5s ease-out;\n}\n\n@keyframes achievementOverlay {\n  0% { opacity: 0; transform: scale(0.8); }\n  50% { opacity: 1; transform: scale(1.1); }\n  100% { opacity: 0; transform: scale(1); }\n}\n\n.achievement-message {\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  font-size: 0.9rem;\n  opacity: 0;\n  animation: fadeInOut 2.5s ease-out forwards;\n}\n\n@keyframes fadeInOut {\n  0% { opacity: 0; }\n  20% { opacity: 1; }\n  80% { opacity: 1; }\n  100% { opacity: 0; }\n}\n```\n\n----------------------------------------\n\nTITLE: Pretty-Printing with Default Indentation (JavaScript)\nDESCRIPTION: Illustrates non-compact output (`compact: false`) using the default indentation string, which is a tab character (`\\t`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\njsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {\n  'compact': false,\n  'indent': '\\t' // this is the default\n});\n// → '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for fast-json-stable-stringify Using Node.js\nDESCRIPTION: Shell command to execute the benchmark script for fast-json-stable-stringify, verifying its performance against alternatives. Requires Node.js version 6+ and the benchmark script to be present in the current project. Outputs benchmark results to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fast-json-stable-stringify/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode benchmark\n```\n\n----------------------------------------\n\nTITLE: Importing the statuses Module in Node.js\nDESCRIPTION: Imports the 'statuses' module into a Node.js application using the `require` function. The imported variable `status` provides access to the module's API.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar status = require('statuses')\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Modules from Node Semver Library (JavaScript)\nDESCRIPTION: This list shows the different ways to import functionalities from the `node-semver` library using `require`. It allows developers to load only specific classes, functions, or range utilities instead of the entire library, which can be beneficial for optimizing application size and load times in a Node.js environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('semver')\nrequire('semver/classes')\nrequire('semver/classes/comparator')\nrequire('semver/classes/range')\nrequire('semver/classes/semver')\nrequire('semver/functions/clean')\nrequire('semver/functions/cmp')\nrequire('semver/functions/coerce')\nrequire('semver/functions/compare')\nrequire('semver/functions/compare-build')\nrequire('semver/functions/compare-loose')\nrequire('semver/functions/diff')\nrequire('semver/functions/eq')\nrequire('semver/functions/gt')\nrequire('semver/functions/gte')\nrequire('semver/functions/inc')\nrequire('semver/functions/lt')\nrequire('semver/functions/lte')\nrequire('semver/functions/major')\nrequire('semver/functions/minor')\nrequire('semver/functions/neq')\nrequire('semver/functions/parse')\nrequire('semver/functions/patch')\nrequire('semver/functions/prerelease')\nrequire('semver/functions/rcompare')\nrequire('semver/functions/rsort')\nrequire('semver/functions/satisfies')\nrequire('semver/functions/sort')\nrequire('semver/functions/valid')\nrequire('semver/ranges/gtr')\nrequire('semver/ranges/intersects')\nrequire('semver/ranges/ltr')\nrequire('semver/ranges/max-satisfying')\nrequire('semver/ranges/min-satisfying')\nrequire('semver/ranges/min-version')\nrequire('semver/ranges/outside')\nrequire('semver/ranges/simplify')\nrequire('semver/ranges/subset')\nrequire('semver/ranges/to-comparators')\nrequire('semver/ranges/valid')\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Destruction with split2 in JavaScript\nDESCRIPTION: This snippet shows how to manage resource cleanup when using `split2`. It defines a function `splitFile` that pipes a file stream through `split2`. Crucially, it attaches a 'close' event listener to the `split2` stream. When the `split2` stream closes (e.g., due to `.destroy()` being called or the source stream ending), this listener ensures the underlying file stream (`file`) is also destroyed, preventing resource leaks. It then demonstrates calling `.destroy()` on the stream returned by `splitFile`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/split2/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\nvar splitFile = function(filename) {\n  var file = fs.createReadStream(filename)\n\n  return file\n    .pipe(split2())\n    .on('close', function() {\n      // destroy the file stream in case the split stream was destroyed\n      file.destroy()\n    })\n}\n\nvar stream = splitFile('my-file.txt')\n\nstream.destroy() // will destroy the input file stream\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the camelcase npm Package (Shell)\nDESCRIPTION: Demonstrates how to install the `camelcase` package using the Node Package Manager (npm) command line interface. This command downloads and adds the package to the project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/node_modules/camelcase/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install camelcase\n```\n\n----------------------------------------\n\nTITLE: Getting Status Code from Message using status(msg)\nDESCRIPTION: Shows how to use the main `status` function with a status message string (case-insensitive, e.g., 'forbidden' or 'Forbidden') to get the corresponding numeric HTTP status code (403). Throws an error for unknown messages (e.g., 'foo').\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nstatus('forbidden') // => 403\nstatus('Forbidden') // => 403\nstatus('foo') // throws\n```\n\n----------------------------------------\n\nTITLE: Installing call-bind-apply-helpers via npm (Shell)\nDESCRIPTION: This shell command installs the `call-bind-apply-helpers` package and adds it as a dependency to the project's `package.json` file. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/call-bind-apply-helpers/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save call-bind-apply-helpers\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for the resolve Function\nDESCRIPTION: Defines the TypeScript type signature for the `resolve` function from `@jridgewell/resolve-uri`. It accepts two string arguments: `input` (the URI to resolve) and an optional `base` URI, returning the resolved URI as a string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/resolve-uri/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction resolve(input: string, base?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Checking if a Specific Debug Instance is Enabled in Node.js\nDESCRIPTION: Shows how to check if a specific debug instance (created with `require('debug')('namespace')`) is currently enabled by accessing its `enabled` boolean property. This allows for conditional execution of debug-related logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst debug = require('debug')('http');\n\nif (debug.enabled) {\n  // do stuff...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variable Arguments to Generator using `co` in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to pass variable arguments to an ES6 generator function when invoked using the `co` library. It utilizes the rest parameter syntax (`...args`) in the generator function definition and the spread syntax (`...args`) in the `co` call to pass arguments through. This capability was added in version 4.6.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/History.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\n function *gen(...args) { }\n co(gen, ...args);\n ```\n```\n\n----------------------------------------\n\nTITLE: Installing the statuses Module via npm\nDESCRIPTION: Installs the 'statuses' Node.js module from the npm registry using the `npm install` command. This command should be run in a terminal within a Node.js project directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install statuses\n```\n\n----------------------------------------\n\nTITLE: Mapping Chromium Version to Electron Version with chromiumToElectron (Node.js)\nDESCRIPTION: Illustrates using chromiumToElectron to derive the Electron version for a supplied (major) Chromium version number. Returns the matching Electron version as a string or undefined if not found. e2c package must be initialized.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar electronVersion = e2c.chromiumToElectron('54');\n// electronVersion is \"1.4\"\n```\n\n----------------------------------------\n\nTITLE: Escaping Strings from the Command Line using jsesc in Bash\nDESCRIPTION: Shows a basic example of using the jsesc command-line tool in Bash to escape a string containing non-ASCII and special characters. The input string is passed as an argument, and the escaped string is printed to standard output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ jsesc 'föo ♥ bår 𝌆 baz'\nf\\xF6o \\u2665 b\\xE5r \\uD834\\uDF06 baz\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Completion with Azure OpenAI in Python\nDESCRIPTION: This Python snippet uses the openai library to generate a chat-based completion from Azure OpenAI, sending a sequence of messages as input. The engine parameter receives either the deployment name or the model as provisioned in Azure. The result is extracted from the first message in the API’s choices. Dependencies: openai Python package, properly configured as shown in the preceding snippet. Inputs: a list of message dicts. Outputs: the generated response content as a string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nresponse = openai.ChatCompletion.create(\\n    engine=\"gpt-4\",  # use your deployment name\\n    messages=[{\"role\": \"system\", \"content\": system_prompt}, {\"role\": \"user\", \"content\": user_prompt}]\\n)\\nresult = response['choices'][0]['message']['content']\n```\n\n----------------------------------------\n\nTITLE: Accessing dotenvx Command Substitution Variable (JavaScript)\nDESCRIPTION: JavaScript code snippet demonstrating accessing an environment variable (`DATABASE_URL`) via `process.env`. This variable could have been populated using `dotenvx`'s command substitution feature when the script was executed via `dotenvx run`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// index.js\nconsole.log('DATABASE_URL', process.env.DATABASE_URL)\n```\n\n----------------------------------------\n\nTITLE: Requiring the Send Library - Node.js JavaScript\nDESCRIPTION: Demonstrates how to import the 'send' module in Node.js using 'require'. This code is required at the start of any script that wants to use the functionality of the 'send' library. No parameters are needed; the imported 'send' function is used throughout subsequent examples.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar send = require('send')\n```\n\n----------------------------------------\n\nTITLE: Installing the 'co' Library using npm\nDESCRIPTION: Shows the command-line instruction to install the 'co' library using the Node Package Manager (npm). Executing this command in a terminal downloads and adds the 'co' package to the current project's dependencies, typically saved in `node_modules` and listed in `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install co\n```\n\n----------------------------------------\n\nTITLE: Examples of typeis.is(mediaType, types) Function (JavaScript)\nDESCRIPTION: Provides examples demonstrating the `typeis.is(mediaType, types)` function, which checks if a given media type string matches any of the specified types. It takes a media type string and an array of type patterns as input and returns the matching type string or `false`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-is/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar mediaType = 'application/json'\n\ntypeis.is(mediaType, ['json']) // => 'json'\ntypeis.is(mediaType, ['html', 'json']) // => 'json'\ntypeis.is(mediaType, ['application/*']) // => 'application/json'\ntypeis.is(mediaType, ['application/json']) // => 'application/json'\n\ntypeis.is(mediaType, ['html']) // => false\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting for 'encodeurl' Package (Shell)\nDESCRIPTION: These shell commands demonstrate how to run the test suite and the linter for the 'encodeurl' package using npm scripts defined in its `package.json` file. `npm test` executes the tests, and `npm run lint` runs the code style checks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/encodeurl/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/parser Using npm - Shell\nDESCRIPTION: Installs the @babel/parser package as a development dependency using npm for JavaScript projects. Requires npm to be installed in the development environment. The command adds the parser to the node_modules directory and updates the package.json file under devDependencies. The input is a shell command executed within a project's root, and the main output is the successful inclusion of the package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/parser\n```\n\n----------------------------------------\n\nTITLE: Generating README Documentation using Verb\nDESCRIPTION: This shell command installs the `verb` documentation generator and the `verb-generate-readme` plugin globally from a specific development branch, and then runs `verb` to generate the `README.md` file from the `.verb.md` template.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Map Support via CLI - Bash\nDESCRIPTION: Showcases how to preload source-map-support/register when running a compiled Node.js script. This ensures stack traces are mapped to original source locations at runtime. Requires source-map-support to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode -r source-map-support/register compiled.js\n```\n\n----------------------------------------\n\nTITLE: Yield Expression with Type Annotation in JavaScript Generator Function\nDESCRIPTION: Demonstrates applying a type annotation to a yield expression inside a generator function when using Flow. Requires Flow support. The input is a generator function; the yield is assigned type 'any'. Output is validated by the Flow static type checker.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nfunction *foo() {\\n  const x = (yield 5: any);\\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Cached Prototype Usage with Sinon - JavaScript\nDESCRIPTION: This snippet shows the risks involved when a library directly utilizes built-in prototype methods, such as Array.prototype.filter, which might be replaced or mocked in userland using Sinon. Dependencies include Sinon and an array to operate on. Parameters include the original array and a filter function that looks for the value 42. The output is altered by the mocked filter, showing the importance of implementation isolation for libraries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/commons/lib/prototypes/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in userland, the library user needs to replace the filter method on\n// Array.prototype\nvar array = [1, 2, 3];\nsinon.replace(array, \"filter\", sinon.fake.returns(2));\n\n// in a sinon module, the library author needs to use the filter method\nvar someArray = [\"a\", \"b\", 42, \"c\"];\nvar answer = filter(someArray, function (v) {\n    return v === 42;\n});\n\nconsole.log(answer);\n// => 2\n```\n\n----------------------------------------\n\nTITLE: Spawning a Child Process with Debug Colors Enabled in JavaScript\nDESCRIPTION: This code shows how to spawn a child Node.js process with colorized debug output by setting the DEBUG_COLORS environment variable. It uses Node's 'fork' from the 'child_process' module, passing custom stdio and an extended environment. The worker\\'s stderr is piped to the parent process. Ensure 'debug' is installed and the child process code is compatible. This enables colored debug logging output when standard error is piped. Limitations: only affects child processes where debug coloring is needed and supported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nworker = fork(WORKER_WRAP_PATH, [workerPath], {\\n  stdio: [\\n    /* stdin: */ 0,\\n    /* stdout: */ 'pipe',\\n    /* stderr: */ 'pipe',\\n    'ipc',\\n  ],\\n  env: Object.assign({}, process.env, {\\n    DEBUG_COLORS: 1 // without this settings, colors won't be shown\\n  }),\\n});\\n\\nworker.stderr.pipe(process.stderr, { end: false });\\n\n```\n\n----------------------------------------\n\nTITLE: Installing 'debug' via npm (Bash)\nDESCRIPTION: Installs the 'debug' package using the Node Package Manager (npm). This command should be run in a bash or compatible shell environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install debug\n```\n\n----------------------------------------\n\nTITLE: Importing and Using getBinaryTargetForCurrentPlatform in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `@prisma/get-platform` package. It imports the `getBinaryTargetForCurrentPlatform` function and calls it asynchronously to retrieve a string representing the binary target suitable for the current operating system and architecture. This is typically used internally by Prisma tooling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@prisma/get-platform/README.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { getBinaryTargetForCurrentPlatform } from '@prisma/get-platform'\\n\\nconst binaryTarget = await getBinaryTargetForCurrentPlatform()\n```\n\n----------------------------------------\n\nTITLE: MIT License for fdir\nDESCRIPTION: The full text of the MIT License governing the use of the 'fdir' library, copyrighted by Abdullah Atta. This permissive license allows free use, modification, and distribution of the software, provided the copyright notice and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright 2023 Abdullah Atta\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Store Hierarchy for DECA Content in YAML\nDESCRIPTION: This YAML snippet illustrates the proposed hierarchical structure for a vector store designed to hold DECA educational materials. It organizes content by major DECA categories (Business Admin Core, Finance, Marketing, Hospitality & Tourism) and further subdivides each category by content type (Tests, Roleplays, Performance Indicators - PIs). This clustered hierarchy aims to enable efficient, targeted retrieval and prevent cross-contamination of embeddings for precise query results, supporting future scalability.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nVector Store:\n├── Business-Admin-Core-Tests\n├── Business-Admin-Core-Roleplays\n├── Business-Admin-Core-PIs\n├── Finance-Tests\n├── Finance-Roleplays\n├── Finance-PIs\n├── Marketing-Tests\n├── Marketing-Roleplays\n├── Marketing-PIs\n├── Hospitality-Tourism-Tests\n├── Hospitality-Tourism-Roleplays\n├── Hospitality-Tourism-PIs\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Random Sequences using jump() in JavaScript\nDESCRIPTION: This code shows how to generate independent sequences of random numbers suitable for parallel simulations. Starting with an initial generator (`rngSimulation1`), the `jump()` method is called to create new generator instances (`rngSimulation2`, `rngSimulation3`) whose states are far removed in the sequence, ensuring statistical independence between the generated values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pure-rand/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport prand from 'pure-rand';\n\nconst seed = 42;\nconst rngSimulation1 = prand.xoroshiro128plus(seed);\nconst rngSimulation2 = rngSimulation1.jump(); // not in-place, creates a new instance\nconst rngSimulation3 = rngSimulation2.jump(); // not in-place, creates a new instance\n\nconst diceSim1Value = prand.unsafeUniformIntDistribution(1, 6, rngSimulation1); // value in {1..6}, here: 2\nconst diceSim2Value = prand.unsafeUniformIntDistribution(1, 6, rngSimulation2); // value in {1..6}, here: 5\nconst diceSim3Value = prand.unsafeUniformIntDistribution(1, 6, rngSimulation3); // value in {1..6}, here: 6\n```\n\n----------------------------------------\n\nTITLE: stopAtPositional Option Usage in arg for Node.js\nDESCRIPTION: Shows how setting stopAtPositional causes arg to stop parsing at the first positional (non-flagged) argument and treat the remainder as extras. The snippet includes an argv array with a mix of flags and positional arguments. Parsed results illustrate what happens when stopAtPositional is enabled.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst arg = require('arg');\n\nconst argv = ['--foo', 'hello', '--bar'];\n\nconst args = arg(\n\t{\n\t\t'--foo': Boolean,\n\t\t'--bar': Boolean\n\t}, {\n\t\targv,\n\t\tstopAtPositional: true\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using NPM\nDESCRIPTION: This shell command first installs the project dependencies listed in `package.json` (including development dependencies) and then executes the test suite defined in the `scripts.test` section of `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install && npm test\n```\n\n----------------------------------------\n\nTITLE: Enabling 'debug' Output in Browsers via localStorage\nDESCRIPTION: Explains how to enable specific debug namespaces in a web browser context. The `debug` library checks `localStorage.debug` property; setting this property (e.g., to 'worker:*' to enable all namespaces starting with 'worker:') allows viewing debug messages in the browser's developer console after refreshing the page.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nlocalStorage.debug = 'worker:*'\n```\n\n----------------------------------------\n\nTITLE: Preparing Chart Data Structures for Visualization - TypeScript\nDESCRIPTION: This module provides utility functions in TypeScript for preparing and formatting data to be visualized as time-series, radar, or pie charts. It is intended as a preprocessing layer before passing data to rendering libraries such as D3 or Chart.js. Inputs include domain-specific datasets, and outputs are typically arrays or objects structured for easy consumption by chart libraries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Data visualization utilities\\nexport function formatTimeSeries(rawData: number[]) {\\n  return rawData.map((value, i) => ({ x: i, y: value }));\\n}\\n\\nexport function prepareRadarData(labels: string[], values: number[]) {\\n  return labels.map((label, i) => ({ axis: label, value: values[i] }));\\n}\\n\\nexport function preparePieData(categories: string[], values: number[]) {\\n  return categories.map((cat, i) => ({ category: cat, value: values[i] }));\\n}\\n\\n// Example usage:\\n// formatTimeSeries([10,12,13])\\n// prepareRadarData(['A','B'], [1,2])\n```\n\n----------------------------------------\n\nTITLE: Serving Files with Custom Error Handling and Headers Using Send - Node.js JavaScript\nDESCRIPTION: Demonstrates using 'send' with a custom error handler, custom headers that force Content-Disposition attachment, and custom directory redirection logic. Listens for 'error', 'directory', and 'headers' events on the SendStream instance to override default error responses, directory redirects, and set download headers. Serves files from '/www/public'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  // your custom error-handling logic:\n  function error (err) {\n    res.statusCode = err.status || 500\n    res.end(err.message)\n  }\n\n  // your custom headers\n  function headers (res, path, stat) {\n    // serve all files for download\n    res.setHeader('Content-Disposition', 'attachment')\n  }\n\n  // your custom directory handling logic:\n  function redirect () {\n    res.statusCode = 301\n    res.setHeader('Location', req.url + '/')\n    res.end('Redirecting to ' + req.url + '/')\n  }\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, parseUrl(req).pathname, { root: '/www/public' })\n    .on('error', error)\n    .on('directory', redirect)\n    .on('headers', headers)\n    .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Generating a Code Coverage Report with istanbul-lib-report in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use `istanbul-lib-report` and `istanbul-reports` to generate a code coverage report. It involves requiring the libraries, defining configuration options like watermarks and output directory, creating a reporting context using `libReport.createContext()`, instantiating a specific report type (e.g., 'json') with `reports.create()`, and finally executing the report generation process with `report.execute()`. Assumes a `coverageMap` object (obtained from `istanbul-lib-coverage`) is available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-report/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst libReport = require('istanbul-lib-report');\nconst reports = require('istanbul-reports');\n\n// coverageMap, for instance, obtained from istanbul-lib-coverage\nconst coverageMap;\n\nconst configWatermarks = {\n  statements: [50, 80],\n  functions: [50, 80],\n  branches: [50, 80],\n  lines: [50, 80]\n};\n\n// create a context for report generation\nconst context = libReport.createContext({\n  dir: 'report/output/dir',\n  // The summarizer to default to (may be overridden by some reports)\n  // values can be nested/flat/pkg. Defaults to 'pkg'\n  defaultSummarizer: 'nested',\n  watermarks: configWatermarks,\n  coverageMap,\n})\n\n// create an instance of the relevant report class, passing the\n// report name e.g. json/html/html-spa/text\nconst report = reports.create('json', {\n  skipEmpty: configSkipEmpty,\n  skipFull: configSkipFull\n})\n\n// call execute to synchronously create and write the report to disk\nreport.execute(context)\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays with diff() in JavaScript\nDESCRIPTION: Demonstrates using the `diff` function from `jest-diff` to compare two simple JavaScript arrays. It serializes the arrays using `pretty-format`, compares them line-by-line using `diff-sequences`, and returns a formatted string showing the differences using `chalk`. Requires the `jest-diff` package. Input: two JavaScript arrays (`a`, `b`). Output: a formatted difference string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = ['delete', 'common', 'changed from'];\nconst b = ['common', 'changed to', 'insert'];\n\nconst difference = diff(a, b);\n```\n\n----------------------------------------\n\nTITLE: Extending debug Namespaces - JavaScript\nDESCRIPTION: Shows how to extend a debug instance with sub-namespaces, creating independent loggers for different features. Uses the .extend() function to derive new debug loggers; requires the 'debug' package and a Node.js environment. Input is multiple log strings, output is prefixed debug logs with hierarchical namespaces.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = require('debug')('auth');\n\n//creates new debug instance with extended namespace\nconst logSign = log.extend('sign');\nconst logLogin = log.extend('login');\n\nlog('hello'); // auth hello\nlogSign('hello'); //auth:sign hello\nlogLogin('hello'); //auth:login hello\n```\n\n----------------------------------------\n\nTITLE: Instantiating Azure AI Search Client Objects with National Cloud Audience - JavaScript\nDESCRIPTION: Illustrates how to configure Azure AI Search client instances for authentication in a National Cloud environment (e.g., Azure China) in JavaScript. The example leverages the audience property from KnownSearchAudience. Prerequisites: @azure/search-documents package (JavaScript), endpoint, index name (for SearchClient), API key, and correct audience constant. This setup is necessary for compliance with regional regulatory requirements and ensures correct routing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst {\n  SearchClient,\n  SearchIndexClient,\n  SearchIndexerClient,\n  AzureKeyCredential,\n  KnownSearchAudience,\n} = require(\"@azure/search-documents\");\n\n// To query and manipulate documents\nconst searchClient = new SearchClient(\n  \"<endpoint>\",\n  \"<indexName>\",\n  new AzureKeyCredential(\"<apiKey>\"),\n  {\n    audience: KnownSearchAudience.AzureChina,\n  }\n);\n\n// To manage indexes and synonymmaps\nconst indexClient = new SearchIndexClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"), {\n  audience: KnownSearchAudience.AzureChina,\n});\n\n// To manage indexers, datasources and skillsets\nconst indexerClient = new SearchIndexerClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"), {\n  audience: KnownSearchAudience.AzureChina,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Validation Error Output (Bash/Console)\nDESCRIPTION: Shows the console output when a configuration option ('transform') has an incorrect type (string instead of object). The message details the option, the expected type, the received type, provides an example of the correct structure, and includes any custom comment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n● Validation Error:\n\n  Option transform must be of type:\n    object\n  but instead received:\n    string\n\n  Example:\n  {\n    \"transform\": {\n      \"\\\\.js$\": \"<rootDir>/preprocessor.js\"\n    }\n  }\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Options using TypeBox - TypeScript\nDESCRIPTION: This code demonstrates how to add additional JSON Schema options when defining types with TypeBox in TypeScript. It includes options for validating string formats (such as emails), requiring numerical multiples, and setting array length constraints with specific item types. Each example shows the equivalent JSON Schema representation in comments, illustrating how these options are translated. Requires TypeBox and assumes usage in a TypeScript environment; expected inputs are TypeBox type options objects, and outputs are schema objects consistent with JSON Schema.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// String must be an email\nconst T = Type.String({                              // const T = { \n  format: 'email'                                    //   type: 'string',\n})                                                   //   format: 'email' \n                                                     // }\n\n// Mumber must be a multiple of 2\nconst T = Type.Number({                              // const T = { \n  multipleOf: 2                                      //  type: 'number', \n})                                                   //  multipleOf: 2 \n                                                     // }\n\n// Array must have at least 5 integer values\nconst T = Type.Array(Type.Integer(), {               // const T = { \n  minItems: 5                                        //   type: 'array',\n})                                                   //   minItems: 5,        \n                                                     //   items: { \n                                                     //     type: 'integer'\n                                                     //   }\n                                                     // }\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Single Expressions Using Babylon parseExpression API - JavaScript\nDESCRIPTION: Demonstrates how to use Babylon's parseExpression API to parse a single JavaScript expression string into an AST. The code imports the parseExpression function, passes an expression string and optional options, and returns the AST. Requires Babylon (as 'babylon' module) to be installed. Key parameters: the expression string ('x || y && z') and options (same as parse()). Input is a JavaScript expression; output is its AST representation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { parseExpression } from 'babylon';\n\nconst ast = parseExpression('x || y && z', options);\n```\n\n----------------------------------------\n\nTITLE: Defining Props Interface for Wave Transition Component in TypeScript\nDESCRIPTION: Defines the `WaveTransitionProps` interface using TypeScript. This interface specifies the expected properties for the `WaveTransition` component, currently including only an optional `targetPosition` object with x and y coordinates, likely intended for coordinating the wave effect with the dolphin's movement.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648076558.txt#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// WaveTransition Component\ninterface WaveTransitionProps {\n  targetPosition?: { x: number; y: number };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON5 as ES Module in JavaScript\nDESCRIPTION: This code imports the JSON5 library using ECMAScript module syntax. Suitable for Node.js projects or environments supporting ES modules, the imported JSON5 module provides parse and stringify functions compatible with the JSON5 specification. Requires prior JSON5 npm installation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport JSON5 from 'json5'\n```\n\n----------------------------------------\n\nTITLE: Gamifying User Experience with XP/Achievements Storage - TypeScript (gamification.ts)\nDESCRIPTION: Place gamification.ts in your project, providing functions to award XP or achievements, storing stats either via an API route or localStorage as fallback. Designed for React integration, triggers animation events (e.g., confetti) when achievements are earned. Ensure API endpoints exist and are authenticated; fallback logic works offline.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// gamification.ts\nexport function awardXP(userId: string, amount: number) {\n  // Try to store XP in DB via API route, fallback to localStorage\n  fetch('/api/gamify', {\n    method: 'POST',\n    body: JSON.stringify({ userId, amount }),\n    headers: { 'Content-Type': 'application/json' }\n  })\n    .then(() => {/* Animation or UI feedback */})\n    .catch(() => {\n      localStorage.setItem('xp', String(amount));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chalk Usage in JavaScript\nDESCRIPTION: Shows the fundamental way to use the 'chalk' library in JavaScript. It requires the 'chalk' module and then uses `chalk.blue()` to print the string 'Hello world!' in blue to the console. Requires the 'chalk' package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chalk = require('chalk');\n\nconsole.log(chalk.blue('Hello world!'));\n```\n\n----------------------------------------\n\nTITLE: Prompt Object Structure Example - Prompts Library - JavaScript\nDESCRIPTION: Displays the full structure of a prompt object suitable for use with the 'prompts' library. Illustrates available fields such as type, name, message, initial, format, event handlers, and stream customizations. These options control prompt appearance, default values, formatting, and behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: String | Function,\n  name: String | Function,\n  message: String | Function,\n  initial: String | Function | Async Function\n  format: Function | Async Function,\n  onRender: Function\n  onState: Function\n  stdin: Readable\n  stdout: Writeable\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Document from an Azure Search Index in JavaScript\nDESCRIPTION: This snippet shows how to retrieve a single document from an Azure Search index by its primary key using the `@azure/search-documents` library. It initializes a `SearchClient` with the service endpoint, index name, and API key. The `getDocument` method is then called asynchronously with the document's key ('1234' in this example) to fetch the specific document.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const result = await client.getDocument(\"1234\");\n  console.log(result);\n}\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Incrementing existing prerelease versions via semver CLI (Bash)\nDESCRIPTION: Shows how to further increment an existing prerelease version (`1.2.4-beta.0`) using the `semver` command-line tool with the `-i prerelease` flag. This increments the prerelease numeric suffix. Outputs `1.2.4-beta.1`. Requires the `semver` command-line tool.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.4-beta.0 -i prerelease\n1.2.4-beta.1\n```\n\n----------------------------------------\n\nTITLE: Automatically Advancing Mocked Time with FakeTimers in JavaScript\nDESCRIPTION: This advanced example illustrates how to automatically increment the simulated time within tests. By passing shouldAdvanceTime: true and a custom advanceTimeDelta to FakeTimers.install(), timers are advanced using setImmediate at the specified interval instead of manual clock.tick(). Scheduled timeouts and immediates fire according to this simulated progression. Inputs: configuration object; outputs: logs at specified times according to the fake clock. Limitation: time does not advance in true real time; jumps occur in increments of advanceTimeDelta.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\nvar clock = FakeTimers.install({\n    shouldAdvanceTime: true,\n    advanceTimeDelta: 40,\n});\n\nsetTimeout(() => {\n    console.log(\"this just timed out\"); //executed after 40ms\n}, 30);\n\nsetImmediate(() => {\n    console.log(\"not so immediate\"); //executed after 40ms\n});\n\nsetTimeout(() => {\n    console.log(\"this timed out after\"); //executed after 80ms\n    clock.uninstall();\n}, 50);\n```\n\n----------------------------------------\n\nTITLE: Initializing Frontend with Create React App in JavaScript\nDESCRIPTION: This snippet initializes the frontend project for DecA(I)de using Create React App via npx. It requires Node.js and npm installed in the environment. The command creates the project scaffolding for a React application and is intended to be run inside Replit's shell or any Node-supporting terminal. Outputs are the 'decaide-frontend' directory with all React starter files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app decaide-frontend\n```\n\n----------------------------------------\n\nTITLE: Focusing Parameterized Tests using each.test.only in JavaScript\nDESCRIPTION: This snippet illustrates how to run only a specific set of parameterized tests using 'each.test.only', which is useful for debugging. It requires Jest or compatible test runners with the 'each' utility, and restricts test execution to the specified parameterized cases. Each test checks if the sum of 'a' and 'b' equals 'expected', with input from table rows and output as individual test results.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Subnet Matching Against Custom Range List - JavaScript\nDESCRIPTION: Demonstrates using subnetMatch to classify an address based on a custom range list object. The example shows mapping names to CIDR ranges for documentation or routing purposes. The code parses both IPv6 addresses and checks membership in specified ranges, returning the corresponding name or a default label if no match.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar rangeList = {\n  documentationOnly: [ ipaddr.parse('2001:db8::'), 32 ],\n  tunnelProviders: [\n    [ ipaddr.parse('2001:470::'), 32 ], // he.net\n    [ ipaddr.parse('2001:5c0::'), 32 ]  // freenet6\n  ]\n};\nipaddr.subnetMatch(ipaddr.parse('2001:470:8:66::1'), rangeList, 'unknown'); // => \"tunnelProviders\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using CSS Custom Properties for Theme Colors\nDESCRIPTION: Shows how to define CSS custom properties (variables) like `--color-primary` in the `:root` selector and how to apply them using standard CSS classes like `.bg-primary` and `.text-primary`. This allows theme colors, potentially set by JavaScript (like in `applyTheme`), to dynamically style UI elements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --color-primary: #06B6D4;\n  --color-secondary: #67E8F9;\n  --color-accent: #0E7490;\n  --color-badge: #06B6D4;\n}\n\n.bg-primary {\n  background-color: var(--color-primary);\n}\n.text-primary {\n  color: var(--color-primary);\n}\n/* etc. */\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Uncaught Exception Handler - JavaScript\nDESCRIPTION: Configures source-map-support's install() function to disable its default uncaught exception handler, which otherwise mimics Node's. This is useful if the application provides its own handler. Pass an options object with handleUncaughtExceptions: false.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nrequire('source-map-support').install({\n  handleUncaughtExceptions: false\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically Instrumenting Source Code with babel-plugin-istanbul - JavaScript\nDESCRIPTION: This JavaScript function demonstrates how to programmatically instrument source code using babel-plugin-istanbul by passing both the source code and an explicit source map. It uses import statements for the plugin and babel, configures the plugin with an inputSourceMap option, and returns the transformed output. Requires babel and babel-plugin-istanbul as dependencies; parameters include sourceCode, sourceMap, and fileName.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-istanbul/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport babelPluginIstanbul from 'babel-plugin-istanbul';\n\nfunction instrument(sourceCode, sourceMap, fileName) {\n  return babel.transform(sourceCode, {\n    filename,\n    plugins: [\n      [babelPluginIstanbul, {\n        inputSourceMap: sourceMap\n      }]\n    ]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease with one-based identifier using semver.inc\nDESCRIPTION: Example using `semver.inc` in JavaScript to increment to a prerelease version ('1.2.4-beta.1') with a specific identifier ('beta') and setting the prerelease number base to 1 instead of the default 0 using the fourth argument '1'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta', '1')\n// '1.2.4-beta.1'\n```\n\n----------------------------------------\n\nTITLE: Identifying Context Provider and Consumer Elements (React, JavaScript)\nDESCRIPTION: Uses react-is to check whether given elements are Context.Provider or Context.Consumer, and to confirm their types. The code creates a React context, then uses ReactIs.isContextConsumer and ReactIs.isContextProvider to validate element roles, and ReactIs.typeOf to compare to type constants. Dependencies are react and react-is. Inputs include JSX context provider and consumer, and outputs are boolean validations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/react-is/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport React from \\\"react\\\";\\nimport * as ReactIs from 'react-is';\\n\\nconst ThemeContext = React.createContext(\\\"blue\\\");\\n\\nReactIs.isContextConsumer(<ThemeContext.Consumer />); // true\\nReactIs.isContextProvider(<ThemeContext.Provider />); // true\\nReactIs.typeOf(<ThemeContext.Provider />) === ReactIs.ContextProvider; // true\\nReactIs.typeOf(<ThemeContext.Consumer />) === ReactIs.ContextConsumer; // true\n```\n\n----------------------------------------\n\nTITLE: Applying DECA Cluster Theme Colors with Theme Controller (TypeScript)\nDESCRIPTION: This TypeScript function updates CSS variables to enforce the active DECA cluster theme, handling both standard and custom modes. It uses predefined color schemes and sets document-level variables for primary, secondary, and other color roles. Dark mode nuances are also handled by swapping contrast and light colors where appropriate. Dependencies: AppearanceSettings typing, dark mode logic, and color config in theme-controller.ts. Inputs: appearance object; Output: updated CSS variables on document root.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function applyTheme(appearance: AppearanceSettings): AppearanceSettings {\n  const colorSystems = {\n    business: {\n      primary: '#F59E0B',\n      secondary: '#FCD34D',\n      accent: '#B45309',\n      light: '#FFFBEB',\n      medium: '#FEF3C7',\n      dark: '#D97706',\n      contrast: '#1F2937',\n      badge: '#F59E0B'\n    },\n    finance: {\n      primary: '#10B981',\n      secondary: '#6EE7B7',\n      accent: '#047857',\n      light: '#ECFDF5',\n      medium: '#D1FAE5',\n      dark: '#059669',\n      contrast: '#1F2937',\n      badge: '#10B981'\n    },\n    // ... other DECA cluster themes (hospitality, marketing, entrepreneurship, admin)\n    default: {\n      primary: '#06B6D4',\n      secondary: '#67E8F9',\n      accent: '#0E7490',\n      light: '#ECFEFF',\n      medium: '#CFFAFE',\n      dark: '#0891B2',\n      contrast: '#1F2937',\n      badge: '#06B6D4'\n    }\n  };\n\n  const colors = colorSystems[appearance.colorScheme as keyof typeof colorSystems] || colorSystems.default;\n\n  Object.entries(colors).forEach(([key, value]) => {\n    document.documentElement.style.setProperty(`--color-${key}`, value);\n  });\n\n  if (isDarkMode) {\n    document.documentElement.style.setProperty('--color-light', colors.dark);\n    document.documentElement.style.setProperty('--color-contrast', '#ffffff');\n  } else {\n    document.documentElement.style.setProperty('--color-contrast', colors.contrast);\n  }\n\n  return appearance;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Native ECMAScript Module Type in package.json (JSONC)\nDESCRIPTION: Sets the 'type' field to 'module' in package.json for projects using native ECMAScript module syntax and Node's ESM loader. This ensures .js and .ts files are interpreted as ESM modules. It is a strict prerequisite for using native ESM features in Node.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_16\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Image Accessibility with HTML Alt Text\nDESCRIPTION: Recommends using the 'alt' attribute on HTML `<img>` tags to provide descriptive text alternatives for images. This is essential for accessibility, allowing screen readers to describe images to visually impaired users and providing context if images fail to load.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nUse alt text for images\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Ajv with TypeBox Schemas in TypeScript\nDESCRIPTION: Demonstrates how to set up and use the Ajv validator with TypeBox. It involves importing necessary modules, initializing Ajv with `ajv-formats`, compiling a TypeBox schema using `ajv.compile()`, and then validating a value against the compiled schema.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Type }   from '@sinclair/typebox'\nimport addFormats from 'ajv-formats'\nimport Ajv        from 'ajv'\n\nconst ajv = addFormats(new Ajv({}), [\n  'date-time', \n  'time', \n  'date', \n  'email',  \n  'hostname', \n  'ipv4', \n  'ipv6', \n  'uri', \n  'uri-reference', \n  'uuid',\n  'uri-template', \n  'json-pointer', \n  'relative-json-pointer', \n  'regex'\n])\n\nconst C = ajv.compile(Type.Object({                \n  x: Type.Number(),\n  y: Type.Number(),\n  z: Type.Number()\n}))\n\nconst R = C({ x: 1, y: 2, z: 3 })                    // const R = true \n```\n```\n\n----------------------------------------\n\nTITLE: Establishing Consistent Typography with Tailwind CSS Text Utilities\nDESCRIPTION: Applies Tailwind CSS text utility classes like text-lg, text-sm, and text-base to maintain consistent font sizing throughout the application. This helps establish visual hierarchy (e.g., larger headings, smaller helper text) and improves overall readability and design consistency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ntext-lg for section headings, text-sm for helper text, etc.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntext-base (1rem)\n```\n\n----------------------------------------\n\nTITLE: Using array-flatten to Flatten Nested Arrays in JavaScript\nDESCRIPTION: Imports the 'array-flatten' library and demonstrates its usage. It shows how to completely flatten a deeply nested array and how to flatten an array up to a specified depth (2 in the example). It also shows flattening the 'arguments' object within a function. Requires the 'array-flatten' package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/array-flatten/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar flatten = require('array-flatten')\n\nflatten([1, [2, [3, [4, [5], 6], 7], 8], 9])\n//=> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nflatten([1, [2, [3, [4, [5], 6], 7], 8], 9], 2)\n//=> [1, 2, 3, [4, [5], 6], 7, 8, 9]\n\n(function () {\n  flatten(arguments) //=> [1, 2, 3]\n})(1, [2, 3])\n```\n\n----------------------------------------\n\nTITLE: Using pathExists Asynchronously in JavaScript\nDESCRIPTION: This JavaScript example demonstrates the basic asynchronous usage of the `path-exists` module. It imports the module using `require` and then uses an async IIFE (Immediately Invoked Function Expression) to call `pathExists` with a file path ('foo.js'). The function returns a Promise that resolves to `true` if the path exists and `false` otherwise. The result is awaited using `await` and logged to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-exists/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// foo.js\nconst pathExists = require('path-exists');\n\n(async () => {\n\tconsole.log(await pathExists('foo.js'));\n\t//=> true\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Directories in Parallel with make-dir - JavaScript\nDESCRIPTION: Provides an example using Promise.all to create multiple directories concurrently with the make-dir module in Node.js. Imports make-dir, then uses async/await with Promise.all to create two directory trees. The resulting array contains the full paths to each newly-created directory. Requires make-dir to be installed and works with Node.js 10.12.0+. Inputs are two relative path strings; output is an array of resolved absolute paths.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/readme.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst makeDir = require('make-dir');\n\n(async () => {\n\tconst paths = await Promise.all([\n\t\tmakeDir('unicorn/rainbow'),\n\t\tmakeDir('foo/bar')\n\t]);\n\n\tconsole.log(paths);\n\t/*\n\t[\n\t\t'/Users/sindresorhus/fun/unicorn/rainbow',\n\t\t'/Users/sindresorhus/fun/foo/bar'\n\t]\n\t*/\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Data Point Interface for Visualization (TypeScript)\nDESCRIPTION: This TypeScript code defines the `DataPoint` interface, specifying a structure commonly used for time-series data visualization. Each data point consists of a `date` (string) and a corresponding `value` (number).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DataPoint {\n  date: string;\n  value: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Enabling/Disabling Debug Namespaces in JavaScript\nDESCRIPTION: This snippet demonstrates how to dynamically enable and disable a specific debug namespace ('test') using the `enable()` and `disable()` methods of the `debug` module in Node.js. It requires the `debug` module and logs the enabled status before and after modifications.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nlet debug = require('debug');\n\nconsole.log(1, debug.enabled('test'));\n\ndebug.enable('test');\nconsole.log(2, debug.enabled('test'));\n\ndebug.disable();\nconsole.log(3, debug.enabled('test'));\n\n```\n```\n\n----------------------------------------\n\nTITLE: Resolving legacy fields with legacy() function from resolve.exports - JavaScript\nDESCRIPTION: Illustrates legacy field resolution using the legacy() method from resolve.exports for packages lacking an 'exports' map. Depends on an ES module import for legacy and a JavaScript package object. Inputs: package data, an (optional) options object controlling 'fields' array and 'browser' settings. The function returns the path/string value for the highest-priority matched field; undefined if nothing matches. Limitation: does not assign a fallback (like 'index.js') for unmatched fields.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve.exports/readme.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { legacy } from 'resolve.exports';\n\n// package.json\nconst pkg = {\n  \"name\": \"...\",\n  \"worker\": \"worker.js\",\n  \"module\": \"module.mjs\",\n  \"browser\": \"browser.js\",\n  \"main\": \"main.js\",\n};\n\nlegacy(pkg);\n// fields = [module, main]\n//=> \"module.mjs\"\n\nlegacy(pkg, { browser: true });\n// fields = [browser, module, main]\n//=> \"browser.mjs\"\n\nlegacy(pkg, {\n  fields: ['missing', 'worker', 'module', 'main']\n});\n// fields = [missing, worker, module, main]\n//=> \"worker.js\"\n\nlegacy(pkg, {\n  fields: ['missing', 'worker', 'module', 'main'],\n  browser: true,\n});\n// fields = [browser, missing, worker, module, main]\n//=> \"browser.js\"\n\nlegacy(pkg, {\n  fields: ['module', 'browser', 'main'],\n  browser: true,\n});\n// fields = [module, browser, main]\n//=> \"module.mjs\"\n```\n\n----------------------------------------\n\nTITLE: Installing get-tsconfig via npm\nDESCRIPTION: Demonstrates how to install the `get-tsconfig` package using the Node Package Manager (npm). This command downloads and installs the package and its dependencies into the current project's `node_modules` directory and updates the `package.json` and `package-lock.json` files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install get-tsconfig\n```\n\n----------------------------------------\n\nTITLE: IPv6 to Byte Array Conversion - JavaScript\nDESCRIPTION: Parses an IPv6 address and converts it to its underlying byte array representation using toByteArray. Useful in network applications requiring byte-level address manipulation. The output is an array of numbers between 0 and 255.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar bytes = ipaddr.parse('2a00:1450:8007::68').toByteArray(); // ipv6.google.com\nbytes // => [42, 0x00, 0x14, 0x50, 0x80, 0x07, 0x00, <zeroes...>, 0x00, 0x68 ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Jest Project with npm, Yarn, or pnpm (Bash)\nDESCRIPTION: Provides commands to initialize a Jest project using npm, Yarn, or pnpm. These commands leverage the respective package manager's scaffolding tools (`init` or `create`) to set up a basic Jest configuration quickly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/create-jest/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init jest@latest\n# Or for Yarn\nyarn create jest\n# Or for pnpm\npnpm create jest\n```\n\n----------------------------------------\n\nTITLE: Unified Diff Output Example With Custom Annotations\nDESCRIPTION: A unified diff snippet formatted to use custom annotation labels as specified in diff options. Demonstrates how common, deleted, and inserted lines are represented with the chosen labels and diff markers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- Original\\n+ Modified\\n\\n  common\\n- changed from\\n+ changed to\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Logical Assignment Operators Plugin via npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @babel/plugin-syntax-logical-assignment-operators package as a development dependency using npm. Ensure npm is installed before executing this command. The plugin enables support for logical assignment operators in Babel parsing. Input: npm command; Output: plugin added to devDependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-logical-assignment-operators/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-logical-assignment-operators\n```\n\n----------------------------------------\n\nTITLE: Accessing Status Info via Properties (JavaScript)\nDESCRIPTION: Introduced in v2.0.0 as the standard way to access status code information. `status.message[code]` retrieves the descriptive message (string) for a given numeric status code. `status.code[msg]` retrieves the numeric status code for a given message string (case-insensitive lookup).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstatus.message[code]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatus.code[msg]\n```\n\n----------------------------------------\n\nTITLE: Installing debug with npm in Bash\nDESCRIPTION: Installs the 'debug' package as a dependency in a Node.js project using the npm package manager from the shell. No additional parameters required. This is a prerequisite for all subsequent usage and requires a functional npm setup and working internet connection.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install debug\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using 'debug' in a Node.js Application\nDESCRIPTION: Demonstrates basic usage of the 'debug' library in a Node.js application. It shows how to require the library, create a debugger instance associated with a namespace ('http'), and use it to log messages within a simple HTTP server. The `%o` formatter is used for object inspection.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %o', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies using npm\nDESCRIPTION: This command installs Tailwind CSS along with its peer dependencies, PostCSS and Autoprefixer, using the Node Package Manager (npm). These packages are necessary for integrating Tailwind's utility-first CSS framework into the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss postcss autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling and Restoring Debug Namespaces in JavaScript\nDESCRIPTION: This snippet shows how to use `debug.disable()` to temporarily turn off all debugging and capture the currently enabled namespaces. It then demonstrates restoring the previous debug state using `debug.enable()` with the captured namespaces string. This is useful for temporarily silencing debug output without losing the original configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nlet debug = require('debug');\ndebug.enable('foo:*,-foo:bar');\nlet namespaces = debug.disable();\ndebug.enable(namespaces);\n```\n```\n\n----------------------------------------\n\nTITLE: Parameterized Jest Suites using each.describe - JavaScript\nDESCRIPTION: Illustrates parameterizing entire test suites using each.describe which runs a suite per parameter set. Useful for repeated groups of related tests sharing input/output structure. The suite function receives the row's arguments. Within, individual tests can examine expected results or invariances. Object and array forms are both supported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).describe('.add(%d, %d)', (a, b, expected) => {\\n  test(`returns ${expected}`, () => {\\n    expect(a + b).toBe(expected);\\n  });\\n\\n  test('does not mutate first arg', () => {\\n    a + b;\\n    expect(a).toBe(a);\\n  });\\n\\n  test('does not mutate second arg', () => {\\n    a + b;\\n    expect(b).toBe(b);\\n  });\\n});\n```\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  {a: 1, b: 1, expected: 2},\\n  {a: 1, b: 2, expected: 3},\\n  {a: 2, b: 1, expected: 3},\\n]).describe('.add($a, $b)', ({a, b, expected}) => {\\n  test(`returns ${expected}`, () => {\\n    expect(a + b).toBe(expected);\\n  });\\n\\n  test('does not mutate first arg', () => {\\n    a + b;\\n    expect(a).toBe(a);\\n  });\\n\\n  test('does not mutate second arg', () => {\\n    a + b;\\n    expect(b).toBe(b);\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Extension for Custom MIME Type with mime.extension - JavaScript\nDESCRIPTION: This snippet depicts querying the default extension for a user-defined MIME type, after it has been defined with 'mime.define'. It requires the custom definition to have been set up in the same context. Input is a custom MIME type string, and the output is the first associated extension string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.extension('text/x-some-format'); // => 'x-sf'\n```\n\n----------------------------------------\n\nTITLE: Toggling Memphis Style via Body Class (TSX)\nDESCRIPTION: This code snippet, likely from a theme provider component (`theme-provider.tsx`), demonstrates how to dynamically apply or remove the `memphis-style` and `enabled` CSS classes from the `document.body` based on the `appearance.visualStyle` setting retrieved from application state or settings. This controls the activation of the Memphis styles defined in `visual-styles.css`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nif (appearance.visualStyle === 'memphis') {\n  document.body.classList.add('memphis-style', 'enabled');\n} else {\n  document.body.classList.remove('memphis-style', 'enabled');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-class-properties with yarn (sh)\nDESCRIPTION: This shell command adds the `@babel/plugin-syntax-class-properties` Babel plugin as a development dependency using the yarn package manager. The `--dev` flag ensures it's added to the `devDependencies` in the `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-class-properties/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-class-properties --dev\n```\n\n----------------------------------------\n\nTITLE: Syntax Error: Unexpected Token in JavaScript Object Literal\nDESCRIPTION: Shows a JavaScript object literal missing a semicolon, resulting in a 'Unexpected token, expected ;' syntax error. No external dependencies. The provided code demonstrates how the parser indicates the exact parsing error with location in the code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\n// Unexpected token, expected ; (1:6)\\n{ set 1 }\n```\n\n----------------------------------------\n\nTITLE: Installing get-proto package using npm (Shell)\nDESCRIPTION: This snippet shows the command to install the `get-proto` package using the Node Package Manager (npm). The `--save` flag ensures the package is added to the project's dependencies in `package.json`. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-proto/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save get-proto\n```\n\n----------------------------------------\n\nTITLE: Enabling debug Namespaces in Browser with localStorage in JavaScript\nDESCRIPTION: Shows how to enable desired debug log namespaces in web browsers by assigning a pattern string to localStorage.debug. No dependencies other than a browser with access to localStorage and a debug-enabled build. After setting this, browser-based debug logs matching the namespace pattern will be shown until localStorage is cleared.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.debug = 'worker:*'\n```\n\n----------------------------------------\n\nTITLE: Pushing Database Schema - Bash\nDESCRIPTION: Details the npm command that applies (\"pushes\") the database schema definitions to the newly created PostgreSQL database. Requires npm dependencies to be installed and the database to exist. Ensures the schema is up-to-date and ready for use by the backend application. Output includes logs of schema creation or updates.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run db:push\n```\n\n----------------------------------------\n\nTITLE: Installing cross-spawn (Node.js v7 and below)\nDESCRIPTION: Installs version 6 of the `cross-spawn` package using npm. This specific version is required for compatibility with Node.js version 7 and older.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cross-spawn/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install cross-spawn@6\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG in PowerShell - Command Prompt\nDESCRIPTION: Shows how to set the 'DEBUG' environment variable in PowerShell for enabling debug output (different syntax from CMD). Relevant for users running Node.js apps from PowerShell (such as VS Code terminals).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG = \"*,-not_this\"\n```\n\n----------------------------------------\n\nTITLE: Formatting IPv6 Address: Compact and Normalized - JavaScript\nDESCRIPTION: Shows how to obtain both compact and fully expanded (normalized) string representations of an IPv6 address using toString and toNormalizedString methods. Requires a parsed IPv6 address. Output formats vary, with normalized showing all segments explicitly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"2001:0db8::0001\");\naddr.toString(); // => \"2001:db8::1\"\naddr.toNormalizedString(); // => \"2001:db8:0:0:0:0:0:1\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating MurmurHash3 State Objects (JavaScript)\nDESCRIPTION: Contrasts the two ways to obtain a MurmurHash3 state object. Calling `MurmurHash3()` returns a cached, reset object suitable for single-threaded use where no other hashes are concurrently created. Using `new MurmurHash3()` creates a distinct new object, ensuring state isolation at the cost of potentially higher object creation overhead.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/imurmurhash/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the cached object, calling the function again will return the same\n// object (but reset, so the current state would be lost)\nhashState = MurmurHash3();\n...\n\n// Create a new object that can be safely used however you wish. Calling the\n// function again will simply return a new state object, and no state loss\n// will occur, at the cost of creating more objects.\nhashState = new MurmurHash3();\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Debug Namespaces Dynamically with Debug (JavaScript)\nDESCRIPTION: Demonstrates how to use the 'debug' module in JavaScript to enable, check, and disable named debug namespaces at runtime. The snippet requires the 'debug' package and utilizes its 'enable' and 'disable' methods, showing state changes with corresponding console output. Input is the namespace string (e.g., 'test'); output is booleans logged to the console. Constraints: completely overrides previously set DEBUG variables, and uses standard Node.js require/imports.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet debug = require('debug');\\n\\nconsole.log(1, debug.enabled('test'));\\n\\ndebug.enable('test');\\nconsole.log(2, debug.enabled('test'));\\n\\ndebug.disable();\\nconsole.log(3, debug.enabled('test'));\\n\n```\n\n----------------------------------------\n\nTITLE: Recognizing React StrictMode Elements (React, JavaScript)\nDESCRIPTION: Checks if a JSX StrictMode element is recognized as such by react-is, comparing its type and using isStrictMode. Prerequisites are react and react-is; the code takes a StrictMode element as input and outputs booleans for each validation method.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/react-is/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport React from \\\"react\\\";\\nimport * as ReactIs from 'react-is';\\n\\nReactIs.isStrictMode(<React.StrictMode />); // true\\nReactIs.typeOf(<React.StrictMode />) === ReactIs.StrictMode; // true\n```\n\n----------------------------------------\n\nTITLE: Importing 'resolve' Module Functions in JavaScript\nDESCRIPTION: This snippet illustrates the different ways to import the asynchronous and synchronous functions provided by the 'resolve' module. The default export (`require('resolve')`) is asynchronous, while specific async and sync versions can be required via `resolve/async` and `resolve/sync` respectively.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve/readme.markdown#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar resolve = require('resolve');\nvar async = require('resolve/async');\nvar sync = require('resolve/sync');\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Imports Field (TypeScript)\nDESCRIPTION: This snippet defines TypeScript types that represent the `imports` field supported by Node.js and by the resolve-pkg-maps utility. The main type `Imports` maps specifier conditions to strings, nested imports, arrays for fallbacks, or null, matching Node.js’s import resolution semantics. The recursive type `PathOrMap` allows imports to reference sub-maps, and these types are foundational for static and runtime validation of the imports map used in resolution logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Imports = {\n    [condition: string]: PathOrMap | readonly PathOrMap[] | null\n}\n\ntype PathOrMap = string | Imports\n```\n\n----------------------------------------\n\nTITLE: Consuming Events with Async For-Await Loops in Emittery - JavaScript\nDESCRIPTION: Demonstrates using for-await-of style loops to consume events from an Emittery async iterator, revoking the event subscription with a break statement once a specified value is reached. Dependencies: emittery, Node.js (with ES2018+ support for for-await). Inputs are event names, output is log or other processing in the loop for each event.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\nconst iterator = emitter.events('🦄');\n\nemitter.emit('🦄', '🌈1'); // Buffered\nemitter.emit('🦄', '🌈2'); // Buffered\n\n// In an async context.\nfor await (const data of iterator) {\n\tif (data === '🌈2') {\n\t\tbreak; // Revoke the subscription when we see the value '🌈2'.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Exclusively Running Parameterized Jest Suites using each.describe.only - JavaScript\nDESCRIPTION: Runs only the specific parameterized test suite by using describe.only. All other describes/tests are skipped for focused debugging or targeted execution. Receives each parameter set for the suite function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).describe.only('.add(%d, %d)', (a, b, expected) => {\\n  test(`returns ${expected}`, () => {\\n    expect(a + b).toBe(expected);\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Trust for First Hop in Express.js\nDESCRIPTION: Illustrates configuring an Express application to trust the first hop (the immediate connecting client) as a proxy using `app.set('trust proxy', 1)`. This affects how `req.ip`, `req.hostname`, and `req.protocol` are determined. Mentioned in version 4.3.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', 1)\n```\n\n----------------------------------------\n\nTITLE: Validating Release Types using semver.RELEASE_TYPES in JavaScript\nDESCRIPTION: This snippet shows how to import the `semver` library in Node.js and utilize its `RELEASE_TYPES` constant (an array of valid release type strings like 'major', 'minor', 'patch', etc.) to validate arbitrary user input. It checks if the input string exists within the array and logs an appropriate message.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver');\n\nif (semver.RELEASE_TYPES.includes(arbitraryUserInput)) {\n  console.log('This is a valid release type!');\n} else {\n  console.warn('This is NOT a valid release type!');\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Key-Safe Property Mutation with Unique Symbols - TypeScript\nDESCRIPTION: This snippet demonstrates how to perform type-safe property mutation on objects while using a unique symbol as a property key. The `changePersonData` function limits changes to properties of a Person object to those whose key is a string, preventing direct modification of symbol-indexed properties except via string keys. Dependencies include Symbol, TypeScript generics, and knowledge of mapped types. The code expects a Person-shaped object, a key (must be a string property name), and a compatible value. Attempting to mutate symbol-based keys may cause errors or be disallowed, depending on TypeScript strictness.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare function uniqueId(): number;\n\nconst ID = Symbol('ID');\n\ninterface Person {\n\t[ID]: number;\n\tname: string;\n\tage: number;\n}\n\n// Allows changing the person data as long as the property key is of string type.\nfunction changePersonData<\n\tObj extends Person,\n\tKey extends Extract<keyof Person, string>,\n\tValue extends Obj[Key]\n> (obj: Obj, key: Key, value: Value): void {\n\tobj[key] = value;\n}\n\n// Tiny Andrew was born.\nconst andrew = {\n\t[ID]: uniqueId(),\n\tname: 'Andrew',\n\tage: 0,\n};\n\n// Cool, we're fine with that.\nchangePersonData(andrew, 'name', 'Pony');\n\n// Goverment didn't like the fact that you wanted to change your identity.\nchangePersonData(andrew, ID, uniqueId());\n```\n\n----------------------------------------\n\nTITLE: Rendering Source Map to String using SourceMapGenerator in JavaScript\nDESCRIPTION: Shows the `toString` method of `SourceMapGenerator`. Calling this method renders the incrementally built source map into its standard JSON string representation, which can then be saved or served.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngenerator.toString()\n// '{\"version\":3,\"sources\":[\"module-one.scm\"],\"names\":[],\"mappings\":\"...snip...\",\"file\":\"my-generated-javascript-file.js\",\"sourceRoot\":\"http://example.com/app/js/\"}'\n```\n\n----------------------------------------\n\nTITLE: Preloading dotenv with Configuration via CLI Arguments (Bash)\nDESCRIPTION: Example command demonstrating how to pass `dotenv` configuration options (like custom `path` and enabling `debug` mode) via command-line arguments when using the `-r` preload flag. Arguments must follow the format `dotenv_config_<option>=value`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env dotenv_config_debug=true\n```\n\n----------------------------------------\n\nTITLE: Using the 'Except' Utility Type from type-fest - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the 'Except' utility type from the 'type-fest' package. The 'Except' type allows you to create a new object type by omitting specified keys from an existing type, providing a stricter alternative to TypeScript's built-in Omit type. This code imports 'Except', defines a Foo type, and derives FooWithoutRainbow by removing the 'rainbow' property. Inputs are TypeScript types, dependencies include type-fest >= v0.0.0, and output is a new type without certain keys.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"import {Except} from 'type-fest';\\n\\ntype Foo = {\\n\\tunicorn: string;\\n\\trainbow: boolean;\\n};\\n\\ntype FooWithoutRainbow = Except<Foo, 'rainbow'>;\\n//=> {unicorn: string}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Set-Cookie Headers with node-fetch - JavaScript\nDESCRIPTION: This snippet demonstrates extracting all Set-Cookie headers from a node-fetch Response using the headers.raw() method. It retrieves cookies as an array of strings (not comma-separated), which is a node-fetch specific feature and not available in browsers. Expects a Response object from a fetched HTTP URL, with node-fetch as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nconst response = await fetch('https://example.com');\\n\\n// Returns an array of values, instead of a string of comma-separated values\\nconsole.log(response.headers.raw()['set-cookie']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure App Service Deployment with GitHub Actions - YAML\nDESCRIPTION: This YAML workflow sets up a CI/CD pipeline for deploying the DecA(I)de app using GitHub Actions and Azure App Service. It checks out code, installs Node.js dependencies, builds the frontend, runs tests, and deploys via the azure/webapps-deploy action using secrets for authentication. This file should be placed under .github/workflows/deploy.yml and assumes prior setup of an Azure App Service and publish profile.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/deploy.yml\nname: Deploy to Azure\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '18.x'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Build frontend\n      run: npm run build\n    \n    - name: Run tests\n      run: npm test\n    \n    - name: Deploy to Azure\n      uses: azure/webapps-deploy@v2\n      with:\n        app-name: 'decade-app'\n        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}\n        package: .\n```\n\n----------------------------------------\n\nTITLE: Using dedent Template Tag and Function - JavaScript\nDESCRIPTION: Demonstrates how to import dedent and use it as both a template tag and a function for removing indentation from multi-line strings. Required dependency: dedent must be installed and importable. Shows three usage patterns (tagged, multi-line tagged, and function form) and concatenates result strings for display. Function accepts multi-line string literals and outputs de-indented single strings, useful for clean and consistent formatting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dedent/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport dedent from \"dedent\";\n\nfunction usageExample() {\n\tconst first = dedent`A string that gets so long you need to break it over\n                       multiple lines. Luckily dedent is here to keep it\n                       readable without lots of spaces ending up in the string\n                       itself.`;\n\n\tconst second = dedent`\n    Leading and trailing lines will be trimmed, so you can write something like\n    this and have it work as you expect:\n\n      * how convenient it is\n      * that I can use an indented list\n         - and still have it do the right thing\n\n    That's all.\n  `;\n\n\tconst third = dedent(`\n    Wait! I lied. Dedent can also be used as a function.\n  `);\n\n\treturn first + \"\\n\\n\" + second + \"\\n\\n\" + third;\n}\n\nconsole.log(usageExample());\n```\n\n----------------------------------------\n\nTITLE: Redirecting Debug Output Streams per Namespace in Node.js JavaScript\nDESCRIPTION: Shows advanced output configuration of the 'debug' module by setting output destinations per logger or globally. Demonstrates how different debug instances can log to either stderr (default), stdout (via console.log), or console.info, showcasing flexibility. Requires the 'debug' package and access to the console object. Be careful to use correct binding for logging functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Map Support Programmatically in JavaScript\nDESCRIPTION: JavaScript code snippet demonstrating the basic programmatic way to enable source map support. Requiring the module and calling `install()` at the top of the main compiled script modifies the V8 stack trace API.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@cspotcode/source-map-support').install();\n```\n\n----------------------------------------\n\nTITLE: Extending the Node 10 TSConfig Base in JSON\nDESCRIPTION: This snippet shows the minimal addition required in the project's tsconfig.json to extend the base configuration from @tsconfig/node10. It expects the package to be installed in devDependencies. Setting the \"extends\" property enables use of predefined compiler settings for Node.js 10, streamlining configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node10/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extends\": \"@tsconfig/node10/tsconfig.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing @types/serve-static using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `@types/serve-static` package. The `--save` flag (or the default behavior in modern npm versions) adds the package as a dependency to the project's `package.json` file. This makes the TypeScript type definitions for the `serve-static` library available in the project, providing type checking and autocompletion.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/serve-static/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/serve-static\n```\n\n----------------------------------------\n\nTITLE: Declaring the createRequire Type Signature in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the 'createRequire' function, indicating it accepts a string or URL and returns a NodeRequire instance. This is important for TypeScript projects using 'create-require' to ensure correct typings and to support type-checking and IntelliSense. No external dependencies are required beyond TypeScript and Node.js type definitions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/create-require/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRequire (filename: string | URL): NodeRequire;\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for @jridgewell/trace-mapping (Text)\nDESCRIPTION: Provides benchmark results comparing the performance of `@jridgewell/trace-mapping` against other source map libraries (`source-map-js`, `source-map` versions 0.6.1 and 0.8.0) using Node.js v18.0.0. The benchmarks measure operations per second for tasks like decoding/encoding source maps and performing `originalPositionFor` lookups on various real-world source map files (amp.js.map, babel.min.js.map, preact.js.map, react.js.map). The results indicate `@jridgewell/trace-mapping` generally offers superior performance, especially with decoded object inputs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nnode v18.0.0\n\namp.js.map\ntrace-mapping:    decoded JSON input x 183 ops/sec ±0.41% (87 runs sampled)\ntrace-mapping:    encoded JSON input x 384 ops/sec ±0.89% (89 runs sampled)\ntrace-mapping:    decoded Object input x 3,085 ops/sec ±0.24% (100 runs sampled)\ntrace-mapping:    encoded Object input x 452 ops/sec ±0.80% (84 runs sampled)\nsource-map-js:    encoded Object input x 88.82 ops/sec ±0.45% (77 runs sampled)\nsource-map-0.6.1: encoded Object input x 38.39 ops/sec ±1.88% (52 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\ntrace-mapping:    decoded originalPositionFor x 4,025,347 ops/sec ±0.15% (97 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 3,333,136 ops/sec ±1.26% (90 runs sampled)\nsource-map-js:    encoded originalPositionFor x 824,978 ops/sec ±1.06% (94 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 741,300 ops/sec ±0.93% (92 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 2,587,603 ops/sec ±0.75% (97 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\n***\n\nbabel.min.js.map\ntrace-mapping:    decoded JSON input x 17.43 ops/sec ±8.81% (33 runs sampled)\ntrace-mapping:    encoded JSON input x 34.18 ops/sec ±4.67% (50 runs sampled)\ntrace-mapping:    decoded Object input x 1,010 ops/sec ±0.41% (98 runs sampled)\ntrace-mapping:    encoded Object input x 39.45 ops/sec ±4.01% (52 runs sampled)\nsource-map-js:    encoded Object input x 6.57 ops/sec ±3.04% (21 runs sampled)\nsource-map-0.6.1: encoded Object input x 4.23 ops/sec ±2.93% (15 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\ntrace-mapping:    decoded originalPositionFor x 7,576,265 ops/sec ±0.74% (96 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 5,019,743 ops/sec ±0.74% (94 runs sampled)\nsource-map-js:    encoded originalPositionFor x 3,396,137 ops/sec ±42.32% (95 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 3,753,176 ops/sec ±0.72% (95 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 6,423,633 ops/sec ±0.74% (95 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\n***\n\npreact.js.map\ntrace-mapping:    decoded JSON input x 3,499 ops/sec ±0.18% (98 runs sampled)\ntrace-mapping:    encoded JSON input x 6,078 ops/sec ±0.25% (99 runs sampled)\ntrace-mapping:    decoded Object input x 254,788 ops/sec ±0.13% (100 runs sampled)\ntrace-mapping:    encoded Object input x 14,063 ops/sec ±0.27% (94 runs sampled)\nsource-map-js:    encoded Object input x 2,465 ops/sec ±0.25% (98 runs sampled)\nsource-map-0.6.1: encoded Object input x 1,174 ops/sec ±1.90% (95 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\ntrace-mapping:    decoded originalPositionFor x 7,720,171 ops/sec ±0.14% (97 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 6,864,485 ops/sec ±0.16% (101 runs sampled)\nsource-map-js:    encoded originalPositionFor x 2,387,219 ops/sec ±0.28% (98 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 1,565,339 ops/sec ±0.32% (101 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 3,819,732 ops/sec ±0.38% (98 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\n***\n\nreact.js.map\ntrace-mapping:    decoded JSON input x 1,719 ops/sec ±0.19% (99 runs sampled)\ntrace-mapping:    encoded JSON input x 4,284 ops/sec ±0.51% (99 runs sampled)\ntrace-mapping:    decoded Object input x 94,668 ops/sec ±0.08% (99 runs sampled)\ntrace-mapping:    encoded Object input x 5,287 ops/sec ±0.24% (99 runs sampled)\nsource-map-js:    encoded Object input x 814 ops/sec ±0.20% (98 runs sampled)\nsource-map-0.6.1: encoded Object input x 429 ops/sec ±0.24% (94 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\ntrace-mapping:    decoded originalPositionFor x 28,927,989 ops/sec ±0.61% (94 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 27,394,475 ops/sec ±0.55% (97 runs sampled)\nsource-map-js:    encoded originalPositionFor x 16,856,730 ops/sec ±0.45% (96 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 12,258,950 ops/sec ±0.41% (97 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 22,272,990 ops/sec ±0.58% (95 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n```\n\n----------------------------------------\n\nTITLE: Installing @types/babel__template via npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to install the `@types/babel__template` package. The `--save` flag ensures that the package is added as a dependency in the project's `package.json` file. This package provides TypeScript type definitions necessary for working with `@babel/template` in a TypeScript environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/babel__template/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/babel__template\n```\n\n----------------------------------------\n\nTITLE: Installing @types/babel__traverse via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the TypeScript type definitions for the `@babel/traverse` library. The `--save` flag ensures that the package is added as a dependency in the project's `package.json` file. This installation is necessary for projects using TypeScript that interact with the Babel AST traversal functionalities.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/babel__traverse/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/babel__traverse\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/code-frame with npm (Shell)\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to install the `@babel/code-frame` package. The `--save-dev` flag specifies that this package is a development dependency, meaning it's needed for development or build processes but not for the application in production.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/code-frame/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/code-frame\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/code-frame with yarn (Shell)\nDESCRIPTION: This shell command uses the Yarn package manager to install the `@babel/code-frame` package. The `--dev` flag indicates that this package is a development dependency, similar to npm's `--save-dev`, adding it to the `devDependencies` in the `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/code-frame/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/code-frame --dev\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions Using NPM - Shell\nDESCRIPTION: Provides a shell command to install the type definitions for Express. Requires npm to be installed. This command downloads and saves the '@types/express' package as a dependency in the current project's package configuration. Use this in a terminal where your package.json is located. Expected output is a successful installation with the type definitions available for the TypeScript compiler.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/express/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/express\n```\n\n----------------------------------------\n\nTITLE: Redirecting 'debug' Output Streams (JavaScript)\nDESCRIPTION: Example demonstrating how to change the output stream for the 'debug' library. It shows setting the 'log' property of a specific namespace instance ('app:log') to 'console.log' and later setting the global 'debug.log' property to 'console.info' to redirect all debug output. Binding the console method (`bind(console)`) is essential. Requires the 'debug' module and Node.js `console` object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n----------------------------------------\n\nTITLE: Extracting IPv6 Zone Index - JavaScript\nDESCRIPTION: Demonstrates parsing an IPv6 address with a zone index (e.g., interface name) and accessing the zoneId property. Parses both the address and zone information, which is useful in scoped IPv6 networking contexts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"2001:db8::%eth0\");\naddr.zoneId // => 'eth0'\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling and Restoring Debug Namespaces in Node.js\nDESCRIPTION: Provides a pattern for temporarily disabling all debugging namespaces and then restoring them later. `debug.disable()` returns the currently enabled namespaces string, which can be stored and passed back to `debug.enable()` to revert to the previous state. Note that the returned string format might differ but is semantically identical.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nlet debug = require('debug');\ndebug.enable('foo:*,-foo:bar');\nlet namespaces = debug.disable();\ndebug.enable(namespaces);\n```\n\n----------------------------------------\n\nTITLE: Override Prompt Answers from Command-Line Arguments - Prompts Library - JavaScript\nDESCRIPTION: Demonstrates how to pre-fill or override prompts using answers from command-line arguments, with 'prompts.override' and the 'yargs' library. This enables interactive and non-interactive (scripted) CLI operation. Requires 'prompts' and 'yargs' as dependencies, and expects command-line arguments mapped to prompt names.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst prompts = require('prompts');\nprompts.override(require('yargs').argv);\n\n(async () => {\n  const response = await prompts([\n    {\n      type: 'text',\n      name: 'twitter',\n      message: `What's your twitter handle?`\n    },\n    {\n      type: 'multiselect',\n      name: 'color',\n      message: 'Pick colors',\n      choices: [\n        { title: 'Red', value: '#ff0000' },\n        { title: 'Green', value: '#00ff00' },\n        { title: 'Blue', value: '#0000ff' }\n      ],\n    }\n  ]);\n\n  console.log(response);\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Message by Code Function (JavaScript)\nDESCRIPTION: Represents the main function `statuses(code)` (or similar, based on context and library name) which retrieves the status message string when given a numeric status code as input. Version 2.0.0 clarified that it returns the message directly for valid codes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstatuses(code)\n```\n\n----------------------------------------\n\nTITLE: Requesting a Simulated Idle Callback with FakeTimers - JavaScript\nDESCRIPTION: Schedules a callback for idle periods with 'clock.requestIdleCallback', optionally specifying a timeout. Returns an ID for later cancellation. Accepts a callback and an optional timeout (ms). If timeout provided, guarantees firing within timeout period.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclock.requestIdleCallback(callback[, timeout])\n```\n\n----------------------------------------\n\nTITLE: Expanding Lists (Sets) with braces - JavaScript\nDESCRIPTION: Demonstrates the expansion of list/set patterns using 'braces', both in its default compiled form and in Bash-style expanded form with 'expand' option or method. This is useful for matching or generating all possible combinations within curly-braced lists in file/path patterns. No additional dependencies beyond 'braces' are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces('a/{foo,bar,baz}/*.js'));\n//=> ['a/(foo|bar|baz)/*.js']\n\nconsole.log(braces.expand('a/{foo,bar,baz}/*.js'));\n//=> ['a/foo/*.js', 'a/bar/*.js', 'a/baz/*.js']\n```\n\n----------------------------------------\n\nTITLE: Resolving Exports and Imports with resolve.exports (JavaScript)\nDESCRIPTION: This example demonstrates various usages of the resolve.exports and resolve.imports functions in JavaScript. It shows how to resolve paths based on the 'exports' and 'imports' fields from a sample package.json object, how to handle different condition sets, pass options, and deal with errors. The snippet requires the resolve.exports library and a correctly structured package.json object to function, and outputs resolved file paths or throws errors if entries aren't found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve.exports/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as resolve from 'resolve.exports';\n\n// package.json contents\nconst pkg = {\n  \"name\": \"foobar\",\n  \"module\": \"dist/module.mjs\",\n  \"main\": \"dist/require.js\",\n  \"imports\": {\n    \"#hash\": {\n      \"import\": {\n        \"browser\": \"./hash/web.mjs\",\n        \"node\": \"./hash/node.mjs\",\n      },\n      \"default\": \"./hash/detect.js\"\n    }\n  },\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/module.mjs\",\n      \"require\": \"./dist/require.js\"\n    },\n    \"./lite\": {\n      \"worker\": {\n        \"browser\": \"./lite/worker.browser.js\",\n        \"node\": \"./lite/worker.node.js\"\n      },\n      \"import\": \"./lite/module.mjs\",\n      \"require\": \"./lite/require.js\"\n    }\n  }\n};\n\n// ---\n// Exports\n// ---\n\n// entry: \"foobar\" === \".\" === default\n// conditions: [\"default\", \"import\", \"node\"]\nresolve.exports(pkg);\nresolve.exports(pkg, '.');\nresolve.exports(pkg, 'foobar');\n//=> [\"./dist/module.mjs\"]\n\n// entry: \"foobar/lite\" === \"./lite\"\n// conditions: [\"default\", \"import\", \"node\"]\nresolve.exports(pkg, 'foobar/lite');\nresolve.exports(pkg, './lite');\n//=> [\"./lite/module.mjs\"]\n\n// Enable `require` condition\n// conditions: [\"default\", \"require\", \"node\"]\nresolve.exports(pkg, 'foobar', { require: true }); //=> [\"./dist/require.js\"]\nresolve.exports(pkg, './lite', { require: true }); //=> [\"./lite/require.js\"]\n\n// Throws \"Missing <entry> specifier in <name> package\" Error\nresolve.exports(pkg, 'foobar/hello');\nresolve.exports(pkg, './hello/world');\n\n// Add custom condition(s)\n// conditions: [\"default\", \"worker\", \"import\", \"node\"]\nresolve.exports(pkg, 'foobar/lite', {\n  conditions: ['worker']\n}); //=> [\"./lite/worker.node.js\"]\n\n// Toggle \"browser\" condition\n// conditions: [\"default\", \"worker\", \"import\", \"browser\"]\nresolve.exports(pkg, 'foobar/lite', {\n  conditions: ['worker'],\n  browser: true\n}); //=> [\"./lite/worker.browser.js\"]\n\n// Disable non-\"default\" condition activate\n// NOTE: breaks from Node.js default behavior\n// conditions: [\"default\", \"custom\"]\nresolve.exports(pkg, 'foobar/lite', {\n  conditions: ['custom'],\n  unsafe: true,\n});\n//=> Error: No known conditions for \"./lite\" specifier in \"foobar\" package\n\n// ---\n// Imports\n// ---\n\n// conditions: [\"default\", \"import\", \"node\"]\nresolve.imports(pkg, '#hash');\nresolve.imports(pkg, 'foobar/#hash');\n//=> [\"./hash/node.mjs\"]\n\n// conditions: [\"default\", \"import\", \"browser\"]\nresolve.imports(pkg, '#hash', { browser: true });\nresolve.imports(pkg, 'foobar/#hash');\n//=> [\"./hash/web.mjs\"]\n\n// conditions: [\"default\"]\nresolve.imports(pkg, '#hash', { unsafe: true });\nresolve.imports(pkg, 'foobar/#hash');\n//=> [\"./hash/detect.mjs\"]\n\nresolve.imports(pkg, '#hello/world');\nresolve.imports(pkg, 'foobar/#hello/world');\n//=> Error: Missing \"#hello/world\" specifier in \"foobar\" package\n\n// ---\n// Legacy\n// ---\n\n// prefer \"module\" > \"main\" (default)\nresolve.legacy(pkg); //=> \"dist/module.mjs\"\n\n// customize fields order\nresolve.legacy(pkg, {\n  fields: ['main', 'module']\n}); //=> \"dist/require.js\"\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Environments with dotenvx (.env.production) (Bash)\nDESCRIPTION: Bash commands demonstrating how to use `dotenvx` for environment management. It creates a `.env.production` file, a simple Node.js script, and then runs the script using `dotenvx run`, explicitly loading the production environment file with the `--env-file` flag. This allows managing separate configurations for different environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"HELLO=production\" > .env.production\n$ echo \"console.log('Hello ' + process.env.HELLO)\" > index.js\n\n$ dotenvx run --env-file=.env.production -- node index.js\nHello production\n> ^^\n```\n\n----------------------------------------\n\nTITLE: Basic String Escaping with jsesc (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of `jsesc` to escape strings containing non-ASCII characters (like ♥ and ü) and astral plane symbols (like 𝌆). By default, it produces ASCII-safe output using hexadecimal and Unicode escape sequences.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('Ich ♥ Bücher');\n// → 'Ich \\\\u2665 B\\\\xFCcher'\n\njsesc('foo 𝌆 bar');\n// → 'foo \\\\uD834\\\\uDF06 bar'\n```\n\n----------------------------------------\n\nTITLE: Compiling to UMD Format with Rollup CLI\nDESCRIPTION: This Bash command illustrates using the Rollup CLI to compile an entry file (`main.js`) into a single file (`bundle.js`) using the Universal Module Definition (UMD) format. The `--format umd` flag specifies the output format, which works in both browser and Node.js environments. The `--name \\\"myBundle\\\"` flag is required to assign a name for the bundle, used for global variable assignment in browsers or as the export name.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# UMD format requires a bundle name\nrollup main.js --format umd --name \"myBundle\" --file bundle.js\n```\n\n----------------------------------------\n\nTITLE: Checking source content completeness with SourceMapConsumer - JavaScript\nDESCRIPTION: Checks if a source map contains embedded source content for all sources using hasContentsOfAllSources. If true, the provided callback is called immediately with the consumer; otherwise, missing sources are fetched before proceeding. Requires a SourceMapConsumer, a callback function, and a (possibly asynchronous) fallback fetchSources function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...\nif (consumer.hasContentsOfAllSources()) {\n  consumerReadyCallback(consumer);\n} else {\n  fetchSources(consumer, consumerReadyCallback);\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Formatters to 'debug' (JavaScript)\nDESCRIPTION: Shows how to extend the 'debug' library by adding a custom formatter. This example adds a '%h' formatter to `createDebug.formatters` that converts Buffer objects to their hexadecimal string representation when used in a debug message. Requires the 'debug' module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n----------------------------------------\n\nTITLE: Converting fetch-blob WHATWG Stream to Node.js Readable (JavaScript)\nDESCRIPTION: Demonstrates how to convert the WHATWG stream returned by `blob.stream()` from `fetch-blob` (version 3+) into a Node.js `Readable` stream. This is necessary for compatibility with Node.js stream APIs, as `fetch-blob` v3+ uses WHATWG streams by default. Requires the Node.js built-in 'stream' module and an existing `blob` instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fetch-blob/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {Readable} from 'stream'\nconst stream = Readable.from(blob.stream())\n```\n\n----------------------------------------\n\nTITLE: Translating Strings with Tagged Templates Using y18n in JavaScript\nDESCRIPTION: This snippet demonstrates using y18n's template literal tagging for string translation in Node.js. It initializes the library and shows how to interpolate variables within a tagged template localization. The snippet requires the y18n package and outputs the translated string to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/y18n/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst __ = require('y18n')().__;\n\nconst str = 'foo';\n\nconsole.log(__`my awesome string ${str}`);\n```\n\n----------------------------------------\n\nTITLE: Defining Project Structure for FastAPI DecA(I)de Integration (Text)\nDESCRIPTION: Outlines the recommended folder and file organization for the FastAPI application integrating with DecA(I)de. This structure promotes modularity by separating API endpoints, core application logic (config, security), external API clients, data models, and utility functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfastapi_decade_integration/\n├── app/\n│   ├── __init__.py\n│   ├── main.py           # FastAPI application\n│   ├── api/\n│   │   ├── __init__.py\n│   │   ├── endpoints/\n│   │   │   ├── __init__.py\n│   │   │   ├── auth.py      # Auth routing\n│   │   │   ├── ai.py        # AI feature routing\n│   │   │   ├── chat.py      # Chat feature routing\n│   │   │   └── data.py      # Data access routing\n│   ├── core/\n│   │   ├── __init__.py\n│   │   ├── config.py       # App configuration\n│   │   └── security.py     # Authentication helpers\n│   ├── clients/\n│   │   ├── __init__.py\n│   │   └── decade_client.py # Client for DecA(I)de APIs\n│   ├── models/\n│   │   ├── __init__.py\n│   │   ├── user.py         # User models\n│   │   ├── ai.py           # AI feature models\n│   │   └── chat.py         # Chat models\n│   └── utils/\n│       ├── __init__.py\n│       └── session.py      # Session management\n├── .env                   # Environment variables\n└── requirements.txt       # Dependencies\n```\n\n----------------------------------------\n\nTITLE: Wrapping File Reading APIs with gensync in JavaScript\nDESCRIPTION: Wraps Node.js fs.readFileSync and fs.readFile using gensync, exposing a unified interface (myOperation) that supports synchronous, promise-based, and callback-based (errback) invocation patterns. Users can consume the returned value using myOperation.sync for sync code, myOperation.async for promises, or myOperation.errback for callbacks. Requires gensync and Node's fs module; inputs include a filename and encoding, outputs the processed file content with a prefixed string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gensync/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\");\nconst gensync = require(\"gensync\");\n\nconst readFile = gensync({\n  sync: fs.readFileSync,\n  errback: fs.readFile,\n});\n\nconst myOperation = gensync(function* (filename) {\n  const code = yield* readFile(filename, \"utf8\");\n\n  return \"// some custom prefix\\n\" + code;\n});\n\n// Load and add the prefix synchronously:\nconst result = myOperation.sync(\"./some-file.js\");\n\n// Load and add the prefix asynchronously with promises:\nmyOperation.async(\"./some-file.js\").then(result => {\n\n});\n\n// Load and add the prefix asynchronously with promises:\nmyOperation.errback(\"./some-file.js\", (err, result) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Regex Quantifiers and List Expansion with quantifiers Option - JavaScript\nDESCRIPTION: Shows how to use the 'quantifiers' option to distinguish between regex quantifiers (like {1,3}) and brace lists in patterns, preventing incorrect expansions. By default, such patterns might be expanded as lists, but with 'quantifiers: true', they are recognized as quantifiers. When both 'expand' and 'quantifiers' are true, expansion only applies to lists, not quantifiers. Requires 'braces' as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst braces = require('braces');\nconsole.log(braces('a/b{1,3}/{x,y,z}'));\n//=> [ 'a/b(1|3)/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true }));\n//=> [ 'a/b{1,3}/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true, expand: true }));\n//=> [ 'a/b{1,3}/x', 'a/b{1,3}/y', 'a/b{1,3}/z' ]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom HTTP/HTTPS Agent using agent-base in TypeScript\nDESCRIPTION: This TypeScript example demonstrates creating a custom HTTP agent (`MyAgent`) by extending the `Agent` class from `agent-base`. The `connect` method is implemented to return either a `tls.Socket` for HTTPS requests (when `opts.secureEndpoint` is true) or a `net.Socket` for HTTP requests. The example then instantiates this agent with `keepAlive` enabled and uses it to make an HTTP GET request.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/agent-base/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as net from 'net';\nimport * as tls from 'tls';\nimport * as http from 'http';\nimport { Agent } from 'agent-base';\n\nclass MyAgent extends Agent {\n  connect(req, opts) {\n    // `secureEndpoint` is true when using the \"https\" module\n    if (opts.secureEndpoint) {\n      return tls.connect(opts);\n    } else {\n      return net.connect(opts);\n    }\n  }\n});\n\n// Keep alive enabled means that `connect()` will only be\n// invoked when a new connection needs to be created\nconst agent = new MyAgent({ keepAlive: true });\n\n// Pass the `agent` option when creating the HTTP request\nhttp.get('http://nodejs.org/api/', { agent }, (res) => {\n  console.log('\"response\" event!', res.headers);\n  res.pipe(process.stdout);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with Prompts Format Callback - JavaScript\nDESCRIPTION: Demonstrates using the 'format' callback option in a 'number' type prompt to convert user input into a localized currency string with USD formatting. Requires the 'prompts' library for prompt definitions and optionally depends on browser or Node.js support for 'Intl.NumberFormat'. The 'val' parameter receives user input, and the callback returns the formatted currency string, which is then added to the response object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'number',\\n  name: 'price',\\n  message: 'Enter price',\\n  format: val => Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' }).format(val);\\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Adapting Background for Dark Mode (JSX)\nDESCRIPTION: Shows the corrected code for adapting a component's background to dark mode. By adding the `dark:bg-[var(--surface-2)]` Tailwind CSS class, the `div` now uses the `--surface-2` CSS variable (defined for dark mode) for its background color when dark mode is active, while retaining `bg-white` for light mode.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"bg-white dark:bg-[var(--surface-2)] p-4\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Resolving exports with custom conditions using resolve.exports - JavaScript\nDESCRIPTION: Demonstrates how to configure and invoke resolve.exports with various custom conditions to determine which file path is matched from the package's exports map. No dependencies beyond resolve.exports and a JavaScript object representing the package. Inputs include the package object, the entry path (typically '.'), and an optional options object specifying conditions or require semantics. Outputs are arrays of selected entry file paths; priority is determined by the key order in \"exports\". Constraints: the options.conditions list has its order ignored during matching.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve.exports/readme.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst pkg = {\n  // package.json ...\n  \"exports\": {\n    \"worker\": \"./$worker.js\",\n    \"require\": \"./$require.js\",\n    \"production\": \"./$production.js\",\n    \"import\": \"./$import.mjs\",\n  }\n};\n\nresolve.exports(pkg, '.');\n// Conditions: [\"default\", \"import\", \"node\"]\n//=> [\"./$import.mjs\"]\n\nresolve.exports(pkg, '.', {\n  conditions: ['production']\n});\n// Conditions: [\"default\", \"production\", \"import\", \"node\"]\n//=> [\"./$production.js\"]\n\nresolve.exports(pkg, '.', {\n  conditions: ['production'],\n  require: true,\n});\n// Conditions: [\"default\", \"production\", \"require\", \"node\"]\n//=> [\"./$require.js\"]\n\nresolve.exports(pkg, '.', {\n  conditions: ['production', 'worker'],\n  require: true,\n});\n// Conditions: [\"default\", \"production\", \"worker\", \"require\", \"node\"]\n//=> [\"./$worker.js\"]\n\nresolve.exports(pkg, '.', {\n  conditions: ['production', 'worker']\n});\n// Conditions: [\"default\", \"production\", \"worker\", \"import\", \"node\"]\n//=> [\"./$worker.js\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Mascot Control Functions API in TypeScript\nDESCRIPTION: This TypeScript snippet details the function signatures for controlling the mascot, accessible through the `useMicroInteractions` hook. It includes `showMascot`, which accepts a `message` string and an optional `position` literal type ('bottom-right', 'top-right', etc.), and `hideMascot`, which takes no arguments and dismisses the mascot.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nshowMascot: (message: string, position?: 'bottom-right' | 'top-right' | 'bottom-left' | 'top-left') => void;\nhideMascot: () => void;\n```\n\n----------------------------------------\n\nTITLE: Comparing String Arrays with diffLinesUnified() in JavaScript\nDESCRIPTION: Shows how to use `diffLinesUnified` to compare two arrays of strings line-by-line using `diff-sequences`. This is useful when strings are already split into lines and character-level diffs within lines are not required. It formats the output using `chalk`. Requires `jest-diff`. Input: two arrays of strings (`aLines`, `bLines`). Output: a unified difference string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst aLines = ['delete', 'common', 'changed from'];\nconst bLines = ['common', 'changed to', 'insert'];\n\nconst difference = diffLinesUnified(aLines, bLines);\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory Recursively with make-dir - JavaScript\nDESCRIPTION: Illustrates using the make-dir library to create a nested directory structure asynchronously in Node.js. Utilizes the async/await pattern to call makeDir with a path string. Upon execution, it logs the full path of the created directory. Requires the make-dir npm package and Node.js 10.12.0 or newer (for native recursive support in fs.mkdir).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst makeDir = require('make-dir');\n\n(async () => {\n\tconst path = await makeDir('unicorn/rainbow/cake');\n\n\tconsole.log(path);\n\t//=> '/Users/sindresorhus/fun/unicorn/rainbow/cake'\n})();\n```\n\n----------------------------------------\n\nTITLE: Using ts-node Loader Directly with Node CLI (Shell)\nDESCRIPTION: Shell command illustrating how to invoke Node.js directly with the ts-node ESM loader (`--loader ts-node/esm`) and potentially other Node.js flags like `--inspect`. This avoids using the `NODE_OPTIONS` environment variable for cases where only a single command needs ts-node ESM support.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnode --loader ts-node/esm --inspect ./index.ts\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Mode Background Classes in React Components (TSX)\nDESCRIPTION: Shows the 'Before' and 'After' code for applying dark mode background styling to a `div` element using Tailwind CSS. The 'Before' version uses a hardcoded `bg-white`, while the 'After' version adds the `dark:bg-[var(--surface-2)]` utility class. This ensures the background color adapts correctly in dark mode by referencing a CSS variable (`--surface-2`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<div className=\"bg-white p-4\">...</div>\n\n// After\n<div className=\"bg-white dark:bg-[var(--surface-2)] p-4\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Installing yargs Type Definitions Using npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @types/yargs package using npm, which provides TypeScript type definitions for the yargs library. The '--save' flag ensures the type package is added to the project's dependencies. Requires npm and a Node.js project with package.json; may also require @types/yargs-parser as an additional dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/yargs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/yargs\n```\n\n----------------------------------------\n\nTITLE: Installing jest-worker via yarn - Shell\nDESCRIPTION: This shell command installs the jest-worker package as a dependency using yarn. Ensure you have yarn installed and run this command in the root directory of your Node.js project. This is a prerequisite for utilizing jest-worker in the example JavaScript files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add jest-worker\n```\n\n----------------------------------------\n\nTITLE: Installing jest-matcher-utils using Yarn\nDESCRIPTION: This shell command uses the Yarn package manager to download and install the `jest-matcher-utils` package, adding it as a dependency to the current project and updating the `yarn.lock` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-matcher-utils/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add jest-matcher-utils\n```\n\n----------------------------------------\n\nTITLE: Compiling CoffeeScript with Source Maps - Shell\nDESCRIPTION: Compiles demo.coffee to JavaScript with source maps enabled, using the CoffeeScript compiler's --map and --compile flags. Prepares files needed for running the CoffeeScript demo and observing remapped stack traces.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnode_modules/.bin/coffee --map --compile demo.coffee\n```\n\n----------------------------------------\n\nTITLE: Installing shebang-command via npm (Shell)\nDESCRIPTION: Installs the 'shebang-command' package using the Node Package Manager (npm). This command downloads and adds the package to your project's dependencies. Requires npm to be installed and available in the shell environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/shebang-command/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install shebang-command\n```\n\n----------------------------------------\n\nTITLE: Testing env Compatibility with -S Flag (Shell)\nDESCRIPTION: Shell command to test if the system's `env` command supports the `-S` flag, which is required for passing arguments within a shebang line as shown in the previous example. Uses the `--debug` flag of `env` and specific quoting to correctly pass the arguments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Note that these unusual quotes are necessary\n/usr/bin/env --debug '-S echo foo bar'\n```\n\n----------------------------------------\n\nTITLE: Overwriting Arrays with arrayMerge Option in deepmerge (JavaScript)\nDESCRIPTION: This example shows how to customize the array merging behavior of deepmerge by providing an arrayMerge function that fully overwrites arrays instead of concatenating them. The overwriteMerge function always returns the source array, replacing the target. Pass the function as the arrayMerge option when calling merge. Suitable when you want arrays to behave like scalar replacements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst overwriteMerge = (destinationArray, sourceArray, options) => sourceArray\n\nmerge(\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t{ arrayMerge: overwriteMerge }\n) // => [3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Applying Animations with Framer Motion Component\nDESCRIPTION: Illustrates the usage of the `<motion.div>` component from Framer Motion. By wrapping elements with this component, developers can apply various animations like fade-ins or slide-ups using props like `initial`, `animate`, and `exit`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<motion.div>\n```\n\n----------------------------------------\n\nTITLE: Installing color-convert via npm\nDESCRIPTION: Provides the command-line instruction for installing the `color-convert` library using the Node Package Manager (npm). This command downloads and installs the package into the user's Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/color-convert/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ npm install color-convert\n```\n\n----------------------------------------\n\nTITLE: Specifying Connect Dependency Version Range in JSON\nDESCRIPTION: Example of a dependency declaration, likely from a package.json file, specifying that the project requires a version of the 'connect' middleware framework greater than or equal to 0.5.0 and strictly less than 1.0.0. This was relevant for Express version 1.0.8.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n\"connect\": \">= 0.5.0 < 1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Source Map Support via CLI (Register)\nDESCRIPTION: Command-line example demonstrating how to run a Node.js script (`compiled.js`) with source map support enabled by pre-loading the `register` module using the `-r` flag. This automatically installs the source map handler.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode -r @cspotcode/source-map-support/register compiled.js\n```\n\n----------------------------------------\n\nTITLE: Installing yocto-queue Package - Shell\nDESCRIPTION: Demonstrates how to install the yocto-queue package via npm. Run this command in your terminal or shell inside your Node.js project directory. This step is a prerequisite for importing and using the yocto-queue package in JavaScript code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yocto-queue/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install yocto-queue\n```\n\n----------------------------------------\n\nTITLE: Setting Up BunserBuf for Asynchronous Decoding - JavaScript\nDESCRIPTION: Creates an instance of 'bser.BunserBuf' for asynchronous incremental decoding, allowing data to be appended and emitting completed values via the 'value' event. Intended for streaming scenarios such as reading from sockets or file streams. A listener is attached to react to each decoded object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bser/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar bunser = new bser.BunserBuf();\n\nbunser.on('value', function(obj) {\n  console.log(obj);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ttypescript with a Custom Transformer in tsconfig.json - JSONC\nDESCRIPTION: This snippet configures ts-node to use ttypescript as the TypeScript compiler and applies a custom transformer using the plugins field. It demonstrates how to integrate ttypescript or ts-patch with transformer plugins such as ts-transformer-keys, which extend TypeScript with additional features. ttypescript or ts-patch must be installed, and any specified transformers must be compatible.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_30\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"ts-node\": {\\n    // This can be omitted when using ts-patch\\n    \"compiler\": \"ttypescript\"\\n  },\\n  \"compilerOptions\": {\\n    // plugin configuration is the same for both ts-patch and ttypescript\\n    \"plugins\": [\\n      { \"transform\": \"ts-transformer-keys/transformer\" }\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Protected AI API Endpoints for Roleplay Generation - Express Route Middleware TypeScript\nDESCRIPTION: Sets up AI-related Express routes requiring user authentication and a request body. Provides a sample '/api/ai/generate-roleplay' POST endpoint which validates parameters before invoking the Azure OpenAI roleplay generation function. Middleware ensures users are authenticated via Passport before invoking service logic. Assumes Express, route protection middleware, and OpenAI service functions are available. Errors are returned as JSON and relevant inputs include instructionalArea, performanceIndicators, difficultyLevel, and optionally businessType in the request body.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// server/routes/aiRoutes.ts\nimport { Express, Request, Response } from \"express\";\nimport { generateRoleplay, generateTestQuestions } from \"../services/azureOpenai\";\nimport { db } from \"../db\";\nimport { users } from \"../../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport function setupAIRoutes(app: Express) {\n  // Check if user is authenticated\n  function isAuthenticated(req: Request, res: Response, next: Function) {\n    if (req.isAuthenticated()) {\n      return next();\n    }\n    res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  // AI status endpoint\n  app.get(\"/api/ai/status\", async (req, res) => {\n    try {\n      // Implementation to check Azure OpenAI status\n      res.json({ status: \"operational\" });\n    } catch (error) {\n      res.status(500).json({ status: \"unavailable\", error: String(error) });\n    }\n  });\n\n  // Generate roleplay endpoint\n  app.post(\"/api/ai/generate-roleplay\", isAuthenticated, async (req, res) => {\n    try {\n      const { instructionalArea, performanceIndicators, difficultyLevel, businessType } = req.body;\n      \n      if (!instructionalArea || !performanceIndicators || !difficultyLevel) {\n        return res.status(400).json({ error: \"Missing required parameters\" });\n      }\n      \n      // Check user subscription limits\n      // Implementation for subscription checks\n      \n      const roleplay = await generateRoleplay({\n        instructionalArea,\n        performanceIndicators: Array.isArray(performanceIndicators) ? performanceIndicators : [performanceIndicators],\n        difficultyLevel,\n        businessType\n      });\n      \n```\n\n----------------------------------------\n\nTITLE: Requiring and Using fs.realpath (Async, Sync, Monkeypatch) in Node.js JavaScript\nDESCRIPTION: This code snippet demonstrates how to import (require) the fs.realpath module and utilize its asynchronous and synchronous methods for resolving file paths that may have symlink loops or platform-specific issues. It also covers optional monkeypatching to override the built-in fs.realpath/fs.realpathSync methods and undoing that change. Dependencies: Node.js and the fs.realpath npm module. Key parameters include the file path to resolve and a callback function for async use. Expected input is a potentially problematic path, and output is the absolute, resolved real path string or an error handled appropriately.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fs.realpath/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar rp = require('fs.realpath')\n\n// async version\nrp.realpath(someLongAndLoopingPath, function (er, real) {\n  // the ELOOP was handled, but it was a bit slower\n})\n\n// sync version\nvar real = rp.realpathSync(someLongAndLoopingPath)\n\n// monkeypatch at your own risk!\n// This replaces the fs.realpath/fs.realpathSync builtins\nrp.monkeypatch()\n\n// un-do the monkeypatching\nrp.unmonkeypatch()\n```\n\n----------------------------------------\n\nTITLE: Using debug in a Worker Module in Node.js JavaScript\nDESCRIPTION: Shows a minimal worker module setup where 'debug' is used for periodic logging at 1-second intervals. Requires the 'debug' package; depends on Node.js timers. No external inputs, just logs the message periodically if the DEBUG filter matches 'worker'. Useful for background tasks or job processing modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Using getTsconfig Function for tsconfig Discovery\nDESCRIPTION: Provides examples of how to use the `getTsconfig` function from the `get-tsconfig` library to find and parse a TypeScript configuration file. It demonstrates searching from the current directory, using a source file path to locate the relevant config, searching from a directory path, explicitly providing the config file path, and searching for an alternative config file name like `jsconfig.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTsconfig } from 'get-tsconfig'\n\n// Searches for tsconfig.json starting in the current directory\nconsole.log(getTsconfig())\n\n// Find tsconfig.json from a TypeScript file path\nconsole.log(getTsconfig('./path/to/index.ts'))\n\n// Find tsconfig.json from a directory file path\nconsole.log(getTsconfig('./path/to/directory'))\n\n// Explicitly pass in tsconfig.json path\nconsole.log(getTsconfig('./path/to/tsconfig.json'))\n\n// Search for jsconfig.json - https://code.visualstudio.com/docs/languages/jsconfig\nconsole.log(getTsconfig('.', 'jsconfig.json'))\n```\n\n----------------------------------------\n\nTITLE: Wrapping Callback Functions with wrappy in JavaScript\nDESCRIPTION: Demonstrates how to use the wrappy library to create a callback wrapper that ensures a target function executes at most once. It begins by requiring the wrappy module, defines a wrapper function that tracks invocation state, and then applies it to a sample function with attached properties. The wrapped function is shown to execute only the first time it is called, and any custom properties from the original function are retained. This pattern requires Node.js and the wrappy package (installed via npm), and is useful for avoiding accidental multiple executions of callbacks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/wrappy/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar wrappy = require(\"wrappy\")\n\n// var wrapper = wrappy(wrapperFunction)\n\n// make sure a cb is called only once\n// See also: http://npm.im/once for this specific use case\nvar once = wrappy(function (cb) {\n  var called = false\n  return function () {\n    if (called) return\n    called = true\n    return cb.apply(this, arguments)\n  }\n})\n\nfunction printBoo () {\n  console.log('boo')\n}\n// has some rando property\nprintBoo.iAmBooPrinter = true\n\nvar onlyPrintOnce = once(printBoo)\n\nonlyPrintOnce() // prints 'boo'\nonlyPrintOnce() // does nothing\n\n// random property is retained!\nassert.equal(onlyPrintOnce.iAmBooPrinter, true)\n```\n\n----------------------------------------\n\nTITLE: Loading NYC Configuration with @istanbuljs/load-nyc-config in JavaScript\nDESCRIPTION: Shows how to import the loadNycConfig function from @istanbuljs/load-nyc-config and invoke it asynchronously to get the effective NYC configuration. This requires the @istanbuljs/load-nyc-config package to be installed. The snippet demonstrates logging the loaded configuration using Node.js async/await syntax, and assumes you are running in a Node.js environment. Outputs the loaded configuration object to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@istanbuljs/load-nyc-config/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {loadNycConfig} = require('@istanbuljs/load-nyc-config');\\n\\n(async () {\\n  console.log(await loadNycConfig());\\n})();\n```\n\n----------------------------------------\n\nTITLE: Enabling ts-node Globally via NODE_OPTIONS (ESM) (Shell)\nDESCRIPTION: Sets the `NODE_OPTIONS` environment variable to include `--loader ts-node/esm`. This forces any Node.js process launched in this environment to use `ts-node`'s native ECMAScript module loader, enabling TypeScript execution support with ESM features for that process and potentially its child processes or worker threads.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nNODE_OPTIONS=\"--loader ts-node/esm\"\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Light Mode Box Appearance in Dark Mode (JSX)\nDESCRIPTION: Demonstrates the code change in `client/src/pages/settings.tsx` to correct the light mode preview box. The 'Before' snippet shows the problematic `dark:bg-white` class, while the 'After' snippet shows its removal, ensuring the div always uses `bg-white` regardless of the mode. Relies on Tailwind CSS classes and React state (`appearance`, `setAppearance`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\n<div \n  className={`border ${appearance.theme === \"light\" ? 'border-primary ring-2 ring-primary/30' : 'border-slate-200 dark:border-[var(--dark-border)]'} rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white dark:bg-white`}\n  onClick={() => setAppearance(prev => ({...prev, theme: \"light\"}))}\n>\n  ...\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// After\n<div \n  className={`border ${appearance.theme === \"light\" ? 'border-primary ring-2 ring-primary/30' : 'border-slate-200 dark:border-[var(--dark-border)]'} rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white`}\n  onClick={() => setAppearance(prev => ({...prev, theme: \"light\"}))}\n>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Deprecating an Entire Function using deprecate.function (JavaScript)\nDESCRIPTION: Demonstrates using `deprecate.function(fn, [message])` to wrap an existing function. A deprecation warning will be issued on every call to the wrapped function. The message can be automatically derived from the function name or provided explicitly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n----------------------------------------\n\nTITLE: Installing mime-db via NPM in Bash\nDESCRIPTION: This Bash snippet installs the mime-db package from the npm registry, making the JSON database of MIME types available for development use. It requires that Node.js and npm are installed on the system. Upon execution, it downloads the library and its dependencies, preparing it for use in Node.js projects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-db/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mime-db\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern Associated with Alphabetic Sequence Brace Expansion in JavaScript\nDESCRIPTION: Provides the regular expression `/^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/` which precedes the description of alphabetic sequence patterns like `{a..z[..incr]}` in the documentation. The library supports alphabetic sequences where start/end points must be single characters and the optional increment must be numeric.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/brace-expansion/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/\n// {x..y[..incr]}\n```\n\n----------------------------------------\n\nTITLE: Installing JSON5 Globally for CLI Use via npm\nDESCRIPTION: This shell command globally installs JSON5 via npm, making the 'json5' CLI tool available system-wide for converting and validating JSON5 files. Node.js and npm must be pre-installed. The CLI can be invoked as 'json5' from the terminal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global json5\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Human-Readable Short Format with ms in JavaScript\nDESCRIPTION: This snippet shows how to convert raw millisecond values into concise, human-readable strings with time units such as '1m' or '-3m'. The 'ms' function is called with number arguments and optionally the result of another 'ms' call. Requires the 'ms' npm package. Inputs are numeric millisecond values; outputs are strings denoting duration in the shortest format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/ms/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for strip-json-comments\nDESCRIPTION: This shell command executes the benchmark script associated with the `strip-json-comments` package. This typically requires having the package's development dependencies installed and running the command from the package's root directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-json-comments/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run bench\n```\n\n----------------------------------------\n\nTITLE: Parsing For-Await Statements with Async Generators Plugin (JavaScript)\nDESCRIPTION: Illustrates the `for await...of` loop syntax, part of the Stage 2 TC39 proposal for async iteration. This syntax is used to iterate over asynchronous iterables (like those produced by async generators). Parsing this syntax requires enabling the `asyncGenerators` plugin in Babylon.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_49\n\nLANGUAGE: js\nCODE:\n```\nasync function f() {\n  for await (let x of y);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Client and Server Dependencies using Bash\nDESCRIPTION: This Bash script provides commands to install necessary Node.js dependencies for both the client and server parts of the application using `npm install`. Client dependencies include libraries for animations (`canvas-confetti`), PWA (`workbox-window`), styling (`tailwindcss`, `postcss`, `autoprefixer`), data visualization (`react-chartjs-2`, `chart.js`), and testing (`vitest`). Server dependencies include packages for authentication (`passport`, `passport-local`, `express-session`), Stripe integration (`stripe`), and Azure OpenAI (`@azure/openai`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n# client\ncd client\nnpm install canvas-confetti workbox-window # animations & PWA\nnpm install tailwindcss postcss autoprefixer # or confirm these are present\nnpm install react-chartjs-2 chart.js # if using Chart.js for data viz\nnpm install vitest @types/jest # or your test framework\n# ...\n\n# server\ncd server\nnpm install passport passport-local express-session\nnpm install stripe\nnpm install @azure/openai\n```\n\n----------------------------------------\n\nTITLE: Moving from prerelease to release version using semver CLI\nDESCRIPTION: Shows how to transition a prerelease version (e.g., `1.2.4-beta.1`) to its corresponding stable release version (`1.2.4`) using the `semver` CLI with the `-i release` flag. This effectively removes the prerelease identifier.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.4-beta.1 -i release\n1.2.4\n```\n\n----------------------------------------\n\nTITLE: Running Tape Tests with ts-node (Shell)\nDESCRIPTION: Executes Tape tests by running the Tape CLI tool (`node_modules/tape/bin/tape`) via `ts-node`. This allows Tape to execute TypeScript test files directly. Additional arguments (`[...args]`) can be passed to Tape.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nts-node node_modules/tape/bin/tape [...args]\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Arrays by Index with arrayMerge in deepmerge (JavaScript)\nDESCRIPTION: This snippet creates a custom arrayMerge function, combineMerge, which merges arrays so that objects in matching indices are deeply merged instead of simply concatenated or overwritten. Non-object items from the source are appended only if not present in the target. The function is passed as the arrayMerge option to merge for fine control over merging array elements. Useful for scenarios where arrays of objects need to preserve pairing by index.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst combineMerge = (target, source, options) => {\n\tconst destination = target.slice()\n\n\tsource.forEach((item, index) => {\n\t\tif (typeof destination[index] === 'undefined') {\n\t\t\tdestination[index] = options.cloneUnlessOtherwiseSpecified(item, options)\n\t\t} else if (options.isMergeableObject(item)) {\n\t\t\tdestination[index] = merge(target[index], item, options)\n\t\t} else if (target.indexOf(item) === -1) {\n\t\t\tdestination.push(item)\n\t\t}\n\t})\n\treturn destination\n}\n\nmerge(\n\t[{ a: true }],\n\t[{ b: true }, 'ah yup'],\n\t{ arrayMerge: combineMerge }\n) // => [{ a: true, b: true }, 'ah yup']\n```\n\n----------------------------------------\n\nTITLE: Configuring AVA with ts-node for Native ESM Projects (JSONC)\nDESCRIPTION: Configures AVA in `package.json` to handle `.ts` files as native ECMAScript modules. It requires enabling the `configurableModuleFormat` experiment, setting the `.ts` extension type to `module`, and adding `ts-node/esm` as a Node.js loader via `nodeArguments`. This configuration is necessary for projects using `\\\"type\\\": \\\"module\\\"` in their `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_34\n\nLANGUAGE: jsonc\nCODE:\n```\n```jsonc title=\"package.json\"\n{\n  \"ava\": {\n    \"extensions\": {\n      \"ts\": \"module\"\n    },\n    \"nonSemVerExperiments\": {\n      \"configurableModuleFormat\": true\n    },\n    \"nodeArguments\": [\n      \"--loader=ts-node/esm\"\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Express Route for Azure OpenAI Roleplay Generation in TypeScript\nDESCRIPTION: This TypeScript snippet defines an Express router for handling roleplay generation requests. It imports the `generateRoleplayScenario` service function and sets up a POST route at `/generate-roleplay`. Upon receiving a request with `eventCode` and `performanceIndicators` in the body, it calls the service function and returns the generated scenario in the JSON response, or a 500 error if the service call fails.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// server/routes/roleplayRoutes.ts\nimport express from 'express';\nimport { generateRoleplayScenario } from '../services/azureOpenai';\n\nconst router = express.Router();\n\nrouter.post('/generate-roleplay', async (req, res) => {\n  const { eventCode, performanceIndicators } = req.body;\n  try {\n    const scenario = await generateRoleplayScenario(eventCode, performanceIndicators);\n    res.json({ scenario });\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Filtering Object Keys Using matchKeys in Micromatch (JavaScript)\nDESCRIPTION: Shows how to filter an object's keys using glob patterns via mm.matchKeys, providing the resulting filtered object. Inputs are an object and a glob pattern, and the output is an object of matching key-value pairs. Assumes micromatch loaded as 'mm'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst mm = require('micromatch');\n// mm.matchKeys(object, patterns[, options]);\n\nconst obj = { aa: 'a', ab: 'b', ac: 'c' };\nconsole.log(mm.matchKeys(obj, '*b'));\n//=> { ab: 'b' }\n```\n\n----------------------------------------\n\nTITLE: Matching Balanced Delimiters with balanced-match in JavaScript\nDESCRIPTION: Demonstrates importing the 'balanced-match' library, then calling it to find balanced pairs of curly braces in given strings, including both direct string delimiters and regular expression delimiters. Each call returns the position and contents around the matched delimiters. Requires installation of the 'balanced-match' npm package. Input parameters are the opening delimiter, closing delimiter, and target string; outputs an object with start, end, pre, body, and post properties, or undefined if no match is found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/balanced-match/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar balanced = require('balanced-match');\n\nconsole.log(balanced('{', '}', 'pre{in{nested}}post'));\nconsole.log(balanced('{', '}', 'pre{first}between{second}post'));\nconsole.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre  {   in{nest}   }  post'));\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease versions with base identifier via semver CLI (Bash)\nDESCRIPTION: Demonstrates using the `-n 1` flag with the `semver` command-line tool during prerelease increment (`-i prerelease --preid beta`) to start the prerelease number sequence at 1 instead of the default 0. Outputs `1.2.4-beta.1`. Requires the `semver` command-line tool.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta -n 1\n1.2.4-beta.1\n```\n\n----------------------------------------\n\nTITLE: Scanning a Glob Pattern with picomatch.scan (JavaScript)\nDESCRIPTION: Shows how to use the `picomatch.scan` method to break down a glob pattern (`!./foo/*.js`) into its constituent parts. The method returns an object detailing properties like prefix, base directory, the glob part, and flags indicating features like negation or globstar presence. The example output is included as a comment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\n// picomatch.scan(input[, options]);\n\nconst result = picomatch.scan('!./foo/*.js');\nconsole.log(result);\n/*\n{ prefix: '!./',\n  input: '!./foo/*.js',\n  start: 3,\n  base: 'foo',\n  glob: '*.js',\n  isBrace: false,\n  isBracket: false,\n  isGlob: true,\n  isExtglob: false,\n  isGlobstar: false,\n  negated: true }\n*/\n```\n\n----------------------------------------\n\nTITLE: Compiling with TypeScript importHelpers Option - Shell\nDESCRIPTION: Demonstrates using the TypeScript compiler with the --importHelpers flag from the command line. This enables reference to tslib for helper functions in the compilation output. Prerequisite: tsc installed (via npm or globally). Output: Emitted JavaScript referencing tslib.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ntsc --importHelpers file.ts\n\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with npm - Shell\nDESCRIPTION: Provides shell commands for installing different versions of tslib via npm, depending on the TypeScript version in use. These commands should be run in the project directory before building. Output: adds tslib as a dependency in the node_modules folder (and package.json). Prerequisite: Node.js and npm installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# TypeScript 3.9.2 or later\nnpm install tslib\n\n# TypeScript 3.8.4 or earlier\nnpm install tslib@^1\n\n# TypeScript 2.3.2 or earlier\nnpm install tslib@1.6.1\n\n```\n\n----------------------------------------\n\nTITLE: Clearing a Simulated Interval with FakeTimers - JavaScript\nDESCRIPTION: Cancels a repeating interval timer using 'clock.clearInterval', given its ID or timer object as created by setInterval. Ensures no more interval callbacks are executed for the provided ID.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclock.clearInterval(id)\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Minimatch Class in JavaScript\nDESCRIPTION: Shows how to import and create an instance of the `Minimatch` class directly. This provides access to class properties (like pattern, options, set, regexp) and methods (like makeRe, match) for more complex or stateful matching scenarios, using a specific pattern and options. Requires the `minimatch` npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/minimatch/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Minimatch = require(\"minimatch\").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n----------------------------------------\n\nTITLE: Updating Values Using JSON Pointers with TypeBox ValuePointer in TypeScript\nDESCRIPTION: Shows how to use `ValuePointer.Set` from the `@sinclair/typebox/value` module to perform mutable updates on an existing object (`A`) using RFC6901 JSON Pointers. Each `Set` call modifies the object `A` directly by setting the value at the specified path.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { ValuePointer } from '@sinclair/typebox/value'\n\nconst A = { x: 0, y: 0, z: 0 }\n\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\n\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\n\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Client in Python\nDESCRIPTION: This Python code configures the openai library for Azure use by setting api_type, api_base (endpoint), api_key, and api_version, all from environment variables or direct assignment. It prepares the library for any OpenAI API call, in particular ensuring that requests are sent to Azure OpenAI’s instances. Dependencies: openai package. Required env variables: AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_KEY.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742634542296.txt#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport openai\\nopenai.api_type = \"azure\"\\nopenai.api_base = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\\nopenai.api_version = \"2024-05-01-preview\"  # or the version your resource requires\\nopenai.api_key = os.getenv(\"AZURE_OPENAI_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Short Time Strings using ms in JavaScript\nDESCRIPTION: Demonstrates using the `ms` JavaScript function to convert numerical millisecond values into human-readable time strings with abbreviated units (e.g., 60000 becomes \"1m\"). It also shows handling negative values and converting the result of another `ms` call.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/ms/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n----------------------------------------\n\nTITLE: Matching IP Address Using parseCIDR - JavaScript\nDESCRIPTION: Shows the use of match method combined with parseCIDR to check if an IPv6 address is within a specified CIDR block. This pattern is useful for integrating address-parsing and subnet matching in network applications. Returns boolean result.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"2001:db8:1234::1\");\n\naddr.match(ipaddr.parseCIDR(\"2001:db8::/32\")); // => true\n```\n\n----------------------------------------\n\nTITLE: Generating a Source Map with SourceNode in JavaScript\nDESCRIPTION: Illustrates generating a source map using the `SourceNode` class, which provides a higher-level abstraction. It shows how to build a tree of nodes representing the code and its source mappings, and then generate both the code and the corresponding source map using `toStringWithSourceMap`. Assumes a `parse` function exists to create an AST.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction compile(ast) {\n  switch (ast.type) {\n  case 'BinaryExpression':\n    return new SourceNode(\n      ast.location.line,\n      ast.location.column,\n      ast.location.source,\n      [compile(ast.left), \" + \", compile(ast.right)]\n    );\n  case 'Literal':\n    return new SourceNode(\n      ast.location.line,\n      ast.location.column,\n      ast.location.source,\n      String(ast.value)\n    );\n  // ...\n  default:\n    throw new Error(\"Bad AST\");\n  }\n}\n\nvar ast = parse(\"40 + 2\", \"add.js\");\nconsole.log(compile(ast).toStringWithSourceMap({\n  file: 'add.js'\n}));\n// { code: '40 + 2',\n//   map: [object SourceMapGenerator] }\n```\n\n----------------------------------------\n\nTITLE: Exiting Prerelease Phase via CLI (Bash)\nDESCRIPTION: Illustrates how to transition a prerelease version ('1.2.4-beta.1') to its corresponding release version ('1.2.4') using the `semver` CLI with the `-i release` option.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.4-beta.1 -i release\n1.2.4\n```\n\n----------------------------------------\n\nTITLE: Exporting Status Code Message Map (JavaScript)\nDESCRIPTION: Represents the current export name `message` introduced in v2.0.0, replacing the older `STATUS_CODES`. This exports an object mapping numeric HTTP status codes to their corresponding standard reason phrases (messages).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmessage\n```\n\n----------------------------------------\n\nTITLE: Importing specific semver modules/functions in Node.js (JavaScript)\nDESCRIPTION: Illustrates how to import either the entire `semver` API or individual classes (like `SemVer`, `Comparator`, `Range`) and functions (like `parse`, `valid`, `compare`, `satisfies`) directly to potentially reduce the application's footprint. This allows developers to pick and choose only the necessary parts of the library. Requires the `semver` package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// load the whole API at once in a single object\nconst semver = require('semver')\n\n// or just load the bits you need\n// all of them listed here, just pick and choose what you want\n\n// classes\nconst SemVer = require('semver/classes/semver')\nconst Comparator = require('semver/classes/comparator')\nconst Range = require('semver/classes/range')\n\n// functions for working with versions\nconst semverParse = require('semver/functions/parse')\nconst semverValid = require('semver/functions/valid')\nconst semverClean = require('semver/functions/clean')\nconst semverInc = require('semver/functions/inc')\nconst semverDiff = require('semver/functions/diff')\nconst semverMajor = require('semver/functions/major')\nconst semverMinor = require('semver/functions/minor')\nconst semverPatch = require('semver/functions/patch')\nconst semverPrerelease = require('semver/functions/prerelease')\nconst semverCompare = require('semver/functions/compare')\nconst semverRcompare = require('semver/functions/rcompare')\nconst semverCompareLoose = require('semver/functions/compare-loose')\nconst semverCompareBuild = require('semver/functions/compare-build')\nconst semverSort = require('semver/functions/sort')\nconst semverRsort = require('semver/functions/rsort')\n\n// low-level comparators between versions\nconst semverGt = require('semver/functions/gt')\nconst semverLt = require('semver/functions/lt')\nconst semverEq = require('semver/functions/eq')\nconst semverNeq = require('semver/functions/neq')\nconst semverGte = require('semver/functions/gte')\nconst semverLte = require('semver/functions/lte')\nconst semverCmp = require('semver/functions/cmp')\nconst semverCoerce = require('semver/functions/coerce')\n\n// working with ranges\nconst semverSatisfies = require('semver/functions/satisfies')\nconst semverMaxSatisfying = require('semver/ranges/max-satisfying')\nconst semverMinSatisfying = require('semver/ranges/min-satisfying')\nconst semverToComparators = require('semver/ranges/to-comparators')\nconst semverMinVersion = require('semver/ranges/min-version')\nconst semverValidRange = require('semver/ranges/valid')\nconst semverOutside = require('semver/ranges/outside')\nconst semverGtr = require('semver/ranges/gtr')\nconst semverLtr = require('semver/ranges/ltr')\nconst semverIntersects = require('semver/ranges/intersects')\nconst semverSimplifyRange = require('semver/ranges/simplify')\nconst semverRangeSubset = require('semver/ranges/subset')\n```\n\n----------------------------------------\n\nTITLE: Adding Babel Optional Catch Binding Plugin with yarn - Shell\nDESCRIPTION: This shell snippet installs the @babel/plugin-syntax-optional-catch-binding package as a development dependency using yarn. It requires yarn to be installed and a package.json in the current project. The command fetches and adds the plugin to the devDependencies, enabling subsequent configuration in Babel for optional catch bindings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-optional-catch-binding/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-optional-catch-binding --dev\n```\n\n----------------------------------------\n\nTITLE: Using emoji-regex to Match Emoji in Node.js\nDESCRIPTION: This Node.js example demonstrates how to use the `emoji-regex` package. It requires the module, which exports a function returning the regex (due to the global flag). The code then iterates through a sample text containing various emoji representations, using the regex's `exec` method to find matches and log the matched emoji sequence and its code point length.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emoji-regex/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst emojiRegex = require('emoji-regex');\n// Note: because the regular expression has the global flag set, this module\n// exports a function that returns the regex rather than exporting the regular\n// expression itself, to make it impossible to (accidentally) mutate the\n// original regular expression.\n\nconst text = `\n\\u{231A}: ⌚ default emoji presentation character (Emoji_Presentation)\n\\u{2194}\\u{FE0F}: ↔️ default text presentation character rendered as emoji\n\\u{1F469}: 👩 emoji modifier base (Emoji_Modifier_Base)\n\\u{1F469}\\u{1F3FF}: 👩🏿 emoji modifier base followed by a modifier\n`;\n\nconst regex = emojiRegex();\nlet match;\nwhile (match = regex.exec(text)) {\n  const emoji = match[0];\n  console.log(`Matched sequence ${ emoji } — code points: ${ [...emoji].length }`);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing char-regex via npm (Shell)\nDESCRIPTION: Command to install the `char-regex` package using the Node Package Manager (npm). This makes the library available for use in a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/char-regex/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install char-regex\n```\n\n----------------------------------------\n\nTITLE: Referencing mime-db JSON Directly via CDN in Text\nDESCRIPTION: This text snippet provides a URL for accessing the db.json file of mime-db from jsDelivr CDN, allowing direct retrieval of the MIME types database for browser or client-side use. No dependencies are required other than network access, and it is recommended to use a release tag for stability. The output is raw JSON data representing the MIME type mapping.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-db/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://cdn.jsdelivr.net/gh/jshttp/mime-db@master/db.json\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Namespaced Debuggers in a Worker Module (JavaScript)\nDESCRIPTION: Creates two separate debug instances with nested namespaces ('worker:a' and 'worker:b'). It uses `setTimeout` to simulate asynchronous work and logs messages periodically using the respective debuggers. Depends on the 'debug' library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar a = require('debug')('worker:a')\n  , b = require('debug')('worker:b');\n\nfunction work() {\n  a('doing lots of uninteresting work');\n  setTimeout(work, Math.random() * 1000);\n}\n\nwork();\n\nfunction workb() {\n  b('doing some work');\n  setTimeout(workb, Math.random() * 2000);\n}\n\nworkb();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using lines-and-columns in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to import the LinesAndColumns class from the lines-and-columns package, instantiate it with a multi-line string, and utilize its locationForIndex and indexForLocation methods. The library requires lines-and-columns to be installed and available for import. locationForIndex takes a character offset and returns its corresponding line and column, while indexForLocation does the reverse. Inputs must be a string (for construction), a numerical index, or an object with line and column properties; outputs are either an object with line and column, or a numeric index.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/lines-and-columns/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinesAndColumns } from 'lines-and-columns'\n\nconst lines = new LinesAndColumns(\n  `table {\n  border: 0\n}`\n)\n\nlines.locationForIndex(9)\n// { line: 1, column: 1 }\n\nlines.indexForLocation({ line: 1, column: 2 })\n// 10\n\n```\n\n----------------------------------------\n\nTITLE: Incrementing an existing prerelease version using semver CLI\nDESCRIPTION: Demonstrates how to further increment an existing prerelease version using the `semver` CLI. Running `semver 1.2.4-beta.0 -i prerelease` increments the prerelease number, resulting in '1.2.4-beta.1'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.4-beta.0 -i prerelease\n1.2.4-beta.1\n```\n\n----------------------------------------\n\nTITLE: Casting Values with TypeBox Value.Cast in TypeScript\nDESCRIPTION: Demonstrates using the `Value.Cast` function from TypeBox to convert a given value into a specified TypeBox type (`T`). The function attempts to retain as much information as possible, filling in missing properties with default values (e.g., 0 for numbers) and discarding extra properties if `additionalProperties` is false.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\n\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\n\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\n\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using debug in a Node.js HTTP Server (JavaScript)\nDESCRIPTION: Requires the 'debug' library, creates a namespaced debugger ('http'), and uses it to log messages during application boot and when handling incoming HTTP requests. It depends on the 'http' core module and assumes a separate 'worker.js' file is present.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %o', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Logical Assignment Operators Plugin via yarn - Shell\nDESCRIPTION: This snippet shows how to add the @babel/plugin-syntax-logical-assignment-operators plugin to your project's development dependencies using yarn. Yarn must be properly configured for this project. The plugin adds support for parsing logical assignment operators in JavaScript when using Babel. Input: yarn command; Output: plugin listed in devDependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-logical-assignment-operators/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-logical-assignment-operators --dev\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Settings Interface in TypeScript\nDESCRIPTION: This TypeScript code defines an interface `AccessibilitySettings` specifying the structure for accessibility preferences, including boolean flags for reducing motion, enabling high contrast, and using large text. It also provides a default set of these settings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AccessibilitySettings {\n  reduceMotion: boolean;\n  highContrast: boolean;\n  largeText: boolean;\n  // ...\n}\n\nconst defaultAccessibility: AccessibilitySettings = {\n  reduceMotion: false,\n  highContrast: false,\n  largeText: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Framer Motion for React Animations\nDESCRIPTION: Installs the Framer Motion library using npm. This library provides tools for creating animations and microinteractions within a React application, enhancing the user experience.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install framer-motion\n```\n\n----------------------------------------\n\nTITLE: Importing JSON5 as Module in Browsers via HTML\nDESCRIPTION: In this HTML snippet, JSON5 is imported using the browser's native module support. The <script type=\"module\"> tag loads the ES module variant directly from a CDN, making JSON5 available as an import in the script's scope. Suitable only for browsers with ES module support.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\\\"module\\\">\\n  import JSON5 from 'https://unpkg.com/json5@2/dist/index.min.mjs'\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Parsing a Media Type String using typer.parse - Node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates parsing a media type string using 'typer.parse'. The function extracts the type, subtype, suffix, and parameters into a structured object. It expects a valid media type string as input and returns a lower-case, normalized result for each property. Invalid formats may throw errors; ensure compliance with RFC 6838.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/media-typer/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = typer.parse('image/svg+xml; charset=utf-8')\n```\n\n----------------------------------------\n\nTITLE: Checking Fullwidth Characters using is-fullwidth-code-point in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the 'is-fullwidth-code-point' package. It imports the function, then checks the Unicode code points of two characters ('谢' and 'a') to determine if they are fullwidth, returning true or false accordingly. The package must be installed first.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-fullwidth-code-point/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\n\nisFullwidthCodePoint('谢'.codePointAt(0));\n//=> true\n\nisFullwidthCodePoint('a'.codePointAt(0));\n//=> false\n```\n\n----------------------------------------\n\nTITLE: Ancestor Walk with acorn-walk - JavaScript\nDESCRIPTION: This JavaScript snippet showcases the use of walk.ancestor to traverse an AST while keeping track of an array of ancestor nodes for each visited node. It prints the types of all ancestor nodes for each Literal. Dependencies: acorn and acorn-walk. Requires a source string for parsing. Outputs ancestor type arrays for literals encountered during the walk.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn-walk/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst acorn = require(\"acorn\")\nconst walk = require(\"acorn-walk\")\n\nwalk.ancestor(acorn.parse(\"foo('hi')\"), {\n  Literal(_node, _state, ancestors) {\n    console.log(\"This literal's ancestors are:\", ancestors.map(n => n.type))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Minimal Validation Example (JavaScript)\nDESCRIPTION: This snippet demonstrates the simplest way to use the `validate` function. It passes the user's configuration (`config`) and an object containing only the required `exampleConfig` property to define the expected structure and types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvalidate(config, {exampleConfig});\n```\n\n----------------------------------------\n\nTITLE: Implementing Wave Transition React Component (TSX)\nDESCRIPTION: Defines the `WaveTransition` React functional component, which accepts `WaveTransitionProps`. It defines `framer-motion` variants (`hidden`, `visible`, `exit`) for animating a wave effect, controlling opacity and vertical position (`y`) with specified durations and easing. The component structure itself is incomplete in the provided snippet.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648076558.txt#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction WaveTransition({ targetPosition }: WaveTransitionProps) {\n  // Variants for entrance/exit wave animation\n  const waveVariants: Variants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 1, ease: \"easeOut\" }\n    },\n    exit: { opacity: 0, y: -20, transition: { duration: 1, ease: \" // Note: Code snippet appears incomplete\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Client in TypeScript\nDESCRIPTION: This function initializes and returns an `OpenAIClient` from the `@azure/openai` library. It requires `AZURE_OPENAI_KEY` and `AZURE_OPENAI_ENDPOINT` environment variables to be set, throwing an error if either is missing. It uses `AzureKeyCredential` for authentication.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MASTER_PROMPT.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIClient, AzureKeyCredential } from \"@azure/openai\";\n\nexport function getOpenAIClient(): OpenAIClient {\n  if (!process.env.AZURE_OPENAI_KEY) {\n    throw new Error(\"AZURE_OPENAI_KEY environment variable is required\");\n  }\n  \n  if (!process.env.AZURE_OPENAI_ENDPOINT) {\n    throw new Error(\"AZURE_OPENAI_ENDPOINT environment variable is required\");\n  }\n  \n  const credential = new AzureKeyCredential(process.env.AZURE_OPENAI_KEY);\n  return new OpenAIClient(process.env.AZURE_OPENAI_ENDPOINT, credential);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Retry Recommendation using status.retry[code]\nDESCRIPTION: Demonstrates checking if a specific numeric status code suggests that the client should retry the request using the `status.retry` object (e.g., `status.retry[503]` returns `true`). Returns `undefined` if retry is not recommended or the code is unknown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nstatus.retry[501] // => undefined\nstatus.retry[503] // => true\n```\n\n----------------------------------------\n\nTITLE: Using strip-json-comments in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `strip-json-comments` package. It defines a string containing JSON with comments, processes it using `stripJsonComments()`, and then parses the resulting comment-free string using `JSON.parse()`. Requires the `strip-json-comments` module to be imported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-json-comments/readme.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst json = `{\n\t// Rainbows\n\t\"unicorn\": /* ❤ */ \"cake\"\n}`;\n\nJSON.parse(stripJsonComments(json));\n//=> {unicorn: 'cake'}\n```\n\n----------------------------------------\n\nTITLE: Importing pg-types via Node-Postgres JavaScript\nDESCRIPTION: This snippet shows how to import the types object from the root pg object in the node-postgres library. No dependencies are required except for the pg NPM module. The main result is an accessible types interface that allows custom type parser registration for PostgreSQL data types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-types/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar types = require('pg').types\n```\n\n----------------------------------------\n\nTITLE: Setting embedded source content with SourceMapGenerator - JavaScript\nDESCRIPTION: Uses setSourceContent to add the original source code to a source map for a given source file. Accepts the source's file name and the content (which can be loaded from disk using fs.readFileSync in Node.js). Ensures consumers can later retrieve this content from the source map.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ngenerator.setSourceContent(\"module-one.scm\",\n                           fs.readFileSync(\"path/to/module-one.scm\"))\n```\n\n----------------------------------------\n\nTITLE: Arranging Comic Panels with a Custom Layout Generator\nDESCRIPTION: Employs a custom-built comic layout generator, likely using pre-designed templates, to automatically arrange the AI-generated panels into a structured comic format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_2\n\nLANGUAGE: AI Tool\nCODE:\n```\nCustom Comic Layout Generator\nInput: AI-generated comic panels (from DALL·E 3/MidJourney).\nProcess: Arrange panels using pre-designed layout templates.\nOutput: Structured comic/storyboard.\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Types with TypeBox in TypeScript\nDESCRIPTION: This snippet illustrates how to replicate TypeScript's conditional types (`extends ? :`, `Extract`, `Exclude`) using TypeBox functions (`Type.Extends`, `Type.Extract`, `Type.Exclude`). It shows the direct TypeScript definitions for `T0`, `T1`, and `T2` and their TypeBox equivalents, demonstrating how to achieve the same resulting types (`false`, `number`, `string`) using TypeBox schemas and `Static` inference.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript\n\ntype T0 = string extends number ? true : false       // type T0 = false\n\ntype T1 = Extract<string | number, number>           // type T1 = number\n\ntype T2 = Exclude<string | number, number>           // type T2 = string\n\n// TypeBox\n\nconst T0 = Type.Extends(Type.String(), Type.Number(), Type.Literal(true), Type.Literal(false))\n\nconst T1 = Type.Extract(Type.Union([Type.String(), Type.Number()]), Type.Number())\n\nconst T2 = Type.Exclude(Type.Union([Type.String(), Type.Number()]), Type.Number())\n\n\ntype T0 = Static<typeof T0>                        // type T0 = false\n\ntype T1 = Static<typeof T1>                        // type T1 = number\n\ntype T2 = Static<typeof T2>                        // type T2 = string \n```\n\n----------------------------------------\n\nTITLE: WebSocket Vulnerability: Sending Number with socket.send - JavaScript\nDESCRIPTION: Lists vulnerable WebSocket method calls where passing a number instead of a string or buffer leads to uninitialized memory leaks. These API usages illustrate why input type validation is critical in server-side applications. Applies to environments using the 'ws' npm package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.send(number)\\nsocket.ping(number)\\nsocket.pong(number)\\n\n```\n\n----------------------------------------\n\nTITLE: Using jsesc with 'double' Quotes Option (JavaScript)\nDESCRIPTION: Demonstrates setting the `quotes` option to `'double'`. Double quotes within the input string are escaped (`\\\"`), making the output suitable for embedding within double-quoted JavaScript string literals or JSON.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('`Lorem` ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// → '`Lorem` ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// → \"`Lorem` ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering JSON5 Loader in Node.js (require Hook)\nDESCRIPTION: Requiring 'json5/lib/register' patches Node.js so that .json5 files can be imported directly with require() statements. This allows native require of config files written in JSON5 format. Requires prior installation of JSON5. Modifies module loading resolution for the application's process.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('json5/lib/register')\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Trust for a List of IPs/Subnets in Express.js\nDESCRIPTION: Demonstrates configuring the Express application to trust a comma-separated list of IP addresses or subnets (e.g., '10.0.0.1, 10.0.0.2') using `app.set('trust proxy', '10.0.0.1, 10.0.0.2')`. Mentioned in version 4.3.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', '10.0.0.1, 10.0.0.2')\n```\n\n----------------------------------------\n\nTITLE: Extending 'debug' with Custom Formatters in JavaScript\nDESCRIPTION: Demonstrates how to add custom formatters to the 'debug' library. This example adds a `%h` formatter that converts a Buffer object to its hexadecimal string representation by extending the `createDebug.formatters` object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n----------------------------------------\n\nTITLE: Creating Command-Line UIs with cliui in Deno/ESM (TypeScript)\nDESCRIPTION: Shows how to use cliui with Deno or ESM by importing the module directly from a URL, initializing the layout, and generating output. Dependencies include 'cliui' imported as an ES module from Deno.land. The main parameters are similar to the Node.js example: text, width, and padding per column. The code outputs formatted multi-column CLI text suitable for ESM and Deno applications.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cliui/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cliui from \"https://deno.land/x/cliui/deno.ts\";\n\nconst ui = cliui({})\n\nui.div('Usage: $0 [command] [options]')\n\nui.div({\n  text: 'Options:',\n  padding: [2, 0, 1, 0]\n})\n\nui.div({\n  text: \"-f, --file\",\n  width: 20,\n  padding: [0, 4, 0, 4]\n})\n\nconsole.log(ui.toString())\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocomplete Prompt in JavaScript\nDESCRIPTION: Example configuration for an interactive 'autocomplete' prompt. It defines the prompt type, name, message, and the list of choices available for autocompletion. Users can type to filter options based on their titles. Choices can optionally include a specific `value`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'autocomplete',\n  name: 'value',\n  message: 'Pick your favorite actor',\n  choices: [\n    { title: 'Cage' },\n    { title: 'Clooney', value: 'silver-fox' },\n    { title: 'Gyllenhaal' },\n    { title: 'Gibson' },\n    { title: 'Grant' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Matcher Function with Micromatch in JavaScript\nDESCRIPTION: Illustrates the use of mm.matcher to generate a reusable matching function from a glob pattern, and shows checks for individual strings. The returned function accepts strings and outputs booleans. dependencies include micromatch loaded as 'mm'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst mm = require('micromatch');\n// mm.matcher(pattern[, options]);\n\nconst isMatch = mm.matcher('*.!(*a)');\nconsole.log(isMatch('a.a')); //=> false\nconsole.log(isMatch('a.b')); //=> true\n```\n\n----------------------------------------\n\nTITLE: Enforcing Single Invocation with Once.strict in JavaScript\nDESCRIPTION: Illustrates the use of the 'once.strict' variant, which throws an error if a callback is called more than once. This prevents logical bugs where a callback may accidentally be invoked multiple times, such as in a function missing a required return statement. Dependencies are the 'once' module and normal control flow via callbacks. Inputs are a name and a callback; outputs include appropriate logging and error-throwing behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/once/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet (name, cb) {\\n  // return is missing from the if statement\\n  // when no name is passed, the callback is called twice\\n  if (!name) cb('Hello anonymous')\\n  cb('Hello ' + name)\\n}\\n\\nfunction log (msg) {\\n  console.log(msg)\\n}\\n\\n// this will print 'Hello anonymous' but the logical error will be missed\\ngreet(null, once(msg))\\n\\n// once.strict will print 'Hello anonymous' and throw an error when the callback will be called the second time\\ngreet(null, once.strict(msg))\\n\n```\n\n----------------------------------------\n\nTITLE: Parallel Promise Resolution using Arrays with 'co' in JavaScript\nDESCRIPTION: Demonstrates how `co` resolves multiple Promises concurrently when an array of Promises is yielded. The `yield` expression pauses the generator until all Promises in the array settle. The resolved values are collected into an array, maintaining the original order, which becomes the result of the `yield` expression.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nco(function* () {\\n  var res = yield [\\n    Promise.resolve(1),\\n    Promise.resolve(2),\\n    Promise.resolve(3),\\n  ];\\n  console.log(res); // => [1, 2, 3]\\n}).catch(onerror);\n```\n\n----------------------------------------\n\nTITLE: Clearing a Simulated Immediate with FakeTimers - JavaScript\nDESCRIPTION: Cancels an immediate scheduled by setImmediate using 'clock.clearImmediate'. Accepts the ID or timer object to remove the pending callback before it fires.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclock.clearImmediate(id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embedded Source Content using SourceMapConsumer in JavaScript\nDESCRIPTION: Illustrates the `sourceContentFor` method of `SourceMapConsumer`. It takes the URL of an original source file as an argument and returns its embedded content. If the content is not found, it throws an error by default. Passing `true` as the optional second argument (`returnNullOnMissing`) makes it return `null` instead of throwing an error when content is missing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconsumer.sources\n// [ \"my-cool-lib.clj\" ]\n\nconsumer.sourceContentFor(\"my-cool-lib.clj\")\n// \"...\"\n\nconsumer.sourceContentFor(\"this is not in the source map\");\n// Error: \"this is not in the source map\" is not in the source map\n\nconsumer.sourceContentFor(\"this is not in the source map\", true);\n// null\n```\n\n----------------------------------------\n\nTITLE: Checking if Some Strings Match Patterns with Micromatch in JavaScript\nDESCRIPTION: Demonstrates the `mm.some` function from the 'micromatch' library. It checks if at least one string in the input list matches any of the provided glob patterns. Requires the 'micromatch' library. Takes a list of strings, an array of patterns, and optional options. Returns `true` if any string matches any pattern, `false` otherwise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst mm = require('micromatch');\n// mm.some(list, patterns[, options]);\n\nconsole.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// true\nconsole.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with pure-rand (Pure Method) in JavaScript\nDESCRIPTION: This snippet illustrates the pure functional approach of `pure-rand`. It uses `uniformIntDistribution`, which returns an array containing the generated random value and the *next* random number generator state (`rng2`, `rng3`, `rng4`), leaving the original generator (`rng1`) unchanged. This ensures referential transparency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pure-rand/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport prand from 'pure-rand';\n\nconst seed = 42;\nconst rng1 = prand.xoroshiro128plus(seed);\nconst [firstDiceValue, rng2] = prand.uniformIntDistribution(1, 6, rng1); // value in {1..6}, here: 2\nconst [secondDiceValue, rng3] = prand.uniformIntDistribution(1, 6, rng2); // value in {1..6}, here: 4\nconst [thirdDiceValue, rng4] = prand.uniformIntDistribution(1, 6, rng3); // value in {1..6}, here: 6\n\n// You can call: prand.uniformIntDistribution(1, 6, rng1);\n// over and over it will always give you back the same value along with a new rng (always producing the same values too).\n```\n\n----------------------------------------\n\nTITLE: Parsing Byte Strings to Numbers using bytes.parse - JavaScript\nDESCRIPTION: Demonstrates the use of 'bytes.parse' to convert string byte representations (e.g. '1KB', '1024') into numeric byte values. The parser supports units such as b, kb, mb, gb, tb, and pb (case-insensitive) using binary (powers-of-two) interpretation. Takes a string or number and returns either the numeric byte value or null for invalid input.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bytes/Readme.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js\\nbytes.parse('1KB');\\n// output: 1024\\n\\nbytes.parse('1024');\\n// output: 1024\\n\\nbytes.parse(1024);\\n// output: 1024\\n```\n```\n\n----------------------------------------\n\nTITLE: Wrapping ANSI-Styled Strings with wrap-ansi in JavaScript\nDESCRIPTION: Shows how to import chalk and wrap-ansi, create a styled string with ANSI codes via chalk, and wrap this text to 20 columns. Requires chalk and wrap-ansi npm packages installed. The input string concatenates styled and unstyled substrings; wrapAnsi adjusts the output to ensure it fits the specified width, preserving color and formatting. The wrapped output is printed to the console. No additional configuration is required for basic usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/wrap-ansi/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chalk = require('chalk');\nconst wrapAnsi = require('wrap-ansi');\n\nconst input = 'The quick brown ' + chalk.red('fox jumped over ') +\n\t'the lazy ' + chalk.green('dog and then ran away with the unicorn.');\n\nconsole.log(wrapAnsi(input, 20));\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables and Rules for Dark Mode Backgrounds\nDESCRIPTION: Defines CSS custom properties for dark mode themes (e.g., `--dark-bg-primary`, `--dark-border`) within the `:root` selector. It also provides example CSS rules that apply these variables (referencing `--surface-2` for background) to components like `.card` and `.dropdown-content` specifically when the `.dark` class is present on a parent element, ensuring consistent dark theme styling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --dark-bg-primary: #121212;\n  --dark-border: #3a3a3a;\n  /* etc. */\n}\n\n.dark .card,\n.dark .dropdown-content {\n  background-color: var(--surface-2);\n  border-color: var(--dark-border);\n}\n/* etc. */\n```\n\n----------------------------------------\n\nTITLE: Encoding Redirect URL for HTTP Location Header (JavaScript)\nDESCRIPTION: Demonstrates creating a redirect URL, encoding it with `encodeurl` for safe use in an HTTP `Location` header. It uses Node.js's `url` module to parse and format the URL and `escape-html` for the response body. Requires `encodeurl` and `escape-html` packages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/encodeurl/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\nvar url = require('url')\n\nhttp.createServer(function onRequest (req, res) {\n  // parse inbound url\n  var href = url.parse(req)\n\n  // set new host for redirect\n  href.host = 'localhost'\n  href.protocol = 'https:'\n  href.slashes = true\n\n  // create location header\n  var location = encodeUrl(url.format(href))\n\n  // create html message\n  var body = '<p>Redirecting to new site: ' + escapeHtml(location) + '</p>'\n\n  // send a 301\n  res.statusCode = 301\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\n  res.setHeader('Location', location)\n  res.end(body, 'utf-8')\n})\n```\n\n----------------------------------------\n\nTITLE: Custom onCancel Callback Example - Prompts API - JavaScript\nDESCRIPTION: Provides an example of using the 'onCancel' callback with the prompts API, which is invoked if the user cancels the prompt session. This allows custom logic or messaging when a cancel event happens, and returning true continues prompting. Requires 'prompts' installed and an array of prompts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const questions = [{ ... }];\n  const onCancel = prompt => {\n    console.log('Never stop prompting!');\n    return true;\n  }\n  const response = await prompts(questions, { onCancel });\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Imports Field in package.json (JSON5)\nDESCRIPTION: This snippet outlines how to define the `imports` field in package.json using JSON5 syntax. It maps an import specifier (such as '#supports-color') to different entry points depending on the environment: a Node.js-specific file for 'node' and a browser-specific file for 'default'. This conditional mapping enables platforms to resolve to the appropriate implementation. This structure serves as an input for utilities like resolve-pkg-maps or Node.js's own import resolution logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n    // ...\n    \"imports\": {\n        \"#supports-color\": {\n            \"node\": \"./index.js\",\n            \"default\": \"./browser.js\"\n        }\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding Sequences (Ranges) with braces - JavaScript\nDESCRIPTION: Shows the usage of range/sequence expansion using 'braces', including both number and character ranges and demonstrates zero-padded and large numeric ranges. Outputs either compiled regex strings or full expanded sets depending on method and options. Useful for file pattern matching where ranges are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces.expand('{1..3}')); // ['1', '2', '3']\nconsole.log(braces.expand('a/{1..3}/b')); // ['a/1/b', 'a/2/b', 'a/3/b']\nconsole.log(braces('{a..c}', { expand: true })); // ['a', 'b', 'c']\nconsole.log(braces('foo/{a..c}', { expand: true })); // ['foo/a', 'foo/b', 'foo/c']\n\n// supports zero-padded ranges\nconsole.log(braces('a/{01..03}/b')); //=> ['a/(0[1-3])/b']\nconsole.log(braces('a/{001..300}/b')); //=> ['a/(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)/b']\n```\n\n----------------------------------------\n\nTITLE: Using Nested Namespaces with 'debug' in a Worker Module (JavaScript)\nDESCRIPTION: Example Node.js worker module (worker.js) illustrating the use of nested namespaces ('worker:a', 'worker:b') with the 'debug' library. It defines functions that periodically log messages using their respective debug instances.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar a = require('debug')('worker:a')\n  , b = require('debug')('worker:b');\n\nfunction work() {\n  a('doing lots of uninteresting work');\n  setTimeout(work, Math.random() * 1000);\n}\n\nwork();\n\nfunction workb() {\n  b('doing some work');\n  setTimeout(workb, Math.random() * 2000);\n}\n\nworkb();\n```\n\n----------------------------------------\n\nTITLE: Handling JSONP Edge Case with res.status().jsonp() in Express.js\nDESCRIPTION: Shows the correct method chaining `res.status(status).jsonp(num)` to handle the edge case of sending a JSONP response where the body is a number and a status code needs to be set, following the deprecation in Express 4.2.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nres.status(status).jsonp(num)\n```\n\n----------------------------------------\n\nTITLE: Enabling 'debug' Namespaces in the Browser via localStorage (JavaScript)\nDESCRIPTION: Demonstrates how to enable debug namespaces in a web browser environment by setting the 'localStorage.debug' property. Setting it to 'worker:*' enables all namespaces starting with 'worker:'. Refreshing the page applies the change.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nlocalStorage.debug = 'worker:*'\n```\n\n----------------------------------------\n\nTITLE: Mapping tslib in tsconfig.json for JSPM - JSON\nDESCRIPTION: Provides an example tsconfig.json for mapping tslib in JSPM environments. Sets module type to 'system', enables importHelpers, and points tslib to its JSPM-installed location. Required when using JSPM as a package manager to ensure the compiler resolves tslib correctly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"system\",\n        \"importHelpers\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"tslib\" : [\"jspm_packages/npm/tslib@2.x.y/tslib.d.ts\"]\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Dark Mode Styles into Global CSS\nDESCRIPTION: Shows how to import the `dark-mode-gradients.css` file into the main global CSS file (e.g., `index.css`) using the `@import` rule. This ensures the dark mode CSS variables and styles are loaded and available throughout the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@import './styles/dark-mode-gradients.css';\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with JSPM - Shell\nDESCRIPTION: Provides JSPM commands to install tslib according to the TypeScript version being targeted. These commands require JSPM to be set up and will place tslib in the jspm_packages directory. Useful for projects using JSPM as a module loader.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n# TypeScript 3.9.2 or later\njspm install tslib\n\n# TypeScript 3.8.4 or earlier\njspm install tslib@^1\n\n# TypeScript 2.3.2 or earlier\njspm install tslib@1.6.1\n\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Namespaced Debuggers in Node.js\nDESCRIPTION: Illustrates how to create and use multiple debugger instances with different namespaces ('worker:a', 'worker:b') within a Node.js module. This allows for selective enabling/disabling of debug output for different parts of the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar a = require('debug')('worker:a')\n  , b = require('debug')('worker:b');\n\nfunction work() {\n  a('doing lots of uninteresting work');\n  setTimeout(work, Math.random() * 1000);\n}\n\nwork();\n\nfunction workb() {\n  b('doing some work');\n  setTimeout(workb, Math.random() * 2000);\n}\n\nworkb();\n```\n\n----------------------------------------\n\nTITLE: Installing Micromatch with npm in Shell Script\nDESCRIPTION: Demonstrates installing the Micromatch package using npm in a shell environment. Requires Node.js and npm to be installed on the system. The command adds micromatch as a dependency in the current project's package.json; inputs and outputs are not programmatically handled.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save micromatch\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin with Yarn - Shell\nDESCRIPTION: This shell command adds the @babel/plugin-syntax-import-attributes as a development dependency using yarn. Executing this in a project directory updates yarn.lock and package.json accordingly. No additional configuration options are required in the command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-import-attributes/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-import-attributes --dev\n```\n\n----------------------------------------\n\nTITLE: Using picomatch.test for Regex Matching (JavaScript)\nDESCRIPTION: Shows how to use the `picomatch.test` method to test an input string (`foo/bar`) against a given regular expression. It returns an object containing matching information, including whether it matched (`isMatch`), the capture groups (`match`), and the original input (`output`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\n// picomatch.test(input, regex[, options]);\n\nconsole.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n// { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-class-properties with npm (sh)\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-class-properties` Babel plugin as a development dependency using the npm package manager. The `--save-dev` flag ensures the package is added to the `devDependencies` section of the project's `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-class-properties/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-class-properties\n```\n\n----------------------------------------\n\nTITLE: Formatting Milliseconds to Long Written-Out Time Strings with ms in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the 'ms' function with the option '{ long: true }' to output time durations in fully written-out strings such as '1 minute' or '10 hours'. The code works with both positive and negative durations, and with results from prior 'ms' conversions. Requires the 'ms' npm package. Inputs are numeric millisecond values or conversion results; outputs are descriptive, pluralized duration strings for increased readability.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/ms/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Optional Chaining Example (JavaScript)\nDESCRIPTION: Shows the equivalent JavaScript output for a TypeScript optional chaining expression when targeting ESNext. The constant 'a' receives 'foo.bar' if available, else undefined. This syntax requires modern Node.js support.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = foo?.bar;\n```\n\n----------------------------------------\n\nTITLE: Defining Base Theme Color Variables (CSS)\nDESCRIPTION: This CSS snippet initializes root-level color variables for use by all themed UI elements, supporting the theme controller. Assignments include primary and secondary, accent, badge, and contrast. These variables should be imported or included globally (e.g., in index.css) so all styled components can reference them predictably. Prerequisite: Usage of CSS custom properties and referencing code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --color-primary: #06B6D4;\n  --color-secondary: #67E8F9;\n  --color-accent: #0E7490;\n  --color-light: #ECFEFF;\n  --color-medium: #CFFAFE;\n  --color-dark: #0891B2;\n  --color-contrast: #1F2937;\n  --color-badge: #06B6D4;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Support and TypeScript - Bash\nDESCRIPTION: Installs both source-map-support and typescript via npm, ensuring both are present for subsequent compilation and tests. Required for the TypeScript demo. Must be executed before compiling or running the demo TypeScript code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install source-map-support typescript\n```\n\n----------------------------------------\n\nTITLE: Installing @tsconfig/node10 via npm and yarn in Shell\nDESCRIPTION: These shell commands install the @tsconfig/node10 TypeScript base configuration as a development dependency using npm or yarn. There are no prerequisites except having either npm or yarn installed. The expected input is to run either command in the terminal at the project root, adding @tsconfig/node10 to devDependencies for use in tsconfig extension.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node10/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @tsconfig/node10\nyarn add --dev @tsconfig/node10\n```\n\n----------------------------------------\n\nTITLE: Accessing Style Groups in ansi-styles\nDESCRIPTION: Demonstrates accessing style properties via non-enumerable group properties (e.g., `style.color`, `style.modifier`, `style.bgColor`). This example specifically logs the opening ANSI escape code for green text color. Requires the `ansi-styles` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-styles/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(style.color.green.open);\n```\n\n----------------------------------------\n\nTITLE: Classifying Coverage Percentage in istanbul-reports (JavaScript)\nDESCRIPTION: This `context` method determines an appropriate class (e.g., 'high', 'medium', 'low' coverage) based on a coverage percentage value and the type of coverage being measured (e.g., statements, branches, functions). The returned class is typically used for applying CSS styles in HTML reports. Requires a `context` object, a `type` identifier (string), and a `percent` value (number).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-reports/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.classForPercent(type, percent)\n```\n\n----------------------------------------\n\nTITLE: Querying Request Address with Pre-defined Named Trusts in proxy-addr JavaScript\nDESCRIPTION: Shows use of proxy-addr with pre-defined trust names like 'loopback', which expand internally to trusted IP ranges. Dependencies and parameters are the request object and a string or list of alias names. Output is the resolved address according to these broader definitions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, 'loopback')\n```\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, ['loopback', 'fc00:ac:1ab5:fff::1/64'])\n```\n\n----------------------------------------\n\nTITLE: Custom Flag Handler with arg.flag() in Node.js\nDESCRIPTION: Demonstrates using arg.flag() to enable custom flag behavior in argument parsing. This example is intended for users wanting to extend handling of Boolean-style flags beyond standard true/false, returning custom accumulated strings. Proper use requires the arg library as a dependency and passing a handler function as the type in the specification. The sample output object shows aggregation of occurrences.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst arg = require('arg');\n\nconst argv = ['--foo', 'bar', '-ff', 'baz', '--foo', '--foo', 'qux', '-fff', 'qix'];\n\nfunction myHandler(value, argName, previousValue) {\n\t/* `value` is always `true` */\n\treturn 'na ' + (previousValue || 'batman!');\n}\n\nconst args = arg({\n\t'--foo': arg.flag(myHandler),\n\t'-f': '--foo'\n}, {\n\targv\n});\n\nconsole.log(args);\n/*\n{\n\t_: ['bar', 'baz', 'qux', 'qix'],\n\t'--foo': 'na na na na na na na na batman!'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using brace-expansion for String Expansion in JavaScript\nDESCRIPTION: Demonstrates importing and using the `brace-expansion` library's `expand` function to perform Bash-like brace expansions on strings. Covers comma-separated lists, numeric sequences (including steps, padding, and reverse order), alphabetic sequences, nested expansions, and edge cases. Requires the `brace-expansion` npm package. The function takes a string with brace patterns and returns an array of expanded strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/brace-expansion/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar expand = require('brace-expansion');\n\nexpand('file-{a,b,c}.jpg')\n// => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg']\n\nexpand('-v{,,}')\n// => ['-v', '-v', '-v']\n\nexpand('file{0..2}.jpg')\n// => ['file0.jpg', 'file1.jpg', 'file2.jpg']\n\nexpand('file-{a..c}.jpg')\n// => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg']\n\nexpand('file{2..0}.jpg')\n// => ['file2.jpg', 'file1.jpg', 'file0.jpg']\n\nexpand('file{0..4..2}.jpg')\n// => ['file0.jpg', 'file2.jpg', 'file4.jpg']\n\nexpand('file-{a..e..2}.jpg')\n// => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg']\n\nexpand('file{00..10..5}.jpg')\n// => ['file00.jpg', 'file05.jpg', 'file10.jpg']\n\nexpand('{{A..C},{a..c}}')\n// => ['A', 'B', 'C', 'a', 'b', 'c']\n\nexpand('ppp{,config,oe{,conf}}')\n// => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf']\n```\n\n----------------------------------------\n\nTITLE: Parallel Promise Resolution using Objects with 'co' in JavaScript\nDESCRIPTION: Shows how `co` handles yielding an object where property values are Promises (or other yieldables). Similar to arrays, all Promises within the object's values are resolved in parallel. The result is an object with the same keys, where the values are the resolved results of the corresponding Promises.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nco(function* () {\\n  var res = yield {\\n    1: Promise.resolve(1),\\n    2: Promise.resolve(2),\\n  };\\n  console.log(res); // => { 1: 1, 2: 2 }\\n}).catch(onerror);\n```\n\n----------------------------------------\n\nTITLE: Using strip-ansi to Remove ANSI Codes in JavaScript\nDESCRIPTION: Demonstrates importing and using the 'strip-ansi' function in JavaScript to remove ANSI escape codes from strings. The first example removes underline formatting codes, and the second removes hyperlink codes. Requires the 'strip-ansi' package to be installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-ansi/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst stripAnsi = require('strip-ansi');\n\nstripAnsi('\\u001B[4mUnicorn\\u001B[0m');\n//=> 'Unicorn'\n\nstripAnsi('\\u001B]8;;https://github.com\\u0007Click\\u001B]8;;\\u0007');\n//=> 'Click'\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer from a String with Optional Encoding in JavaScript\nDESCRIPTION: Shows how `Buffer.from(str[, encoding])` creates a new Buffer containing the encoded representation of a given string. The default encoding is 'utf8'. A `TypeError` is thrown if the input is not a string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst buf1 = Buffer.from('this is a tést');\nconsole.log(buf1.toString());\n  // prints: this is a tést\nconsole.log(buf1.toString('ascii'));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\nconsole.log(buf2.toString());\n  // prints: this is a tést\n```\n\n----------------------------------------\n\nTITLE: Using Comments in .env Files (INI)\nDESCRIPTION: Example `.env` file demonstrating how to add comments. Comments start with `#` either on their own line or inline after a value. Values containing a literal `#` character must be wrapped in quotes. This comment behavior is standard from `dotenv` version 15.0.0 onwards.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_7\n\nLANGUAGE: dosini\nCODE:\n```\n# This is a comment\nSECRET_KEY=YOURSECRETKEYGOESHERE # comment\nSECRET_HASH=\"something-with-a-#-hash\"\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Assets for Production using npm\nDESCRIPTION: This command `npm run build` triggers the build process defined in the project's `package.json` file as part of the deployment process. It typically compiles and bundles frontend assets (like JavaScript, CSS, images) into optimized files suitable for production deployment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MASTER_PROMPT.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Long Time Format Using ms in JavaScript\nDESCRIPTION: This snippet demonstrates how to obtain verbose, human-readable time formats (like '2 minutes') from millisecond values using the 'ms' library by passing the { long: true } option. Both positive and negative examples are included, as well as chaining ms to interpret textual durations for conversion. The key output is a descriptive string indicating the duration in words. The 'ms' library must be available, and the second parameter controls whether output is in long format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/ms/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n----------------------------------------\n\nTITLE: Listing Finalhandler Package Owners via npm\nDESCRIPTION: Executes an npm command in the shell to retrieve and display the list of current owners for the 'finalhandler' package registered in the npm registry. This is used to identify the correct contacts for security reporting.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/finalhandler/SECURITY.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm owner ls finalhandler\n```\n\n----------------------------------------\n\nTITLE: Counting Common Items using diff-sequences in JavaScript\nDESCRIPTION: Provides a function `countCommonItems` that uses `diff-sequences` to calculate the length of the longest common subsequence between two arrays (`a` and `b`). It defines an `isCommon` callback using strict equality and a `foundSubsequence` callback that increments a counter `n` by the number of common items found in each subsequence. The function returns the total count `n`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Return length of longest common subsequence according to === operator.\nfunction countCommonItems(a, b) {\n  let n = 0;\n  function isCommon(aIndex, bIndex) {\n    return a[aIndex] === b[bIndex];\n  }\n  function foundSubsequence(nCommon) {\n    n += nCommon;\n  }\n\n  diff(a.length, b.length, isCommon, foundSubsequence);\n\n  return n;\n}\n\nconst commonLength = countCommonItems(\n  ['a', 'b', 'c', 'a', 'b', 'b', 'a'],\n  ['c', 'b', 'a', 'b', 'a', 'c'],\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Using kleur for Basic Terminal Text Formatting (JavaScript)\nDESCRIPTION: Demonstrates fundamental usage of the 'kleur' library in Node.js. It shows how to import specific color and style functions (red, white, blue, bold) and apply them directly to strings, chain methods for combined effects, and nest methods within template literals for complex formatting. Requires the 'kleur' package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/kleur/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { red, white, blue, bold } = require('kleur');\n\n// basic usage\nred('red text');\n\n// chained methods\nblue().bold().underline('howdy partner');\n\n// nested methods\nbold(`${ white().bgRed('[ERROR]') } ${ red().italic('Something happened')}`);\n```\n\n----------------------------------------\n\nTITLE: Applying ANSI and ANSI256 Colors with Chalk in JavaScript\nDESCRIPTION: These snippets show how to apply specific ANSI (3/4 bit) or ANSI 256 (8-bit) colors for foreground (`ansi`) and background (`bgAnsi`, `bgAnsi256`) using the Chalk library. Requires the 'chalk' npm package. Input is the ANSI color code(s) and the text; output is an ANSI-escaped string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.ansi(31).bgAnsi(93)('red on yellowBright')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.bgAnsi256(194)('Honeydew, more or less')\n```\n\n----------------------------------------\n\nTITLE: Setting Source Content for a File in SourceNode (JavaScript)\nDESCRIPTION: Illustrates using `SourceNode.prototype.setSourceContent` to associate the original source code content with a specific source file name within the SourceNode tree. This content will be included in the `sourcesContent` field of the generated source map. Requires the `fs` module or similar to read the file content.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nnode.setSourceContent(\"module-one.scm\",\n                      fs.readFileSync(\"path/to/module-one.scm\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Framer Motion Variants for Dolphin Body Parts in TypeScript\nDESCRIPTION: Defines `framer-motion` animation variants for individual SVG parts of the dolphin: `bodyVariants` for vertical undulation, `tailVariants` for tail rotation, and `finVariants` for fin rotation. These variants create a more realistic swimming motion when the `swimming` state is active, using repeating animations with `easeInOut` easing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--SideProfileDolphinWithWave-tsx-import-React-from-react-import-motion-Variants-from-fra-1742648076558.txt#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Variants for individual dolphin parts (customize these as needed)\nconst bodyVariants: Variants = {\n  idle: { y: 0 },\n  swimming: { y: [0, -2, 0, 2, 0], transition: { repeat: Infinity, duration: 2, ease: \"easeInOut\" } }\n};\n\nconst tailVariants: Variants = {\n  idle: { rotate: 0 },\n  swimming: { rotate: [0, 8, 0, -5, 0], transition: { repeat: Infinity, duration: 1.2, ease: \"easeInOut\" } }\n};\n\nconst finVariants: Variants = {\n  idle: { rotate: 0 },\n  swimming: { rotate: [0, 10, 0, -10, 0], transition: { repeat: Infinity, duration: 1.8, ease: \"easeInOut\" } }\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Callback Invocation State Using Once in JavaScript\nDESCRIPTION: Demonstrates how to use additional metadata ('called' and 'value' properties) provided by the once-wrapped callback to check if it has been executed. The snippet listens for 'data' and 'end' events on a stream, invoking the callback only once, and conditionally triggering an error if the callback was never called. Dependencies include the 'once' module and a stream. This supports robust error handling in asynchronous data processing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/once/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar once = require('once')\\n\\nfunction load (cb) {\\n  cb = once(cb)\\n  var stream = createStream()\\n  stream.once('data', cb)\\n  stream.once('end', function () {\\n    if (!cb.called) cb(new Error('not found'))\\n  })\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using the 'shorthand' Option in to-regex-range (JavaScript)\nDESCRIPTION: This snippet demonstrates the 'shorthand' option. When set to true, it replaces the character class `[0-9]` with the regex shorthand `\\d` in the generated source string, potentially making the regex shorter.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(toRegexRange('0', '999999'));\n//=> [0-9]|[1-9][0-9]{1,5}\n\nconsole.log(toRegexRange('0', '999999', { shorthand: true }));\n//=> \\d|[1-9]\\d{1,5}\n```\n\n----------------------------------------\n\nTITLE: Defining Placeholder AI Feature Endpoints in Express TypeScript\nDESCRIPTION: This snippet defines two placeholder POST endpoints using Express: `/api/ai/generate-test` and `/api/ai/written-event-feedback`. Both routes use an `isAuthenticated` middleware, suggesting they require user authentication. They are defined as asynchronous functions (`async (req, res) => { ... }`) but currently contain only comments indicating where the implementation for test generation and written event feedback should go. These endpoints are part of a larger function likely setting up AI-related routes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n     // Generate test questions endpoint\n     app.post(\"/api/ai/generate-test\", isAuthenticated, async (req, res) => {\n       // Implementation for test generation\n     });\n   \n     // Written event feedback endpoint\n     app.post(\"/api/ai/written-event-feedback\", isAuthenticated, async (req, res) => {\n       // Implementation for written event feedback\n     });\n   }\n   ```\n```\n\n----------------------------------------\n\nTITLE: Using Multiple debug Instances with Timed Logging (JavaScript)\nDESCRIPTION: Initializes two debug instances ('worker:a' and 'worker:b'). It uses `setInterval` to log messages from each debugger at different intervals, demonstrating concurrent debug output. Can be used in Node.js or browser environments where 'debug' is available and configured.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n----------------------------------------\n\nTITLE: Applying Background Colors (Hex, Keyword, RGB) with Chalk in JavaScript\nDESCRIPTION: These snippets demonstrate applying background colors using HEX (`bgHex`), keyword (`bgKeyword`), or RGB (`bgRgb`) models with the Chalk library. Style methods like `.underline()` or `.inverse()` can be chained. Requires the 'chalk' npm package. Input includes the color value (HEX string, keyword, or RGB values) and the text; output is an ANSI-escaped string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.bgHex('#DEADED').underline('Hello, world!')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.bgKeyword('orange')('Some orange text')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.bgRgb(15, 100, 204).inverse('Hello!')\n```\n\n----------------------------------------\n\nTITLE: Using Leven to Compute String Difference - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to import and use the 'leven' package to compute the Levenshtein distance between strings. 'leven' must be installed as a dependency. The function call 'leven(\\'cat\\', \\'cow\\')' returns the integer distance between the strings \\\"cat\\\" and \\\"cow\\\", with the expected output of 2. Requires Node.js environment and the 'leven' module installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/leven/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst leven = require('leven');\n\nleven('cat', 'cow');\n//=> 2\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Colors in Node.js Child Processes\nDESCRIPTION: Demonstrates how to ensure colored debug output is preserved in child processes created using `child_process.fork` when `stderr` is piped. This is achieved by explicitly setting the `DEBUG_COLORS=1` environment variable for the child process.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nworker = fork(WORKER_WRAP_PATH, [workerPath], {\n  stdio: [\n    /* stdin: */ 0,\n    /* stdout: */ 'pipe',\n    /* stderr: */ 'pipe',\n    'ipc',\n  ],\n  env: Object.assign({}, process.env, {\n    DEBUG_COLORS: 1 // without this settings, colors won't be shown\n  }),\n});\n\nworker.stderr.pipe(process.stderr, { end: false });\n```\n\n----------------------------------------\n\nTITLE: Using locatePath Asynchronously in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates the basic asynchronous usage of the `locate-path` library. It requires the module and uses an async immediately invoked function expression (IIFE) to call `locatePath` with an array of file paths. The function returns a promise that resolves with the first path found to exist on disk ('rainbow.png' in this example).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/locate-path/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst locatePath = require('locate-path');\n\nconst files = [\n\t'unicorn.png',\n\t'rainbow.png', // Only this one actually exists on disk\n\t'pony.png'\n];\n\n(async () => {\n\tconsole(await locatePath(files));\n\t//=> 'rainbow'\n})();\n```\n\n----------------------------------------\n\nTITLE: Querying Request Address with IPv6 Trust Lists in proxy-addr JavaScript\nDESCRIPTION: Provides examples of proxy-addr usage supporting IPv6 addresses and normalized representations. Inputs include the request object and IPv6 trust definitions, either as strings or arrays. Outputs are the closest untrusted address considering IPv6 normalization and compatibility.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, '::1')\n```\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, ['::1/128', 'fe80::/10'])\n```\n\n----------------------------------------\n\nTITLE: npm Script Example for Windows Debugging - JavaScript\nDESCRIPTION: Shows a package.json npm script that runs a Node.js app with the DEBUG environment variable set, using PowerShell inline in Windows. Useful for automating debug runs via npm commands.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\",\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output - Bash\nDESCRIPTION: Shows how to run a Node.js application with the DEBUG environment variable set to 'send', enabling debug output from the 'send' library for troubleshooting and tracing execution. Requires the application script to use 'send' internally.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ DEBUG=send node app\n```\n\n----------------------------------------\n\nTITLE: Replacing Content in the Right-most Snippet of a SourceNode (JavaScript)\nDESCRIPTION: Shows how to use `SourceNode.prototype.replaceRight` to perform a string replacement (using `String.prototype.replace`) specifically on the last code snippet within the SourceNode tree. This is useful for tasks like trimming trailing whitespace.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_27\n\nLANGUAGE: js\nCODE:\n```\n// Trim trailing white space.\nnode.replaceRight(/\\s*$/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Installing Node 14 TypeScript Base Package - Shell\nDESCRIPTION: Installs the @tsconfig/node14 package as a development dependency using npm and yarn. No parameters are needed; simply run the commands in your project root. Required for projects aiming to extend their tsconfig.json from the community Node 14 base configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node14/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @tsconfig/node14\nyarn add --dev @tsconfig/node14\n```\n\n----------------------------------------\n\nTITLE: Checking Terminal Color Support in JavaScript\nDESCRIPTION: Demonstrates how to use the `supports-color` library in a Node.js environment. It imports the library and then checks boolean properties on the returned object (`supportsColor.stdout`, `supportsColor.stdout.has256`, `supportsColor.stderr.has16m`) to determine if `stdout` supports any color, if `stdout` supports 256 colors, and if `stderr` supports 16 million colors (truecolor), logging messages accordingly. Requires the `supports-color` package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/supports-color/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst supportsColor = require('supports-color');\n\nif (supportsColor.stdout) {\n\tconsole.log('Terminal stdout supports color');\n}\n\nif (supportsColor.stdout.has256) {\n\tconsole.log('Terminal stdout supports 256 colors');\n}\n\nif (supportsColor.stderr.has16m) {\n\tconsole.log('Terminal stderr supports 16 million colors (truecolor)');\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Short Time Format Using ms in JavaScript\nDESCRIPTION: These code samples use the 'ms' library to convert millisecond values into their short (abbreviated) time string format, such as '1m' for 60000 milliseconds, and also demonstrate chaining ms to interpret text durations first. All samples use numbers (both positive and negative) as input and show expected results as comments. The 'ms' library is the only required dependency, and the primary output is a string formatted as a short time unit.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/ms/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Long Time Strings using ms - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'ms' library with the 'long' option to convert milliseconds to extended, human-readable time strings (such as '1 minute', '2 minutes', '-3 minutes'). The input can be a numeric value or another ms() conversion, and the output is a descriptive string. The 'long: true' option enables verbose time units. This is optimal for UI elements requiring clarity on time units or durations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/ms/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n----------------------------------------\n\nTITLE: Transpiled File with Source Map Support Installation - JavaScript\nDESCRIPTION: A transpiled file that imports source-map-support and throws an error, also including a sourceMappingURL comment. Serves as a demo to show stack trace remapping to the original code when run.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nrequire('source-map-support').install();\n\nthrow new Error('test'); // This is the compiled code\n// The next line defines the sourceMapping.\n//# sourceMappingURL=compiled.js.map\n```\n\n----------------------------------------\n\nTITLE: Installing fetch-blob via npm (Shell)\nDESCRIPTION: Installs the `fetch-blob` package using the Node Package Manager (npm). This command downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fetch-blob/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install fetch-blob\n```\n\n----------------------------------------\n\nTITLE: Converting Varied Time Strings to Milliseconds with ms (JavaScript)\nDESCRIPTION: Demonstrates how to use the ms package to convert a diverse set of human-readable time format strings, including plural and singular forms, decimals, negative values, and raw numbers, into their corresponding millisecond values. No dependencies beyond the 'ms' package itself are required. Expected input is a string representing a time value (with optional unit), and the output is the number of milliseconds as a JavaScript number; direct numbers return unchanged. Limitations: input must follow recognized formats (e.g., '1d', '2.5 hrs', or raw numbers), unsupported formats return undefined.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/ms/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n```\n\n----------------------------------------\n\nTITLE: Defining String-Keyed Records with TypeBox in TypeScript\nDESCRIPTION: Begins a definition of a record type using Type.Record, specifying keys as strings. This is typically used to construct object schemas with arbitrary string keys and a specified value schema; however, the value type schema is not included in the provided snippet. Requires TypeBox; primary input is Type.String().\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Record(\n  Type.String(),\n```\n\n----------------------------------------\n\nTITLE: Parsing X-Forwarded-For Header Using Forwarded(req) in Node.js (JavaScript)\nDESCRIPTION: This example calls the \"forwarded\" function with an HTTP request object (\"req\") to parse the X-Forwarded-For header and return an array of IP addresses. The result includes the socket address and all proxied addresses in reverse order. The input is a Node.js request object, and the output is an IP address array. The \"forwarded\" module must be previously required, and the request object should possess a valid X-Forwarded-For header.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/forwarded/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar addresses = forwarded(req)\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Source Map Support via CLI (Register with HookRequire)\nDESCRIPTION: Command-line example showing how to run a Node.js script (`compiled.js`) with source map support enabled, including the `hookRequire` option. This is done by pre-loading the `register-hook-require` module using the `-r` flag.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Or to enable hookRequire\nnode -r @cspotcode/source-map-support/register-hook-require compiled.js\n```\n\n----------------------------------------\n\nTITLE: Enhanced Animation System and Typings (TypeScript)\nDESCRIPTION: This TypeScript export defines type unions and an interface for a comprehensive animation engine, supporting hundreds of customizable particle effects and themes (rainbow, tropical, etc.) along with timing and element targeting. Used in a DecA(I)de animation engine to support UI enhancements, this excerpt shows Audio/Particle types, parameters, and function description header. Prerequisites: TypeScript project setup, access to utility functions and confetti library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * DecA(I)de Animation Engine - Enhanced Version\n * Provides a comprehensive system for hundreds of randomized animations.\n */\nimport confetti from 'canvas-confetti';\nimport { mergeParams, getColors, randomFrom } from './utils'; // Utility functions\n\nexport type AnimationType = \n  | 'confetti' | 'stars' | 'circles' | 'fireworks' | 'random'\n  | 'sparkles' | 'bubbles' | 'waves' | 'dolphin' | 'tropical'\n  | 'achievement' | 'celebrate' | 'success' | 'levelUp' | 'rewardUnlocked'\n  | 'rainbowTrail' | 'glitter' | 'paperPlane' | 'floatingNumbers'\n  | 'flipCard' | 'rotate3D' | 'bounce' | 'fadeScale' | 'slideSwing'\n  | 'popIn' | 'rollOut' | 'blinkFade' | 'wiggle' | 'tremble'\n  | 'heartbeat' | 'pulse' | 'flash' | 'tada' | 'jello' | 'rubber'\n  | 'swing' | 'wobble' | 'shake' | 'flip' | 'flipInX' | 'flipInY'\n  | 'fadeIn' | 'fadeInUp' | 'fadeInDown' | 'zoomIn' | 'jackInTheBox'\n  | 'lightSpeedIn' | 'rotateIn' | 'rollIn' | 'slideInUp' | 'slideInDown';\n  \nexport type ParticleType = \n  | 'circle' | 'star' | 'square' | 'triangle' | 'diamond' | 'heart'\n  | 'dolphin' | 'palm' | 'wave' | 'coin' | 'note' | 'check' | 'trophy'\n  | 'sparkle' | 'dot' | 'line' | 'ring' | 'spiral' | 'zigzag';\n\nexport type ColorScheme = \n  | 'rainbow' | 'tropical' | 'ocean' | 'forest' | 'sunset' | 'neon'\n  | 'pastel' | 'monochrome' | 'gold' | 'silver' | 'brand' | 'custom';\n\nexport type TimingFunction = \n  | 'linear' | 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' \n  | 'bounce' | 'elastic' | 'spring' | 'custom';\n\nexport interface AnimationParams {\n  type?: AnimationType;\n  duration?: number;\n  particleCount?: number;\n  particleType?: ParticleType;\n  colors?: string[];\n  colorScheme?: ColorScheme;\n  spread?: number;\n  startVelocity?: number;\n  decay?: number;\n  timingFunction?: TimingFunction;\n  element?: HTMLElement;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Streams for debug - JavaScript\nDESCRIPTION: Shows how to direct 'debug' output to different output streams by overriding the log function per namespace or globally. It demonstrates sending certain logs to stderr, others to stdout, and globally swapping output to console.info; dependencies are the 'debug' module and a console environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n----------------------------------------\n\nTITLE: Accessing and Printing Default Exclude List with IstanbulJS Schema - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to import and use the default configuration for NYC from the @istanbuljs/schema package. It requires Node.js and the @istanbuljs/schema NPM package to be installed. The code retrieves the default exclude list and outputs each entry, formatted for readability, to the console. Key parameters include 'nyc.exclude', and the example demonstrates string interpolation, joining arrays, and console output. Input consists of the installed package, and the output is a string printed to stdout with excluded patterns. No external configuration is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@istanbuljs/schema/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {nyc} = require('@istanbuljs/schema').defaults;\n\nconsole.log(`Default exclude list:\\n\\t* ${nyc.exclude.join('\\n\\t* ')}`);\n```\n\n----------------------------------------\n\nTITLE: Defining Pipeline Policy Addition Options in TypeScript\nDESCRIPTION: This snippet defines the `AddPipelineOptions` interface in TypeScript. It specifies options used when adding a `PipelinePolicy` to a `Pipeline`, allowing control over its execution order relative to other policies (`beforePolicies`, `afterPolicies`) and its placement within predefined pipeline phases (`phase`, `afterPhase`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-rest-pipeline/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipelinePhase } from \"@azure/core-rest-pipeline\";\n\ninterface AddPipelineOptions {\n  beforePolicies?: string[];\n  afterPolicies?: string[];\n  afterPhase?: PipelinePhase;\n  phase?: PipelinePhase;\n}\n```\n\n----------------------------------------\n\nTITLE: Password Input Prompt with Masking - JavaScript\nDESCRIPTION: Shows how to configure a password-style prompt that masks input characters. The example sets the 'type' to 'password', which makes the input field obscure user entries for privacy. It is designed to capture confidential strings and can be further extended with validation or formatting callbacks within the prompts library context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'password',\\n  name: 'value',\\n  message: 'Tell me a secret'\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Regex from Source String with picomatch.toRegex (JavaScript)\nDESCRIPTION: Shows how to obtain the regex source string (`output`) from `picomatch.parse` for a glob pattern (`*.js`) and then use `picomatch.toRegex` to convert this source string into a RegExp object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst picomatch = require('picomatch');\n// picomatch.toRegex(source[, options]);\n\nconst { output } = picomatch.parse('*.js');\nconsole.log(picomatch.toRegex(output));\n//=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n```\n\n----------------------------------------\n\nTITLE: Using Multiple debug Instances in a Worker - JavaScript\nDESCRIPTION: Creates multiple debug loggers with different namespaces (worker:a and worker:b), and periodically logs debug messages using setTimeout. Assumes the 'debug' package is installed. Each function simulates recurring work and emits messages controlled by the enabled namespaces.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = require('debug')(\\'worker:a\\')\n  , b = require('debug')(\\'worker:b\\');\n\nfunction work() {\n  a('doing lots of uninteresting work');\n  setTimeout(work, Math.random() * 1000);\n}\n\nwork();\n\nfunction workb() {\n  b('doing some work');\n  setTimeout(workb, Math.random() * 2000);\n}\n\nworkb();\n```\n\n----------------------------------------\n\nTITLE: Defining the HttpClient Interface in TypeScript\nDESCRIPTION: This snippet defines the `HttpClient` interface in TypeScript. Any object implementing this interface must provide a `sendRequest` method conforming to the `SendRequest` type, which is responsible for actually making the HTTP request to a server endpoint using a platform-specific mechanism.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-rest-pipeline/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SendRequest } from \"@azure/core-rest-pipeline\";\n\ninterface HttpClient {\n  /**\n   * The method that makes the request and returns a response.\n   */\n  sendRequest: SendRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Milliseconds to Time Strings with ms in JavaScript\nDESCRIPTION: Illustrates how to take raw millisecond values and convert them back into compact human-readable time strings using 'ms'. It covers positive and negative values, as well as the use of nested ms calls for two-step conversions. The snippets return formatted strings like \"1m\", \"2m\", or \"-3m\" for the respective millisecond inputs, with no extra dependencies beyond the 'ms' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/ms/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000)             // \"1m\"\\nms(2 * 60000)         // \"2m\"\\nms(-3 * 60000)        // \"-3m\"\\nms(ms('10 hours'))    // \"10h\"\n```\n\n----------------------------------------\n\nTITLE: Using supports-color to Detect Terminal Color Support (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to import and use the 'supports-color' module. It checks the 'stdout' and 'stderr' properties to determine if the respective terminal streams support color, specifically checking for basic support, 256-color support (`has256`), and 16 million color support (`has16m`). Requires the 'supports-color' package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/node_modules/supports-color/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst supportsColor = require('supports-color');\n\nif (supportsColor.stdout) {\n\tconsole.log('Terminal stdout supports color');\n}\n\nif (supportsColor.stdout.has256) {\n\tconsole.log('Terminal stdout supports 256 colors');\n}\n\nif (supportsColor.stderr.has16m) {\n\tconsole.log('Terminal stderr supports 16 million colors (truecolor)');\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping UTF-8 BOM from a String using strip-bom - JavaScript\nDESCRIPTION: Demonstrates how to use the 'strip-bom' module to remove a UTF-8 byte order mark from the beginning of a string. This snippet requires prior installation of the 'strip-bom' package. The function 'stripBom' accepts a string as input and returns a new string with any leading BOM removed; for example, it converts '\\uFEFFunicorn' to 'unicorn'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-bom/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst stripBom = require('strip-bom');\n\nstripBom('\\uFEFFunicorn');\n//=> 'unicorn'\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting of Trailing Spaces and Colors in jest-diff Output in JavaScript\nDESCRIPTION: Configures colors and background colors for diff segments, particularly tailoring magenta for deletions and green for insertions, and sets common line trailing spaces to be highlighted with a yellow background. This enhances visual clarity for whitespace changes. Chalk is used for colorization.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\\n  aColor: chalk.rgb(128, 0, 128).bgRgb(255, 215, 255), // magenta\\n  bColor: chalk.rgb(0, 95, 0).bgRgb(215, 255, 215), // green\\n  commonLineTrailingSpaceColor: chalk.bgYellow,\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Chalk Themes in JavaScript\nDESCRIPTION: Shows how to create reusable custom style themes by assigning chained Chalk styles to variables (e.g., `const error = chalk.bold.red;`). This allows for consistent application of predefined styles for specific purposes like errors or warnings. Requires the 'chalk' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chalk = require('chalk');\n\nconst error = chalk.bold.red;\nconst warning = chalk.keyword('orange');\n\nconsole.log(error('Error!'));\nconsole.log(warning('Warning!'));\n```\n\n----------------------------------------\n\nTITLE: Querying Request Address with Custom Trust Function in proxy-addr JavaScript\nDESCRIPTION: Illustrates usage of proxy-addr to determine the nearest untrusted address in a proxied HTTP request, using a custom trust function for address validation. Dependencies are Node.js, proxy-addr, and a compatible request object. Parameters include the request and a function that evaluates each address; the return value is a single address string. Functions may use address string equality or distance computation based on the second argument.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, function (addr) { return addr === '127.0.0.1' })\n```\n\nLANGUAGE: js\nCODE:\n```\nproxyaddr(req, function (addr, i) { return i < 1 })\n```\n\n----------------------------------------\n\nTITLE: Scanning a Glob Pattern with Tokens using Picomatch (JavaScript)\nDESCRIPTION: Demonstrates using the picomatch.scan method to parse and tokenize a glob pattern. Highlights enabling the 'tokens' option to retrieve detailed information about segments of the pattern and matching logic. Requires the 'picomatch' package. Inputs include a glob string and scan options; output is a detailed object describing the scan breakdown including prefixes, basename, glob, depth, slashes, tokens, and parts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst picomatch = require('picomatch');\\nconst result = picomatch.scan('!./foo/*.js', { tokens: true });\\nconsole.log(result);\\n// {\\n//   prefix: '!./',\\n//   input: '!./foo/*.js',\\n//   start: 3,\\n//   base: 'foo',\\n//   glob: '*.js',\\n//   isBrace: false,\\n//   isBracket: false,\\n//   isGlob: true,\\n//   isExtglob: false,\\n//   isGlobstar: false,\\n//   negated: true,\\n//   maxDepth: 2,\\n//   tokens: [\\n//     { value: '!./', depth: 0, isGlob: false, negated: true, isPrefix: true },\\n//     { value: 'foo', depth: 1, isGlob: false },\\n//     { value: '*.js', depth: 1, isGlob: true }\\n//   ],\\n//   slashes: [ 2, 6 ],\\n//   parts: [ 'foo', '*.js' ]\\n// }\n```\n\n----------------------------------------\n\nTITLE: Dynamically Enabling and Disabling Debug Namespaces with the Debug Module in JavaScript\nDESCRIPTION: This code sample shows how to require the 'debug' module, check if a debug namespace is enabled, dynamically enable or disable namespaces with 'enable' and 'disable', and observe their effect through console output. Make sure the 'debug' npm package is installed as a dependency. The primary input is a debug namespace string, while outputs are Boolean results displayed via console.log. Note that enabling/disabling via code will override any previous settings from the DEBUG environment variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet debug = require('debug');\\n\\nconsole.log(1, debug.enabled('test'));\\n\\ndebug.enable('test');\\nconsole.log(2, debug.enabled('test'));\\n\\ndebug.disable();\\nconsole.log(3, debug.enabled('test'));\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a SourceMapGenerator with options - JavaScript\nDESCRIPTION: Creates a new instance of SourceMapGenerator with specified file and sourceRoot, optionally controlling validation and error/ignoring on mapping issues. Requires the sourceMap module, and optionally the Node.js fs module if working with files directly. Options should be provided as object properties.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar generator = new sourceMap.SourceMapGenerator({\n  file: \"my-generated-javascript-file.js\",\n  sourceRoot: \"http://example.com/app/js/\"\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating semver.clean() Function Usage (JavaScript Examples)\nDESCRIPTION: These examples demonstrate the usage and output of the `semver.clean()` function (assumed alias `s.clean`). They show how different version strings are processed, including cases with extra characters, the effect of the `loose: true` option for more lenient parsing, and inputs that result in `null` because they cannot be cleaned into a valid semver string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ns.clean(' = v 2.1.5foo') // null\ns.clean(' = v 2.1.5foo', { loose: true }) // '2.1.5-foo'\ns.clean(' = v 2.1.5-foo') // null\ns.clean(' = v 2.1.5-foo', { loose: true }) // '2.1.5-foo'\ns.clean('=v2.1.5') // '2.1.5'\ns.clean('  =v2.1.5') // '2.1.5'\ns.clean('      2.1.5   ') // '2.1.5'\ns.clean('~1.0.0') // null\n```\n\n----------------------------------------\n\nTITLE: Example: Parsing Argument with Embedded Equals Sign (Shell)\nDESCRIPTION: Demonstrates a command-line argument format using `--option=\"value=pair\"` that was problematic before version 1.0.3. This fix allows the library to correctly parse arguments where the value itself contains an equals sign, provided the value is quoted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/argparse/CHANGELOG.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--examplepath=\\\"C:\\\\myfolder\\\\env=x64\\\"\n```\n\n----------------------------------------\n\nTITLE: Building React Frontend Application for Production (Shell)\nDESCRIPTION: This shell command executes the `build` script defined in the frontend React project's `package.json` (typically configured by Create React App or Vite). It triggers the production build process, which compiles, transpiles, bundles, and optimizes the React application code and assets into static files (usually in a `build` or `dist` directory) suitable for deployment to a static web host like Azure Static Web Apps or an Azure App Service. This command is essential for preparing the frontend for deployment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Cosmos DB Document Fields for Stored Content\nDESCRIPTION: Specifies the fields for storing document records in a Cosmos DB 'Documents' container. Includes a unique 'id', 'title', the main 'text' content, and a 'type' field (e.g., “roleplay case” or “PI list”) to categorize the document.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nid, title, text, type\n```\n\n----------------------------------------\n\nTITLE: Checking if a Debug Instance is Enabled in JavaScript\nDESCRIPTION: This code demonstrates how to check if a specific debug instance (e.g., for 'http') is currently enabled by accessing its `enabled` boolean property. This allows for conditional execution of code based on whether debugging for that namespace is active. Requires the `debug` module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst debug = require('debug')('http');\n\nif (debug.enabled) {\n  // do stuff...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running App with DEBUG Set in CMD - Command Prompt\nDESCRIPTION: Combined command for setting the 'DEBUG' environment variable and running a Node.js app in Windows CMD. Ensures debug output for matching namespaces is shown during execution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=* & node app.js\n```\n\n----------------------------------------\n\nTITLE: MIT License for etag\nDESCRIPTION: The full text of the MIT License governing the use of the 'etag' library. This permissive license allows free use, modification, and distribution of the software, provided the copyright notice and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n(The MIT License)\n\nCopyright (c) 2014-2016 Douglas Christopher Wilson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Functions for jest-worker in JavaScript\nDESCRIPTION: This worker script (`worker.js`) exports functions (`foo`, `bar`, `getWorkerId`) intended to be called by the parent process via `jest-worker`. `foo` and `bar` return simple string greetings including the provided parameter. `getWorkerId` returns the unique ID assigned to the worker process by `jest-worker` via the `process.env.JEST_WORKER_ID` environment variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport function foo(param) {\n  return `Hello from foo: ${param}`;\n}\n\nexport function bar(param) {\n  return `Hello from bar: ${param}`;\n}\n\nexport function getWorkerId() {\n  return process.env.JEST_WORKER_ID;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Trust for a Single IP Address in Express.js\nDESCRIPTION: Shows how to configure the Express application to trust a specific IP address (e.g., '10.0.0.1') as a proxy server using `app.set('trust proxy', '10.0.0.1')`. Mentioned in version 4.3.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('trust proxy', '10.0.0.1')\n```\n\n----------------------------------------\n\nTITLE: Listening for the First Event with ee-first in JavaScript\nDESCRIPTION: Demonstrates the primary usage of the `ee-first` library. It sets up listeners on two EventEmitter instances (`ee1` and `ee2`) for specific events ('close', 'end', 'error'). The provided callback function is executed only once, when the *first* of these specified events is emitted by either `ee1` or `ee2`. The callback receives potential error details, the emitter that fired, the event name, and any arguments passed with the event.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ee-first/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ee1 = new EventEmitter()\nvar ee2 = new EventEmitter()\n\nfirst([\n  [ee1, 'close', 'end', 'error'],\n  [ee2, 'error']\n], function (err, ee, event, args) {\n  // listener invoked\n})\n```\n\n----------------------------------------\n\nTITLE: Using Lowercase Utility Type in TypeScript\nDESCRIPTION: This snippet demonstrates the `Lowercase<S>` utility type in TypeScript (introduced in v4.1). It provides examples of converting string literals, union types (`'FOO' | 'BAR'`), template literal types (`aB${S}`), and generic types to lowercase. It also illustrates its behavior with `string`, `any`, `never`, and highlights an error when used with a non-string type like `number`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ntype T = Lowercase<'HELLO'>;  // 'hello'\n\ntype T2 = Lowercase<'FOO' | 'BAR'>;  // 'foo' | 'bar'\n\ntype T3<S extends string> = Lowercase<`aB${S}`>;\ntype T4 = T32<'xYz'>;  // 'abxyz'\n\ntype T5 = Lowercase<string>;  // string\ntype T6 = Lowercase<any>;  // any\ntype T7 = Lowercase<never>;  // never\ntype T8 = Lowercase<42>;  // Error, type 'number' does not satisfy the constraint 'string'\n```\n\n----------------------------------------\n\nTITLE: Collecting Coverage Using collect-v8-coverage in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the collect-v8-coverage package in a Node.js environment to start and stop V8 JavaScript code coverage collection. The CoverageInstrumenter instance is configured to begin instrumentation, allowing you to require modules or run application code in between. Finally, the collected coverage data is retrieved using stopInstrumenting(). Dependencies: Requires 'collect-v8-coverage' (install via npm). The method calls are asynchronous and should be awaited. Input: None directly—coverage is for code executed between instrumentation calls. Output: A coverage data object returned from stopInstrumenting(). Limitations: Coverage is limited to code executed between start and stop events.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/collect-v8-coverage/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst {CoverageInstrumenter} = require('collect-v8-coverage');\n\nconst instrumenter = new CoverageInstrumenter();\n\nawait instrumenter.startInstrumenting();\n\n// require some modules, run some code\n\nconst coverage = await instrumenter.stopInstrumenting();\n```\n\n----------------------------------------\n\nTITLE: Generating Code and Source Map from SourceNode in JavaScript\nDESCRIPTION: Illustrates `SourceNode.prototype.toStringWithSourceMap` which generates both the concatenated code string and its corresponding `SourceMapGenerator` object. It accepts optional arguments (like `{ file: 'output-file.js' }`) which are passed to the `SourceMapGenerator` constructor.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.js\", [\n  new SourceNode(3, 4, \"b.js\", \"uno\"),\n  \"dos\",\n  [\n    \"tres\",\n    new SourceNode(5, 6, \"c.js\", \"quatro\")\n  ]\n]);\n\nnode.toStringWithSourceMap({ file: \"my-output-file.js\" })\n// { code: 'unodostresquatro',\n//   map: [object SourceMapGenerator] }\n```\n\n----------------------------------------\n\nTITLE: Calling playAchievementAnimation Function in TypeScript\nDESCRIPTION: Demonstrates how to invoke the `playAchievementAnimation` function exported from `animation-engine.ts`. It passes an options object specifying the target HTML element (`element`) by its ID and a custom message (`message`) to display during the animation. This triggers the confetti effect configured for achievements and the associated DOM manipulations (CSS class addition/removal and message element creation/removal).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-solution-for-your-DecA-I-de-Animation-System-that-meets-the-requirements-an-1742703767915.txt#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nplayAchievementAnimation({ \n  element: document.getElementById('achievement-container'), \n  message: \"Achievement Unlocked: DECA Champion!\" \n});\n```\n\n----------------------------------------\n\nTITLE: Installing Missing Node.js Packages via npm - Shell\nDESCRIPTION: Shows how to install a missing dependency using the npm package manager from the command line. Replace <missing-package> with the actual package name reported by the error message. Ensures that all required Node.js modules are available before attempting to run the application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-To-address-the-issue-of-the-app-not-running-and-to-fix-any-errors-reported-in-the-Console-I-will-fo-1742642783064.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install <missing-package>\n```\n\n----------------------------------------\n\nTITLE: Triggering Achievement System via MicroInteractionsProvider (TSX Comment)\nDESCRIPTION: This comment indicates that the achievement system is triggered by calling the `showAchievement` function, which is provided by the `MicroInteractionsProvider` context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS_GUIDE.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Triggered via showAchievement function in MicroInteractionsProvider\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Updates - Markdown\nDESCRIPTION: This snippet demonstrates the structure of a software changelog using Markdown, listing notable changes, performance improvements, and dependency updates for each release. The file is intended as release documentation for developers and users, with numbered version headers and bulleted lists for entries. No external dependencies are required and no inputs/outputs are expected; the content is for documentation only.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/etag/HISTORY.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1.8.1 / 2017-09-12\\n==================\\n\\n  * perf: replace regular expression with substring\\n\\n1.8.0 / 2017-02-18\\n==================\\n\\n  * Use SHA1 instead of MD5 for ETag hashing\\n    - Improves performance for larger entities\\n    - Works with FIPS 140-2 OpenSSL configuration\\n\\n1.7.0 / 2015-06-08\\n==================\\n\\n  * Always include entity length in ETags for hash length extensions\\n  * Generate non-Stats ETags using MD5 only (no longer CRC32)\\n  * Improve stat performance by removing hashing\\n  * Remove base64 padding in ETags to shorten\\n  * Use MD5 instead of MD4 in weak ETags over 1KB\\n\\n1.6.0 / 2015-05-10\\n==================\\n\\n  * Improve support for JXcore\\n  * Remove requirement of `atime` in the stats object\\n  * Support \\\"fake\\\" stats objects in environments without `fs`\\n\\n1.5.1 / 2014-11-19\\n==================\\n\\n  * deps: crc@3.2.1\\n    - Minor fixes\\n\\n1.5.0 / 2014-10-14\\n==================\\n\\n  * Improve string performance\\n  * Slightly improve speed for weak ETags over 1KB\\n\\n1.4.0 / 2014-09-21\\n==================\\n\\n  * Support \\\"fake\\\" stats objects\\n  * Support Node.js 0.6\\n\\n1.3.1 / 2014-09-14\\n==================\\n\\n  * Use the (new and improved) `crc` for crc32\\n\\n1.3.0 / 2014-08-29\\n==================\\n\\n  * Default strings to strong ETags\\n  * Improve speed for weak ETags over 1KB\\n\\n1.2.1 / 2014-08-29\\n==================\\n\\n  * Use the (much faster) `buffer-crc32` for crc32\\n\\n1.2.0 / 2014-08-24\\n==================\\n\\n  * Add support for file stat objects\\n\\n1.1.0 / 2014-08-24\\n==================\\n\\n  * Add fast-path for empty entity\\n  * Add weak ETag generation\\n  * Shrink size of generated ETags\\n\\n1.0.1 / 2014-08-24\\n==================\\n\\n  * Fix behavior of string containing Unicode\\n\\n1.0.0 / 2014-05-18\\n==================\\n\\n  * Initial release\n```\n\n----------------------------------------\n\nTITLE: Requiring the content-type Module in Node.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the 'content-type' module into a Node.js script using CommonJS require syntax. Dependencies include Node.js and the installed 'content-type' package. The 'contentType' variable will provide access to the API functions such as parse and format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-type/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar contentType = require('content-type')\n```\n\n----------------------------------------\n\nTITLE: Color Space Conversion with ansi-styles in JavaScript\nDESCRIPTION: Shows how to use `ansi-styles` functions for color space conversions. Examples include converting RGB and HEX values to ANSI 256 and ANSI 16 million (TrueColor) escape codes for both foreground (`style.color`) and background (`style.bgColor`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/node_modules/ansi-styles/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstyle.color.ansi256(style.rgbToAnsi256(100, 200, 15)); // RGB to 256 color ansi foreground code\nstyle.bgColor.ansi256(style.hexToAnsi256('#C0FFEE')); // HEX to 256 color ansi foreground code\n\nstyle.color.ansi16m(100, 200, 15); // RGB to 16 million color foreground code\nstyle.bgColor.ansi16m(...style.hexToRgb('#C0FFEE')); // Hex (RGB) to 16 million color foreground code\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Written-Out Long Time Format Strings with ms (JavaScript)\nDESCRIPTION: Illustrates the use of the ms package's 'long' option to return written-out, pluralized string representations of elapsed time (e.g., '1 minute', '-3 minutes'). Requires the 'ms' package and passes an object with the 'long' key set to true as the second argument. Inputs are numeric milliseconds or results of ms(…) calls; outputs are verbose, fully written-out time strings, handling negative and plural cases. Limitation: formatting only for recognized units.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/ms/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Support: Specifying Environment\nDESCRIPTION: JavaScript code illustrating how to explicitly set the execution environment ('node' or 'browser') when installing source map support. This can be necessary in specific emulation scenarios where automatic detection might fail.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@cspotcode/source-map-support').install({\n  environment: 'node'\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Changed and Unchanged Substrings Within Diff Lines (JavaScript)\nDESCRIPTION: Defines a function for finding changed and unchanged substrings within two strings, intended for detailed diff visualization (for example, in failed Jest assertions). The function is compatible with diff-match-patch-style diff arrays and partitions the input strings into arrays of actions: -1 for deletions, +1 for insertions, and 0 for unchanged subsequences. Input parameters 'a' and 'b' are strings to compare, and it outputs an array of tuples [action, substring]. Relies on a 'diff' function to determine the longest common subsequence. Key features include flexibility in formatting and optional post-processing for clearer diff display. Care should be taken that 'diff' exists and is compatible; large input strings may increase memory usage for storing all diff items.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Return diff items for strings (compatible with diff-match-patch package).\nconst findDiffItems = (a, b) => {\n  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];\n\n  let aIndex = 0;\n  let bIndex = 0;\n  const array = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    if (aIndex !== aCommon) {\n      array.push([-1, a.slice(aIndex, aCommon)]); // delete is -1\n    }\n    if (bIndex !== bCommon) {\n      array.push([1, b.slice(bIndex, bCommon)]); // insert is 1\n    }\n\n    aIndex = aCommon + nCommon; // number of characters compared in a\n    bIndex = bCommon + nCommon; // number of characters compared in b\n    array.push([0, a.slice(aCommon, aIndex)]); // common is 0\n  };\n\n  diff(a.length, b.length, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change items.\n  if (aIndex !== a.length) {\n    array.push([-1, a.slice(aIndex)]);\n  }\n  if (bIndex !== b.length) {\n    array.push([1, b.slice(bIndex)]);\n  }\n\n  return array;\n};\n\nconst expectedDeleted = ['\"sorting\": Object {', '\"ascending\": true,'].join(\n  '\\n',\n);\nconst receivedInserted = [\n  '\"sorting\": Array [',\n  'Object {',\n  '\"descending\": false,',\n].join('\\n');\n\nconst diffItems = findDiffItems(expectedDeleted, receivedInserted);\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging with @azure/logger in JavaScript\nDESCRIPTION: This snippet demonstrates enabling runtime HTTP request and response logging via the @azure/logger package when using Azure SDKs. By calling setLogLevel('info'), it activates informational logging which is useful for troubleshooting and diagnostics. Assumes the @azure/logger dependency is installed. No direct inputs or outputs, but increases logging verbosity for the Azure SDK.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n----------------------------------------\n\nTITLE: Simulating performance.now with FakeTimers - JavaScript\nDESCRIPTION: Mimics browser performance.now using 'clock.performance.now'. Returns the current high-resolution timestamp of the faked clock. Only available in browser environments. Takes no parameters and returns a number.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nclock.performance.now()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with pure-rand (Unsafe Method) in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of `pure-rand`. It initializes a `xoroshiro128plus` generator with a seed and then uses `unsafeUniformIntDistribution` to generate random integers between 1 and 6 (simulating dice rolls). The `unsafe` prefix indicates that the `rng` instance is modified in place with each call.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pure-rand/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport prand from 'pure-rand';\n\nconst seed = 42;\nconst rng = prand.xoroshiro128plus(seed);\nconst firstDiceValue = prand.unsafeUniformIntDistribution(1, 6, rng); // value in {1..6}, here: 2\nconst secondDiceValue = prand.unsafeUniformIntDistribution(1, 6, rng); // value in {1..6}, here: 4\nconst thirdDiceValue = prand.unsafeUniformIntDistribution(1, 6, rng); // value in {1..6}, here: 6\n```\n\n----------------------------------------\n\nTITLE: Picking a Property from Object Schema using TypeBox and JSON Schema - TypeScript/JSON\nDESCRIPTION: This set of snippets shows how to create a schema or type that selects (picks) a single property from an object schema using TypeBox's Pick functionality, native TypeScript's Pick, and JSON Schema. Requires TypeBox and TypeScript for creation; applicable in contexts where subset schemas are needed (e.g., API validation/subset typing). Only the 'x' property is present and required in the resulting type and schema.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Pick(\n  Type.Object({\n    x: Type.Number(),\n    y: Type.Number()\n  }), ['x']\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = Pick<{\n  x: number,\n  y: number\n}, 'x'>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"x\"],\n  \"properties\": {\n    \"x\": {\n      \"type\": \"number\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode with dotenv.config() in JavaScript\nDESCRIPTION: Shows how to activate debug logging for the `dotenv.config()` function by setting the `debug` option, typically based on an environment variable like `process.env.DEBUG`. This helps in troubleshooting issues with variable loading.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nrequire('dotenv').config({ debug: process.env.DEBUG })\n```\n\n----------------------------------------\n\nTITLE: Formatting with sprintf.js Using Positional Arguments (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of the sprintf function from sprintf.js for string formatting with positional arguments. The format string can interpolate values in any order using positional placeholders (e.g., %2$s). The sprintf function must be available in scope, either globally or imported from the library. Arguments are provided in the order specified in the function call; the output is a formatted string with placeholders substituted by the argument values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\")\n```\n\n----------------------------------------\n\nTITLE: Running the JSON5 CLI Tool\nDESCRIPTION: This command demonstrates invoking the JSON5 CLI utility. The CLI reads the specified file (or STDIN if not provided) and supplies options for conversion or validation. Prerequisite: 'json5' must have been installed globally via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\njson5 [options] <file>\n```\n\n----------------------------------------\n\nTITLE: Requiring raw-body in Node.js (CommonJS) in JavaScript\nDESCRIPTION: Imports the raw-body module into a Node.js project using the CommonJS require syntax. This is the fundamental import required before calling the getRawBody function in your JavaScript application. Ensure raw-body is installed in your project before running this statement.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\nvar getRawBody = require('raw-body')\\n```\n```\n\n----------------------------------------\n\nTITLE: Requiring the media-typer Module - Node.js (JavaScript)\nDESCRIPTION: This snippet shows how to import the 'media-typer' package into your Node.js application using CommonJS require syntax. Make sure 'media-typer' is already installed in your project dependencies. The returned object ('typer') exposes methods for parsing and formatting media types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/media-typer/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar typer = require('media-typer')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @jridgewell/set-array in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to use the `@jridgewell/set-array` library. It imports `SetArray` and helper functions, creates an instance, adds elements using `put` (which returns the index), retrieves an element's index using `get`, accesses the underlying array (`sa.array`), and removes the last added element using `pop`. Assertions (likely from Node.js `assert` module or a testing framework) verify the expected indices and array content.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/set-array/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { SetArray, get, put, pop } from '@jridgewell/set-array';\n\nconst sa = new SetArray();\n\nlet index = put(sa, 'first');\nassert.strictEqual(index, 0);\n\nindex = put(sa, 'second');\nassert.strictEqual(index, 1);\n\nassert.deepEqual(sa.array, [ 'first', 'second' ]);\n\nindex = get(sa, 'first');\nassert.strictEqual(index, 0);\n\npop(sa);\nindex = get(sa, 'second');\nassert.strictEqual(index, undefined);\nassert.deepEqual(sa.array, [ 'first' ]);\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Application with Debugging Enabled in PowerShell\nDESCRIPTION: Demonstrates setting the `DEBUG` environment variable to enable the 'app' namespace and running a Node.js application (`app.js`) in Windows PowerShell.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG='app';node app.js\n```\n\n----------------------------------------\n\nTITLE: Using sprintf.js and vsprintf.js in Node.js (JavaScript)\nDESCRIPTION: Displays sample usage of both the sprintf and vsprintf functions in a Node.js context after importing them from sprintf-js. Each function is demonstrated with a respective call: formatting a string with swapped arguments and formatting with array arguments. This covers both positional and array-based argument substitution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\")\nvsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"])\n```\n\n----------------------------------------\n\nTITLE: Using Source Map Support in Browsers (Direct Include)\nDESCRIPTION: HTML snippet demonstrating how to use the library in a browser environment. It involves including the pre-bundled `browser-source-map-support.js` file via a `<script>` tag and then calling `sourceMapSupport.install()` in another script block.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"browser-source-map-support.js\"></script>\n<script>sourceMapSupport.install();</script>\n```\n\n----------------------------------------\n\nTITLE: Applying RGB Color and Styles with Chalk in JavaScript\nDESCRIPTION: This snippet illustrates applying a foreground color using RGB values (e.g., `15, 100, 204` or `255, 136, 0`) and chaining style methods like `.inverse()` or `.bold()` with the Chalk library. Requires the 'chalk' npm package. The input consists of three integer RGB values and the text to style; the output is an ANSI-escaped string for terminal display.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.rgb(15, 100, 204).inverse('Hello!')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchalk.rgb(255, 136, 0).bold('Orange!')\n```\n\n----------------------------------------\n\nTITLE: Using res.jsonp(status, obj) instead of Deprecated res.jsonp(obj, status) in Express.js\nDESCRIPTION: Shows the deprecation of the `res.jsonp(obj, status)` signature for sending JSONP responses with a specific status code in Express.js. The recommended signature is `res.jsonp(status, obj)`. This aligns JSONP responses with the updated JSON response signature.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// deprecated\nres.jsonp(obj, status)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// use instead\nres.jsonp(status, obj)\n```\n\n----------------------------------------\n\nTITLE: Getting Status Message from Code using status(code)\nDESCRIPTION: Demonstrates using the main `status` function with a numeric or string status code (e.g., 403) to retrieve the corresponding standard HTTP status message ('Forbidden'). Throws an error if the code is unknown (e.g., 306).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nstatus(403) // => 'Forbidden'\nstatus('403') // => 'Forbidden'\nstatus(306) // throws\n```\n\n----------------------------------------\n\nTITLE: Enabling Color Output for Debug in Child Processes (JavaScript)\nDESCRIPTION: Provides an example of spawning a child process in Node.js with the 'DEBUG_COLORS=1' environment variable to ensure colored debug output. This snippet sets up the necessary environment and stdio pipes using fork(), passing the configuration in the 'env' parameter. Input: worker path and config; output: colored stderr forwarded to main process stderr.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nworker = fork(WORKER_WRAP_PATH, [workerPath], {\\n  stdio: [\\n    /* stdin: */ 0,\\n    /* stdout: */ 'pipe',\\n    /* stderr: */ 'pipe',\\n    'ipc',\\n  ],\\n  env: Object.assign({}, process.env, {\\n    DEBUG_COLORS: 1 // without this settings, colors won't be shown\\n  }),\\n});\\n\\nworker.stderr.pipe(process.stderr, { end: false });\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Replit Secrets in Node.js (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to access an environment variable named `AZURE_OPENAI_KEY` within a Node.js application. In the context of Replit, this variable would typically hold the Azure OpenAI API key securely stored using Replit Secrets.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.AZURE_OPENAI_KEY\n```\n\n----------------------------------------\n\nTITLE: Running All Microtasks with FakeTimers - JavaScript\nDESCRIPTION: Executes all pending microtasks created by 'nextTick' with 'clock.runMicrotasks'. Takes no parameters and returns when all scheduled microtasks are complete. Used in integration testing with libraries that queue microtasks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nclock.runMicrotasks()\n```\n\n----------------------------------------\n\nTITLE: Setting File Encoding with dotenv.config() in JavaScript\nDESCRIPTION: Illustrates how to use the `encoding` option in `dotenv.config()` to specify the character encoding (e.g., 'latin1') for the `.env` file being read. The default encoding is 'utf8'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nrequire('dotenv').config({ encoding: 'latin1' })\n```\n\n----------------------------------------\n\nTITLE: Detecting CI Environment with ci-info in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `ci-info` library after installation. It requires the library, checks the boolean `ci.isCI` property to determine if the code is running within a CI server, and logs either the CI server's name (using `ci.name`) or a message indicating it's not a CI environment. This requires the `ci-info` module to be installed in the Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ci-info/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ci = require('ci-info')\n\nif (ci.isCI) {\n  console.log('The name of the CI server is:', ci.name)\n} else {\n  console.log('This program is not running on a CI server')\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Yes/No User Input with yn in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates loading the 'yn' library in a Node.js environment and parsing several user input examples, both strict and lenient. It shows how the function returns boolean values for recognized inputs, null for unrecognized ones, and how to specify default and lenient behavior via options. Dependency: 'yn' package must be installed. Inputs include simple strings (e.g., 'y', 'NO'), booleans, and strings with typos. The function's output varies: boolean, null, or a preset default, depending on input and options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yn/readme.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n&#96;&#96;&#96;js\\nconst yn = require('yn');\\n\\nyn('y');\\n//=> true\\n\\nyn('NO');\\n//=> false\\n\\nyn(true);\\n//=> true\\n\\nyn('abomasum');\\n//=> null\\n\\nyn('abomasum', {default: false});\\n//=> false\\n\\nyn('mo', {lenient: true});\\n//=> false\\n&#96;&#96;&#96;\n```\n\n----------------------------------------\n\nTITLE: Vulnerable WebSocket Echo Server with Unchecked Buffer Usage - JavaScript\nDESCRIPTION: Implements a WebSocket server that echoes user-supplied data without validating its type before sending. If 'message.data' is a number, using socket.send leaks uninitialized memory. Depends on the structure of the 'ws' package event model and expects messages to be JSON-encoded objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nserver.on('connection', function (socket) {\\n  socket.on('message', function (message) {\\n    message = JSON.parse(message)\\n    if (message.type === 'echo') {\\n      socket.send(message.data) // send back the user's message\\n    }\\n  })\\n})\\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Pipeline Interface in TypeScript\nDESCRIPTION: This snippet defines the `Pipeline` interface in TypeScript. It outlines methods for managing `PipelinePolicy` objects, such as adding (`addPolicy`), removing (`removePolicy`), retrieving the ordered list of policies (`getOrderedPolicies`), creating a copy (`clone`), and executing the request through the configured policies and `HttpClient` (`sendRequest`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-rest-pipeline/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  PipelinePolicy,\n  AddPipelineOptions,\n  PipelinePhase,\n  HttpClient,\n  PipelineRequest,\n  PipelineResponse,\n} from \"@azure/core-rest-pipeline\";\n\ninterface Pipeline {\n  addPolicy(policy: PipelinePolicy, options?: AddPipelineOptions): void;\n  removePolicy(options: { name?: string; phase?: PipelinePhase }): PipelinePolicy[];\n  sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse>;\n  getOrderedPolicies(): PipelinePolicy[];\n  clone(): Pipeline;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Target Directory with require-directory (JavaScript)\nDESCRIPTION: Demonstrates how to use `require-directory` to load modules from a specific subdirectory (e.g., './some/subdirectory') relative to the current file, instead of the default behavior of using the current directory. The path is passed as the second argument.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory');\nmodule.exports = requireDirectory(module, './some/subdirectory');\n```\n\n----------------------------------------\n\nTITLE: Parsing with cjs-module-lexer in ESM & WASM context (JavaScript)\nDESCRIPTION: Shows how to use cjs-module-lexer in an ES module environment, utilizing both the asynchronous init and parse APIs. Wasm is supported in this form for improved performance. The example imports, initializes the lexer asynchronously, and calls the parse function on a 'source' variable. Dependencies: cjs-module-lexer (ESM), an available JavaScript source string, and optionally the synchronous initSync() if blocking initialization is desired. The parse result includes arrays of export names and reexports extracted from the analyzed source.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { parse, init } from 'cjs-module-lexer';\n// init() needs to be called and waited upon, or use initSync() to compile\n// Wasm blockingly and synchronously.\nawait init();\nconst { exports, reexports } = parse(source);\n```\n\n----------------------------------------\n\nTITLE: Tokenizing JavaScript Code Using Acorn - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to iterate over tokens produced by Acorn\\'s tokenizer API using a for-of loop. It requires the input JavaScript code as a string, and Acorn installed in the project. This example shows how to process each token or to transform the iterable result of tokenizer into an array of tokens in modern ES6 environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let token of acorn.tokenizer(str)) {\n  // iterate over the tokens\n}\n\n// transform code to array of tokens:\nvar tokens = [...acorn.tokenizer(str)];\n\n```\n\n----------------------------------------\n\nTITLE: Executing Current Package Binary using Execa and get-bin-path in JavaScript\nDESCRIPTION: Illustrates how to dynamically find and execute the binary executable defined in the current project's `package.json` file using `execa`. It utilizes the `get-bin-path` package to resolve the binary path, ensuring the `bin` field is correctly configured, and then passes this path to `execa` for execution. Requires `execa` and `get-bin-path` dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/execa/readme.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst {getBinPathSync} = require('get-bin-path');\n\nconst binPath = getBinPathSync();\nconst subprocess = execa(binPath);\n```\n\n----------------------------------------\n\nTITLE: Creating Prototype Error Hierarchies using makeerror in JavaScript\nDESCRIPTION: Illustrates setting up an error class inheritance (prototype hierarchy) with makeerror, where ChildError extends ParentError. Each error retains its own name and message while instances reflect the inheritance chain (instanceof checks). Dependencies: Node.js and the 'makeerror' library. The main parameters are parent error instances passed via the proto property; the outputs are hierarchical Error instances enabling granular error discrimination.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/makeerror/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar makeError = require('makeerror')\nvar ParentError = makeError('ParentError')\nvar ChildError = makeError(\n  'ChildError',\n  'The child error.',\n  { proto: ParentError() }\n)\nvar er = ChildError()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ner instanceof ChildError\ner instanceof ParentError\ner instanceof Error\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in Windows PowerShell (PowerShell)\nDESCRIPTION: Sets the `DEBUG` environment variable using Windows PowerShell syntax. This example enables all debug namespaces (`*`) except for the one named 'not_this' (`-not_this`). Note the use of `$env:` prefix and required quotes around the value.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG = \"*,-not_this\"\n```\n\n----------------------------------------\n\nTITLE: Installing type-fest Package Using npm - Shell\nDESCRIPTION: Demonstrates the command needed to install the 'type-fest' package from npm. Requires Node.js and NPM to be installed. No input parameters are required; simply run this command in a terminal at your project root to add 'type-fest' as a dependency. After execution, 'type-fest' will appear in your project's package.json dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ npm install type-fest\\n\"\n```\n\n----------------------------------------\n\nTITLE: Callback-based Client Acquisition for Backwards Compatibility (Node.js)\nDESCRIPTION: Provides legacy-style callback API for acquiring Pool clients and running queries. Shows migration path and interoperability with older node-postgres codebases. Ensures client release with the callback pattern. Dependencies: 'pg-pool'. Handles query and connection errors robustly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\npool.connect((err, client, done) => {\n  if (err) return done(err)\n\n  client.query('SELECT $1::text as name', ['pg-pool'], (err, res) => {\n    done()\n    if (err) {\n      return console.error('query error', err.message, err.stack)\n    }\n    console.log('hello from', res.rows[0].name)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Escaping Arrays and Objects with jsesc (JavaScript)\nDESCRIPTION: Shows how `jsesc` can stringify and escape arrays and objects. It processes the contents recursively, escaping strings within the data structures. By default, it uses single quotes for strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Escaping an array\njsesc([\n  'Ich ♥ Bücher', 'foo 𝌆 bar'\n]);\n// → '[\\'Ich \\\\u2665 B\\\\xFCcher\\',\\'foo \\\\uD834\\\\uDF06 bar\\']'\n\n// Escaping an object\njsesc({\n  'Ich ♥ Bücher': 'foo 𝌆 bar'\n});\n// → '{\\'Ich \\\\u2665 B\\\\xFCcher\\':\\'foo \\\\uD834\\\\uDF06 bar\\'}'\n```\n\n----------------------------------------\n\nTITLE: Using createPathsMatcher for Path Alias Resolution\nDESCRIPTION: Illustrates how to use the `createPathsMatcher` function to handle TypeScript path aliases defined in `compilerOptions.paths`. It first obtains the `tsconfig` result, then creates a `pathsMatcher` function using `createPathsMatcher`. The example shows a conceptual resolver function that uses `pathsMatcher` to get potential file paths (`tryPaths`) for a given import `request`, which can then be checked for existence by the resolver logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTsconfig, createPathsMatcher } from 'get-tsconfig'\n\nconst tsconfig = getTsconfig()\nconst pathsMatcher = tsconfig && createPathsMatcher(tsconfig)\n\nconst exampleResolver = (request: string) => {\n    if (pathsMatcher) {\n        const tryPaths = pathsMatcher(request)\n\n        // Check if paths in `tryPaths` exist\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling PWA Support with Service Worker and Init Call - JavaScript\nDESCRIPTION: Add a service-worker.js or Workbox configuration in the public/ folder, and call initializePWA() from App.tsx or main.tsx in your React project. This setup registers the service worker to support offline access and updates. Ensure dependencies are met per your chosen PWA library; service workers may require HTTPS and manifest configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// public/service-worker.js\nself.addEventListener('install', (event) => {\n  // Cache assets logic...\n});\n\n// main.tsx or App.tsx\nimport { initializePWA } from './pwa-init';\ninitializePWA();\n```\n\n----------------------------------------\n\nTITLE: Getting String Representation of a SourceNode in JavaScript\nDESCRIPTION: Demonstrates the `SourceNode.prototype.toString` method. It traverses the SourceNode tree and concatenates all generated code snippets into a single output string, discarding source map information.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.js\", [\n  new SourceNode(3, 4, \"b.js\", \"uno\"),\n  \"dos\",\n  [\n    \"tres\",\n    new SourceNode(5, 6, \"c.js\", \"quatro\")\n  ]\n]);\n\nnode.toString()\n// 'unodostresquatro'\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays of Lines with diffLinesRaw in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to compare two arrays of strings using the diffLinesRaw function from the jest-diff package. The function analyzes differences line-by-line, marking deletions, insertions, and common lines. Inputs aLines and bLines are simple string arrays, and the output is an array of diff tuples. No external dependencies are required beyond jest-diff.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst aLines = ['delete', 'common', 'changed from'];\\nconst bLines = ['common', 'changed to', 'insert'];\\n\\nconst diffs = diffLinesRaw(aLines, bLines);\n```\n\n----------------------------------------\n\nTITLE: Generating Browserslist Query from Electron Version with electronToBrowserList (Node.js, Deprecated)\nDESCRIPTION: Uses electronToBrowserList to generate a Browserslist query reflecting the minimum required Chrome version for a specified Electron version. Deprecated as Browserslist now includes electron-to-chromium. Returns a string or undefined for out-of-bounds queries; e2c must be present.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar query = e2c.electronToBrowserList('1.4');\n// query is \"Chrome >= 53\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'strip-aliased' Behavior in Node.js CLI Parsing (Enabled)\nDESCRIPTION: This console example shows the output when the `strip-aliased` option is enabled. The resulting arguments object excludes the alias keys (`test-alias`, `testAlias`), retaining only the primary keys (`test-field`, `testField`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n----------------------------------------\n\nTITLE: Creating an Express Application Instance\nDESCRIPTION: Illustrates the standard and current way to create an Express application instance by invoking the `express()` function directly. This replaced the deprecated `express.createServer()` method in Express 4.0.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexpress()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Semver Specification Version in JavaScript\nDESCRIPTION: Illustrates how to access and display the current semver specification version implemented by the 'semver' package. Requires the 'semver' dependency and outputs the version string from the SEMVER_SPEC_VERSION constant. This is useful for determining which version of the semver spec is currently supported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver');\n\nconsole.log('We are currently using the semver specification version:', semver.SEMVER_SPEC_VERSION);\n```\n\n----------------------------------------\n\nTITLE: Stopping the findUp Search Prematurely in Node.js\nDESCRIPTION: Illustrates how to use the `findUp.stop` symbol within an asynchronous matcher function provided to `findUp`. The matcher checks if the base name of the current directory being checked is 'work'. If it is, the function returns `findUp.stop`, causing the search to terminate immediately and `findUp` to resolve to `undefined`. Otherwise, it attempts to find 'logo.png'. This is a performance optimization technique. Requires the `path` and `find-up` modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/find-up/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst findUp = require('find-up');\n\n(async () => {\n\tawait findUp(directory => {\n\t\treturn path.basename(directory) === 'work' ? findUp.stop : 'logo.png';\n\t});\n})();\n```\n\n----------------------------------------\n\nTITLE: Module Exports Object Assignment Detection (JavaScript)\nDESCRIPTION: Demonstrates detection of named exports when 'module.exports' is assigned a simple object literal, including support for identifiers, string literal properties, and property spreads. The example underscores that only straightforward object definitions are detected. No dependencies other than standard Node.js environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS EXPORTS: a, b, c\nmodule.exports = {\n  a,\n  'b': b,\n  c: c,\n  ...d\n};\n```\n\n----------------------------------------\n\nTITLE: Normalizing File Paths with normalize-path in JavaScript\nDESCRIPTION: Shows how to import the normalize-path package and use it to convert Windows-style backslashes in file paths to Unix-style forward slashes, also removing consecutive and trailing slashes for consistency. Requires that normalize-path is installed as a project dependency. The function accepts a file path as input and returns a normalized version as output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/normalize-path/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst normalize = require('normalize-path');\n\nconsole.log(normalize('\\\\foo\\\\bar\\\\baz\\\\')); \n//=> '/foo/bar/baz'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'strip-dashed' Behavior in Node.js CLI Parsing (Enabled)\nDESCRIPTION: This console example shows the output when the `strip-dashed` option is enabled and `camel-case-expansion` is also enabled. The resulting arguments object excludes the original dashed key (`test-field`), retaining only the camel-cased version (`testField`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n----------------------------------------\n\nTITLE: Using Chalk with console.log String Substitution in JavaScript\nDESCRIPTION: Illustrates how to combine 'chalk' styling with Node.js's built-in `console.log` string substitution feature (using `%s`). The style (`chalk.green`) is applied to the format string, and the variable `name` is substituted into it. Requires the 'chalk' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = 'Sindre';\nconsole.log(chalk.green('Hello %s'), name);\n//=> 'Hello Sindre'\n```\n\n----------------------------------------\n\nTITLE: Simulating process.hrtime with FakeTimers - JavaScript\nDESCRIPTION: Provides a mock of Node.js process.hrtime using 'clock.hrtime'. Optionally takes a previous time array and returns a difference. Only available in Node.js environments. Used for high-resolution time measurements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nclock.hrtime(prevTime?)\n```\n\n----------------------------------------\n\nTITLE: Installing TypeBox via npm - Bash\nDESCRIPTION: Installs the TypeBox npm package and saves it to the project's dependencies. This snippet is executed in a terminal and is required to use TypeBox in Node.js or any project using npm for package management.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @sinclair/typebox --save\n```\n\n----------------------------------------\n\nTITLE: Escaping a Local JSON File using jsesc CLI in Bash\nDESCRIPTION: Provides an example of using the jsesc command-line tool in Bash to process a local JSON file ('data-raw.json'). It uses input redirection (<) to read the file, applies JSON escaping ('--json --object'), and output redirection (>) to save the result to 'data-escaped.json'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ jsesc --json --object < data-raw.json > data-escaped.json\n```\n\n----------------------------------------\n\nTITLE: Using web-streams-polyfill Ponyfill in Node.js (CommonJS)\nDESCRIPTION: This JavaScript snippet illustrates how to use the ponyfill version of `web-streams-polyfill` within a Node.js environment using the CommonJS module system. It imports the stream implementations using `require('web-streams-polyfill/ponyfill')` and then instantiates a `ReadableStream` by accessing it as a property of the imported `streams` object (`streams.ReadableStream`). This approach avoids modifying the global scope.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/web-streams-polyfill/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar streams = require(\"web-streams-polyfill/ponyfill\");\nvar readable = new streams.ReadableStream();\n```\n\n----------------------------------------\n\nTITLE: Playing Achievement Animation Effects with Customization (TypeScript)\nDESCRIPTION: Implements an animation engine utility supporting achievement and celebration effects, with customizable parameters such as duration, particle shape, color, and attached DOM elements. This snippet depends on a confetti library, utility functions for parameter merging (mergeParams), and getColors, assumed to exist in the utils directory. Core parameters include the type of animation, callback options, and element/message handling for dynamic UI feedback. Inputs include option objects, expected to conform to the AnimationParams type, and outputs are in the form of UI animations on the page. Limitations include dependency on the provided confetti utility and the presence of HTML elements for visual effects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultParams: AnimationParams = {\n  type: 'random',\n  duration: 2000,\n  particleCount: 100,\n  particleType: 'circle',\n  colors: ['#5D8EFF', '#FF5D5D', '#5DFF8E', '#FF8E5D', '#8E5DFF'],\n  colorScheme: 'rainbow',\n  spread: 100,\n  startVelocity: 30,\n  decay: 0.9,\n  timingFunction: 'ease-out'\n};\n\nconst playAchievementAnimation = (params: AnimationParams = {}): void => {\n  const options = mergeParams(params);\n  // Play a confetti effect first\n  confetti({\n    particleCount: options.particleCount || 150,\n    spread: 120,\n    startVelocity: 40,\n    colors: getColors(options),\n    ticks: Math.floor(options.duration ? options.duration / 50 : 50)\n  });\n  if (options.element) {\n    options.element.style.transition = 'all 0.5s ease-in-out';\n    options.element.style.boxShadow = '0 0 20px 10px rgba(255, 215, 0, 0.7)';\n    options.element.style.transform = 'scale(1.05)';\n    setTimeout(() => {\n      options.element.style.boxShadow = '';\n      options.element.style.transform = '';\n    }, options.duration || 2000);\n    if (options.message) {\n      const messageEl = document.createElement('div');\n      messageEl.textContent = options.message;\n      messageEl.style.position = 'fixed';\n      messageEl.style.top = '30%';\n      messageEl.style.left = '50%';\n      messageEl.style.transform = 'translate(-50%, -50%) scale(0.5)';\n      messageEl.style.padding = '15px 30px';\n      messageEl.style.borderRadius = '10px';\n      messageEl.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      messageEl.style.color = '#FFD700';\n      messageEl.style.fontWeight = 'bold';\n      messageEl.style.fontSize = '24px';\n      messageEl.style.textAlign = 'center';\n      messageEl.style.zIndex = '9999';\n      messageEl.style.opacity = '0';\n      messageEl.style.transition = 'all 0.5s ease-out';\n      document.body.appendChild(messageEl);\n      setTimeout(() => {\n        messageEl.style.opacity = '1';\n        messageEl.style.transform = 'translate(-50%, -50%) scale(1)';\n      }, 100);\n      setTimeout(() => {\n        messageEl.style.opacity = '0';\n        messageEl.style.transform = 'translate(-50%, -50%) scale(1.2)';\n        setTimeout(() => {\n          document.body.removeChild(messageEl);\n        }, 500);\n      }, (options.duration || 2000) - 500);\n    }\n  }\n};\n\nexport const playAnimation = (params: AnimationParams = {}): void => {\n  const options = mergeParams(params);\n  if (options.type === 'random') {\n    options.type = randomFrom(['confetti', 'stars', 'circles', 'fireworks', 'achievement', 'celebrate', 'success']);\n  }\n  switch (options.type) {\n    case 'confetti':\n      confetti({\n        particleCount: options.particleCount || 100,\n        spread: options.spread || 70,\n        origin: { y: 0.6 },\n        colors: getColors(options),\n        disableForReducedMotion: true,\n        startVelocity: options.startVelocity,\n        ticks: Math.floor(options.duration ? options.duration / 50 : 50)\n      });\n      break;\n    case 'achievement':\n    case 'celebrate':\n    case 'success':\n    case 'levelUp':\n    case 'rewardUnlocked':\n      playAchievementAnimation(options);\n      break;\n    default:\n      console.warn(`Animation type '${options.type}' not found, defaulting to confetti`);\n      confetti({\n        particleCount: options.particleCount || 100,\n        spread: options.spread || 70,\n        origin: { y: 0.6 },\n        colors: getColors(options),\n        disableForReducedMotion: true,\n        startVelocity: options.startVelocity,\n        ticks: Math.floor(options.duration ? options.duration / 50 : 50)\n      });\n      break;\n  }\n};\nexport { playAchievementAnimation };\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of istanbul-lib-coverage in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the basic usage of the `istanbul-lib-coverage` library. It shows how to require the library, create a coverage map from a global variable (`globalCoverageVar`), create an empty coverage summary, merge another coverage map (`otherCoverageMap`), iterate over the files in the merged map, get individual file coverage, generate a summary for each file, merge the file summary into the global summary, and finally log the global summary. It requires the `istanbul-lib-coverage` package to be installed and assumes the existence of `globalCoverageVar` and `otherCoverageMap` objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-coverage/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar libCoverage = require('istanbul-lib-coverage');\nvar map = libCoverage.createCoverageMap(globalCoverageVar);\nvar summary = libCoverage.createCoverageSummary();\n\n// merge another coverage map into the one we created\nmap.merge(otherCoverageMap);\n\n// inspect and summarize all file coverage objects in the map\nmap.files().forEach(function(f) {\n    var fc = map.fileCoverageFor(f),\n        s = fc.toSummary();\n    summary.merge(s);\n});\n\nconsole.log('Global summary', summary);\n```\n\n----------------------------------------\n\nTITLE: Checking for and Using Local Package Version with `import-local` (ESM)\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `import-local` package within an ES Module context. It imports the function and calls it with `import.meta.url` to check if a locally installed version of the current package exists and should be preferred over a globally installed one. If a local version is found and executed, `importLocal` returns true; otherwise, it returns false, allowing the global version's code to run. The example logs a message indicating if the local version is being used. The surrounding text mentions `__filename` can be used instead of `import.meta.url` in CommonJS modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/import-local/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport importLocal from 'import-local';\n\nif (importLocal(import.meta.url)) {\n\tconsole.log('Using local version of this package');\n} else {\n\t// Code for both global and local version here…\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Extended Glob Matching with `noextglob` in Micromatch (JavaScript)\nDESCRIPTION: Compares `micromatch` behavior with and without the `noextglob: true` option. When `noextglob` is true, extended glob patterns like `!(z)` are treated as literal strings instead of their special negative matching behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(micromatch(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)'));\n//=> ['a/b', 'a/!(z)']\n\nconsole.log(micromatch(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)', { noextglob: true }));\n//=> ['a/!(z)'] (matches only as literal characters)\n```\n\n----------------------------------------\n\nTITLE: Configuring Strong ETag Generation in Express.js\nDESCRIPTION: Illustrates setting the Express application to use strong ETag generation via `app.set('etag', 'strong')`. Strong ETags indicate that the resource content is byte-for-byte identical. Mentioned in version 4.4.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('etag', 'strong')\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease omitting number using semver CLI\nDESCRIPTION: Shows the command-line equivalent of incrementing to a prerelease version using the `semver` CLI, specifying the identifier with `--preid beta` and omitting the prerelease number using the `-n false` flag, resulting in '1.2.4-beta'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta -n false\n1.2.4-beta\n```\n\n----------------------------------------\n\nTITLE: Implementing Streak Increment Logic with Rewards in JSX\nDESCRIPTION: This JSX snippet provides example logic for handling user streak increments within a React component. It assumes state management functions (`streakCount`, `setStreakCount`) and interaction functions (`triggerAnimation`, `awardBadge`) are available. The code increments the streak, triggers a 'fireworks' animation via `triggerAnimation` on 5-day milestones, and awards a specific badge ('commitment-champion') using `awardBadge` when the 10-day milestone is reached.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst incrementStreak = () => {\n  // Update streak count\n  const newStreak = streakCount + 1;\n  setStreakCount(newStreak);\n  \n  // Handle milestone achievements\n  if (newStreak % 5 === 0) {\n    // Trigger celebratory animation\n    triggerAnimation('fireworks', `${newStreak} Day Streak! Keep it up!`);\n  }\n  \n  // Award badges at specific milestones\n  if (newStreak === 10) {\n    awardBadge('commitment-champion');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding the int8 Type Parser in Node-Postgres JavaScript\nDESCRIPTION: Demonstrates how to override the type parser for the Postgres int8 (OID 20) type so values are returned as JavaScript integers using parseInt. This assumes values do not exceed JavaScript's safe integer range. It uses types.setTypeParser with the int8 OID, applying a simple conversion from string to integer. The dependency is node-postgres (pg), and correct OID usage is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-types/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar types = require('pg').types\ntypes.setTypeParser(20, function(val) {\n  return parseInt(val)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for React Fragments (React, JavaScript)\nDESCRIPTION: Examines if a given JSX fragment is recognized as a React Fragment using react-is. The example demonstrates both isFragment and typeOf checks. It depends on react and react-is, takes JSX fragment input, and returns booleans for validation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/react-is/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport React from \\\"react\\\";\\nimport * as ReactIs from 'react-is';\\n\\nReactIs.isFragment(<></>); // true\\nReactIs.typeOf(<></>) === ReactIs.Fragment; // true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caller Filename using 'callsites' in Node.js\nDESCRIPTION: This JavaScript example demonstrates the basic usage of the 'callsites' library. It requires the module and then calls the `callsites()` function within another function (`unicorn`) to get an array representing the current call stack. Accessing the first element (`[0]`) provides the callsite object for the immediate caller (`unicorn` itself in this context relative to the `callsites()` call), and the `getFileName()` method retrieves the path to the file where the `unicorn` function was called.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/callsites/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst callsites = require('callsites');\n\nfunction unicorn() {\n\tconsole.log(callsites()[0].getFileName());\n\t//=> '/Users/sindresorhus/dev/callsites/test.js'\n}\n\nunicorn();\n```\n\n----------------------------------------\n\nTITLE: Checking If a Debug Instance Is Enabled with the Debug Module in JavaScript\nDESCRIPTION: This snippet illustrates how to require a debug instance for a specific namespace and check if debugging is active via the 'enabled' property. The example is meant for Node.js with the 'debug' module installed. Callers may use 'debug.enabled' in conditional logic to optimize performance by avoiding unnecessary computation unless debugging is enabled. No outputs occur unless the body of the condition executes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst debug = require('debug')('http');\\n\\nif (debug.enabled) {\\n  // do stuff...\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Querying MIME Types with mime - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'mime' module to look up MIME types based on file paths or extensions using the 'lookup' method. It requires the 'mime' package to be installed via npm. It shows case-insensitive lookup and works with paths as well as just extensions. Input is a file path or extension, output is the corresponding MIME type as a string or 'application/octet-stream' if not found.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mime = require('mime');\n\nmime.lookup('/path/to/file.txt');         // => 'text/plain'\nmime.lookup('file.txt');                  // => 'text/plain'\nmime.lookup('.TXT');                      // => 'text/plain'\nmime.lookup('htm');                       // => 'text/html'\n```\n\n----------------------------------------\n\nTITLE: Detecting Null Type with type-detect (JavaScript)\nDESCRIPTION: Shows how `type-detect` specifically identifies the `null` value, distinguishing it from `undefined`. It uses `assert` to check that `type(null)` returns 'null' and `type(undefined)` does not. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type(null) === 'null');\nassert(type(undefined) !== 'null');\n```\n\n----------------------------------------\n\nTITLE: Triggering Success Animations in React JSX\nDESCRIPTION: Shows how to invoke the `triggerAnimation` function, typically sourced from the `useMicroInteractions` context, to provide visual feedback. It requires specifying the animation `type` (e.g., 'confetti', 'stars', 'fireworks') and a `message` to display alongside the animation, celebrating user achievements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/DEVELOPMENT_LOG.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Trigger an animation\ntriggerAnimation(type, message);\n\n// Example\ntriggerAnimation('confetti', 'Congratulations on your 5-day streak!');\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Hex Formatter to the debug Library (JavaScript)\nDESCRIPTION: Extends the `debug.formatters` object to add a custom formatter '%h'. This formatter converts Buffer objects to their hexadecimal string representation when used in debug messages. Requires the 'debug' library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ansi-styles in JavaScript\nDESCRIPTION: This snippet shows how to import the `ansi-styles` library and use its properties (`style.green.open`, `style.green.close`) to wrap a string with ANSI escape codes for green text. It also demonstrates converting HSL, RGB, and HEX colors to their closest ANSI 16, 256, or 16 million color representations for background and foreground styling, noting potential color degradation in terminals with limited color support. Requires the `ansi-styles` module installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-styles/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst style = require('ansi-styles');\n\nconsole.log(`${style.green.open}Hello world!${style.green.close}`);\n\n\n// Color conversion between 16/256/truecolor\n// NOTE: If conversion goes to 16 colors or 256 colors, the original color\n//       may be degraded to fit that color palette. This means terminals\n//       that do not support 16 million colors will best-match the\n//       original color.\nconsole.log(style.bgColor.ansi.hsl(120, 80, 72) + 'Hello world!' + style.bgColor.close);\nconsole.log(style.color.ansi256.rgb(199, 20, 250) + 'Hello world!' + style.color.close);\nconsole.log(style.color.ansi16m.hex('#abcdef') + 'Hello world!' + style.color.close);\n```\n\n----------------------------------------\n\nTITLE: Using resolve Function in JavaScript\nDESCRIPTION: Demonstrates how to import the `resolve` function from the `@jridgewell/resolve-uri` package and use it in a JavaScript environment. The example shows resolving a relative path 'foo' against a base URL 'https://example.com'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/resolve-uri/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport resolve from '@jridgewell/resolve-uri';\n\nresolve('foo', 'https://example.com'); // => 'https://example.com/foo'\n```\n\n----------------------------------------\n\nTITLE: Using Preferred res.jsonp(status, obj) Signature in Express.js\nDESCRIPTION: Shows the preferred signature `res.jsonp(status, obj)` for sending a JSONP response with a specific status code, as recommended from Express 4.2.0 onwards.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nres.jsonp(status, obj)\n```\n\n----------------------------------------\n\nTITLE: Detecting Date Objects with type-detect (JavaScript)\nDESCRIPTION: Shows detection of `Date` objects using `type-detect`. It uses `assert` to ensure `type()` returns 'Date' for an object created with the `Date` constructor. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type(new Date) === 'Date');\n```\n\n----------------------------------------\n\nTITLE: Defining a Docblock with Pragma Arguments in JavaScript\nDESCRIPTION: Demonstrates a JavaScript docblock where a pragma (`@myPragma`) includes arguments ('it is so cool'). `jest-docblock` can parse these pragmas and their associated values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-docblock/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Check this out:\n *\n * @myPragma it is so cool\n */\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Test Suites using each.describe.skip in JavaScript\nDESCRIPTION: This snippet shows how to skip an entire suite of parameterized tests using 'each.describe.skip' (or its aliases). Within a Jest-like or compatible test runner, this prevents all tests in the suite from being executed. Parameters and expectations are as in other examples, but test results are reported as skipped.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Invisible Input Prompt for Passwords - JavaScript\nDESCRIPTION: Configures a prompt that accepts invisible text input, similar to 'sudo' prompts where nothing is displayed as the user types. The prompt uses 'type' set to 'invisible' and is ideal for ultra-secure password entry or scenarios where masking is insufficient. Used within the prompts library, it supports further customization via callbacks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n{\\n  type: 'invisible',\\n  name: 'value',\\n  message: 'Enter password'\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Addresses from Byte Arrays - JavaScript\nDESCRIPTION: Demonstrates creating both IPv4 and IPv6 address objects from byte arrays using fromByteArray. The input must be an array of 4 numbers (IPv4) or 16 numbers (IPv6), each 0-255. Output is a string representation of the address.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.fromByteArray([0x7f, 0, 0, 1]);\naddr.toString(); // => \"127.0.0.1\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.fromByteArray([0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\naddr.toString(); // => \"2001:db8::1\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Module Execution Types in tsconfig.json (JSONC)\nDESCRIPTION: Demonstrates using the `moduleTypes` option within the `ts-node` configuration block in `tsconfig.json` to force specific files or globs (like `webpack.config.ts` or `webpack-config-scripts/**/*`) to be compiled and executed as CommonJS (`cjs`). This is useful when project defaults (e.g., `\\\"type\\\": \\\"module\\\"` in `package.json` and `\\\"module\\\": \\\"esnext\\\"` in `tsconfig.json`) would otherwise treat these files as ESM. Other options include `esm` and `package` (default).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_32\n\nLANGUAGE: jsonc\nCODE:\n```\n```jsonc title=\"tsconfig.json\"\n{\n  \"ts-node\": {\n    \"transpileOnly\": true,\n    \"moduleTypes\": {\n      \"webpack.config.ts\": \"cjs\",\n      // Globs are also supported with the same behavior as tsconfig \"include\"\n      \"webpack-config-scripts/**/*\": \"cjs\"\n    }\n  },\n  \"compilerOptions\": {\n    \"module\": \"es2020\",\n    \"target\": \"es2020\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions for Sinon.js Fake Timers in Shell\nDESCRIPTION: This shell snippet demonstrates how to add TypeScript type definitions for the @sinonjs/fake-timers package using npm. It is intended for projects that use TypeScript or require IntelliSense support in IDEs. The @types package provides enhanced static type safety without modifying the JavaScript source code directly, and it should be installed as a development dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @types/sinonjs__fake-timers\n```\n\n----------------------------------------\n\nTITLE: Importing Individual semver Functions/Classes (JavaScript)\nDESCRIPTION: Explains that users can either load the entire `semver` API at once or import specific functions and classes individually (like `SemVer`, `Comparator`, `Range`, `semverParse`, `semverSatisfies`, etc.) to optimize application size. This requires the `semver` package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// load the whole API at once in a single object\nconst semver = require('semver')\n\n// or just load the bits you need\n// all of them listed here, just pick and choose what you want\n\n// classes\nconst SemVer = require('semver/classes/semver')\nconst Comparator = require('semver/classes/comparator')\nconst Range = require('semver/classes/range')\n\n// functions for working with versions\nconst semverParse = require('semver/functions/parse')\nconst semverValid = require('semver/functions/valid')\nconst semverClean = require('semver/functions/clean')\nconst semverInc = require('semver/functions/inc')\nconst semverDiff = require('semver/functions/diff')\nconst semverMajor = require('semver/functions/major')\nconst semverMinor = require('semver/functions/minor')\nconst semverPatch = require('semver/functions/patch')\nconst semverPrerelease = require('semver/functions/prerelease')\nconst semverCompare = require('semver/functions/compare')\nconst semverRcompare = require('semver/functions/rcompare')\nconst semverCompareLoose = require('semver/functions/compare-loose')\nconst semverCompareBuild = require('semver/functions/compare-build')\nconst semverSort = require('semver/functions/sort')\nconst semverRsort = require('semver/functions/rsort')\n\n// low-level comparators between versions\nconst semverGt = require('semver/functions/gt')\nconst semverLt = require('semver/functions/lt')\nconst semverEq = require('semver/functions/eq')\nconst semverNeq = require('semver/functions/neq')\nconst semverGte = require('semver/functions/gte')\nconst semverLte = require('semver/functions/lte')\nconst semverCmp = require('semver/functions/cmp')\nconst semverCoerce = require('semver/functions/coerce')\n\n// working with ranges\nconst semverSatisfies = require('semver/functions/satisfies')\nconst semverMaxSatisfying = require('semver/ranges/max-satisfying')\nconst semverMinSatisfying = require('semver/ranges/min-satisfying')\nconst semverToComparators = require('semver/ranges/to-comparators')\nconst semverMinVersion = require('semver/ranges/min-version')\nconst semverValidRange = require('semver/ranges/valid')\nconst semverOutside = require('semver/ranges/outside')\nconst semverGtr = require('semver/ranges/gtr')\nconst semverLtr = require('semver/ranges/ltr')\nconst semverIntersects = require('semver/ranges/intersects')\nconst semverSimplifyRange = require('semver/ranges/simplify')\nconst semverRangeSubset = require('semver/ranges/subset')\n```\n\n----------------------------------------\n\nTITLE: Initializing React Frontend App using Create React App (Shell)\nDESCRIPTION: This shell command uses `npx` to execute the `create-react-app` package, scaffolding a new React project named `decaide-frontend` within the Replit environment. This command bootstraps a standard React application structure, providing a starting point for building the user interface. Requires Node.js and npm/npx to be available in the Replit environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app decaide-frontend\n```\n\n----------------------------------------\n\nTITLE: Duplicate Exported Identifier Error Message for toString in JavaScript\nDESCRIPTION: Displays the error message generated when attempting to export 'toString' multiple times from the same module, as would appear in a Bash terminal. No dependencies needed. Inputs are export statements with conflicting names; output is the error message for duplication.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n`toString` has already been exported. Exported identifiers must be unique. (1:7)\\n> 1 | export toString from './toString';\\n    |        ^\\n  2 |\n```\n\n----------------------------------------\n\nTITLE: Installing raw-body via npm in Shell\nDESCRIPTION: Installs the raw-body module from the npm registry using the npm install command. raw-body is a Node.js module for reading streams; this command is a prerequisite before using the library in your project. No inputs or outputs—run this in your project directory's terminal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n```sh\\n$ npm install raw-body\\n```\n```\n\n----------------------------------------\n\nTITLE: Using test-exclude#shouldInstrument Method Examples in JavaScript\nDESCRIPTION: Illustrates the behavior of the 'shouldInstrument' method with various file inputs. It checks if a filename matches the configured inclusion/exclusion rules. The examples show outcomes based on default settings: 'index.js' is included, 'test.js' is excluded by default rules, 'README.md' is excluded due to its extension, and 'node_modules/...' is excluded by default. The method returns a boolean indicating whether the file should be instrumented.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/test-exclude/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst exclude = new TestExclude();\nexclude.shouldInstrument('index.js'); // true\nexclude.shouldInstrument('test.js'); // false\nexclude.shouldInstrument('README.md'); // false\nexclude.shouldInstrument('node_modules/test-exclude/index.js'); // false\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing a source map with SourceMapGenerator - JavaScript\nDESCRIPTION: Calls toString on a SourceMapGenerator to produce the JSON string representation of the source map. The returned string includes all registered sources, names, mappings, file, and sourceRoot properties. Appropriate for writing to disk or embedding in JavaScript files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ngenerator.toString()\n// '{\"version\":3,\"sources\":[\"module-one.scm\"],\"names\":[],\"mappings\":\"...snip...\",\"file\":\"my-generated-javascript-file.js\",\"sourceRoot\":\"http://example.com/app/js/\"}'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Target Object with dotenv.config() in JavaScript\nDESCRIPTION: Shows how to use the `processEnv` option in `dotenv.config()` to specify a custom JavaScript object (`myObject`) where the loaded environment variables should be written, instead of modifying the default `process.env`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst myObject = {}\nrequire('dotenv').config({ processEnv: myObject })\n\nconsole.log(myObject) // values from .env\nconsole.log(process.env) // this was not changed or written to\n```\n\n----------------------------------------\n\nTITLE: Generating Value Diffs with TypeBox Value.Diff in TypeScript\nDESCRIPTION: Demonstrates the `Value.Diff` function from TypeBox, which calculates the sequence of edit operations (insert, update, delete) required to transform one value into another. The edits include the type of operation, the JSON Pointer path to the affected property, and the new value (for insert/update).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst E = Value.Diff(                               // const E = [\n  { x: 1, y: 2, z: 3 },                             //   { type: 'update', path: '/y', value: 4 },\n  { y: 4, z: 5, w: 6 }                              //   { type: 'update', path: '/z', value: 5 },\n)                                                   //   { type: 'insert', path: '/w', value: 6 },\n                                                    //   { type: 'delete', path: '/x' }\n                                                    // ]\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Lists with Multiple Patterns (multimatch Migration) in Micromatch (JavaScript)\nDESCRIPTION: Provides an example of converting from multimatch to micromatch for filtering string arrays with multiple patterns. Takes an array and an array of patterns as input, output is an array of matching strings. Assumes micromatch dependency is available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(micromatch(['foo', 'bar', 'baz'], ['f*', '*z'])); //=> ['foo', 'baz']\n```\n\n----------------------------------------\n\nTITLE: Checking for Redirect Status using status.redirect[code]\nDESCRIPTION: Illustrates using the `status.redirect` object to determine if a numeric status code represents a redirect (e.g., `status.redirect[301]` returns `true`). Returns `undefined` for non-redirect codes or unknown codes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nstatus.redirect[200] // => undefined\nstatus.redirect[301] // => true\n```\n\n----------------------------------------\n\nTITLE: Example: Hardcoded White Background (JSX)\nDESCRIPTION: Illustrates a common anti-pattern where a `div` element has a hardcoded `bg-white` Tailwind CSS class. This prevents the component from adapting its background color when dark mode is enabled, leading to visual inconsistencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"bg-white p-4\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Resetting FakeTimers State - JavaScript\nDESCRIPTION: Resets all timers and sets fake time to the initial configuration 'now' using 'clock.reset'. No parameters required. Useful for starting a clean test state without reinstalling FakeTimers. Does not fire removed timers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nclock.reset()\n```\n\n----------------------------------------\n\nTITLE: Object.defineProperty Value Export (JavaScript)\nDESCRIPTION: Shows cjs-module-lexer's ability to detect named exports when using Object.defineProperty with a simple value property. The export 'a' is made available as a named export. No dependencies required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.defineProperty(exports, 'a', {\n  value: 'no problem'\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Patch Mark Color in jest-diff Unified Output with Chalk in TypeScript\nDESCRIPTION: This snippet sets patchColor in a jest-diff options object to chalk.dim, ensuring that patch marks like @@ ... @@ have a dimmed appearance consistent with common line colors in collapsed diffs. This configuration is written in TypeScript and depends on the chalk package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nimport chalk = require('chalk');\\n\\nconst options = {\\n  expand: false,\\n  patchColor: chalk.dim,\\n};\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease version with identifier using semver CLI\nDESCRIPTION: Shows the command-line equivalent of incrementing a version ('1.2.3') to a prerelease version using the `semver` CLI tool. The `-i prerelease` flag specifies the increment level, and `--preid beta` provides the identifier, resulting in '1.2.4-beta.0'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta\n1.2.4-beta.0\n```\n\n----------------------------------------\n\nTITLE: Illustrating Division Assignment vs. Regex Ambiguity\nDESCRIPTION: Provides another example highlighting the ambiguity for `js-tokens`, contrasting division assignment (`foo /= 2/g`) with a function call using a regex literal (`foo(/= 2/g)`) as an argument. Both end with similar sequences challenging the tokenizer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfoo /= 2/g\nfoo(/= 2/g)\n```\n\n----------------------------------------\n\nTITLE: Using the `clean` Function to Sanitize SemVer Strings in JavaScript\nDESCRIPTION: Demonstrates the usage of the `clean` function (presumably from a SemVer library like `node-semver`, aliased as `s`) to sanitize potentially invalid SemVer strings in JavaScript. It shows how the function handles extraneous characters, whitespace, and common prefixes like '= v'. The examples illustrate the difference in behavior with and without the `loose: true` option, which allows for more lenient parsing. The function returns the cleaned version string or `null` if cleaning fails under strict mode or the input cannot be interpreted as a version.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean(' = v 2.1.5foo')`: `null`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean(' = v 2.1.5foo', { loose: true })`: `'2.1.5-foo'`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean(' = v 2.1.5-foo')`: `null`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean(' = v 2.1.5-foo', { loose: true })`: `'2.1.5-foo'`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean('=v2.1.5')`: `'2.1.5'`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean('  =v2.1.5')`: `2.1.5`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean('      2.1.5   ')`: `'2.1.5'`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n* `s.clean('~1.0.0')`: `null`\n```\n\n----------------------------------------\n\nTITLE: Using Async as Object Literal Shorthand Property in JavaScript\nDESCRIPTION: Illustrates how 'async' can be used as an identifier in an object literal via property shorthand in modern JavaScript parsers. No outside dependencies are required. Inputs are object literals with 'async' and other properties; outputs are standard object creation behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nvar foo = { async, bar };\n```\n\n----------------------------------------\n\nTITLE: Installing Node Polyfill for Webpack (Bash)\nDESCRIPTION: Command to install the `node-polyfill-webpack-plugin`, which is necessary to resolve Node.js core module errors (like 'crypto', 'os', 'path') when using `dotenv` in front-end projects bundled with Webpack 5 or later.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node-polyfill-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Using exit to Replace process.exit in Node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'exit' module in Node.js to safely terminate a process after ensuring that stdout and stderr are fully drained, which prevents output truncation on Windows. It requires installing the 'exit' package via npm. The key parameters include the exit code (in this case, 5). Expected output includes the printed strings in both console.log and console.error before exiting; lines after the exit call should not appear. Limitations: intended for Node.js and primarily addresses Windows stream flushing issues.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/exit/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar exit = require('exit');\n\n// These lines should appear in the output, EVEN ON WINDOWS.\nconsole.log(\"omg\");\nconsole.error(\"yay\");\n\n// process.exit(5);\nexit(5);\n\n// These lines shouldn't appear in the output.\nconsole.log(\"wtf\");\nconsole.error(\"bro\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Demo: Compilation and Execution (Method 1)\nDESCRIPTION: Shell commands demonstrating how to compile the `demo.ts` file using the TypeScript compiler (`tsc`) with the `-sourcemap` flag, and then run the resulting JavaScript file (`demo.js`) using Node.js. The output shows a stack trace referencing the original `.ts` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install source-map-support typescript\n$ node_modules/typescript/bin/tsc -sourcemap demo.ts\n$ node demo.js\n\ndemo.ts:5\n  bar() { throw new Error('this is a demo'); }\n                ^\nError: this is a demo\n    at Foo.bar (demo.ts:5:17)\n    at new Foo (demo.ts:4:24)\n    at Object.<anonymous> (demo.ts:7:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:901:3\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease versions with identifiers using semver (JavaScript)\nDESCRIPTION: Shows how to use the `semver.inc()` function in JavaScript to increment a version to the next prerelease version, appending a specific identifier (e.g., 'beta') using the third argument. The first call creates `1.2.4-beta.0`. Requires the `semver` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta')\n// '1.2.4-beta.0'\n```\n\n----------------------------------------\n\nTITLE: Custom Input Formatting for Glob Matches with Picomatch (JavaScript)\nDESCRIPTION: Shows how to provide a custom format function to Picomatch in order to preprocess input strings during matching. The format function strips leading './' from candidate strings before matching against a glob pattern. Takes a string as input and produces a boolean indicating a match. Requires 'picomatch' in a Node.js environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// strip leading './' from strings\\nconst format = str => str.replace(/^\\.\\//, '');\\nconst isMatch = picomatch('foo/*.js', { format });\\nconsole.log(isMatch('./foo/bar.js')); //=> true\n```\n\n----------------------------------------\n\nTITLE: Normalizing win32 Namespaces with normalize-path in JavaScript\nDESCRIPTION: Illustrates how normalize-path handles special Windows path namespaces such as UNC paths and device paths by converting all backslashes to slashes and maintaining required prefixes. No other dependencies besides normalize-path are needed. The input paths demonstrate complex win32 namespace syntaxes; outputs are their normalized counterparts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/normalize-path/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(normalize('\\\\\\\\?\\\\UNC\\\\Server01\\\\user\\\\docs\\\\Letter.txt')); \n//=> '//?/UNC/Server01/user/docs/Letter.txt'\n\nconsole.log(normalize('\\\\\\\\.\\\\CdRomX')); \n//=> '//./CdRomX'\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Colors in Child Processes using JavaScript\nDESCRIPTION: This snippet illustrates how to ensure colored debug output in a Node.js child process when its `stderr` is piped. It involves forking a worker process using `child_process.fork` and explicitly setting the `DEBUG_COLORS=1` environment variable for the child. This overcomes the default TTY detection behavior that disables colors when output is piped. Requires Node.js `child_process` module and the `debug` module in the child script.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nworker = fork(WORKER_WRAP_PATH, [workerPath], {\n  stdio: [\n    /* stdin: */ 0,\n    /* stdout: */ 'pipe',\n    /* stderr: */ 'pipe',\n    'ipc',\n  ],\n  env: Object.assign({}, process.env, {\n    DEBUG_COLORS: 1 // without this settings, colors won't be shown\n  }),\n});\n\nworker.stderr.pipe(process.stderr, { end: false });\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Chalk Instance with Custom Color Level in JavaScript\nDESCRIPTION: Explains how to create a new, isolated instance of Chalk using `new chalk.Instance()`. This is useful for overriding the auto-detected color support level (e.g., setting `level: 0` to disable colors) for a specific module or part of an application without affecting the global Chalk settings or other consumers. Requires the 'chalk' package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = new chalk.Instance({level: 0});\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Tests using each.test.skip in JavaScript\nDESCRIPTION: This snippet demonstrates how to skip certain parameterized tests using 'each.test.skip' (or its aliases), preventing those tests from running. Intended for use with Jest or a compatible runner with 'each', each skipped test case simply does not execute, facilitating testing subsets. Inputs are provided in a table, while outputs are reported as skipped tests.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Full Chromium Versions to Electron Versions in Node.js\nDESCRIPTION: Leverages the fullChromiumVersions property to obtain an array of Electron versions matching a specific Chromium version string. This enables identifying which Electron versions come with a certain Chromium release. Requires e2c loaded in runtime.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar versions = e2c.fullChromiumVersions;\nconsole.log(versions['54.0.2840.101']);\n// returns [\"1.5.1\", \"1.5.0\"]\n```\n\n----------------------------------------\n\nTITLE: Nesting Brace Patterns using braces - JavaScript\nDESCRIPTION: Demonstrates how 'braces' can handle nested brace patterns and how they are expanded or compiled. Provides both an expanded version (list outputs) and an optimized regex version, showing how nesting preserves left-to-right order. Useful when complex, hierarchical glob patterns are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces.expand('a{b,c,/{x,y}}/e'));\n//=> ['ab/e', 'ac/e', 'a/x/e', 'a/y/e']\n\nconsole.log(braces.expand('a/{x,{1..5},y}/c'));\n//=> ['a/x/c', 'a/1/c', 'a/2/c', 'a/3/c', 'a/4/c', 'a/5/c', 'a/y/c']\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces('a{b,c,/{x,y}}/e'));\n//=> ['a(b|c|/(x|y))/e']\n\nconsole.log(braces('a/{x,{1..5},y}/c'));\n//=> ['a/(x|([1-5])|y)/c']\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js Script with Multiple Flags - Shell\nDESCRIPTION: Demonstrates how to invoke a Node.js script (foo.js) with multiple CLI flags, including usage of argument terminator \"--\". This example is used to show how different flags are parsed by the has-flag package. The flags passed before \"--\" (such as -f, --unicorn, --foo=bar) will be detected, while those after (like --rainbow) are ignored according to Node.js convention.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/has-flag/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ node foo.js -f --unicorn --foo=bar -- --rainbow\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-transform-react-jsx-source with npm (Shell)\nDESCRIPTION: This command installs the `@babel/plugin-transform-react-jsx-source` Babel plugin as a development dependency using the npm package manager. The `--save-dev` flag ensures it's added to the `devDependencies` section of the `package.json` file. This plugin is used to add source file and line number information to JSX elements during compilation for debugging purposes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-transform-react-jsx-source/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-jsx-source\n```\n\n----------------------------------------\n\nTITLE: Basic Usage and Color Conversion with ansi-styles in JavaScript\nDESCRIPTION: Illustrates importing the `ansi-styles` library and using it to apply a simple style (green text). Also shows examples of converting RGB to ANSI 256 colors and HEX to ANSI 16 million (TrueColor) colors for terminal output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/node_modules/ansi-styles/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst style = require('ansi-styles');\n\nconsole.log(`${style.green.open}Hello world!${style.green.close}`);\n\n\n// Color conversion between 256/truecolor\n// NOTE: When converting from truecolor to 256 colors, the original color\n//       may be degraded to fit the new color palette. This means terminals\n//       that do not support 16 million colors will best-match the\n//       original color.\nconsole.log(`${style.color.ansi256(style.rgbToAnsi256(199, 20, 250))}Hello World${style.color.close}`)\nconsole.log(`${style.color.ansi16m(...style.hexToRgb('#abcdef'))}Hello World${style.color.close}`)\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease with one-based identifier using semver CLI\nDESCRIPTION: Shows the command-line equivalent of incrementing to a prerelease version using the `semver` CLI, specifying the identifier with `--preid beta` and setting the prerelease number base to 1 using the `-n 1` flag, resulting in '1.2.4-beta.1'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta -n 1\n1.2.4-beta.1\n```\n\n----------------------------------------\n\nTITLE: Generating Comic Panels with DALL·E 3 / MidJourney API\nDESCRIPTION: Utilizes the DALL·E 3 or MidJourney API to automatically generate high-quality, consistent comic panels featuring recurring characters (Chad CEO, Intern Tina, etc.). These panels serve as an interactive narrative hook to capture user interest.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_1\n\nLANGUAGE: API\nCODE:\n```\nUse DALL·E 3 API or MidJourney API\nInput: Text prompts describing scenes and characters (e.g., Chad CEO, Intern Tina, Judge, Diego the DecA(I)de Dolphin).\nOutput: High-quality comic panel images.\nGoal: Maintain character consistency across panels for a narrative hook.\n```\n\n----------------------------------------\n\nTITLE: Setting Source Content with SourceMapGenerator in JavaScript\nDESCRIPTION: Demonstrates the `setSourceContent` method of `SourceMapGenerator`. This method allows embedding the original source code content within the source map. It takes the `sourceFile` URL and the `sourceContent` string as arguments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngenerator.setSourceContent(\"module-one.scm\",\n                           fs.readFileSync(\"path/to/module-one.scm\"))\n```\n\n----------------------------------------\n\nTITLE: Converting 64-bit Big-Endian Buffer to String with pg-int8 in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the pg-int8 package to convert a 64-bit big-endian signed integer, represented in a Buffer, to its string representation in JavaScript. It requires the pg-int8 module as a dependency. The Buffer should contain exactly 8 bytes representing the integer. The output is a string version of the integer, suitable for use in PostgreSQL client scenarios. Error handling or boundary checks are not shown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-int8/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst readInt8 = require('pg-int8');\n\nreadInt8(Buffer.from([0, 1, 2, 3, 4, 5, 6, 7]))\n// '283686952306183'\n```\n\n----------------------------------------\n\nTITLE: Finding Common Items using diff-sequences in JavaScript\nDESCRIPTION: Demonstrates how to collect the actual items present in the longest common subsequence using `diff-sequences`. The `findCommonItems` function uses `Object.is` for comparison in its `isCommon` callback. The `foundSubsequence` callback iterates through the identified common subsequence segment and pushes each item from array `a` into the `array`. The function returns the populated `array` containing the common items.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Return array of items in longest common subsequence according to Object.is method.\nconst findCommonItems = (a, b) => {\n  const array = [];\n  diff(\n    a.length,\n    b.length,\n    (aIndex, bIndex) => Object.is(a[aIndex], b[bIndex]),\n    (nCommon, aCommon) => {\n      for (; nCommon !== 0; nCommon -= 1, aCommon += 1) {\n        array.push(a[aCommon]);\n      }\n    },\n  );\n  return array;\n};\n\nconst commonItems = findCommonItems(\n  ['a', 'b', 'c', 'a', 'b', 'b', 'a'],\n  ['c', 'b', 'a', 'b', 'a', 'c'],\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Using 'double' Quotes with Arrays/Objects (JavaScript)\nDESCRIPTION: Demonstrates how the `quotes: 'double'` option affects the stringification of arrays and objects, wrapping internal strings and keys in double quotes. This format is compatible with JSON.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {\n  'quotes': 'double'\n});\n// → '{\"Ich \\\\u2665 B\\\\xFCcher\":\"foo \\\\uD834\\\\uDF06 bar\"}'\n\njsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {\n  'quotes': 'double'\n});\n// → '[\"Ich \\\\u2665 B\\\\xFCcher\",\"foo \\\\uD834\\\\uDF06 bar\"]'\n```\n\n----------------------------------------\n\nTITLE: Representing Extracted String Type from a Union in JSON Schema\nDESCRIPTION: Presents a JSON Schema for a type extracted from a union, resulting in a simple string type. This is used when filtering a union to a specific member, allowing validation and code generation based on the filtered type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  type: 'string'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Structure for Browser-Based Diff Display\nDESCRIPTION: Basic HTML setup including a `<pre>` tag with the ID 'display' where the visual diff generated by the accompanying JavaScript code will be rendered. It also includes the necessary `<script>` tag to load the `diff.js` library from a local path.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<pre id=\"display\"></pre>\n<script src=\"diff.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including iMurmurHash Library in HTML\nDESCRIPTION: Demonstrates how to include the pre-built `imurmurhash.min.js` file in an HTML page using a script tag. This makes the `MurmurHash3` object globally available for use in subsequent scripts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/imurmurhash/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/scripts/imurmurhash.min.js\"></script>\n<script>\n// Your code here, access iMurmurHash using the global object MurmurHash3\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js App with All Debug Logs Enabled in CMD (CMD)\nDESCRIPTION: Demonstrates setting the `DEBUG` environment variable to enable all namespaces (`*`) and then immediately running the `node app.js` command within the Windows Command Prompt (CMD).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=* & node app.js\n```\n\n----------------------------------------\n\nTITLE: Using web-streams-polyfill Ponyfill with ES Modules\nDESCRIPTION: This JavaScript snippet demonstrates importing and using the `web-streams-polyfill` ponyfill in a modern JavaScript environment that supports ES2015 modules. It uses an `import` statement to specifically destructure the `ReadableStream` constructor from the `web-streams-polyfill/ponyfill` module path. A new `ReadableStream` instance is then created directly using the imported constructor. This method also avoids global scope pollution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/web-streams-polyfill/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { ReadableStream } from \"web-streams-polyfill/ponyfill\";\nconst readable = new ReadableStream();\n```\n\n----------------------------------------\n\nTITLE: Calculating maxUses for Connection Pool Rebalancing\nDESCRIPTION: Provides a formula to estimate the 'maxUses' configuration value for a connection pool. This value dictates how many times a connection can be acquired and released before it's considered 'expended' and closed, creating a window for rebalancing connections across an autoscaled replica set.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nmaxUses = rebalanceWindowSeconds * totalRequestsPerSecond / numAppInstances / poolSize\n```\n\n----------------------------------------\n\nTITLE: Using 'debug' in Browser JavaScript with setInterval (JavaScript)\nDESCRIPTION: Example JavaScript code for a browser environment showing the creation of 'debug' instances ('worker:a', 'worker:b') and their use within 'setInterval' callbacks to periodically log messages. This code assumes namespaces have been enabled (e.g., via localStorage) and the 'debug' library is loaded.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n----------------------------------------\n\nTITLE: Importing Electron to Full Chromium Versions Mapping (Node.js)\nDESCRIPTION: Shows direct import of fullVersions from the full-versions submodule to access all full Electron-to-Chromium mappings without other package code. Useful for if only the full mapping is needed for parsing or display. No function context required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar fullVersions = require('electron-to-chromium/full-versions');\n```\n\n----------------------------------------\n\nTITLE: Checking Value Equality with TypeBox Value.Equal in TypeScript\nDESCRIPTION: Illustrates the use of the `Value.Equal` function from TypeBox to perform a deep comparison between two values to check for equality. It returns `true` if the values are structurally identical, and `false` otherwise.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst R = Value.Equal(                               // const R = true\n  { x: 1, y: 2, z: 3 },\n  { x: 1, y: 2, z: 3 }\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Throwing for Reserved Words as Class Names - Babylon - JavaScript\nDESCRIPTION: This snippet demonstrates that using ES reserved words like 'enum' and 'await' as class names will result in a parse error in Babylon, especially in strict mode. Babylon enforces the ECMAScript spec for future reserved words. No dependencies are required except latest Babylon. Inputs are class declarations with reserved names; outputs are parser errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass enum {} // throws\nclass await {} // throws in strict mode (module)\n```\n\n----------------------------------------\n\nTITLE: Enabling Optional Parameter Names and Indexers in Flow Types - Babylon - JavaScript\nDESCRIPTION: This pair of code blocks demonstrates Flow's syntax evolution for type aliases, showing both the old and new compacted forms. Babylon supports the new syntax, allowing omission of names in function and indexer type annotations. Requires Flow parser enabled. Input is type alias declarations; output is valid type annotation parsing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ntype A = (x: string, y: boolean) => number;\ntype B = (z: string) => number;\ntype C = { [key: string]: number };\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntype A = (string, boolean) => number;\ntype B = string => number;\ntype C = { [string]: number };\n```\n\n----------------------------------------\n\nTITLE: Configuring jest-circus Test Runner in Jest Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to configure Jest to use `jest-circus` by setting the `testRunner` option to `'jest-circus/runner'` within your Jest configuration file (like `jest.config.json` or `package.json`). This explicitly tells Jest to use the Circus runner instead of the default (or legacy) one, although Circus is default since Jest 27.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-circus/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"testRunner\": \"jest-circus/runner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Debuggers for Workers in Browser JavaScript\nDESCRIPTION: Demonstrates instantiating multiple debug loggers for web workers and emitting periodic debug messages. Each debug logger is dedicated to a namespace (a, b) and uses setInterval with different time intervals. Requires the browserified debug script and an enabled debug namespace in localStorage. Outputs alternating logs to assist with parallel debugging.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n----------------------------------------\n\nTITLE: Tracing Deprecation Warnings in Node.js - Console Commands - Shell\nDESCRIPTION: These console commands set the NODE_OPTIONS environment variable to include trace and deprecation warning flags, then demonstrate running a script that intentionally triggers a Buffer() deprecation warning in Node.js ≥8.0.0. No external dependencies are required beyond a compatible Node.js runtime. The commands will print stack traces for deprecation warnings, aiding in identifying unsafe Buffer usages during migration. Inputs include the script filename; output is the Node.js console warning.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safer-buffer/Porting-Buffer.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ export NODE_OPTIONS='--trace-warnings --pending-deprecation'\\n$ cat example.js\\n'use strict';\\nconst foo = new Buffer('foo');\\n$ node example.js\\n(node:7147) [DEP0005] DeprecationWarning: The Buffer() and new Buffer() constructors are not recommended for use due to security and usability concerns. Please use the new Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() construction methods instead.\\n    at showFlaggedDeprecation (buffer.js:127:13)\\n    at new Buffer (buffer.js:148:3)\\n    at Object.<anonymous> (/path/to/example.js:2:13)\\n    [... more stack trace lines ...]\n```\n\n----------------------------------------\n\nTITLE: Accessing Status Code Categories (JavaScript)\nDESCRIPTION: Indicates boolean properties or sets available on the status utility object, likely accessed via dot notation (e.g., `status.redirect[code]`). `.redirect` categorizes codes like 301, 302, 307, 308 (added in 1.0.3). `.retry` was added in 1.0.2, categorizing codes suggesting a client retry might be appropriate.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n.redirect\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.retry\n```\n\n----------------------------------------\n\nTITLE: Converting a Glob Pattern to a Regular Expression with Micromatch in JavaScript\nDESCRIPTION: Demonstrates the `mm.makeRe` function from the 'micromatch' library. It converts a given glob pattern string into a JavaScript RegExp object. Requires the 'micromatch' library. Takes a glob pattern string and optional options. Returns the corresponding regular expression.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst mm = require('micromatch');\n// mm.makeRe(pattern[, options]);\n\nconsole.log(mm.makeRe('*.js'));\n//=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n```\n\n----------------------------------------\n\nTITLE: Sample Successful API Status Response - JSON\nDESCRIPTION: This JSON object represents the correct API response when Azure OpenAI is integrated successfully with DecA(I)de. The 'status' field confirms operational state, 'deployment' shows the deployment name in use, and 'message' conveys confirmation. This output can be used to verify both deployment and connectivity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_OPENAI_SETUP.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"status\\\": \\\"operational\\\",\\n  \\\"deployment\\\": \\\"gpt-4o-mini\\\",\\n  \\\"message\\\": \\\"Azure OpenAI is working properly\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests with ts-node (Mocha <= 6) (Shell)\nDESCRIPTION: Executes Mocha tests using `ts-node/register` for TypeScript support, specifically for Mocha versions 6 and earlier. It targets test files matching `test/**/*.{ts,tsx}` and specifies `--watch-extensions` for use with Mocha's watch mode. Allows passing additional arguments (`[...args]`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nmocha --require ts-node/register --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\" [...args]\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing Content in SourceNode with JavaScript Regex\nDESCRIPTION: Illustrates the `replaceRight` prototype method. This method applies `String.prototype.replace` specifically to the right-most (last) code snippet within the `SourceNode`'s tree structure. It's useful for tasks like trimming trailing whitespace.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// Trim trailing white space.\nnode.replaceRight(/\\s*$/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Error When Vite React Plugin Cannot Detect Preamble - JavaScript\nDESCRIPTION: Presents the runtime error message emitted when @vitejs/plugin-react fails to detect the expected HTML preamble in a misconfigured setup. Input is a misconfigured application; output is a thrown JavaScript error describing the issue. This aids in identifying setup mistakes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@vitejs/plugin-react/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nUncaught Error: @vitejs/plugin-react can't detect preamble. Something is wrong.\n```\n\n----------------------------------------\n\nTITLE: Using onetime Basic Functionality in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the 'onetime' library. It wraps a function that increments a counter. The wrapped function (`foo`) only executes the original function's logic on the first call, returning the cached result (1) on subsequent calls. `onetime.callCount` tracks how many times the wrapped function was invoked, regardless of execution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/onetime/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst onetime = require('onetime');\n\nlet i = 0;\n\nconst foo = onetime(() => ++i);\n\nfoo(); //=> 1\nfoo(); //=> 1\nfoo(); //=> 1\n\nonetime.callCount(foo); //=> 3\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Variable in Windows CMD - Command Prompt\nDESCRIPTION: Explains how to set the 'DEBUG' environment variable in Windows CMD to enable or exclude specific debug namespaces when running Node.js applications. This is essential for toggling debug output in Windows environments; command arguments may include glob patterns for namespaces.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=*,-not_this\n```\n\n----------------------------------------\n\nTITLE: Importing type-detect in Node.js (JavaScript)\nDESCRIPTION: Imports the `type-detect` library into a Node.js module using the `require` function. The returned `type` variable holds the main function exported by the library, which is used for type detection.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = require('type-detect');\n```\n\n----------------------------------------\n\nTITLE: Buffer Constructor with String Length and Encoding - JavaScript\nDESCRIPTION: Illustrates calling the Buffer constructor with a number and an explicit encoding. In earlier Node.js versions, this would still allocate uninitialized memory, creating a risk if the types are mismatched. Fixes in newer releases help prevent this scenario, but awareness is needed for legacy code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar str = 16\\nnew Buffer(str, 'utf8')\\n\n```\n\n----------------------------------------\n\nTITLE: Representing the 'never' Type in JSON Schema with 'not: {}'\nDESCRIPTION: Models the 'never' type as a JSON Schema object with a 'not: {}' constraint, matching no possible instance. This is a standard method to express schemas that intentionally cannot be satisfied, aligning with exclusion semantics in type-centric workflows.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nconst T = {\n  not: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Prerelease Omitting Number via CLI (Bash)\nDESCRIPTION: Demonstrates using the `semver` CLI with the `-n false` option to increment to a prerelease version ('1.2.4-beta') without appending a numeric index. Assumes the `semver` CLI is available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta -n false\n1.2.4-beta\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pitfalls of safe-buffer (Console Example) - Console\nDESCRIPTION: This code snippet shows how importing safe-buffer does not prevent deprecated buffer API usage. The snippet overrides Buffer using require('safe-buffer').Buffer and still allocates an unsafe buffer, which, when executed, prints uninitialized memory without linter warnings. It highlights that using safe-buffer alone is insufficient to enforce safe buffer usage. Inputs: none. Outputs: the content of an uninitialized buffer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safer-buffer/Readme.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cat example.safe-buffer.js\\nconst Buffer = require('safe-buffer').Buffer\\nconsole.log(Buffer(20))\\n$ standard example.safe-buffer.js\\n$ ./node-v6.13.0-linux-x64/bin/node example.safe-buffer.js\\n<Buffer 08 00 00 00 00 00 00 00 28 58 01 82 fe 7f 00 00 00 00 00 00>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining an npm Script for Debugging on Windows via PowerShell (JSON)\nDESCRIPTION: Defines an npm script named 'windowsDebug' typically placed within the 'scripts' section of a `package.json` file. The script uses PowerShell to set the `DEBUG` environment variable to enable all namespaces ('*') before running the `node app.js` command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n  \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\",\n```\n\n----------------------------------------\n\nTITLE: Calculating Prefix Length from Subnet Mask - JavaScript\nDESCRIPTION: Shows how to determine the CIDR prefix length corresponding to a subnet mask by parsing with ipaddr.IPv4 and calling prefixLengthFromSubnetMask. Returns an integer for valid masks or null for invalid ones.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nipaddr.IPv4.parse('255.255.255.240').prefixLengthFromSubnetMask() == 28\nipaddr.IPv4.parse('255.192.164.0').prefixLengthFromSubnetMask()  == null\n```\n\n----------------------------------------\n\nTITLE: Setting Source Content for SourceNode in JavaScript\nDESCRIPTION: Illustrates the `setSourceContent` prototype method. This method associates the original source code content with a specific source filename within the `SourceNode`, which will be included in the `sourcesContent` field of the generated source map. It requires the `fs` module or similar means to obtain the source content.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setSourceContent(\"module-one.scm\",\n                      fs.readFileSync(\"path/to/module-one.scm\"))\n```\n\n----------------------------------------\n\nTITLE: Using string-length Module in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the 'string-length' module. It first requires the module and then calls its function to calculate the length of strings. Examples show how it correctly counts astral symbols (like emojis) as one character, unlike the native '.length' property, and how it ignores ANSI escape codes when calculating length. The module needs to be installed via npm first.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/string-length/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst stringLength = require('string-length');\n\n'🐴'.length;\n//=> 2\n\nstringLength('🐴');\n//=> 1\n\nstringLength('\\u001B[1municorn\\u001B[22m');\n//=> 7\n```\n\n----------------------------------------\n\nTITLE: Creating Template Literal Types Using TypeBox in TypeScript\nDESCRIPTION: Demonstrates how to use TypeBox's .TemplateLiteral in TypeScript to model a string pattern based on a union of two literal values ('open', 'close'). Requires TypeBox and prior union type U; specifies new type T as intervation of literal string T using pattern concatenation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst U = Type.Union([\n  Type.Literal('open'),\n  Type.Literal('close')\n])\n\nconst T = Type\n  .TemplateLiteral([\n     Type.Literal('on'),\n     U\n  ])\n```\n\n----------------------------------------\n\nTITLE: Simple AST Walk Using acorn-walk - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to perform a simple walk over an AST produced by acorn.parse, visiting each Literal node and printing its value. Dependencies: acorn, acorn-walk. The visitors object provides a callback for the 'Literal' node type. Expects a JavaScript source string as input, and outputs log messages for each literal found. Limitations: Only Literal nodes are handled in this example.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn-walk/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst acorn = require(\"acorn\")\nconst walk = require(\"acorn-walk\")\n\nwalk.simple(acorn.parse(\"let x = 10\"), {\n  Literal(node) {\n    console.log(`Found a literal: ${node.value}`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Tracing Code Positions with TraceMap API - TypeScript\nDESCRIPTION: Shows how to import and use the main @jridgewell/trace-mapping APIs in TypeScript to trace positions between output and original source files. Demonstrates creating a TraceMap instance, mapping positions with originalPositionFor and generatedPositionFor, fetching source content, and checking if sources are ignored. Dependencies: @jridgewell/trace-mapping, TypeScript, and assert modules. Inputs include source map configuration objects and position details; outputs are mapping results and assertions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/trace-mapping/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TraceMap,\n  originalPositionFor,\n  generatedPositionFor,\n  sourceContentFor,\n  isIgnored,\n} from '@jridgewell/trace-mapping';\n\nconst tracer = new TraceMap({\n  version: 3,\n  sources: ['input.js'],\n  sourcesContent: ['content of input.js'],\n  names: ['foo'],\n  mappings: 'KAyCIA',\n  ignoreList: [],\n});\n\n// Lines start at line 1, columns at column 0.\nconst traced = originalPositionFor(tracer, { line: 1, column: 5 });\nassert.deepEqual(traced, {\n  source: 'input.js',\n  line: 42,\n  column: 4,\n  name: 'foo',\n});\n\nconst content = sourceContentFor(tracer, traced.source);\nassert.strictEqual(content, 'content for input.js');\n\nconst generated = generatedPositionFor(tracer, {\n  source: 'input.js',\n  line: 42,\n  column: 4,\n});\nassert.deepEqual(generated, {\n  line: 1,\n  column: 5,\n});\n\nconst ignored = isIgnored(tracer, 'input.js');\nassert.equal(ignored, false);\n```\n\n----------------------------------------\n\nTITLE: Enabling ts-node Globally via NODE_OPTIONS (CommonJS) (Shell)\nDESCRIPTION: Sets the `NODE_OPTIONS` environment variable to include `-r ts-node/register`. This forces any Node.js process launched in this environment to preload `ts-node`'s CommonJS register hook, enabling TypeScript execution support within that process and potentially its child processes or worker threads.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nNODE_OPTIONS=\"-r ts-node/register\"\n```\n```\n\n----------------------------------------\n\nTITLE: Serving All Files as Downloads - JavaScript\nDESCRIPTION: This snippet demonstrates modifying HTTP headers to prompt all files to be downloaded rather than viewed in the browser. It uses 'content-disposition' to set the 'Content-Disposition' header, configures 'serve-static' with 'index: false', and supplies a custom 'setHeaders' callback. Requires 'content-disposition', 'serve-static', 'finalhandler', and 'http' modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/serve-static/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar contentDisposition = require('content-disposition')\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\n// Serve up public/ftp folder\nvar serve = serveStatic('public/ftp', {\n  index: false,\n  setHeaders: setHeaders\n})\n\n// Set header to force download\nfunction setHeaders (res, path) {\n  res.setHeader('Content-Disposition', contentDisposition(path))\n}\n\n// Create server\nvar server = http.createServer(function onRequest (req, res) {\n  serve(req, res, finalhandler(req, res))\n})\n\n// Listen\nserver.listen(3000)\n\n```\n\n----------------------------------------\n\nTITLE: Using the Default 'relaxZeros' Behavior in to-regex-range (JavaScript)\nDESCRIPTION: This snippet shows the default behavior of the 'relaxZeros' option (which is true). When generating a regex for a range with leading zeros (e.g., '-0010' to '0010'), the resulting regex will match numbers with or without the leading zeros.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst source = toRegexRange('-0010', '0010');\nconst regex = new RegExp(`^${source}$`);\nconsole.log(regex.test('-10')); //=> true\nconsole.log(regex.test('-010')); //=> true\nconsole.log(regex.test('-0010')); //=> true\nconsole.log(regex.test('10')); //=> true\nconsole.log(regex.test('010')); //=> true\nconsole.log(regex.test('0010')); //=> true\n```\n\n----------------------------------------\n\nTITLE: Currying AnyMatch for Reusable Matchers - Javascript\nDESCRIPTION: Demonstrates how to create a reusable matcher function by currying AnyMatch with a set of matchers. The resulting matcher can then be used for repeated matches or as a filter callback. Inputs are strings or arrays of strings, and outputs are booleans or indices. Dependencies: Node.js, AnyMatch module installed. This pattern is useful for functional programming and filtering arrays based on custom matching criteria.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/anymatch/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar matcher = anymatch(matchers);\n\nmatcher('path/to/file.js'); // true\nmatcher('path/anyjs/baz.js', true); // 1\n\n['foo.js', 'bar.js'].filter(matcher); // ['foo.js']\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Events with Emittery - JavaScript\nDESCRIPTION: Shows how to remove event listeners for single or multiple events using off, and how subsequent emits do not trigger removed listeners. Runs asynchronously using Node.js and emittery. Uses a shared listener for several events, then removes with .off(). Inputs: event names, listener function. Output: only emits to listeners that haven't been removed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\n\nconst listener = data => console.log(data);\n\n(async () => {\n\temitter.on(['🦄', '🐶', '🦊'], listener);\n\tawait emitter.emit('🦄', 'a');\n\tawait emitter.emit('🐶', 'b');\n\tawait emitter.emit('🦊', 'c');\n\temitter.off('🦄', listener);\n\temitter.off(['🐶', '🦊'], listener);\n\tawait emitter.emit('🦄', 'a'); // Nothing happens\n\tawait emitter.emit('🐶', 'b'); // Nothing happens\n\tawait emitter.emit('🦊', 'c'); // Nothing happens\n})();\n```\n\n----------------------------------------\n\nTITLE: Handling Match Events with onMatch Callback in Picomatch (JavaScript)\nDESCRIPTION: Demonstrates registering an onMatch callback with Picomatch to be invoked for every pattern match. The callback receives an object containing the glob, regex, input, and output for each test. It logs match event details to the console. Requires 'picomatch', works in any Node.js environment. Used when detailed auditing or match logging is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onMatch = ({ glob, regex, input, output }) => {\\n  console.log({ glob, regex, input, output });\\n};\\n\\nconst isMatch = picomatch('*', { onMatch });\\nisMatch('foo');\\nisMatch('bar');\\nisMatch('baz');\n```\n\n----------------------------------------\n\nTITLE: Formatting with Named Arguments Using sprintf.js (JavaScript)\nDESCRIPTION: Illustrates the use of named arguments in sprintf.js by replacing named placeholders surrounded by parentheses with values from an object. The sprintf function can replace simple or nested object properties referenced within the format string. The object supplying values must be passed as the second argument, and the return value is the formatted string with corresponding replacements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = {\n    name: \"Dolly\"\n}\nsprintf(\"Hello %(name)s\", user) // Hello Dolly\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n    {name: \"Dolly\"},\n    {name: \"Molly\"},\n    {name: \"Polly\"}\n]\nsprintf(\"Hello %(users[0].name)s, %(users[1].name)s and %(users[2].name)s\", {users: users}) // Hello Dolly, Molly and Polly\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Formatter to 'debug' (JavaScript)\nDESCRIPTION: Illustrates how to extend the 'debug' library's formatting capabilities by adding a custom formatter. This example adds a '%h' formatter that converts a Buffer object into its hexadecimal string representation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n----------------------------------------\n\nTITLE: Extending 'debug' Namespaces (JavaScript)\nDESCRIPTION: Demonstrates how to create new debug instances with extended namespaces based on an existing instance. This example starts with a base 'auth' namespace and extends it to create 'auth:sign' and 'auth:login' namespaces.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = require('debug')('auth');\n\n//creates new debug instance with extended namespace\nconst logSign = log.extend('sign');\nconst logLogin = log.extend('login');\n\nlog('hello'); // auth hello\nlogSign('hello'); //auth:sign hello\nlogLogin('hello'); //auth:login hello\n```\n\n----------------------------------------\n\nTITLE: Incrementing to Prerelease via CLI (Bash)\nDESCRIPTION: Provides the command-line example using the `semver` utility to increment a version ('1.2.3') to the next prerelease version ('1.2.4-beta.0') using the `-i prerelease` and `--preid beta` options. Assumes the `semver` CLI tool is available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta\n1.2.4-beta.0\n```\n\n----------------------------------------\n\nTITLE: Inspecting Circular Objects with object-inspect in JavaScript\nDESCRIPTION: Demonstrates using the `object-inspect` library to generate a string representation of a JavaScript object containing a circular reference. It imports the library, creates an object `obj` where `obj.c` refers back to `obj`, and then prints the inspected output to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/object-inspect/readme.markdown#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar inspect = require('object-inspect');\nvar obj = { a: 1, b: [3,4] };\nobj.c = obj;\nconsole.log(inspect(obj));\n```\n\n----------------------------------------\n\nTITLE: Incrementing Prerelease with One-Based Identifier via CLI (Bash)\nDESCRIPTION: Provides the command-line example using the `semver` utility with the `-n 1` option to specify a one-based index for the prerelease identifier when incrementing, resulting in '1.2.4-beta.1'. Assumes the `semver` CLI is available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.3 -i prerelease --preid beta -n 1\n1.2.4-beta.1\n```\n\n----------------------------------------\n\nTITLE: Accessing IPv6 Address Parts Array - JavaScript\nDESCRIPTION: Shows how to access the 8-segment array representation (parts) of a parsed IPv6 address. Each part is a 16-bit number. Useful for custom processing or low-level manipulation of IPv6 addresses.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"2001:db8:10::1234:DEAD\");\naddr.parts // => [0x2001, 0xdb8, 0x10, 0, 0, 0, 0x1234, 0xdead]\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Patterns Against a String with isMatch in Micromatch (JavaScript)\nDESCRIPTION: Shows how to use mm.isMatch to test a string against an array of patterns and return a boolean indicating match status. Demonstrates various inputs and expected boolean outputs. Micromatch must be imported as 'mm'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst mm = require('micromatch');\n// mm.isMatch(string, patterns[, options]);\n\nconsole.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\nconsole.log(mm.isMatch('a.a', 'b.*')); //=> false\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Debug Formatters in Node.js JavaScript\nDESCRIPTION: Illustrates extending 'debug.formatters' to include a custom 'h' formatter for hexadecimal Buffer display. Requires 'debug' and passing Buffers as arguments to the debug logger. This allows developers to create readable, custom-formatted debug statements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n----------------------------------------\n\nTITLE: Importing Full Chromium Versions to Electron Version Arrays Mapping (Node.js)\nDESCRIPTION: Illustrates loading just the fullChromiumVersions mapping directly from its submodule, which returns an object that maps full Chromium versions to Electron version arrays, ideal for static analysis or reporting tools. No package-level require needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar fullChromiumVersions = require('electron-to-chromium/full-chromium-versions');\n```\n\n----------------------------------------\n\nTITLE: Duplicate Named Export with Rest Elements in JavaScript\nDESCRIPTION: Exemplifies an error when exporting with duplicate identifiers due to a rest element (…foo) after foo is already exported. No dependencies required. The input is two exports with a conflict; output is a thrown parsing error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_31\n\nLANGUAGE: js\nCODE:\n```\n// `foo` has already been exported. Exported identifiers must be unique. (2:22)\\nexport const foo = 1;\\nexport const [bar, ...foo] = baz;\n```\n\n----------------------------------------\n\nTITLE: Incrementing Existing Prerelease Version via CLI (Bash)\nDESCRIPTION: Demonstrates using the `semver` CLI to increment an existing prerelease version ('1.2.4-beta.0') to the next prerelease iteration ('1.2.4-beta.1') using the `-i prerelease` option.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ semver 1.2.4-beta.0 -i prerelease\n1.2.4-beta.1\n```\n\n----------------------------------------\n\nTITLE: Parsing Postgres bytea Strings with postgres-bytea in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to require the 'postgres-bytea' package and use it to convert a Postgres bytea-formatted string into a Node.js Buffer object. The primary dependency is the 'postgres-bytea' package, which must be installed beforehand. The function 'bytea' accepts a string input representing a Postgres bytea value (e.g., '\\\\000\\\\100\\\\200'), and returns a Buffer containing the binary data; the output can then be used for further binary processing in Node.js applications.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-bytea/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar bytea = require('postgres-bytea');\nbytea('\\\\000\\\\100\\\\200')\n//=> buffer\n```\n\n----------------------------------------\n\nTITLE: Importing parseurl module in Node.js (JavaScript)\nDESCRIPTION: Shows the standard way to import the `parseurl` module into a Node.js script using the `require` function. This makes the module's functions, like `parseurl(req)` and `parseurl.original(req)`, available for use within the script.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/parseurl/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar parseurl = require('parseurl')\n```\n\n----------------------------------------\n\nTITLE: Generating Alphabetical Ranges with fill-range (JavaScript)\nDESCRIPTION: Examples showing how to use `fill-range` to generate arrays representing alphabetical ranges for both lowercase and uppercase letters. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e']\nconsole.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ]\n```\n\n----------------------------------------\n\nTITLE: Fixing Light Theme Preview Box Rendering in Dark Mode (React/TSX)\nDESCRIPTION: Compares 'Before' and 'After' code for a React `div` component used as a light theme preview. The fix removes the `dark:bg-white` Tailwind class to prevent it from incorrectly rendering with a dark background when the application is in dark mode. The component uses conditional classes based on `appearance.theme` and updates the theme state via `setAppearance` on click.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Before:\n<div\n  className={`border ${\n    appearance.theme === \"light\"\n      ? 'border-primary ring-2 ring-primary/30'\n      : 'border-slate-200 dark:border-[var(--dark-border)]'\n  } rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white dark:bg-white`}\n  onClick={() => setAppearance(prev => ({ ...prev, theme: \"light\" }))}\n/>\n\n// After:\n<div\n  className={`border ${\n    appearance.theme === \"light\"\n      ? 'border-primary ring-2 ring-primary/30'\n      : 'border-slate-200 dark:border-[var(--dark-border)]'\n  } rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white`}\n  onClick={() => setAppearance(prev => ({ ...prev, theme: \"light\" }))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-transform-react-jsx-self with yarn (Shell)\nDESCRIPTION: This shell command uses yarn, an alternative Node.js package manager, to install the `@babel/plugin-transform-react-jsx-self` package. The `--dev` flag adds the package to the `devDependencies` in the `package.json` file, similar to npm's `--save-dev`. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-transform-react-jsx-self/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-transform-react-jsx-self --dev\n```\n\n----------------------------------------\n\nTITLE: Wrapping Output in Single Quotes (JavaScript)\nDESCRIPTION: Demonstrates the `wrap: true` option combined with `quotes: 'single'`. The entire output string is enclosed in single quotes, creating a valid JavaScript string literal.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// → '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// → \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Package Exports and Imports using resolve.resolve (JavaScript)\nDESCRIPTION: This example demonstrates the behavior of resolve.resolve, automatically delegating to either exports or imports resolution depending on the entry argument. It shows various invocations and how entry values are parsed and normalized. It requires the resolve.exports library and a pkg object with the necessary metadata fields.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve.exports/readme.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as r from 'resolve.exports';\n\nlet pkg = {\n  name: 'foobar',\n  // ...\n};\n\nr.resolve(pkg);\n//~> r.exports(pkg, '.');\n\nr.resolve(pkg, 'foobar');\n//~> r.exports(pkg, '.');\n\nr.resolve(pkg, 'foobar/subpath');\n//~> r.exports(pkg, './subpath');\n\nr.resolve(pkg, '#hash/md5');\n//~> r.imports(pkg, '#hash/md5');\n\nr.resolve(pkg, 'foobar/#hash/md5');\n//~> r.imports(pkg, '#hash/md5');\n```\n\n----------------------------------------\n\nTITLE: Formatting a Content-Type Object into Header String with contentType.format - JavaScript\nDESCRIPTION: This code shows how to format a JavaScript object specifying content type and parameters into a Content-Type header string using 'content-type'. Requires an object with 'type' and 'parameters' keys as input; outputs a formatted, lower-cased string. Dependencies: Node.js and the 'content-type' module. Throws TypeError for invalid types or parameter names.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-type/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar str = contentType.format({\n  type: 'image/svg+xml',\n  parameters: { charset: 'utf-8' }\n})\n```\n\n----------------------------------------\n\nTITLE: Class Method Named with Reserved Keyword and Type Parameter in JavaScript\nDESCRIPTION: Shows use of a reserved keyword ('delete') as a method name in a Flow-typed JavaScript class, with a type parameter. No dependencies outside Flow. Inputs are methods with reserved names and generics; outputs are valid in Flow-typed class declarations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nclass Foo {\\n  delete<T>(item: T): T {\\n    return item;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in npm Script for PowerShell (JavaScript/JSON)\nDESCRIPTION: Demonstrates how to define an npm script in package.json that sets the DEBUG environment variable using PowerShell syntax before running a Node.js application. This script, named 'windowsDebug', enables all debug namespaces.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\",\n```\n\n----------------------------------------\n\nTITLE: Prepending Chunks to SourceNode in JavaScript\nDESCRIPTION: Demonstrates the `prepend` prototype method, which inserts a chunk of generated code at the beginning of the `SourceNode`. Similar to `add`, the chunk can be a string, another `SourceNode`, or an array of these.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nnode.prepend(\"/** Build Id: f783haef86324gf ** /\\n\\n\");\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Application with Debugging Enabled in Windows CMD\nDESCRIPTION: Provides an example of setting the `DEBUG` environment variable to enable all namespaces (`*`) and immediately running a Node.js application (`app.js`) within the same command line in the Windows Command Prompt.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=* & node app.js\n```\n\n----------------------------------------\n\nTITLE: Boolean Matching with isMatch Function in Micromatch (JavaScript)\nDESCRIPTION: Demonstrates the use of micromatch.isMatch to test whether a string matches one or more patterns, returning a boolean. Assumes micromatch library is imported and accessible. The function takes a single string and a pattern or patterns array and outputs true or false based on the match result.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(micromatch.isMatch('foo', 'f*')) //=> true\nconsole.log(micromatch.isMatch('foo', ['b*', 'f*'])) //=> true\n```\n\n----------------------------------------\n\nTITLE: Calculating Network Address from CIDR Notation - JavaScript\nDESCRIPTION: Obtains the network address from a given IPv4 CIDR using networkAddressFromCIDR. Expects a string in address/prefix format. Returns the calculated network address as a string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nipaddr.IPv4.networkAddressFromCIDR(\"172.0.0.1/24\") == \"172.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chalk via npm\nDESCRIPTION: Installs the 'chalk' library using the Node Package Manager (npm). This command should be run in a terminal within a Node.js project directory. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/chalk/readme.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm install chalk\n```\n\n----------------------------------------\n\nTITLE: Emulating Unix diff Command Output using diff-sequences in JavaScript\nDESCRIPTION: Provides a complete example of using `diff-sequences` to generate output similar to the Unix `diff` command for comparing two strings line by line. It includes helper functions: `getRange` to format line ranges and `pushDelIns` to format and collect the change descriptions (delete '<', insert '>', change 'c'). The main function `findShortestEditScript` splits input strings into lines, defines `isCommon` for line comparison, and uses a `foundSubsequence` callback that calls `pushDelIns` to record differences between common subsequences. It handles remaining lines after the last common subsequence and joins the collected output lines.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Given zero-based half-open range [start, end) of array indexes,\n// return one-based closed range [start + 1, end] as string.\nconst getRange = (start, end) =>\n  start + 1 === end ? `${start + 1}` : `${start + 1},${end}`;\n\n// Given index intervals of lines to delete or insert, or both, or neither,\n// push formatted diff lines onto array.\nconst pushDelIns = (aLines, aIndex, aEnd, bLines, bIndex, bEnd, array) => {\n  const deleteLines = aIndex !== aEnd;\n  const insertLines = bIndex !== bEnd;\n  const changeLines = deleteLines && insertLines;\n  if (changeLines) {\n    array.push(`${getRange(aIndex, aEnd)}c${getRange(bIndex, bEnd)}`);\n  } else if (deleteLines) {\n    array.push(`${getRange(aIndex, aEnd)}d${String(bIndex)}`);\n  } else if (insertLines) {\n    array.push(`${String(aIndex)}a${getRange(bIndex, bEnd)}`);\n  } else {\n    return;\n  }\n\n  for (; aIndex !== aEnd; aIndex += 1) {\n    array.push(`< ${aLines[aIndex]}`); // delete is less than\n  }\n\n  if (changeLines) {\n    array.push('---');\n  }\n\n  for (; bIndex !== bEnd; bIndex += 1) {\n    array.push(`> ${bLines[bIndex]}`); // insert is greater than\n  }\n};\n\n// Given content of two files, return emulated output of diff utility.\nconst findShortestEditScript = (a, b) => {\n  const aLines = a.split('\\n');\n  const bLines = b.split('\\n');\n  const aLength = aLines.length;\n  const bLength = bLines.length;\n\n  const isCommon = (aIndex, bIndex) => aLines[aIndex] === bLines[bIndex];\n\n  let aIndex = 0;\n  let bIndex = 0;\n  const array = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    pushDelIns(aLines, aIndex, aCommon, bLines, bIndex, bCommon, array);\n    aIndex = aCommon + nCommon; // number of lines compared in a\n    bIndex = bCommon + nCommon; // number of lines compared in b\n  };\n\n  diff(aLength, bLength, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change lines.\n  pushDelIns(aLines, aIndex, aLength, bLines, bIndex, bLength, array);\n\n  return array.length === 0 ? '' : `${array.join('\\n')}\\n`;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Detecting Undefined Type with type-detect (JavaScript)\nDESCRIPTION: Demonstrates how `type-detect` identifies the `undefined` value, distinguishing it from `null`. It uses `assert` to check that `type(undefined)` returns 'undefined' and `type(null)` does not. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type(undefined) === 'undefined');\nassert(type(null) !== 'undefined');\n```\n\n----------------------------------------\n\nTITLE: Negating a Type Union Using TypeBox's Type.Not in TypeScript\nDESCRIPTION: Illustrates use of Type.Not to create a type schema matching strings not in a specified union of literals. Combines union and exclusion patterns by wrapping a union of literal types in Type.Not alongside a base Type.String. Requires TypeBox; input is an array of Type.Literal types and a string type. Output is a schema matching strings except for the listed literals.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst T = Type.Not(\n  Type.Union([\n    Type.Literal('x'),\n    Type.Literal('y'),\n    Type.Literal('z')\n  ]),\n  Type.String()\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Leven via npm - Shell\nDESCRIPTION: This snippet provides the shell command to install the 'leven' package using npm. It is required to set up the 'leven' JavaScript module in your project before usage. Run this command in your project directory to add 'leven' as a dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/leven/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install leven\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-typescript with yarn (Shell)\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-typescript` package using yarn. The `--dev` flag ensures it's added as a development dependency in your project's `package.json`. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-typescript/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn add @babel/plugin-syntax-typescript --dev\n```\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for @jridgewell/trace-mapping (Text)\nDESCRIPTION: The MIT license text granting permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software associated with @jridgewell/trace-mapping, provided the copyright notice (Copyright 2022 Justin Ridgewell) and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2022 Justin Ridgewell <justin@ridgewell.name>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Importing TypeCompiler from TypeBox in TypeScript\nDESCRIPTION: Shows the import statement required to use the TypeBox TypeCompiler module. The TypeCompiler provides high-performance JIT compilation of TypeBox types into validation functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Electron to Chromium Major Version Mapping in Node.js\nDESCRIPTION: Illustrates retrieving the versions property, which maps major Electron versions to corresponding major Chromium versions. Shows how to log the Chromium version for a given Electron version. Depends on the e2c module and assumes access to a console environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar versions = e2c.versions;\nconsole.log(versions['1.4']);\n// returns \"53\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Signal Information Using human-signals - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import and use the 'human-signals' library to access metadata for process signals by both their name and numeric code. The example shows usage of the signalsByName and signalsByNumber objects to fetch detailed descriptions and properties of specific process signals (e.g., SIGINT and SIGFPE). The only dependency required is the 'human-signals' Node.js package, which must be installed beforehand. Inputs are signal names or numbers, and outputs are signal object details; intended for Node.js environments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/human-signals/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { signalsByName, signalsByNumber } = require('human-signals')\n\nconsole.log(signalsByName.SIGINT)\n// {\n//   name: 'SIGINT',\n//   number: 2,\n//   description: 'User interruption with CTRL-C',\n//   supported: true,\n//   action: 'terminate',\n//   forced: false,\n//   standard: 'ansi'\n// }\n\nconsole.log(signalsByNumber[8])\n// {\n//   name: 'SIGFPE',\n//   number: 8,\n//   description: 'Floating point arithmetic error',\n//   supported: true,\n//   action: 'core',\n//   forced: false,\n//   standard: 'ansi'\n// }\n```\n\n----------------------------------------\n\nTITLE: Using match Method for Array Filtering (minimatch Migration) in Micromatch (JavaScript)\nDESCRIPTION: Shows how to use micromatch.match to filter an array using glob patterns, similar to minimatch's match method. Inputs are string arrays and patterns, output is a filtered string or array. Requires micromatch to be imported.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(micromatch.match(['foo', 'bar'], 'b*')); //=> 'bar'\n```\n\n----------------------------------------\n\nTITLE: Failing Example of Char-by-Char Escaping Order with Manual Replacement in JavaScript\nDESCRIPTION: Demonstrates the problem with changing the replacement order in manual string escaping: the order of .replace calls affects output correctness. In this case, replacing special characters other than '&' first results in double-escaped or malformed output (e.g. '<' becomes '&amp;lt;' instead of '&lt;'). The snippet underscores the risks of not processing all relevant characters at once. No dependencies; intended as a cautionary example.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/html-escaper/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction escape(s) {\n  return s.replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          .replace(/'/g, \"&#39;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/&/g, \"&amp;\");\n}\n\nescape('<'); // &amp;lt; instead of &lt;\n\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script with dotenvx for Command Substitution (Shell)\nDESCRIPTION: Shell command demonstrating how to run a Node.js script (`index.js`) using `dotenvx run`. This command enables `dotenvx` features like processing command substitution (e.g., `$(whoami)`) defined in the `.env` file. The output shows `dotenvx` injecting the variable and the script printing the resolved value (e.g., substituting `yourusername`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dotenv/README.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ dotenvx run --debug -- node index.js\n[dotenvx@0.14.1] injecting env (1) from .env\nDATABASE_URL postgres://yourusername@localhost/my_database\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for proxy-addr with npm in Shell\nDESCRIPTION: Demonstrates running the benchmarking scripts provided by proxy-addr using npm. This tests performance characteristics and may help in optimization. Requires Node.js, proxy-addr, and appropriate scripts defined in package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run-script bench\n```\n\n----------------------------------------\n\nTITLE: Using encode and decode for Sourcemap Mappings (JavaScript)\nDESCRIPTION: Demonstrates how to use the `encode` and `decode` functions provided by the `@jridgewell/sourcemap-codec` package. The `decode` function converts a VLQ-encoded string into a structured array representing mapping segments, while `encode` performs the reverse operation. Requires the package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/sourcemap-codec/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { encode, decode } from '@jridgewell/sourcemap-codec';\n\nvar decoded = decode( ';EAEEA,EAAE,EAAC,CAAE;ECQY,UACC' );\n\nassert.deepEqual( decoded, [\n\t// the first line (of the generated code) has no mappings,\n\t// as shown by the starting semi-colon (which separates lines)\n\t[],\n\n\t// the second line contains four (comma-separated) segments\n\t[\n\t\t// segments are encoded as you'd expect:\n\t\t// [ generatedCodeColumn, sourceIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]\n\n\t\t// i.e. the first segment begins at column 2, and maps back to the second column\n\t\t// of the second line (both zero-based) of the 0th source, and uses the 0th\n\t\t// name in the `map.names` array\n\t\t[ 2, 0, 2, 2, 0 ],\n\n\t\t// the remaining segments are 4-length rather than 5-length,\n\t\t// because they don't map a name\n\t\t[ 4, 0, 2, 4 ],\n\t\t[ 6, 0, 2, 5 ],\n\t\t[ 7, 0, 2, 7 ]\n\t],\n\n\t// the final line contains two segments\n\t[\n\t\t[ 2, 1, 10, 19 ],\n\t\t[ 12, 1, 11, 20 ]\n\t]\n]);\n\nvar encoded = encode( decoded );\nassert.equal( encoded, ';EAEEA,EAAE,EAAC,CAAE;ECQY,UACC' );\n```\n\n----------------------------------------\n\nTITLE: Converting IP Address Objects to Byte Arrays - JavaScript\nDESCRIPTION: Shows how to convert parsed IP address objects (IPv4 or IPv6) back to byte arrays using toByteArray, supporting network byte order. Useful for serialization or compatibility with low-level network libraries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"127.0.0.1\");\naddr.toByteArray(); // => [0x7f, 0, 0, 1]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"2001:db8::1\");\naddr.toByteArray(); // => [0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Script for Debugging in Windows PowerShell\nDESCRIPTION: Illustrates how to define an npm script named `windowsDebug` within a `package.json` file. This script uses PowerShell's `-Command` flag to set the `DEBUG` environment variable to enable all namespaces ('*') before executing the `node app.js` command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n  \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\",\n```\n\n----------------------------------------\n\nTITLE: Looking Up Charset by MIME Type with mime - JavaScript\nDESCRIPTION: This snippet shows how to use the 'charsets.lookup' method of the 'mime' module to retrieve the charset associated with a given MIME type. It depends on the 'mime' package. Input is a MIME type string (e.g. 'text/plain'), and output is a charset string (e.g. 'UTF-8'). The lookup logic is basic and may need refinement for advanced use cases.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.charsets.lookup('text/plain');        // => 'UTF-8'\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Array in Exports Field (JSON5)\nDESCRIPTION: This JSON5 snippet shows usage of a fallback array in the `exports` field that includes a protocol entry (`std:core-module`) as the primary fallback, followed by a local file ('./core-polyfill.js'). This pattern enables feature-detection-based resolution, where environments supporting the protocol will select the first entry, and others fall back to the polyfilled file. This structure is primarily leveraged for forward compatibility in runtimes such as Node.js.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_5\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"exports\": {\n        \"./core-polyfill\": [\"std:core-module\", \"./core-polyfill.js\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using postgres-interval to Parse and Format Intervals in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the 'postgres-interval' package. It imports the `parse` function, parses a PostgreSQL interval string ('01:02:03') into a JavaScript object containing hours, minutes, and seconds. It then shows how to format this object back into a PostgreSQL interval string using `toPostgres()` and an ISO 8601 duration string using `toISO()`. Requires the 'postgres-interval' package to be installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-interval/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar parse = require('postgres-interval')\nvar interval = parse('01:02:03')\n//=> {hours: 1, minutes: 2, seconds: 3}\ninterval.toPostgres()\n// 3 seconds 2 minutes 1 hours\ninterval.toISO()\n// P0Y0M0DT1H2M3S\n```\n\n----------------------------------------\n\nTITLE: Preserving Original Object Key Order or Custom Sorting Using compareKeys in jest-diff in JavaScript\nDESCRIPTION: Demonstrates comparing two objects with diff, customizing the object key display order with the compareKeys function in the options object. Setting compareKeys to () => 0 ensures original order, while custom functions can implement any sort order. Useful for readable diffs of complex objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_37\n\nLANGUAGE: js\nCODE:\n```\nconst a = {c: 'c', b: 'b1', a: 'a'};\\nconst b = {c: 'c', b: 'b2', a: 'a'};\\n\\nconst options = {\\n  // The keys will be in their original order\\n  compareKeys: () => 0,\\n};\\n\\nconst difference = diff(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Allowed Types (JavaScript)\nDESCRIPTION: This snippet demonstrates how to allow multiple valid types for a configuration option using `multipleValidOptions`. It imports the helper function and uses it within the `exampleConfig` to specify that the `bar` option can accept either a string or a number.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {multipleValidOptions} from 'jest-validate';\n\nvalidate(config, {\n  // `bar` will accept either a string or a number\n  bar: multipleValidOptions('string is ok', 2),\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if Function is a Generator using is-generator-fn - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to require the 'is-generator-fn' package and use it to check whether a given function is a generator. The function 'isGeneratorFn' is imported with require, and is invoked with both a generator function and a regular function, returning a boolean indicating whether the input is a generator. Requires that 'is-generator-fn' has been installed and is available in node_modules. Expects function expressions as input; outputs boolean results.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-generator-fn/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst isGeneratorFn = require('is-generator-fn');\n\nisGeneratorFn(function * () {});\n//=> true\n\nisGeneratorFn(function () {});\n//=> false\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmarks for escalade vs find-up (Text)\nDESCRIPTION: Displays benchmark results comparing the performance of `escalade` (both async and sync modes) against the `find-up` library on Node.js v10.13.0. Metrics include load time (ms) and operations per second (ops/sec) for finding files at different directory depths (6, 12, and 18 levels) and for finding existing vs. non-existing files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escalade/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# Load Time\n  find-up         3.891ms\n  escalade        0.485ms\n  escalade/sync   0.309ms\n\n# Levels: 6 (target = \"foo.txt\"):\n  find-up          x 24,856 ops/sec ±6.46% (55 runs sampled)\n  escalade         x 73,084 ops/sec ±4.23% (73 runs sampled)\n  find-up.sync     x  3,663 ops/sec ±1.12% (83 runs sampled)\n  escalade/sync    x  9,360 ops/sec ±0.62% (88 runs sampled)\n\n# Levels: 12 (target = \"package.json\"):\n  find-up          x 29,300 ops/sec ±10.68% (70 runs sampled)\n  escalade         x 73,685 ops/sec ± 5.66% (66 runs sampled)\n  find-up.sync     x  1,707 ops/sec ± 0.58% (91 runs sampled)\n  escalade/sync    x  4,667 ops/sec ± 0.68% (94 runs sampled)\n\n# Levels: 18 (target = \"missing123.txt\"):\n  find-up          x 21,818 ops/sec ±17.37% (14 runs sampled)\n  escalade         x 67,101 ops/sec ±21.60% (20 runs sampled)\n  find-up.sync     x  1,037 ops/sec ± 2.86% (88 runs sampled)\n  escalade/sync    x  1,248 ops/sec ± 0.50% (93 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in PowerShell\nDESCRIPTION: Shows the syntax for setting the DEBUG environment variable in Windows PowerShell using the '$env:' prefix. This example sets DEBUG to enable all namespaces (`*`) except those starting with 'not_this'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG = \"*,-not_this\"\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js App with DEBUG in Windows CMD\nDESCRIPTION: Example of setting the DEBUG environment variable to enable all namespaces ('*') and then immediately running a Node.js application ('app.js') within the same Windows CMD command line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=* & node app.js\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in Windows CMD\nDESCRIPTION: Shows how to set the DEBUG environment variable in the standard Windows Command Prompt (CMD) using the 'set' command. This example enables all debug messages except those with the namespace 'not_this'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=*,-not_this\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in Windows PowerShell\nDESCRIPTION: Shows how to set the DEBUG environment variable in Windows PowerShell using the '$env:' syntax. This example enables all debug messages except those with the namespace 'not_this'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG = \"*,-not_this\"\n```\n\n----------------------------------------\n\nTITLE: Accessing the Writer Object in istanbul-reports Context (JavaScript)\nDESCRIPTION: This property on the `context` object provides access to the underlying writer instance used for generating the report output. This could be a file writer, a console writer, or another stream, depending on the report configuration. Report generators use this to write the final report content. Requires a `context` object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-reports/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.writer\n```\n\n----------------------------------------\n\nTITLE: Managing Conditional Color Support in kleur (JavaScript)\nDESCRIPTION: Demonstrates how to control whether 'kleur' outputs ANSI color codes. Color support can be manually disabled by setting `kleur.enabled = false`, or enabled/disabled based on terminal capabilities detected by external libraries like 'color-support'. Text will only be colored if `kleur.enabled` is truthy. Requires the 'kleur' package and optionally 'color-support'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/kleur/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst kleur = require('kleur');\n\n// manually disable\nkleur.enabled = false;\n\n// or use another library to detect support\nkleur.enabled = require('color-support').level;\n\nconsole.log(kleur.red('I will only be colored red if the terminal supports colors'));\n```\n\n----------------------------------------\n\nTITLE: Limiting Context Lines in jest-diff Output in JavaScript\nDESCRIPTION: Configures the options object to restrict the number of unchanged lines (context) shown in diff outputs, emphasizing nearby changes and collapsing distant unmodified lines. The expand property is set to false to collapse unrelated context. All settings work directly with jest-diff.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\\n  contextLines: 1,\\n  expand: false,\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG and Running Node.js App in Windows CMD\nDESCRIPTION: Example command for Windows Command Prompt (CMD) showing how to set the DEBUG environment variable (to enable all namespaces '*') and immediately run a Node.js application ('app.js') using the '&' operator.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=* & node app.js\n```\n\n----------------------------------------\n\nTITLE: Creating Regular Expressions with POSIX Bracket Classes in Picomatch - JavaScript\nDESCRIPTION: This snippet shows how to create a regular expression using picomatch's `makeRe` with POSIX bracket class support enabled. Requires the `picomatch` npm package; set the `posix` option to `true` for bracket classes to work. The input is a glob pattern, and the output is a RegExp object for matching word characters. Useful for matching patterns with standard POSIX character classes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(pm.makeRe('[[:word:]]+', { posix: true }));\n//=> /^(?:(?=.)[A-Za-z0-9_]+\\/?)$/\n\n```\n\n----------------------------------------\n\nTITLE: Running FakeTimers Tests on Node.js (Standard)\nDESCRIPTION: Executes the FakeTimers test suite using the predefined npm script 'test'. This command is typically configured in the project's package.json to run the tests in a Node.js environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing TypeSystem from TypeBox in TypeScript\nDESCRIPTION: Shows the import statement required to use the TypeBox TypeSystem module. This module allows defining custom types and configuring assertion policies that affect both `TypeCompiler` and `Value` modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { TypeSystem } from '@sinclair/typebox/system'\n```\n```\n\n----------------------------------------\n\nTITLE: Installing pure-rand via npm or yarn in Bash\nDESCRIPTION: Shows the command-line instructions to install the `pure-rand` package using either npm or yarn. This is a prerequisite for using the library in a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pure-rand/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pure-rand\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add pure-rand\n```\n\n----------------------------------------\n\nTITLE: Using the isexe Module to Check File Executability in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `isexe` Node.js module to check if a file is executable. It shows requiring the module, using the asynchronous function `isexe(path, [options], callback)` with a callback, handling errors, and using the synchronous version `isexe.sync(path, [options])`. It also illustrates using the `ignoreErrors` option to treat errors as non-executable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/isexe/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar isexe = require('isexe')\nisexe('some-file-name', function (err, isExe) {\n  if (err) {\n    console.error('probably file does not exist or something', err)\n  } else if (isExe) {\n    console.error('this thing can be run')\n  } else {\n    console.error('cannot be run')\n  }\n})\n\n// same thing but synchronous, throws errors\nvar isExe = isexe.sync('some-file-name')\n\n// treat errors as just \"not executable\"\nisexe('maybe-missing-file', { ignoreErrors: true }, callback)\nvar isExe = isexe.sync('maybe-missing-file', { ignoreErrors: true })\n```\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG environment variable on Windows Shell\nDESCRIPTION: Shows how to enable or exclude debug log namespaces in Windows Command Prompt by setting the DEBUG environment variable. Crucial for controlling which logs appear during application execution. Limitations: This method is for CMD, not PowerShell.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/debug/README.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=*,-not_this\n```\n\n----------------------------------------\n\nTITLE: Parsing Sample Arguments with Argparse CLI - Shell\nDESCRIPTION: This command demonstrates parsing arguments using an 'argparse'-based CLI script in Node.js. Provided arguments are assigned to corresponding properties as defined in the JavaScript parser configuration. The expected input is a shell command invoking the script with argument values, and the output is the JSON-like object reflecting parsed values.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/argparse/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./test.js -f=3 --bar=4 --baz 5\\n{ foo: '3', bar: '4', baz: '5' }\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in Windows CMD (CMD)\nDESCRIPTION: Sets the `DEBUG` environment variable in the Windows Command Prompt (CMD) using the `set` command. This example enables all debug namespaces (`*`) except for the one named 'not_this' (`-not_this`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nset DEBUG=*,-not_this\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease versions without number using semver (JavaScript)\nDESCRIPTION: Shows how setting the `identifierBase` argument to `false` in `semver.inc()` results in a prerelease version increment without adding or incrementing a numeric suffix (e.g., `1.2.4-beta`). Requires the `semver` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta', false)\n// '1.2.4-beta'\n```\n\n----------------------------------------\n\nTITLE: Importing pure-rand in the Browser via ES Modules\nDESCRIPTION: Demonstrates how to import the `pure-rand` library as an ES module directly in a web browser using the unpkg CDN URL. This allows using the library without a build step in supported browsers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pure-rand/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as prand from 'https://unpkg.com/pure-rand/lib/esm/pure-rand.js';\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure OpenAI Integration - Bash and JSON\nDESCRIPTION: Checks the /api/ai/status API endpoint with curl to confirm the Azure OpenAI integration is functioning. The expected JSON output describes status, deployment, and a message. Ensures external cloud integration is set up properly and accessible from the backend.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/api/ai/status\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"operational\",\n  \"deployment\": \"gpt-4o-mini\",\n  \"message\": \"Azure OpenAI is working properly\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Node 16 TypeScript Configuration in tsconfig.json - JSON\nDESCRIPTION: This snippet provides the minimal tsconfig.json entry for extending the @tsconfig/node16 configuration. By adding the 'extends' property with the referenced path, the project will inherit compiler settings tailored for Node.js 16. The only parameter is the string reference to the base TSConfig. The expected behavior is the automatic application of Node 16 compatible TypeScript settings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node16/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extends\": \"@tsconfig/node16/tsconfig.json\"\n```\n\n----------------------------------------\n\nTITLE: Example React Component with Memphis Decorators\nDESCRIPTION: Provides an example of a simple React functional component (`EnhancedCard`) that incorporates placeholder `div` elements with `decorator` classes (`decorator-1`, `decorator-2`, `decorator-3`). These decorators will only be visible when the Memphis style is enabled via the body classes, as defined in the accompanying CSS.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Example card with decorators\nexport function EnhancedCard({ children, className }: { children: React.ReactNode; className?: string }) {\n  return (\n    <div className={`card ${className}`}>\n      <div className=\"decorator decorator-1\"></div>\n      <div className=\"decorator decorator-2\"></div>\n      <div className=\"decorator decorator-3\"></div>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing Deprecations via TRACE_DEPRECATION Environment Variable (Shell)\nDESCRIPTION: Shows how to enable full stack traces for deprecation warnings for specific namespaces ('my-module', 'othermod') using the `TRACE_DEPRECATION` environment variable. Use '*' to trace all.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in File Paths with Picomatch - JavaScript\nDESCRIPTION: Illustrates how to use picomatch's `makeRe` function to handle file paths containing special characters that need to be matched literally. Requires the `picomatch` npm package. Inputs are patterns with escaped parentheses, and the output is a RegExp object for literal matching. Ensures that characters like parentheses are treated as plain text, not as pattern operators.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(pm.makeRe('foo/bar \\\\(1\\\\)'));\nconsole.log(pm.makeRe('foo/bar \\\\(1\\\\)'));\n\n```\n\n----------------------------------------\n\nTITLE: Including Source Map Support in the Browser - HTML\nDESCRIPTION: Demonstrates how to add source map support to browser environments by including the bundled JavaScript file and invoking install() in a <script> tag. Useful for debugging browserified or directly included JS files with source maps. Requires browser-source-map-support.js to be available in your project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"browser-source-map-support.js\"></script>\n<script>sourceMapSupport.install();</script>\n```\n\n----------------------------------------\n\nTITLE: Inspecting DOM Elements with object-inspect in JavaScript\nDESCRIPTION: Shows how to use `object-inspect` to inspect an array containing a DOM element and a nested object. It creates a `div` element, sets attributes and inner HTML, and then inspects an array containing this element and a complex object, logging the result. This example is intended for a browser environment due to `document.createElement`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/object-inspect/readme.markdown#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar inspect = require('object-inspect');\n\nvar d = document.createElement('div');\nd.setAttribute('id', 'beep');\nd.innerHTML = '<b>wooo</b><i>iiiii</i>';\n\nconsole.log(inspect([ d, { a: 3, b : 4, c: [5,6,[7,[8,[9]]]] } ]));\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG and Running Node.js App in PowerShell\nDESCRIPTION: Example command for Windows PowerShell showing how to set the DEBUG environment variable (to enable the 'app' namespace) and then run a Node.js application ('app.js') in the same line using a semicolon.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG='app';node app.js\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment using Bash Commands\nDESCRIPTION: This sequence of Bash commands guides the user through setting up the DecA(I)de project locally. It covers cloning the Git repository, navigating into the directory, installing Node.js dependencies using npm, copying the environment variable example file to a `.env` file for editing, applying database schema changes using `npm run db:push`, and finally starting the development server using `npm run dev`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MASTER_PROMPT.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Clone repository\ngit clone https://github.com/yourusername/decade.git\ncd decade\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your configuration\n\n# Push database schema\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: CoffeeScript Demo: Compilation and Execution\nDESCRIPTION: Shell commands showing how to compile the `demo.coffee` file using the CoffeeScript compiler (`coffee`) with the `--map` flag to generate source maps, and then run the resulting JavaScript file (`demo.js`) using Node.js. The output displays a stack trace referencing the original `.coffee` file and line numbers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @cspotcode/source-map-support coffeescript\n$ node_modules/.bin/coffee --map --compile demo.coffee\n$ node demo.js\n\ndemo.coffee:3\n  bar = -> throw new Error 'this is a demo'\n                     ^\nError: this is a demo\n    at bar (demo.coffee:3:22)\n    at foo (demo.coffee:4:3)\n    at Object.<anonymous> (demo.coffee:5:1)\n    at Object.<anonymous> (demo.coffee:1:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n```\n\n----------------------------------------\n\nTITLE: Defining the SendRequest Type Alias in TypeScript\nDESCRIPTION: This snippet defines the `SendRequest` type alias in TypeScript. It represents a function that takes a `PipelineRequest` object as input and asynchronously returns a `Promise` resolving to a `PipelineResponse` object, forming the core contract for sending HTTP requests within the pipeline.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-rest-pipeline/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipelineRequest, PipelineResponse } from \"@azure/core-rest-pipeline\";\n\ntype SendRequest = (request: PipelineRequest) => Promise<PipelineResponse>;\n```\n\n----------------------------------------\n\nTITLE: Default (Non-Minimal) Escaping (JavaScript)\nDESCRIPTION: Illustrates the default escaping behavior where `minimal` is effectively false. While control characters like `\\n` are escaped, other printable non-ASCII characters (©) and astral symbols (𝌆) remain unescaped unless necessary for ASCII safety (like U+2029). Note: The description in the source text focuses on `minimal: true`, but this example shows the default (`minimal: false`) behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('foo\\u2029bar\\nbaz©qux𝌆flops', {\n  'minimal': false\n});\n// → 'foo\\\\u2029bar\\\\nbaz©qux𝌆flops'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Numeric Precision Issues - JavaScript\nDESCRIPTION: Illustrates the loss of integer precision in JavaScript Numbers when handling large values beyond 2^53 using hexadecimal and decimal conversions. Shows expected versus actual behavior when converting numbers to hexadecimal strings. No additional dependencies required. Inputs are numeric literals, and the output shows stringified results with precision loss.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-int64/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// First, let's illustrate the problem ...\\n> (0x123456789).toString(16)\\n'123456789' // <- what we expect.\\n> (0x123456789abcdef0).toString(16)\\n'123456789abcdf00' // <- Ugh!  JS doesn't do big ints. :(\n```\n\n----------------------------------------\n\nTITLE: Performing Brace Expansion with Micromatch in JavaScript\nDESCRIPTION: Demonstrates the `braces` function (exported separately) from the 'micromatch' library ecosystem. It expands brace patterns within a string. Requires the 'micromatch' library (specifically its `braces` export). Takes a string containing brace patterns and optional options (like `expand`). Returns an array of strings, either with the pattern converted for regex or fully expanded based on options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst { braces } = require('micromatch');\nconsole.log(braces('foo/{a,b,c}/bar'));\n//=> [ 'foo/(a|b|c)/bar' ]\n\nconsole.log(braces('foo/{a,b,c}/bar', { expand: true }));\n//=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n```\n\n----------------------------------------\n\nTITLE: Defining the TsconfigResult Type in TypeScript\nDESCRIPTION: Shows the TypeScript type definition for the object returned by the `getTsconfig` function. It includes the `path` property, a string representing the absolute path to the found tsconfig file, and the `config` property, which holds the resolved `TsConfigJsonResolved` object containing the parsed and extended configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-tsconfig/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TsconfigResult = {\n\n    /**\n     * The path to the tsconfig.json file\n     */\n    path: string\n\n    /**\n     * The resolved tsconfig.json file\n     */\n    config: TsConfigJsonResolved\n}\n```\n\n----------------------------------------\n\nTITLE: Running Babel with Jest Preset via CLI (Shell Script)\nDESCRIPTION: Demonstrates how to execute Babel from the command line to transform a JavaScript file using the Jest preset. Assumes babel-preset-jest is installed, and the CLI command is run in a compatible environment. 'script.js' represents the target source file. This technique is useful for one-off transformations or scripting tasks.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-preset-jest/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ babel script.js --presets jest\n```\n\n----------------------------------------\n\nTITLE: Instantiating Classes with Logging in TypeScript/JavaScript\nDESCRIPTION: This snippet demonstrates a hypothetical `getInstance` function, likely part of a factory or dependency injection pattern. It shows how to create instances of `IdleService` and `News` classes, passing arguments to the constructor. The function uses a counter (`instanceCounter`) and logs the creation of each instance to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-fest/readme.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\t\t\tinstanceCounter.set(constructor, count + 1);\n\n\t\t\tconsole.log(`Created ${count + 1} instances of ${Constr.name} class`);\n\n\t\t\treturn instance;\n\t}\n\n\n\tconst idleService = getInstance(IdleService);\n\t// Will log: `Created 1 instances of IdleService class`\n\tconst newsEntry = getInstance(News, 'New ECMAScript proposals!', 'Last month...');\n\t// Will log: `Created 1 instances of News class`\n```\n\n----------------------------------------\n\nTITLE: Example Calculation for maxUses\nDESCRIPTION: Demonstrates the application of the 'maxUses' formula using specific example values. It assumes one connection is acquired and released per request, aims for a 30-minute (1800 seconds) rebalancing window, handles 1000 total requests per second across 10 application instances, each with a connection pool size of 25. The resulting calculation suggests a 'maxUses' value of 7200.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nmaxUses = rebalanceWindowSeconds * totalRequestsPerSecond / numAppInstances / poolSize\n   7200 =        1800            *          1000          /        10       /    25\n```\n\n----------------------------------------\n\nTITLE: Writing Line to Console via Context in istanbul-reports (JavaScript)\nDESCRIPTION: Accessed via `context.console`, this method writes a line of text to the configured console or output stream, automatically appending a newline character at the end. It is analogous to `console.log` and is used for structured line-by-line output in reports. Requires the `context.console` object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-reports/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.console.println\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset Jest via npm (Shell Script)\nDESCRIPTION: Installs the babel-preset-jest package as a development dependency using npm. This step is required before configuring Babel to use the Jest preset for processing JavaScript code in testing environments. The command must be run in a terminal and assumes that Node.js and npm are already installed in the project directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-preset-jest/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save-dev babel-preset-jest\n```\n\n----------------------------------------\n\nTITLE: Binding Emittery Methods to an Object in JavaScript\nDESCRIPTION: Illustrates how to use the `bindMethods()` function to attach Emittery methods (like `emit`, `on`, etc.) directly to a target object. This allows calling Emittery functions as if they were native methods of the target object. If no method names are provided, all Emittery methods are bound.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport Emittery = require('emittery');\n\nconst object = {};\n\nnew Emittery().bindMethods(object);\n\nobject.emit('event');\n```\n\n----------------------------------------\n\nTITLE: Using Array Inputs for Color Values in color-convert (JavaScript)\nDESCRIPTION: Demonstrates that `color-convert` functions accepting multiple arguments (like RGB components) also support receiving those arguments as a single array. The example shows converting RGB values [123, 45, 67] to HEX using both multiple arguments and an array input, yielding the same result. This does not apply to functions expecting single-value inputs like keywords or hex strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/color-convert/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar convert = require('color-convert');\n\nconvert.rgb.hex(123, 45, 67);      // '7B2D43'\nconvert.rgb.hex([123, 45, 67]);    // '7B2D43'\n```\n\n----------------------------------------\n\nTITLE: Applying Styles for Error Page Layout - CSS\nDESCRIPTION: This CSS snippet is embedded within a <style> tag in the HTML and defines the layout, fonts, colors, and visual structure for the error response page. It ensures the page is fully responsive, using media queries for small screens and specific styling for distinctive sections like messages, ASCII art, and footer navigation. There are no external CSS frameworks required, but the IBM Plex Sans font is loaded from Google Fonts for a consistent appearance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--div-data-replit-metadata-client-src-components-ui-toaster-tsx-22-14-data-component-name-ToastDes-1743475801375.txt#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody {\\n      margin: 0;\\n      height: 100vh;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      background: #1c2333;\\n      font-family: \\\"IBM Plex Sans\\\", \\\"sans\\\";\\n      color: #f5f9fc;\\n    }\\n\\n    .title-box {\\n      font-size: 12px;\\n      inline-size: max-content;\\n      max-width: 100%;\\n    }\\n\\n    .description-box {\\n      font-size: 10px;\\n      inline-size: max-content;\\n      max-width: 100%;\\n    }\\n\\n    .err-box {\\n      padding: 1em;\\n      width: 100vw;\\n      max-width: 100vw;\\n      overflow: hidden;\\n    }\\n\\n    .message {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    }\\n\\n    .ascii {\\n      font-size: 6px;\\n      text-align: center;\\n      opacity: .8;\\n    }\\n\\n    .eval-bot {\\n      margin: 4em;\\n    }\\n\\n    @media (max-width: 500px) {\\n      .title-box {\\n        font-size: 10px;\\n      }\\n\\n      .description-box {\\n        font-size: 8px;\\n      }\\n\\n      .eval-bot {\\n        margin: 1em;\\n      }\\n\\n      .eval-bot svg {\\n        width: 200px;\\n      }\\n\\n      .message {\\n        flex-direction: column;\\n        align-items: center;\\n      }\\n\\n      .repl-links {\\n        font-size: 14px;\\n      }\\n    }\\n\\n    .console {\\n      background-color: #0e1628;\\n      color: #fff;\\n      font-family: \\\"IBM Plex Sans\\\", \\\"sans\\\";\\n      padding: 1em;\\n      margin: 1em;\\n    }\\n\\n    .footer-item {\\n      margin: 1em;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n    }\\n\\n    .link-icon {\\n      margin-right: 8px;\\n      margin-top: 4px;\\n    }\\n\\n    a {\\n      color: #c2c8cc;\\n    }\n```\n\n----------------------------------------\n\nTITLE: Using jsesc with 'backtick' Quotes Option (JavaScript)\nDESCRIPTION: Shows how to set the `quotes` option to `'backtick'`. Backticks within the input string are escaped (\\`), making the output suitable for embedding within JavaScript template literals.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('`Lorem` ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'backtick'\n});\n// → '\\\\`Lorem\\\\` ipsum \"dolor\" sit \\'amet\\' etc.'\n// → \"\\\\`Lorem\\\\` ipsum \\\"dolor\\\" sit 'amet' etc.\"\n// → `\\\\\\`Lorem\\\\\\` ipsum \"dolor\" sit 'amet' etc.`\n```\n\n----------------------------------------\n\nTITLE: Initializing DecA(I)de Project Directory and Git Repository (Bash)\nDESCRIPTION: This Bash snippet executes commands to set up the initial project structure. It creates a root directory named 'decade', changes the current directory into it, initializes a Node.js project using npm (creating a basic package.json), and initializes a Git repository for version control.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nmkdir decade\ncd decade\nnpm init -y\ngit init\n```\n```\n\n----------------------------------------\n\nTITLE: Forbidding Semicolons After Decorators in Classes - Babylon - JavaScript\nDESCRIPTION: This code snippet demonstrates that the Babylon parser will now throw an error if a semicolon is placed after a decorator in a class definition. To correctly use decorators, do not include a semicolon directly after the decorator. No dependencies are required besides having Babel/Babylon set up for decorator parsing. The main input is a class using a decorator with an erroneous semicolon; the output is a thrown parsing error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {\n@a;\nfoo(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting and Copying Buffer Representations from Int64 - JavaScript\nDESCRIPTION: Presents how to extract the internal 8-octet Buffer representation from an Int64 object with toBuffer, and how to copy it into an existing Buffer with an offset using the copy method. Requires node-int64 and Buffer. Inputs are Int64 instances and possibly destination Buffers with offsets, outputs are Buffer objects containing byte representations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-int64/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Pull out into a buffer\\n> new Int64(new Buffer([0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0])).toBuffer()\\n<Buffer 12 34 56 78 9a bc de f0>\\n\\n// Or copy into an existing one (at an offset)\\n> var buf = new Buffer(1024);\\n> new Int64(new Buffer([0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0])).copy(buf, 512);\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Service Implementation Details\nDESCRIPTION: Describes the key functionalities provided by the Azure OpenAI service implementation located in `server/services/azureOpenai.ts`. This includes managing the OpenAI client instance (`getOpenAIClient`), verifying service configuration and accessibility (`checkAzureOpenAI`), and generating AI content like roleplay scenarios (`generateRoleplay`) and practice test questions (`generateTestQuestions`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n1. **Client Management**\n   - `getOpenAIClient()` - Create or retrieve an OpenAI client instance\n\n2. **Service Validation**\n   - `checkAzureOpenAI()` - Verify that the service is properly configured and accessible\n\n3. **Content Generation**\n   - `generateRoleplay()` - Create roleplay scenarios based on instructional areas and performance indicators\n   - `generateTestQuestions()` - Create multiple-choice questions for practice tests\n```\n\n----------------------------------------\n\nTITLE: Viewing Application Logs with npm or PM2 - Bash\nDESCRIPTION: These shell commands allow administrators to view DecA(I)de application logs for diagnostics. 'npm run logs' displays the latest 100 log entries; 'pm2 logs decade' is used if the app is managed by PM2. These commands are vital for troubleshooting issues, checking error messages, and confirming system behavior.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_OPENAI_SETUP.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# View the last 100 lines of application logs\\nnpm run logs\\n\\n# Or if using PM2\\npm2 logs decade\n```\n\n----------------------------------------\n\nTITLE: Using npm-run-path to Execute Local Binaries (JavaScript)\nDESCRIPTION: Demonstrates how to use the `npm-run-path` module in a Node.js script. It shows how to retrieve the augmented PATH string containing local `node_modules/.bin` directories using `npmRunPath()` and how to get a modified environment object using `npmRunPath.env()`. This modified environment object is then passed to `child_process.execFileSync` to execute a locally installed binary ('foo' in this example). Requires Node.js, the `child_process` module, and the `npm-run-path` package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/npm-run-path/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst childProcess = require('child_process');\nconst npmRunPath = require('npm-run-path');\n\nconsole.log(process.env.PATH);\n//=> '/usr/local/bin'\n\nconsole.log(npmRunPath());\n//=> '/Users/sindresorhus/dev/foo/node_modules/.bin:/Users/sindresorhus/dev/node_modules/.bin:/Users/sindresorhus/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/bin'\n\n// `foo` is a locally installed binary\nchildProcess.execFileSync('foo', {\n\tenv: npmRunPath.env()\n});\n```\n\n----------------------------------------\n\nTITLE: Ignoring Multiple Lines from Coverage in Node.js\nDESCRIPTION: Illustrates the exclusion of multiple contiguous lines from coverage reporting by using the comment `/* v8 ignore next 3 */`. The variable declaration and Windows platform check are ignored from coverage. No additional dependencies are required. The numeric argument specifies how many subsequent lines to ignore.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-to-istanbul/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst myVariable = 99\\n/* v8 ignore next 3 */\\nif (process.platform === 'win32') {\\n  console.info('hello world')\\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Dates as Moment Objects in Node-Postgres JavaScript\nDESCRIPTION: This example shows how to use the Moment.js library to parse Postgres TIMESTAMPTZ and TIMESTAMP types. It imports moment, defines a parse function to return moment objects (or null for null values), and registers it for the relevant OIDs via types.setTypeParser. Dependencies: node-postgres and moment must be installed. Note, due to possible formatting differences from PostgreSQL, some date strings may not be parsable by moment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-types/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar types = require('pg').types\nvar moment = require('moment')\nvar parseFn = function(val) {\n   return val === null ? null : moment(val)\n}\ntypes.setTypeParser(types.builtins.TIMESTAMPTZ, parseFn)\ntypes.setTypeParser(types.builtins.TIMESTAMP, parseFn)\n```\n\n----------------------------------------\n\nTITLE: Applying babel-plugin-jest-hoist using Babel Node API (JavaScript)\nDESCRIPTION: This code demonstrates how to use the Babel Core Node API (`@babel/core`) to programmatically transform JavaScript code. The `jest-hoist` plugin is enabled by including it in the `plugins` array within the options object passed to the `transform` function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-jest-hoist/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/core').transform('code', {\n  plugins: ['jest-hoist'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Array in Exports Field (JSON5)\nDESCRIPTION: This snippet demonstrates a fallback array in the `exports` field within package.json using JSON5 syntax. The subpath './feature' is mapped to an array of files, providing multiple fallback options (i.e., './file.js' and './fallback.js'). This format enables runtime to attempt alternatives if the primary path cannot be resolved, aligning with Node.js and other toolchain behaviors for flexible feature detection and forward compatibility. This configuration is intended to be consumed by tools supporting fallback resolution.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"exports\": {\n        \"./feature\": [\n            \"./file.js\",\n            \"./fallback.js\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Mapping with SourceMapGenerator in JavaScript\nDESCRIPTION: Shows how to add a single mapping using the `addMapping` method of `SourceMapGenerator`. It requires a `mapping` object containing `generated` ({line, column}), `original` ({line, column}), `source` (original file name), and optionally `name` (original identifier).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngenerator.addMapping({\n  source: \"module-one.scm\",\n  original: { line: 128, column: 0 },\n  generated: { line: 3, column: 456 }\n})\n```\n\n----------------------------------------\n\nTITLE: Escaping an Online JSON File via curl and jsesc CLI in Bash\nDESCRIPTION: Demonstrates piping the output of a 'curl' command (fetching an online JSON file) directly into the jsesc command-line tool in Bash. The '-sL' flags ensure silent operation and following redirects. The '--json --object' options are used for JSON escaping, and the result is saved to 'data-escaped.json'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sL \"http://git.io/aorKgQ\" | jsesc --json --object > data-escaped.json\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Definitions for Range Parser in TypeScript\nDESCRIPTION: Declares the overall structure, function signature, types, interfaces, and export pattern for the 'range-parser' library as TypeScript type definitions. No runtime code is included; rather, it describes how TypeScript should interpret 'range-parser' imports, including expected parameters like 'size', 'str', and optional 'options', and potential return types. It defines the shape and meaning of ranges, result codes for errors, and available options, including the 'combine' flag. No additional dependencies are noted, and the snippet should be included in a project via '@types/range-parser' when using TypeScript.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/range-parser/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * @returns `-1` when unsatisfiable and `-2` when syntactically invalid, ranges otherwise.\n */\ndeclare function RangeParser(\n    size: number,\n    str: string,\n    options?: RangeParser.Options,\n): RangeParser.Result | RangeParser.Ranges;\n\ndeclare namespace RangeParser {\n    interface Ranges extends Array<Range> {\n        type: string;\n    }\n    interface Range {\n        start: number;\n        end: number;\n    }\n    interface Options {\n        /**\n         * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n         * will be combined into a single range.\n         */\n        combine?: boolean | undefined;\n    }\n    type ResultUnsatisfiable = -1;\n    type ResultInvalid = -2;\n    type Result = ResultUnsatisfiable | ResultInvalid;\n}\n\nexport = RangeParser;\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Trailing Spaces With Middle Dot Characters in Diff Output in JavaScript\nDESCRIPTION: Defines a replaceSpacesWithMiddleDot function to substitute all trailing spaces in lines with middle dot characters for visibility, and applies it to changeLineTrailingSpaceColor and commonLineTrailingSpaceColor in options. This is for enhanced whitespace diff visualization.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst replaceSpacesWithMiddleDot = string => '·'.repeat(string.length);\\n\\nconst options = {\\n  changeLineTrailingSpaceColor: replaceSpacesWithMiddleDot,\\n  commonLineTrailingSpaceColor: replaceSpacesWithMiddleDot,\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using jest-validate (JavaScript)\nDESCRIPTION: This snippet shows the basic usage pattern for jest-validate. It imports the `validate` function and calls it with a configuration object (`config`) and validation options (`validationOptions`). The function returns an object indicating if the configuration is valid and if it contains deprecation warnings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate} from 'jest-validate';\n\nvalidate(config, validationOptions); // => {hasDeprecationWarnings: boolean, isValid: boolean}\n```\n\n----------------------------------------\n\nTITLE: Configuring Weak ETag Generation in Express.js\nDESCRIPTION: Shows how to configure the Express application to generate weak ETags using `app.set('etag', 'weak')`. Weak ETags are considered appropriate when two resources are semantically equivalent but not byte-for-byte identical. Mentioned in version 4.4.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('etag', 'weak')\n```\n\n----------------------------------------\n\nTITLE: Defining Class Metadata Schema for Jest ModuleMocker in JavaScript\nDESCRIPTION: This snippet defines the schema used by getMetadata or generateFromMetadata in jest-mock for representing a JavaScript class with static and instance methods. Passing this object to generateFromMetadata allows jest-mock to generate a mock object that reflects the structure, with properly mocked static and prototype (instance) methods. No external dependencies are required beyond standard jest-mock usage. The structure, especially the use of 'prototype' under members, fits Jest's metadata API constraints.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-mock/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst classDef = {\n  type: 'function',\n  members: {\n    staticMethod: {type: 'function'},\n    prototype: {\n      type: 'object',\n      members: {\n        instanceMethod: {type: 'function'},\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using require-directory in an Index File (JavaScript)\nDESCRIPTION: Demonstrates the basic usage within a module (e.g., `routes/index.js`). It requires the `require-directory` package and exports the result of calling it with the current `module`. This automatically loads and exports all modules within the same directory and its subdirectories.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory');\nmodule.exports = requireDirectory(module);\n```\n\n----------------------------------------\n\nTITLE: Running Node.js App with DEBUG Set in PowerShell - Command Prompt\nDESCRIPTION: Executes a Node.js app with the 'DEBUG' environment variable set in the same command using PowerShell syntax. This is used to conditionally enable debugging without permanently setting an environment variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG='app';node app.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Emittery Debug Logger Function - JavaScript\nDESCRIPTION: Presents a logger callback function that can be used to provide a custom debug logging implementation for Emittery. Details the default implementation, showing how event time, emitter name, event name, and (optionally stringified) data are formatted and output to the console. Requires the emittery package, and custom logger replaces the default debug reporting. No direct input/output but affects how debug messages are logged.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n(type, debugName, eventName, eventData) => {\n\tif (typeof eventData === 'object') {\n\t\teventData = JSON.stringify(eventData);\n\t}\n\n\tif (typeof eventName === 'symbol' || typeof eventName === 'number') {\n\t\teventName = eventName.toString();\n\t}\n\n\tconst currentTime = new Date();\n\tconst logTime = `${currentTime.getHours()}:${currentTime.getMinutes()}:${currentTime.getSeconds()}.${currentTime.getMilliseconds()}`;\n\tconsole.log(`[${logTime}][emittery:${type}][${debugName}] Event Name: ${eventName}\\n\\tdata: ${eventData}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Release Types Using Node-Semver in JavaScript\nDESCRIPTION: Demonstrates how to use the semver.RELEASE_TYPES constant to verify if a user-provided input is a valid release type. This example relies on the 'semver' package as a dependency and expects arbitraryUserInput to be defined elsewhere. Input is compared against the list of supported release types; the result is logged to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver');\n\nif (semver.RELEASE_TYPES.includes(arbitraryUserInput)) {\n  console.log('This is a valid release type!');\n} else {\n  console.warn('This is NOT a valid release type!');\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Raw String Diffs with Cleanup using diffStringsRaw() in JavaScript\nDESCRIPTION: Example of using `diffStringsRaw` with the `cleanup` option set to `true`. This compares strings character-by-character using `diff-sequences` and returns an array of `Diff` objects ([type, substring]), removing small, potentially coincidental common substrings (chaff). Requires `jest-diff`. Input: two strings (`a`, `b`), boolean `cleanup=true`. Output: Array of `Diff` objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst diffs = diffStringsRaw('changed from', 'changed to', true);\n```\n\n----------------------------------------\n\nTITLE: Overriding DEBUG Environment Variable with enable() in Shell\nDESCRIPTION: This shell command demonstrates that calling `dbg.enable(\"bar\")` within a Node.js script overrides the `DEBUG=foo` environment variable set when launching the process. It requires Node.js and the `debug` module installed. The output `false` confirms that the 'foo' namespace is no longer enabled after `enable(\"bar\")` is called.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n```\n$ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))'\n=> false\n```\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Exports Field (TypeScript)\nDESCRIPTION: This TypeScript code provides type definitions for the structure of the `exports` field as used by Node.js and resolve-pkg-maps. `Exports` can be a string, an object mapping conditions to paths, or an array of such definitions for fallback. The types capture the recursive and conditional structure of the exports map, forming the schema accepted by resolution functions. This is a supporting definition to inform type-checking for API consumers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-pkg-maps/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Exports = PathOrMap | readonly PathOrMap[]\n\ntype PathOrMap = string | PathConditionsMap\n\ntype PathConditionsMap = {\n    [condition: string]: PathConditions | null\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js App with DEBUG in Windows PowerShell\nDESCRIPTION: Example of setting the DEBUG environment variable to enable the 'app' namespace and then immediately running a Node.js application ('app.js') within the same Windows PowerShell command line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/https-proxy-agent/node_modules/debug/README.md#_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG='app';node app.js\n```\n\n----------------------------------------\n\nTITLE: Requiring ES2015 Versions of Emoji Regexes\nDESCRIPTION: This JavaScript code demonstrates how to require ES2015-style versions of the emoji regular expressions in environments supporting ES2015 Unicode escapes. It shows requiring both the standard emoji regex (`index.js`) and the text representation regex (`text.js`) from the `es2015` subdirectory of the package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emoji-regex/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst emojiRegex = require('emoji-regex/es2015/index.js');\nconst emojiRegexText = require('emoji-regex/es2015/text.js');\n```\n\n----------------------------------------\n\nTITLE: Importing the 'inherits' Function in JavaScript\nDESCRIPTION: This snippet demonstrates the standard way to import the 'inherits' function from the package using Node.js's `require` syntax. Once imported, the function can be used identically to the standard `util.inherits` from Node.js for setting up prototype inheritance between constructors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/inherits/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar inherits = require('inherits');\n// then use exactly as the standard one\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fill-range in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the `fill-range` function. It shows how to require the module and generate an array of strings representing a numerical range. It also shows using the `toRegex` option to create a regex-compatible range string. Requires the `fill-range` package installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst fill = require('fill-range');\n// fill(from, to[, step, options]);\n\nconsole.log(fill('1', '10')); //=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\nconsole.log(fill('1', '10', { toRegex: true })); //=> [1-9]|10\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Debug Namespaces with Debug Library - JavaScript\nDESCRIPTION: Demonstrates using the 'debug' library to dynamically enable and disable namespaces in a Node.js application. Requires installation of the 'debug' package. The code checks the enabled state of a namespace before and after calling 'enable' and 'disable', and outputs boolean results. No special input is required, output is sent to console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nlet debug = require('debug');\n\nconsole.log(1, debug.enabled('test'));\n\ndebug.enable('test');\nconsole.log(2, debug.enabled('test'));\n\ndebug.disable();\nconsole.log(3, debug.enabled('test'));\n```\n\n----------------------------------------\n\nTITLE: Resulting JavaScript Object from Parsing Complex Key Mappings - JavaScript\nDESCRIPTION: This JavaScript snippet shows the output produced by JS-YAML when parsing a YAML document with non-string keys. Arrays and objects are converted into their string representations as keys. This highlights how JS-YAML maps YAML structures to JavaScript plain objects with string keys. No dependencies beyond JS-YAML.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n----------------------------------------\n\nTITLE: Escaping All Characters (JavaScript)\nDESCRIPTION: Demonstrates the `escapeEverything: true` option. This forces all characters in the input string, including printable ASCII characters, to be escaped using hexadecimal (`\\xNN`) or quote escapes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// → '\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\"\\\\x66\\\\x6F\\\\x6F\\\\\\'\\\\x62\\\\x61\\\\x72'\n// → \"\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\'\\\\x62\\\\x61\\\\x72\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Experimental Specifier Resolution in ts-node (Shell)\nDESCRIPTION: Demonstrates how to enable experimental specifier resolution in ts-node via the CLI. This flag aligns TypeScript execution behavior with Node's ESM module resolution. Requires that ESM support is enabled in your configuration. No additional parameters are required; input is a plain shell command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nts-node --experimentalSpecifierResolution node\n```\n\n----------------------------------------\n\nTITLE: Mapping Electron Version to Chromium Version with electronToChromium (Node.js)\nDESCRIPTION: Demonstrates use of the electronToChromium function to return the Chrome version number for a supplied Electron version, supporting both major and full identifiers. Returns a string or undefined if not found. Requires an initialized e2c module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar chromeVersion = e2c.electronToChromium('1.4');\n// chromeVersion is \"53\"\n```\n\n----------------------------------------\n\nTITLE: Explicit Environment Selection - JavaScript\nDESCRIPTION: Specifies the execution environment ('browser' or 'node') for source-map-support. Set via the environment property in the install() options object. Ensures correct behavior in edge cases where both Node.js and browser globals are present.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nrequire('source-map-support').install({\n  environment: 'node'\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Unreachable Error Page - HTML\nDESCRIPTION: This HTML snippet defines the skeleton of the error response page, containing metadata, actionable error messages, styled blocks, embedded ASCII art, and relevant Replit links. There are no external dependencies other than a link to the IBM Plex Sans font from Google Fonts. The main sections include a header, descriptive message, ASCII art, and footers with navigation. Inputs are not required; the output is a fully structured and styled static error page for users viewing an unavailable app.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--div-data-replit-metadata-client-src-components-ui-toaster-tsx-22-14-data-component-name-ToastDes-1743475801375.txt#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <title>Hmm... We couldn\\'t reach this app</title>\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=IBM+Plex+Sans\\\">\\n  <style>\\n    body {\\n      margin: 0;\\n      height: 100vh;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      background: #1c2333;\\n      font-family: \\\"IBM Plex Sans\\\", \\\"sans\\\";\\n      color: #f5f9fc;\\n    }\\n\\n    .title-box {\\n      font-size: 12px;\\n      inline-size: max-content;\\n      max-width: 100%;\\n    }\\n\\n    .description-box {\\n      font-size: 10px;\\n      inline-size: max-content;\\n      max-width: 100%;\\n    }\\n\\n    .err-box {\\n      padding: 1em;\\n      width: 100vw;\\n      max-width: 100vw;\\n      overflow: hidden;\\n    }\\n\\n    .message {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    }\\n\\n    .ascii {\\n      font-size: 6px;\\n      text-align: center;\\n      opacity: .8;\\n    }\\n\\n    .eval-bot {\\n      margin: 4em;\\n    }\\n\\n    @media (max-width: 500px) {\\n      .title-box {\\n        font-size: 10px;\\n      }\\n\\n      .description-box {\\n        font-size: 8px;\\n      }\\n\\n      .eval-bot {\\n        margin: 1em;\\n      }\\n\\n      .eval-bot svg {\\n        width: 200px;\\n      }\\n\\n      .message {\\n        flex-direction: column;\\n        align-items: center;\\n      }\\n\\n      .repl-links {\\n        font-size: 14px;\\n      }\\n    }\\n\\n    .console {\\n      background-color: #0e1628;\\n      color: #fff;\\n      font-family: \\\"IBM Plex Sans\\\", \\\"sans\\\";\\n      padding: 1em;\\n      margin: 1em;\\n    }\\n\\n    .footer-item {\\n      margin: 1em;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n    }\\n\\n    .link-icon {\\n      margin-right: 8px;\\n      margin-top: 4px;\\n    }\\n\\n    a {\\n      color: #c2c8cc;\\n    }\\n  </style>\\n\\n  <script>\\n    var reload_timeout = setTimeout(function () {\\n      window.location.reload();\\n    }, 60000);\\n  </script>\\n</head>\\n\\n<body>\\n  <div class=\\\"err-box\\\">\\n    <div class=\\\"message\\\">\\n      <div class=\\\"eval-bot\\\">\\n        <pre class=\\\"ascii\\\">\\n                                  :::.                                                    \\n                                :+++***++:..                                              \\n                      :-=+=..:-=+**=======---:                                            \\n                     -+++****+====-::-=====-::. ..   ..       ::                          \\n                    .=++++++=::----------::-::::::--------===--:.:::::.                   \\n                   :--==+++=-::----------======----------:-===-:::::::.                   \\n                   ::--==+++-----=+++=+++++====----======--==------::                     \\n                  ::::-====+++++++*************+==========---------::..                   \\n                 ..:::---==++*****************+++++++++=------------:::::..               \\n                ....:::-=+**********************++++++=--==========--:.....               \\n                 ..:::-++*********+**************+++++++--+***++++==:      .::..          \\n                :=+*+=+++****++==+++*+++++++***+++++++++***********+=. .::-====-::--:     \\n             .:-=++=====+++*++====++++++++++++++++++=+++*************+=======++++==--.    \\n           .--==-----=====++=============+=+++=====++++****************+=+=========--:.   \\n     . .  :--====------=======--==========+++=====++++****+*****+****++===------====-.    \\n  ...::::::::---====----------::::::-----========++++++++++***++++++++===--:::::-----.    \\n   ...::::::..:::::---::::::::::...::::::::-----=++++++++++****+++++++===-:::::::::---:   \\n      .::::.....:::::::::::................:::::=++++++++++*****++++++=====---:::::---::. \\n         ......   .........     ...............::=+==++++++++++++++============-----::...: \\n                                    ........::---===-===============------=---:::::::::...\\n                                    .......................::::::::---------:.   ..       \\n                                            ....................::::::--:::::.            \\n                                                             ...........                  \\n                                                                                          \\n          </pre>\\n      </div>\\n      <div class=\\\"title-box\\\">\\n        <h1>Hmm... We couldn\\'t reach this app</h1>\\n      </div>\\n      <div class=\\\"description-box\\\">\\n        <h2>Make sure this app has a port open and is ready to receive HTTP traffic.</h2>\\n      </div>\\n    </div>\\n    \\n    <div>\\n      <div class=\\\"footer-item\\\">\\n        <div class=\\\"link-icon\\\">\\n          <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n            <path\\n              d=\\\"M6.66668 8.66666C6.95298 9.04942 7.31825 9.36612 7.73771 9.59529C8.15717 9.82446 8.62102 9.96074 9.09778 9.99489C9.57454 10.029 10.0531 9.96024 10.5009 9.79319C10.9487 9.62613 11.3554 9.36471 11.6933 9.02666L13.6933 7.02666C14.3005 6.39799 14.6365 5.55598 14.6289 4.68199C14.6213 3.808 14.2708 2.97196 13.6527 2.35394C13.0347 1.73591 12.1987 1.38535 11.3247 1.37775C10.4507 1.37016 9.60869 1.70614 8.98001 2.31333L7.83334 3.45333M9.33334 7.33333C9.04704 6.95058 8.68177 6.63388 8.26231 6.4047C7.84285 6.17553 7.37901 6.03925 6.90224 6.00511C6.42548 5.97096 5.94695 6.03975 5.49911 6.20681C5.05128 6.37387 4.6446 6.63528 4.30668 6.97333L2.30668 8.97333C1.69948 9.602 1.3635 10.444 1.3711 11.318C1.37869 12.192 1.72926 13.028 2.34728 13.6461C2.96531 14.2641 3.80135 14.6147 4.67534 14.6222C5.54933 14.6298 6.39134 14.2939 7.02001 13.6867L8.16001 12.5467\\\"\\n              stroke=\\\"#C2C8CC\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" />\\n          </svg>\\n        </div>\\n        <div class=\\\"repl-links\\\">\\n          <a href=\\\"https://replit.com\\\">Go to Replit</a>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"footer-item\\\">\\n        <div class=\\\"link-icon\\\">\\n          <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n            <path\\n              d=\\\"M6.66668 8.66666C6.95298 9.04942 7.31825 9.36612 7.73771 9.59529C8.15717 9.82446 8.62102 9.96074 9.09778 9.99489C9.57454 10.029 10.0531 9.96024 10.5009 9.79319C10.9487 9.62613 11.3554 9.36471 11.6933 9.02666L13.6933 7.02666C14.3005 6.39799 14.6365 5.55598 14.6289 4.68199C14.6213 3.808 14.2708 2.97196 13.6527 2.35394C13.0347 1.73591 12.1987 1.38535 11.3247 1.37775C10.4507 1.37016 9.60869 1.70614 8.98001 2.31333L7.83334 3.45333M9.33334 7.33333C9.04704 6.95058 8.68177 6.63388 8.26231 6.4047C7.84285 6.17553 7.37901 6.03925 6.90224 6.00511C6.42548 5.97096 5.94695 6.03975 5.49911 6.20681C5.05128 6.37387 4.6446 6.63528 4.30668 6.97333L2.30668 8.97333C1.69948 9.602 1.3635 10.444 1.3711 11.318C1.37869 12.192 1.72926 13.028 2.34728 13.6461C2.96531 14.2641 3.80135 14.6147 4.67534 14.6222C5.54933 14.6298 6.39134 14.2939 7.02001 13.6867L8.16001 12.5467\\\"\\n              stroke=\\\"#C2C8CC\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" />\\n          </svg>\\n        </div>\\n        <div class=\\\"repl-links\\\">\\n          <a href=\\\"https://replit.com/site/hosting\\\">Learn more about hosting on Replit</a>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</body>\\n\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Incrementing to Prerelease with Identifier (JavaScript)\nDESCRIPTION: Shows how to use the `semver.inc` function in JavaScript to increment a version ('1.2.3') to the next prerelease version ('1.2.4-beta.0'), specifying 'prerelease' as the level and 'beta' as the identifier. The output shows the resulting version string. Requires the `semver` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta')\n// '1.2.4-beta.0'\n```\n\n----------------------------------------\n\nTITLE: Adding Chunks to a SourceNode in JavaScript\nDESCRIPTION: Shows how to use the `SourceNode.prototype.add` method to append generated code snippets to an existing SourceNode. The chunk can be a string, another SourceNode instance, or an array containing strings and/or SourceNodes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nnode.add(\" + \");\nnode.add(otherNode);\nnode.add([leftHandOperandNode, \" + \", rightHandOperandNode]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode Globally in Emittery - JavaScript\nDESCRIPTION: Illustrates how to enable Emittery debug mode for all instances and how to configure each emitter instance with a unique name. Dependencies include the emittery package and the Node.js environment for running the script. Key parameters: `isDebugEnabled` sets global debug logging, and each emitter can be associated with a unique debug name for easier traceability of event activity. Output includes formatted debug information on each emission.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nEmittery.isDebugEnabled = true;\n\nconst emitter1 = new Emittery({debug: {name: 'myEmitter1'}});\nconst emitter2 = new Emittery({debug: {name: 'myEmitter2'}});\n\nemitter1.on('test', data => {\n\t// …\n});\n\nemitter2.on('otherTest', data => {\n\t// …\n});\n\nemitter1.emit('test');\n//=> [16:43:20.417][emittery:subscribe][myEmitter1] Event Name: test\n//\tdata: undefined\n\nemitter2.emit('otherTest');\n//=> [16:43:20.417][emittery:subscribe][myEmitter2] Event Name: otherTest\n//\tdata: undefined\n```\n\n----------------------------------------\n\nTITLE: Running Node with ts-node/esm Loader (Shell)\nDESCRIPTION: Demonstrates execution of a TypeScript file via Node.js, manually specifying the ts-node ESM loader via the --loader flag or the NODE_OPTIONS environment variable. This is necessary when not using the ts-node CLI for module loading in ESM mode.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnode --loader ts-node/esm ./index.ts\n# Or via environment variable\nNODE_OPTIONS=\"--loader ts-node/esm\" node ./index.ts\n```\n\n----------------------------------------\n\nTITLE: Customizing Brace Expansion with `expandRange` in Micromatch (JavaScript)\nDESCRIPTION: Shows how to provide a custom function to the `expandRange` option in `micromatch.makeRe` to handle specific range expansion logic, like generating a regex for numeric ranges with leading zeros (e.g., `{01..25}`). This example uses the `fill-range` library for the expansion logic. The generated regex is then tested against various strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst fill = require('fill-range');\nconst regex = micromatch.makeRe('foo/{01..25}/bar', {\n  expandRange(a, b) {\n    return `(${fill(a, b, { toRegex: true })})`;\n  }\n});\n\nconsole.log(regex)\n//=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/\n\nconsole.log(regex.test('foo/00/bar')) // false\nconsole.log(regex.test('foo/01/bar')) // true\nconsole.log(regex.test('foo/10/bar')) // true\nconsole.log(regex.test('foo/22/bar')) // true\nconsole.log(regex.test('foo/25/bar')) // true\nconsole.log(regex.test('foo/26/bar')) // false\n```\n\n----------------------------------------\n\nTITLE: Using the 'step' Option in fill-range (JavaScript)\nDESCRIPTION: Provides examples demonstrating how the `step` option (passed as the third argument to `fill`) controls the increment used when generating ranges for both numbers and letters. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// numbers\nconsole.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ]\nconsole.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ]\nconsole.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ]\n\n// letters\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ]\nconsole.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ]\n```\n\n----------------------------------------\n\nTITLE: Parsing Postgres Date Strings with postgres-date in JavaScript\nDESCRIPTION: Shows how to require the postgres-date package and use its parse function to transform a Postgres-formatted date string into a native JavaScript Date object. Requires the postgres-date package to be installed in the project. The function accepts a string that represents a date returned by Postgres and returns a Date object corresponding to the parsed value.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-date/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar parse = require('postgres-date')\nparse('2011-01-23 22:15:51Z')\n// => 2011-01-23T22:15:51.000Z\n```\n\n----------------------------------------\n\nTITLE: Escaping Braces and Commas in Patterns using braces - JavaScript\nDESCRIPTION: Covers the escaping mechanism in 'braces', illustrating how to prevent expansion of brace or comma characters by prefixing with backslashes. Includes examples for both brace prevention and comma literals. This is especially important for using literal braces or commas in input glob patterns.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces.expand('a\\\\{d,c,b}e'));\n//=> ['a{d,c,b}e']\n\nconsole.log(braces.expand('a{d,c,b\\\\}e'));\n//=> ['a{d,c,b}e']\n```\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces.expand('a{b\\\\,c}d'));\n//=> ['a{b,c}d']\n\nconsole.log(braces.expand('a{d\\\\,c,b}e'));\n//=> ['ad,ce', 'abe']\n```\n\n----------------------------------------\n\nTITLE: Importing diff-sequences Module in JavaScript\nDESCRIPTION: Demonstrates how to import the `diff-sequences` package using both CommonJS (`require`) and ECMAScript modules (`import`). This makes the `diff` function available for use.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar diff = require('diff-sequences').default; // CommonJS modules\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport diff from 'diff-sequences'; // ECMAScript modules\n```\n\n----------------------------------------\n\nTITLE: Disabling Locale-Specific Conversion with camelcase (JavaScript)\nDESCRIPTION: Shows how setting the `locale` option to `false` forces the `camelcase` function to use the Unicode Default Case Conversion algorithm, ignoring the host environment's locale (demonstrated here with 'tr-TR'). This ensures consistent behavior regardless of the system's language settings. Requires the `camelcase` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/node_modules/camelcase/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst camelCase = require('camelcase');\n\n// On a platform with 'tr-TR'\n\ncamelCase('lorem-ipsum');\n//=> 'loremİpsum'\n\ncamelCase('lorem-ipsum', {locale: false});\n//=> 'loremIpsum'\n```\n\n----------------------------------------\n\nTITLE: Controlling Special Character Escaping with dedent - JavaScript\nDESCRIPTION: Explains usage of the escapeSpecialCharacters option in dedent, clarifying differences between string tags and function calls. Requires dedent and highlights how the option affects handling of dollar signs and similar characters. Code includes cases for defaults, as well as manual true/false overrides, and the expected interpretation of the resulting string. This allows strict control over output suitable for various templating and parsing scenarios.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dedent/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport dedent from \"dedent\";\n\n// \"$hello!\"\ndedent`\n  $hello!\n`;\n\n// \"\\$hello!\"\ndedent.withOptions({ escapeSpecialCharacters: false })`\n  $hello!\n`;\n\n// \"$hello!\"\ndedent.withOptions({ escapeSpecialCharacters: true })`\n  $hello!\n`;\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Types with NPM in Shell\nDESCRIPTION: This shell command installs the @babel/types library as a development dependency using the npm package manager. It is essential for projects that use Babel's AST node utilities. The command must be run in a terminal from the project root, and npm must be installed. It creates or updates your package.json and package-lock.json with the new dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/types/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/types\n```\n\n----------------------------------------\n\nTITLE: Incrementing Prerelease with One-Based Identifier (JavaScript)\nDESCRIPTION: Demonstrates using the `semver.inc` function with an optional fourth parameter ('1') to specify a one-based index for the prerelease identifier, resulting in '1.2.4-beta.1'. Requires the `semver` library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta', '1')\n// '1.2.4-beta.1'\n```\n\n----------------------------------------\n\nTITLE: Synchronously Parsing Source Map File Comments in Node.js Using convert-source-map\nDESCRIPTION: Demonstrates synchronous extraction of an external source map referenced in a comment using 'convert-source-map' and Node.js 'fs' module. The 'readMap' function receives a filename and reads it using 'fs.readFileSync'. Requires 'convert-source-map' and Node.js 'fs'. Inputs include the comment string with a map reference; output is the parsed source map in JSON format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/convert-source-map/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar convert = require('convert-source-map');\nvar fs = require('fs');\n\nfunction readMap(filename) {\n  return fs.readFileSync(filename, 'utf8');\n}\n\nvar json = convert\n  .fromMapFileComment('//# sourceMappingURL=map-file-comment.css.map', readMap)\n  .toJSON();\nconsole.log(json);\n```\n\n----------------------------------------\n\nTITLE: Detecting Object Types with type-detect (JavaScript)\nDESCRIPTION: Illustrates detecting various object types using `type-detect`. It shows that plain object literals (`{}`), objects created with `new Object()`, and instances of custom constructors (like `new Noop()`) are identified as 'Object'. It also confirms that the constructor function itself is not 'Object'. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar Noop = function () {};\nassert(type({}) === 'Object');\nassert(type(Noop) !== 'Object');\nassert(type(new Noop) === 'Object');\nassert(type(new Object) === 'Object');\n```\n\n----------------------------------------\n\nTITLE: Importing 'encodeurl' Module in JavaScript\nDESCRIPTION: This snippet shows how to import the 'encodeurl' module in a Node.js application using the `require` function. The imported function can then be used to encode URLs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/encodeurl/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar encodeUrl = require('encodeurl')\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-jest-hoist via babel.config.js (JavaScript)\nDESCRIPTION: This snippet shows the recommended method for enabling the `babel-plugin-jest-hoist` plugin. By adding 'jest-hoist' to the `plugins` array within a `babel.config.js` file, Babel will automatically apply this plugin during the transpilation process.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-jest-hoist/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: ['jest-hoist'],\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Debug Logging per Instance in Emittery - JavaScript\nDESCRIPTION: Exhibits enabling instance-specific debug logging for two Emittery instances, with one instance having debugging toggled on explicitly. The debug: {enabled: true} property allows selective debug output regardless of global settings. Relies on the emittery package and explicitly set options. Output consists of debug logs for enabled instances upon event emission.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter1 = new Emittery({debug: {name: 'emitter1', enabled: true}});\nconst emitter2 = new Emittery({debug: {name: 'emitter2'}});\n\nemitter1.on('test', data => {\n\t// …\n});\n\nemitter2.on('test', data => {\n\t// …\n});\n\nemitter1.emit('test');\n//=> [16:43:20.417][emittery:subscribe][emitter1] Event Name: test\n//\tdata: undefined\n\nemitter2.emit('test');\n```\n\n----------------------------------------\n\nTITLE: Installing @types/istanbul-lib-coverage Type Definitions (npm, Bash)\nDESCRIPTION: This snippet demonstrates the npm command to install type definitions for istanbul-lib-coverage, allowing TypeScript projects to leverage static typing, autocompletion, and error-checking for the corresponding JavaScript library. No additional dependencies are needed; simply run this command in your project root. The output is an updated package.json and a local installation of the type definitions in node_modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/istanbul-lib-coverage/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/istanbul-lib-coverage\n```\n\n----------------------------------------\n\nTITLE: Installing @tsconfig/node12 package (Shell)\nDESCRIPTION: Demonstrates how to install the `@tsconfig/node12` package as a development dependency using either npm or yarn. This package provides a base TypeScript configuration suitable for Node.js 12.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node12/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @tsconfig/node12\nyarn add --dev @tsconfig/node12\n```\n\n----------------------------------------\n\nTITLE: Visiting Loaded Modules using require-directory (JavaScript)\nDESCRIPTION: Demonstrates the `visit` option, which accepts a function that is called for each module successfully required by `require-directory`. This allows executing code for each module, such as logging or performing setup tasks. The loaded module object is passed as an argument to the visitor function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar requireDirectory = require('require-directory'),\n  visitor = function(obj) {\n    console.log(obj); // will be called for every module that is loaded\n  },\n  hash = requireDirectory(module, {visit: visitor});\n```\n\n----------------------------------------\n\nTITLE: Detecting Babel Transpiled Star Re-exports in JavaScript\nDESCRIPTION: Shows the typical JavaScript code generated by Babel for an `export * from 'external'` statement. The lexer is specifically designed to recognize this pattern, including the `require` call, the use of `Object.keys`, and the subsequent loop assigning properties to the `exports` object, thereby identifying it as a star re-export.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _external = require(\"external\");\n\nObject.keys(_external).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  exports[key] = _external[key];\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Multiple Re-exports via Spread Syntax in JavaScript\nDESCRIPTION: Illustrates the detection of multiple re-exports when using the spread syntax (`...require('mod')`) within an object assigned to `module.exports`. Each spread `require()` call ('a' and 'b' in this case) is treated as a distinct reexport.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// DETECTS REEXPORTS: a, b\nmodule.exports = require('ignored');\nmodule.exports = {\n  ...require('a'),\n  ...require('b')\n};\n```\n\n----------------------------------------\n\nTITLE: Using Steps/Increments with fill-range (JavaScript)\nDESCRIPTION: Examples showcasing the use of the optional `step` argument (the third argument) in `fill-range` to create ranges with specific increments. This works for both numerical and alphabetical ranges. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// numerical ranges with increments\nconsole.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ]\nconsole.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ]\nconsole.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ]\n\n// alphabetical ranges with increments\nconsole.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ]\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ]\n```\n\n----------------------------------------\n\nTITLE: Importing the methods module (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to import the 'methods' module using the 'require' function in a Node.js environment. The 'methods' variable will hold an array of lower-cased HTTP method names supported by Node.js or a fallback list for older versions/browser environments. It requires the 'methods' package to be previously installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/methods/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar methods = require('methods')\n```\n\n----------------------------------------\n\nTITLE: Invoking Animation Engine Function in TypeScript/React\nDESCRIPTION: Shows how to import the `playAnimation` function from a custom animation engine library (`@/lib/animation-engine`) and trigger an animation. The example uses an `onClick` handler on a button to call `playAnimation({ type: 'fireworks' })`, demonstrating how to initiate specific animations like fireworks, confetti, or star bursts based on user interaction or events.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742707693562.txt#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { playAnimation } from '@/lib/animation-engine';\n\n// e.g. on button click\n<button onClick={() => playAnimation({ type: 'fireworks' })}> \n  Celebrate!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Disabling ETag Generation in Express.js\nDESCRIPTION: This snippet demonstrates how to completely disable ETag generation in an Express application by setting the 'etag' property to `false` using `app.set('etag', false)`. Mentioned in version 4.4.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('etag', false)\n```\n\n----------------------------------------\n\nTITLE: Applying Fix for Light Theme Selection Box in TSX\nDESCRIPTION: Shows the corrected React component code for the light theme selection box in `settings.tsx`. The `dark:bg-white` class is removed to ensure the box retains its intended white background even when the application is in dark mode, resolving the UI bug.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  className={`border ${\n    appearance.theme === \"light\"\n      ? 'border-primary ring-2 ring-primary/30'\n      : 'border-slate-200 dark:border-[var(--dark-border)]'\n  } rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white`}\n  onClick={() => setAppearance(prev => ({ ...prev, theme: \"light\" }))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Detecting Function Types with type-detect (JavaScript)\nDESCRIPTION: Demonstrates detecting function declarations using `type-detect`. It uses `assert` to check that `type()` returns 'function' for a function expression. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type(function () {}) === 'function');\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Mappings using SourceMapConsumer in JavaScript\nDESCRIPTION: Shows how to use the `eachMapping` method of `SourceMapConsumer` to iterate over all mappings within the source map. It requires a `callback` function that receives a mapping object (`{ source, generatedLine, generatedColumn, originalLine, originalColumn, name }`). Optional `context` and `order` (`SourceMapConsumer.GENERATED_ORDER` or `SourceMapConsumer.ORIGINAL_ORDER`) arguments can be provided.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconsumer.eachMapping(function (m) { console.log(m); })\n// ...\n// { source: 'illmatic.js',\n//   generatedLine: 1,\n//   generatedColumn: 0,\n//   originalLine: 1,\n//   originalColumn: 0,\n//   name: null }\n// { source: 'illmatic.js',\n//   generatedLine: 2,\n//   generatedColumn: 0,\n//   originalLine: 2,\n//   originalColumn: 0,\n//   name: null }\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Version Range Parsers Using Backus-Naur Form (BNF) - BNF - Documentation\nDESCRIPTION: This code snippet provides the formal Backus-Naur Form (BNF) grammar for parsing semantic version range strings. It defines the structure for components like range sets, hyphens, primitives, tildes, carets, partial and full version numbers, qualifiers, and logical disjunctions. Implementers can use this grammar as the backbone for version range parsers, ensuring compliance with the described semantic version rules and constraints. No external dependencies are required; the grammar must be interpreted within a parser generator or implemented in a programming language capable of digesting BNF-style definitions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_12\n\nLANGUAGE: bnf\nCODE:\n```\nrange-set  ::= range ( logical-or range ) *\nlogical-or ::= ( ' ' ) * '||' ( ' ' ) *\nrange      ::= hyphen | simple ( ' ' simple ) * | ''\nhyphen     ::= partial ' - ' partial\nsimple     ::= primitive | partial | tilde | caret\nprimitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial\npartial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?\nxr         ::= 'x' | 'X' | '*' | nr\nnr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *\ntilde      ::= '~' partial\ncaret      ::= '^' partial\nqualifier  ::= ( '-' pre )? ( '+' build )?\npre        ::= parts\nbuild      ::= parts\nparts      ::= part ( '.' part ) *\npart       ::= nr | [-0-9A-Za-z]+\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Jest Tests with jest-each.test.skip - JavaScript\nDESCRIPTION: Demonstrates how to skip specified parameterized tests using .test.skip. The listed tests and their suite are excluded from test execution, useful for temporarily disabling failing or incomplete cases without deleting code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-each/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\neach([\\n  [1, 1, 2],\\n  [1, 2, 3],\\n  [2, 1, 3],\\n]).test.skip('returns the result of adding %d to %d', (a, b, expected) => {\\n  expect(a + b).toBe(expected);\\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Debug Logger with Emittery - JavaScript\nDESCRIPTION: Demonstrates assigning a custom logger function to an Emittery instance for handling debug data. The provided function changes the debug output format to show only the event type and event name. Dependencies: emittery package, JavaScript runtime. Parameters: logger (custom logging function), name (string), enabled (true). Output is logger-formatted debug messages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst myLogger = (type, debugName, eventName, eventData) => console.log(`[${type}]: ${eventName}`);\n\nconst emitter = new Emittery({\n\tdebug: {\n\t\tname: 'myEmitter',\n\t\tenabled: true,\n\t\tlogger: myLogger\n\t}\n});\n\nemitter.on('test', data => {\n\t// …\n});\n\nemitter.emit('test');\n//=> [subscribe]: test\n```\n\n----------------------------------------\n\nTITLE: Applying the function-bind Polyfill in JavaScript\nDESCRIPTION: This code snippet shows how to polyfill the native `Function.prototype.bind` method by assigning the `function-bind` package export to it. This makes the `bind` method available in older JavaScript environments (like IE < 9, Node < 0.6) that do not natively support it. It requires the 'function-bind' package to be previously installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/function-bind/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nFunction.prototype.bind = require(\"function-bind\")\n```\n\n----------------------------------------\n\nTITLE: Fixing AST for JSX Empty Expression - Babylon - JavaScript\nDESCRIPTION: This snippet demonstrates a JSX element in which the embedded expression is a comment, not an actual JavaScript value. Previously, Babylon would produce an invalid AST; this fix ensures that JSXEmptyExpression nodes are correctly located. Dependencies: Babylon parser with JSX support. Input is a JSX element with an interior comment; output is correct parsing of the empty expression region.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div>{/* foo */}</div>\n```\n\n----------------------------------------\n\nTITLE: Manually Serializing FormData for Request Constructor - JavaScript\nDESCRIPTION: This snippet demonstrates constructing a new Request instance in the browser with the FormData polyfill. It checks for the polyfill's _blob method on the FormData object and uses it to properly serialize the body when necessary for Request or Response construction. Parameters include the url, HTTP method, and a FormData instance; the output is a properly initialized Request object suitable for fetch.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/formdata-polyfill/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew Request(url, {\n  method: 'post',\n  body: fd._blob ? fd._blob() : fd\n})\n```\n\n----------------------------------------\n\nTITLE: Non-Compact (Pretty-Printed) Output for Objects (JavaScript)\nDESCRIPTION: Shows the effect of setting `compact: false`. The output for objects is formatted with newlines and indentation (using the default tab character) for improved readability.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\njsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {\n  'compact': false\n});\n// → '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n```\n\n----------------------------------------\n\nTITLE: Available Style Options for `safeDump`\nDESCRIPTION: Lists the available formatting styles that can be specified in the `styles` option of `js-yaml.safeDump` for various YAML tags like `!!null`, `!!int`, `!!bool`, and `!!float`. It shows the keyword for each style and the resulting YAML output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n!!null\n  \"canonical\"   -> \"~\"\n  \"lowercase\"   => \"null\"\n  \"uppercase\"   -> \"NULL\"\n  \"camelcase\"   -> \"Null\"\n\n!!int\n  \"binary\"      -> \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       -> \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!bool\n  \"lowercase\"   => \"true\", \"false\"\n  \"uppercase\"   -> \"TRUE\", \"FALSE\"\n  \"camelcase\"   -> \"True\", \"False\"\n\n!!float\n  \"lowercase\"   => \".nan\", '.inf'\n  \"uppercase\"   -> \".NAN\", '.INF'\n  \"camelcase\"   -> \".NaN\", '.Inf'\n```\n\n----------------------------------------\n\nTITLE: Accessing Electron to Chromium Full Version Mapping in Node.js\nDESCRIPTION: Shows how to use the fullVersions property to get a mapping from a specific Electron version (including patch) to the full Chromium version string. Suitable for scenarios needing exact browser feature matching. Requires an initialized e2c module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar versions = e2c.fullVersions;\nconsole.log(versions['1.4.11']);\n// returns \"53.0.2785.143\"\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions for istanbul-lib-report using npm - Shell\nDESCRIPTION: This snippet demonstrates the command to install the TypeScript type definitions for istanbul-lib-report via npm. It requires npm to be installed and assumes the context of a TypeScript project. Running the command will fetch and add the types as a development dependency, enabling enriched editor tooling and type checking when using istanbul-lib-report. No input or output is expected; the command modifies the project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/istanbul-lib-report/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/istanbul-lib-report\n```\n\n----------------------------------------\n\nTITLE: Formatting a Media Type Object with typer.format - Node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates formatting a media type object into a string using 'typer.format'. It expects an object with 'type', 'subtype', and optional 'suffix' properties and returns the corresponding media type string. All string values in the object should be lowercase; missing or invalid properties may lead to formatting errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/media-typer/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = typer.format({type: 'image', subtype: 'svg', suffix: 'xml'})\n```\n\n----------------------------------------\n\nTITLE: Extending Objects Using xtend in JavaScript\nDESCRIPTION: This snippet demonstrates importing the 'xtend' library and using it to combine two objects by merging their properties. The resulting 'combination' object has all source properties, with latter properties taking precedence if names clash. Requires the 'xtend' library to be installed (typically via npm). The main parameters are the source objects, and the output is a new object with merged properties. Original objects remain unchanged. Limitations: Only merges enumerable own properties; prototype chains are not considered.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/xtend/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar extend = require(\"xtend\")\n\n// extend returns a new object. Does not mutate arguments\nvar combination = extend({\n    a: \"a\",\n    b: \"c\"\n}, {\n    b: \"b\"\n})\n// { a: \"a\", b: \"b\" }\n```\n\n----------------------------------------\n\nTITLE: Installing @types/send via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `@types/send` package. The `--save` flag adds it to the project's dependencies (typically, type definitions are saved to `devDependencies` using `--save-dev`), making TypeScript type definitions for the `send` library available during development. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/send/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/send\n```\n\n----------------------------------------\n\nTITLE: Prepending Chunks to a SourceNode in JavaScript\nDESCRIPTION: Demonstrates the `SourceNode.prototype.prepend` method for adding generated code snippets to the beginning of a SourceNode. Similar to `add`, the chunk can be a string, another SourceNode, or an array.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nnode.prepend(\"/** Build Id: f783haef86324gf **/\\n\\n\");\n```\n\n----------------------------------------\n\nTITLE: Walking SourceNode Snippets in JavaScript\nDESCRIPTION: Shows the `walk` prototype method for traversing the tree of code snippets within a `SourceNode`. A callback function is executed for each snippet, receiving the code string and its associated location object (source file, line, column, name).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.js\", [\n  new SourceNode(3, 4, \"b.js\", \"uno\"),\n  \"dos\",\n  [\n    \"tres\",\n    new SourceNode(5, 6, \"c.js\", \"quatro\")\n  ]\n]);\n\nnode.walk(function (code, loc) { console.log(\"WALK:\", code, loc); })\n// WALK: uno { source: 'b.js', line: 3, column: 4, name: null }\n// WALK: dos { source: 'a.js', line: 1, column: 2, name: null }\n// WALK: tres { source: 'a.js', line: 1, column: 2, name: null }\n// WALK: quatro { source: 'c.js', line: 5, column: 6, name: null }\n```\n\n----------------------------------------\n\nTITLE: Disabling Inline Source Map Usage in babel-plugin-istanbul Configuration - JSON\nDESCRIPTION: This snippet shows how to disable the default inline source map detection in babel-plugin-istanbul by setting 'useInlineSourceMaps' to false within the plugin's options in .babelrc. This reduces memory usage during instrumentation but may restrict proper remapping of coverage reports to original sources for complex build processes. The configuration is specified under the test environment plugins section.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-istanbul/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\n        [\"istanbul\", {\n          \"useInlineSourceMaps\": false\n        }]\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nyc for Mocha to Prevent Instrumentation Conflicts - JavaScript\nDESCRIPTION: This package.json configuration disables nyc's internal sourceMap processing and instrumentation by setting 'sourceMap' to false and 'instrument' to false. This is necessary when using babel-plugin-istanbul to handle instrumentation, ensuring nyc only handles reporting. Add this block to package.json under the nyc key; used when running Mocha tests with nyc and Babel.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-istanbul/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n  \"nyc\": {\n    \"sourceMap\": false,\n    \"instrument\": false\n  },\n```\n\n----------------------------------------\n\nTITLE: Creating SourceMapGenerator from SourceMapConsumer in JavaScript\nDESCRIPTION: Illustrates the static `fromSourceMap` method of `SourceMapGenerator`. This method creates and returns a new `SourceMapGenerator` instance initialized with the mappings and data from an existing `SourceMapConsumer` instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar generator = sourceMap.SourceMapGenerator.fromSourceMap(consumer);\n```\n\n----------------------------------------\n\nTITLE: Manual Equivalent of require-directory Output (JavaScript)\nDESCRIPTION: Illustrates the JavaScript object structure that `require-directory` generates automatically for a given directory layout. This example shows how modules from the root (`home.js`) and a subdirectory (`auth/`) are organized into a nested object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar routes = {\n  home: require('routes/home.js'),\n  auth: {\n    login: require('routes/auth/login.js'),\n    logout: require('routes/auth/logout.js'),\n    register: require('routes/auth/register.js')\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring resolve.exports APIs in TypeScript\nDESCRIPTION: This TypeScript code block defines the export signatures for the core functions in the resolve.exports library. It includes typings for the resolve, exports, and imports functions, listing required parameters, optional arguments, and return values. Dependencies include TypeScript and the definitions of Package and Options types; correct use ensures proper argument passing and return type handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve.exports/readme.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function resolve(pkg: Package, entry?: string, options?: Options): string[] | undefined;\nexport function exports(pkg: Package, entry?: string, options?: Options): string[] | undefined;\nexport function imports(pkg: Package, target: string, options?: Options): string[] | undefined;\n//                                         ^ not optional!\n```\n\n----------------------------------------\n\nTITLE: Using Custom Subscribable Meta Events in Emittery - JavaScript\nDESCRIPTION: Demonstrates listening for 'meta' subscription events like listener addition, using the special Emittery.listenerAdded symbol. Useful for advanced scenarios where you need to monitor listener activity. Dependencies: emittery package. Output includes logs for the listener and event names when a new listener is added.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst Emittery = require('emittery');\n\nconst emitter = new Emittery();\n\nemitter.on(Emittery.listenerAdded, ({listener, eventName}) => {\n\tconsole.log(listener);\n\t//=> data => {}\n\n\tconsole.log(eventName);\n\t//=> '🦄'\n});\n\nemitter.on('🦄', data => {\n\t// Handle data\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Errors Manually with Async Iterators (Node.js 12) - JavaScript\nDESCRIPTION: This code illustrates robust handling of stream errors when using async iterators with node-fetch response bodies in Node.js 12. It registers error listeners and returns a promise that resolves/rejects based on the stream’s closure and error state. It is necessary in Node.js 12 where stream async iterator error handling is less mature than Node.js 14+, ensuring all edge cases are addressed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nconst read = async body => {\\n\\tlet error;\\n\\tbody.on('error', err => {\\n\\t\\terror = err;\\n\\t});\\n\\n\\tfor await (const chunk of body) {\\n\\t\\tconsole.dir(JSON.parse(chunk.toString()));\\n\\t}\\n\\n\\treturn new Promise((resolve, reject) => {\\n\\t\\tbody.on('close', () => {\\n\\t\\t\\terror ? reject(error) : resolve();\\n\\t\\t});\\n\\t});\\n};\\n\\ntry {\\n\\tconst response = await fetch('https://httpbin.org/stream/3');\\n\\tawait read(response.body);\\n} catch (err) {\\n\\tconsole.error(err.stack);\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Plugin `test` Method Implementation (JavaScript)\nDESCRIPTION: Provides an example implementation of the mandatory `test` method for a `pretty-format` plugin. This specific example shows how the built-in `ReactElement` plugin tests if a value is a React element by checking for a specific Symbol (`Symbol.for('react.element')`) on the value's `$$typeof` property, ensuring the value is not null or undefined first.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\n----------------------------------------\n\nTITLE: Using res.json(status, obj) instead of Deprecated res.json(obj, status) in Express.js\nDESCRIPTION: Illustrates the deprecation of the `res.json(obj, status)` signature for sending JSON responses with a specific status code in Express.js. The preferred signature is `res.json(status, obj)`. This change standardizes the order of arguments.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// deprecated\nres.json(obj, status)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// use instead\nres.json(status, obj)\n```\n\n----------------------------------------\n\nTITLE: Installing Emittery via npm - JavaScript\nDESCRIPTION: Demonstrates the package installation command for Emittery using npm in a Node.js or browser project. The user must have Node.js and npm set up as dependencies before running this command. This step is a prerequisite before using Emittery in any code, and it does not take inputs or produce outputs beyond installing the package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emittery/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install emittery\n```\n\n----------------------------------------\n\nTITLE: Walking SourceNode Source Contents in JavaScript\nDESCRIPTION: Demonstrates the `walkSourceContents` prototype method. This method iterates over the distinct source files referenced within the `SourceNode` tree for which source content has been set (using `setSourceContent`). The callback function receives the source filename and its corresponding content.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = new SourceNode(1, 2, \"a.js\", \"generated from a\");\na.setSourceContent(\"a.js\", \"original a\");\nvar b = new SourceNode(1, 2, \"b.js\", \"generated from b\");\nb.setSourceContent(\"b.js\", \"original b\");\nvar c = new SourceNode(1, 2, \"c.js\", \"generated from c\");\nc.setSourceContent(\"c.js\", \"original c\");\n\nvar node = new SourceNode(null, null, null, [a, b, c]);\nnode.walkSourceContents(function (source, contents) { console.log(\"WALK:\", source, \":\", contents); })\n// WALK: a.js : original a\n// WALK: b.js : original b\n// WALK: c.js : original c\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Number Type Coercion Issues\nDESCRIPTION: Illustrates non-intuitive edge cases in JavaScript where type coercion using `+` results in `0` for empty arrays or strings, and `typeof NaN` returns 'number', highlighting the need for a reliable number checking library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(+[]); //=> 0\nconsole.log(+''); //=> 0\nconsole.log(+'   '); //=> 0\nconsole.log(typeof NaN); //=> 'number'\n```\n\n----------------------------------------\n\nTITLE: Installing jest-docblock via Yarn or NPM\nDESCRIPTION: Provides Shell commands for installing the `jest-docblock` package using either the Yarn or NPM package managers. This package is a prerequisite for using its docblock manipulation functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-docblock/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# with yarn\n$ yarn add jest-docblock\n# with npm\n$ npm install jest-docblock\n```\n\n----------------------------------------\n\nTITLE: Installing @jridgewell/resolve-uri via npm\nDESCRIPTION: This shell command installs the `@jridgewell/resolve-uri` package using the Node Package Manager (npm). This is a prerequisite for using the library in a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/resolve-uri/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @jridgewell/resolve-uri\n```\n\n----------------------------------------\n\nTITLE: Using pretty-format with Options (JavaScript)\nDESCRIPTION: Shows how to customize the output of `prettyFormat` by passing an options object as the second argument. This example demonstrates the `printFunctionName` option, toggling it to `false` to omit the function's name (`onClick`) from the formatted output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n----------------------------------------\n\nTITLE: Converting SourceNode to String in JavaScript\nDESCRIPTION: Demonstrates the `toString` prototype method. It traverses the `SourceNode` tree and concatenates all contained code snippets into a single string representation of the generated code, discarding source map information.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-js/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar node = new SourceNode(1, 2, \"a.js\", [\n  new SourceNode(3, 4, \"b.js\", \"uno\"),\n  \"dos\",\n  [\n    \"tres\",\n    new SourceNode(5, 6, \"c.js\", \"quatro\")\n  ]\n]);\n\nnode.toString()\n// 'unodostresquatro'\n```\n\n----------------------------------------\n\nTITLE: Installing strip-bom using npm - Bash\nDESCRIPTION: Installs the 'strip-bom' package from the npm registry, making it available for use in Node.js projects. Requires npm to be installed and an appropriate Node.js environment. After running this command, 'strip-bom' can be imported using require or import statements in JavaScript files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-bom/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install strip-bom\n```\n\n----------------------------------------\n\nTITLE: Importing Built-in Plugins using ES2015 Modules (JavaScript)\nDESCRIPTION: Demonstrates importing the `pretty-format` library and its built-in plugins (`ReactElement`, `ReactTestComponent`) using ES2015 `import` syntax and destructuring. This is the modern approach for using these plugins in projects utilizing ES modules. Requires `react` and `react-test-renderer` dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n----------------------------------------\n\nTITLE: Defining a Pretty-Format Plugin using the `serialize` Interface for Arrays (JavaScript)\nDESCRIPTION: This snippet defines a `pretty-format` plugin to customize the serialization of JavaScript arrays. It includes a helper function `serializeItems` to handle the formatting of array elements based on configuration options like indentation and spacing. The main `plugin` object contains a `test` function to identify arrays and a `serialize` function that uses the helper to produce the formatted string, respecting `maxDepth` and `min` options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing pretty-format using Yarn (Shell)\nDESCRIPTION: Installs the `pretty-format` package using the Yarn package manager. This command adds the package as a dependency to the current project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add pretty-format\n```\n\n----------------------------------------\n\nTITLE: Illustrating Structured Patch Output Structure in JavaScript\nDESCRIPTION: Example JavaScript object representing the data structure returned by the `JsDiff.structuredPatch` method. This structure includes metadata about the files (old/new names and headers) and an array of 'hunks', each detailing a specific change block with starting line numbers, line counts for old/new versions, and the actual changed lines prefixed with '-', '+', or space.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  oldFileName: 'oldfile', newFileName: 'newfile',\n  oldHeader: 'header1', newHeader: 'header2',\n  hunks: [{\n    oldStart: 1, oldLines: 3, newStart: 1, newLines: 3,\n    lines: [' line2', ' line3', '-line4', '+line5', '\\\\ No newline at end of file'],\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example TSConfig for Node 14 - JSONC\nDESCRIPTION: Provides a full tsconfig.json example tailored for Node 14 projects, including compilerOptions for ES2020, CommonJS, strict typing, module resolution, and interoperability. Comments clarify the configuration and options used. This setup ensures compatibility with Node 14 and modern TypeScript features. Requires TypeScript 4.x or later and the @tsconfig/node14 base package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node14/README.md#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n  \"display\": \"Node 14\",\n\n  \"compilerOptions\": {\n    \"lib\": [\"es2020\"],\n    \"module\": \"commonjs\",\n    \"target\": \"es2020\",\n\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"moduleResolution\": \"node\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Parsing Source Map File Comments in Node.js Using convert-source-map\nDESCRIPTION: Implements asynchronous loading of an external source map via 'convert-source-map' and Node.js 'fs.promises'. The 'readMap' function asynchronously reads the file, and the operation uses async/await. Requires 'convert-source-map' and Node.js. Suitable for workflows where non-blocking I/O is important. Outputs the source map in JSON form after awaiting the asynchronous call.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/convert-source-map/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar convert = require('convert-source-map');\nvar { promises: fs } = require('fs'); // Notice the `promises` import\n\nfunction readMap(filename) {\n  return fs.readFile(filename, 'utf8');\n}\n\nvar converter = await convert.fromMapFileComment('//# sourceMappingURL=map-file-comment.css.map', readMap)\nvar json = converter.toJSON();\nconsole.log(json);\n```\n\n----------------------------------------\n\nTITLE: Pretty-Printing Arrays with Custom Indentation (JavaScript)\nDESCRIPTION: Demonstrates using `compact: false` along with a custom `indent` string (two spaces: `'  '`) to control the formatting of array output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\njsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {\n  'compact': false,\n  'indent': '  '\n});\n// → '[\\n  \\'Ich \\u2665 B\\xFCcher\\',\\n  \\'foo \\uD834\\uDF06 bar\\'\\n]'\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Syntax Private Property in Object using yarn (Shell)\nDESCRIPTION: This shell command uses yarn to add '@babel/plugin-syntax-private-property-in-object' as a development dependency. It assumes the presence of Node.js and yarn in the system. Executing this command in the project directory updates the project's dependencies to include the plugin under 'devDependencies'. The command requires no additional parameters.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-private-property-in-object/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-private-property-in-object --dev\n```\n\n----------------------------------------\n\nTITLE: Defining Client Options with @azure/core-http PipelineOptions in TypeScript\nDESCRIPTION: This snippet shows the structure of a client options interface (`SearchClientOptions`) when using the older `@azure/core-http` library. It extends `PipelineOptions`, which was the base options interface in that version. The `apiVersion` is an example of a service-specific option.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-http-compat/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SearchClientOptions extends PipelineOptions {\n  apiVersion?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Built-in Plugins using CommonJS (JavaScript)\nDESCRIPTION: Demonstrates importing the `pretty-format` library along with its built-in plugins (`ReactElement`, `ReactTestComponent`) using CommonJS `require`. This setup is necessary when using these plugins to format React elements or test components in a CommonJS environment. Requires `react` and `react-test-renderer` dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n----------------------------------------\n\nTITLE: Example CLI Deprecation Error Output (Bash/Console)\nDESCRIPTION: Illustrates the error output when `validateCLIOptions` encounters a deprecated CLI option (`collectCoverageOnlyFrom`) that is *not* listed in the `allowedOptions`. The function throws an error with the specific deprecation message defined in the `deprecatedOptions` configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n● collectCoverageOnlyFrom:\n\n  Option \"collectCoverageOnlyFrom\" was replaced by \"collectCoverageFrom\"\n\n  CLI Options Documentation: https://jestjs.io/docs/en/cli.html\n```\n\n----------------------------------------\n\nTITLE: Defining Client Options with Azure Core HTTP Compatibility ExtendedCommonClientOptions in TypeScript\nDESCRIPTION: This snippet illustrates how to define a client options interface (`SearchClientOptions`) using the `ExtendedCommonClientOptions` type provided by the Azure Core HTTP Compatibility library. This interface acts as a bridge, allowing a library to maintain compatibility with consumers expecting `@azure/core-http` options while internally using the newer `@azure/core-client` & `@azure/core-rest-pipeline` structure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-http-compat/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SearchClientOptions extends ExtendedCommonClientOptions {\n  apiVersion?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-jest-hoist using Yarn (Shell)\nDESCRIPTION: This command demonstrates how to install the `babel-plugin-jest-hoist` package as a development dependency using the Yarn package manager. The `--dev` flag ensures it's added to the `devDependencies` section of your `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-plugin-jest-hoist/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add --dev babel-plugin-jest-hoist\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-bigint with yarn (Shell)\nDESCRIPTION: Installs the `@babel/plugin-syntax-bigint` package as a development dependency using the yarn package manager. This command requires Node.js and yarn to be installed. The `--dev` flag adds the package to the `devDependencies` in the project's `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-bigint/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-bigint --dev\n```\n\n----------------------------------------\n\nTITLE: Installing ansi-styles via npm\nDESCRIPTION: Command to install the `ansi-styles` Node.js package using the Node Package Manager (npm). This makes the library available for use in a project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/node_modules/ansi-styles/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ansi-styles\n```\n\n----------------------------------------\n\nTITLE: Installing Babel JSX Syntax Plugin with Yarn - Shell\nDESCRIPTION: This snippet shows the installation of @babel/plugin-syntax-jsx as a development dependency using the yarn package manager. It adds the plugin to your project's devDependencies, making it available for Babel to parse JSX files. Requires Node.js and yarn to be installed. The command takes the package name and the --dev flag to ensure the package is installed in the correct dependency group, with changes reflected in your yarn.lock and package.json files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-jsx/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-jsx --dev\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-current-node-syntax with yarn - Shell\nDESCRIPTION: This snippet demonstrates how to install the 'babel-preset-current-node-syntax' package as a development dependency using yarn. The 'yarn add --dev' command is used to ensure the preset is only required during development. No additional dependencies are needed besides yarn itself. The expected input is a command line shell, and it outputs the installation result.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-preset-current-node-syntax/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev babel-preset-current-node-syntax\n```\n\n----------------------------------------\n\nTITLE: TypeScript Demo: Original TypeScript Code\nDESCRIPTION: A TypeScript file (`demo.ts`) that requires source map support, defines a simple class, and throws an error within a class method. This serves as the original source code for the TypeScript demo.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function require(name: string);\nrequire('@cspotcode/source-map-support').install();\nclass Foo {\n  constructor() { this.bar(); }\n  bar() { throw new Error('this is a demo'); }\n}\nnew Foo();\n```\n\n----------------------------------------\n\nTITLE: Installing ts-node and Dependencies using npm (Shell)\nDESCRIPTION: Shell commands demonstrating how to install ts-node, TypeScript, and optional related dependencies (tslib, @types/node) using npm. Includes examples for both local project installation (recommended, using -D for devDependencies) and global installation (using -g). Requires npm and Node.js.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Locally in your project.\nnpm install -D typescript\nnpm install -D ts-node\n\n# Or globally with TypeScript.\nnpm install -g typescript\nnpm install -g ts-node\n\n# Depending on configuration, you may also need these\nnpm install -D tslib @types/node\n```\n\n----------------------------------------\n\nTITLE: Checking Current Directory and File Structure - Shell\nDESCRIPTION: Demonstrates how to print the current working directory and display the initial directory tree structure before any directories are created. These commands are informational and show the workspace context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pwd\n/Users/sindresorhus/fun\n$ tree\n.\n```\n\n----------------------------------------\n\nTITLE: Including natural-compare-lite in Browser (HTML)\nDESCRIPTION: This HTML snippet shows how to include the minified `natural-compare-lite` library script in an HTML file for use in a web browser. This makes the `String.naturalCompare` method available globally.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=min.natural-compare.js></script>\n```\n\n----------------------------------------\n\nTITLE: Complete TypeScript Configuration for Node 10 in JSONC\nDESCRIPTION: This is an example of a full tsconfig.json tailored for Node.js 10 with explanatory comments, specifying compiler options such as ES2018 target, CommonJS module system, and strict type checking. Dependencies include TypeScript and @tsconfig/node10. Inputs are key-value pairs configuring the TypeScript compiler, with expected output as compliant JavaScript code targeting ES2018. Comments in JSONC provide context but require tooling that supports this format.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node10/README.md#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n\n  \"compilerOptions\": {\n    \"lib\": [\"es2018\"],\n    \"module\": \"commonjs\",\n    \"target\": \"es2018\",\n\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"node\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Bash-like Star Behavior with `bash` Option in Micromatch (JavaScript)\nDESCRIPTION: Illustrates the effect of the `bash` option on how a star (`*`) following a bracket expression is interpreted in `micromatch`. With `bash: true` (default), the star matches literally as in bash. With `bash: false`, it behaves more like a regex quantifier repeating the bracket expression.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst files = ['abc', 'ajz'];\nconsole.log(micromatch(files, '[a-c]*'));\n//=> ['abc', 'ajz']\n\nconsole.log(micromatch(files, '[a-c]*', { bash: false }));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'unknown-options-as-args' Behavior (Disabled)\nDESCRIPTION: This console example shows the output when the `unknown-options-as-args` option is disabled (default). Unknown options (`--unknown-option`, `--unknown-option2`) are parsed as boolean flags or key-value pairs if possible, alongside known options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs-parser/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ node example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n----------------------------------------\n\nTITLE: Single-Statement Export from Module in JavaScript\nDESCRIPTION: Shows ES module syntax for exporting 'toString' from another module via a single line statement. No dependencies outside ES module support. The export statement imports and immediately makes available the symbol 'toString' from the referenced module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nexport toString from './toString';\n```\n\n----------------------------------------\n\nTITLE: Illustrating Vulnerable new Buffer() Usage in a Node.js Web Server Function (JavaScript)\nDESCRIPTION: This JavaScript function `stringToBase64` demonstrates a security vulnerability using the deprecated `new Buffer()` constructor. It reads `req.body.string` from a request, converts it to a Buffer, and then encodes it to Base64. The lack of type checking on `req.body.string` makes it susceptible to information leaks (pre-Node.js 8) or Denial of Service if a number is passed instead of a string. It expects `req` and `res` objects, typical in Node.js HTTP server handlers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safer-buffer/Porting-Buffer.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction stringToBase64(req, res) {\n  // The request body should have the format of `{ string: 'foobar' }`\n  const rawBytes = new Buffer(req.body.string)\n  const encoded = rawBytes.toString('base64')\n  res.end({ encoded: encoded })\n}\n```\n\n----------------------------------------\n\nTITLE: Using mimic-fn to Mimic Function Properties - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the mimic-fn library to make a wrapper function imitate the properties (such as name and custom attributes) of another function. The process involves requiring mimic-fn, defining a base function and its wrapper, and applying mimicFn to transfer properties. Dependencies: mimic-fn must be installed via npm. Inputs include the target (wrapper) and the source (foo) functions; the output is that the wrapper acquires foo's name and properties. Note: only own properties of the source will be copied, and function references should be valid.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mimic-fn/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mimicFn = require('mimic-fn');\n\nfunction foo() {}\nfoo.unicorn = '🦄';\n\nfunction wrapper() {\n\treturn foo();\n}\n\nconsole.log(wrapper.name);\n//=> 'wrapper'\n\nmimicFn(wrapper, foo);\n\nconsole.log(wrapper.name);\n//=> 'foo'\n\nconsole.log(wrapper.unicorn);\n//=> '🦄'\n```\n\n----------------------------------------\n\nTITLE: Installing Prompts via npm - JavaScript\nDESCRIPTION: Shows the terminal command required to install the 'prompts' package from npm. This step is necessary before using prompts in your JavaScript/Node.js project. Requires npm to be installed and accessible in your environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save prompts\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Implementation Details\nDESCRIPTION: Details the key files involved in the PostgreSQL database integration using Drizzle ORM. The database connection setup is handled in `server/db.ts`, schema definitions shared across frontend and backend are in `shared/schema.ts`, and a dedicated interface for database operations is defined in `server/storage.ts`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n- `server/db.ts` - Database connection setup\n- `shared/schema.ts` - Schema definitions using Drizzle schema builder\n- `server/storage.ts` - Interface for database operations\n```\n\n----------------------------------------\n\nTITLE: Calling the 'unpipe' Function in JavaScript\nDESCRIPTION: This snippet shows the API signature for the `unpipe` function. It accepts a single argument, `stream`, representing the stream from which all piped destinations should be removed. The description notes its equivalence to `stream.unpipe()` for modern streams (stream 2+) and its attempt to reverse `stream.pipe(dest)` for older streams (streams 1, Node.js 0.8 and below).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/unpipe/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nunpipe(stream)\n```\n\n----------------------------------------\n\nTITLE: Using is-number: False Cases in JavaScript\nDESCRIPTION: Lists examples of values for which the `is-number` function correctly returns `false`. This includes non-finite numbers (`Infinity`, `NaN`), `null`, `undefined`, empty or non-numeric strings, arrays, functions, and objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nisNumber(Infinity);          // false\nisNumber(NaN);               // false\nisNumber(null);              // false\nisNumber(undefined);         // false\nisNumber('');                // false\nisNumber('   ');             // false\nisNumber('foo');             // false\nisNumber([1]);               // false\nisNumber([]);                // false\nisNumber(function () {});    // false\nisNumber({});                // false\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Generator-Based Wrappers with gensync in JavaScript\nDESCRIPTION: Defines generator-based file read and composition operations using gensync, supporting sync, promise, and errback styles and demonstration of yielding from another gensync function. Inputs are typically filenames and options; outputs are the computed result (e.g., file contents). Shows both direct and nested generator invocation, requiring prior gensync wrapping.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gensync/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst readFile = function* () {\n  return 42;\n};\n\nconst readFileAndMore = gensync(function* (){\n  const val = yield* readFile();\n  return 42 + val;\n});\n\n// In general cases\nconst code = readFileAndMore.sync(\"./file.js\", \"utf8\");\nreadFileAndMore.async(\"./file.js\", \"utf8\").then(code => {})\nreadFileAndMore.errback(\"./file.js\", \"utf8\", (err, code) => {});\n\n// In a generator being called indirectly with .sync/.async/.errback\nconst code = yield* readFileAndMore(\"./file.js\", \"utf8\");\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of diff-sequences in JavaScript\nDESCRIPTION: Illustrates the fundamental usage of the `diff` function from the `diff-sequences` package. It defines two arrays (`a` and `b`), a comparison function (`isCommon`) that checks for strict equality, and a placeholder output function (`foundSubsequence`). The `diff` function is called with the lengths of the arrays and the callback functions to initiate the comparison.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff-sequences/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst a = ['a', 'b', 'c', 'a', 'b', 'b', 'a'];\nconst b = ['c', 'b', 'a', 'b', 'a', 'c'];\n\nfunction isCommon(aIndex, bIndex) {\n  return a[aIndex] === b[bIndex];\n}\nfunction foundSubsequence(nCommon, aCommon, bCommon) {\n  // see examples\n}\n\ndiff(a.length, b.length, isCommon, foundSubsequence);\n```\n```\n\n----------------------------------------\n\nTITLE: Default ES5 Escaping for Astral Symbols (JavaScript)\nDESCRIPTION: Shows the default behavior of jsesc (`es6: false`) where astral Unicode symbols (like 𝌆 and 💩) are escaped using surrogate pairs (`\\uD834\\uDF06`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// By default, the `es6` option is disabled:\njsesc('foo 𝌆 bar 💩 baz');\n// → 'foo \\\\uD834\\\\uDF06 bar \\\\uD83D\\\\uDCA9 baz'\n```\n\n----------------------------------------\n\nTITLE: Installing Acorn via npm - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the Acorn JavaScript parser using npm. It assumes npm is available on the user\\'s system and will place the Acorn dependency in the local node_modules folder. No configuration parameters are needed, and the output will be the usual npm install logs. Users should ensure that npm is set up before running this command.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install acorn\n\n```\n\n----------------------------------------\n\nTITLE: Yielding Raw Body in Koa Middleware with raw-body in JavaScript\nDESCRIPTION: Shows how to use raw-body within Koa v1 (generator-based) middleware to parse the raw HTTP request body. Utilizes content-type for charset extraction and applies content-length and size limit options. The result is assigned to this.text for downstream middleware access. Requires koa, raw-body, and content-type dependencies; suitable for generator-based Koa applications.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/raw-body/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\nvar contentType = require('content-type')\\nvar getRawBody = require('raw-body')\\nvar koa = require('koa')\\n\\nvar app = koa()\\n\\napp.use(function * (next) {\\n  this.text = yield getRawBody(this.req, {\\n    length: this.req.headers['content-length'],\\n    limit: '1mb',\\n    encoding: contentType.parse(this.req).parameters.charset\\n  })\\n  yield next\\n})\\n\\n// now access this.text\\n```\n```\n\n----------------------------------------\n\nTITLE: Importing matchToToken Helper (ESM & CommonJS)\nDESCRIPTION: Shows how to import the `matchToToken` named export from the `js-tokens` library using both ES Module `import` and CommonJS `require`. This function takes a match object from `jsTokens.exec()` and returns an object with `type` and `value` properties, classifying the token.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {matchToToken} from \"js-tokens\"\n// or:\nvar matchToToken = require(\"js-tokens\").matchToToken\n```\n\n----------------------------------------\n\nTITLE: Generating Quiz Content and Feedback with GPT-4 API\nDESCRIPTION: Utilizes the GPT-4 API to automatically generate quiz questions, drag-and-drop activity content, and adaptive feedback based on the content of the explainer video script or other learning materials. The system adapts questions based on user performance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_7\n\nLANGUAGE: API\nCODE:\n```\nUse GPT-4 API\nInput: Content from video script or learning objectives.\nProcess: \n- Generate multiple-choice questions.\n- Create content for drag-and-drop activities.\n- Generate context-specific follow-up questions based on user performance.\n- Provide adaptive feedback (hints for struggling users, challenges for excelling users).\nOutput: Dynamic quiz questions and feedback text for interactive modules.\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Case for res.json(status, number) in Express.js\nDESCRIPTION: Specifies the required approach for the edge case where the intended JSON body is a number when using the `res.json(status, body)` signature. To avoid ambiguity, developers must chain `res.status()` and `res.json()` explicitly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// the edge-case res.json(status, num) requires\nres.status(status).json(num)\n```\n\n----------------------------------------\n\nTITLE: Detecting Array Types with type-detect (JavaScript)\nDESCRIPTION: Illustrates using the `type-detect` function to identify array literals and arrays created with the `Array` constructor. It uses `assert` to verify that `type()` returns the string 'Array' for both cases. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type([]) === 'Array');\nassert(type(new Array()) === 'Array');\n```\n\n----------------------------------------\n\nTITLE: Importing TypeBox in Esm Modules - TypeScript\nDESCRIPTION: Demonstrates importing 'Static' and 'Type' from TypeBox using an ES module-compatible URL from esm.sh. Suitable for browser or server environments supporting imports from CDN URLs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Static, Type } from 'https://esm.sh/@sinclair/typebox'\n```\n\n----------------------------------------\n\nTITLE: Unified Diff Output With Change Counts for Array Comparison\nDESCRIPTION: A unified diff snippet is shown for comparing two arrays with annotation lines indicating expected/received and explicit change counts. The diff format includes array-like syntax and standard diff markers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n- Expected  - 1\\n+ Received  + 2\\n\\n  Array [\\n    \"common\",\\n-   \"changed from\",\\n+   \"changed to\",\\n+   \"insert\",\\n  ]\n```\n\n----------------------------------------\n\nTITLE: Using side-channel-map to Store and Manage Data with JS Values in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the complete workflow of using side-channel-map: initializing the channel, associating and retrieving data for object keys, checking and asserting key existence, and properly cleaning up entries. It showcases defensive patterns (asserting and error handling with missing keys), and highlights the API's get, set, has, delete, and assert methods. Prerequisites include the side-channel-map and assert npm modules. The key parameter must be a JS value (object or primitive); object keys require manual deletion to avoid memory leaks. Outputs are checked via assertions and exceptions, clarifying functional expectations and error handling.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel-map/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst getSideChannelMap = require('side-channel-map');\n\nconst channel = getSideChannelMap();\n\nconst key = {};\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n\nchannel.set(key, 42);\n\nchannel.assert(key); // does not throw\nassert.equal(channel.has(key), true);\nassert.equal(channel.get(key), 42);\n\nchannel.delete(key);\nassert.equal(channel.has(key), false);\nassert.throws(() => channel.assert(key), TypeError);\n```\n\n----------------------------------------\n\nTITLE: Importing js-tokens From Version 3.0.0 Onwards\nDESCRIPTION: This JavaScript snippet demonstrates the updated method for importing the js-tokens library and its `matchToToken` function starting from version 3.0.0. This revised approach uses named exports for `matchToToken` and requires accessing the default export explicitly (`.default`) when using `require` to avoid V8 performance pitfalls.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport jsTokens, {matchToToken} from \"js-tokens\"\n// or:\nvar jsTokens = require(\"js-tokens\").default\nvar matchToToken = require(\"js-tokens\").matchToToken\n```\n```\n\n----------------------------------------\n\nTITLE: Testing emitter.once Listener Return Value - Node.js Events API (JavaScript)\nDESCRIPTION: This snippet illustrates how emitting an event using 'emitter.once' can return a value from the listener, as supported in Node.js 11.12.0 and up. The code creates an event with a one-time listener, fetches the original listener with 'rawListeners', and asserts that invoking it directly returns the expected result. Dependencies include an event emitter instance and optionally the 'assert' library. The key functionality verified here is listener return value propagation through 'once();' previous versions would always return undefined.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/events/History.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nemitter.once('myevent', function () { return 1; });\nvar listener = emitter.rawListeners('myevent')[0]\nassert(listener() === 1);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw ANSI Escape Codes with ansi-styles (JavaScript)\nDESCRIPTION: Illustrates accessing the raw ANSI escape codes via the `style.codes` Map. This example retrieves the corresponding closing code (39) for the opening code 36 (cyan).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/node_modules/ansi-styles/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(style.codes.get(36));\n//=> 39\n```\n\n----------------------------------------\n\nTITLE: Inspecting Compiled Code with TypeCompiler in TypeScript\nDESCRIPTION: Shows how to inspect the underlying JavaScript validation function generated by the TypeCompiler. Calling the `.Code()` method on a compiled TypeCheck object (`C`) returns the source code of the optimized validation routine as a string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst C = TypeCompiler.Compile(Type.String())        // const C: TypeCheck<TString>\n\nconsole.log(C.Code())                                // return function check(value) {\n                                                     //   return (\n                                                     //     (typeof value === 'string')\n                                                     //   )\n                                                     // }\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting Strings with tmpl - JavaScript\nDESCRIPTION: Demonstrates using the tmpl function to interpolate values into a string template. The snippet relies on the tmpl library and Node.js's built-in assert module. It calls tmpl with a template string containing placeholder braces and an object specifying replacement values, then asserts the result against the expected formatted string. Input includes a template string and a replacement object; output is the formatted string. Requires the tmpl function to be defined and assert to be available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tmpl/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nassert.equal(\n  tmpl('the answer is {answer}', { answer: 42 }),\n  'the answer is 42')\n```\n\n----------------------------------------\n\nTITLE: Using JSON5 UMD Build in Browsers via HTML\nDESCRIPTION: This HTML snippet loads the minified Universal Module Definition (UMD) build of JSON5 into a web page. JSON5 becomes available as a global variable for use in browser-based JavaScript. No build steps or module bundlers are needed, but requires network access to unpkg.com.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\\\"https://unpkg.com/json5@2/dist/index.min.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Incrementing prerelease omitting number using semver.inc\nDESCRIPTION: Example using `semver.inc` in JavaScript to increment to a prerelease version ('1.2.4-beta') with an identifier ('beta') but omitting the prerelease number altogether. This is achieved by passing `false` as the identifierBase (fourth) argument.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsemver.inc('1.2.3', 'prerelease', 'beta', false)\n// '1.2.4-beta'\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Source Maps via hookRequire - JavaScript\nDESCRIPTION: Activates monitoring of all source files for inline source maps by setting hookRequire: true in the install() options. This monkey-patches Node's require chain, which is discouraged for production use. Intended for development or debugging scenarios.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nrequire('source-map-support').install({\n  hookRequire: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring jest-pnp-resolver in Jest Configuration - JavaScript\nDESCRIPTION: This snippet shows a minimal example for setting the jest-pnp-resolver as the custom resolver in a Jest configuration file (jest.config.js). It uses Node's require.resolve to specify the resolver path. This file should be placed at the root of your project and will direct Jest to resolve modules using Plug'n'Play mechanisms provided by Yarn PnP. No extra parameters are required, and this approach is compatible with Jest versions prior to 24.4.0 or when explicit configuration is needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-pnp-resolver/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  resolver: require.resolve(`jest-pnp-resolver`)\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Pretty-Format Plugin with `maxDepth` Option (JavaScript)\nDESCRIPTION: This snippet demonstrates the `maxDepth` option's effect with the custom array plugin. Calling `prettyFormat` with `maxDepth: 1` prevents the array's contents from being fully serialized, resulting in the output `[Array]` as defined in the plugin's `serialize` logic for exceeding maximum depth.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Shell Example of Unknown Option Result in arg Parsing\nDESCRIPTION: Shows a shell output example when an unknown command-line option is supplied, reflecting the ARG_UNKNOWN_OPTION error message. Illustrates expected feedback to CLI users when passing invalid flags, requiring the error handling logic shown in JavaScript elsewhere.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnode cli.js --extraneous true\nUnknown or unexpected option: --extraneous\n```\n\n----------------------------------------\n\nTITLE: Detecting RegExp Types with type-detect (JavaScript)\nDESCRIPTION: Shows how `type-detect` correctly identifies regular expression literals and objects created with the `RegExp` constructor. It uses `assert` to confirm the function returns 'RegExp'. Requires the `type-detect` library and an assertion library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nassert(type(/a-z/gi) === 'RegExp');\nassert(type(new RegExp('a-z')) === 'RegExp');\n```\n\n----------------------------------------\n\nTITLE: Named Exports Underclassification Example (JavaScript)\nDESCRIPTION: Shows that cjs-module-lexer does not detect export assignments if the 'exports' binding is renamed to something else, due to its lack of scope analysis. Demonstrates a false negative scenario where matching identifier patterns are not detected because of aliasing. No dependencies besides the code structure itself.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS: NO EXPORTS\n(function (e) {\n  e.a = 'a';\n  e['b'] = 'b';\n})(exports);\n```\n\n----------------------------------------\n\nTITLE: Pretty-Printing Objects with Custom Indentation (JavaScript)\nDESCRIPTION: Demonstrates using `compact: false` along with a custom `indent` string (two spaces: `'  '`) to control the formatting of object output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\njsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {\n  'compact': false,\n  'indent': '  '\n});\n// → '{\\n  \\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n```\n\n----------------------------------------\n\nTITLE: Edge Case for Deprecated res.json(status, num) in Express.js\nDESCRIPTION: Highlights an edge case `res.json(status, num)` where the second argument is a number. When migrating from the deprecated `res.json(obj, status)` signature, this specific case requires explicit chaining.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nres.json(status, num)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Pretty-Format Plugin with `min` Option (JavaScript)\nDESCRIPTION: This snippet illustrates the `min` option for compact output when using the custom array plugin. Setting `min: true` in the `prettyFormat` options instructs the plugin (and `pretty-format` itself) to minimize whitespace and newlines, producing a single-line, compact representation of the object.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using the merge Function (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of the `merge` function provided by the 'utils-merge' package. It initializes two objects, `a` and `b`, and then calls `merge(a, b)` to copy the properties from object `b` into object `a`. The destination object `a` is modified in place, resulting in `a` containing properties from both original objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/utils-merge/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = { foo: 'bar' }\n  , b = { bar: 'baz' };\n\nmerge(a, b);\n// => { foo: 'bar', bar: 'baz' }\n```\n\n----------------------------------------\n\nTITLE: Resulting Output for stopAtPositional Option in arg\nDESCRIPTION: Demonstrates the output object when stopAtPositional is set to true in arg, showing that parsing halts at the first positional argument, with remaining values put in the _ array. No dependencies beyond Node.js and arg are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst args = {\n\t_: ['hello', '--bar'],\n\t'--foo': true\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Indentation Level (Level 2) (JavaScript)\nDESCRIPTION: Shows how `indentLevel: 2` affects non-compact output. The entire output is indented by two levels (two tabs, by default), useful when embedding the output within already indented code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\njsesc(['a', 'b', 'c'], {\n  'compact': false,\n  'indentLevel': 2\n});\n// → '[\\n\\t\\t\\t\\'a\\',\\n\\t\\t\\t\\'b\\',\\n\\t\\t\\t\\'c\\'\\n\\t\\t]'\n```\n\n----------------------------------------\n\nTITLE: Single-Item Brace Patterns using braces - JavaScript\nDESCRIPTION: Demonstrates that patterns containing a single item within braces are not expanded by default, in line with Bash behavior. Useful for pattern design where expansion is only needed for multiple item lists or ranges.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(braces.expand('a{b}c'));\n//=> ['a{b}c']\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Backend Project (Shell)\nDESCRIPTION: This shell command runs the Node Package Manager (npm) initialization process within the Replit backend project. It interactively prompts for project details (name, version, etc.) and generates a `package.json` file, which is crucial for managing dependencies and defining scripts for the Node.js backend application. Requires Node.js and npm to be installed in the Replit environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Using is-number: True Cases in JavaScript\nDESCRIPTION: Provides various examples of values for which the `is-number` function returns `true`. This includes different number formats (integer, float, scientific notation, hexadecimal) and string representations of finite numbers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nisNumber(5e3);               // true\nisNumber(0xff);              // true\nisNumber(-1.1);             // true\nisNumber(0);                 // true\nisNumber(1);                 // true\nisNumber(1.1);               // true\nisNumber(10);                // true\nisNumber(10.10);             // true\nisNumber(100);               // true\nisNumber('-1.1');            // true\nisNumber('0');               // true\nisNumber('012');             // true\nisNumber('0xff');            // true\nisNumber('1');               // true\nisNumber('1.1');             // true\nisNumber('10');              // true\nisNumber('10.10');           // true\nisNumber('100');             // true\nisNumber('5e3');             // true\nisNumber(parseInt('012'));   // true\nisNumber(parseFloat('012')); // true\n```\n\n----------------------------------------\n\nTITLE: Configuring jest-circus Test Runner via Jest CLI (Bash)\nDESCRIPTION: This command demonstrates how to instruct Jest to use the `jest-circus` test runner for a specific execution by passing the `--testRunner` option with the value `'jest-circus/runner'` directly on the command line. This overrides any configuration set in Jest configuration files for that specific run.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-circus/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest --testRunner='jest-circus/runner'\n```\n\n----------------------------------------\n\nTITLE: Exporting Status Code Map (Deprecated JavaScript)\nDESCRIPTION: Represents the export name `STATUS_CODES` used in versions 1.4.0 up to 2.0.0. This likely exported an object mapping numeric status codes to their standard message strings. It was renamed to `message` in v2.0.0 for clarity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSTATUS_CODES\n```\n\n----------------------------------------\n\nTITLE: Installing node-fetch v2 for CommonJS Support - Shell\nDESCRIPTION: Shows how to install the v2 version of node-fetch, which remains compatible with require() and CommonJS modules. Required if the Node.js project cannot switch to ESM syntax.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-fetch/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install node-fetch@2\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Syntax Top-Level Await with Yarn - Shell\nDESCRIPTION: This snippet shows how to install @babel/plugin-syntax-top-level-await using the yarn package manager. The 'add' command fetches and installs the specified plugin while the --dev flag ensures it is registered as a development dependency. This command should be entered in the terminal at a project's root; it updates the project's package manifest. Input: terminal; Output: plugin added to devDependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-top-level-await/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-top-level-await --dev\n```\n\n----------------------------------------\n\nTITLE: Importing the DiffOptionsColor Type for Advanced jest-diff Configuration in TypeScript\nDESCRIPTION: This TypeScript snippet imports the DiffOptionsColor type from jest-diff to specify color functions for diff options in a type-safe manner. It is for developers extending or integrating custom coloring in strongly-typed TypeScript projects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nimport {DiffOptionsColor} from 'jest-diff';\n```\n\n----------------------------------------\n\nTITLE: Examples of 'co' Usage for Promises and Error Handling in JavaScript\nDESCRIPTION: Provides multiple examples using the 'co' library. The first example shows yielding a single Promise. The second demonstrates parallel execution by yielding an array of Promises, logging the resulting array. The third example illustrates try/catch error handling within the generator for rejected Promises. It also defines an `onerror` function as a catch-all for unhandled errors from the `co` calls.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar co = require('co');\\n\\nco(function *(){\\n  // yield any promise\\n  var result = yield Promise.resolve(true);\\n}).catch(onerror);\\n\\nco(function *(){\\n  // resolve multiple promises in parallel\\n  var a = Promise.resolve(1);\\n  var b = Promise.resolve(2);\\n  var c = Promise.resolve(3);\\n  var res = yield [a, b, c];\\n  console.log(res);\\n  // => [1, 2, 3]\\n}).catch(onerror);\\n\\n// errors can be try/catched\\nco(function *(){\\n  try {\\n    yield Promise.reject(new Error('boom'));\\n  } catch (err) {\\n    console.error(err.message); // \\\"boom\\\"\\n }\\n}).catch(onerror);\\n\\nfunction onerror(err) {\\n  // log any uncaught errors\\n  // co will not throw any errors you do not handle!!!\\n  // HANDLE ALL YOUR ERRORS!!!\\n  console.error(err.stack);\\n}\n```\n\n----------------------------------------\n\nTITLE: Using jsesc with 'single' Quotes Option (JavaScript)\nDESCRIPTION: Illustrates the default behavior (`quotes: 'single'`) or explicitly setting it. Single quotes within the input string are escaped (`\\'`), making the output suitable for embedding within single-quoted JavaScript string literals.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njsesc('`Lorem` ipsum \"dolor\" sit \\'amet\\' etc.');\n// → 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\njsesc('`Lorem` ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// → '`Lorem` ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// → \"`Lorem` ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating `printFunctionName` Limitation with `print` Interface Plugin (JavaScript)\nDESCRIPTION: This snippet highlights a limitation of the `print` plugin interface: it ignores the `printFunctionName` option. It calls `prettyFormat` with the function plugin (`pluginOld`, assumed to be the previously defined `print`-based plugin) and `printFunctionName: false`, showing the plugin still prints the function name. A subsequent call without the plugin but with `printFunctionName: false` shows the default behavior correctly omitting the function name.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Assets - Bash\nDESCRIPTION: Builds optimized frontend assets with Vite for production deployment. Requires NODE_ENV to be set appropriately and the frontend code to be present. This should be run prior to starting the app in production mode.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Tracing Low-Level Segments with traceSegment - TypeScript\nDESCRIPTION: Demonstrates the lower-level traceSegment API from @jridgewell/trace-mapping in TypeScript, which provides direct access to the mapped segment for a given line and column (line is 0-based). Requires a previously created tracer object (TraceMap). The output is an array containing the mapped segment data; assertions confirm correctness.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/trace-mapping/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { traceSegment } from '@jridgewell/trace-mapping';\n\n// line is 0-base.\nconst traced = traceSegment(tracer, /* line */ 0, /* column */ 5);\n\n// Segments are [outputColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n// Again, line is 0-base and so is sourceLine\nassert.deepEqual(traced, [5, 0, 41, 4, 0]);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Indentation Level (Level 1) (JavaScript)\nDESCRIPTION: Shows how `indentLevel: 1` affects non-compact output. The entire output is indented by one level (one tab, by default), in addition to the internal indentation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\njsesc(['a', 'b', 'c'], {\n  'compact': false,\n  'indentLevel': 1\n});\n// → '[\\n\\t\\t\\'a\\',\\n\\t\\t\\'b\\',\\n\\t\\t\\'c\\'\\n\\t]'\n```\n\n----------------------------------------\n\nTITLE: Installing @types/jest Package using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the TypeScript type definitions for the Jest testing framework (`@types/jest`). The `--save` flag (though often implicit in newer npm versions) signifies that the package should be added as a dependency in the project's `package.json` file. Execution requires Node.js and npm to be installed in the environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/jest/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/jest\n```\n\n----------------------------------------\n\nTITLE: Buffer Allocation and Overwrite with Another Buffer - JavaScript\nDESCRIPTION: Demonstrates allocating an uninitialized buffer of a fixed size and immediately overwriting its contents with another buffer's data. Assumes that the source buffer, otherBuf, is at least as large as the destination. Does not perform bounds checking, and relies on manual overwriting to avoid disclosing uninitialized memory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar buf = new Buffer(16)\\n\\n// Immediately overwrite the uninitialized buffer with data from another buffer\\nfor (var i = 0; i < buf.length; i++) {\\n  buf[i] = otherBuf[i]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function Utilizing get-caller-file in Node.js - JavaScript\nDESCRIPTION: Shows how to import and invoke a function that internally uses get-caller-file to determine and return its caller's file path. The foo() function is expected to return the full file path of index.js where it is called. Requires both the foo module and get-caller-file as dependencies, with the output being a string containing the path.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-caller-file/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nconst foo = require('./foo');\n\nfoo() // => /full/path/to/this/file/index.js\n```\n\n----------------------------------------\n\nTITLE: Stripping Final Newline Characters Using strip-final-newline - JavaScript\nDESCRIPTION: Demonstrates how to import and use the 'strip-final-newline' package to remove only the final newline character(s) from a string or buffer. Requires the 'strip-final-newline' npm package, which must be installed via npm. The input can be a string or a Buffer; the function returns the input with any trailing newline character removed without affecting leading whitespace or newlines. The example also shows conversion from Buffer to string after processing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-final-newline/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst stripFinalNewline = require('strip-final-newline');\n\nstripFinalNewline('foo\\nbar\\n\\n');\n//=> 'foo\\nbar\\n'\n\nstripFinalNewline(Buffer.from('foo\\nbar\\n\\n')).toString();\n//=> 'foo\\nbar\\n'\n```\n\n----------------------------------------\n\nTITLE: Running FakeTimers Tests in a Headless Browser\nDESCRIPTION: Executes the FakeTimers test suite within a headless browser environment (PhantomJS) using Mochify via the npm script 'test-headless'. This requires PhantomJS to be installed and accessible in the environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinonjs/fake-timers/README.md#_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nnpm test-headless\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of co v4 with Promises in JavaScript\nDESCRIPTION: Demonstrates the basic usage of `co` version 4. It shows how to invoke `co` with a generator function (`function*`). The `co` function now returns a Promise, which resolves with the generator's return value or rejects if an error occurs. The example yields a resolved Promise and logs the result or error using `.then()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nco(function* () {\\n  var result = yield Promise.resolve(true);\\n  return result;\\n}).then(function (value) {\\n  console.log(value);\\n}, function (err) {\\n  console.error(err.stack);\\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying ts-node Configuration (Shell/JSONC Output)\nDESCRIPTION: Runs 'ts-node --showConfig' to display the resolved tsconfig.json, including all merged options from tsconfig and ts-node fields. The sample output is in JSONC format, showing TypeScript compilerOptions and any ts-node specific settings. Useful for debugging which settings are applied.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ ts-node --showConfig\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"lib\": [\n      \"es6\",\n      \"dom\"\n    ],\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./.ts-node\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"declaration\": false,\n    \"sourceMap\": true,\n    \"inlineSources\": true,\n    \"types\": [\n      \"node\"\n    ],\n    \"stripInternal\": true,\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"importsNotUsedAsValues\": \"error\",\n    \"inlineSourceMap\": false,\n    \"noEmit\": false\n  },\n  \"ts-node\": {\n    \"cwd\": \"/d/project\",\n    \"projectSearchDir\": \"/d/project\",\n    \"require\": [],\n    \"project\": \"/d/project/tsconfig.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Deprecation Warning Output (Bash/Console)\nDESCRIPTION: Shows a sample deprecation warning message triggered by a `deprecatedConfig` definition. It uses the custom title specified in the validation options, explains the deprecation (e.g., 'scriptPreprocessor' replaced by 'transform'), shows how Jest interprets the deprecated configuration, advises updating, and includes the custom comment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nCustom Deprecation:\n\n  Option scriptPreprocessor was replaced by transform, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    \"transform\": {\".*\": \"xxx\"}\n  }\n\n  Please update your configuration.\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Installing Framer Motion Dependency\nDESCRIPTION: Installs the Framer Motion library using npm. Framer Motion is used to add animations and microinteractions to the React application's user interface, enhancing user engagement.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install framer-motion\n```\n\n----------------------------------------\n\nTITLE: Querying the MIME Type Database with mime-db in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to require the mime-db module and retrieve MIME type information for JavaScript files using the Node.js CommonJS module system. It assumes mime-db is installed as a dependency. The main variable 'db' exposes the JSON database, and querying 'db[\\'application/javascript\\']' returns metadata such as source, extensions, and compressibility for the 'application/javascript' MIME type.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-db/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar db = require('mime-db')\n\n// grab data on .js files\nvar data = db['application/javascript']\n```\n\n----------------------------------------\n\nTITLE: Applying DECA Theme Color Systems with applyTheme - TypeScript\nDESCRIPTION: This TypeScript function defines and applies color schemes for DECA clusters and persists them as CSS custom properties. It maps logical theme keys to color values and updates document styles, supporting both light and dark modes by toggling specific variables. Dependencies include an AppearanceSettings type/interface, and the function is expected to be called whenever the color scheme needs to change. Key parameters are the chosen color scheme, and the output is a fully updated theme across the app.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742708040241.txt#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport function applyTheme(appearance: AppearanceSettings): AppearanceSettings {\\n  const colorSystems = {\\n    business: {\\n      primary: '#F59E0B', // amber-500\\n      secondary: '#FCD34D', // amber-300\\n      accent: '#B45309', // amber-800\\n      light: '#FFFBEB',\\n      medium: '#FEF3C7',\\n      dark: '#D97706',\\n      contrast: '#1F2937',\\n      badge: '#F59E0B'\\n    },\\n    finance: {\\n      primary: '#10B981', // emerald-500\\n      secondary: '#6EE7B7', // emerald-300\\n      accent: '#047857', // emerald-800\\n      light: '#ECFDF5',\\n      medium: '#D1FAE5',\\n      dark: '#059669',\\n      contrast: '#1F2937',\\n      badge: '#10B981'\\n    },\\n    // ... (other themes: hospitality, marketing, entrepreneurship, admin)\\n    default: {\\n      primary: '#06B6D4', // cyan-500\\n      secondary: '#67E8F9', // cyan-300\\n      accent: '#0E7490', // cyan-800\\n      light: '#ECFEFF',\\n      medium: '#CFFAFE',\\n      dark: '#0891B2',\\n      contrast: '#1F2937',\\n      badge: '#06B6D4'\\n    }\\n  };\\n\\n  const colors = colorSystems[appearance.colorScheme as keyof typeof colorSystems] || colorSystems.default;\\n  \\n  Object.entries(colors).forEach(([key, value]) => {\\n    document.documentElement.style.setProperty(`--color-${key}`, value);\\n  });\\n  \\n  // For dark mode, override contrast if needed.\\n  if (isDarkMode) {\\n    document.documentElement.style.setProperty('--color-light', colors.dark);\\n    document.documentElement.style.setProperty('--color-contrast', '#ffffff');\\n  } else {\\n    document.documentElement.style.setProperty('--color-contrast', colors.contrast);\\n  }\\n  \\n  return appearance;\\n}\n```\n\n----------------------------------------\n\nTITLE: Output Format of diffStringsUnified()\nDESCRIPTION: Displays the string output format for `diffStringsUnified`. It shows common lines and lines with changes prefixed by `-` (Expected) or `+` (Received). Changed substrings within lines are typically highlighted with inverse foreground and background colors (e.g., white-on-green for expected, white-on-red for received, though not visually represented here).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\n+ Received\n\n  common\n- changed from\n+ changed to\n```\n\n----------------------------------------\n\nTITLE: Importing the fresh Module - JavaScript\nDESCRIPTION: Imports the 'fresh' library into a Node.js environment using require syntax. This step is required before using any API of the fresh module. Assumes Node.js is installed and the fresh package has been added to dependencies via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fresh/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar fresh = require('fresh')\n```\n\n----------------------------------------\n\nTITLE: Including source-map library in HTML\nDESCRIPTION: Shows how to include the pre-built `source-map` library directly in an HTML file using a `<script>` tag, typically for browser-based usage. The `defer` attribute ensures the script executes after the document is parsed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://raw.githubusercontent.com/mozilla/source-map/master/dist/source-map.min.js\" defer></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Importing Visual Stylesheets in React - CSS\nDESCRIPTION: This step describes the addition and update of CSS files (visual-styles.css, dark-mode-gradients.css, and index.css) in your React project. Import them in your primary entry file (such as App.tsx) to ensure the desired variables, color schemes, gradients, and layout adjustments are applied app-wide. This setup is essential for custom theming and dark mode support; ensure proper CSS order to avoid precedence issues.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_39\n\nLANGUAGE: css\nCODE:\n```\n/* visual-styles.css */\n/* Add core theme styles and variables here */\n\n/* dark-mode-gradients.css */\n/* Gradient backgrounds and dark mode adjustments */\n\n/* index.css */\n@import './visual-styles.css';\n@import './dark-mode-gradients.css';\n:root {\n  /* CSS variables, e.g.: */\n  --primary-color: #3b82f6;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Search Admin API Key via Azure CLI - Powershell\nDESCRIPTION: Fetches the admin (read-write) API key for an existing Azure AI Search service instance using Azure CLI. Required parameters include the resource group name and service name. Make sure to guard admin keys carefully; they grant full access to the search service. The command prints out the admin keys in the command line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_2\n\nLANGUAGE: Powershell\nCODE:\n```\naz search admin-key show --resource-group <your-resource-group-name> --service-name <your-resource-name>\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Binary Literals (JavaScript)\nDESCRIPTION: Illustrates the use of the `numbers: 'binary'` option to represent numeric values as JavaScript binary integer literals (prefixed with `0b`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\njsesc(42, {\n  'numbers': 'binary'\n});\n// → '0b101010'\n```\n\n----------------------------------------\n\nTITLE: Calling arg() Function with Specification and Options in JavaScript\nDESCRIPTION: Illustrates the signature for calling the arg function, optionally passing a specification object and options for advanced control. Requires 'arg' to be imported as a dependency. Parameters include the CLI specification and an optional options object; the function returns an object representing parsed arguments. The code does not include complete logic and serves as an API usage reference.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arg = require('arg');\n\n// `options` is an optional parameter\nconst args = arg(spec, options = {permissive: false, argv: process.argv.slice(2)});\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Support with NPM - Bash\nDESCRIPTION: Installs the source-map-support package using NPM, enabling its functionalities in your Node.js project. Requires Node.js and npm to be installed. This is the foundational step before any integration in your codebase.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install source-map-support\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-import-meta using yarn (Shell)\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-import-meta` package as a development dependency using the Yarn package manager. The `--dev` flag registers the package under `devDependencies` in your `package.json` file. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-import-meta/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-import-meta --dev\n```\n\n----------------------------------------\n\nTITLE: Accessing IPv4 Octet Array - JavaScript\nDESCRIPTION: Parses an IPv4 address and retrieves its 4-element octets array. Useful for byte-wise operations or custom serialization. Each octet is an integer from 0 to 255.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar addr = ipaddr.parse(\"192.168.1.1\");\naddr.octets // => [192, 168, 1, 1]\n```\n\n----------------------------------------\n\nTITLE: Customizing Alphabet for Russian Sorting (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure `String.naturalCompare` for Russian alphabetical order. Setting the `String.alphabet` property to the Cyrillic alphabet ensures that sorting follows Russian language conventions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/natural-compare/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Russian alphabet\nString.alphabet = \"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя\"\n[\"Ё\", \"А\", \"Б\"].sort(String.naturalCompare)\n// [\"А\", \"Б\", \"Ё\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Traverse with npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @babel/traverse package as a development dependency using the npm package manager. This step is necessary before utilizing the module in projects that manipulate JavaScript ASTs with Babel. Requires Node.js and npm installed on the system; outputs a package update.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/traverse\n```\n\n----------------------------------------\n\nTITLE: Installing body-parser Type Definitions using npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @types/body-parser package using npm. It adds TypeScript type definitions for the body-parser middleware, enabling type-checking in Node.js and Express.js projects. The --save flag ensures the typings are added as a dependency in the project's package.json. Expected input is the use of the npm CLI, and the output will be additional type definitions available to TypeScript; requires npm and a suitable node_modules structure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/body-parser/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/body-parser\n```\n\n----------------------------------------\n\nTITLE: Output Format of diffLinesUnified()\nDESCRIPTION: Presents the string output format for `diffLinesUnified` when comparing arrays of strings. It shows deleted (`-`), inserted (`+`), and common lines prefixed with annotation lines describing the indicators. This output is similar to `diff()` but operates directly on lines without serializing complex types.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\n+ Received\n\n- delete\n  common\n- changed from\n+ changed to\n+ insert\n```\n\n----------------------------------------\n\nTITLE: Using computeColumnSpans with SourceMapConsumer in JavaScript\nDESCRIPTION: Illustrates the usage and effect of the `computeColumnSpans` method on a `SourceMapConsumer` instance. Before calling the method, `allGeneratedPositionsFor` returns mappings without `lastColumn`. After calling it, the returned mappings include the `lastColumn` property, indicating the end column for each mapping span.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Before:\nconsumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1 },\n//   { line: 2,\n//     column: 10 },\n//   { line: 2,\n//     column: 20 } ]\n\nconsumer.computeColumnSpans();\n\n// After:\nconsumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1,\n//     lastColumn: 9 },\n//   { line: 2,\n//     column: 10,\n//     lastColumn: 19 },\n//   { line: 2,\n//     column: 20,\n//     lastColumn: Infinity } ]\n```\n\n----------------------------------------\n\nTITLE: Importing error-ex in a Node.js Project - JavaScript\nDESCRIPTION: This snippet shows how to include the error-ex module in a Node.js application. It requires that the 'error-ex' package be installed as a project dependency via npm. The output is the imported errorEx function that can be used to create custom error types. There are no additional parameters, and the snippet forms the basis for all further usage of the library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/error-ex/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar errorEx = require('error-ex');\n```\n\n----------------------------------------\n\nTITLE: Installing side-channel-weakmap via npm - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the 'side-channel-weakmap' package from npm using the npm install command. The installation ensures the package is added as a dependency in your project. The only dependency is Node.js with npm available; no parameters are needed, and it outputs to the local node_modules directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel-weakmap/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save side-channel-weakmap\n```\n\n----------------------------------------\n\nTITLE: Appending Data to BunserBuf in a Socket Handler - JavaScript\nDESCRIPTION: Demonstrates incremental decoding where incoming buffer segments (e.g., from a socket) are appended to a 'BunserBuf' instance for parsing. Ensures BSER data may be received in parts and assembled asynchronously.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bser/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbunser.append(buf);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Helper Module Imports with Yarn - Shell\nDESCRIPTION: This shell command installs the @babel/helper-module-imports package using the yarn package manager. This approach requires yarn to be installed on the system. After running this command, the module becomes available to the project and is recorded as a dependency; no additional configuration is needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-module-imports/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/helper-module-imports\n```\n\n----------------------------------------\n\nTITLE: Checking for and Using gopd Descriptor Support in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `gopd` package. It first requires the `gopd` module and the Node.js `assert` module for testing. It then checks if `gopd` is truthy (indicating that property descriptors are supported and the function is available). If supported, it asserts that `gopd` is a function and can be used like `Object.getOwnPropertyDescriptor`. If not supported, it asserts that `gopd` is falsy.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/gopd/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar gOPD = require('gopd');\nvar assert = require('assert');\n\nif (gOPD) {\n\tassert.equal(typeof gOPD, 'function', 'descriptors supported');\n\t// use gOPD like Object.getOwnPropertyDescriptor here\n} else {\n\tassert.ok(!gOPD, 'descriptors not supported');\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getter Exports Detection with Object.defineProperty (JavaScript)\nDESCRIPTION: Demonstrates how cjs-module-lexer detects named exports when using Object.defineProperty with value and getter forms that return identifiers or member expressions, including the detection of '__esModule'. Requires no external dependencies; meant as examples for proper usage patterns that the lexer can analyze.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS: a, b, c, d, __esModule\nObject.defineProperty(exports, 'a', {\n  enumerable: true,\n  get: function () {\n    return q.p;\n  }\n});\nObject.defineProperty(exports, 'b', {\n  enumerable: true,\n  get: function () {\n    return q['p'];\n  }\n});\nObject.defineProperty(exports, 'c', {\n  enumerable: true,\n  get () {\n    return b;\n  }\n});\nObject.defineProperty(exports, 'd', { value: 'd' });\nObject.defineProperty(exports, '__esModule', { value: true });\n```\n\n----------------------------------------\n\nTITLE: Chromium to Electron Major Version Mapping in Node.js\nDESCRIPTION: Utilizes the chromiumVersions property to get the major Electron version corresponding to a Chromium major version. Facilitates reverse-lookups when targeting Electron compatibility from a web technology stack. Requires an e2c instance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar versions = e2c.chromiumVersions;\nconsole.log(versions['54']);\n// returns \"1.4\"\n```\n\n----------------------------------------\n\nTITLE: Low-Level Segment Tracing with traceSegment (TypeScript)\nDESCRIPTION: Illustrates the use of the lower-level `traceSegment` function from `@jridgewell/trace-mapping`. Unlike `originalPositionFor`, this function takes a 0-based line number and returns the raw mapping segment array that matches the given generated line and column. The segment format is `[outputColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]`, where `line` and `sourceLine` are 0-based. This provides direct access to the underlying mapping data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { traceSegment } from '@jridgewell/trace-mapping';\n\n// line is 0-base.\nconst traced = traceSegment(tracer, /* line */ 0, /* column */ 5);\n\n// Segments are [outputColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n// Again, line is 0-base and so is sourceLine\nassert.deepEqual(traced, [5, 0, 41, 4, 0]);\n```\n\n----------------------------------------\n\nTITLE: Using a Placeholder for Empty Lines in jest-diff Output in JavaScript\nDESCRIPTION: Configures the emptyFirstOrLastLinePlaceholder in jest-diff's options object to use a special character (↵) for empty comparison lines. Ensures that leading or trailing empty lines are visible and distinguishable in the diff output. No external dependencies required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\\n  emptyFirstOrLastLinePlaceholder: '\\u21B5', // U+21B5\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing mime-types in Node.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the 'mime-types' module in JavaScript using Node.js. The imported object provides all mime-types related utility functions, such as lookup, extension, and charset. The statement should appear at the top of JavaScript files that need to utilize these utilities.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/mime-types/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar mime = require('mime-types')\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/compat-data using yarn (Shell)\nDESCRIPTION: This shell command shows how to install the `@babel/compat-data` package as a project dependency using the Yarn package manager. Yarn automatically saves the dependency to the `package.json` file by default when using `add`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/compat-data/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/compat-data\n```\n\n----------------------------------------\n\nTITLE: Importing the 'unpipe' Module in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `unpipe` module using the standard Node.js `require` function. This makes the `unpipe` function available for use within the script.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/unpipe/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar unpipe = require('unpipe')\n```\n\n----------------------------------------\n\nTITLE: Importing encodeurl module in Node.js (JavaScript)\nDESCRIPTION: Demonstrates how to import the 'encodeurl' function into a Node.js application using the `require` syntax. Assumes the 'encodeurl' package has been previously installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/encodeurl/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar encodeUrl = require('encodeurl')\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI SDK for Node.js (Shell)\nDESCRIPTION: This shell command uses npm to install the official OpenAI Node.js SDK package (`openai`) and adds it as a dependency to the backend project's `package.json`. This library is necessary for the backend application to make API calls to the Azure OpenAI service for tasks like generating text completions. Requires Node.js, npm, and an initialized `package.json` file in the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install openai\n```\n\n----------------------------------------\n\nTITLE: Flow Shorthand Import Type Syntax - Babylon - JavaScript\nDESCRIPTION: This snippet showcases both the old verbose and new shorthand ways of importing values and types using the Flow syntax within JavaScript. Babylon now supports the more concise approach shown in the second snippet, which groups values, types, and typeofs in a single import statement. Requires Babylon and Flow plugins enabled. Input is import statements in both expanded and shorthand styles, output is correct parsing of all imported references.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {someValue} from \"blah\";\nimport type {someType} from \"blah\";\nimport typeof {someOtherValue} from \"blah\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  someValue,\n  type someType,\n  typeof someOtherValue,\n} from \"blah\";\n```\n\n----------------------------------------\n\nTITLE: Explicitly Disabling ES6 Escaping (JavaScript)\nDESCRIPTION: Demonstrates explicitly setting `es6: false`. This produces the same output as the default behavior, using surrogate pairs for astral symbols, ensuring ES5 compatibility.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// To explicitly disable it:\njsesc('foo 𝌆 bar 💩 baz', {\n  'es6': false\n});\n// → 'foo \\\\uD834\\\\uDF06 bar \\\\uD83D\\\\uDCA9 baz'\n```\n\n----------------------------------------\n\nTITLE: Basic Demo: Original JavaScript Code\nDESCRIPTION: A simple JavaScript file (`original.js`) containing code that throws an error. This represents the original source code before any compilation or transpilation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('test'); // This is the original code\n```\n\n----------------------------------------\n\nTITLE: Requiring Regex for Textual Emoji Representation\nDESCRIPTION: This JavaScript code snippet shows how to require an alternative regular expression from the `emoji-regex` package specifically designed to match emoji in their textual representation. This is useful for matching symbols that are not standard `Emoji_Presentation` symbols or those not forced into emoji rendering by variation selectors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emoji-regex/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst emojiRegex = require('emoji-regex/text.js');\n```\n\n----------------------------------------\n\nTITLE: Installing 'unpipe' via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `unpipe` module and its dependencies into the local `node_modules` directory of the current project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/unpipe/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install unpipe\n```\n\n----------------------------------------\n\nTITLE: Installing Arg Package via Yarn or NPM in Console\nDESCRIPTION: Demonstrates how to add the 'arg' package to a project using either Yarn or NPM commands. No additional dependencies apart from Node.js and the chosen package manager are required. These are terminal commands; no inputs or outputs other than package installation and update of project dependencies are expected.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/arg/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ yarn add arg\n```\n\nLANGUAGE: console\nCODE:\n```\n$ npm install arg\n```\n\n----------------------------------------\n\nTITLE: Installing detect-newline via npm (Shell)\nDESCRIPTION: This command installs the 'detect-newline' Node.js package using the Node Package Manager (npm). Running this command in a terminal within a Node.js project directory will download and add the package to the project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/detect-newline/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install detect-newline\n```\n\n----------------------------------------\n\nTITLE: Installing strip-json-comments via npm\nDESCRIPTION: This shell command installs the `strip-json-comments` package using the Node Package Manager (npm). This makes the package available for use in a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-json-comments/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install strip-json-comments\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-numeric-separator with npm (Shell)\nDESCRIPTION: This command installs the `@babel/plugin-syntax-numeric-separator` package using the npm package manager. The `--save-dev` flag ensures the package is added to the `devDependencies` section of the `package.json` file, as it's typically needed during the development/build process. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-numeric-separator/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-numeric-separator\n```\n\n----------------------------------------\n\nTITLE: Installing media-typer via npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the 'media-typer' library using npm from the command line. It requires Node.js and npm to be installed. The command downloads and adds 'media-typer' to your project's dependencies, enabling its API in your JavaScript application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/media-typer/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install media-typer\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-numeric-separator with yarn (Shell)\nDESCRIPTION: This command installs the `@babel/plugin-syntax-numeric-separator` package using the yarn package manager. The `--dev` flag signifies that the package is a development dependency and adds it to the `devDependencies` in the `package.json` file. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-numeric-separator/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-numeric-separator --dev\n```\n\n----------------------------------------\n\nTITLE: Installing side-channel-map via NPM in Shell\nDESCRIPTION: This shell command installs the side-channel-map package as a project dependency, enabling access to its side-channel data storage API in JavaScript environments. It uses npm, the Node.js package manager, and saves the package under dependencies in package.json. No parameters are required other than a working npm and Node.js installation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel-map/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save side-channel-map\n```\n\n----------------------------------------\n\nTITLE: Using app.delete() instead of Deprecated app.del() in Express.js\nDESCRIPTION: Highlights the deprecation of the `app.del()` method for defining DELETE route handlers in Express.js. The recommended replacement is the `app.delete()` method, which provides the same functionality with a more explicit name.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// deprecated\napp.del()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// use instead\napp.delete()\n```\n\n----------------------------------------\n\nTITLE: Starting the Express.js Server via npm Script in Console\nDESCRIPTION: This command starts the application using the 'start' script defined in the project's package.json. It requires a valid package.json with a 'start' script. No parameters are necessary, and output is generally server and application logs unless errors occur.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for etag Performance - Bash\nDESCRIPTION: This bash command runs the built-in benchmark suite for measuring the performance of the 'etag' module under various body sizes, using npm's run-script. It is useful for developers who want to assess the efficiency of ETag generation for different types of data. The detailed benchmark results are printed to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/etag/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run-script bench\n\n> etag@1.8.1 bench nodejs-etag\n> node benchmark/index.js\n\n  http_parser@2.7.0\n  node@6.11.1\n  v8@5.1.281.103\n  uv@1.11.0\n  zlib@1.2.11\n  ares@1.10.1-DEV\n  icu@58.2\n  modules@48\n  openssl@1.0.2k\n\n> node benchmark/body0-100b.js\n\n  100B body\n\n  4 tests completed.\n\n  buffer - strong x 258,647 ops/sec ±1.07% (180 runs sampled)\n  buffer - weak   x 263,812 ops/sec ±0.61% (184 runs sampled)\n  string - strong x 259,955 ops/sec ±1.19% (185 runs sampled)\n  string - weak   x 264,356 ops/sec ±1.09% (184 runs sampled)\n\n> node benchmark/body1-1kb.js\n\n  1KB body\n\n  4 tests completed.\n\n  buffer - strong x 189,018 ops/sec ±1.12% (182 runs sampled)\n  buffer - weak   x 190,586 ops/sec ±0.81% (186 runs sampled)\n  string - strong x 144,272 ops/sec ±0.96% (188 runs sampled)\n  string - weak   x 145,380 ops/sec ±1.43% (187 runs sampled)\n\n> node benchmark/body2-5kb.js\n\n  5KB body\n\n  4 tests completed.\n\n  buffer - strong x 92,435 ops/sec ±0.42% (188 runs sampled)\n  buffer - weak   x 92,373 ops/sec ±0.58% (189 runs sampled)\n  string - strong x 48,850 ops/sec ±0.56% (186 runs sampled)\n  string - weak   x 49,380 ops/sec ±0.56% (190 runs sampled)\n\n> node benchmark/body3-10kb.js\n\n  10KB body\n\n  4 tests completed.\n\n  buffer - strong x 55,989 ops/sec ±0.93% (188 runs sampled)\n  buffer - weak   x 56,148 ops/sec ±0.55% (190 runs sampled)\n  string - strong x 27,345 ops/sec ±0.43% (188 runs sampled)\n  string - weak   x 27,496 ops/sec ±0.45% (190 runs sampled)\n\n> node benchmark/body4-100kb.js\n\n  100KB body\n\n  4 tests completed.\n\n  buffer - strong x 7,083 ops/sec ±0.22% (190 runs sampled)\n  buffer - weak   x 7,115 ops/sec ±0.26% (191 runs sampled)\n  string - strong x 3,068 ops/sec ±0.34% (190 runs sampled)\n  string - weak   x 3,096 ops/sec ±0.35% (190 runs sampled)\n\n> node benchmark/stats.js\n\n  stat\n\n  4 tests completed.\n\n  real - strong x 871,642 ops/sec ±0.34% (189 runs sampled)\n  real - weak   x 867,613 ops/sec ±0.39% (190 runs sampled)\n  fake - strong x 401,051 ops/sec ±0.40% (189 runs sampled)\n  fake - weak   x 400,100 ops/sec ±0.47% (188 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Reload Timeout for Error Page - JavaScript\nDESCRIPTION: This JavaScript snippet, included within a <script> tag, automatically reloads the error response page after 60 seconds in an attempt to reconnect if the app becomes available. No external libraries or frameworks are needed. There are no parameters or configurable options; it simply waits 60,000 milliseconds before calling window.location.reload().\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--div-data-replit-metadata-client-src-components-ui-toaster-tsx-22-14-data-component-name-ToastDes-1743475801375.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar reload_timeout = setTimeout(function () {\\n      window.location.reload();\\n    }, 60000);\n```\n\n----------------------------------------\n\nTITLE: Importing Blob and File from fetch-blob (JavaScript)\nDESCRIPTION: Shows various methods to import the `Blob` and `File` classes from the `fetch-blob` package in an ES Module (ESM) environment. Includes default import, named imports, and dynamic import syntax. Assumes an ESM project setup.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fetch-blob/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Ways to import\n// (PS it's dependency free ESM package so regular http-import from CDN works too)\nimport Blob from 'fetch-blob'\nimport File from 'fetch-blob/file.js'\n\nimport {Blob} from 'fetch-blob'\nimport {File} from 'fetch-blob/file.js'\n\nconst {Blob} = await import('fetch-blob')\n```\n\n----------------------------------------\n\nTITLE: Extending @tsconfig/node12 in tsconfig.json (JSON)\nDESCRIPTION: Shows how to extend the base configuration provided by `@tsconfig/node12` within your project's `tsconfig.json` file using the `extends` property. This incorporates the recommended settings for Node 12 into your project's TypeScript configuration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@tsconfig/node12/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extends\": \"@tsconfig/node12/tsconfig.json\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Decimal Literals (JavaScript)\nDESCRIPTION: Illustrates the use of the `numbers: 'decimal'` option (the default) to represent numeric values as standard JavaScript decimal integer literals.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njsesc(42, {\n  'numbers': 'decimal'\n});\n// → '42'\n```\n\n----------------------------------------\n\nTITLE: Using get-proto to retrieve object prototypes (JavaScript)\nDESCRIPTION: Demonstrates the usage of the `get-proto` function to retrieve the prototype of JavaScript objects. It imports the `get-proto` function and the built-in `assert` module. Examples show getting the prototype of an object (`b`) whose prototype is another object (`a`), getting the prototype of a standard object (`a`), and getting the prototype of an object explicitly set to `null`. Requires the `get-proto` package installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-proto/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst getProto = require('get-proto');\n\nconst a = { a: 1, b: 2, [Symbol.toStringTag]: 'foo' };\nconst b = { c: 3, __proto__: a };\n\nassert.equal(getProto(b), a);\nassert.equal(getProto(a), Object.prototype);\nassert.equal(getProto({ __proto__: null }), null);\n```\n\n----------------------------------------\n\nTITLE: Named Exports Detection Example (JavaScript)\nDESCRIPTION: Illustrates how cjs-module-lexer detects named exports via property assignments on the 'exports' object in different syntactic forms, without scope analysis. The code defines and immediately invokes a function with the 'exports' object, assigning values via both dot notation and bracket notation, demonstrating what export names are detected in this canonical scenario. Dependencies: none specific; intended for source analysis by cjs-module-lexer.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS EXPORTS: a, b\n(function (exports) {\n  exports.a = 'a'; \n  exports['b'] = 'b';\n})(exports);\n```\n\n----------------------------------------\n\nTITLE: Showing CLI Help Output with Argparse CLI - Shell\nDESCRIPTION: This command displays the help usage information for a Node.js script utilizing 'argparse'. It shows the auto-generated usage, argument descriptions, and available options. Expected input is running the script with the '-h' flag, and output is the printed help message to the console. This requires an executable JavaScript CLI using 'argparse', named 'test.js' in this context.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/argparse/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./test.js -h\\nusage: example.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ]\\n\\nArgparse example\\n\\nOptional arguments:\\n  -h, --help         Show this help message and exit.\\n  -v, --version      Show program's version number and exit.\\n  -f FOO, --foo FOO  foo bar\\n  -b BAR, --bar BAR  bar foo\\n  --baz BAZ          baz bar\n```\n\n----------------------------------------\n\nTITLE: Configuring @std/esm in package.json for MJS Mocha Tests\nDESCRIPTION: This JSON snippet shows the required configuration to add to the project's `package.json` file as mentioned in the v0.16.1 release notes. It configures the `@std/esm` package to use the CommonJS (`cjs`) module format for ECMAScript modules (`esm`), which was necessary at the time to enable Mocha tests on `.mjs` files when the build process was set up to emit them.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@bcoe/v8-coverage/CHANGELOG.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"@std/esm\": {\"esm\": \"cjs\"}\n```\n\n----------------------------------------\n\nTITLE: Installing jsdiff via npm\nDESCRIPTION: Command to install the `jsdiff` library (published under the package name `diff`) using the Node Package Manager (npm) and save it as a dependency in your project's `package.json` file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install diff --save\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/template with npm (Shell)\nDESCRIPTION: This shell command uses npm (Node Package Manager) to install the @babel/template package. The `--save-dev` flag specifies that the package should be added to the `devDependencies` section of the project's `package.json` file, as it's typically needed during development rather than runtime.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/template/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/template\n```\n\n----------------------------------------\n\nTITLE: Default Options for 'resolve.sync' in Node.js\nDESCRIPTION: Specifies the default configuration object used by the `resolve.sync` function when no options object (`opts`) is provided. It defines default values for properties like `paths`, `basedir`, `extensions`, file system operations (`readFileSync`, `isFile`, `isDirectory`, `realpathSync`, `readPackageSync`), `moduleDirectory`, and `preserveSymlinks`. These defaults control how module paths are resolved synchronously.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve/readme.markdown#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: ['.js'],\n    includeCoreModules: true,\n    readFileSync: fs.readFileSync,\n    isFile: function isFile(file) {\n        try {\n            var stat = fs.statSync(file);\n        } catch (e) {\n            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n            throw e;\n        }\n        return stat.isFile() || stat.isFIFO();\n    },\n    isDirectory: function isDirectory(dir) {\n        try {\n            var stat = fs.statSync(dir);\n        } catch (e) {\n            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n            throw e;\n        }\n        return stat.isDirectory();\n    },\n    realpathSync: function realpathSync(file) {\n        try {\n            var realpath = typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;\n            return realpath(file);\n        } catch (realPathErr) {\n            if (realPathErr.code !== 'ENOENT') {\n                throw realPathErr;\n            }\n        }\n        return file;\n    },\n    readPackageSync: function defaultReadPackageSync(readFileSync, pkgfile) {\n        var body = readFileSync(pkgfile);\n        try {\n            var pkg = JSON.parse(body);\n            return pkg;\n        } catch (jsonErr) {}\n    },\n    moduleDirectory: 'node_modules',\n    preserveSymlinks: true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Function Predicate in Flow Syntax - JavaScript\nDESCRIPTION: Illustrates declaration of a function predicate in Flow type annotations using Babylon's parser. The snippet shows the 'declare function' statement with a type predicate ('%checks') that checks runtime types. Babylon must support the function predicate syntax (Flow 0.33+); the parser should be configured to allow Flow syntax. Input is Flow-annotated JavaScript; expected output is an AST recognizing the predicate.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndeclare function is_number(x: mixed): boolean %checks(typeof x === \"number\");\n```\n\n----------------------------------------\n\nTITLE: YAML Mapping with Anchors and Unsupported Key Properties - YAML\nDESCRIPTION: This YAML document uses anchors and complex mapping keys to illustrate a limitation in JS-YAML, where reading properties on implicit block mapping keys is not yet supported. The document demonstrates multiple use cases with anchors pointing to the same key, resulting in duplicate key issues. Aimed at highlighting parser constraints—will not properly load with JS-YAML. Needs only JS-YAML for reproduction.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\n&anchor foo:\\n  foo: bar\\n  *anchor: duplicate key\\n  baz: bat\\n  *anchor: duplicate key\n```\n\n----------------------------------------\n\nTITLE: Stringify with Value-Based Key Sorting Using fast-json-stable-stringify in Node.js\nDESCRIPTION: Demonstrates customizing key sort order in JSON stringification based on the values of object properties. The comparator function, provided as the second argument to fast-json-stable-stringify, sorts keys in reverse order by their associated values. The snippet highlights dependency on the module and assumes objects have properties whose values are comparable with '<' operator.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fast-json-stable-stringify/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar stringify = require('fast-json-stable-stringify');\n\nvar obj = { d: 6, c: 5, b: [{z:3,y:2,x:1},9], a: 10 };\nvar s = stringify(obj, function (a, b) {\n    return a.value < b.value ? 1 : -1;\n});\nconsole.log(s);\n```\n\n----------------------------------------\n\nTITLE: Importing the Value Utility Module in TypeBox (TypeScript)\nDESCRIPTION: This snippet shows the import statement required to use the optional `Value` utility module provided by TypeBox. This module contains functions for operating on JavaScript values based on TypeBox schemas.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Value } from '@sinclair/typebox/value'\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Hex Using Buffer - JavaScript\nDESCRIPTION: Implements a function that converts a UTF-8 string to its hexadecimal representation using the Buffer constructor. Requires Node.js and does not validate input types, which can lead to severe vulnerabilities if non-string arguments are provided. Takes a string input and returns a hex string output; improper usage with numbers leads to uninitialized memory disclosure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/safe-buffer/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Convert UTF-8 strings to hex\\nfunction toHex (str) {\\n  return new Buffer(str).toString('hex')\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Global Installation of Express Application Generator via npm in Console\nDESCRIPTION: This command globally installs the Express application generator (express-generator) for quickly scaffolding Express.js applications. The required dependency is npm, and it assumes you have sufficient permissions for global installations. The '@4' version specifier ensures compatibility with Express 4.x major version. After installation, the 'express' CLI tool is available system-wide for creating new projects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ npm install -g express-generator@4\n```\n\n----------------------------------------\n\nTITLE: Building React Application for Deployment (Shell)\nDESCRIPTION: This command executes the `build` script defined in the React project's `package.json` file (typically running `react-scripts build` for Create React App). It compiles and optimizes the React application into static HTML, CSS, and JavaScript assets suitable for production deployment. This command is usually run as part of a CI/CD pipeline.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing p-locate via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `p-locate` library and its dependencies into the current project. It is the standard way to add this package to a Node.js environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-locate/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install p-locate\n```\n\n----------------------------------------\n\nTITLE: Flow: Class Method with Type Parameter in JavaScript\nDESCRIPTION: Demonstrates a Flow-typed class declaration and static method that use type parameters in method definitions. Requires Flow support. Key parameters are type parameterized method signatures; outputs are checked against Flow's type system.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\ndeclare class X {\\n  foobar<T>(): void;\\n  static foobar<T>(): void;\\n}\n```\n\n----------------------------------------\n\nTITLE: Compact Output for Objects (Default) (JavaScript)\nDESCRIPTION: Demonstrates the default behavior (`compact: true`) for object stringification. The output is generated without extra whitespace or newlines for maximum compactness.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\njsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {\n  'compact': true // this is the default\n});\n// → '{\\'Ich \\u2665 B\\xFCcher\\':\\'foo \\uD834\\uDF06 bar\\'}'\n```\n\n----------------------------------------\n\nTITLE: Appending Header String with Vary.append - Node.js - JavaScript\nDESCRIPTION: Demonstrates use of 'vary.append' to return a new header string that appends 'Origin' to the comma-separated Vary header fields 'Accept, User-Agent'. This function can be used in scenarios where header strings need to be constructed or modified outside of an actual response object. Returns the updated Vary header string if field was not present, otherwise returns the original string.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vary/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Get header string appending \"Origin\" to \"Accept, User-Agent\"\nvary.append('Accept, User-Agent', 'Origin')\n```\n\n----------------------------------------\n\nTITLE: Unified Diff Output With Custom Object Key Sorting\nDESCRIPTION: Gives a unified diff result where object keys appear in reverse order, as determined by the custom compareKeys function passed in options. Useful for matching domain-specific data ordering requirements in diffs.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\\n+ Received\\n\\n  Object {\\n    \"a\": \"a\",\\n-   \"b\": \"b1\",\\n+   \"b\": \"b2\",\\n    \"c\": \"c\",\\n  }\n```\n\n----------------------------------------\n\nTITLE: Querying All Type OIDs in PostgreSQL via Bash\nDESCRIPTION: A bash snippet demonstrating how to use the psql PostgreSQL CLI to list all type names, their OIDs, and array types from the pg_type catalog. Requires psql installed and access to the target database. Returns a tabular result of typname, oid, and typarray, sorted by oid.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-types/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ psql -c \"select typname, oid, typarray from pg_type order by oid\"\n```\n\n----------------------------------------\n\nTITLE: Installing jest-circus using npm\nDESCRIPTION: This command installs the `jest-circus` package into your project's development dependencies using the npm package manager. As of Jest 27, `jest-circus` is the default runner and explicit installation might not be necessary unless using older Jest versions or specific configurations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-circus/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-circus\n```\n\n----------------------------------------\n\nTITLE: Defining Block Blast Game Block Data Structure in TypeScript\nDESCRIPTION: This TypeScript interface specifies the structure for a single block object within the Block Blast mini-game, available during the Break Timer. Each block has a unique `id`, a `color`, state flags `selected` and `matched` for game logic, and an optional `powerup` property indicating if it's a special block.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Block {\n  id: string;\n  color: string;\n  selected: boolean;\n  matched: boolean;\n  powerup: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-current-node-syntax with npm - Shell\nDESCRIPTION: This command installs the 'babel-preset-current-node-syntax' package as a development dependency using npm. Utilizing '--save-dev', the preset will be added to the project's devDependencies. Requires npm to be installed, and outputs the status of the package installation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-preset-current-node-syntax/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev babel-preset-current-node-syntax\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Map Location in Compiled Files\nDESCRIPTION: Example comment syntax to include in a compiled JavaScript file to indicate the location of its corresponding source map file. The path can be absolute or relative to the compiled file. This comment is typically added automatically by transpilers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//# sourceMappingURL=path/to/source.map\n```\n\n----------------------------------------\n\nTITLE: Non-Detected Getter Variations (JavaScript)\nDESCRIPTION: Provides examples of Object.defineProperty usage that cjs-module-lexer does not detect as exports. Demonstrates how non-standard or side-effecting getter forms, non-enumerable, or configurable properties, as well as arrow functions, are outside detection patterns. No dependencies required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS: NO EXPORTS\nObject.defineProperty(exports, 'a', {\n  get () {\n    return 'nope';\n  }\n});\n\nif (false) {\n  Object.defineProperty(module.exports, 'a', {\n    get () {\n      return dynamic();\n    }\n  })\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DETECTS: NO EXPORTS\nObject.defineProperty(exports, 'a', {\n  enumerable: false,\n  get () {\n    return p;\n  }\n});\nObject.defineProperty(exports, 'b', {\n  configurable: true,\n  get () {\n    return p;\n  }\n});\nObject.defineProperty(exports, 'c', {\n  get: () => p\n});\nObject.defineProperty(exports, 'd', {\n  enumerable: true,\n  get: function () {\n    return dynamic();\n  }\n});\nObject.defineProperty(exports, 'e', {\n  enumerable: true,\n  get () {\n    return 'str';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing cjs-module-lexer via npm (Shell)\nDESCRIPTION: Installs the cjs-module-lexer package via npm to be used as a dependency in a Node.js project. Requires that npm is installed and initialized in your project directory. No parameters are necessary; running this command will add the package to your project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install cjs-module-lexer\n```\n\n----------------------------------------\n\nTITLE: Requiring electron-to-chromium Package in Node.js\nDESCRIPTION: Demonstrates how to include the electron-to-chromium library using require in a Node.js environment for version mapping utilities. Depends on the npm electron-to-chromium package being installed. The result is a module object providing properties and functions for Electron/Chromium version relations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar e2c = require('electron-to-chromium');\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-nullish-coalescing-operator with npm - Shell\nDESCRIPTION: Installs the @babel/plugin-syntax-nullish-coalescing-operator plugin as a development dependency using npm. The command should be run in the root directory of your JavaScript project. It adds the necessary Babel plugin to enable parsing of the nullish-coalescing operator. Requires npm to be installed and a package.json file to be present.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-nullish-coalescing-operator\n```\n\n----------------------------------------\n\nTITLE: Importing the brace-expansion Module in JavaScript\nDESCRIPTION: Shows the standard way to import the `brace-expansion` library in a Node.js environment using `require`. This makes the `expand` function available for use within the script. Assumes the `brace-expansion` package has been installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/brace-expansion/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar expand = require('brace-expansion');\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin with NPM - Shell\nDESCRIPTION: This shell command installs the @babel/plugin-syntax-import-attributes plugin as a development dependency using npm. It should be run in the root directory of a JavaScript project. The command downloads the latest version and updates the project's package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-import-attributes/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-import-attributes\n```\n\n----------------------------------------\n\nTITLE: Declaring remapping Function and LoaderContext Types (@ampproject/remapping API, TypeScript)\nDESCRIPTION: Defines the TypeScript signature for the remapping API, including the core remapping function used to produce new source maps from a chain of transformations, and the LoaderContext type that the loader callback receives. This describes expected arguments, options, and context fields used in all subsequent examples. TypeScript types are for compile-time checking and documentation, not runtime execution. No dependencies except TypeScript.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@ampproject/remapping/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction remapping(\n  map: SourceMap | SourceMap[],\n  loader: (file: string, ctx: LoaderContext) => (SourceMap | null | undefined),\n  options?: { excludeContent: boolean, decodedMappings: boolean }\n): SourceMap;\n\n// LoaderContext gives the loader the importing sourcemap, tree depth, the ability to override the\n// \"source\" location (where child sources are resolved relative to, or the location of original\n// source), and the ability to override the \"content\" of an original source for inclusion in the\n// output sourcemap.\ntype LoaderContext = {\n readonly importer: string;\n readonly depth: number;\n source: string;\n content: string | null | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated res.json(obj, status) Signature in Express.js\nDESCRIPTION: Illustrates the deprecated signature `res.json(obj, status)` for sending a JSON response with a specific status code. This order (object first, status second) was deprecated in Express 4.2.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nres.json(obj, status)\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration - Text\nDESCRIPTION: Shows an example of environment variable assignments for configuring database connection, Azure OpenAI service, session, and optional Stripe payment keys. These are required in the .env file to ensure the application can connect to its dependencies. Replace placeholder values with your actual credentials. The file should be present at the project root.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Database\nDATABASE_URL=postgresql://username:password@localhost:5432/decade_db\n\n# Azure OpenAI\nAZURE_OPENAI_KEY=your_azure_openai_key\nAZURE_OPENAI_ENDPOINT=https://your-instance.openai.azure.com/\nAZURE_OPENAI_DEPLOYMENT=gpt-4o-mini\n\n# Session Configuration\nSESSION_SECRET=your_secure_session_secret\n\n# Stripe Configuration (optional)\nSTRIPE_SECRET_KEY=your_stripe_secret_key\nSTRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key\n```\n\n----------------------------------------\n\nTITLE: Installing is-fullwidth-code-point via npm\nDESCRIPTION: This shell command installs the 'is-fullwidth-code-point' Node.js package from the npm registry into the current project's dependencies. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-fullwidth-code-point/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install is-fullwidth-code-point\n```\n\n----------------------------------------\n\nTITLE: CoffeeScript Demo: Original CoffeeScript Code\nDESCRIPTION: A CoffeeScript file (`demo.coffee`) that requires source map support and defines nested functions, throwing an error in the inner function. This represents the original source code for the CoffeeScript demo.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_21\n\nLANGUAGE: coffeescript\nCODE:\n```\nrequire('@cspotcode/source-map-support').install()\nfoo = ->\n  bar = -> throw new Error 'this is a demo'\n  bar()\nfoo()\n```\n\n----------------------------------------\n\nTITLE: Example API Request for Security Testing (URL Manipulation)\nDESCRIPTION: Shows an example API endpoint URL pattern used to illustrate a potential security vulnerability (URL manipulation during penetration testing). The text advises testing if accessing another user's profile data is possible by manipulating the 'userId' query parameter. Such requests should be disallowed or ignored by backend logic that verifies the authenticated user's identity (from JWT token) against the requested resource ID.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n/api/getUserProfile?userId=someoneelse\n```\n\n----------------------------------------\n\nTITLE: Defining a Pretty-Format Plugin using the `print` Interface for Functions (JavaScript)\nDESCRIPTION: This snippet defines a `pretty-format` plugin using the older `print` interface to customize the representation of functions. The `test` function checks if a value is a function. The `print` function returns a custom string format `[Function functionName argumentCount]`, extracting the name and argument length (`val.length`) from the function.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Async Generator Plugin with yarn - Shell\nDESCRIPTION: Provides the command to add the @babel/plugin-syntax-async-generators as a development dependency using the yarn package manager. Requires that yarn is already installed in the development environment. This sets up the Babel plugin to support parsing async generator functions in the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-async-generators/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-async-generators --dev\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-transform-react-jsx-self with npm (Shell)\nDESCRIPTION: This shell command uses npm (Node Package Manager) to install the `@babel/plugin-transform-react-jsx-self` package. The `--save-dev` flag adds the package to the `devDependencies` in the `package.json` file, signifying it's needed for the development environment. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-transform-react-jsx-self/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-jsx-self\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Syntax Top-Level Await with npm - Shell\nDESCRIPTION: This snippet provides the npm command to install @babel/plugin-syntax-top-level-await as a development dependency. Executing this command will add the plugin to your project's devDependencies, allowing Babel to parse modules containing top-level await keywords. No arguments besides the package name are required; the --save-dev flag ensures the dependency is scoped for development use only. Input: runs in terminal; Output: updates package.json and installs the plugin.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-top-level-await/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-top-level-await\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-bigint with npm (Shell)\nDESCRIPTION: Installs the `@babel/plugin-syntax-bigint` package as a development dependency using the npm package manager. This command requires Node.js and npm to be installed. The `--save-dev` flag adds the package to the `devDependencies` in the project's `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-bigint/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-bigint\n```\n\n----------------------------------------\n\nTITLE: Installing @azure/core-auth using npm (Shell)\nDESCRIPTION: Installs the @azure/core-auth package using the Node Package Manager (npm). This library provides core interfaces and helper methods for authentication within the Azure SDK for JavaScript.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-auth/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @azure/core-auth\n```\n\n----------------------------------------\n\nTITLE: Installing Framer Motion using npm\nDESCRIPTION: This command installs the Framer Motion library using npm. Framer Motion is a popular animation library for React, used here to add animations and microinteractions to enhance the user experience of the DecA(I)de application.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742698582580.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install framer-motion\n```\n\n----------------------------------------\n\nTITLE: Reading BSER from a Network Socket Using BunserBuf - JavaScript\nDESCRIPTION: Shows a complete example of asynchronously reading BSER data from a Unix socket connection using 'bser.BunserBuf'. Upon data arrival, the buffer is appended for decoding. Dependencies include the 'bser' and 'net' modules. The example illustrates handling the 'value' event for processed data.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bser/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar bunser = new bser.BunserBuf();\n\nbunser.on('value', function(obj) {\n  console.log('data from socket', obj);\n});\n\nvar socket = net.connect('/socket');\n\nsocket.on('data', function(buf) {\n  bunser.append(buf);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Memphis Design Style CSS\nDESCRIPTION: Defines CSS rules in `visual-styles.css` to implement a 'Memphis' visual style. It includes rules for hiding/showing decorative elements (`.decorator`) based on a parent `.memphis-style.enabled` class, defines background patterns (`.memphis-pattern-1`, `.memphis-pattern-2`) using CSS gradients and variables, and styles for absolute-positioned decorators (`.decorator-1`, `.decorator-2`, etc.) associated with components like cards or buttons.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Memphis design: geometric shapes, patterns, bold backgrounds */\n.memphis-style .decorator {\n  display: none;\n}\n.memphis-style.enabled .decorator {\n  display: block;\n}\n\n.memphis-pattern-1 {\n  background-image: radial-gradient(circle at 2px 2px, var(--color-secondary) 2px, transparent 0);\n  background-size: 20px 20px;\n}\n.memphis-pattern-2 {\n  background-image: linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary)),\n                    linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary));\n  background-size: 20px 20px;\n  background-position: 0 0, 10px 10px;\n  opacity: 0.1;\n}\n/* More pattern classes as needed... */\n\n.memphis-style.enabled .card,\n.memphis-style.enabled .button,\n.memphis-style.enabled .badge {\n  position: relative;\n  overflow: visible;\n}\n.memphis-style.enabled .decorator-1 {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: var(--color-secondary);\n  position: absolute;\n  top: -10px;\n  right: -10px;\n}\n.memphis-style.enabled .decorator-2 {\n  width: 15px;\n  height: 15px;\n  background-color: var(--color-accent);\n  transform: rotate(45deg);\n  position: absolute;\n  bottom: -7px;\n  left: 20px;\n}\n.memphis-style.enabled .decorator-3 {\n  width: 30px;\n  height: 5px;\n  background-color: var(--color-primary);\n  position: absolute;\n  bottom: -10px;\n  right: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theming Controller and UI State Fixes - TypeScript (theme-controller.ts)\nDESCRIPTION: This snippet involves updating the theme-controller.ts module, merging fixes for Memphis (presumed UI state), and updating settings to support toggling between light/dark modes, including Memphis style toggling. Intended for inclusion in a React project, the controller is imported where theme changes are managed and exposes toggle logic. Ensure all theme dependencies are updated and connected to UI toggles.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// theme-controller.ts\nexport function setTheme(theme: 'light' | 'dark' | 'memphis') {\n  document.documentElement.dataset.theme = theme;\n}\n\nexport function toggleMemphis(enabled: boolean) {\n  document.body.classList.toggle('memphis-enabled', enabled);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server - Node.js/npm (bash)\nDESCRIPTION: This npm script starts the development server for the DecA(I)de platform, launching both frontend and backend services. Requires prior installation of dependencies and configuration. After execution, the application becomes accessible via specified frontend and backend URLs on localhost.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Octet String Representations from Int64 - JavaScript\nDESCRIPTION: Demonstrates extracting octet string representations from Int64 objects using the toOctetString method, verifying that the internal byte structure accurately represents the original input, even when value conversion fails. Inputs are Int64 instances, and outputs are hexadecimal octet strings. Requires node-int64.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/node-int64/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get an octet string representation.  (Yay, y is what we put in!)\\n> x.toOctetString()\\n'0000000123456789'\\n> y.toOctetString()\\n'123456789abcdef0'\n```\n\n----------------------------------------\n\nTITLE: Illustrating RegExp Performance Issue in V8\nDESCRIPTION: This JavaScript snippet demonstrates a V8 performance issue where modifying a RegExp instance or its prototype after creation can prevent fast path execution, causing slowdowns. This issue motivated the breaking changes introduced in version 3.0.0 of the js-tokens library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nvar re = /./g;\nre.exec('');  // Fast path.\nre.new_property = 'slow';\n```\n```\n\n----------------------------------------\n\nTITLE: Using shebang-command to Extract Commands (JavaScript)\nDESCRIPTION: Demonstrates importing and using the 'shebang-command' module in JavaScript. The function takes a string containing a shebang line as input and returns the extracted command name (e.g., 'node', 'bash'). Requires Node.js and the 'shebang-command' package to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/shebang-command/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst shebangCommand = require('shebang-command');\n\nshebangCommand('#!/usr/bin/env node');\n//=> 'node'\n\nshebangCommand('#!/bin/bash');\n//=> 'bash'\n```\n\n----------------------------------------\n\nTITLE: Basic Demo: Source Map File Content\nDESCRIPTION: Example content of a source map file (`compiled.js.map`) in JSON format. It contains metadata linking the compiled code (`compiled.js`) back to the original source file (`original.js`) and specifies mappings between them.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/README.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 3,\n  \"file\": \"compiled.js\",\n  \"sources\": [\"original.js\"],\n  \"names\": [],\n  \"mappings\": \";;AAAA,MAAM,IAAI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Example Express.js Applications in Console\nDESCRIPTION: This command runs a specific example Express.js server (e.g., content negotiation) from the examples directory of the cloned repository using Node.js. It requires you to have already cloned the repo and installed dependencies. The parameter is the path to the Node.js example script.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ node examples/content-negotiation\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding the Mascot using useMicroInteractions Hook in JSX\nDESCRIPTION: This JSX code example demonstrates using the `showMascot` and `hideMascot` functions obtained via the `useMicroInteractions` hook within a React component. It shows how to display the mascot with a specific help message and position it at the 'bottom-right', and provides a function `dismissMascot` to hide it.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/docs/MICRO_INTERACTIONS.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst { showMascot, hideMascot } = useMicroInteractions();\n\n// Show contextual guidance\nconst showHelpTip = () => {\n  showMascot(\"Try focusing on these performance indicators before your next practice.\", \"bottom-right\");\n};\n\n// Hide the mascot\nconst dismissMascot = () => {\n  hideMascot();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for DecA(I)de Integration (Text)\nDESCRIPTION: Specifies the required environment variables in a `.env` file format for configuring the FastAPI application and its connection to DecA(I)de. Includes DecA(I)de API base URL and secret, FastAPI server host/port, debug flag, FastAPI secret key, and optional Azure OpenAI credentials if direct access is needed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/FASTAPI_INTEGRATION_GUIDE.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# DecA(I)de API Configuration\nDECADE_API_BASE_URL=https://your-decade-instance.com\nDECADE_API_SECRET=your_shared_secret_for_service_authentication\n\n# Your FastAPI Configuration\nAPI_HOST=0.0.0.0\nAPI_PORT=8000\nDEBUG=true\nSECRET_KEY=your_fastapi_secret_key\n\n# Optional: Azure OpenAI direct access\nAZURE_OPENAI_KEY=your_azure_openai_key\nAZURE_OPENAI_ENDPOINT=your_azure_openai_endpoint\nAZURE_OPENAI_DEPLOYMENT=your_deployment_name\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ES2016 Strict Mode Parameter List Error (JavaScript)\nDESCRIPTION: Illustrates a scenario that triggers an ES2016 spec compliance error. According to the specification, if a function body contains 'use strict', its parameter list must be 'simple' (no destructuring, default values, or rest parameters). This code snippet shows a function that violates this rule by using default parameters (`= []`) with destructuring `[ option1, option2 ]` inside a strict mode function, resulting in a SyntaxError.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_44\n\nLANGUAGE: js\nCODE:\n```\n// this errors because it uses destructuring and default parameters\n// in a function with a \"use strict\" directive\nfunction a([ option1, option2 ] = []) {\n  \"use strict\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing serve-static using npm - Shell\nDESCRIPTION: This command installs the 'serve-static' package from the npm registry into the current Node.js project. It requires Node.js and npm to be installed and will make the 'serve-static' module available for requiring in subsequent JavaScript files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/serve-static/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install serve-static\n\n```\n\n----------------------------------------\n\nTITLE: Installing Ajv and Ajv-Formats using NPM\nDESCRIPTION: Provides the command-line instruction using npm to install the Ajv JSON schema validator and the ajv-formats plugin. These packages are required for validating TypeBox schemas using Ajv.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n$ npm install ajv ajv-formats --save\n```\n```\n\n----------------------------------------\n\nTITLE: Installing jest-changed-files via npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to install the `jest-changed-files` module. The `--save` flag ensures the module is added as a dependency in the project's `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-changed-files/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save jest-changed-files\n```\n\n----------------------------------------\n\nTITLE: Polyfilling or Substituting the Promise Implementation (Node.js)\nDESCRIPTION: Demonstrates installing and applying a polyfill for Promise in older versions of Node.js (<=0.12.x), and shows how to use a custom promise constructor (e.g., Bluebird) on a per-pool basis. Required in environments lacking native Promise support. Dependencies: 'promise-polyfill', 'bluebird', 'pg-pool'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-pool/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// first run `npm install promise-polyfill --save\nif (typeof Promise == 'undefined') {\n  global.Promise = require('promise-polyfill')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bluebirdPool = new Pool({\n  Promise: require('bluebird')\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Babel Plugin Syntax for Class Static Blocks with Yarn - Shell\nDESCRIPTION: This snippet demonstrates how to add the @babel/plugin-syntax-class-static-block as a development dependency using the Yarn package manager. Yarn must be installed beforehand, and the command is intended for JavaScript or Node.js projects. Executing it in the terminal updates the project's devDependencies automatically. No input parameters are needed, and there is no output except the installation progress.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-class-static-block/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-class-static-block --dev\n```\n\n----------------------------------------\n\nTITLE: Installing Azure OpenAI Dependencies with npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the necessary npm packages (@azure/openai and @azure/identity) required to interact programmatically with the Azure OpenAI APIs from your Node.js/TypeScript codebase. Ensure npm is installed and run this command in your project's root directory before writing service logic. The packages provide API bindings and Azure credential helpers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_INTEGRATION_AND_DEVELOPMENT_GUIDE.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/openai @azure/identity\n```\n\n----------------------------------------\n\nTITLE: Installing istanbul-reports TypeScript Definitions using npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install the TypeScript type definitions for the `istanbul-reports` library as a development dependency. The `--save` flag (though often implicit with modern npm versions for devDependencies) ensures it's added to the project's package dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/istanbul-reports/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/istanbul-reports\n```\n\n----------------------------------------\n\nTITLE: Importing js-tokens Regex (ESM & CommonJS)\nDESCRIPTION: Illustrates how to import the default `js-tokens` regex using both ES Module `import` syntax and CommonJS `require` syntax. The `default` property must be accessed when using `require` as the primary export is the regex itself.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport jsTokens from \"js-tokens\"\n// or:\nvar jsTokens = require(\"js-tokens\").default\n```\n\n----------------------------------------\n\nTITLE: Requiring and Initializing Negotiator - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Negotiator class from the package using Node.js require syntax. This is a prerequisite step for all further Negotiator usage, and assumes Negotiator is already installed. The returned value is the Negotiator constructor, ready for instantiation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/negotiator/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar Negotiator = require('negotiator')\n```\n\n----------------------------------------\n\nTITLE: Importing JSON5 with CommonJS in JavaScript\nDESCRIPTION: This snippet demonstrates importing the JSON5 library using CommonJS syntax, which is standard for Node.js projects. After importing, the JSON5 API becomes available in the variable JSON5. Prerequisite: JSON5 must already be installed via npm.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst JSON5 = require('json5')\n```\n\n----------------------------------------\n\nTITLE: Duplicate Export Name Error for Destructured Export Assignment in JavaScript\nDESCRIPTION: Illustrates a scenario where exporting destructured properties produces a duplicate export error, including the full error output as displayed by the parser. The first block is the erroneous export code; the second block is the bash output for the error. No dependencies beyond JavaScript with ES modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\n// regression with duplicate export check\\nSyntaxError: ./typography.js: `undefined` has already been exported. Exported identifiers must be unique. (22:13)\\n  20 |\\n  21 | export const { rhythm } = typography;\\n> 22 | export const { TypographyStyle } = typography\n```\n\n----------------------------------------\n\nTITLE: Output Format of diff() Comparing Arrays\nDESCRIPTION: Shows the typical string output generated by the `diff()` function when comparing the arrays from the previous example. It uses `-` for expected (deleted, default red) and `+` for received (inserted, default green), and dim text for common lines, prefixed with annotation lines describing the indicators.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\n+ Received\n\n  Array [\n-   \"delete\",\n    \"common\",\n-   \"changed from\",\n+   \"changed to\",\n+   \"insert\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing range-parser via npm - Shell\nDESCRIPTION: Demonstrates how to install the 'range-parser' package from the npm registry using the npm command-line tool. This is a standard prerequisite step for using the module in Node.js projects. The command should be run in the terminal within your project directory, and requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/range-parser/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```\n$ npm install range-parser\n```\n```\n\n----------------------------------------\n\nTITLE: Using the MicroInteractions Hook in React JSX\nDESCRIPTION: Demonstrates how to access and utilize functions provided by the `useMicroInteractions` hook within a React component. This allows triggering various animations ('confetti', 'stars', etc.), showing/hiding the break timer modal, and controlling the visibility of the 'Diego the Dolphin' mascot with specific messages.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/DEVELOPMENT_LOG.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Access in any component\nconst { triggerAnimation, showBreakTimer, hideBreakTimer, showMascot, hideMascot } = useMicroInteractions();\n\n// Trigger a success animation\ntriggerAnimation('confetti', 'Great job completing your practice session!');\n\n// Show the break timer\nshowBreakTimer();\n\n// Show the mascot with a message\nshowMascot('Try focusing on these performance indicators before your next practice.');\n```\n\n----------------------------------------\n\nTITLE: Requiring ipaddr.js in Node.js - JavaScript\nDESCRIPTION: Demonstrates how to import the ipaddr.js module into a Node.js environment using CommonJS. This is required for accessing ipaddr.js methods and classes in server-side JavaScript applications. Make sure ipaddr.js is installed using npm before requiring.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ipaddr.js/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ipaddr = require('ipaddr.js');\n```\n\n----------------------------------------\n\nTITLE: Installing p-limit with npm - Shell\nDESCRIPTION: This snippet installs the p-limit package from the npm registry, which is required to use the p-limit functionality in Node.js projects. It runs in a shell or terminal environment and must be executed before importing or using p-limit in code. This is the prerequisite step for all following JavaScript examples.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/p-locate/node_modules/p-limit/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install p-limit\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing cliui (JavaScript)\nDESCRIPTION: Provides the basic import statement required to use cliui in CommonJS environments. Shows assignment of the cliui module to a variable and is a prerequisite step for all cliui usage examples. No output is expected from this snippet itself; it simply demonstrates required module import.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cliui/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ncliui = require('cliui')\n```\n\n----------------------------------------\n\nTITLE: Installing array-flatten Package using npm\nDESCRIPTION: Installs the 'array-flatten' Node.js package and saves it as a dependency in the project's package.json file using the Node Package Manager (npm). Requires npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/array-flatten/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install array-flatten --save\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Verb in Shell\nDESCRIPTION: Commands for installing verb and verb-generate-readme globally via npm and generating the project's README file. This is relevant when contributing documentation updates and ensures the readme is generated from the designated template.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/normalize-path/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n----------------------------------------\n\nTITLE: Installing 'debug' via npm (Bash)\nDESCRIPTION: Shows the command to install the 'debug' JavaScript library using the Node Package Manager (npm). Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/http-proxy-agent/node_modules/debug/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install debug\n```\n\n----------------------------------------\n\nTITLE: Handling Flipped Min/Max Arguments in to-regex-range (JavaScript)\nDESCRIPTION: This code demonstrates how 'to-regex-range' handles cases where the first argument (min) is larger than the second argument (max). The library automatically flips the values to ensure a valid range is processed, generating the same regex as if the arguments were passed in the correct order.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ntoRegexRange('51', '29');\n```\n\nLANGUAGE: js\nCODE:\n```\ntoRegexRange('29', '51');\n//=> 29|[3-4][0-9]|5[0-1]\n```\n\n----------------------------------------\n\nTITLE: Integrating Microlearning Modules via Custom Solution\nDESCRIPTION: Integrates the AI-generated content (quizzes, feedback from GPT-4) with the custom React frontend templates. This creates a semi-automated workflow for generating new microlearning modules, potentially referencing platforms like Articulate Storyline or Adobe Captivate for interaction models.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_8\n\nLANGUAGE: Platform Integration\nCODE:\n```\nIntegration Process:\n1. Generate content (questions, feedback) using GPT-4 API.\n2. Feed generated content into pre-built React interactive templates.\n3. Deploy modules within the custom React frontend.\nReference Models: Articulate Storyline, Adobe Captivate (for interactivity patterns).\nGoal: Semi-automate the creation of new gamified microlearning modules.\n```\n\n----------------------------------------\n\nTITLE: Importing the is-number library in Node.js\nDESCRIPTION: Shows how to import the `is-number` library into a Node.js application using the `require` function after it has been installed via NPM.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst isNumber = require('is-number');\n```\n\n----------------------------------------\n\nTITLE: Running tests for the content-disposition package\nDESCRIPTION: This command executes the test suite defined in the `package.json` file for the `content-disposition` project, typically using a testing framework like Mocha or Jest. It requires the project's development dependencies to be installed (`npm install --dev` or `npm install`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-disposition/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Installing normalize-path via npm in Shell\nDESCRIPTION: Demonstrates how to install the normalize-path package using npm, which is required to use the normalization features in Node.js projects. This command should be run in your project directory to add the library as a dependency. It is a prerequisite step before utilizing any of the code examples that import normalize-path.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/normalize-path/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save normalize-path\n```\n\n----------------------------------------\n\nTITLE: Installing get-stream with npm (Shell)\nDESCRIPTION: This shell command installs the 'get-stream' package from the npm registry. It should be run in the root directory of a Node.js project to add 'get-stream' to the dependencies as specified in your package.json file. No arguments or configuration is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/get-stream/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install get-stream\n```\n\n----------------------------------------\n\nTITLE: Installing human-signals via npm - bash\nDESCRIPTION: This snippet provides the command to install the 'human-signals' package using npm. It is a one-line shell command necessary for setting up the dependency before using it in Node.js projects. No input is required; successful execution installs 'human-signals' in the current project. Limitation: Assumes Node.js and npm are already installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/human-signals/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install human-signals\n```\n\n----------------------------------------\n\nTITLE: Installing the etag Package with npm - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the 'etag' module locally using npm. It is required before you can use the module in your Node.js project. Use this command in your project's root directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/etag/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install etag\n```\n\n----------------------------------------\n\nTITLE: Installing the events Module via npm - Bash\nDESCRIPTION: This code snippet shows how to install the 'events' module using the npm package manager, which is necessary for environments where 'events' is not built-in. No dependencies or inputs are required aside from npm. The command downloads and adds the module to your project for manual use in non-Node.js runtimes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/events/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install events\n```\n\n----------------------------------------\n\nTITLE: Examples of Invalid Ranges for fill-range (JavaScript)\nDESCRIPTION: Code comments illustrating input combinations that are considered invalid by the `fill-range` function, such as using decimals, mixing incompatible types (letters and numbers), or providing an invalid `step` argument. By default, `fill-range` returns `null` for these, but `options.strictRanges: true` would throw an error. Requires the `fill-range` package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/fill-range/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfill('1.1', '2');   // decimals not supported in ranges\nfill('a', '2');     // incompatible range values\nfill(1, 10, 'foo'); // invalid \"step\" argument\n```\n\n----------------------------------------\n\nTITLE: Installing proxy-addr via NPM in Shell\nDESCRIPTION: Demonstrates how to install the proxy-addr module from the npm registry using the npm install command. This step is required before using the module in any Node.js project. No parameters are needed beyond the package name, and the output is a local installation of the library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install proxy-addr\n```\n\n----------------------------------------\n\nTITLE: Importing deepmerge with CommonJS in JavaScript\nDESCRIPTION: This snippet shows how to import the deepmerge library using the CommonJS require function in Node.js environments. The merge function provided by the library enables deep merging of JavaScript objects. This is the standard method for importing modules in Node.js projects not using ESM.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst merge = require('deepmerge')\n```\n\n----------------------------------------\n\nTITLE: Checking Native Symbol Support with has-symbols in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the main `has-symbols` library function to determine if the current JavaScript environment has native support for ES6 Symbols. It requires the `has-symbols` package and calls its main exported function (`hasSymbols()`), which returns `true` if native Symbol support exists and `false` otherwise. The comment clarifies this check detects only native support and is not polyfillable or forgeable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/has-symbols/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar hasSymbols = require('has-symbols');\n\nhasSymbols() === true; // if the environment has native Symbol support. Not polyfillable, not forgeable.\n```\n\n----------------------------------------\n\nTITLE: CoffeeScript Demo with Source Map Support - CoffeeScript\nDESCRIPTION: CoffeeScript code that installs source-map-support and simulates an error for demonstration. Shows remapping of the stack trace to the original CoffeeScript source. Requires source-map-support and CoffeeScript compiler.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_20\n\nLANGUAGE: coffeescript\nCODE:\n```\nrequire('source-map-support').install()\nfoo = ->\n  bar = -> throw new Error 'this is a demo'\n  bar()\nfoo()\n```\n\n----------------------------------------\n\nTITLE: Example DeprecationError Stack Trace Output (Text)\nDESCRIPTION: Illustrates the format of the stack trace provided by a 'DeprecationError' object emitted by the 'depd' module when a listener is attached to `process.on('deprecation', fn)`. It includes the error message, name, namespace, and call stack.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n----------------------------------------\n\nTITLE: Enabling and Styling Memphis Visual Patterns - CSS\nDESCRIPTION: This selection of CSS rules enables the Memphis style and patterns, toggling visibility and customizing backgrounds based on classes. Classes such as .memphis-style.enabled and .memphis-pattern-* apply unique geometric effects and decorations using CSS gradients and pattern positioning. To work, these should be conditionally toggled by JavaScript/React logic in response to the user's style choice.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742708040241.txt#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Memphis Design Style CSS */\\n.memphis-style .decorator {\\n  display: none;\\n}\\n.memphis-style.enabled .decorator {\\n  display: block;\\n}\\n\\n/* Example Memphis patterns */\\n.memphis-pattern-1 {\\n  background-image: radial-gradient(circle at 2px 2px, var(--color-secondary) 1px, transparent 0);\\n  background-size: 20px 20px;\\n}\\n.memphis-pattern-2 {\\n  background-image: linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary)), \\n                    linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary));\\n  background-size: 20px 20px;\\n  background-position: 0 0, 10px 10px;\\n  opacity: 0.1;\\n}\\n/* Decorative elements */\\n.memphis-style.enabled .card,\\n.memphis-style.enabled .button,\\n.memphis-style.enabled .badge {\\n  position: relative;\\n  overflow: visible;\\n}\\n.memphis-style.enabled .decorator-1 {\\n  position: absolute;\\n  width: 20px;\\n  height: 20px;\\n  border-radius: 50%;\\n  background-color: var(--color-secondary);\\n  top: -10px;\\n  right: -10px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Memphis Design Patterns and Style Modifiers (CSS)\nDESCRIPTION: This CSS extends the UI for Memphis style by controlling decorator visibility, implementing patterned backgrounds, and applying extra decorative elements only when enabled. Patterns use CSS gradients and global color variables. Apply to any feature that toggles Memphis style via the body class. Prerequisite: Theme management code must add/remove the memphis-style and enabled classes on the body element.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-full-fledged-implementation-package-document-for-DecA-I-de-that-includes-a-1742708537437.txt#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n/* Memphis Design Style */\n.memphis-style .decorator {\n  display: none;\n}\n.memphis-style.enabled .decorator {\n  display: block;\n}\n/* Memphis Patterns */\n.memphis-pattern-1 {\n  background-image: radial-gradient(circle at 2px 2px, var(--color-secondary) 1px, transparent 0);\n  background-size: 20px 20px;\n}\n.memphis-pattern-2 {\n  background-image: linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary)),\n                    linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary));\n  background-size: 20px 20px;\n  background-position: 0 0, 10px 10px;\n  opacity: 0.1;\n}\n/* Decorative Elements */\n.memphis-style.enabled .card,\n.memphis-style.enabled .button,\n.memphis-style.enabled .badge {\n  position: relative;\n  overflow: visible;\n}\n.memphis-style.enabled .decorator-1 {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: var(--color-secondary);\n  top: -10px;\n  right: -10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Micromatch in JavaScript\nDESCRIPTION: Shows how to require the Micromatch library in a Node.js application and provides the method signature for matching lists using patterns. Assumes that the 'micromatch' package has already been installed. No parameters are provided in this example, but it establishes the basic dependency and demonstrates correct import.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/micromatch/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst micromatch = require('micromatch');\n// micromatch(list, patterns[, options]);\n```\n\n----------------------------------------\n\nTITLE: Importing jsesc in Node.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the jsesc library into a Node.js application using the `require` function. The imported `jsesc` constant can then be used to call the library's functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsesc = require('jsesc');\n```\n\n----------------------------------------\n\nTITLE: Importing the diff function\nDESCRIPTION: Shows how to import the `diff` function from the `jest-diff` package using both CommonJS (`require`) and ECMAScript (`import`) module systems.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diff} = require('jest-diff');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {diff} from 'jest-diff';\n```\n\n----------------------------------------\n\nTITLE: Colorizing Console Output in istanbul-reports (JavaScript)\nDESCRIPTION: Accessed via `context.console`, this method applies styling, likely ANSI color codes, to a given string (`str`) based on a specified class or type identifier (`class`). This enhances the readability of reports generated directly in the console. Requires the `context.console` object, the string to colorize, and a class/type specifier.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-reports/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.console.colorize(str, class)\n```\n\n----------------------------------------\n\nTITLE: Decoding a BSER Buffer Using loadFromBuffer - JavaScript\nDESCRIPTION: Shows synchronous deserialization of a single value from a buffer or string using 'bser.loadFromBuffer'. This function decodes a BSER-encoded buffer and returns the decoded JavaScript object. 'buf' must be a valid BSER buffer; otherwise, an error is thrown.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bser/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = bser.loadFromBuffer(buf);\n```\n\n----------------------------------------\n\nTITLE: Disallowing Keywords as Local Import Specifiers - Babylon - JavaScript\nDESCRIPTION: These import statements illustrate that Babylon will now throw errors if keywords are used as local specifiers in imports. The first example tries to import 'default' as an identifier, and the second uses 'debugger' as an alias, both of which are now forbidden. No special dependencies are required except for the parser with updated compliance. Inputs are import statements with reserved keyword identifiers, and the expected output is a parsing error.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { default } from \"foo\";\nimport { a as debugger } from \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Using 'relaxZeros: false' in to-regex-range (JavaScript)\nDESCRIPTION: This snippet demonstrates the effect of setting the 'relaxZeros' option to false. When generating a regex for a range with leading zeros and `relaxZeros` is false, the resulting regex will strictly match only the numbers with the specified number of leading zeros.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst source = toRegexRange('-0010', '0010', { relaxZeros: false });\nconst regex = new RegExp(`^${source}$`);\nconsole.log(regex.test('-10')); //=> false\nconsole.log(regex.test('-010')); //=> false\nconsole.log(regex.test('-0010')); //=> true\nconsole.log(regex.test('10')); //=> false\nconsole.log(regex.test('010')); //=> false\nconsole.log(regex.test('0010')); //=> true\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Rvalue Assignment Error Messages (JavaScript)\nDESCRIPTION: Shows examples of code that trigger 'assigning to rvalue' errors. It contrasts the previous, less informative error message ('SyntaxError: Assigning to rvalue') with the improved, more context-specific messages implemented in the update ('Invalid left-hand side in assignment expression', 'Invalid left-hand side in for-in statement'). This enhances developer experience by providing clearer feedback on syntax errors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_43\n\nLANGUAGE: js\nCODE:\n```\n// Used to error with:\n// SyntaxError: Assigning to rvalue (1:0)\n\n// Now:\n// Invalid left-hand side in assignment expression (1:0)\n3 = 4\n\n// Invalid left-hand side in for-in statement (1:5)\nfor (+i in {});\n```\n\n----------------------------------------\n\nTITLE: Creating An Azure Search Service Using Azure CLI - Powershell\nDESCRIPTION: Provision a new Azure AI Search service instance using Azure CLI. This command requires you to specify a unique service name, a resource group, and a pricing SKU (here, free tier), as well as an Azure region location. Prerequisites: Azure CLI installed and authenticated to your Azure account. Outputs the created resource's details if successful.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/search-documents/README.md#_snippet_1\n\nLANGUAGE: Powershell\nCODE:\n```\naz search service create --name <mysearch> --resource-group <mysearch-rg> --sku free --location westus\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Generator Function with co.wrap in JavaScript\nDESCRIPTION: Illustrates how to use `co.wrap()` to convert a generator function (`fn*`) into a standard asynchronous function that returns a Promise. This allows the wrapped function (`fn`) to be called like a regular function, and its result (a Promise) can be handled using `.then()`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/co/Readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar fn = co.wrap(function* (val) {\\n  return yield Promise.resolve(val);\\n});\\n\\nfn(true).then(function (val) {\\n\\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Frontend Logs - Bash\nDESCRIPTION: Displays logs for frontend operations using the npm run logs:client script. Assists in debugging client-side issues or errors in the browser application. Requires proper npm script definition.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm run logs:client\n```\n\n----------------------------------------\n\nTITLE: Installing Forwarded Module with npm in Shell\nDESCRIPTION: This code snippet demonstrates how to install the \"forwarded\" Node.js module globally or locally using npm. The installation process requires Node.js and npm to be set up on your system. Running this command adds \"forwarded\" to your node_modules directory and updates your package.json dependency list. No input parameters are required, and successful execution enables use of the module in your project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/forwarded/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install forwarded\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server - Bash\nDESCRIPTION: Starts the full application in production mode on port 3000 using npm start. Assumes previous build step has created static assets and all configurations are correct. Application will be accessible via browser at http://localhost:3000.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing v8-compile-cache-lib using npm (Shell)\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and install the `v8-compile-cache-lib` package. The `--save` flag ensures that the package is added as a dependency in the project's `package.json` file. This is the standard way to add the library to a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-compile-cache-lib/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save v8-compile-cache-lib\n```\n\n----------------------------------------\n\nTITLE: Installing semver package using npm\nDESCRIPTION: Shows the command to install the `semver` package globally or locally using npm, the Node.js package manager. This command downloads and installs the package and its dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-snapshot/node_modules/semver/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install semver\n```\n\n----------------------------------------\n\nTITLE: Installing yn with npm in Bash\nDESCRIPTION: This Bash snippet provides the command necessary to install the 'yn' package as a project dependency using the npm package manager. This command must be run in the terminal before using any 'yn' functionality in a Node.js application. No additional parameters are needed, and the output will update your project dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yn/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n&#96;&#96;&#96;\\n$ npm install yn\\n&#96;&#96;&#96;\n```\n\n----------------------------------------\n\nTITLE: Installing camelcase with npm - JavaScript\nDESCRIPTION: Demonstrates installing the 'camelcase' package using npm, which makes the function available for import and use in JavaScript/Node.js projects. Requires npm to be installed and initialized in the project directory. This snippet is needed before any other camelcase usage can work.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/camelcase/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install camelcase\n```\n\n----------------------------------------\n\nTITLE: Fixing Light Mode Selection Styling in React Settings Page - JSX\nDESCRIPTION: This snippet demonstrates how to correct the visual rendering of the light mode selection box on the settings page in a React (TSX/JSX) project. By removing the 'dark:bg-white' Tailwind class, the preview box will always appear with a white background, regardless of dark mode. Dependencies include React and a styling framework such as Tailwind CSS; key parameters are conditional class strings based on the current theme. Input is a user click, output is an appearance state update and consistent UI appearance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742708040241.txt#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\\n<div \\n  className={`border ${appearance.theme === \\\"light\\\" ? 'border-primary ring-2 ring-primary/30' : 'border-slate-200 dark:border-[var(--dark-border)]'} rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white dark:bg-white`}\\n  onClick={() => setAppearance(prev => ({...prev, theme: \\\"light\\\"}))}\\n>\\n  ...\\n</div>\\n\\n// After\\n<div \\n  className={`border ${appearance.theme === \\\"light\\\" ? 'border-primary ring-2 ring-primary/30' : 'border-slate-200 dark:border-[var(--dark-border)]'} rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white`}\\n  onClick={() => setAppearance(prev => ({...prev, theme: \\\"light\\\"}))}\\n>\\n  ...\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Async Generator Plugin with npm - Shell\nDESCRIPTION: Demonstrates how to install the @babel/plugin-syntax-async-generators package as a development dependency using the npm package manager. No additional dependencies are needed beyond npm itself. This command should be run from the root directory of a JavaScript project. The plugin enables Babel to parse async generator functions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-async-generators/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-async-generators\n```\n\n----------------------------------------\n\nTITLE: Installing @jridgewell/trace-mapping via npm - Shell\nDESCRIPTION: Installs the @jridgewell/trace-mapping package from npm, which is required to use the source map tracing functionality in subsequent examples. Ensure Node.js and npm are installed on your system before running this command. There are no code parameters; the command will add the package as a dependency in your Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/trace-mapping/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @jridgewell/trace-mapping\n```\n\n----------------------------------------\n\nTITLE: Defining a Docblock with Pragmas in JavaScript\nDESCRIPTION: Shows a JavaScript docblock containing a pragma (`@flow`). Pragmas are special keywords prefixed with `@` within a docblock, used to convey metadata or instructions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-docblock/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Pragma incoming!\n *\n * @flow\n */\n```\n\n----------------------------------------\n\nTITLE: Installing pg-cloudflare Package using npm\nDESCRIPTION: This command installs the `pg-cloudflare` package as a development dependency using the Node Package Manager (npm). This package is required to use the `CloudflareSocket` class.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pg-cloudflare/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i --save-dev pg-cloudflare\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-validator-option with yarn in Shell\nDESCRIPTION: This shell snippet demonstrates installing the @babel/helper-validator-option package with yarn, an alternative Node.js package manager. It is functionally equivalent to the npm install command, adding the validator as a dependency to your project. Usage requires yarn to be installed and should be run from the project root.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-validator-option/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @babel/helper-validator-option\n\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Syntax Private Property in Object using npm (Shell)\nDESCRIPTION: This shell command uses npm to install the '@babel/plugin-syntax-private-property-in-object' package as a development dependency. Users must have Node.js and npm installed in their environment. It is executed via the terminal at the root of the JavaScript/Node.js project. The command accepts no additional parameters; successful execution adds the plugin to 'devDependencies' in package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-private-property-in-object/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-private-property-in-object\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Optional Catch Binding Plugin with npm - Shell\nDESCRIPTION: This shell snippet installs the @babel/plugin-syntax-optional-catch-binding package as a development dependency using npm. It assumes npm is installed and a package.json exists in the project. The command downloads the necessary plugin for enabling optional catch bindings parsing in Babel, but does not configure Babel automatically.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-optional-catch-binding/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-optional-catch-binding\n```\n\n----------------------------------------\n\nTITLE: Allow Semicolon at End of DeclareModuleExports Statement - Babylon - JavaScript\nDESCRIPTION: This snippet shows both the allowed forms for declare module exports statements in Flow; Babylon now correctly accepts them with or without a semicolon. Inputs are 'declare module' blocks; outputs are valid ASTs for either form. Requires Flow support.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeclare module \"foo\" { declare module.exports: number }\ndeclare module \"foo\" { declare module.exports: number; }  // also allowed now\n```\n\n----------------------------------------\n\nTITLE: Releasing and Publishing with Yeoman and npm (Shell)\nDESCRIPTION: These shell commands outline the process for releasing a new version of the project. `yo release` invokes a Yeoman generator (`generator-release`) to automate release tasks such as version bumping, changelog generation, and tagging. `npm publish` uploads the packaged project to the npm registry, making the new version available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/diff/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyo release\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Example Output for Dynamic Debug Enabling/Disabling\nDESCRIPTION: Shows the expected console output for the preceding JavaScript snippet, illustrating the boolean status returned by `debug.enabled('test')` before enabling, after enabling, and after disabling the 'test' namespace.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n1 false\n2 true\n3 false\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests - Bash\nDESCRIPTION: Demonstrates using npm to install dependencies and run the test suite for the project. Assumes presence of a package.json with test scripts defined. Used for verifying correct installation and checking project integrity.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Pretty-Printing Escaped Objects with jsesc CLI in Bash\nDESCRIPTION: Demonstrates the use of the '-p' or '--pretty' option alongside '--object' with the jsesc command-line tool in Bash. This option formats the escaped object output with indentation for better readability.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ jsesc --pretty '{ \"föo\": \"♥\", \"bår\": \"𝌆 baz\" }'\n{\n  'f\\xF6o': '\\u2665',\n  'b\\xE5r': '\\uD834\\uDF06 baz'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-compilation-targets with NPM - Shell\nDESCRIPTION: This shell snippet installs the @babel/helper-compilation-targets package using npm. It requires Node.js and npm to be installed on the system and is intended for use in a project directory. The main parameter is the package name, and the --save flag ensures it is added to dependencies in package.json. The command adds @babel/helper-compilation-targets as a project dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-compilation-targets/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/helper-compilation-targets\n```\n\n----------------------------------------\n\nTITLE: Installing @jridgewell/gen-mapping via NPM - Shell\nDESCRIPTION: Installs the @jridgewell/gen-mapping package from the npm registry using the npm package manager command-line tool. Prerequisites: npm must be installed. This command fetches and adds the package as a project dependency. No input parameters are required; the output is the updated project dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/gen-mapping/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @jridgewell/gen-mapping\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-plugin-utils with npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to install the '@babel/helper-plugin-utils' package and save it as a dependency in the project's 'package.json' file. Requires npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-plugin-utils/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/helper-plugin-utils\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable in PowerShell\nDESCRIPTION: Shows the syntax for setting the `DEBUG` environment variable within the Windows PowerShell environment. It uses the `$env:` prefix to modify environment variables. The example sets the `DEBUG` variable to enable all namespaces (`*`) except those starting with `not_this`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/node_modules/debug/README.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n$env:DEBUG = \"*,-not_this\"\n```\n\n----------------------------------------\n\nTITLE: Installing brace-expansion via npm using Bash\nDESCRIPTION: Provides the command `npm install brace-expansion` to install the JavaScript library using the Node Package Manager (npm) in a Bash or compatible shell environment. Requires npm and Node.js to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/brace-expansion/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install brace-expansion\n```\n\n----------------------------------------\n\nTITLE: Installing escape-string-regexp with npm - Bash\nDESCRIPTION: This code snippet provides the npm command to install the escape-string-regexp package. It should be run in the terminal at the root of a Node.js project to make the package available for use in your code. No parameters are required, and the command installs the latest version by default.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escape-string-regexp/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install escape-string-regexp\n```\n\n----------------------------------------\n\nTITLE: Installing supports-color via npm\nDESCRIPTION: Installs the `supports-color` package using the Node Package Manager (npm). This command downloads and adds the package to your project's dependencies, typically saved in `node_modules` and listed in `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/supports-color/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install supports-color\n```\n\n----------------------------------------\n\nTITLE: Installing Yargs Type Definitions - Bash\nDESCRIPTION: Shows the command to install TypeScript type definitions for Yargs, enabling type checking and editor support for TypeScript projects. Requires 'npm' and a Node.js development environment. The installation is only necessary for TypeScript consumers and adds typings as a devDependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/yargs/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @types/yargs --save-dev\\n\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations - Node.js Script (bash)\nDESCRIPTION: This command executes pending database migrations via the npm script 'db:push', which typically updates the PostgreSQL schema using Drizzle ORM. Ensure your database is accessible and credentials are set in the '.env' file. Inputs: existing migration files and database configuration. Output: database schema is synchronized with the application's expectations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run db:push\n```\n\n----------------------------------------\n\nTITLE: Installing onetime via npm\nDESCRIPTION: This command installs the 'onetime' package using the Node Package Manager (npm). It needs to be run in a terminal in the context of a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/onetime/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install onetime\n```\n\n----------------------------------------\n\nTITLE: Using Object Literal with partial() Collection Option in JavaScript\nDESCRIPTION: Example demonstrates passing a plain JavaScript object (like `{foo: 'bar'}`) as the `collection` option to the `partial()` helper in Express 2.2.1+. This allows iterating over object properties, exposing `keyInCollection` and `keysInCollection` within the partial view, enhancing support beyond array-like objects.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n{ collection: {foo: 'bar'}}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Submitted Papers with OCR\nDESCRIPTION: Leverages Optical Character Recognition (OCR) technology to analyze written papers submitted by students during the transition phase of the Interactive AI Judge feature. The AI extracts key data on structure, clarity, and compliance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_10\n\nLANGUAGE: AI Tool\nCODE:\n```\nOCR Analysis\nTrigger: Student submits written paper during the transition window.\nInput: Scanned image or PDF of the written paper.\nProcess: AI uses OCR to extract text and analyze structure, clarity, and compliance with event requirements.\nOutput: Structured data contributing to the student's performance profile.\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Docblock in JavaScript\nDESCRIPTION: Illustrates the basic structure of a docblock comment in JavaScript. A docblock is a multi-line comment starting with `/**` and ending with `*/`, typically placed at the top of a file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-docblock/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Stuff goes here!\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing the DiegoAvatar React Component in TypeScript (TSX)\nDESCRIPTION: This React functional component, `DiegoAvatar`, renders a dolphin SVG avatar. It accepts props defined by `DiegoAvatarProps` to customize its appearance, including size, emotion (which may add an emoji), pointing direction (adding a pointing emoji), and an optional swimming animation. Default values are provided for props, and Tailwind CSS classes are used for styling. The component defines an inline SVG for the dolphin graphic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted--client-src-components-diego-guide-diego-avatar-tsx-interface-DiegoAvatarProps-emotion-ha-1742646842971.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function DiegoAvatar({\n  emotion = 'neutral',\n  size = 'md',\n  className = '',\n  pointDirection = 'up',\n  swimming = false\n}: DiegoAvatarProps) {\n  // Determine size based on prop\n  const sizeClasses = {\n    sm: 'w-8 h-8',\n    md: 'w-12 h-12',\n    lg: 'w-16 h-16',\n    xl: 'w-24 h-24'\n  };\n\n  // Use enhanced swimming animation\n  const swimmingAnimation = swimming ? 'animate-dolphin-swim' : '';\n\n  // Base classes for all avatars\n  const baseClasses = `${sizeClasses[size]} ${swimmingAnimation} ${className}`;\n\n  // Custom Dolphin SVG with gradients and refined details\n  const DolphinSVG = (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 64 64\"\n      className=\"w-full h-full\"\n    >\n      <defs>\n        <linearGradient id=\"dolphinGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"#4FD1C5\" />\n          <stop offset=\"100%\" stopColor=\"#3182CE\" />\n        </linearGradient>\n      </defs>\n      {/* Dolphin body */}\n      <path\n        fill=\"url(#dolphinGradient)\"\n        d=\"M4,32c10,0,14-12,28-12s18,10,18,10s-4,4-6,6c-2,2-6,6-6,6s-2-3-4-3c-2,0-4,3-4,3s-2-1-4-1\n          s-4,0-6,2c-2,2-6,2-6,2s-4-4-4-8S4,32,4,32z\"\n      />\n      {/* Dolphin fin */}\n      <path\n        fill=\"#2C5282\"\n        d=\"M30,10c8,2,14,10,14,10s-2,3-4,4s-6,2-6,2s-4-1-6-1S28,10,30,10z\"\n      />\n      {/* Dolphin eye */}\n      <circle cx=\"22\" cy=\"26\" r=\"1.5\" fill=\"#FFFFFF\" />\n    </svg>\n  );\n\n  // Render different avatar based on emotion\n  switch (emotion) {\n    case 'happy':\n      return (\n        <div className={`${baseClasses} relative text-primary-foreground`}>\n          <div className=\"text-4xl\">{DolphinSVG}</div>\n          <div className=\"absolute -bottom-1 -right-1 text-lg\">\n            <span>😊</span>\n          </div>\n        </div>\n      );\n    case 'excited':\n      return (\n        <div className={`${baseClasses} relative text-primary-foreground`}>\n          <div className=\"text-4xl\">{DolphinSVG}</div>\n          <div className=\"absolute -bottom-1 -right-1 text-lg\">\n            <span>🤩</span>\n          </div>\n        </div>\n      );\n    case 'thinking':\n      return (\n        <div className={`${baseClasses} relative text-primary-foreground`}>\n          <div className=\"text-4xl\">{DolphinSVG}</div>\n          <div className=\"absolute -bottom-1 -right-1 text-lg\">\n            <span>🤔</span>\n          </div>\n        </div>\n      );\n    case 'pointing':\n      const pointClasses = {\n        up: 'top-0 left-1/2 transform -translate-x-1/2 -translate-y-full',\n        down: 'bottom-0 left-1/2 transform -translate-x-1/2 translate-y-full',\n        left: 'left-0 top-1/2 transform -translate-x-full -translate-y-1/2',\n        right: 'right-0 top-1/2 transform translate-x-full -translate-y-1/2'\n      };\n      const pointEmojis = {\n        up: '☝️',\n        down: '👇',\n        left: '👈',\n        right: '👉'\n      };\n      return (\n        <div className={`${baseClasses} relative text-primary-foreground`}>\n          <div className=\"text-4xl\">{DolphinSVG}</div>\n          <div className={`absolute ${pointClasses[pointDirection]} text-xl`}>\n            <span>{pointEmojis[pointDirection]}</span>\n          </div>\n        </div>\n      );\n    default:\n      return (\n        <div className={`${baseClasses} text-primary-foreground`}>\n          <div className=\"text-4xl\">{DolphinSVG}</div>\n        </div>\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running parseurl module benchmarks (Bash)\nDESCRIPTION: Shows the command used to run the performance benchmarks for the `parseurl` module via `npm run-script bench`. The subsequent output displays the environment details (Node.js version, V8 version, etc.) and the results of various benchmark tests (full URL parsing, path/query parsing, same request parsing, simple path parsing, root path parsing), comparing `parseurl`'s performance (ops/sec) against other methods like `fasturl` and native URL parsers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/parseurl/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run-script bench\n\n> parseurl@1.3.3 bench nodejs-parseurl\n> node benchmark/index.js\n\n  http_parser@2.8.0\n  node@10.6.0\n  v8@6.7.288.46-node.13\n  uv@1.21.0\n  zlib@1.2.11\n  ares@1.14.0\n  modules@64\n  nghttp2@1.32.0\n  napi@3\n  openssl@1.1.0h\n  icu@61.1\n  unicode@10.0\n  cldr@33.0\n  tz@2018c\n\n> node benchmark/fullurl.js\n\n  Parsing URL \"http://localhost:8888/foo/bar?user=tj&pet=fluffy\"\n\n  4 tests completed.\n\n  fasturl            x 2,207,842 ops/sec ±3.76% (184 runs sampled)\n  nativeurl - legacy x   507,180 ops/sec ±0.82% (191 runs sampled)\n  nativeurl - whatwg x   290,044 ops/sec ±1.96% (189 runs sampled)\n  parseurl           x   488,907 ops/sec ±2.13% (192 runs sampled)\n\n> node benchmark/pathquery.js\n\n  Parsing URL \"/foo/bar?user=tj&pet=fluffy\"\n\n  4 tests completed.\n\n  fasturl            x 3,812,564 ops/sec ±3.15% (188 runs sampled)\n  nativeurl - legacy x 2,651,631 ops/sec ±1.68% (189 runs sampled)\n  nativeurl - whatwg x   161,837 ops/sec ±2.26% (189 runs sampled)\n  parseurl           x 4,166,338 ops/sec ±2.23% (184 runs sampled)\n\n> node benchmark/samerequest.js\n\n  Parsing URL \"/foo/bar?user=tj&pet=fluffy\" on same request object\n\n  4 tests completed.\n\n  fasturl            x  3,821,651 ops/sec ±2.42% (185 runs sampled)\n  nativeurl - legacy x  2,651,162 ops/sec ±1.90% (187 runs sampled)\n  nativeurl - whatwg x    175,166 ops/sec ±1.44% (188 runs sampled)\n  parseurl           x 14,912,606 ops/sec ±3.59% (183 runs sampled)\n\n> node benchmark/simplepath.js\n\n  Parsing URL \"/foo/bar\"\n\n  4 tests completed.\n\n  fasturl            x 12,421,765 ops/sec ±2.04% (191 runs sampled)\n  nativeurl - legacy x  7,546,036 ops/sec ±1.41% (188 runs sampled)\n  nativeurl - whatwg x    198,843 ops/sec ±1.83% (189 runs sampled)\n  parseurl           x 24,244,006 ops/sec ±0.51% (194 runs sampled)\n\n> node benchmark/slash.js\n\n  Parsing URL \"/\"\n\n  4 tests completed.\n\n  fasturl            x 17,159,456 ops/sec ±3.25% (188 runs sampled)\n  nativeurl - legacy x 11,635,097 ops/sec ±3.79% (184 runs sampled)\n  nativeurl - whatwg x    240,693 ops/sec ±0.83% (189 runs sampled)\n  parseurl           x 42,279,067 ops/sec ±0.55% (190 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Migrating from Directory Path to Custom readMap Function in diff Format (convert-source-map)\nDESCRIPTION: Shows how to upgrade from directory path-based map resolution to using a custom synchronous file-reading function for reading source map files in Node.js. Demonstrates the replacement of a static path with a function that uses Node.js 'fs' and 'path' modules. Key dependencies include 'fs' and 'path', and the input filename is dynamically resolved. Suitable when updating code to work with convert-source-map v2.0.0+.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/convert-source-map/README.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ var fs = require('fs'); // Import the fs module to read a file\n+ var path = require('path'); // Import the path module to resolve a path against your directory\n- var conv = convert.fromMapFileSource(css, '../my-dir');\n+ var conv = convert.fromMapFileSource(css, function (filename) {\n+   return fs.readFileSync(path.resolve('../my-dir', filename), 'utf-8');\n+ });\n```\n\n----------------------------------------\n\nTITLE: Using the 'capture' Option in to-regex-range (JavaScript)\nDESCRIPTION: This snippet illustrates the 'capture' option. When set to true, it wraps the generated regex source string in parentheses if it contains multiple conditions (separated by '|'). This is useful for integrating the generated range into a larger regex pattern.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/to-regex-range/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(toRegexRange('-10', '10'));\n//=> -[1-9]|-?10|[0-9]\n\nconsole.log(toRegexRange('-10', '10', { capture: true }));\n//=> (-[1-9]|-?10|[0-9])\n```\n\n----------------------------------------\n\nTITLE: Defining View Engine Signatures for Compilation in Pseudo-code\nDESCRIPTION: Outlines the significant change in the expected view engine signature introduced in Express 2.0.0beta. Engines should now provide an `engine.compile(str, options)` method returning a function `fn(locals)` for rendering, replacing the older `engine.render(str, options, callback)` signature. This aimed to improve view caching and performance.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_43\n\nLANGUAGE: pseudocode\nCODE:\n```\nengine.render(str, options, callback) // Old signature\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nengine.compile(str, options) -> Function // New signature step 1\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nfn(locals) // New signature step 2 (returned function)\n```\n\n----------------------------------------\n\nTITLE: Installing jest-circus using Yarn\nDESCRIPTION: This command installs the `jest-circus` package into your project's development dependencies using the Yarn package manager. As of Jest 27, `jest-circus` is the default runner and explicit installation might not be necessary unless using older Jest versions or specific configurations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-circus/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev jest-circus\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Package Using npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the latest stable version of TypeScript as a development dependency using npm from the command line. It requires Node.js and npm to be pre-installed on the system. The -D flag ensures TypeScript is added to the project's devDependencies. The command does not take any parameters; output will be a typescript entry within package.json under devDependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/typescript/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D typescript\n```\n\n----------------------------------------\n\nTITLE: dedent JavaScript Output Example (Plaintext)\nDESCRIPTION: Shows typical output generated by dedenting various multi-line input strings using dedent. The output demonstrates removal of leading whitespace, consolidated formatting, and handling of trailing lines. Inputs are multi-line strings passed to dedent and the resulting output is a formatted string, reflecting the library's main purpose and limitations (such as not supporting variable interpolation in the example).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dedent/README.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nA string that gets so long you need to break it over\nmultiple lines. Luckily dedent is here to keep it\nreadable without lots of spaces ending up in the string\nitself.\n\nLeading and trailing lines will be trimmed, so you can write something like\nthis and have it work as you expect:\n\n  * how convenient it is\n  * that I can use an indented list\n    - and still have it do the right thing\n\nThat's all.\n\nWait! I lied. Dedent can also be used as a function.\n```\n\n----------------------------------------\n\nTITLE: Importing Vary Package - Node.js - JavaScript\nDESCRIPTION: Requires and imports the 'vary' module so its exported functions can be used within a Node.js application. This is a prerequisite for using any subsequent vary API example. The variable 'vary' will refer to the module's functionality throughout the file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vary/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar vary = require('vary')\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Animation Engine Modules\nDESCRIPTION: Illustrates a potential directory structure for organizing the animation engine code as the library grows. It suggests separating confetti-related logic (presumably using or wrapping `confetti.js`) into its own TypeScript file (`confetti.ts`) within a dedicated `animation-engine` directory, promoting a modular approach. Note: The language tag 'cpp' seems incorrect based on the surrounding context (TypeScript project) and likely represents a file path structure.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-consolidated-requirements-and-implementation-blueprint-for-building-out-the-DecA-I-de-Ani-1742703787972.txt#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nanimation-engine/\n  |- confetti.ts\n```\n\n----------------------------------------\n\nTITLE: Including type-detect in a Browser (HTML)\nDESCRIPTION: Demonstrates how to include the `type-detect.js` script directly in an HTML file for browser usage. Assumes the library has been installed via npm and the script is located in the `node_modules/type-detect` directory relative to the HTML file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/type-detect/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"./node_modules/type-detect/type-detect.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helpers using yarn (Shell)\nDESCRIPTION: This shell command installs the @babel/helpers package using the Yarn package manager. The '--dev' flag indicates that the package is a development dependency, adding it to the 'devDependencies' section of the project's package.json file. Requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helpers/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/helpers --dev\n```\n\n----------------------------------------\n\nTITLE: Installing `string-width` Package using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `string-width` package and its dependencies into the current project's `node_modules` directory. It is the standard way to add the package to a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/string-width/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install string-width\n```\n\n----------------------------------------\n\nTITLE: Installing resolve-from via npm (shell)\nDESCRIPTION: Demonstrates how to install the resolve-from package using npm, which is a prerequisite for any JavaScript code utilizing resolve-from. The command should be executed in a terminal within your project directory. This is a standard Node.js package installation and does not require specific parameters.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-from/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install resolve-from\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-import-meta using npm (Shell)\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-import-meta` package as a development dependency using the Node Package Manager (npm). The `--save-dev` flag registers the package under `devDependencies` in your `package.json` file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-import-meta/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-import-meta\n```\n\n----------------------------------------\n\nTITLE: Installing Babel JSX Syntax Plugin with NPM - Shell\nDESCRIPTION: This snippet demonstrates how to install the @babel/plugin-syntax-jsx package as a development dependency using npm. The command adds the plugin to your project's devDependencies, enabling Babel to parse JSX syntax in your JavaScript or React code. Requires Node.js and npm to be installed. The main parameter is the package name, and the resulting output will update your project's package.json to include the dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-jsx/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-jsx\n```\n\n----------------------------------------\n\nTITLE: Installing the 'globals' Package with npm - Bash\nDESCRIPTION: Demonstrates how to install the 'globals' npm package using the npm command-line tool. Requires Node.js and npm to be installed. The command installs the latest version of the package locally in the project directory. No input arguments are required. The output is the updated node_modules folder containing 'globals'.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/globals/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```\n$ npm install globals\n```\n```\n\n----------------------------------------\n\nTITLE: Installing debug via NPM - Bash\nDESCRIPTION: Shows the command to install the 'debug' JavaScript package via npm, the Node.js package manager. No prerequisites other than having Node.js and npm installed are required. The command will download and install the 'debug' module locally for use in your project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install debug\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-compilation-targets with Yarn - Shell\nDESCRIPTION: This shell snippet installs the @babel/helper-compilation-targets package using yarn. It assumes yarn is installed and run from within a JavaScript/Node.js project directory. The key parameter is the package name. The command adds @babel/helper-compilation-targets as a dependency to the project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-compilation-targets/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/helper-compilation-targets\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-validator-option with npm in Shell\nDESCRIPTION: This shell snippet outlines how to install the @babel/helper-validator-option package using npm. It is essential for JavaScript and Babel users who need option validation functionality. Running this command adds the dependency to your project's package.json file, enabling access to validator features. Use in a terminal from your project's root.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-validator-option/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @babel/helper-validator-option\n\n```\n\n----------------------------------------\n\nTITLE: Checking DecA(I)de API AI Service Status - Bash\nDESCRIPTION: This curl command queries the local DecA(I)de API to check the operational status of the Azure OpenAI integration. Users must ensure the DecA(I)de API service is running at localhost:3000. On success, the API returns a JSON object indicating service status, deployment, and an informational message.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/AZURE_OPENAI_SETUP.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/api/ai/status\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting for encodeurl (Shell)\nDESCRIPTION: Provides the npm commands typically used to execute the test suite (`npm test`) and run the code linter (`npm run lint`) for the project. Assumes these scripts are defined in the `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/encodeurl/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Using the js-yaml Command-Line Interface\nDESCRIPTION: Shows the command-line usage instructions for the globally installed `js-yaml` executable. It details positional arguments (the YAML file) and optional flags for help, version, compact error display, and error tracing.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-yaml/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-optional-chaining with npm\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-optional-chaining` package as a development dependency using the npm package manager. The `--save-dev` flag ensures it's added to the `devDependencies` section of the `package.json` file. Requires npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-optional-chaining/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-optional-chaining\n```\n\n----------------------------------------\n\nTITLE: Installing debug library using npm (Bash)\nDESCRIPTION: Installs the 'debug' Node.js package globally or locally using the Node Package Manager (npm). This command downloads and installs the library and its dependencies from the npm registry.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install debug\n```\n\n----------------------------------------\n\nTITLE: Installing utils-merge via npm (Bash)\nDESCRIPTION: Shows the command to install the 'utils-merge' Node.js package using the Node Package Manager (npm). This command downloads and installs the package, making its functionality available to your project or system-wide depending on flags used (though none are shown here). Requires npm to be installed and accessible in the shell environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/utils-merge/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install utils-merge\n```\n\n----------------------------------------\n\nTITLE: Installing jest-validate via npm (Bash)\nDESCRIPTION: This command installs the jest-validate package and adds it as a dependency to your project's package.json file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save jest-validate\n```\n\n----------------------------------------\n\nTITLE: Installing the cookie Package using npm (Shell)\nDESCRIPTION: Demonstrates how to install the 'cookie' Node.js module via npm using a shell command. No dependencies besides npm itself are required. This is a prerequisite step before any further Node.js or JavaScript usage of the 'cookie' module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install cookie\n```\n\n----------------------------------------\n\nTITLE: Importing pretty-format using CommonJS (JavaScript)\nDESCRIPTION: Imports the `format` function from the `pretty-format` library using the CommonJS `require` syntax and assigns it to the `prettyFormat` constant via destructuring and renaming. This is suitable for Node.js environments or projects using CommonJS modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Installing path-exists via npm\nDESCRIPTION: This shell command uses npm (Node Package Manager) to download and install the `path-exists` module and add it as a dependency to your Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-exists/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install path-exists\n```\n\n----------------------------------------\n\nTITLE: Installing path-is-absolute via npm\nDESCRIPTION: This shell command installs the 'path-is-absolute' Node.js package as a project dependency using the Node Package Manager (npm). The '--save' flag ensures the package is added to the project's 'dependencies' in the package.json file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-is-absolute/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save path-is-absolute\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the Forwarded Module with npm in Shell\nDESCRIPTION: This command runs the test suite defined for the module using npm. It expects that the current directory contains a valid Node.js project with tests configured (e.g., via a test script in package.json). The command outputs the results of the tests to help verify correct installation and functionality of the \"forwarded\" module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/forwarded/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Displaying Parsed Source Map JSON Objects in JavaScript\nDESCRIPTION: Provides an example output of the parsed and modified source map JSON objects resulting from using 'convert-source-map' to extract and alter properties. The snippet serves to clarify expected outcomes and does not require external dependencies. Inputs are not needed as this illustrates example output.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/convert-source-map/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"version\":3,\"file\":\"build/foo.min.js\",\"sources\":[\"src/foo.js\"],\"names\":[],\"mappings\":\"AAAA\",\"sourceRoot\":\"/\"}\n{\"version\":3,\"file\":\"build/foo.min.js\",\"sources\":[\"SRC/FOO.JS\"],\"names\":[],\"mappings\":\"AAAA\",\"sourceRoot\":\"/\"}\n```\n\n----------------------------------------\n\nTITLE: Requiring Bytes Package - JavaScript\nDESCRIPTION: Shows how to import the 'bytes' module into a JavaScript/Node.js file using the CommonJS 'require' statement. This is the required first step to gain access to the exported functions (`bytes`, `bytes.format`, `bytes.parse`) detailed in the following examples.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/bytes/Readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\\nvar bytes = require('bytes');\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the content-disposition npm package\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `content-disposition` library and add it as a dependency to the current Node.js project. It requires npm and Node.js to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/content-disposition/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install content-disposition\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser-Side FormData Polyfill - JavaScript\nDESCRIPTION: This snippet shows how to import the browser FormData polyfill. No parameters are required. Simply importing the module conditionally replaces the native FormData in browsers, providing spec-compliant support and monkey-patching 'XMLHttpRequest.prototype.send', 'fetch', and 'navigator.sendBeacon' to use Blob-backed FormData when necessary. No output is directly produced by this statement.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/formdata-polyfill/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'formdata-polyfill' // that's it\n```\n\n----------------------------------------\n\nTITLE: Linting TypeScript Codebase - Bash\nDESCRIPTION: Runs TypeScript lint checks on the codebase via npm. Detects coding errors, style issues, or type mismatches that might prevent building or running the app. Ensures code quality prior to builds or deployment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/GETTING_STARTED.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-transform-react-jsx-source with yarn (Shell)\nDESCRIPTION: This command installs the `@babel/plugin-transform-react-jsx-source` Babel plugin as a development dependency using the yarn package manager. The `--dev` flag adds the package to `devDependencies` in the `package.json` file. The plugin enhances JSX debugging by embedding source location data (file name and line number) into elements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-transform-react-jsx-source/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-transform-react-jsx-source --dev\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/generator via NPM in Shell\nDESCRIPTION: This snippet illustrates how to install the @babel/generator package as a development dependency in a project using npm. The command must be run from the project's root directory and requires a pre-existing package.json file. The command fetches the package from the npm registry and adds it to the devDependencies section.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/generator/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/generator\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Helper Module Transforms via npm (Shell)\nDESCRIPTION: Demonstrates how to install the @babel/helper-module-transforms package using npm, the Node.js package manager. This command fetches and adds the specified helper module as a dependency in the current project, updating the package.json and package-lock.json files accordingly. No prerequisites are required beyond having Node.js and npm installed; run this command within your project directory, and it will download the helper utilities needed for Babel ES6 module transformations.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-module-transforms/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/helper-module-transforms\n```\n\n----------------------------------------\n\nTITLE: Importing the ee-first Module in JavaScript\nDESCRIPTION: This snippet shows how to import the `ee-first` library into a Node.js application using the `require` function, making its functionality available via the `first` variable.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ee-first/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar first = require('ee-first')\n```\n\n----------------------------------------\n\nTITLE: Installing ansi-escapes using npm\nDESCRIPTION: This shell command installs the `ansi-escapes` package using the Node Package Manager (npm). This is the standard way to add the library as a dependency to a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ansi-escapes/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install ansi-escapes\n```\n\n----------------------------------------\n\nTITLE: Invalid Chromium Version Handling with chromiumToElectron (Node.js)\nDESCRIPTION: Explains behavior when querying with an unsupported Chromium version in chromiumToElectron. The function returns undefined, indicating no corresponding Electron version was found, which is critical for robust error handling. Requires an e2c module.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/electron-to-chromium/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar electronVersion = e2c.chromiumToElectron('10');\n// electronVersion is undefined\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helpers using npm (Shell)\nDESCRIPTION: This shell command installs the @babel/helpers package using the Node Package Manager (npm). The '--save-dev' flag specifies that the package is a development dependency, adding it to the 'devDependencies' section of the project's package.json file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helpers/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/helpers\n```\n\n----------------------------------------\n\nTITLE: Example Output for Debug Namespace Enable/Disable - Shell\nDESCRIPTION: Shows the expected output generated by the previous JavaScript snippet when enabling and disabling a debug namespace. Useful for validation or illustration in documentation. No dependencies. Output illustrates how namespace enabling affects the boolean result.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/traverse/node_modules/debug/README.md#_snippet_13\n\nLANGUAGE: \nCODE:\n```\n1 false\n2 true\n3 false\n```\n\n----------------------------------------\n\nTITLE: Installing Express.js via npm in Console\nDESCRIPTION: This console command installs the Express.js package as a dependency in a Node.js project by using npm (the Node.js package manager). It requires Node.js and npm to be pre-installed. Executing this command will add 'express' to the node_modules directory and update the package.json dependencies. No parameters are required and no output is expected unless there is an error during installation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/Readme.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ npm install express\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Integration Environment Variables\nDESCRIPTION: Lists the required environment variables needed to configure the Azure OpenAI integration within the application backend. These include the API key (`AZURE_OPENAI_KEY`), the service endpoint URL (`AZURE_OPENAI_ENDPOINT`), and the specific model deployment ID (`AZURE_OPENAI_DEPLOYMENT`).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n- `AZURE_OPENAI_KEY` - API key for Azure OpenAI\n- `AZURE_OPENAI_ENDPOINT` - Azure OpenAI service endpoint URL\n- `AZURE_OPENAI_DEPLOYMENT` - Deployment ID for the specific model to use\n```\n\n----------------------------------------\n\nTITLE: Importing js-tokens Before Version 3.0.0\nDESCRIPTION: This JavaScript snippet shows the method for importing the js-tokens library and accessing its `matchToToken` function prior to version 3.0.0. This approach involved accessing `matchToToken` as a property bolted onto the default exported regex, which could trigger V8 performance issues.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport jsTokens from \"js-tokens\"\n// or:\nvar jsTokens = require(\"js-tokens\")\nvar matchToToken = jsTokens.matchToToken\n```\n```\n\n----------------------------------------\n\nTITLE: Running proxy-addr Test Suite with npm in Shell\nDESCRIPTION: Shows how to execute the test suite of the proxy-addr module using npm. It assumes the presence of test scripts as defined in the package and requires prior installation. Outputs include test results and coverage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/proxy-addr/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Babel Preset with Yarn and Node.js - Shell\nDESCRIPTION: This snippet shows how contributors can run test cases for the Babel preset using yarn and node. By executing 'yarn node test/index.js', all syntax tests defined in the project will be run. This requires the presence of yarn, Node.js, and that the test/index.js file exists. Output will be determined by test results.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/babel-preset-current-node-syntax/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn node test/index.js\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for Cookie Parsing - Shell\nDESCRIPTION: This shell snippet demonstrates how to run the JavaScript-based benchmarks for the HTTP cookie parsing library using npm scripts. It details the dependencies involved, the Node.js and module versions, and the measured throughput for parsing cookies from multiple popular domains and generic input cases. Expected input is invoking 'npm run bench', and the output consists of detailed operations-per-second statistics for various test scenarios. The benchmarks require Node.js and the proper npm dependencies listed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cookie/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run bench\n\n> cookie@0.5.0 bench\n> node benchmark/index.js\n\n  node@18.18.2\n  acorn@8.10.0\n  ada@2.6.0\n  ares@1.19.1\n  brotli@1.0.9\n  cldr@43.1\n  icu@73.2\n  llhttp@6.0.11\n  modules@108\n  napi@9\n  nghttp2@1.57.0\n  nghttp3@0.7.0\n  ngtcp2@0.8.1\n  openssl@3.0.10+quic\n  simdutf@3.2.14\n  tz@2023c\n  undici@5.26.3\n  unicode@15.0\n  uv@1.44.2\n  uvwasi@0.0.18\n  v8@10.2.154.26-node.26\n  zlib@1.2.13.1-motley\n\n> node benchmark/parse-top.js\n\n  cookie.parse - top sites\n\n  14 tests completed.\n\n  parse accounts.google.com x 2,588,913 ops/sec ±0.74% (186 runs sampled)\n  parse apple.com           x 2,370,002 ops/sec ±0.69% (186 runs sampled)\n  parse cloudflare.com      x 2,213,102 ops/sec ±0.88% (188 runs sampled)\n  parse docs.google.com     x 2,194,157 ops/sec ±1.03% (184 runs sampled)\n  parse drive.google.com    x 2,265,084 ops/sec ±0.79% (187 runs sampled)\n  parse en.wikipedia.org    x   457,099 ops/sec ±0.81% (186 runs sampled)\n  parse linkedin.com        x   504,407 ops/sec ±0.89% (186 runs sampled)\n  parse maps.google.com     x 1,230,959 ops/sec ±0.98% (186 runs sampled)\n  parse microsoft.com       x   926,294 ops/sec ±0.88% (184 runs sampled)\n  parse play.google.com     x 2,311,338 ops/sec ±0.83% (185 runs sampled)\n  parse support.google.com  x 1,508,850 ops/sec ±0.86% (186 runs sampled)\n  parse www.google.com      x 1,022,582 ops/sec ±1.32% (182 runs sampled)\n  parse youtu.be            x   332,136 ops/sec ±1.02% (185 runs sampled)\n  parse youtube.com         x   323,833 ops/sec ±0.77% (183 runs sampled)\n\n> node benchmark/parse.js\n\n  cookie.parse - generic\n\n  6 tests completed.\n\n  simple      x 3,214,032 ops/sec ±1.61% (183 runs sampled)\n  decode      x   587,237 ops/sec ±1.16% (187 runs sampled)\n  unquote     x 2,954,618 ops/sec ±1.35% (183 runs sampled)\n  duplicates  x   857,008 ops/sec ±0.89% (187 runs sampled)\n  10 cookies  x   292,133 ops/sec ±0.89% (187 runs sampled)\n  100 cookies x    22,610 ops/sec ±0.68% (187 runs sampled)\n\n```\n\n----------------------------------------\n\nTITLE: Testing with npm - Node.js - Shell\nDESCRIPTION: Runs the package's test suite using the 'npm test' command to verify correct behavior and integration of the 'vary' module. Requires a valid test script defined in package.json and assumes all development dependencies are installed. Outputs test results to the console.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vary/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Decorative Component with Memphis Pattern Decorators in React (TSX)\nDESCRIPTION: A reusable functional React component (EnhancedCard) that renders a Card with Memphis decorator <div>s inside. Adding elements with the .decorator class makes them appear with Memphis styles when the class is activated on a parent. The component receives standard children and className props, and decorator visibility is managed by CSS.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-UI-Issue-Fixing-Guide-that-addresses-your-reported-interface-bugs-and-exp-1742708022395.txt#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nfunction EnhancedCard({ children, className, ...props }: CardProps) {\n  return (\n    <div className={`card ${className}`}>\n      {/* Memphis decorators */}\n      <div className=\"decorator decorator-1\"></div>\n      <div className=\"decorator decorator-2\"></div>\n      <div className=\"decorator decorator-3\"></div>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrative Colored Deprecation Message Output on STDERR (Text)\nDESCRIPTION: Visual representation of the colored output format for deprecation messages written to STDERR by the 'depd' module when the terminal supports colors. It highlights the namespace, message, and call site location.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\n----------------------------------------\n\nTITLE: Unambiguous Division Examples\nDESCRIPTION: Shows examples of simple division (`var foo = 2/g`) and division assignment (`foo /= 2`). These are typically not ambiguous for `js-tokens` because regex literals cannot contain unescaped newlines, helping to differentiate them when the expression ends at the line terminator.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/js-tokens/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nvar foo = 2/g\nfoo /= 2\n```\n\n----------------------------------------\n\nTITLE: Dynamically Requiring View Engine Module in Node.js (JavaScript)\nDESCRIPTION: Introduced in version 0.6.0, this snippet demonstrates dynamically requiring a Node.js module based on a file extension pattern (e.g., 'foo.engine.html' requires 'engine'). This allows for extensible view engine support where the required module exports the engine's rendering capabilities. The framework caches the module after the first require.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('engine')\n```\n\n----------------------------------------\n\nTITLE: Defining Default Locales for Date Prompt in JavaScript\nDESCRIPTION: Example object defining the default English locales used by the 'date' prompt. It includes arrays for full and short month names ('months', 'monthsShort') and full and short weekday names ('weekdays', 'weekdaysShort'). This structure can be used to provide custom localization.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/prompts/readme.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  months: [\n    'January', 'February', 'March', 'April',\n    'May', 'June', 'July', 'August',\n    'September', 'October', 'November', 'December'\n  ],\n  monthsShort: [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ],\n  weekdays: [\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n    'Thursday', 'Friday', 'Saturday'\n  ],\n  weekdaysShort: [\n    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js --preserve-symlinks Flag Support Using node-supports-preserve-symlinks-flag (JavaScript)\nDESCRIPTION: This snippet demonstrates how to require the node-supports-preserve-symlinks-flag package and use it to determine if the current environment supports the --preserve-symlinks Node.js flag. The variable supportsPreserveSymlinks is asserted against expected values (null for browsers, false for Node.js versions before 6.2, true for versions 6.2 and above). Dependencies include the 'node-supports-preserve-symlinks-flag' and 'assert' modules. The input is the runtime environment, and the output is a boolean or null indicating support; limitations depend on the running context and Node.js version.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/supports-preserve-symlinks-flag/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar supportsPreserveSymlinks = require('node-supports-preserve-symlinks-flag');\\nvar assert = require('assert');\\n\\nassert.equal(supportsPreserveSymlinks, null); // in a browser\\nassert.equal(supportsPreserveSymlinks, false); // in node < v6.2\\nassert.equal(supportsPreserveSymlinks, true); // in node v6.2+\n```\n\n----------------------------------------\n\nTITLE: Requiring iMurmurHash Module in Node.js (JavaScript)\nDESCRIPTION: Illustrates how to import the `imurmurhash` module within a Node.js application after installing it via npm. The `require` function loads the module, making its `MurmurHash3` functionality available.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/imurmurhash/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMurmurHash3 = require('imurmurhash');\n```\n\n----------------------------------------\n\nTITLE: Importing finalhandler in Node.js\nDESCRIPTION: Imports the finalhandler module into a Node.js application. This makes the finalhandler function available for use in creating HTTP server logic.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/finalhandler/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar finalhandler = require('finalhandler')\n```\n\n----------------------------------------\n\nTITLE: Installing Verb and Generating README Documentation (Shell)\nDESCRIPTION: This command installs the `verb` command-line tool and the `verb-generate-readme` plugin globally using `npm install -g`. It specifically installs the development branch of `verb`. After installation, it runs the `verb` command, which processes a template file (like `.verb.md`) to generate the project's README.md. Requires Node.js and npm, and assumes a `.verb.md` template exists.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/braces/README.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Helper Validator Identifier with npm - Shell\nDESCRIPTION: This snippet shows how to install the @babel/helper-validator-identifier package using npm, the Node.js package manager. It adds the package as a dependency in the project's package.json file. The command should be run in a terminal from the root directory of your Node.js project. No additional configuration is required unless your project has specific version requirements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-validator-identifier/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/helper-validator-identifier\n```\n\n----------------------------------------\n\nTITLE: Running Linting and Tests for require-directory (Bash)\nDESCRIPTION: Provides the npm commands commonly used in the development workflow of the `require-directory` package itself. `npm run lint` checks code style, and `npm test` executes the unit tests. Requires dev dependencies to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/require-directory/README.markdown#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Acorn from Source - Shell\nDESCRIPTION: This shell snippet demonstrates how to fetch the Acorn source code using git, change into the cloned directory, and install its dependencies using npm. Users must have git and npm installed on their system. This workflow is intended for developers who wish to build Acorn from source or contribute to its core, resulting in a ready-to-use Acorn directory with all node modules installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/acornjs/acorn.git\ncd acorn\nnpm install\n\n```\n\n----------------------------------------\n\nTITLE: Fetching User Gamification Stats (TypeScript Signature)\nDESCRIPTION: This TypeScript code snippet defines the asynchronous function signature for `getUserStats`. It is intended to fetch the `UserStats` object for the current user, likely by making an API call to a `/api/gamification` endpoint or potentially falling back to `localStorage`. The implementation details are omitted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getUserStats(): Promise<UserStats> {\n  // fetch from /api/gamification or localStorage fallback\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Backend Node.js Project with npm in JavaScript\nDESCRIPTION: This snippet initializes a new Node.js backend project using npm's init command. It sets up the package.json file, which is required for dependency management and script definitions. After this, developers typically install additional packages (such as Express, Azure SDKs, and OpenAI SDK) before implementing backend logic. No inputs are required; outputs are the project structure and package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742617839046.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported SemVer Specification Version in JavaScript\nDESCRIPTION: This code demonstrates importing the `semver` library and accessing its `SEMVER_SPEC_VERSION` constant. It logs the specific Semantic Versioning specification (e.g., \"2.0.0\") that the library implements.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver');\n\nconsole.log('We are currently using the semver specification version:', semver.SEMVER_SPEC_VERSION);\n```\n\n----------------------------------------\n\nTITLE: Refining Color System Definition in TypeScript\nDESCRIPTION: Shows an incomplete TypeScript snippet within the `applyTheme` function in `theme-controller.ts`, likely intended to define a more comprehensive color system. It starts defining a `colorSystems` object, beginning with the 'marketing' theme, including not just primary/secondary/accent but also light, medium, and dark variants for more granular control over theme colors.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport function applyTheme(appearance: AppearanceSettings): AppearanceSettings {\n  const colorSystems = {\n    marketing: {\n      primary: '#EF4444', secondary: '#FCA5A5', accent: '#B91C1C',\n      light: '#FEF2F2', medium: '#FEE2E2', dark: '#DC2626',\n```\n\n----------------------------------------\n\nTITLE: Shared Code Project Structure\nDESCRIPTION: Shows the structure for code shared between the frontend and backend applications. This directory primarily contains the data model definitions (`schema.ts`), likely using Drizzle ORM schema builder, ensuring consistency across the stack.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/MUSTREAD_DEVELOPER_GUIDE.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nshared/\n└── schema.ts             # Data model definitions shared between frontend and backend\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests with npm in Bash\nDESCRIPTION: Shows the bash command to execute the suite of automated package tests using npm. Assumes Node.js and npm are installed. Produces output according to the package's configured test runner (e.g., Jest, Mocha, etc.). No arguments are required for basic usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/v8-to-istanbul/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Abort Controller package using npm\nDESCRIPTION: This command installs the `@azure/abort-controller` library using the Node Package Manager (npm). It requires Node.js and npm to be pre-installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/abort-controller/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/abort-controller\n```\n\n----------------------------------------\n\nTITLE: Mapping tslib in tsconfig.json for Bower - JSON\nDESCRIPTION: Illustrates tsconfig.json configuration for mapping the tslib module when using Bower. Sets module to 'amd', enables importHelpers, and provides a paths mapping to the location of tslib's declaration file. Required for proper resolution of tslib when using non-standard package managers.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/tslib/README.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"amd\",\n        \"importHelpers\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"tslib\" : [\"bower_components/tslib/tslib.d.ts\"]\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing deepmerge via npm in shell\nDESCRIPTION: This shell command installs the deepmerge library using npm. It should be run in the terminal to add deepmerge as a dependency in a Node.js project. No other parameters are required. The output will update the project's package.json and download the deepmerge package.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/deepmerge/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install deepmerge\n```\n\n----------------------------------------\n\nTITLE: Installing StackUtils via npm in Shell\nDESCRIPTION: Demonstrates how to install the stack-utils library using npm via the command line. This is a prerequisite for any code using StackUtils in Node.js. The command fetches the latest stable version and adds it to your project's dependencies. No parameters are required, but you must have npm installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/stack-utils/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save stack-utils\n```\n\n----------------------------------------\n\nTITLE: Output Format of diffLinesUnified2() Ignoring Indentation\nDESCRIPTION: Shows the output of the `diffLinesUnified2` example, where differences in indentation for the `text` and `time` properties within the nested `payload` object are ignored because the non-indented comparison lines matched. These lines are marked as common, while the structural difference (addition of `payload` object) is highlighted.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-diff/README.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\n+ Received\n\n  Object {\n+   payload: Object {\n      text: 'Ignore indentation in serialized object',\n      time: '2019-09-19T12:34:56.000Z',\n+   },\n    type: 'CREATE_ITEM',\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Syntax JSON Strings with Yarn - Shell\nDESCRIPTION: Adds the @babel/plugin-syntax-json-strings package as a development dependency using yarn. This sets up the Babel plugin in the project, permitting the parsing of U+2028 and U+2029 Unicode separators. Requires yarn to be installed and executed within a valid project folder.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/plugin-syntax-json-strings/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/plugin-syntax-json-strings --dev\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions with npm - Shell\nDESCRIPTION: This command installs the '@types/qs' package as a development dependency using npm. It enables TypeScript projects to utilize type definitions for the 'qs' module, offering type safety and improved IDE support. Run this command in your project root directory; no additional parameters are required. The package has no external dependencies and must be installed before importing 'qs' types in TypeScript files.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/qs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/qs\n```\n\n----------------------------------------\n\nTITLE: Parser Syntax Error Message for Missing Curly Brace in JavaScript\nDESCRIPTION: Shows the detailed parser error output produced when an expected closing curly brace is missing, captured as a bash terminal message. No specific dependencies required. The input is a JavaScript module with a syntax error; the output is the full error message as printed in the terminal. Useful for debugging parser behavior and tools integration.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n# So in the case of a missing ending curly (`}`)\\nModule build failed: SyntaxError: Unexpected token, expected } (30:0)\\n  28 |   }\\n  29 |\\n> 30 |\\n     | ^\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/template with yarn (Shell)\nDESCRIPTION: This shell command uses the yarn package manager to install the @babel/template package. The `--dev` flag indicates that the package is a development dependency and should be listed under `devDependencies` in the project's `package.json` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/template/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/template --dev\n```\n\n----------------------------------------\n\nTITLE: AST Interface for ClassProperty with Computed Names (JavaScript)\nDESCRIPTION: Shows the abstract syntax tree (AST) interface extension for class properties with computed keys as introduced in a Babylon update. Intended for documentation, not for execution. It details the attributes on a 'ClassProperty' node as used in ASTs generated by Babel.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_40\n\nLANGUAGE: js\nCODE:\n```\n// AST\\ninterface ClassProperty <: Node {\\n  type: \"ClassProperty\";\\n  key: Identifier;\\n  value: Expression;\\n  computed: boolean; // added\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESTree Type Definitions with npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @types/estree package as a development dependency via npm. This package is required for adding ESTree type definitions to TypeScript or JavaScript projects, enabling strong typing and improved editor support when manipulating JavaScript syntax trees. The command accepts no parameters and requires npm (Node.js package manager); on success, it does not produce explicit program output but updates package.json and node_modules accordingly.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/estree/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/estree\n```\n\n----------------------------------------\n\nTITLE: Installing postgres-array via npm - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the 'postgres-array' package from NPM using the npm install command. It is required to make the postgres-array parsing library available for use in any Node.js-based project. The command should be run in the root directory of your project, and it will add postgres-array as a dependency in your package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-array/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save postgres-array\n```\n\n----------------------------------------\n\nTITLE: Escaping Object Literals from the Command Line using jsesc in Bash\nDESCRIPTION: Illustrates using the '-o' or '--object' option with the jsesc command-line tool in Bash. This option allows escaping strings within an object literal provided as input.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ jsesc --object '{ \"föo\": \"♥\", \"bår\": \"𝌆 baz\" }'\n{'f\\xF6o':'\\u2665','b\\xE5r':'\\uD834\\uDF06 baz'}\n```\n\n----------------------------------------\n\nTITLE: Installing dunder-proto via npm (Shell)\nDESCRIPTION: Demonstrates how to install the 'dunder-proto' package as a project dependency using the Node Package Manager (npm). The `--save` flag ensures the package is added to the project's dependencies in `package.json`.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/dunder-proto/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save dunder-proto\n```\n\n----------------------------------------\n\nTITLE: Installing @azure/core-paging using npm (JavaScript)\nDESCRIPTION: Demonstrates how to install the Azure Core Paging library using the Node Package Manager (npm). This command adds the package as a dependency to your Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/core-paging/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nnpm install @azure/core-paging\n```\n```\n\n----------------------------------------\n\nTITLE: Installing has-flag with npm - Shell\nDESCRIPTION: Demonstrates how to install the has-flag package from npm. This step is required before using has-flag in any Node.js project. Run this command in your project directory to add the dependency to your node_modules and package.json.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/has-flag/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install has-flag\n```\n\n----------------------------------------\n\nTITLE: Example Validation Warning Output (Bash/Console)\nDESCRIPTION: Illustrates the console output generated by jest-validate when an unknown configuration option ('transformx') is detected. It includes the warning message, the problematic option and its value, a suggestion for fixing it, and any custom comment provided in the options.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-validate/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n● Validation Warning:\n\n  Unknown option transformx with value \"<rootDir>/node_modules/babel-jest\" was found.\n  This is either a typing error or a user mistake. Fixing it will remove this message.\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Installing semver package using npm (Bash)\nDESCRIPTION: Shows how to install the `semver` package globally or locally using the Node Package Manager (npm). Requires npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-instrument/node_modules/semver/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install semver\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Logger via npm - JavaScript\nDESCRIPTION: Demonstrates how to install the @azure/logger package using npm. No programming dependencies are required other than Node.js and npm being installed. Run the given command in your project directory's terminal. Input: none (just run the command). Output: Installs the logger package and its dependencies, making it available for import.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@azure/logger/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/logger\n```\n\n----------------------------------------\n\nTITLE: Installing resolve-cwd via npm in Shell\nDESCRIPTION: Installs the resolve-cwd package from the npm registry using the npm command line interface. The package must be installed as a project dependency before it can be required or used in Node.js scripts.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve-cwd/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install resolve-cwd\n```\n\n----------------------------------------\n\nTITLE: Installing JSON5 via npm in Shell\nDESCRIPTION: This command installs the JSON5 package from npm into the current Node.js project. No further prerequisites are required other than a Node.js and npm environment. The result is the availability of the JSON5 module for use in JavaScript code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install json5\n```\n\n----------------------------------------\n\nTITLE: Installing postgres-date with npm (Bash)\nDESCRIPTION: Demonstrates how to install the postgres-date package using npm. Users must have npm installed on their system. This command downloads and adds postgres-date to the current project as a dependency, enabling its usage in code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-date/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save postgres-date\n```\n\n----------------------------------------\n\nTITLE: semver Command-Line Utility Usage Reference - Shell\nDESCRIPTION: Lists the help output for the 'semver' command-line tool, covering available command-line options such as specifying ranges, incrementing versions, handling pre-IDs, and controlling how versions are interpreted or coerced. Users should have 'semver' installed and invoke it from the shell; outputs give guidance on sorting, matching, incrementing, and filtering versions directly from the command line.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/semver/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ semver -h\n\nA JavaScript implementation of the https://semver.org/ specification\nCopyright Isaac Z. Schlueter\n\nUsage: semver [options] <version> [<version> [...]]\nPrints valid versions sorted by SemVer precedence\n\nOptions:\n-r --range <range>\n        Print versions that match the specified range.\n\ni --increment [<level>]\n        Increment a version by the specified level.  Level can\n        be one of: major, minor, patch, premajor, preminor,\n        prepatch, or prerelease.  Default level is 'patch'.\n        Only one version may be specified.\n\n--preid <identifier>\n        Identifier to be used to prefix premajor, preminor,\n        prepatch or prerelease version increments.\n\n-l --loose\n        Interpret versions and ranges loosely\n\n-p --include-prerelease\n        Always include prerelease versions in range matching\n\n-c --coerce\n        Coerce a string into SemVer if possible\n        (does not imply --loose)\n\n--rtl\n        Coerce version strings right to left\n\n--ltr\n        Coerce version strings left to right (default)\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no satisfying versions are found, then exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Acorn from Source - Shell Script\nDESCRIPTION: These shell commands demonstrate downloading the acorn source repository, navigating into it, and installing dependencies via npm. This workflow is used for developing or building acorn from source. Required tools: git and npm. The output is a locally set up repository with installed node modules.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/acorn-walk/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/acornjs/acorn.git\ncd acorn\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Nightly Build Using npm - Bash\nDESCRIPTION: This snippet shows how to install the nightly build of TypeScript as a development dependency, allowing users to experiment with the latest unreleased features. Prerequisites are Node.js and npm, with npm fetching the prerelease version via the @next tag. As with the stable version, the -D flag places TypeScript in devDependencies, and no additional parameters are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/typescript/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D typescript@next\n```\n\n----------------------------------------\n\nTITLE: Installing strip-final-newline with NPM - Shell\nDESCRIPTION: Installs the 'strip-final-newline' package globally or locally using the npm package manager. To use this package, ensure Node.js and npm are already installed on your system. No additional parameters are needed. The expected result is the availability of 'strip-final-newline' as a dependency in your project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/strip-final-newline/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install strip-final-newline\n```\n\n----------------------------------------\n\nTITLE: Installing is-number package using NPM\nDESCRIPTION: This command installs the `is-number` package and saves it as a dependency in the project's `package.json` file using the Node Package Manager (NPM).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save is-number\n```\n\n----------------------------------------\n\nTITLE: Installing AnyMatch using npm - Shell Script\nDESCRIPTION: Demonstrates how to install the AnyMatch module from npm using a shell command. No prerequisites except for having Node.js and npm installed. The command installs AnyMatch as a project dependency. Outputs a confirmation in the terminal if successful.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/anymatch/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install anymatch\n```\n\n----------------------------------------\n\nTITLE: Implementing Memphis Visual Style Rules (CSS)\nDESCRIPTION: Contains CSS rules within `client/src/styles/visual-styles.css` to implement the Memphis design style. It includes styles for hiding/showing decorators (`.memphis-style .decorator`), defining background patterns using CSS gradients and variables (`.memphis-pattern-1`, `.memphis-pattern-2`), and positioning decorative elements (`.decorator-1`) on components like cards and buttons when the Memphis style is enabled via the `.memphis-style.enabled` classes.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-guide-summarizing-the-UI-issues-and-their-fixes-This-guide-is-meant-to-be--1742707670648.txt#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Memphis Design Style CSS */\n.memphis-style .decorator {\n  display: none;\n}\n.memphis-style.enabled .decorator {\n  display: block;\n}\n\n/* Example Memphis patterns */\n.memphis-pattern-1 {\n  background-image: radial-gradient(circle at 2px 2px, var(--color-secondary) 1px, transparent 0);\n  background-size: 20px 20px;\n}\n.memphis-pattern-2 {\n  background-image: linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary)), \n                    linear-gradient(45deg, var(--color-secondary) 25%, transparent 25%, transparent 75%, var(--color-secondary) 75%, var(--color-secondary));\n  background-size: 20px 20px;\n  background-position: 0 0, 10px 10px;\n  opacity: 0.1;\n}\n/* Decorative elements */\n.memphis-style.enabled .card,\n.memphis-style.enabled .button,\n.memphis-style.enabled .badge {\n  position: relative;\n  overflow: visible;\n}\n.memphis-style.enabled .decorator-1 {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: var(--color-secondary);\n  top: -10px;\n  right: -10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrative Plain Deprecation Message Output on STDERR (Text)\nDESCRIPTION: Visual representation of the plain text output format for deprecation messages written to STDERR by the 'depd' module when colors are not supported (e.g., redirected to a file). It includes a timestamp, namespace, message, and call site location.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/depd/Readme.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n----------------------------------------\n\nTITLE: Edge Case for Deprecated res.jsonp(status, num) in Express.js\nDESCRIPTION: Highlights an edge case `res.jsonp(status, num)` where the second argument is a number. Similar to `res.json`, migrating from the deprecated signature requires explicit chaining for this case.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nres.jsonp(status, num)\n```\n\n----------------------------------------\n\nTITLE: Flow: EmptyTypeAnnotation in JavaScript\nDESCRIPTION: Shows use of Flow's 'empty' type for a type alias, which represents an impossible type. Requires Flow setup. The key parameter is the type alias with 'empty'; the result is that 'T' can never be instantiated.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/parser/CHANGELOG.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\ntype T = empty;\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Levenshtein Implementations - Text\nDESCRIPTION: This section provides sample output from running the Levenshtein benchmark suite, listing the performance of 'leven' against other JS packages. The result shows operations per second, helping users choose an optimal implementation. Output is informational and requires no dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/leven/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n         165,926 op/s » leven\n         164,398 op/s » talisman\n           1,044 op/s » levenshtein-edit-distance\n             628 op/s » fast-levenshtein\n             497 op/s » levenshtein-component\n             195 op/s » ld\n             190 op/s » levenshtein\n             168 op/s » levdist\n              10 op/s » natural\n```\n\n----------------------------------------\n\nTITLE: Original Source File Throwing an Error - JavaScript\nDESCRIPTION: Represents the original (pre-transpiled) JavaScript that throws an error for demonstration. Used in demo to show how source-map-support remaps the stack trace to the original source file and line number.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map-support/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nthrow new Error('test'); // This is the original code\n```\n\n----------------------------------------\n\nTITLE: Defining SemVer Range Grammar - BNF\nDESCRIPTION: This snippet defines the grammar for semantic version range expressions in Backus-Naur Form (BNF). It specifies the valid structure for range sets, logical operations, hyphen ranges, comparators, version number tokens, tilde and caret modifiers, and prerelease/build metadata. Useful for parser authors, it outlines how a range string like \"1.2.x || >=1.4.0 <2.0.0\" can be tokenized and interpreted. This grammar assumes understanding of semantic version triplets, logical or (||), and various comparator operators. Inputs should be range fragments; outputs are valid parse trees or error states for invalid strings.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_12\n\nLANGUAGE: bnf\nCODE:\n```\nrange-set  ::= range ( logical-or range ) *\nlogical-or ::= ( ' ' ) * '||' ( ' ' ) *\nrange      ::= hyphen | simple ( ' ' simple ) * | ''\nhyphen     ::= partial ' - ' partial\nsimple     ::= primitive | partial | tilde | caret\nprimitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial\npartial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?\nxr         ::= 'x' | 'X' | '*' | nr\nnr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *\ntilde      ::= '~' partial\ncaret      ::= '^' partial\nqualifier  ::= ( '-' pre )? ( '+' build )?\npre        ::= parts\nbuild      ::= parts\nparts      ::= part ( '.' part ) *\npart       ::= nr | [-0-9A-Za-z]+\n```\n\n----------------------------------------\n\nTITLE: Validation Performance Benchmark Results (ValueCheck vs. Ajv vs. TypeCompiler)\nDESCRIPTION: This table displays benchmark data measuring the validation performance for various type structures. It compares the time taken in milliseconds (ms) by `ValueCheck`, Ajv, and TypeCompiler over 1,000,000 iterations for each type, showing the relative validation speed of the different libraries.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_65\n\nLANGUAGE: text\nCODE:\n```\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\n│ Literal_String             │  1000000   │ '     27 ms' │ '      6 ms' │ '      5 ms' │ '    1.20 x' │\n│ Literal_Number             │  1000000   │ '     23 ms' │ '     21 ms' │ '     11 ms' │ '    1.91 x' │\n│ Literal_Boolean            │  1000000   │ '     21 ms' │ '     20 ms' │ '     10 ms' │ '    2.00 x' │\n│ Primitive_Number           │  1000000   │ '     26 ms' │ '     19 ms' │ '     11 ms' │ '    1.73 x' │\n│ Primitive_String           │  1000000   │ '     25 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\n│ Primitive_String_Pattern   │  1000000   │ '    155 ms' │ '     49 ms' │ '     43 ms' │ '    1.14 x' │\n│ Primitive_Boolean          │  1000000   │ '     23 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\n│ Primitive_Null             │  1000000   │ '     24 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\n│ Object_Unconstrained       │  1000000   │ '    804 ms' │ '     35 ms' │ '     28 ms' │ '    1.25 x' │\n│ Object_Constrained         │  1000000   │ '   1041 ms' │ '     55 ms' │ '     41 ms' │ '    1.34 x' │\n│ Object_Vector3             │  1000000   │ '    380 ms' │ '     26 ms' │ '     20 ms' │ '    1.30 x' │\n│ Object_Box3D               │  1000000   │ '   1785 ms' │ '     65 ms' │ '     52 ms' │ '    1.25 x' │\n│ Object_Recursive           │  1000000   │ '   4984 ms' │ '    396 ms' │ '    114 ms' │ '    3.47 x' │\n│ Tuple_Primitive            │  1000000   │ '    168 ms' │ '     24 ms' │ '     16 ms' │ '    1.50 x' │\n│ Tuple_Object               │  1000000   │ '    673 ms' │ '     30 ms' │ '     26 ms' │ '    1.15 x' │\n│ Composite_Intersect        │  1000000   │ '    751 ms' │ '     28 ms' │ '     20 ms' │ '    1.40 x' │\n│ Composite_Union            │  1000000   │ '    489 ms' │ '     24 ms' │ '     16 ms' │ '    1.50 x' │\n│ Math_Vector4               │  1000000   │ '    259 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\n│ Math_Matrix4               │  1000000   │ '   1002 ms' │ '     40 ms' │ '     30 ms' │ '    1.33 x' │\n│ Array_Primitive_Number     │  1000000   │ '    252 ms' │ '     22 ms' │ '     15 ms' │ '    1.47 x' │\n│ Array_Primitive_String     │  1000000   │ '    227 ms' │ '     22 ms' │ '     18 ms' │ '    1.22 x' │\n│ Array_Primitive_Boolean    │  1000000   │ '    150 ms' │ '     23 ms' │ '     22 ms' │ '    1.05 x' │\n│ Array_Object_Unconstrained │  1000000   │ '   4754 ms' │ '     71 ms' │ '     64 ms' │ '    1.11 x' │\n│ Array_Object_Constrained   │  1000000   │ '   4787 ms' │ '    142 ms' │ '    123 ms' │ '    1.15 x' │\n│ Array_Object_Recursive     │  1000000   │ '  19088 ms' │ '   1735 ms' │ '    314 ms' │ '    5.53 x' │\n│ Array_Tuple_Primitive      │  1000000   │ '    650 ms' │ '     41 ms' │ '     31 ms' │ '    1.32 x' │\n│ Array_Tuple_Object         │  1000000   │ '   2770 ms' │ '     67 ms' │ '     55 ms' │ '    1.22 x' │\n│ Array_Composite_Intersect  │  1000000   │ '   2693 ms' │ '     50 ms' │ '     39 ms' │ '    1.28 x' │\n│ Array_Composite_Union      │  1000000   │ '   1982 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\n│ Array_Math_Vector4         │  1000000   │ '   1068 ms' │ '     40 ms' │ '     26 ms' │ '    1.54 x' │\n│ Array_Math_Matrix4         │  1000000   │ '   4609 ms' │ '    115 ms' │ '     88 ms' │ '    1.31 x' │\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up JSON5 Source Repository for Development\nDESCRIPTION: This shell snippet details the steps to set up the JSON5 source code for local development. The commands clone the GitHub repository, switch into its directory, and install dependencies via npm. Used for contributing or modifying JSON5 itself.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/json5/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/json5/json5\ncd json5\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Finding body-parser Owners using npm CLI\nDESCRIPTION: This shell command utilizes the Node Package Manager (npm) command-line interface to list the current owners of the `body-parser` package. This information is needed to identify the correct contacts for reporting security vulnerabilities according to the project's policy. Running this command requires npm to be installed and accessible in the environment.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/body-parser/SECURITY.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm owner ls body-parser\n```\n\n----------------------------------------\n\nTITLE: Installing semver via npm (Bash)\nDESCRIPTION: Demonstrates how to install the `semver` npm package using the Node Package Manager (npm) command line. Requires npm and Node.js to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/make-dir/node_modules/semver/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install semver\n```\n\n----------------------------------------\n\nTITLE: Generating Non-Uniform Random Integers Manually in JavaScript\nDESCRIPTION: This snippet demonstrates a potentially faster but less statistically sound method for generating random integers within a range. It uses the raw `unsafeNext()` output, scales it to [0, 1), multiplies by the range size, and floors the result. This approach can introduce bias and is generally not recommended when uniform distribution is required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pure-rand/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport prand from 'pure-rand';\n\nconst seed = 42;\nconst rng = prand.xoroshiro128plus(seed);\nconst rand = (min, max) => {\n  const out = (rng.unsafeNext() >>> 0) / 0x100000000;\n  return min + Math.floor(out * (max - min + 1));\n};\nconst firstDiceValue = rand(1, 6); // value in {1..6}, here: 6\n```\n\n----------------------------------------\n\nTITLE: Installing @jridgewell/set-array via npm\nDESCRIPTION: This command installs the `@jridgewell/set-array` package using the Node Package Manager (npm). It should be run in a terminal within a Node.js project directory to add the package as a project dependency.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/set-array/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @jridgewell/set-array\n```\n\n----------------------------------------\n\nTITLE: Installing encodeurl package using npm (Shell)\nDESCRIPTION: Shows the command to install the 'encodeurl' Node.js module via the npm package manager. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/send/node_modules/encodeurl/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install encodeurl\n```\n\n----------------------------------------\n\nTITLE: Example Console Output for Emoji Matching\nDESCRIPTION: This shows the expected console output when running the preceding Node.js code snippet. It lists each matched emoji sequence found in the sample text and the number of Unicode code points it consists of. Notice that some sequences are matched multiple times due to the global flag and the loop structure in the example code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/emoji-regex/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMatched sequence ⌚ — code points: 1\nMatched sequence ⌚ — code points: 1\nMatched sequence ↔️ — code points: 2\nMatched sequence ↔️ — code points: 2\nMatched sequence 👩 — code points: 1\nMatched sequence 👩 — code points: 1\nMatched sequence 👩🏿 — code points: 2\nMatched sequence 👩🏿 — code points: 2\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/core with npm (Shell)\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to install the `@babel/core` package. The `--save-dev` flag ensures it's added as a development dependency in the project's `package.json` file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/core/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/core\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Helper Module Imports with NPM - Shell\nDESCRIPTION: This shell command installs the @babel/helper-module-imports package as a dependency using npm. Users must have Node.js and npm already installed. After execution, the package is added to the project's `node_modules` and the dependency list in `package.json`. No additional parameters are required.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-module-imports/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @babel/helper-module-imports\n```\n\n----------------------------------------\n\nTITLE: Installing jsesc Globally using npm in Bash\nDESCRIPTION: Provides the command to install the jsesc command-line tool globally using the Node Package Manager (npm). This makes the 'jsesc' binary available in the system's PATH for shell usage.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jsesc/README.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g jsesc\n```\n\n----------------------------------------\n\nTITLE: Installing concat-map via npm\nDESCRIPTION: This command utilizes the Node Package Manager (npm) to install the `concat-map` module. Running this command in a terminal within a Node.js project directory will download and add the package to the project's dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/concat-map/README.markdown#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```\nnpm install concat-map\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Backend Project (Shell)\nDESCRIPTION: This command initializes a new Node.js project by creating a `package.json` file. It prompts the user for project details like name, version, description, entry point, etc. This is typically the first step when setting up a Node.js backend application in Replit or locally.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742621342991.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Logos and Links using HTML\nDESCRIPTION: Uses a series of HTML anchor (`<a>`) tags, each containing an image (`<img>`) tag, to display sponsor logos within a Markdown file. Each link points to the sponsor's website on Open Collective (e.g., `/debug/sponsor/N/website`), and the image source points to the sponsor's avatar SVG hosted by Open Collective (e.g., `/debug/sponsor/N/avatar.svg`). This structure is repeated for each sponsor listed, identified by an index number (0-29).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/debug/README.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Installing the 'resolve' Package using npm\nDESCRIPTION: Provides the shell command to install the 'resolve' Node.js package using the Node Package Manager (npm). This package contains the `resolve.sync` function documented in the file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/resolve/readme.markdown#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```sh\nnpm install resolve\n```\n```\n\n----------------------------------------\n\nTITLE: Installing supports-color via npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'supports-color' package and its dependencies into your project's 'node_modules' directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/jest-worker/node_modules/supports-color/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install supports-color\n```\n\n----------------------------------------\n\nTITLE: Installing @jridgewell/sourcemap-codec via npm (Bash)\nDESCRIPTION: Installs the `@jridgewell/sourcemap-codec` package using the Node Package Manager (npm). This command downloads and adds the package to your project's dependencies, making its functions available for import.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@jridgewell/sourcemap-codec/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @jridgewell/sourcemap-codec\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/generator via Yarn in Shell\nDESCRIPTION: This snippet demonstrates adding the @babel/generator package as a development dependency using yarn. It should be executed in a project initialized with yarn, with a package.json present. The command will download and add the package to the devDependencies, utilizing the yarn package manager.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/generator/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/generator --dev\n```\n\n----------------------------------------\n\nTITLE: Installing @types/graceful-fs via npm (Shell)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the TypeScript type definitions for the `graceful-fs` library and saves it as a development dependency (implied by `@types/`) in the project's `package.json`. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@types/graceful-fs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/graceful-fs\n```\n\n----------------------------------------\n\nTITLE: Installing sisteransi package using npm\nDESCRIPTION: Shows the command to install the `sisteransi` package using the Node Package Manager (npm). This is a prerequisite for using the library in a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sisteransi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install sisteransi\n```\n\n----------------------------------------\n\nTITLE: Installing source-map package with npm\nDESCRIPTION: Demonstrates how to install the `source-map` library for use in a Node.js environment using the Node Package Manager (npm). Requires npm and Node.js to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/source-map/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install source-map\n```\n\n----------------------------------------\n\nTITLE: Installing react-is via Yarn or NPM (Shell)\nDESCRIPTION: Demonstrates the installation of the react-is package using Yarn or NPM in a shell environment. Required dependencies include a Node.js project and either Yarn or NPM. The commands allow users to add the react-is package to their project's dependencies for future usage in JavaScript/TypeScript code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/react-is/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Yarn\\nyarn add react-is\\n\\n# NPM\\nnpm install react-is\n```\n\n----------------------------------------\n\nTITLE: Installing Side Channel List Package - Node.js Shell\nDESCRIPTION: Installs the 'side-channel-list' package via npm to enable adding side-channel storage capabilities for JavaScript values. No additional dependencies beyond Node.js and npm are required. Run this command in your project root directory to add the library to your dependencies.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/side-channel-list/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save side-channel-list\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-plugin-utils with yarn\nDESCRIPTION: This shell command uses the Yarn package manager to install the '@babel/helper-plugin-utils' package and add it as a dependency to the project. Requires Yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@babel/helper-plugin-utils/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @babel/helper-plugin-utils\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Verb for Picomatch - Shell\nDESCRIPTION: Command to install `verb` and its readme generator globally, and then generate the project's documentation. Requires Node.js and npm. Installs `verb` from the dev branch and `verb-generate-readme`, then runs `verb` to build the README from the template. Used by maintainers for updating project documentation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/picomatch/README.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g verbose/verb#dev verb-generate-readme && verb\n\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for JS Build\nDESCRIPTION: Displays benchmark performance results for the JavaScript build of the lexer. It includes module load time, cold run time for all samples, and warm run times for individual sample files and all samples combined, measured in milliseconds (ms).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/cjs-module-lexer/README.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nModule load time\n> 4ms\nCold Run, All Samples\ntest/samples/*.js (3635 KiB)\n> 299ms\n\nWarm Runs (average of 25 runs)\ntest/samples/angular.js (1410 KiB)\n> 13.96ms\ntest/samples/angular.min.js (303 KiB)\n> 4.72ms\ntest/samples/d3.js (553 KiB)\n> 6.76ms\ntest/samples/d3.min.js (250 KiB)\n> 4ms\ntest/samples/magic-string.js (34 KiB)\n> 0.64ms\ntest/samples/magic-string.min.js (20 KiB)\n> 0ms\ntest/samples/rollup.js (698 KiB)\n> 8.48ms\ntest/samples/rollup.min.js (367 KiB)\n> 5.36ms\n\nWarm Runs, All Samples (average of 25 runs)\ntest/samples/*.js (3635 KiB)\n> 40.28ms\n```\n\n----------------------------------------\n\nTITLE: Installing escalade via npm (Bash)\nDESCRIPTION: Command to install the `escalade` package using the Node Package Manager (npm) and save it as a project dependency. This command requires Node.js and npm to be installed on the system.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/escalade/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save escalade\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated res.jsonp(obj, status) Signature in Express.js\nDESCRIPTION: Illustrates the deprecated signature `res.jsonp(obj, status)` for sending a JSONP response with a specific status code. This order was deprecated in Express 4.2.0.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/express/History.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nres.jsonp(obj, status)\n```\n\n----------------------------------------\n\nTITLE: Accessing Object.prototype Properties (JavaScript)\nDESCRIPTION: Refers to accessing properties directly from the base JavaScript `Object.prototype`. A fix in version 2.0.1 addressed issues related to returning values from it, likely to prevent unintended prototype pollution or incorrect lookups when checking for status codes within the library.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/statuses/HISTORY.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nObject.prototype\n```\n\n----------------------------------------\n\nTITLE: Example Attribution Format for Sourced Content\nDESCRIPTION: Illustrates the recommended format for attributing content directly excerpted from official sources, such as the DECA Competitive Events Guide. This ensures proper citation and academic honesty when displaying source material.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Building-DecA-I-de-An-AI-Powered-DECA-Training-Platform-Step-by-Step-Blueprint-Introduction-Thi-1742612743564.txt#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n“Source: DECA Competitive Events Guide 2023”\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Data for Pretty-Format Testing (JavaScript)\nDESCRIPTION: This snippet declares a sample JavaScript object `val` containing a string property (`filter`) and an array property (`items`). The `items` array holds objects with `text` and `completed` properties. This object is used as input for subsequent `pretty-format` examples.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pretty-format/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Light Theme Selection Box Background in TSX\nDESCRIPTION: Illustrates the 'before' state of a React component (likely using Tailwind CSS) where the light theme selection box incorrectly applies a dark background (`dark:bg-white`) when the site is in dark mode. This snippet shows the problematic code within the `settings.tsx` file.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-Below-is-a-comprehensive-technical-implementation-document-that-a-developer-can-follow-to-completely-1742708346442.txt#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  className={`border ${\n    appearance.theme === \"light\"\n      ? 'border-primary ring-2 ring-primary/30'\n      : 'border-slate-200 dark:border-[var(--dark-border)]'\n  } rounded-lg overflow-hidden cursor-pointer shadow-sm transition-all hover:scale-[1.02] bg-white dark:bg-white`}\n  onClick={() => setAppearance(prev => ({ ...prev, theme: \"light\" }))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Compilation Performance Benchmark Results (Ajv vs. TypeCompiler)\nDESCRIPTION: This table displays benchmark data measuring the compilation performance for various type structures. It compares the time taken in milliseconds (ms) by Ajv and TypeCompiler over 1000 iterations for each type, highlighting the performance difference (often showing TypeCompiler as significantly faster).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@sinclair/typebox/readme.md#_snippet_64\n\nLANGUAGE: text\nCODE:\n```\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\n│ Literal_String             │    1000    │ '    257 ms' │ '      8 ms' │ '   32.13 x' │\n│ Literal_Number             │    1000    │ '    203 ms' │ '      4 ms' │ '   50.75 x' │\n│ Literal_Boolean            │    1000    │ '    183 ms' │ '      4 ms' │ '   45.75 x' │\n│ Primitive_Number           │    1000    │ '    174 ms' │ '      8 ms' │ '   21.75 x' │\n│ Primitive_String           │    1000    │ '    158 ms' │ '      9 ms' │ '   17.56 x' │\n│ Primitive_String_Pattern   │    1000    │ '    213 ms' │ '     13 ms' │ '   16.38 x' │\n│ Primitive_Boolean          │    1000    │ '    136 ms' │ '      6 ms' │ '   22.67 x' │\n│ Primitive_Null             │    1000    │ '    144 ms' │ '      6 ms' │ '   24.00 x' │\n│ Object_Unconstrained       │    1000    │ '   1176 ms' │ '     38 ms' │ '   30.95 x' │\n│ Object_Constrained         │    1000    │ '   1181 ms' │ '     31 ms' │ '   38.10 x' │\n│ Object_Vector3             │    1000    │ '    387 ms' │ '      8 ms' │ '   48.38 x' │\n│ Object_Box3D               │    1000    │ '   1693 ms' │ '     25 ms' │ '   67.72 x' │\n│ Tuple_Primitive            │    1000    │ '    470 ms' │ '     15 ms' │ '   31.33 x' │\n│ Tuple_Object               │    1000    │ '   1206 ms' │ '     17 ms' │ '   70.94 x' │\n│ Composite_Intersect        │    1000    │ '    567 ms' │ '     20 ms' │ '   28.35 x' │\n│ Composite_Union            │    1000    │ '    515 ms' │ '     21 ms' │ '   24.52 x' │\n│ Math_Vector4               │    1000    │ '    787 ms' │ '     10 ms' │ '   78.70 x' │\n│ Math_Matrix4               │    1000    │ '    386 ms' │ '      8 ms' │ '   48.25 x' │\n│ Array_Primitive_Number     │    1000    │ '    349 ms' │ '      7 ms' │ '   49.86 x' │\n│ Array_Primitive_String     │    1000    │ '    336 ms' │ '      4 ms' │ '   84.00 x' │\n│ Array_Primitive_Boolean    │    1000    │ '    284 ms' │ '      3 ms' │ '   94.67 x' │\n│ Array_Object_Unconstrained │    1000    │ '   1704 ms' │ '     19 ms' │ '   89.68 x' │\n│ Array_Object_Constrained   │    1000    │ '   1456 ms' │ '     18 ms' │ '   80.89 x' │\n│ Array_Tuple_Primitive      │    1000    │ '    792 ms' │ '     15 ms' │ '   52.80 x' │\n│ Array_Tuple_Object         │    1000    │ '   1552 ms' │ '     17 ms' │ '   91.29 x' │\n│ Array_Composite_Intersect  │    1000    │ '    744 ms' │ '     18 ms' │ '   41.33 x' │\n│ Array_Composite_Union      │    1000    │ '    783 ms' │ '     15 ms' │ '   52.20 x' │\n│ Array_Math_Vector4         │    1000    │ '   1093 ms' │ '     14 ms' │ '   78.07 x' │\n│ Array_Math_Matrix4         │    1000    │ '    684 ms' │ '      6 ms' │ '  114.00 x' │\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Migrating from Pre-v3 Style Usage of formdata-polyfill in CommonJS - JavaScript\nDESCRIPTION: This snippet shows the older way of using formdata-polyfill (pre-v3) in a CommonJS environment: requiring the module and using the exported FormData class directly, with explicit serialization using the _blob method for xhr.send. Parameters include a form element, and the FormData instance with explicit blob serialization. This approach is now obsolete; the current version replaces FormData globally and handles blob serialization internally.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/formdata-polyfill/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar FormData = require('formdata-polyfill')\nvar fd = new FormData(form)\nxhr.send(fd._blob())\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for time-zone\nDESCRIPTION: Provides the full text of the MIT License as applied to the 'time-zone' library by Sindre Sorhus. Similar to other MIT licensed components, it allows extensive use and modification provided the original copyright and permission notices are retained.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/LICENSE.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for @jridgewell/gen-mapping & @jridgewell/set-array (Text)\nDESCRIPTION: The MIT license text granting permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software associated with @jridgewell/gen-mapping and @jridgewell/set-array, provided the copyright notice (Copyright 2022 Justin Ridgewell) and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2022 Justin Ridgewell <jridgewell@google.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: ISC License Text for anymatch (Text)\nDESCRIPTION: The ISC license text granting permission to use, copy, modify, and/or distribute the 'anymatch' software for any purpose with or without fee, provided the copyright notice (Copyright (c) 2019 Elan Shanker, Paul Miller) and permission notice appear in all copies. The software is provided 'AS IS' without warranty.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThe ISC License\n\nCopyright (c) 2019 Elan Shanker, Paul Miller (https://paulmillr.com)\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying Benchmark Results for is-number\nDESCRIPTION: Presents benchmark comparison results between different versions of `is-number` (v7.0, v6.0) and the native `parseFloat` function, showing operations per second for different input types (all, string, number).\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/is-number/README.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# all\nv7.0 x 413,222 ops/sec ±2.02% (86 runs sampled)\nv6.0 x 111,061 ops/sec ±1.29% (85 runs sampled)\nparseFloat x 317,596 ops/sec ±1.36% (86 runs sampled)\nfastest is 'v7.0'\n\n# string\nv7.0 x 3,054,496 ops/sec ±1.05% (89 runs sampled)\nv6.0 x 2,957,781 ops/sec ±0.98% (88 runs sampled)\nparseFloat x 3,071,060 ops/sec ±1.13% (88 runs sampled)\nfastest is 'parseFloat,v7.0'\n\n# number\nv7.0 x 3,146,895 ops/sec ±0.89% (89 runs sampled)\nv6.0 x 3,214,038 ops/sec ±1.07% (89 runs sampled)\nparseFloat x 3,077,588 ops/sec ±1.07% (87 runs sampled)\nfastest is 'v6.0'\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for @rollup/plugins (Text)\nDESCRIPTION: The MIT license text granting permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software associated with various @rollup plugins (@rollup/plugin-alias, @rollup/plugin-commonjs, etc.), provided the copyright notice (Copyright (c) 2019 RollupJS Plugin Contributors) and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2019 RollupJS Plugin Contributors (https://github.com/rollup/plugins/graphs/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Building ts-node README using Yarn (Shell)\nDESCRIPTION: Shell command executed within the 'website' directory to build the project's README.md file using Yarn. This command is intended for project maintainers and requires Yarn to be installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/ts-node/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd website && yarn build-readme\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for pretty-ms\nDESCRIPTION: Provides the full text of the MIT License as applied to the 'pretty-ms' library by Sindre Sorhus. This license grants broad permissions for use, modification, and distribution, provided the copyright notice and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/LICENSE.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Declaring the MIT License for a Project - Plain Text\nDESCRIPTION: This snippet provides the full MIT License text, which grants permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, with minimal restrictions. It requires inclusion of the copyright notice and license in substantial portions of the code and disclaims warranties and liabilities. This license file is generally included as a standalone LICENSE document in open-source repositories.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/istanbul-lib-source-maps/node_modules/ms/license.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2020 Vercel, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying ISC License Text for signal-exit\nDESCRIPTION: Presents the full text of the ISC License for the 'signal-exit' library by Ben Coe, Isaac Z. Schlueter, and Contributors. This permissive license allows use, modification, and distribution with minimal restrictions, requiring only the preservation of the copyright notice.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/LICENSE.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nThe ISC License\n\nCopyright (c) 2015-2023 Benjamin Coe, Isaac Z. Schlueter, and Contributors\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice\nappear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE\nLIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES\nOR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Installing @jridgewell/trace-mapping via npm (Shell)\nDESCRIPTION: This snippet shows the command-line instruction to install the `@jridgewell/trace-mapping` package using the Node Package Manager (npm). This is the standard way to add the library as a dependency to a Node.js project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @jridgewell/trace-mapping\n```\n\n----------------------------------------\n\nTITLE: Installing balanced-match Using npm in Bash\nDESCRIPTION: Provides the npm command to install the 'balanced-match' package into a JavaScript project. Requires Node.js and npm to be installed on the system. Runs the install command in the shell to add 'balanced-match' as a dependency, making its API available for use in JavaScript code.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/balanced-match/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install balanced-match\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-dir using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the 'pkg-dir' package and add it as a dependency to the current project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pkg-dir/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install pkg-dir\n```\n\n----------------------------------------\n\nTITLE: Installing path-key via npm in Bash\nDESCRIPTION: Demonstrates the installation of the path-key package using npm in a shell environment. This command fetches and installs the path-key dependency from the npm registry. Prerequisite: Node.js and npm must be installed on the system. The command is intended to be run in the terminal at the project root.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/path-key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```\n$ npm install path-key\n```\n```\n\n----------------------------------------\n\nTITLE: Refining Animations with Adobe After Effects\nDESCRIPTION: Performs post-production refinement on AI-generated videos using Adobe After Effects or similar tools. This step ensures smooth transitions, professional polish, and final touches not achieved solely through automation.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/DecAIde/attached_assets/Pasted-MASTER-PROMPT-FULL-CONTEXT-Context-I-m-a-sophomore-in-high-school-at-Round-Rock-High-School-o-1742698576549.txt#_snippet_4\n\nLANGUAGE: AI Tool\nCODE:\n```\nUse Adobe After Effects (or similar)\nInput: Rough cut video from AI generator (e.g., Runway Gen-4).\nProcess: Manual editing, adding effects, ensuring smooth transitions, polishing visuals.\nOutput: Finalized, professional-quality animated explainer video.\n```\n\n----------------------------------------\n\nTITLE: [Deprecated] Extending Node.js Encodings with iconv-lite in JavaScript\nDESCRIPTION: Shows the deprecated method of extending Node.js built-in functionalities (like Buffer operations, stream encoding settings) to natively support `iconv-lite` encodings. This approach allowed using encodings like 'win1251' directly with Node primitives (`new Buffer()`, `buf.toString()`, `req.setEncoding()`, `fs.createReadStream()`) and potentially external modules like `request`. Note: This functionality is incompatible with recent Node.js versions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/iconv-lite/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, 'win1251');\nbuf.write(str, 'gbk');\nstr = buf.toString('latin1');\nassert(Buffer.isEncoding('iso-8859-15'));\nBuffer.byteLength(str, 'us-ascii');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding('big5');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream(\"file.txt\", \"shift_jis\");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require('request');\nrequest({\n    url: \"http://github.com/\", \n    encoding: \"cp932\"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n```\n\n----------------------------------------\n\nTITLE: Installing sprintf.js via Bower (Shell)\nDESCRIPTION: Provides a shell command using Bower to install the sprintf.js library for use in browser-based JavaScript projects. Bower must be installed as a prerequisite. Running this command downloads and installs the sprintf package to the current project.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/sprintf-js/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbower install sprintf\n```\n\n----------------------------------------\n\nTITLE: Documenting Project Changelog with Markdown - Markdown\nDESCRIPTION: This snippet serves as a project changelog, detailing the evolution of the software through versioned entries in Markdown format. It includes version headers, dates, categorized sections (such as Features and Bug Fixes), hyperlinks to releases and issues, and commit references. There are no external dependencies for reading the file; knowledge of Markdown is required for editing. The changelog expects that contributions adhere to the commit guidelines referenced and uses standard changelog conventions for clarity and traceability.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/create-require/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n\\n### [1.1.1](https://github.com/nuxt-contrib/create-require/compare/v1.1.0...v1.1.1) (2020-11-26)\\n\\n\\n### Bug Fixes\\n\\n* **types:** explicitly import the URL type ([#3](https://github.com/nuxt-contrib/create-require/issues/3)) ([66a98cc](https://github.com/nuxt-contrib/create-require/commit/66a98cc60a430c3689f11ad111c5fbf4574a37b6))\\n\\n## [1.1.0](https://github.com/nuxt-contrib/create-require/compare/v1.0.2...v1.1.0) (2020-11-21)\\n\\n\\n### Features\\n\\n* fallback to process.cwd() if no filename provided either ([ae5e0d6](https://github.com/nuxt-contrib/create-require/commit/ae5e0d665945b980b82ae6e998146c32295a6734))\\n\\n### [1.0.2](https://github.com/nuxt-contrib/create-require/compare/v1.0.1...v1.0.2) (2020-06-12)\\n\\n\\n### Bug Fixes\\n\\n* use fake path if filename is directory ([c8e0983](https://github.com/nuxt-contrib/create-require/commit/c8e09834e322d8a106ac8018011f799e2fed03f2))\\n\\n### [1.0.1](https://github.com/nuxt-contrib/create-require/compare/v1.0.0...v1.0.1) (2020-06-06)\\n\\n\\n### Bug Fixes\\n\\n* **types:** specify types field ([2c06464](https://github.com/nuxt-contrib/create-require/commit/2c0646407704c1c534babdfed39a48f51fc4f616))\\n\\n### 0.0.1 (2020-05-04)\n```\n\n----------------------------------------\n\nTITLE: Displaying 0BSD License Text for tslib\nDESCRIPTION: Contains the full text of the 0BSD License for the 'tslib' library by Microsoft Corp. This is a very permissive public domain equivalent license, allowing unrestricted use, modification, and distribution without any conditions.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/LICENSE.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Installing postgres-interval via npm\nDESCRIPTION: Installs the 'postgres-interval' package and adds it as a dependency to the project's package.json file using the Node Package Manager (npm). This command should be run in a terminal within the Node.js project directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/postgres-interval/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save postgres-interval\n```\n\n----------------------------------------\n\nTITLE: Installing Negotiator with NPM - Shell\nDESCRIPTION: This snippet provides the npm command to install the Negotiator package, which is required to use HTTP content negotiation functionality described in the subsequent examples. No parameters are needed; just run this command in the project directory to add Negotiator as a dependency. The output is an updated node_modules folder with Negotiator installed.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/negotiator/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install negotiator\n```\n\n----------------------------------------\n\nTITLE: Installing pgpass via npm in Shell\nDESCRIPTION: This snippet demonstrates how to install the pgpass module globally or as a project dependency using npm, the Node.js package manager. The command must be run in a shell environment where npm is available. It fetches the pgpass package and adds it to your project's node_modules directory.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/pgpass/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install pgpass\n```\n\n----------------------------------------\n\nTITLE: MIT License for finalhandler\nDESCRIPTION: The full text of the MIT License governing the use of the 'finalhandler' library. This permissive license allows free use, modification, and distribution of the software, provided the copyright notice and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n(The MIT License)\n\nCopyright (c) 2014-2017 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License for follow-redirects\nDESCRIPTION: The full text of the MIT License governing the use of the 'follow-redirects' library. This permissive license allows free use, modification, and distribution of the software, provided the copyright notice and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright 2014–present Olivier Lalonde <olalonde@gmail.com>, James Talmage <james@talmage.io>, Ruben Verborgh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for readdirp\nDESCRIPTION: Provides the full text of the MIT License for the 'readdirp' library by Thorsten Lorenz and Paul Miller. This license permits free use, modification, and distribution of the software, requiring only the inclusion of the copyright and permission notices.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/LICENSE.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMIT License\n\nCopyright (c) 2012-2019 Thorsten Lorenz, Paul Miller (https://paulmillr.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for to-regex-range\nDESCRIPTION: Shows the full text of the MIT License for the 'to-regex-range' library by Jon Schlinkert and Rouven Weßling. This license grants permission for free use, copying, modification, and distribution, contingent upon including the copyright and permission notices.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/rollup/LICENSE.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2015-present, Jon Schlinkert.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for @jridgewell/sourcemap-codec (Text)\nDESCRIPTION: The MIT license text granting permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software associated with @jridgewell/sourcemap-codec, provided the copyright notice (Copyright (c) 2015 Rich Harris) and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License\n\nCopyright (c) 2015 Rich Harris\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License for generic-names\nDESCRIPTION: The full text of the MIT License governing the use of the 'generic-names' library. This permissive license allows free use, modification, and distribution of the software, provided the copyright notice and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2015 Alexey Litvinov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for @jridgewell/resolve-uri (Text)\nDESCRIPTION: The MIT license text granting permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software associated with @jridgewell/resolve-uri, provided the copyright notice (Copyright 2019 Justin Ridgewell) and permission notice are included.\nSOURCE: https://github.com/vedantm1/decaide/blob/main/node_modules/vite/LICENSE.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2019 Justin Ridgewell <jridgewell@google.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```"
  }
]