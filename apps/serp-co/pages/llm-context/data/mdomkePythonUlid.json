[
  {
    "owner": "mdomke",
    "repo": "python-ulid",
    "content": "TITLE: Creating ULID Objects in Python\nDESCRIPTION: Examples of creating ULID objects in Python using the default constructor and named constructors with different timestamp sources.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from ulid import ULID\n>>> ULID()\nULID(01E75HZVW36EAZKMF1W7XNMSB4)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import time, datetime\n>>> ULID.from_timestamp(time.time())\nULID(01E75J1MKKWMGG0N5MBHFMRC84)\n>>> ULID.from_datetime(datetime.datetime.now())\nULID(01E75J2XBK390V2XRH44EHC10X)\n```\n\n----------------------------------------\n\nTITLE: Encoding ULID Objects in Different Formats\nDESCRIPTION: Examples of encoding ULID objects in various formats such as string, hexadecimal, integer, bytes, and UUID.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> str(ulid)\n'01BTGNYV6HRNK8K8VKZASZCFPE'\n>>> ulid.hex\n'015ea15f6cd1c56689a373fab3f63ece'\n>>> int(ulid)\n1820576928786795198723644692628913870\n>>> bytes(ulid)\nb'\\x01^\\xa1_l\\xd1\\xc5f\\x89\\xa3s\\xfa\\xb3\\xf6>\\xce'\n>>> ulid.to_uuid()\nUUID('015ea15f-6cd1-c566-89a3-73fab3f63ece')\n```\n\n----------------------------------------\n\nTITLE: Accessing ULID Timestamp Components\nDESCRIPTION: Examples of accessing the timestamp component of a ULID either as a UNIX epoch timestamp or as a datetime object.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> ulid.timestamp\n1505945939.153\n>>> ulid.datetime\ndatetime.datetime(2017, 9, 20, 22, 18, 59, 153000, tzinfo=datetime.timezone.utc)\n```\n\n----------------------------------------\n\nTITLE: Pydantic Integration with ULID\nDESCRIPTION: Example of using ULID with Pydantic models for data validation, showing both valid and invalid ULID strings.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/README.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom ulid import ULID\n\n\nclass Model(BaseModel):\n  ulid: ULID\n\nmodel = Model(ulid=\"DX89370400440532013000\")  # OK\nmodel = Model(ulid=\"not-a-ulid\")  # Raises ValidationError\n```\n\n----------------------------------------\n\nTITLE: ULID Command Line Interface Examples\nDESCRIPTION: Examples of using the ULID command line interface to generate, inspect, and convert ULIDs with various options.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/README.rst#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ulid build\n01HASFKBN8SKZTSVVS03K5AMMS\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ulid build --from-datetime=2023-09-23T10:20:30\n01HB0J0F5GCKEXNSWVAD5PEAC1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ulid show 01HASFKBN8SKZTSVVS03K5AMMS\nULID:      01HASFKBN8SKZTSVVS03K5AMMS\nHex:       018ab2f9aea8ccffacef7900e6555299\nInt:       2049395013039097460549394558635823769\nTimestamp: 1695219822.248\nDatetime:  2023-09-20 14:23:42.248000+00:00\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ulid show --datetime 01HASFKBN8SKZTSVVS03K5AMMS\n2023-09-20 14:23:42.248000+00:00\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ echo 01HASFKBN8SKZTSVVS03K5AMMS | ulid show --uuid -\n018ab2f9-aea8-4cff-acef-7900e6555299\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ date --iso-8601 | python -m ulid build --from-datetime -\n01HAT9PVR02T3S13XB48S7GEHE\n```\n\n----------------------------------------\n\nTITLE: Using ULID.parse Method for Creating ULID Instances\nDESCRIPTION: Example showing how to create ULID instances from different input values using the ULID.parse method introduced in version 3.0.0.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/CHANGELOG.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@perrotuerto <https://github.com/perrotuerto>\n```\n\n----------------------------------------\n\nTITLE: Basic ULID CLI Commands for Generation and Inspection\nDESCRIPTION: Example demonstrating the basic command line interface for generating and inspecting ULIDs, introduced in version 2.0.0.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/CHANGELOG.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ulid build\n01HASJFZZ862S826DA2NJK4WMT\n\n$ ulid show 01HASJFZZ862S826DA2NJK4WMT\nULID:      01HASJFZZ862S826DA2NJK4WMT\nHex:       018ab327ffe830b28119aa156532729a\nInt:       2049398682679492051963931130707735194\nTimestamp: 1695222857.704\nDatetime:  2023-09-20 15:14:17.704000+00:00\n```\n\n----------------------------------------\n\nTITLE: Converting ULID to UUID4 Using Command Line Interface\nDESCRIPTION: Example bash command showing how to convert a ULID to an RFC 4122 compliant UUID using the CLI show command with the --uuid4 flag added in version 2.2.0.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/CHANGELOG.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ulid show 01HASJFZZ862S826DA2NJK4WMT --uuid4\n```\n\n----------------------------------------\n\nTITLE: Reading ULID Inputs from Standard Input\nDESCRIPTION: Example showing how to read ULID inputs from stdin using the special value '-' with the build command, allowing for pipeline operations in bash.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/CHANGELOG.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ date --iso-8601 | python -m ulid build --from-datetime -\n01HAT9PVR02T3S13XB48S7GEHE\n```\n\n----------------------------------------\n\nTITLE: Installing Python ULID with pip\nDESCRIPTION: Commands to install the Python ULID library using pip, with an optional command for including Pydantic support.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install python-ulid\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install python-ulid[pydantic]\n```\n\n----------------------------------------\n\nTITLE: ULID Structure Example in Text Format\nDESCRIPTION: A text representation of the ULID structure, showing how it consists of a 48-bit timestamp component and an 80-bit randomness component.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n01AN4Z07BY      79KA1307SR9X4MV3\n|----------|    |----------------|\n Timestamp          Randomness\n   48bits             80bits\n```\n\n----------------------------------------\n\nTITLE: Migrating from Legacy ULID.new Constructor to Modern ULID Constructors\nDESCRIPTION: Code examples showing how to migrate from the deprecated ULID.new constructor to the specific named constructors introduced in version 1.0.0.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/CHANGELOG.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# old\nulid = ULID.new()\nulid = ULID.new(time.time())\nulid = ULID.new(datetime.now())\n\n# new\nulid = ULID()\nulid = ULID.from_timestamp(time.time())\nulid = ULID.from_datetime(datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Accessing ULID Hex Representation\nDESCRIPTION: Example demonstrating how to get the hexadecimal representation of a ULID using the hex property introduced in version 1.0.0.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/CHANGELOG.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> ULID().hex\n'0171caa5459a8631a6894d072c8550a8'\n```\n\n----------------------------------------\n\nTITLE: RestructuredText API Documentation Structure\nDESCRIPTION: RestructuredText markup defining the structure of the API documentation page, including module reference and class autodoc directives.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/docs/source/api.rst#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _api:\n\nDeveloper Interface\n===================\n\n.. module:: ulid\n\n\nULID\n----\n\n.. autoclass:: ULID\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Including Documentation Sections with reStructuredText\nDESCRIPTION: Series of include directives in reStructuredText that pull in different sections from the README.rst file, such as teaser, installation, usage, pydantic integration, and CLI documentation.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/docs/source/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../README.rst\n   :start-after: teaser-begin\n   :end-before: teaser-end\n\n.. include:: ../../README.rst\n   :start-after: installation-begin\n   :end-before: installation-end\n\n.. include:: ../../README.rst\n   :start-after: usage-begin\n   :end-before: usage-end\n\n.. include:: ../../README.rst\n   :start-after: pydantic-begin\n   :end-before: pydantic-end\n\n.. include:: ../../README.rst\n   :start-after: cli-begin\n   :end-before: cli-end\n```\n\n----------------------------------------\n\nTITLE: Documentation Table of Contents\nDESCRIPTION: reStructuredText directives that define the documentation structure with table of contents for API documentation and changelog.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/docs/source/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   api\n\n.. toctree::\n   :maxdepth: 1\n\n   changelog\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies - Requirements.txt\nDESCRIPTION: Lists Python packages required for building project documentation using Sphinx. Includes Furo theme for modern documentation styling and sphinx-copybutton for adding copy functionality to code blocks.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/docs/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfuro\nsphinx-copybutton\n```\n\n----------------------------------------\n\nTITLE: Including CHANGELOG File in RST Documentation\nDESCRIPTION: RST include directive to include the CHANGELOG.rst file from the project root directory using a relative path.\nSOURCE: https://github.com/mdomke/python-ulid/blob/main/docs/source/changelog.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../CHANGELOG.rst\n```"
  }
]