[
  {
    "owner": "apache",
    "repo": "lucene-site",
    "content": "TITLE: Implementing Python Analyzer and TokenStream Classes\nDESCRIPTION: Python implementation of a custom Lucene analyzer that extends the PythonAnalyzer Java class. It demonstrates how to create a TokenStream with custom token generation logic and attribute handling.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass _analyzer(PythonAnalyzer):\n  def tokenStream(_self, fieldName, reader):\n      class _tokenStream(PythonTokenStream):\n          def __init__(self_):\n              super(_tokenStream, self_).__init__()\n              self_.TOKENS = [\"1\", \"2\", \"3\", \"4\", \"5\"]\n              self_.INCREMENTS = [1, 2, 1, 0, 1]\n              self_.i = 0\n              self_.posIncrAtt = self_.addAttribute(PositionIncrementAttribute.class_)\n              self_.termAtt = self_.addAttribute(TermAttribute.class_)\n              self_.offsetAtt = self_.addAttribute(OffsetAttribute.class_)\n          def incrementToken(self_):\n              if self_.i == len(self_.TOKENS):\n                  return False\n              self_.termAtt.setTermBuffer(self_.TOKENS[self_.i])\n              self_.offsetAtt.setOffset(self_.i, self_.i)\n              self_.posIncrAtt.setPositionIncrement(self_.INCREMENTS[self_.i])\n              self_.i += 1\n              return True\n          def end(self_):\n              pass\n          def reset(self_):\n              pass\n          def close(self_):\n              pass\n      return _tokenStream()\n```\n\n----------------------------------------\n\nTITLE: Using FeatureField for Custom Scoring in Java\nDESCRIPTION: Demonstrates the new FeatureField feature for integrating static features like pagerank into scoring. Supports efficient score computation when total hit counts are not needed.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/core/core_news/2019-03-14-8-0-0-available.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFeatureField.newDistanceFeatureQuery()\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Vector API for KNN in Lucene 9.7.0\nDESCRIPTION: Command-line parameter to enable vectorization for distance computation between vectors in KNN indexing and querying. This optimization requires Java 20 or 21.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/core/core_news/2023-06-25-9-7-0-available.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--add-modules jdk.incubator.vector\n```\n\n----------------------------------------\n\nTITLE: Distance Feature Queries in Java\nDESCRIPTION: Shows the usage of new distance feature queries for boosting by recency and geo-distance, optimized for scenarios where total hit counts are not required.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/core/core_news/2019-03-14-8-0-0-available.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLongPoint.newDistanceFeatureQuery()\nLatLonPoint.newDistanceFeatureQuery()\n```\n\n----------------------------------------\n\nTITLE: Running JCC to Generate Java Wrappers for Lucene\nDESCRIPTION: A comprehensive example of using JCC to wrap Java classes from Lucene and related libraries into Python. The command includes options for specifying JAR files, packages, class mappings, and build parameters.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m jcc           # run JCC to wrap\n    --jar lucene.jar      # all public classes in the lucene jar file\n    --jar analyzers.jar   # and the lucene analyzers contrib package\n    --jar snowball.jar    # and the snowball contrib package\n    --jar highlighter.jar # and the highlighter contrib package\n    --jar regex.jar       # and the regex search contrib package\n    --jar queries.jar     # and the queries contrib package\n    --jar extensions.jar  # and the Python extensions package\n    --package java.lang   # including all dependencies found in the\n                          # java.lang package\n    --package java.util   # and the java.util package\n    --package java.io     # and the java.io package\n      java.lang.System    # and to explicitely wrap java.lang.System\n      java.lang.Runtime   # as well as java.lang.Runtime\n      java.lang.Boolean   # and java.lang.Boolean\n      java.lang.Byte      # and java.lang.Byte\n      java.lang.Character # and java.lang.Character\n      java.lang.Integer   # and java.lang.Integer\n      java.lang.Short     # and java.lang.Short\n      java.lang.Long      # and java.lang.Long\n      java.lang.Double    # and java.lang.Double\n      java.lang.Float     # and java.lang.Float\n      java.text.SimpleDateFormat\n                          # and java.text.SimpleDateFormat\n      java.io.StringReader\n                          # and java.io.StringReader\n      java.io.InputStreamReader\n                          # and java.io.InputStreamReader\n      java.io.FileInputStream\n                          # and java.io.FileInputStream\n      java.util.Arrays    # and java.util.Arrays\n    --exclude org.apache.lucene.queryParser.Token\n                          # while explicitely not wrapping\n                          # org.apache.lucene.queryParser.Token\n    --exclude org.apache.lucene.queryParser.TokenMgrError\n                          # nor org.apache.lucene.queryParser.TokenMgrError\n    --exclude org.apache.lucene.queryParser.ParseException\n                          # nor.apache.lucene.queryParser.ParseException\n    --python lucene       # generating Python wrappers into a module\n                          # called lucene\n    --version 2.4.0       # giving the Python extension egg version 2.4.0\n    --mapping org.apache.lucene.document.Document\n              'get:(Ljava/lang/String;)Ljava/lang/String;'\n                          # asking for a Python mapping protocol wrapper\n                          # for get access on the Document class by\n                          # calling its get method\n    --mapping java.util.Properties\n              'getProperty:(Ljava/lang/String;)Ljava/lang/String;'\n                          # asking for a Python mapping protocol wrapper\n                          # for get access on the Properties class by\n                          # calling its getProperty method\n    --sequence org.apache.lucene.search.Hits\n               'length:()I'\n               'doc:(I)Lorg/apache/lucene/document/Document;'\n                          # asking for a Python sequence protocol wrapper\n                          # for length and get access on the Hits class by\n                          # calling its length and doc methods\n    --files 2             # generating all C++ classes into about 2 .cpp\n                          # files\n    --build               # and finally compiling the generated C++ code\n                          # into a Python egg via setuptools - when\n                          # installed - or a regular Python extension via\n                          # distutils or setuptools otherwise\n    --module collections.py\n                          # copying the collections.py module into the egg\n    --install             # installing it into Python's site-packages\n                          # directory.\n```\n\n----------------------------------------\n\nTITLE: Accessing Lucene TermDocs with Java Arrays in Python\nDESCRIPTION: Demonstrates how to work with Java arrays in PyLucene when accessing termDocs, including array allocation and element access.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/features.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntermDocs = reader.termDocs(Term(\"isbn\", isbn))\ndocs = JArray('int')(1)   # allocate an int[1] array\nfreq = JArray('int')(1)   # allocate an int[1] array\nif termDocs.read(docs, freq) == 1:\n    bits.set(docs[0])     # access the array's first element\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Query Parser Remapping in Solr\nDESCRIPTION: Configuration snippet to remap the XML Query Parser to the Extended DisMax (edismax) parser as a security mitigation for XXE vulnerability in Solr.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/main_news/2017-10-12-zero-day.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queryParser name=\"xmlparser\" class=\"solr.ExtendedDismaxQParserPlugin\"/>\n```\n\n----------------------------------------\n\nTITLE: Python Style Iteration Over Lucene Hits\nDESCRIPTION: Pythonic way of iterating over Lucene search hits using Python's iteration syntax.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/features.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor hit in hits:\n    hit = Hit.cast_(hit)\n    print hit.getScore(), ':', hit.getDocument['title']\n```\n\n----------------------------------------\n\nTITLE: Python Style Document Field Iteration\nDESCRIPTION: Pythonic way to iterate over document fields using Python's iteration syntax.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/features.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor field in doc.getFields():\n    field = Field.cast_(field)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Java Arrays\nDESCRIPTION: Shows different ways to create and manipulate Java arrays in Python using JArray.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> array = JArray('int')(size)\n# the resulting Java int array is initialized with zeroes\n\n>>> array = JArray('int')(sequence)\n# the sequence must only contain ints\n# the resulting Java int array contains the ints in the sequence\n```\n\n----------------------------------------\n\nTITLE: Quick Build Commands\nDESCRIPTION: Sequential shell commands for quickly building and installing PyLucene, including JCC build steps and PyLucene compilation and testing.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/install.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npushd jcc\nedit _setup.py_ to match your environment\npython setup.py build\nsudo python setup.py install\npopd\nedit _Makefile_ to match your environment\nmake\nmake test\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Cloning Lucene Source Code with Git\nDESCRIPTION: Command to clone the latest main branch of the Apache Lucene source code repository from GitHub.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/core/developer.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/lucene.git\n```\n\n----------------------------------------\n\nTITLE: Initializing Java VM with Classpath in Python\nDESCRIPTION: Shows how to initialize the Java Virtual Machine with a classpath setting using the initVM function from the lucene module.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import lucene\n>>> lucene.initVM(classpath=lucene.CLASSPATH)\n```\n\n----------------------------------------\n\nTITLE: Working with Generic ArrayList\nDESCRIPTION: Demonstrates usage of Java generic types in Python using ArrayList with type parameters.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> a = ArrayList().of_(Document)\n>>> a\n<ArrayList: []>\n>>> a.parameters_\n(<type 'Document'>,)\n>>> a.add(Document())\nTrue\n>>> a.get(0)\n<Document: Document<>>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies on Debian\nDESCRIPTION: Command to install Python development packages, virtual environment support, and setuptools on Debian, which are required for building JCC properly.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/install.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3.9-dev python3-venv python3-setuptools\n```\n\n----------------------------------------\n\nTITLE: Installing Temurin Java on Debian 11\nDESCRIPTION: Bash commands to install Temurin Java 17 (Adoptium) on Debian 11. These commands add the repository, import the GPG key, and install the JDK package.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -s\napt install wget apt-transport-https gnupg\nwget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | apt-key add -\necho \"deb https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main\" | tee /etc/apt/sources.list.d/adoptium.list\napt update\napt install temurin-17-jdk\n```\n\n----------------------------------------\n\nTITLE: Alternative Python Iteration Over Hits\nDESCRIPTION: Another Pythonic approach to iterate over Lucene hits using range.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/features.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor i xrange(len(hits)):\n    print hits.score(i), ':', hits[i]['title']\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Heap Size for Java VM\nDESCRIPTION: Demonstrates initializing the Java VM with a specific initial heap size and checking the total memory allocation.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import lucene\n>>> lucene.initVM(initialheap='32m')\n>>> lucene.Runtime.getRuntime().totalMemory()\n33357824L\n```\n\n----------------------------------------\n\nTITLE: Type Casting and Instance Checking\nDESCRIPTION: Example of type casting and instance checking using cast_ and instance_ methods on Java objects in Python.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif BooleanQuery.instance_(query):\n    booleanQuery = BooleanQuery.cast_(query)\n\nprint booleanQuery.getClauses()\n```\n\n----------------------------------------\n\nTITLE: Building and Installing JCC with Python\nDESCRIPTION: Standard commands to build and install JCC using Python's setuptools. This builds the JCC extension and installs it system-wide with sudo privileges.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/install.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py build\nsudo python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Java Style Iteration Over Lucene Hits\nDESCRIPTION: Traditional Java-style loop for iterating over Lucene search hits.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/features.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfor (int i = 0; i < hits.length(); i++) {\n    Document doc = hits.doc(i);\n    System.out.println(hits.score(i) + \" : \" + doc.get(\"title\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VM Arguments\nDESCRIPTION: Shows how to pass additional VM arguments during initialization for JNI checking and garbage collection verbose logging.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import lucene\n>>> lucene.initVM(vmargs='-Xcheck:jni,-verbose:jni,-verbose:gc')\n```\n\n----------------------------------------\n\nTITLE: Working with Nested Arrays\nDESCRIPTION: Demonstrates handling of nested Java arrays and type casting in Python.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> d = JArray('object')(1, Document)\n>>> d[0] = Document()\n>>> d\nJArray<object>[<Document: Document<>>]\n>>> d[0]\n<Document: Document<>>\n>>> a = JArray('object')(2)\n>>> a[0] = d\n>>> a[1] = JArray('int')([0, 1, 2])\n>>> a\nJArray<object>[<Object: [Lorg.apache.lucene.document.Document;@694f12>, <Object: [I@234265>]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Pelican\nDESCRIPTION: Commands to create a Python virtual environment, activate it, and install the required dependencies for Pelican. This approach prevents conflicts with existing Python packages.\nSOURCE: https://github.com/apache/lucene-site/blob/main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing GCC and Make on Debian\nDESCRIPTION: Command to install essential build tools (GCC, G++, and Make) required for compiling JCC on Debian-based Linux distributions.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/install.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install gcc-x86-64-linux-gnu g++-x86-64-linux-gnu make\n```\n\n----------------------------------------\n\nTITLE: Installing Pelican Dependencies with pip\nDESCRIPTION: Command to install the required Python packages for building the Lucene website using pip3. This installs all dependencies listed in the requirements.txt file.\nSOURCE: https://github.com/apache/lucene-site/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Solaris 11.1 Makefile Configuration\nDESCRIPTION: Makefile configuration settings for building PyLucene on Solaris 11.1 with GCC 4.5, Python 2.6, and Java 1.7. Defines essential build variables including Python path, Ant location, and JCC parameters.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/install.md#2025-04-09_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\n# Solaris   (Solaris 11.1, Python 2.6, 32-bit, Java 1.7)\nPREFIX_PYTHON=/usr\nANT=/usr/bin/ant\nPYTHON=$(PREFIX_PYTHON)/bin/python\nJCC=$(PYTHON) -m jcc.__main__ --reserved DEFAULT_TYPE\nNUM_FILES=4\n```\n\n----------------------------------------\n\nTITLE: Using findClass vs Class.forName\nDESCRIPTION: Demonstrates the difference between JNI's findClass and Java's Class.forName for loading classes.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from lucene import *\n>>> initVM(CLASSPATH)\n>>> findClass('org/apache/lucene/document/Document')\n<Class: class org.apache.lucene.document.Document>\n>>> Class.forName('org.apache.lucene.document.Document')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nlucene.JavaError: java.lang.ClassNotFoundException: org/apache/lucene/document/Document\n>>> Class.forName('java.lang.Object')\n<Class: class java.lang.Object>\n```\n\n----------------------------------------\n\nTITLE: Checking out PyLucene trunk using Subversion\nDESCRIPTION: This command uses Subversion (SVN) to checkout the latest trunk version of PyLucene from the Apache Software Foundation repository. It creates a local copy of the PyLucene source code in a directory named 'pylucene_trunk'.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/version_control.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsvn checkout https://svn.apache.org/repos/asf/lucene/pylucene/trunk/ pylucene_trunk\n```\n\n----------------------------------------\n\nTITLE: Checking out JCC Source Code from SVN\nDESCRIPTION: Command to retrieve JCC source code from Apache Subversion repository. JCC is typically included with PyLucene, but can be checked out separately using this command.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/lucene/pylucene/trunk/jcc jcc\n```\n\n----------------------------------------\n\nTITLE: Creating Java Arrays from Python Lists\nDESCRIPTION: Shows how to create Java arrays from Python sequences using JArray constructor.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/features.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# creating a Java array of double from the [1.5, 2.5] list\nJArray('double')([1.5, 2.5])\n```\n\n----------------------------------------\n\nTITLE: Running Pelican with Auto-reload and Web Server\nDESCRIPTION: Command to run Pelican with auto-reload and built-in web server features. This allows for live preview of changes at http://localhost:8000 without manual regeneration.\nSOURCE: https://github.com/apache/lucene-site/blob/main/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npelican --autoreload --listen\n```\n\n----------------------------------------\n\nTITLE: Basic Pelican Site Generation Command\nDESCRIPTION: Simple Pelican command to generate the static HTML website from the content directory, using settings from pelicanconf.py. The generated site is saved in the output/ folder.\nSOURCE: https://github.com/apache/lucene-site/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npelican\n```\n\n----------------------------------------\n\nTITLE: Building JCC with Sun Studio C++ on Solaris\nDESCRIPTION: Command showing how to build JCC on Solaris using Sun Studio C++ compiler (CC) instead of the default C compiler, which is necessary because JCC is written in C++.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/install.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCC=CC python setup.py build\n```\n\n----------------------------------------\n\nTITLE: JCC Sequence Protocol Example for Lucene Hits\nDESCRIPTION: Command line example showing how to generate Python sequence protocol for Lucene's Hits class, enabling Python-style length access and indexing for search results.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--sequence org.apache.lucene.search.Hits\n         'length:()I'\n         'doc:(I)Lorg/apache/lucene/document/Document;'\n```\n\n----------------------------------------\n\nTITLE: JCC Mapping Protocol Example for Java Properties\nDESCRIPTION: Command line example showing how to generate Python mapping protocol for Java Properties class, allowing dictionary-like access to property values using the getProperty method.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/jcc/features.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--mapping java.util.Properties\n        'getProperty:(Ljava/lang/String;)Ljava/lang/String;'\n                    # asking for a Python mapping protocol wrapper\n                    # for get access on the Properties class by\n                    # calling its getProperty method\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Lucene Site with Pelican Framework\nDESCRIPTION: This requirements file specifies all Python packages needed for the Apache Lucene website. It includes Pelican (a static site generator), Markdown for content formatting, checksumdir for file integrity, Pelican plugins for extended functionality, and development tools for site maintenance and local testing.\nSOURCE: https://github.com/apache/lucene-site/blob/main/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\npelican==4.5.4\nMarkdown==3.3.3\nchecksumdir>=1.2.0\n\n# Pelican plugins\nmdx-include==1.4.1\nbeautifulsoup4>=4.9.3\n\n# Dev tools\ninvoke>=1.5.0\nlivereload>=2.6.3\n```\n\n----------------------------------------\n\nTITLE: PyLucene News Page Configuration in Markdown\nDESCRIPTION: Configuration metadata for generating the PyLucene news page. Specifies the title, URL, save location, template to use, and URL slug for the page.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/pylucene/news.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTitle: PyLucene news\nURL: pylucene/news.html\nsave_as: pylucene/news.html\ntemplate: lucene/pylucene/news\nslug: pylucene-news\n```\n\n----------------------------------------\n\nTITLE: Setting Landing Page Template Configuration\nDESCRIPTION: Configuration metadata for the Apache Lucene landing page, specifying the page title, URL path, saved output location, and template file to use.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/index.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nProject: /apache/lucene-site\nContent:\nTitle: Welcome to Apache Lucene\nURL: index.html\nsave_as: index.html\nTemplate: lucene/tlp/index\n```\n\n----------------------------------------\n\nTITLE: Linking to ATOM Feed in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown to the ATOM feed for Lucene Core news.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/core/corenews.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[ATOM feed](/feeds/core/news.atom.xml)\n```\n\n----------------------------------------\n\nTITLE: HTML Styling for Discontinuation Notice\nDESCRIPTION: HTML span element with inline styling to display a discontinuation notice in red, bold text.\nSOURCE: https://github.com/apache/lucene-site/blob/main/content/pages/openrelevance/index.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"color: red; font-weight: bold\">The Apache Lucene Project Management Committee decided in a vote,\\nthat the Apache Lucene sub-project \"Open Relevance\" will be discontinued.</span>\n```"
  }
]