[
  {
    "owner": "firecracker-microvm",
    "repo": "firecracker-containerd",
    "content": "TITLE: Installing Dependencies on Debian-based Systems for Firecracker-containerd\nDESCRIPTION: This script installs the necessary dependencies for firecracker-containerd on Debian, including Go 1.23, Docker CE, and device-mapper. It sets up the proper repositories and configures the environment.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncd ~\n\n# Install git, Go 1.23, make, curl\nsudo mkdir -p /etc/apt/sources.list.d\necho \"deb http://ftp.debian.org/debian bullseye-backports main\" | \\\n  sudo tee /etc/apt/sources.list.d/bullseye-backports.list\nsudo DEBIAN_FRONTEND=noninteractive apt-get update\nsudo DEBIAN_FRONTEND=noninteractive apt-get \\\n  install --yes \\\n  golang-1.23 \\\n  make \\\n  git \\\n  curl \\\n  e2fsprogs \\\n  util-linux \\\n  bc \\\n  gnupg\n\n# Debian's Go 1.23 package installs \"go\" command under /usr/lib/go-1.23/bin\nexport PATH=/usr/lib/go-1.23/bin:$PATH\n\ncd ~\n\n# Install Docker CE\n# Docker CE includes containerd, but we need a separate containerd binary, built\n# in a later step\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\napt-key finger docker@docker.com | grep '9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88' || echo '**Cannot find Docker key**'\necho \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" | \\\n     sudo tee /etc/apt/sources.list.d/docker.list\nsudo DEBIAN_FRONTEND=noninteractive apt-get update\nsudo DEBIAN_FRONTEND=noninteractive apt-get \\\n     install --yes \\\n     docker-ce aufs-tools-\nsudo usermod -aG docker $(whoami)\n\n# Install device-mapper\nsudo DEBIAN_FRONTEND=noninteractive apt-get install -y dmsetup\n```\n\n----------------------------------------\n\nTITLE: Running Containers with Firecracker-containerd\nDESCRIPTION: These commands demonstrate how to pull a Docker image and run a container using firecracker-containerd. The commands specify the custom runtime, snapshotter, and address for the firecracker-containerd socket.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo firecracker-ctr --address /run/firecracker-containerd/containerd.sock \\\n     image pull \\\n     --snapshotter devmapper \\\n     docker.io/library/debian:latest\nsudo firecracker-ctr --address /run/firecracker-containerd/containerd.sock \\\n     run \\\n     --snapshotter devmapper \\\n     --runtime aws.firecracker \\\n     --rm --tty --net-host \\\n     docker.io/library/debian:latest \\\n     test\n```\n\n----------------------------------------\n\nTITLE: Setting up Firecracker-containerd and Device Mapper Configuration\nDESCRIPTION: This script clones the firecracker-containerd repository, builds all necessary components, downloads a VM kernel, and configures device mapper for the snapshotter. It sets up the necessary configuration files and creates a thin pool storage.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\ncd ~\n\n# Check out firecracker-containerd and build it.  This includes:\n# * firecracker-containerd runtime, a containerd v2 runtime\n# * firecracker-containerd agent, an inside-VM component\n# * runc, to run containers inside the VM\n# * a Debian-based root filesystem configured as read-only with a read-write\n#   overlay\n# * firecracker-containerd, an alternative containerd binary that includes the\n#   firecracker VM lifecycle plugin and API\n# * tc-redirect-tap and other CNI dependencies that enable VMs to start with\n#   access to networks available on the host\ngit clone https://github.com/firecracker-microvm/firecracker-containerd.git\ncd firecracker-containerd\nsg docker -c 'make all image firecracker'\nsudo make install install-firecracker demo-network\n\ncd ~\n\n# Download kernel\ncurl -fsSL -o hello-vmlinux.bin https://s3.amazonaws.com/spec.ccfc.min/img/quickstart_guide/x86_64/kernels/vmlinux.bin\n\n# Configure our firecracker-containerd binary to use our new snapshotter and\n# separate storage from the default containerd binary\nsudo mkdir -p /etc/firecracker-containerd\nsudo mkdir -p /var/lib/firecracker-containerd/containerd\n# Create the shim base directory for which firecracker-containerd will run the\n# shim from\nsudo mkdir -p /var/lib/firecracker-containerd\nsudo tee /etc/firecracker-containerd/config.toml <<EOF\nversion = 2\ndisabled_plugins = [\"io.containerd.grpc.v1.cri\"]\nroot = \"/var/lib/firecracker-containerd/containerd\"\nstate = \"/run/firecracker-containerd\"\n[grpc]\n  address = \"/run/firecracker-containerd/containerd.sock\"\n[plugins]\n  [plugins.\"io.containerd.snapshotter.v1.devmapper\"]\n    pool_name = \"fc-dev-thinpool\"\n    base_image_size = \"10GB\"\n    root_path = \"/var/lib/firecracker-containerd/snapshotter/devmapper\"\n\n[debug]\n  level = \"debug\"\nEOF\n\n# Setup device mapper thin pool\nsudo mkdir -p /var/lib/firecracker-containerd/snapshotter/devmapper\ncd /var/lib/firecracker-containerd/snapshotter/devmapper\nDIR=/var/lib/firecracker-containerd/snapshotter/devmapper\nPOOL=fc-dev-thinpool\n\nif [[ ! -f \"${DIR}/data\" ]]; then\n    sudo touch \"${DIR}/data\"\n    sudo truncate -s 100G \"${DIR}/data\"\nfi\n\nif [[ ! -f \"${DIR}/metadata\" ]]; then\n    sudo touch \"${DIR}/metadata\"\n    sudo truncate -s 2G \"${DIR}/metadata\"\nfi\n\nDATADEV=\"$(sudo losetup --output NAME --noheadings --associated ${DIR}/data)\"\nif [[ -z \"${DATADEV}\" ]]; then\n    DATADEV=\"$(sudo losetup --find --show ${DIR}/data)\"\nfi\n\nMETADEV=\"$(sudo losetup --output NAME --noheadings --associated ${DIR}/metadata)\"\nif [[ -z \"${METADEV}\" ]]; then\n    METADEV=\"$(sudo losetup --find --show ${DIR}/metadata)\"\nfi\n\nSECTORSIZE=512\nDATASIZE=\"$(sudo blockdev --getsize64 -q ${DATADEV})\"\nLENGTH_SECTORS=$(bc <<< \"${DATASIZE}/${SECTORSIZE}\")\nDATA_BLOCK_SIZE=128\nLOW_WATER_MARK=32768\nTHINP_TABLE=\"0 ${LENGTH_SECTORS} thin-pool ${METADEV} ${DATADEV} ${DATA_BLOCK_SIZE} ${LOW_WATER_MARK} 1 skip_block_zeroing\"\necho \"${THINP_TABLE}\"\n\nif ! $(sudo dmsetup reload \"${POOL}\" --table \"${THINP_TABLE}\"); then\n    sudo dmsetup create \"${POOL}\" --table \"${THINP_TABLE}\"\nfi\n\ncd ~\n\n# Configure the aws.firecracker runtime\n# The long kernel command-line configures systemd inside the Debian-based image\n# and uses a special init process to create a read-write overlay on top of the\n# read-only image.\nsudo mkdir -p /var/lib/firecracker-containerd/runtime\nsudo cp ~/firecracker-containerd/tools/image-builder/rootfs.img /var/lib/firecracker-containerd/runtime/default-rootfs.img\nsudo cp ~/hello-vmlinux.bin /var/lib/firecracker-containerd/runtime/default-vmlinux.bin\nsudo mkdir -p /etc/containerd\nsudo tee /etc/containerd/firecracker-runtime.json <<EOF\n{\n  \"firecracker_binary_path\": \"/usr/local/bin/firecracker\",\n  \"cpu_template\": \"T2\",\n  \"log_fifo\": \"fc-logs.fifo\",\n  \"log_levels\": [\"debug\"],\n  \"metrics_fifo\": \"fc-metrics.fifo\",\n  \"kernel_args\": \"console=ttyS0 noapic reboot=k panic=1 pci=off nomodules ro systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init\",\n  \"default_network_interfaces\": [{\n    \"CNIConfig\": {\n      \"NetworkName\": \"fcnet\",\n      \"InterfaceName\": \"veth0\"\n    }\n  }]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running Containers with Firecracker-containerd\nDESCRIPTION: Command to run a container using firecracker-ctr with the aws.firecracker runtime and devmapper snapshotter.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo firecracker-ctr --address /run/firecracker-containerd/containerd.sock \\\n  run \\\n  --snapshotter devmapper \\\n  --runtime aws.firecracker \\\n  --rm --tty --net-host \\\n  docker.io/library/busybox:latest busybox-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Firecracker-containerd Runtime with JSON\nDESCRIPTION: An example JSON configuration file for the firecracker-containerd runtime plugin that specifies binary paths, kernel parameters, log settings, and other VM configuration options.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"firecracker_binary_path\": \"/usr/local/bin/firecracker\",\n  \"kernel_image_path\": \"/var/lib/firecracker-containerd/runtime/hello-vmlinux.bin\",\n  \"kernel_args\": \"console=ttyS0 noapic reboot=k panic=1 pci=off nomodules ro systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init\",\n  \"root_drive\": \"/var/lib/firecracker-containerd/runtime/default-rootfs.img\",\n  \"cpu_template\": \"T2\",\n  \"log_fifo\": \"fc-logs.fifo\",\n  \"log_levels\": [\"debug\"],\n  \"metrics_fifo\": \"fc-metrics.fifo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking System Requirements for Firecracker (Bash)\nDESCRIPTION: This script checks if the system meets the basic requirements to run Firecracker, including Linux x86_64, KVM access, kernel version, and warns about nested virtualization.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nerr=\"\"; \\\n[ \"$(uname) $(uname -m)\" = \"Linux x86_64\" ] \\\n  || err=\"ERROR: your system is not Linux x86_64.\"; \\\n[ -r /dev/kvm ] && [ -w /dev/kvm ] \\\n  || err=\"$err\\nERROR: /dev/kvm is inaccessible.\"; \\\n(( $(uname -r | cut -d. -f1)*1000 + $(uname -r | cut -d. -f2) >= 4014 )) \\\n  || err=\"$err\\nERROR: your kernel version ($(uname -r)) is too old.\"; \\\ndmesg | grep -i \"hypervisor detected\" \\\n  && echo \"WARNING: you are running in a virtual machine. Firecracker is not well tested under nested virtualization.\"; \\\n[ -z \"$err\" ] && echo \"Your system looks ready for Firecracker!\" || echo -e \"$err\"\n```\n\n----------------------------------------\n\nTITLE: Configuring firecracker-containerd (TOML)\nDESCRIPTION: This configuration file sets up the firecracker-containerd binary, specifying plugin settings, storage locations, and debug level.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\ndisabled_plugins = [\"io.containerd.grpc.v1.cri\"]\nroot = \"/var/lib/firecracker-containerd/containerd\"\nstate = \"/run/firecracker-containerd\"\n[grpc]\n  address = \"/run/firecracker-containerd/containerd.sock\"\n[plugins]\n  [plugins.\"io.containerd.snapshotter.v1.devmapper\"]\n    pool_name = \"fc-dev-thinpool\"\n    base_image_size = \"10GB\"\n    root_path = \"/var/lib/firecracker-containerd/snapshotter/devmapper\"\n\n[debug]\n  level = \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Building firecracker-containerd and Firecracker\nDESCRIPTION: Commands to build firecracker-containerd (including the necessary shim and agent) and Firecracker, and install them to /usr/local/bin.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\nmake install\nmake firecracker\nmake install-firecracker\n```\n\n----------------------------------------\n\nTITLE: Configuring Firecracker for remote snapshotters\nDESCRIPTION: JSON configuration for /etc/containerd/firecracker-runtime.json that sets up the kernel with FUSE support, rootfs with snapshotter, and network interfaces with MMDS access.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"firecracker_binary_path\": \"/usr/local/bin/firecracker\",\n  \"kernel_image_path\": \"/var/lib/firecracker-containerd/runtime/default-vmlinux.bin\",\n  \"kernel_args\": \"console=ttyS0 pnp.debug=1 noapic reboot=k panic=1 pci=off nomodules ro systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.unit=firecracker.target init=sbin/overlay-init\",\n  \"root_drive\": \"/var/lib/firecracker-containerd/runtime/rootfs-stargz.img\",\n  \"log_fifo\": \"fc-logs.fifo\",\n  \"log_levels\": [\"debug\"],\n  \"metrics_fifo\": \"fc-metrics.fifo\",\n  \"default_network_interfaces\": [\n  {\n    \"AllowMMDS\": true,\n    \"CNIConfig\": {\n      \"NetworkName\": \"fcnet\",\n      \"InterfaceName\": \"veth0\"\n    }\n  }\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring containerd for demux-snapshotter\nDESCRIPTION: TOML configuration for /etc/firecracker-containerd/config.toml that creates a proxy snapshotter directed to the demux-snapshotter service.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[proxy_plugins]\n  [proxy_plugins.proxy]\n    type = \"snapshot\"\n    address = \"/var/lib/demux-snapshotter/snapshotter.sock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring demux-snapshotter\nDESCRIPTION: TOML configuration for /etc/demux-snapshotter/config.toml that sets up the snapshotter listener, address resolver, metrics, and debug options.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[snapshotter.listener]\n  type = \"unix\"\n  address = \"/var/lib/demux-snapshotter/snapshotter.sock\"\n\n[snapshotter.proxy.address.resolver]\n  type = \"http\"\n  address = \"http://127.0.0.1:10001\"\n\n[snapshotter.metrics]\n  enable = false\n\n[debug]\n  logLevel = \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Devicemapper Thinpool for Snapshotter (Bash)\nDESCRIPTION: This script creates a devicemapper thinpool using loop devices for the snapshotter. It sets up data and metadata files, configures loop devices, and creates the thinpool.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Sets up a devicemapper thin pool with loop devices in\n# /var/lib/firecracker-containerd/snapshotter/devmapper\n\nset -ex\n\nDIR=/var/lib/firecracker-containerd/snapshotter/devmapper\nPOOL=fc-dev-thinpool\n\nif [[ ! -f \"${DIR}/data\" ]]; then\ntouch \"${DIR}/data\"\ntruncate -s 100G \"${DIR}/data\"\nfi\n\nif [[ ! -f \"${DIR}/metadata\" ]]; then\ntouch \"${DIR}/metadata\"\ntruncate -s 2G \"${DIR}/metadata\"\nfi\n\nDATADEV=\"$(losetup --output NAME --noheadings --associated ${DIR}/data)\"\nif [[ -z \"${DATADEV}\" ]]; then\nDATADEV=\"$(losetup --find --show ${DIR}/data)\"\nfi\n\nMETADEV=\"$(losetup --output NAME --noheadings --associated ${DIR}/metadata)\"\nif [[ -z \"${METADEV}\" ]]; then\nMETADEV=\"$(losetup --find --show ${DIR}/metadata)\"\nfi\n\nSECTORSIZE=512\nDATASIZE=\"$(blockdev --getsize64 -q ${DATADEV})\"\nLENGTH_SECTORS=$(bc <<< \"${DATASIZE}/${SECTORSIZE}\")\nDATA_BLOCK_SIZE=128 # see https://www.kernel.org/doc/Documentation/device-mapper/thin-provisioning.txt\nLOW_WATER_MARK=32768 # picked arbitrarily\nTHINP_TABLE=\"0 ${LENGTH_SECTORS} thin-pool ${METADEV} ${DATADEV} ${DATA_BLOCK_SIZE} ${LOW_WATER_MARK} 1 skip_block_zeroing\"\necho \"${THINP_TABLE}\"\n\nif ! $(dmsetup reload \"${POOL}\" --table \"${THINP_TABLE}\"); then\ndmsetup create \"${POOL}\" --table \"${THINP_TABLE}\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Starting Firecracker-containerd Service\nDESCRIPTION: This command starts the firecracker-containerd service in the foreground, using the configuration file created during setup.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo firecracker-containerd --config /etc/firecracker-containerd/config.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring System Limits in limits.conf\nDESCRIPTION: Sets system-wide limits for number of open files, processes, and stack size in /etc/security/limits.conf for both root and normal users. These settings are crucial for running many microVMs simultaneously.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/scaling.md#2025-04-21_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n* soft nofile 1000000\n* hard nofile 1000000\nroot soft nofile 1000000\nroot hard nofile 1000000\n* soft nproc 4000000\n* hard nproc 4000000\nroot soft nproc 4000000\nroot hard nproc 4000000\n* soft stack 65536\n* hard stack 65536\nroot soft stack 65536\nroot hard stack 65536\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Parameters with sysctl\nDESCRIPTION: Adjusts ARP cache and local port range settings using sysctl to optimize network performance for multiple microVMs. Increases garbage collection thresholds for neighbor entries.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/scaling.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w net.ipv4.neigh.default.gc_thresh1=1024\nsudo sysctl -w net.ipv4.neigh.default.gc_thresh2=2048\nsudo sysctl -w net.ipv4.neigh.default.gc_thresh3=4096\nsudo sysctl -w net.ipv4.ip_local_port_range=\"32769 65535\"\n```\n\n----------------------------------------\n\nTITLE: Setting Process and Thread Limits\nDESCRIPTION: Configures system-wide maximum number of processes and threads using sysctl commands to support high-density microVM deployments.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/scaling.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w kernel.pid_max=4194303\nsudo sysctl -w kernel.threads-max=999999999\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Custom eStargz Images with Custom Repository\nDESCRIPTION: Commands for creating an eStargz-optimized image from a custom base image and pushing it to a custom repository. This example uses environment variables to specify the source and destination image references.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/demux/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ DEFAULT_BASE_IMAGE=public.ecr.aws/amazonlinux/amazonlinux:2022\n$ DEFAULT_ESGZ_IMAGE=ghcr.io/$DESTINATION_REPO/amazonlinux:2022-esgz\n$ make \\\n    DEFAULT_BASE_IMAGE=$DEFAULT_BASE_IMAGE \\\n    DEFAULT_ESGZ_IMAGE=$DEFAULT_ESGZ_IMAGE \\\n    esgz-test-image\n$ GH_USER=xxx\n# set GH_PERSONAL_ACCESS_TOKEN with command substitution such that it does not show in shell history\n$ make \\\n    GH_USER=$GH_USER \\\n    GH_PERSONAL_ACCESS_TOKEN=`cat`\n    DEFAULT_ESGZ_IMAGE=$DEFAULT_ESGZ_IMAGE \\\n    push-esgz-test-image\n# enter personal access token and CTRL^D\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Default eStargz Images with GHCR Authentication\nDESCRIPTION: Commands for creating an eStargz-optimized Amazon Linux image and pushing it to GitHub Container Registry using the default base and destination images. This requires GitHub credentials for authentication.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/demux/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make esgz-test-image\n$ GH_USER=xxx\n# set GH_PERSONAL_ACCESS_TOKEN with command substitution such that it does not show in shell history\n$ make \\\n    GH_USER=$GH_USER \\\n    GH_PERSONAL_ACCESS_TOKEN=`cat`\n    push-esgz-test-image\n# enter personal access token and CTRL^D\n```\n\n----------------------------------------\n\nTITLE: Starting Firecracker-containerd Service\nDESCRIPTION: Command to start the firecracker-containerd service with a specified configuration file path.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo PATH=$PATH /usr/local/bin/firecracker-containerd \\\n  --config /etc/firecracker-containerd/config.toml\n```\n\n----------------------------------------\n\nTITLE: Setting up CNI Networking for Firecracker-containerd\nDESCRIPTION: Command to install CNI dependencies for networking support in firecracker-containerd.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo make demo-network\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Network Interfaces with CNI\nDESCRIPTION: JSON configuration for default network interfaces using CNI in the firecracker-containerd runtime configuration file.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"default_network_interfaces\": [\n  {\n    \"CNIConfig\": {\n      \"NetworkName\": \"fcnet\",\n      \"InterfaceName\": \"veth0\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: CNI Configuration Example for Firecracker VM Networking with ptp and tc-redirect-tap\nDESCRIPTION: Example CNI configuration that uses the standard ptp CNI plugin to create a veth device pair connected to a tap device for VM networking. This setup provides containers inside the VM with access to the 192.168.1.0/24 network and internet access via IP masquerading.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/networking.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cniVersion\": \"0.3.1\",\n  \"name\": \"fcnet\",\n  \"plugins\": [\n    {\n      \"type\": \"ptp\", // This sets up a veth pair with one end on the host and one end in the netns\n      \"ipMasq\": true,\n      \"ipam\": {\n        \"type\": \"host-local\",\n        \"subnet\": \"192.168.1.0/24\",\n        \"resolvConf\": \"/etc/resolv.conf\"\n      }\n    },\n    {\n      \"type\": \"tc-redirect-tap\" // creates a tap device redirected with the veth pair created in the previous step\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Linux kernel with FUSE support\nDESCRIPTION: Commands to build a Linux kernel with FUSE support, which is required for remote snapshotters but not included in the default AWS-provided kernel.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kernel\nmake install-kernel\n```\n\n----------------------------------------\n\nTITLE: Setting Default Runtime with Containerd Namespaces\nDESCRIPTION: Commands to create a namespace with default runtime and snapshotter labels to simplify container launching.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo firecracker-ctr --address /run/firecracker-containerd/containerd.sock \\\n  namespaces create fc\n\nsudo firecracker-ctr --address /run/firecracker-containerd/containerd.sock \\\n  namespaces label fc \\\n  containerd.io/defaults/runtime=aws.firecracker \\\n  containerd.io/defaults/snapshotter=devmapper\n\nsudo firecracker-ctr --address /run/firecracker-containerd/containerd.sock \\\n  -n fc \\\n  run --rm --tty --net-host \\\n  docker.io/library/busybox:latest busybox-test\n```\n\n----------------------------------------\n\nTITLE: Building Linux 5.10 kernel with FUSE support\nDESCRIPTION: Commands to build and install a Linux 5.10 kernel with FUSE support instead of the default 4.14 kernel.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKERNEL_VERSION=5.10 make kernel\nKERNEL_VERSION=5.10 make install-kernel\n```\n\n----------------------------------------\n\nTITLE: Building Firecracker rootfs with stargz-snapshotter\nDESCRIPTION: Commands to build a Debian-based root filesystem for the VM that includes the stargz-snapshotter for remote image loading.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake image-stargz\nmake install-stargz-rootfs\n```\n\n----------------------------------------\n\nTITLE: Setting up demo network for remote snapshotter\nDESCRIPTION: Command to set up the demo network required for remote snapshotter support, which installs CNI configuration to create a bridge and connectivity for the VM.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake demo-network\n```\n\n----------------------------------------\n\nTITLE: Running a Container with Remote Snapshotter in Firecracker MicroVM\nDESCRIPTION: Command to launch a container inside a Firecracker microVM using the remote snapshotter. This example uses a pre-converted amazonlinux image in estargz format with lazy loading supplied by the stargz-snapshotter.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/examples/cmd/remote-snapshotter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./remote-snapshotter ghcr.io/firecracker-microvm/firecracker-containerd/amazonlinux:latest-esgz\n```\n\n----------------------------------------\n\nTITLE: Configuring containerd proxy_plugins for demux snapshotter\nDESCRIPTION: Containerd configuration that sets up the proxy plugin to use the demux snapshotter. This directs containerd to send snapshot requests to the specified socket address.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[proxy_plugins]\n  [proxy_plugins.proxy]\n    type = \"snapshot\"\n    address = \"/var/lib/demux-snapshotter/snapshotter.sock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring demux snapshotter listener\nDESCRIPTION: Demux snapshotter configuration for the listener that receives requests from containerd. This specifies the Unix socket path that matches the containerd proxy plugin configuration.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[snapshotter.listener]\n  type = \"unix\"\n  address = \"/var/lib/demux-snapshotter/snapshotter.sock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring listener in demux-snapshotter\nDESCRIPTION: Configuration for the demux snapshotter listener that specifies the interface the service will use to receive snapshot requests.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[snapshotter.listener]\n  type = \"unix\"\n  address = \"/var/lib/demux-snapshotter/snapshotter.sock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Logging in Firecracker-Containerd (JSON)\nDESCRIPTION: This snippet demonstrates a more advanced logging configuration for firecracker-containerd. It sets different log levels for different components: 'info' for general logging, 'debug' for Firecracker, and 'error' for firecracker-containerd. This allows for fine-grained control over logging verbosity for different parts of the system.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/logging.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"firecracker_binary_path\": \"/usr/local/bin/firecracker\",\n  \"kernel_image_path\": \"/var/lib/firecracker-containerd/runtime/default-vmlinux.bin\",\n  \"kernel_args\": \"ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init\",\n  \"root_drive\": \"/var/lib/firecracker-containerd/runtime/default-rootfs.img\",\n  \"cpu_template\": \"T2\",\n  \"log:levels\": [\"info\",\"firecracker:debug\",\"firecracker-containerd:error\"],\n  \"jailer\": {\n    \"runc_binary_path\": \"/usr/local/bin/runc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring proxy address resolver\nDESCRIPTION: Configuration for the proxy address resolver that specifies the interface to use for resolving proxy addressing for remote snapshotters.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[snapshotter.proxy.address.resolver]\n  type = \"http\"\n  address = \"http://127.0.0.1:10001\"\n```\n\n----------------------------------------\n\nTITLE: Configuring metrics collection\nDESCRIPTION: Configuration to enable remote snapshotter metrics collection via a demux snapshotter endpoint, including port range and service discovery settings for Prometheus.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[snapshotter.metrics]\n  enable = true\n  port_range = \"9000-9999\"\n\n  [snapshotter.metrics.service_discovery]\n    enable = true\n    port = 8080\n```\n\n----------------------------------------\n\nTITLE: Starting firecracker-containerd daemon\nDESCRIPTION: Command to start the firecracker-containerd daemon with the specified configuration file.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfirecracker-containerd --config /etc/firecracker-containerd/config.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging in Firecracker-Containerd (JSON)\nDESCRIPTION: This snippet shows a basic configuration for firecracker-containerd, including the 'log_levels' field set to debug. It demonstrates how to specify the paths for the Firecracker binary, kernel image, and root drive, as well as kernel arguments and CPU template.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"firecracker_binary_path\": \"/usr/local/bin/firecracker\",\n  \"kernel_image_path\": \"/var/lib/firecracker-containerd/runtime/default-vmlinux.bin\",\n  \"kernel_args\": \"ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init\",\n  \"root_drive\": \"/var/lib/firecracker-containerd/runtime/default-rootfs.img\",\n  \"cpu_template\": \"T2\",\n  \"log_levels\": [\"debug\"],\n  \"jailer\": {\n    \"runc_binary_path\": \"/usr/local/bin/runc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting demux-snapshotter daemon\nDESCRIPTION: Command to start the demux-snapshotter daemon that routes snapshotter requests to the appropriate remote snapshotter in VMs.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsnapshotter/demux-snapshotter\n```\n\n----------------------------------------\n\nTITLE: Starting http-address-resolver daemon\nDESCRIPTION: Command to start the http-address-resolver daemon that maps containerd namespace to VM vsock address.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsnapshotter/http-address-resolver\n```\n\n----------------------------------------\n\nTITLE: Downloading Kernel for Firecracker (Bash)\nDESCRIPTION: This command downloads the appropriate kernel for use with Firecracker.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -o hello-vmlinux.bin https://s3.amazonaws.com/spec.ccfc.min/img/quickstart_guide/x86_64/kernels/vmlinux.bin\n```\n\n----------------------------------------\n\nTITLE: Running Firecracker-containerd Task Workflow with Networking\nDESCRIPTION: Command to run the task workflow example with networking configuration. Sets the container IP address to 172.16.0.2/24 and gateway to 172.16.0.1 using a previously created tap0 device.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/examples/taskworkflow.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo /path/to/firecracker-containerd/examples/taskworkflow -ip 172.16.0.2/24 \\\n    -gw 172.16.0.1\n```\n\n----------------------------------------\n\nTITLE: Creating Firecracker-containerd Directory\nDESCRIPTION: Command to create the default shim base directory for firecracker-containerd which is required before starting the service.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/lib/firecracker-containerd\n```\n\n----------------------------------------\n\nTITLE: Pulling Container Images with Firecracker-ctr\nDESCRIPTION: Command to pull a container image using firecracker-ctr client with the devmapper snapshotter.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo firecracker-ctr --address /run/firecracker-containerd/containerd.sock images \\\n  pull --snapshotter devmapper \\\n  docker.io/library/busybox:latest\n```\n\n----------------------------------------\n\nTITLE: Building Docker Credential Helper MMDS\nDESCRIPTION: Command to build the docker-credential-mmds binary using make.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docker-credential-mmds/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Inside Firecracker to Use MMDS Credentials\nDESCRIPTION: JSON configuration for Docker inside the Firecracker microVM to use the MMDS credential helper. This should be placed in ~/.docker/config.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docker-credential-mmds/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"credsStore\": \"mmds\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example MMDS Credentials Format for Docker Registry Authentication\nDESCRIPTION: JSON structure showing how Docker registry credentials should be formatted in MMDS. This example includes credentials for ECR public gallery and Docker Hub.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docker-credential-mmds/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"docker-credentials\": {\n\t\t\"public.ecr.aws\": {\n\t\t\t\"username\": \"123456789012\",\n\t\t\t\"password\": \"access_key\"\n\t\t},\n\t\t\"docker.io\": {\n\t\t\t\"username\": \"user\",\n\t\t\t\"password\": \"pass\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Credentials via Firecracker HTTP API\nDESCRIPTION: Curl command to set Docker registry credentials in MMDS using Firecracker's HTTP API. This method uses a Unix socket to communicate with the Firecracker instance.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docker-credential-mmds/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --unix-socket /tmp/firecracker.socket -i \\\n    -X PUT \"http://localhost/mmds\"            \\\n    -H \"Content-Type: application/json\"       \\\n    -d '{\n\t\t\"docker-credentials\": {\n\t\t\t\"public.ecr.aws\": {\n\t\t\t\t\"username\": \"123456789012\",\n\t\t\t\t\"password\": \"access_key\"\n\t\t\t},\n\t\t\t\"docker.io\": {\n\t\t\t\t\"username\": \"user\",\n\t\t\t\t\"password\": \"pass\"\n\t\t\t}\t\n\t\t}\n\t}'\n```\n\n----------------------------------------\n\nTITLE: Defining CNI Network Interface Configuration in Protobuf\nDESCRIPTION: Protocol buffer message definitions for configuring network interfaces using CNI plugins. Includes structures for CNI configuration, static network configuration, and IP configuration parameters.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/networking.md#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage FirecrackerNetworkInterface {\n    // <existing fields...>\n    \n    // CNI Configuration that will be used to configure the network interface\n    CNIConfiguration CNIConfig;\n\n    // Static configuration that will be used to configure the network interface\n    StaticNetworkConfiguration StaticConfig;\n}\n\nmessage FirecrackerCNIConfiguration {\n    // Name of the CNI network that will be used to configure the VM\n    string NetworkName;\n    \n    // IF_NAME CNI parameter provided to plugins for the name of devices to create\n    string InterfaceName;\n    \n    // Paths to CNI bin directories, CNI conf directory and CNI cache directory, \n    // respectively, that will be used to configure the VM.\n    repeated string BinPath;\n    string ConfDirectory;\n    string CacheDirectory;\n    \n    // CNI Args passed to plugins\n    repeated CNIArg Args;\n}\n\nmessage StaticNetworkConfiguration {\n    string MacAddress;\n    string HostDevName;\n    IPConfiguration IPConfig;\n}\n\nmessage IPConfiguration {\n    // Network configuration that will be applied to a network interface in a\n    // Guest VM on boot.\n    string PrimaryAddress;\n    string GatewayAddress;\n    repeated string Nameservers;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Credentials via Firecracker Go SDK\nDESCRIPTION: Go code example showing how to set Docker credentials in MMDS using the Firecracker Go SDK. This approach is recommended for larger systems where additional features like credential refreshing might be needed.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docker-credential-mmds/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncredentials := `{\n\t\"docker-credentials\": {\n\t\t\"public.ecr.aws\": {\n\t\t\t\"username\": \"123456789012\",\n\t\t\t\"password\": \"access_key\"\n\t\t},\n\t\t\"docker.io\": {\n\t\t\t\"username\": \"user\",\n\t\t\t\"password\": \"pass\n\t\t}\n\t}\n}`\nfcClient, _ := client.New(\"/tmp/firecracker.socket\")\nfcClient.SetVMMetadata(ctx, &proto.SetVMMetadataRequest{\n\t\tVMID:     vmID,\n\t\tMetadata: credentials,\n\t})\n```\n\n----------------------------------------\n\nTITLE: HTTP GET request for address resolver\nDESCRIPTION: Example HTTP GET request sent to the address resolver agent to query the network address for a remote snapshotter based on the namespace.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /address?namespace=\"cbfad871-0862-4dd6-ae7a-52e9b1c16ede\"\n```\n\n----------------------------------------\n\nTITLE: JSON response from address resolver\nDESCRIPTION: Example JSON response from the address resolver agent that provides connection details for the remote snapshotter, including network type, address, ports, and labels.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network\": \"unix\",\n  \"address\": \"/var/lib/firecracker-containerd/shim-base/default#cbfad871-0862-4dd6-ae7a-52e9b1c16ede/firecracker.vsock\",\n  \"snapshotter_port\": \"10000\",\n  \"metrics_port\": \"10001\",\n  \"labels\": {\n    \"namespace\": \"cbfad871-0862-4dd6-ae7a-52e9b1c16ede\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building demux-snapshotter and http-address-resolver\nDESCRIPTION: Command to build the demux-snapshotter and http-address-resolver binaries using the make system.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Running unit tests\nDESCRIPTION: Command to run unit tests for the demux-snapshotter package using the make system.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on RPM-based Systems for Firecracker-containerd\nDESCRIPTION: This script installs the necessary dependencies for firecracker-containerd on Amazon Linux 2, including Go 1.23, Docker CE, and device-mapper. It uses Amazon Linux extras for Docker installation.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncd ~\n\n# Install git, make, curl\nsudo yum -y update\nsudo yum -y install \\\n  make \\\n  git \\\n  curl \\\n  e2fsprogs \\\n  util-linux \\\n  bc \\\n  gnupg \\\n  gcc\n\n\n# Amazon Linux 2 packages can sometimes be dated, so let's install using\n# the Go installer. The installer will handle any path changes and just\n# need to source environment variables afterwards for the existing shell session.\ncurl -LO https://get.golang.org/$(uname)/go_installer && \\\n  chmod +x go_installer && \\\n  ./go_installer -version 1.23 && \\\n  rm go_installer && \\\n  source .bash_profile\n\ncd ~\n\n# Install Docker CE\n# Docker CE includes containerd, but we need a separate containerd binary, built\n# in a later step\nsudo yum -y update\nsudo amazon-linux-extras install -y  docker\nsudo usermod -aG docker $(whoami)\n\nsudo yum -y install device-mapper\n```\n\n----------------------------------------\n\nTITLE: Building the Remote Snapshotter Example for Firecracker Containerd\nDESCRIPTION: Command to build the remote snapshotter example application using make. This compiles the necessary components to create a client for launching estargz images in Firecracker microVMs.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/examples/cmd/remote-snapshotter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake remote-snapshotter\n```\n\n----------------------------------------\n\nTITLE: Defining User-Managed Network Namespace Configuration in Protobuf\nDESCRIPTION: Protocol buffer message definitions for user-managed network namespace configuration. Includes structures for DNS configuration, IP configuration, and network interface settings.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/networking.md#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage FirecrackerDNSConfiguration {\n    // DNS nameserver related configuration\n}\n\nmessage FirecrackerIPConfiguration {\n    // IP+Route related configuration\n}\n\nmessage FirecrackerNetworkConfiguration {\n    // (optional) path to a bind-mounted network namespace that the VM will be spawned in.\n    // If unset, defaults to the network namespace containerd is running in.\n    string NetworkNSPath;\n\n    // (optional) configuration that will be written to the VM's /etc/resolv.conf\n    // If unset, defaults to not overwriting whatever /etc/resolv.conf is included\n    // in the VM image (if any).\n    FirecrackerDNSConfiguration DNSConfiguration;\n\n    // (optional) IP configuration that will be set on the nic seen by the VM guest.\n    // If unset, defaults to not performing any configuration inside the VM\n    FirecrackerIPConfiguration IPConfiguration;\n \n    // The existing FirecrackerNetworkInterface configuration existing today\n    // which specifies the name of the tap device on the host and rate limiters\n    repeated FirecrackerNetworkInterface NetworkInterfaces;\n}\n\nmessage CreateVMRequest {\n    // <same existing fields except FirecrackerNetworkInterface which is replaced with the following...>\n    FirecrackerNetworkConfiguration NetworkConfiguration;\n}\n```\n\n----------------------------------------\n\nTITLE: Agent Service Interface Definition in Protobuf\nDESCRIPTION: A proposed gRPC service interface for the Agent component, inspired by Kata Containers. This interface provides methods for container lifecycle management, stdio handling, networking, and miscellaneous operations like file copying.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/design-approaches.md#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Agent {\n    // execution\n    rpc CreateContainer(CreateContainerRequest) returns (google.protobuf.Empty);\n    rpc StartContainer(StartContainerRequest) returns (google.protobuf.Empty);\n\n    rpc RemoveContainer(RemoveContainerRequest) returns (google.protobuf.Empty);\n    rpc ExecProcess(ExecProcessRequest) returns (google.protobuf.Empty);\n    rpc ListProcesses(ListProcessesRequest) returns (ListProcessesResponse);\n    rpc UpdateContainer(UpdateContainerRequest) returns (google.protobuf.Empty);\n    rpc StatsContainer(StatsContainerRequest) returns (StatsContainerResponse);\n    rpc PauseContainer(PauseContainerRequest) returns (google.protobuf.Empty);\n    rpc ResumeContainer(ResumeContainerRequest) returns (google.protobuf.Empty);\n\n    // stdio\n    rpc WriteStdin(WriteStreamRequest) returns (WriteStreamResponse);\n    rpc ReadStdout(ReadStreamRequest) returns (ReadStreamResponse);\n    rpc ReadStderr(ReadStreamRequest) returns (ReadStreamResponse);\n    rpc CloseStdin(CloseStdinRequest) returns (google.protobuf.Empty);\n    rpc TtyWinResize(TtyWinResizeRequest) returns (google.protobuf.Empty);\n\n    // networking\n    rpc UpdateInterface(UpdateInterfaceRequest) returns (types.Interface);\n    rpc UpdateRoutes(UpdateRoutesRequest) returns (Routes);\n    rpc ListInterfaces(ListInterfacesRequest) returns(Interfaces);\n    rpc ListRoutes(ListRoutesRequest) returns (Routes);\n\n    // misc\n    rpc CopyFile(CopyFileRequest) returns (google.protobuf.Empty);\n}\n```\n\n----------------------------------------\n\nTITLE: Container and Device Message Definitions in Protobuf\nDESCRIPTION: Message definitions for creating containers and specifying devices in the Agent API. The CreateContainerRequest includes container identification and OCI specification, while the Device message represents devices that can be defined through the Linux Device list of the OCI specification.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/design-approaches.md#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CreateContainerRequest {\n    string container_id = 1;\n    string exec_id = 2;\n    repeated Device devices = 4;\n    Spec OCI = 6;\n}\n\n// Device represents only the devices that could have been defined through the\n// Linux Device list of the OCI specification.\nmessage Device {\n    string id = 1;\n    string type = 2;\n    string vm_path = 3;\n    string container_path = 4;\n    repeated string options = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CreateVM API for Drive Mount Support in Firecracker-containerd\nDESCRIPTION: Proposed API changes to support mounting additional drives in Firecracker VMs. The update introduces structured messages for both root drives and additional drive mounts, allowing users to specify host paths, mount points, filesystem types, and mount options. The implementation will handle the mounting of these drives during VM initialization.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/drive-mounts-proposal.md#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CreateVMRequest {\n    // existing fields...\n\n    // Replace \"FirecrackerDrive RootDrive\" with\n    FirecrackerRootDrive RootDrive;\n\n    // Replace \"repeated FirecrackerDrive AdditionalDrives\" with\n    repeated FirecrackerDriveMount DriveMounts;\n}\n\nmessage FirecrackerRootDrive {\n    // (Required) HostPath is the path on the host to the filesystem image or device\n    // that will supply the rootfs of the VM.\n    string HostPath;\n\n    // (Optional) If the HostPath points to a drive or image with multiple\n    // partitions, Partuuid specifies which partition will be used to boot\n    // the VM\n    string Partuuid;\n\n    // (Optional) If set to true, IsReadOnly results in the specified HostPath\n    // being opened as read-only by the Firecracker VMM.\n    bool IsReadOnly;\n\n    // (Optional) RateLimiter configuration that will be applied to the\n    // backing-drive for the VM's rootfs\n    FirecrackerRateLimiter RateLimiter;\n}\n\nmessage FirecrackerDriveMount {\n    // (Required) HostPath is the path on the host to the filesystem image or device\n    // that will be mounted inside the VM.\n    string HostPath;\n\n    // (Required) VMPath is the path inside the VM guest at which the filesystem\n    // image or device will be mounted.\n    string VMPath;\n\n    // (Required) FilesystemType is the filesystem type (i.e. ext4, xfs, etc.), as\n    // used when mounting the filesystem image inside the VM. The VM guest kernel\n    // is expected to have support for this filesystem.\n    string FilesystemType;\n    \n    // (Optional) Options are fstab-style options that the mount will be performed\n    // within the VM (i.e. [\"ro\", \"noatime\"]). Defaults to none if not specified. \n    // If \"ro\" is specified, the specified HostPath will be also opened as read-only\n    // by the Firecracker VMM.\n    repeated string Options;\n\n    // (Optional) RateLimiter that will be applied to the backing-drive.\n    FirecrackerRateLimiter RateLimiter;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic Firecracker-containerd Task Workflow\nDESCRIPTION: Command to run the basic task workflow example without networking setup. This requires sudo privileges to execute the prebuilt example binary.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/examples/taskworkflow.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo /path/to/firecracker-containerd/examples/taskworkflow\n```\n\n----------------------------------------\n\nTITLE: Creating demux-snapshotter runtime directory\nDESCRIPTION: Command to create the necessary directory for the demux-snapshotter to store its runtime files.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/docs/remote-snapshotter-getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/lib/demux-snapshotter\n```\n\n----------------------------------------\n\nTITLE: Running integration tests\nDESCRIPTION: Command to run integration tests for the demux-snapshotter package using the make system.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/snapshotter/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake integ-test\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Containerd Binary in Markdown\nDESCRIPTION: This code snippet is a Markdown header and description explaining the purpose of the custom containerd binary with embedded firecracker-control GRPC plugin. It emphasizes that this setup is for development simplification and not recommended for production use.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/firecracker-control/cmd/containerd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# README\n\nThis a is custom `containerd` binary which embeds the `firecracker-control` GRPC plugin (instead of using it as a golang\nplugin binary) in order to simplify the development process. It's not recommended to use this in production.\n```\n\n----------------------------------------\n\nTITLE: Building the containerd-firecracker-runtime Component with Make\nDESCRIPTION: Simple make command to build the containerd-shim-aws-firecracker binary in the current working directory.\nSOURCE: https://github.com/firecracker-microvm/firecracker-containerd/blob/main/runtime/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```"
  }
]